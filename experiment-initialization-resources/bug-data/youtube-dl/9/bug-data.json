{
    "youtube-dl:9": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/youtube-dl_9/youtube_dl/YoutubeDL.py": {
            "buggy_functions": [
                {
                    "function_name": "build_format_selector",
                    "function_code": "def build_format_selector(self, format_spec):\n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for type, string, start, _, _ in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n\n    def _parse_format_selection(tokens, endwith=[]):\n        selectors = []\n        current_selector = None\n        for type, string, start, _, _ in tokens:\n            # ENCODING is only defined in python 3.x\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string in endwith:\n                    break\n                elif string == ')':\n                    # ')' will be handled by the parentheses group\n                    tokens.restore_last_token()\n                    break\n                if string == ',':\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    current_selector = FormatSelector(GROUP, _parse_format_selection(tokens, [')']), [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(MERGE, (video_selector, audio_selector), []))\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n\n    def _build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [_build_selector_function(s) for s in selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    for format in f(formats):\n                        yield format\n            return selector_function\n        elif selector.type == GROUP:\n            selector_function = _build_selector_function(selector.selector)\n        elif selector.type == PICKFIRST:\n            fs = [_build_selector_function(s) for s in selector.selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    picked_formats = list(f(formats))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == SINGLE:\n            format_spec = selector.selector\n\n            def selector_function(formats):\n                if format_spec == 'all':\n                    for f in formats:\n                        yield f\n                elif format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == 'worst' else -1\n                    audiovideo_formats = [\n                        f for f in formats\n                        if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                    elif (all(f.get('acodec') != 'none' for f in formats) or\n                          all(f.get('vcodec') != 'none' for f in formats)):\n                        yield formats[format_idx]\n                elif format_spec == 'bestaudio':\n                    audio_formats = [\n                        f for f in formats\n                        if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[-1]\n                elif format_spec == 'worstaudio':\n                    audio_formats = [\n                        f for f in formats\n                        if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[0]\n                elif format_spec == 'bestvideo':\n                    video_formats = [\n                        f for f in formats\n                        if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[-1]\n                elif format_spec == 'worstvideo':\n                    video_formats = [\n                        f for f in formats\n                        if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[0]\n                else:\n                    extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                    if format_spec in extensions:\n                        filter_f = lambda f: f['ext'] == format_spec\n                    else:\n                        filter_f = lambda f: f['format_id'] == format_spec\n                    matches = list(filter(filter_f, formats))\n                    if matches:\n                        yield matches[-1]\n        elif selector.type == MERGE:\n            def _merge(formats_info):\n                format_1, format_2 = [f['format_id'] for f in formats_info]\n                # The first format must contain the video and the\n                # second the audio\n                if formats_info[0].get('vcodec') == 'none':\n                    self.report_error('The first format must '\n                                      'contain the video, try using '\n                                      '\"-f %s+%s\"' % (format_2, format_1))\n                    return\n                output_ext = (\n                    formats_info[0]['ext']\n                    if self.params.get('merge_output_format') is None\n                    else self.params['merge_output_format'])\n                return {\n                    'requested_formats': formats_info,\n                    'format': '%s+%s' % (formats_info[0].get('format'),\n                                         formats_info[1].get('format')),\n                    'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                            formats_info[1].get('format_id')),\n                    'width': formats_info[0].get('width'),\n                    'height': formats_info[0].get('height'),\n                    'resolution': formats_info[0].get('resolution'),\n                    'fps': formats_info[0].get('fps'),\n                    'vcodec': formats_info[0].get('vcodec'),\n                    'vbr': formats_info[0].get('vbr'),\n                    'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                    'acodec': formats_info[1].get('acodec'),\n                    'abr': formats_info[1].get('abr'),\n                    'ext': output_ext,\n                }\n            video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n            def selector_function(formats):\n                formats = list(formats)\n                for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                    yield _merge(pair)\n\n        filters = [self._build_format_filter(f) for f in selector.filters]\n\n        def final_selector(formats):\n            for _filter in filters:\n                formats = list(filter(_filter, formats))\n            return selector_function(formats)\n        return final_selector\n\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    class TokenIterator(object):\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 913,
                    "end_line": 1124,
                    "variables": {
                        "message": [
                            915,
                            918
                        ],
                        "format": [
                            986,
                            987,
                            916,
                            973
                        ],
                        "note": [
                            917
                        ],
                        "format_spec": [
                            1024,
                            1030,
                            1001,
                            1097,
                            1004,
                            1036,
                            1101,
                            1007,
                            1008,
                            1044,
                            917,
                            1045,
                            1047,
                            1018
                        ],
                        "start": [
                            928,
                            965,
                            937,
                            973,
                            917
                        ],
                        "SyntaxError": [
                            918
                        ],
                        "PICKFIRST": [
                            920,
                            957,
                            991
                        ],
                        "MERGE": [
                            1051,
                            921,
                            971
                        ],
                        "SINGLE": [
                            960,
                            1000,
                            922,
                            942
                        ],
                        "GROUP": [
                            923,
                            989,
                            966
                        ],
                        "FormatSelector": [
                            960,
                            966,
                            971,
                            942,
                            924,
                            957
                        ],
                        "collections.namedtuple": [
                            924
                        ],
                        "collections": [
                            924
                        ],
                        "filter_parts": [
                            930,
                            932,
                            927
                        ],
                        "type": [
                            928,
                            929,
                            937,
                            939,
                            941,
                            974,
                            943
                        ],
                        "string": [
                            928,
                            929,
                            963,
                            932,
                            967,
                            937,
                            973,
                            942,
                            944,
                            946,
                            950,
                            953,
                            958
                        ],
                        "_": [
                            928,
                            937
                        ],
                        "tokens": [
                            928,
                            961,
                            1123,
                            966,
                            937,
                            969,
                            1099,
                            1105,
                            948,
                            955
                        ],
                        "tokenize.OP": [
                            929,
                            943
                        ],
                        "tokenize": [
                            929,
                            939,
                            1100,
                            941,
                            974,
                            943
                        ],
                        "join": [
                            930
                        ],
                        "filter_parts.append": [
                            932
                        ],
                        "selectors": [
                            935,
                            971,
                            977,
                            978,
                            951,
                            957
                        ],
                        "current_selector": [
                            960,
                            962,
                            964,
                            966,
                            936,
                            968,
                            970,
                            942,
                            976,
                            977,
                            951,
                            952,
                            954,
                            956,
                            959
                        ],
                        "getattr": [
                            939
                        ],
                        "tokenize.NAME": [
                            941
                        ],
                        "tokenize.NUMBER": [
                            941
                        ],
                        "endwith": [
                            944
                        ],
                        "tokens.restore_last_token": [
                            948
                        ],
                        "selectors.append": [
                            977,
                            971,
                            957,
                            951
                        ],
                        "first_choice": [
                            954,
                            957
                        ],
                        "second_choice": [
                            955,
                            957
                        ],
                        "_parse_format_selection": [
                            969,
                            955,
                            966,
                            1123
                        ],
                        "format_filter": [
                            961,
                            962
                        ],
                        "_parse_filter": [
                            961
                        ],
                        "current_selector.filters.append": [
                            962
                        ],
                        "current_selector.filters": [
                            962
                        ],
                        "syntax_error": [
                            973,
                            1101,
                            965
                        ],
                        "video_selector": [
                            968,
                            1082,
                            971,
                            1086
                        ],
                        "audio_selector": [
                            969,
                            1082,
                            971,
                            1086
                        ],
                        "tokenize.ENDMARKER": [
                            974
                        ],
                        "isinstance": [
                            981
                        ],
                        "selector": [
                            992,
                            1089,
                            1000,
                            1001,
                            981,
                            982,
                            1082,
                            1051,
                            989,
                            990,
                            991
                        ],
                        "list": [
                            996,
                            1093,
                            1099,
                            981,
                            1048,
                            1085
                        ],
                        "fs": [
                            992,
                            985,
                            995,
                            982
                        ],
                        "_build_selector_function": [
                            992,
                            1124,
                            982,
                            1082,
                            990
                        ],
                        "s": [
                            992,
                            982
                        ],
                        "f": [
                            1026,
                            1027,
                            1032,
                            1033,
                            1038,
                            1039,
                            1045,
                            1047,
                            1053,
                            1089,
                            985,
                            986,
                            995,
                            996,
                            1005,
                            1006,
                            1010,
                            1011,
                            1015,
                            1016,
                            1020,
                            1021
                        ],
                        "formats": [
                            1026,
                            996,
                            1093,
                            1094,
                            1032,
                            1005,
                            1038,
                            1010,
                            1015,
                            1016,
                            1017,
                            986,
                            1020,
                            1085,
                            1086,
                            1048
                        ],
                        "selector_function": [
                            1094,
                            988,
                            990
                        ],
                        "selector.type": [
                            1000,
                            1051,
                            989,
                            991
                        ],
                        "selector.selector": [
                            992,
                            1001,
                            1082,
                            990
                        ],
                        "picked_formats": [
                            996,
                            997,
                            998
                        ],
                        "format_idx": [
                            1008,
                            1017,
                            1013
                        ],
                        "audiovideo_formats": [
                            1009,
                            1012,
                            1013
                        ],
                        "f.get": [
                            1027,
                            1033,
                            1039,
                            1011,
                            1015,
                            1016,
                            1021
                        ],
                        "all": [
                            1016,
                            1015
                        ],
                        "audio_formats": [
                            1025,
                            1028,
                            1029,
                            1019,
                            1022,
                            1023
                        ],
                        "video_formats": [
                            1031,
                            1034,
                            1035,
                            1037,
                            1040,
                            1041
                        ],
                        "extensions": [
                            1043,
                            1044
                        ],
                        "filter_f": [
                            1048,
                            1045,
                            1047
                        ],
                        "matches": [
                            1048,
                            1049,
                            1050
                        ],
                        "filter": [
                            1048,
                            1093
                        ],
                        "format_1": [
                            1059,
                            1053
                        ],
                        "format_2": [
                            1059,
                            1053
                        ],
                        "formats_info": [
                            1056,
                            1062,
                            1066,
                            1067,
                            1068,
                            1069,
                            1070,
                            1071,
                            1072,
                            1073,
                            1074,
                            1075,
                            1076,
                            1077,
                            1078,
                            1079,
                            1053
                        ],
                        "get": [
                            1056,
                            1067,
                            1068,
                            1069,
                            1070,
                            1071,
                            1072,
                            1073,
                            1074,
                            1075,
                            1076,
                            1077,
                            1078,
                            1079
                        ],
                        "self.report_error": [
                            1057
                        ],
                        "self": [
                            1057,
                            1089,
                            1121,
                            1063,
                            1064,
                            1105,
                            1106,
                            1109,
                            1112,
                            1114,
                            1115
                        ],
                        "output_ext": [
                            1080,
                            1061
                        ],
                        "self.params.get": [
                            1063
                        ],
                        "self.params": [
                            1064,
                            1063
                        ],
                        "map": [
                            1082
                        ],
                        "pair": [
                            1086,
                            1087
                        ],
                        "itertools.product": [
                            1086
                        ],
                        "itertools": [
                            1086
                        ],
                        "_merge": [
                            1087
                        ],
                        "filters": [
                            1089,
                            1092
                        ],
                        "self._build_format_filter": [
                            1089
                        ],
                        "selector.filters": [
                            1089
                        ],
                        "_filter": [
                            1092,
                            1093
                        ],
                        "final_selector": [
                            1095
                        ],
                        "stream": [
                            1097,
                            1099
                        ],
                        "io.BytesIO": [
                            1097
                        ],
                        "io": [
                            1097
                        ],
                        "format_spec.encode": [
                            1097
                        ],
                        "compat_tokenize_tokenize": [
                            1099
                        ],
                        "stream.readline": [
                            1099
                        ],
                        "tokenize.TokenError": [
                            1100
                        ],
                        "len": [
                            1112,
                            1101
                        ],
                        "object": [
                            1103
                        ],
                        "self.tokens": [
                            1112,
                            1105,
                            1114
                        ],
                        "self.counter": [
                            1121,
                            1106,
                            1112,
                            1114,
                            1115
                        ],
                        "StopIteration": [
                            1113
                        ],
                        "value": [
                            1114,
                            1116
                        ],
                        "next": [
                            1118
                        ],
                        "__next__": [
                            1118
                        ],
                        "parsed_selector": [
                            1123,
                            1124
                        ],
                        "iter": [
                            1123
                        ],
                        "TokenIterator": [
                            1123
                        ]
                    },
                    "filtered_variables": {
                        "message": [
                            915,
                            918
                        ],
                        "note": [
                            917
                        ],
                        "format_spec": [
                            1024,
                            1030,
                            1001,
                            1097,
                            1004,
                            1036,
                            1101,
                            1007,
                            1008,
                            1044,
                            917,
                            1045,
                            1047,
                            1018
                        ],
                        "start": [
                            928,
                            965,
                            937,
                            973,
                            917
                        ],
                        "PICKFIRST": [
                            920,
                            957,
                            991
                        ],
                        "MERGE": [
                            1051,
                            921,
                            971
                        ],
                        "SINGLE": [
                            960,
                            1000,
                            922,
                            942
                        ],
                        "GROUP": [
                            923,
                            989,
                            966
                        ],
                        "FormatSelector": [
                            960,
                            966,
                            971,
                            942,
                            924,
                            957
                        ],
                        "collections.namedtuple": [
                            924
                        ],
                        "collections": [
                            924
                        ],
                        "filter_parts": [
                            930,
                            932,
                            927
                        ],
                        "string": [
                            928,
                            929,
                            963,
                            932,
                            967,
                            937,
                            973,
                            942,
                            944,
                            946,
                            950,
                            953,
                            958
                        ],
                        "_": [
                            928,
                            937
                        ],
                        "tokens": [
                            928,
                            961,
                            1123,
                            966,
                            937,
                            969,
                            1099,
                            1105,
                            948,
                            955
                        ],
                        "tokenize.OP": [
                            929,
                            943
                        ],
                        "tokenize": [
                            929,
                            939,
                            1100,
                            941,
                            974,
                            943
                        ],
                        "join": [
                            930
                        ],
                        "filter_parts.append": [
                            932
                        ],
                        "selectors": [
                            935,
                            971,
                            977,
                            978,
                            951,
                            957
                        ],
                        "current_selector": [
                            960,
                            962,
                            964,
                            966,
                            936,
                            968,
                            970,
                            942,
                            976,
                            977,
                            951,
                            952,
                            954,
                            956,
                            959
                        ],
                        "tokenize.NAME": [
                            941
                        ],
                        "tokenize.NUMBER": [
                            941
                        ],
                        "endwith": [
                            944
                        ],
                        "tokens.restore_last_token": [
                            948
                        ],
                        "selectors.append": [
                            977,
                            971,
                            957,
                            951
                        ],
                        "first_choice": [
                            954,
                            957
                        ],
                        "second_choice": [
                            955,
                            957
                        ],
                        "_parse_format_selection": [
                            969,
                            955,
                            966,
                            1123
                        ],
                        "format_filter": [
                            961,
                            962
                        ],
                        "_parse_filter": [
                            961
                        ],
                        "current_selector.filters.append": [
                            962
                        ],
                        "current_selector.filters": [
                            962
                        ],
                        "syntax_error": [
                            973,
                            1101,
                            965
                        ],
                        "video_selector": [
                            968,
                            1082,
                            971,
                            1086
                        ],
                        "audio_selector": [
                            969,
                            1082,
                            971,
                            1086
                        ],
                        "tokenize.ENDMARKER": [
                            974
                        ],
                        "selector": [
                            992,
                            1089,
                            1000,
                            1001,
                            981,
                            982,
                            1082,
                            1051,
                            989,
                            990,
                            991
                        ],
                        "fs": [
                            992,
                            985,
                            995,
                            982
                        ],
                        "_build_selector_function": [
                            992,
                            1124,
                            982,
                            1082,
                            990
                        ],
                        "s": [
                            992,
                            982
                        ],
                        "f": [
                            1026,
                            1027,
                            1032,
                            1033,
                            1038,
                            1039,
                            1045,
                            1047,
                            1053,
                            1089,
                            985,
                            986,
                            995,
                            996,
                            1005,
                            1006,
                            1010,
                            1011,
                            1015,
                            1016,
                            1020,
                            1021
                        ],
                        "formats": [
                            1026,
                            996,
                            1093,
                            1094,
                            1032,
                            1005,
                            1038,
                            1010,
                            1015,
                            1016,
                            1017,
                            986,
                            1020,
                            1085,
                            1086,
                            1048
                        ],
                        "selector_function": [
                            1094,
                            988,
                            990
                        ],
                        "selector.type": [
                            1000,
                            1051,
                            989,
                            991
                        ],
                        "selector.selector": [
                            992,
                            1001,
                            1082,
                            990
                        ],
                        "picked_formats": [
                            996,
                            997,
                            998
                        ],
                        "format_idx": [
                            1008,
                            1017,
                            1013
                        ],
                        "audiovideo_formats": [
                            1009,
                            1012,
                            1013
                        ],
                        "f.get": [
                            1027,
                            1033,
                            1039,
                            1011,
                            1015,
                            1016,
                            1021
                        ],
                        "audio_formats": [
                            1025,
                            1028,
                            1029,
                            1019,
                            1022,
                            1023
                        ],
                        "video_formats": [
                            1031,
                            1034,
                            1035,
                            1037,
                            1040,
                            1041
                        ],
                        "extensions": [
                            1043,
                            1044
                        ],
                        "filter_f": [
                            1048,
                            1045,
                            1047
                        ],
                        "matches": [
                            1048,
                            1049,
                            1050
                        ],
                        "format_1": [
                            1059,
                            1053
                        ],
                        "format_2": [
                            1059,
                            1053
                        ],
                        "formats_info": [
                            1056,
                            1062,
                            1066,
                            1067,
                            1068,
                            1069,
                            1070,
                            1071,
                            1072,
                            1073,
                            1074,
                            1075,
                            1076,
                            1077,
                            1078,
                            1079,
                            1053
                        ],
                        "get": [
                            1056,
                            1067,
                            1068,
                            1069,
                            1070,
                            1071,
                            1072,
                            1073,
                            1074,
                            1075,
                            1076,
                            1077,
                            1078,
                            1079
                        ],
                        "self.report_error": [
                            1057
                        ],
                        "self": [
                            1057,
                            1089,
                            1121,
                            1063,
                            1064,
                            1105,
                            1106,
                            1109,
                            1112,
                            1114,
                            1115
                        ],
                        "output_ext": [
                            1080,
                            1061
                        ],
                        "self.params.get": [
                            1063
                        ],
                        "self.params": [
                            1064,
                            1063
                        ],
                        "pair": [
                            1086,
                            1087
                        ],
                        "itertools.product": [
                            1086
                        ],
                        "itertools": [
                            1086
                        ],
                        "_merge": [
                            1087
                        ],
                        "filters": [
                            1089,
                            1092
                        ],
                        "self._build_format_filter": [
                            1089
                        ],
                        "selector.filters": [
                            1089
                        ],
                        "_filter": [
                            1092,
                            1093
                        ],
                        "final_selector": [
                            1095
                        ],
                        "stream": [
                            1097,
                            1099
                        ],
                        "io.BytesIO": [
                            1097
                        ],
                        "io": [
                            1097
                        ],
                        "format_spec.encode": [
                            1097
                        ],
                        "compat_tokenize_tokenize": [
                            1099
                        ],
                        "stream.readline": [
                            1099
                        ],
                        "tokenize.TokenError": [
                            1100
                        ],
                        "self.tokens": [
                            1112,
                            1105,
                            1114
                        ],
                        "self.counter": [
                            1121,
                            1106,
                            1112,
                            1114,
                            1115
                        ],
                        "value": [
                            1114,
                            1116
                        ],
                        "__next__": [
                            1118
                        ],
                        "parsed_selector": [
                            1123,
                            1124
                        ],
                        "TokenIterator": [
                            1123
                        ]
                    },
                    "diff_line_number": 934,
                    "class_data": {
                        "signature": "class YoutubeDL(object)",
                        "docstring": "YoutubeDL class.\n\nYoutubeDL objects are the ones responsible of downloading the\nactual video file and writing it to disk if the user has requested\nit, among some other tasks. In most cases there should be one per\nprogram. As, given a video URL, the downloader doesn't know how to\nextract all the needed information, task that InfoExtractors do, it\nhas to pass the URL to one of them.\n\nFor this, YoutubeDL objects have a method that allows\nInfoExtractors to be registered in a given order. When it is passed\na URL, the YoutubeDL object handles it to the first InfoExtractor it\nfinds that reports being able to handle it. The InfoExtractor extracts\nall the information about the video or videos the URL refers to, and\nYoutubeDL process the extracted information, possibly using a File\nDownloader to download the video.\n\nYoutubeDL objects accept a lot of parameters. In order not to saturate\nthe object constructor with arguments, it receives a dictionary of\noptions instead. These options are available through the params\nattribute for the InfoExtractors to use. The YoutubeDL also\nregisters itself as the downloader in charge for the InfoExtractors\nthat are added to it, so this is a \"mutual registration\".\n\nAvailable options:\n\nusername:          Username for authentication purposes.\npassword:          Password for authentication purposes.\nvideopassword:     Password for accessing a video.\nusenetrc:          Use netrc for authentication instead.\nverbose:           Print additional info to stdout.\nquiet:             Do not print messages to stdout.\nno_warnings:       Do not print out anything for warnings.\nforceurl:          Force printing final URL.\nforcetitle:        Force printing title.\nforceid:           Force printing ID.\nforcethumbnail:    Force printing thumbnail URL.\nforcedescription:  Force printing description.\nforcefilename:     Force printing final filename.\nforceduration:     Force printing duration.\nforcejson:         Force printing info_dict as JSON.\ndump_single_json:  Force printing the info_dict of the whole playlist\n                   (or video) as a single JSON line.\nsimulate:          Do not download the video files.\nformat:            Video format code. See options.py for more information.\nouttmpl:           Template for output names.\nrestrictfilenames: Do not allow \"&\" and spaces in file names\nignoreerrors:      Do not stop on download errors.\nforce_generic_extractor: Force downloader to use the generic extractor\nnooverwrites:      Prevent overwriting files.\nplayliststart:     Playlist item to start at.\nplaylistend:       Playlist item to end at.\nplaylist_items:    Specific indices of playlist to download.\nplaylistreverse:   Download playlist items in reverse order.\nmatchtitle:        Download only matching titles.\nrejecttitle:       Reject downloads for matching titles.\nlogger:            Log messages to a logging.Logger instance.\nlogtostderr:       Log messages to stderr instead of stdout.\nwritedescription:  Write the video description to a .description file\nwriteinfojson:     Write the video description to a .info.json file\nwriteannotations:  Write the video annotations to a .annotations.xml file\nwritethumbnail:    Write the thumbnail image to a file\nwrite_all_thumbnails:  Write all thumbnail formats to files\nwritesubtitles:    Write the video subtitles to a file\nwriteautomaticsub: Write the automatic subtitles to a file\nallsubtitles:      Downloads all the subtitles of the video\n                   (requires writesubtitles or writeautomaticsub)\nlistsubtitles:     Lists all available subtitles for the video\nsubtitlesformat:   The format code for subtitles\nsubtitleslangs:    List of languages of the subtitles to download\nkeepvideo:         Keep the video file after post-processing\ndaterange:         A DateRange object, download only if the upload_date is in the range.\nskip_download:     Skip the actual download of the video file\ncachedir:          Location of the cache files in the filesystem.\n                   False to disable filesystem cache.\nnoplaylist:        Download single video instead of a playlist if in doubt.\nage_limit:         An integer representing the user's age in years.\n                   Unsuitable videos for the given age are skipped.\nmin_views:         An integer representing the minimum view count the video\n                   must have in order to not be skipped.\n                   Videos without view count information are always\n                   downloaded. None for no limit.\nmax_views:         An integer representing the maximum view count.\n                   Videos that are more popular than that are not\n                   downloaded.\n                   Videos without view count information are always\n                   downloaded. None for no limit.\ndownload_archive:  File name of a file where all downloads are recorded.\n                   Videos already present in the file are not downloaded\n                   again.\ncookiefile:        File name where cookies should be read from and dumped to.\nnocheckcertificate:Do not verify SSL certificates\nprefer_insecure:   Use HTTP instead of HTTPS to retrieve information.\n                   At the moment, this is only supported by YouTube.\nproxy:             URL of the proxy server to use\ncn_verification_proxy:  URL of the proxy to use for IP address verification\n                   on Chinese sites. (Experimental)\nsocket_timeout:    Time to wait for unresponsive hosts, in seconds\nbidi_workaround:   Work around buggy terminals without bidirectional text\n                   support, using fridibi\ndebug_printtraffic:Print out sent and received HTTP traffic\ninclude_ads:       Download ads as well\ndefault_search:    Prepend this string if an input url is not valid.\n                   'auto' for elaborate guessing\nencoding:          Use this encoding instead of the system-specified.\nextract_flat:      Do not resolve URLs, return the immediate result.\n                   Pass in 'in_playlist' to only show this behavior for\n                   playlist items.\npostprocessors:    A list of dictionaries, each with an entry\n                   * key:  The name of the postprocessor. See\n                           youtube_dl/postprocessor/__init__.py for a list.\n                   as well as any further keyword arguments for the\n                   postprocessor.\nprogress_hooks:    A list of functions that get called on download\n                   progress, with a dictionary with the entries\n                   * status: One of \"downloading\", \"error\", or \"finished\".\n                             Check this first and ignore unknown values.\n\n                   If status is one of \"downloading\", or \"finished\", the\n                   following properties may also be present:\n                   * filename: The final filename (always present)\n                   * tmpfilename: The filename we're currently writing to\n                   * downloaded_bytes: Bytes on disk\n                   * total_bytes: Size of the whole file, None if unknown\n                   * total_bytes_estimate: Guess of the eventual file size,\n                                           None if unavailable.\n                   * elapsed: The number of seconds since download started.\n                   * eta: The estimated time in seconds, None if unknown\n                   * speed: The download speed in bytes/second, None if\n                            unknown\n                   * fragment_index: The counter of the currently\n                                     downloaded video fragment.\n                   * fragment_count: The number of fragments (= individual\n                                     files that will be merged)\n\n                   Progress hooks are guaranteed to be called at least once\n                   (with status \"finished\") if the download is successful.\nmerge_output_format: Extension to use when merging formats.\nfixup:             Automatically correct known faults of the file.\n                   One of:\n                   - \"never\": do nothing\n                   - \"warn\": only emit a warning\n                   - \"detect_or_warn\": check whether we can do anything\n                                       about it, warn otherwise (default)\nsource_address:    (Experimental) Client-side IP address to bind to.\ncall_home:         Boolean, true iff we are allowed to contact the\n                   youtube-dl servers for debugging.\nsleep_interval:    Number of seconds to sleep before each download.\nlistformats:       Print an overview of available video formats and exit.\nlist_thumbnails:   Print a table of all thumbnails and exit.\nmatch_filter:      A function that gets called with the info_dict of\n                   every video.\n                   If it returns a message, the video is ignored.\n                   If it returns None, the video is downloaded.\n                   match_filter_func in utils.py is one example for this.\nno_color:          Do not emit color codes in output.\n\nThe following options determine which downloader is picked:\nexternal_downloader: Executable of the external downloader to call.\n                   None or unset for standard (built-in) downloader.\nhls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv.\n\nThe following parameters are not used by YoutubeDL itself, they are used by\nthe downloader (see youtube_dl/downloader/common.py):\nnopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,\nnoresizebuffer, retries, continuedl, noprogress, consoletitle,\nxattr_set_filesize, external_downloader_args.\n\nThe following options are used by the post processors:\nprefer_ffmpeg:     If True, use ffmpeg instead of avconv if both are available,\n                   otherwise prefer avconv.",
                        "constructor_docstring": "Create a FileDownloader object with the given options.",
                        "functions": [
                            "def __init__(self, params=None, auto_init=True):\n    \"\"\"Create a FileDownloader object with the given options.\"\"\"\n    if params is None:\n        params = {}\n    self._ies = []\n    self._ies_instances = {}\n    self._pps = []\n    self._progress_hooks = []\n    self._download_retcode = 0\n    self._num_downloads = 0\n    self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n    self._err_file = sys.stderr\n    self.params = params\n    self.cache = Cache(self)\n    if params.get('bidi_workaround', False):\n        try:\n            import pty\n            (master, slave) = pty.openpty()\n            width = compat_get_terminal_size().columns\n            if width is None:\n                width_args = []\n            else:\n                width_args = ['-w', str(width)]\n            sp_kwargs = dict(stdin=subprocess.PIPE, stdout=slave, stderr=self._err_file)\n            try:\n                self._output_process = subprocess.Popen(['bidiv'] + width_args, **sp_kwargs)\n            except OSError:\n                self._output_process = subprocess.Popen(['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n            self._output_channel = os.fdopen(master, 'rb')\n        except OSError as ose:\n            if ose.errno == 2:\n                self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n            else:\n                raise\n    if sys.version_info >= (3,) and sys.platform != 'win32' and (sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968']) and (not params.get('restrictfilenames', False)):\n        self.report_warning('Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.')\n        self.params['restrictfilenames'] = True\n    if isinstance(params.get('outtmpl'), bytes):\n        self.report_warning('Parameter outtmpl is bytes, but should be a unicode string. Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n    self._setup_opener()\n    if auto_init:\n        self.print_debug_header()\n        self.add_default_info_extractors()\n    for pp_def_raw in self.params.get('postprocessors', []):\n        pp_class = get_postprocessor(pp_def_raw['key'])\n        pp_def = dict(pp_def_raw)\n        del pp_def['key']\n        pp = pp_class(self, **compat_kwargs(pp_def))\n        self.add_post_processor(pp)\n    for ph in self.params.get('progress_hooks', []):\n        self.add_progress_hook(ph)",
                            "def warn_if_short_id(self, argv):\n    idxs = [i for (i, a) in enumerate(argv) if re.match('^-[0-9A-Za-z_-]{10}$', a)]\n    if idxs:\n        correct_argv = ['youtube-dl'] + [a for (i, a) in enumerate(argv) if i not in idxs] + ['--'] + [argv[i] for i in idxs]\n        self.report_warning('Long argument string detected. Use -- to separate parameters and URLs, like this:\\n%s\\n' % args_to_str(correct_argv))",
                            "def add_info_extractor(self, ie):\n    \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n    self._ies.append(ie)\n    self._ies_instances[ie.ie_key()] = ie\n    ie.set_downloader(self)",
                            "def get_info_extractor(self, ie_key):\n    \"\"\"\n    Get an instance of an IE with name ie_key, it will try to get one from\n    the _ies list, if there's no instance it will create a new one and add\n    it to the extractor list.\n    \"\"\"\n    ie = self._ies_instances.get(ie_key)\n    if ie is None:\n        ie = get_info_extractor(ie_key)()\n        self.add_info_extractor(ie)\n    return ie",
                            "def add_default_info_extractors(self):\n    \"\"\"\n    Add the InfoExtractors returned by gen_extractors to the end of the list\n    \"\"\"\n    for ie in gen_extractors():\n        self.add_info_extractor(ie)",
                            "def add_post_processor(self, pp):\n    \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n    self._pps.append(pp)\n    pp.set_downloader(self)",
                            "def add_progress_hook(self, ph):\n    \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n    self._progress_hooks.append(ph)",
                            "def _bidi_workaround(self, message):\n    if not hasattr(self, '_output_channel'):\n        return message\n    assert hasattr(self, '_output_process')\n    assert isinstance(message, compat_str)\n    line_count = message.count('\\n') + 1\n    self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n    self._output_process.stdin.flush()\n    res = ''.join((self._output_channel.readline().decode('utf-8') for _ in range(line_count)))\n    return res[:-len('\\n')]",
                            "def to_screen(self, message, skip_eol=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    return self.to_stdout(message, skip_eol, check_quiet=True)",
                            "def _write_string(self, s, out=None):\n    write_string(s, out=out, encoding=self.params.get('encoding'))",
                            "def to_stdout(self, message, skip_eol=False, check_quiet=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    if self.params.get('logger'):\n        self.params['logger'].debug(message)\n    elif not check_quiet or not self.params.get('quiet', False):\n        message = self._bidi_workaround(message)\n        terminator = ['\\n', ''][skip_eol]\n        output = message + terminator\n        self._write_string(output, self._screen_file)",
                            "def to_stderr(self, message):\n    \"\"\"Print message to stderr.\"\"\"\n    assert isinstance(message, compat_str)\n    if self.params.get('logger'):\n        self.params['logger'].error(message)\n    else:\n        message = self._bidi_workaround(message)\n        output = message + '\\n'\n        self._write_string(output, self._err_file)",
                            "def to_console_title(self, message):\n    if not self.params.get('consoletitle', False):\n        return\n    if os.name == 'nt' and ctypes.windll.kernel32.GetConsoleWindow():\n        ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n    elif 'TERM' in os.environ:\n        self._write_string('\\x1b]0;%s\\x07' % message, self._screen_file)",
                            "def save_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        self._write_string('\\x1b[22;0t', self._screen_file)",
                            "def restore_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        self._write_string('\\x1b[23;0t', self._screen_file)",
                            "def __enter__(self):\n    self.save_console_title()\n    return self",
                            "def __exit__(self, *args):\n    self.restore_console_title()\n    if self.params.get('cookiefile') is not None:\n        self.cookiejar.save()",
                            "def trouble(self, message=None, tb=None):\n    \"\"\"Determine action to take when a download problem appears.\n\n    Depending on if the downloader has been configured to ignore\n    download errors or not, this method may throw an exception or\n    not when errors are found, after printing the message.\n\n    tb, if given, is additional traceback information.\n    \"\"\"\n    if message is not None:\n        self.to_stderr(message)\n    if self.params.get('verbose'):\n        if tb is None:\n            if sys.exc_info()[0]:\n                tb = ''\n                if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                    tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                tb += compat_str(traceback.format_exc())\n            else:\n                tb_data = traceback.format_list(traceback.extract_stack())\n                tb = ''.join(tb_data)\n        self.to_stderr(tb)\n    if not self.params.get('ignoreerrors', False):\n        if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n            exc_info = sys.exc_info()[1].exc_info\n        else:\n            exc_info = sys.exc_info()\n        raise DownloadError(message, exc_info)\n    self._download_retcode = 1",
                            "def report_warning(self, message):\n    \"\"\"\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    \"\"\"\n    if self.params.get('logger') is not None:\n        self.params['logger'].warning(message)\n    else:\n        if self.params.get('no_warnings'):\n            return\n        if not self.params.get('no_color') and self._err_file.isatty() and (os.name != 'nt'):\n            _msg_header = '\\x1b[0;33mWARNING:\\x1b[0m'\n        else:\n            _msg_header = 'WARNING:'\n        warning_message = '%s %s' % (_msg_header, message)\n        self.to_stderr(warning_message)",
                            "def report_error(self, message, tb=None):\n    \"\"\"\n    Do the same as trouble, but prefixes the message with 'ERROR:', colored\n    in red if stderr is a tty file.\n    \"\"\"\n    if not self.params.get('no_color') and self._err_file.isatty() and (os.name != 'nt'):\n        _msg_header = '\\x1b[0;31mERROR:\\x1b[0m'\n    else:\n        _msg_header = 'ERROR:'\n    error_message = '%s %s' % (_msg_header, message)\n    self.trouble(error_message, tb)",
                            "def report_file_already_downloaded(self, file_name):\n    \"\"\"Report file has already been fully downloaded.\"\"\"\n    try:\n        self.to_screen('[download] %s has already been downloaded' % file_name)\n    except UnicodeEncodeError:\n        self.to_screen('[download] The file has already been downloaded')",
                            "def prepare_filename(self, info_dict):\n    \"\"\"Generate the output filename.\"\"\"\n    try:\n        template_dict = dict(info_dict)\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size')\n        if autonumber_size is None:\n            autonumber_size = 5\n        autonumber_templ = '%0' + str(autonumber_size) + 'd'\n        template_dict['autonumber'] = autonumber_templ % self._num_downloads\n        if template_dict.get('playlist_index') is not None:\n            template_dict['playlist_index'] = '%0*d' % (len(str(template_dict['n_entries'])), template_dict['playlist_index'])\n        if template_dict.get('resolution') is None:\n            if template_dict.get('width') and template_dict.get('height'):\n                template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n            elif template_dict.get('height'):\n                template_dict['resolution'] = '%sp' % template_dict['height']\n            elif template_dict.get('width'):\n                template_dict['resolution'] = '?x%d' % template_dict['width']\n        sanitize = lambda k, v: sanitize_filename(compat_str(v), restricted=self.params.get('restrictfilenames'), is_id=k == 'id')\n        template_dict = dict(((k, sanitize(k, v)) for (k, v) in template_dict.items() if v is not None))\n        template_dict = collections.defaultdict(lambda : 'NA', template_dict)\n        outtmpl = sanitize_path(self.params.get('outtmpl', DEFAULT_OUTTMPL))\n        tmpl = compat_expanduser(outtmpl)\n        filename = tmpl % template_dict\n        if sys.version_info < (3, 0) and sys.platform == 'win32':\n            filename = encodeFilename(filename, True).decode(preferredencoding())\n        return filename\n    except ValueError as err:\n        self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n        return None",
                            "def _match_entry(self, info_dict, incomplete):\n    \"\"\" Returns None iff the file should be downloaded \"\"\"\n    video_title = info_dict.get('title', info_dict.get('id', 'video'))\n    if 'title' in info_dict:\n        title = info_dict['title']\n        matchtitle = self.params.get('matchtitle', False)\n        if matchtitle:\n            if not re.search(matchtitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n        rejecttitle = self.params.get('rejecttitle', False)\n        if rejecttitle:\n            if re.search(rejecttitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n    date = info_dict.get('upload_date', None)\n    if date is not None:\n        dateRange = self.params.get('daterange', DateRange())\n        if date not in dateRange:\n            return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n    view_count = info_dict.get('view_count', None)\n    if view_count is not None:\n        min_views = self.params.get('min_views')\n        if min_views is not None and view_count < min_views:\n            return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n        max_views = self.params.get('max_views')\n        if max_views is not None and view_count > max_views:\n            return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n    if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n        return 'Skipping \"%s\" because it is age restricted' % video_title\n    if self.in_download_archive(info_dict):\n        return '%s has already been recorded in archive' % video_title\n    if not incomplete:\n        match_filter = self.params.get('match_filter')\n        if match_filter is not None:\n            ret = match_filter(info_dict)\n            if ret is not None:\n                return ret\n    return None",
                            "@staticmethod\ndef add_extra_info(info_dict, extra_info):\n    \"\"\"Set the keys from extra_info in info dict if they are missing\"\"\"\n    for (key, value) in extra_info.items():\n        info_dict.setdefault(key, value)",
                            "def extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False):\n    \"\"\"\n    Returns a list with a dictionary for each video we find.\n    If 'download', also downloads the videos.\n    extra_info is a dict containing the extra values to add to each result\n    \"\"\"\n    if not ie_key and force_generic_extractor:\n        ie_key = 'Generic'\n    if ie_key:\n        ies = [self.get_info_extractor(ie_key)]\n    else:\n        ies = self._ies\n    for ie in ies:\n        if not ie.suitable(url):\n            continue\n        if not ie.working():\n            self.report_warning('The program functionality for this site has been marked as broken, and will probably not work.')\n        try:\n            ie_result = ie.extract(url)\n            if ie_result is None:\n                break\n            if isinstance(ie_result, list):\n                ie_result = {'_type': 'compat_list', 'entries': ie_result}\n            self.add_default_extra_info(ie_result, ie, url)\n            if process:\n                return self.process_ie_result(ie_result, download, extra_info)\n            else:\n                return ie_result\n        except ExtractorError as de:\n            self.report_error(compat_str(de), de.format_traceback())\n            break\n        except MaxDownloadsReached:\n            raise\n        except Exception as e:\n            if self.params.get('ignoreerrors', False):\n                self.report_error(compat_str(e), tb=compat_str(traceback.format_exc()))\n                break\n            else:\n                raise\n    else:\n        self.report_error('no suitable InfoExtractor for URL %s' % url)",
                            "def add_default_extra_info(self, ie_result, ie, url):\n    self.add_extra_info(ie_result, {'extractor': ie.IE_NAME, 'webpage_url': url, 'webpage_url_basename': url_basename(url), 'extractor_key': ie.ie_key()})",
                            "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    \"\"\"\n    Take the result of the ie(may be modified) and resolve all unresolved\n    references (URLs, playlist items).\n\n    It will also download the videos if 'download'.\n    Returns the resolved ie_result.\n    \"\"\"\n    result_type = ie_result.get('_type', 'video')\n    if result_type in ('url', 'url_transparent'):\n        extract_flat = self.params.get('extract_flat', False)\n        if extract_flat == 'in_playlist' and 'playlist' in extra_info or extract_flat is True:\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'url':\n        return self.extract_info(ie_result['url'], download, ie_key=ie_result.get('ie_key'), extra_info=extra_info)\n    elif result_type == 'url_transparent':\n        info = self.extract_info(ie_result['url'], ie_key=ie_result.get('ie_key'), extra_info=extra_info, download=False, process=False)\n        force_properties = dict(((k, v) for (k, v) in ie_result.items() if v is not None))\n        for f in ('_type', 'url'):\n            if f in force_properties:\n                del force_properties[f]\n        new_result = info.copy()\n        new_result.update(force_properties)\n        assert new_result.get('_type') != 'url_transparent'\n        return self.process_ie_result(new_result, download=download, extra_info=extra_info)\n    elif result_type == 'playlist' or result_type == 'multi_video':\n        playlist = ie_result.get('title', None) or ie_result.get('id', None)\n        self.to_screen('[download] Downloading playlist: %s' % playlist)\n        playlist_results = []\n        playliststart = self.params.get('playliststart', 1) - 1\n        playlistend = self.params.get('playlistend', None)\n        if playlistend == -1:\n            playlistend = None\n        playlistitems_str = self.params.get('playlist_items', None)\n        playlistitems = None\n        if playlistitems_str is not None:\n\n            def iter_playlistitems(format):\n                for string_segment in format.split(','):\n                    if '-' in string_segment:\n                        (start, end) = string_segment.split('-')\n                        for item in range(int(start), int(end) + 1):\n                            yield int(item)\n                    else:\n                        yield int(string_segment)\n            playlistitems = iter_playlistitems(playlistitems_str)\n        ie_entries = ie_result['entries']\n        if isinstance(ie_entries, list):\n            n_all_entries = len(ie_entries)\n            if playlistitems:\n                entries = [ie_entries[i - 1] for i in playlistitems if -n_all_entries <= i - 1 < n_all_entries]\n            else:\n                entries = ie_entries[playliststart:playlistend]\n            n_entries = len(entries)\n            self.to_screen('[%s] playlist %s: Collected %d video ids (downloading %d of them)' % (ie_result['extractor'], playlist, n_all_entries, n_entries))\n        elif isinstance(ie_entries, PagedList):\n            if playlistitems:\n                entries = []\n                for item in playlistitems:\n                    entries.extend(ie_entries.getslice(item - 1, item))\n            else:\n                entries = ie_entries.getslice(playliststart, playlistend)\n            n_entries = len(entries)\n            self.to_screen('[%s] playlist %s: Downloading %d videos' % (ie_result['extractor'], playlist, n_entries))\n        else:\n            if playlistitems:\n                entry_list = list(ie_entries)\n                entries = [entry_list[i - 1] for i in playlistitems]\n            else:\n                entries = list(itertools.islice(ie_entries, playliststart, playlistend))\n            n_entries = len(entries)\n            self.to_screen('[%s] playlist %s: Downloading %d videos' % (ie_result['extractor'], playlist, n_entries))\n        if self.params.get('playlistreverse', False):\n            entries = entries[::-1]\n        for (i, entry) in enumerate(entries, 1):\n            self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n            extra = {'n_entries': n_entries, 'playlist': playlist, 'playlist_id': ie_result.get('id'), 'playlist_title': ie_result.get('title'), 'playlist_index': i + playliststart, 'extractor': ie_result['extractor'], 'webpage_url': ie_result['webpage_url'], 'webpage_url_basename': url_basename(ie_result['webpage_url']), 'extractor_key': ie_result['extractor_key']}\n            reason = self._match_entry(entry, incomplete=True)\n            if reason is not None:\n                self.to_screen('[download] ' + reason)\n                continue\n            entry_result = self.process_ie_result(entry, download=download, extra_info=extra)\n            playlist_results.append(entry_result)\n        ie_result['entries'] = playlist_results\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning('Extractor %s returned a compat_list result. It needs to be updated.' % ie_result.get('extractor'))\n\n        def _fixup(r):\n            self.add_extra_info(r, {'extractor': ie_result['extractor'], 'webpage_url': ie_result['webpage_url'], 'webpage_url_basename': url_basename(ie_result['webpage_url']), 'extractor_key': ie_result['extractor_key']})\n            return r\n        ie_result['entries'] = [self.process_ie_result(_fixup(r), download, extra_info) for r in ie_result['entries']]\n        return ie_result\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
                            "def _build_format_filter(self, filter_spec):\n    \"\"\" Returns a function to filter the formats according to the filter_spec \"\"\"\n    OPERATORS = {'<': operator.lt, '<=': operator.le, '>': operator.gt, '>=': operator.ge, '=': operator.eq, '!=': operator.ne}\n    operator_rex = re.compile('(?x)\\\\s*\\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|fps)\\n            \\\\s*(?P<op>%s)(?P<none_inclusive>\\\\s*\\\\?)?\\\\s*\\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\\n            $\\n            ' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        try:\n            comparison_value = int(m.group('value'))\n        except ValueError:\n            comparison_value = parse_filesize(m.group('value'))\n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('value') + 'B')\n            if comparison_value is None:\n                raise ValueError('Invalid value %r in format specification %r' % (m.group('value'), filter_spec))\n        op = OPERATORS[m.group('op')]\n    if not m:\n        STR_OPERATORS = {'=': operator.eq, '!=': operator.ne}\n        str_operator_rex = re.compile('(?x)\\n                \\\\s*(?P<key>ext|acodec|vcodec|container|protocol)\\n                \\\\s*(?P<op>%s)(?P<none_inclusive>\\\\s*\\\\?)?\\n                \\\\s*(?P<value>[a-zA-Z0-9_-]+)\\n                \\\\s*$\\n                ' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            comparison_value = m.group('value')\n            op = STR_OPERATORS[m.group('op')]\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    def _filter(f):\n        actual_value = f.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n    return _filter",
                            "def build_format_selector(self, format_spec):\n\n    def syntax_error(note, start):\n        message = 'Invalid format specification: {0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1])\n        return SyntaxError(message)\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for (type, string, start, _, _) in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n\n    def _parse_format_selection(tokens, endwith=[]):\n        selectors = []\n        current_selector = None\n        for (type, string, start, _, _) in tokens:\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string in endwith:\n                    break\n                elif string == ')':\n                    tokens.restore_last_token()\n                    break\n                if string == ',':\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    current_selector = FormatSelector(GROUP, _parse_format_selection(tokens, [')']), [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(MERGE, (video_selector, audio_selector), []))\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n\n    def _build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [_build_selector_function(s) for s in selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    for format in f(formats):\n                        yield format\n            return selector_function\n        elif selector.type == GROUP:\n            selector_function = _build_selector_function(selector.selector)\n        elif selector.type == PICKFIRST:\n            fs = [_build_selector_function(s) for s in selector.selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    picked_formats = list(f(formats))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == SINGLE:\n            format_spec = selector.selector\n\n            def selector_function(formats):\n                if format_spec == 'all':\n                    for f in formats:\n                        yield f\n                elif format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == 'worst' else -1\n                    audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    elif all((f.get('acodec') != 'none' for f in formats)) or all((f.get('vcodec') != 'none' for f in formats)):\n                        yield formats[format_idx]\n                elif format_spec == 'bestaudio':\n                    audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[-1]\n                elif format_spec == 'worstaudio':\n                    audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[0]\n                elif format_spec == 'bestvideo':\n                    video_formats = [f for f in formats if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[-1]\n                elif format_spec == 'worstvideo':\n                    video_formats = [f for f in formats if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[0]\n                else:\n                    extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                    if format_spec in extensions:\n                        filter_f = lambda f: f['ext'] == format_spec\n                    else:\n                        filter_f = lambda f: f['format_id'] == format_spec\n                    matches = list(filter(filter_f, formats))\n                    if matches:\n                        yield matches[-1]\n        elif selector.type == MERGE:\n\n            def _merge(formats_info):\n                (format_1, format_2) = [f['format_id'] for f in formats_info]\n                if formats_info[0].get('vcodec') == 'none':\n                    self.report_error('The first format must contain the video, try using \"-f %s+%s\"' % (format_2, format_1))\n                    return\n                output_ext = formats_info[0]['ext'] if self.params.get('merge_output_format') is None else self.params['merge_output_format']\n                return {'requested_formats': formats_info, 'format': '%s+%s' % (formats_info[0].get('format'), formats_info[1].get('format')), 'format_id': '%s+%s' % (formats_info[0].get('format_id'), formats_info[1].get('format_id')), 'width': formats_info[0].get('width'), 'height': formats_info[0].get('height'), 'resolution': formats_info[0].get('resolution'), 'fps': formats_info[0].get('fps'), 'vcodec': formats_info[0].get('vcodec'), 'vbr': formats_info[0].get('vbr'), 'stretched_ratio': formats_info[0].get('stretched_ratio'), 'acodec': formats_info[1].get('acodec'), 'abr': formats_info[1].get('abr'), 'ext': output_ext}\n            (video_selector, audio_selector) = map(_build_selector_function, selector.selector)\n\n            def selector_function(formats):\n                formats = list(formats)\n                for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                    yield _merge(pair)\n        filters = [self._build_format_filter(f) for f in selector.filters]\n\n        def final_selector(formats):\n            for _filter in filters:\n                formats = list(filter(_filter, formats))\n            return selector_function(formats)\n        return final_selector\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    class TokenIterator(object):\n\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)",
                            "def _calc_headers(self, info_dict):\n    res = std_headers.copy()\n    add_headers = info_dict.get('http_headers')\n    if add_headers:\n        res.update(add_headers)\n    cookies = self._calc_cookies(info_dict)\n    if cookies:\n        res['Cookie'] = cookies\n    return res",
                            "def _calc_cookies(self, info_dict):\n    pr = compat_urllib_request.Request(info_dict['url'])\n    self.cookiejar.add_cookie_header(pr)\n    return pr.get_header('Cookie')",
                            "def process_video_result(self, info_dict, download=True):\n    assert info_dict.get('_type', 'video') == 'video'\n    if 'id' not in info_dict:\n        raise ExtractorError('Missing \"id\" field in extractor result')\n    if 'title' not in info_dict:\n        raise ExtractorError('Missing \"title\" field in extractor result')\n    if 'playlist' not in info_dict:\n        info_dict['playlist'] = None\n        info_dict['playlist_index'] = None\n    thumbnails = info_dict.get('thumbnails')\n    if thumbnails is None:\n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n    if thumbnails:\n        thumbnails.sort(key=lambda t: (t.get('preference'), t.get('width'), t.get('height'), t.get('id'), t.get('url')))\n        for (i, t) in enumerate(thumbnails):\n            if 'width' in t and 'height' in t:\n                t['resolution'] = '%dx%d' % (t['width'], t['height'])\n            if t.get('id') is None:\n                t['id'] = '%d' % i\n    if thumbnails and 'thumbnail' not in info_dict:\n        info_dict['thumbnail'] = thumbnails[-1]['url']\n    if 'display_id' not in info_dict and 'id' in info_dict:\n        info_dict['display_id'] = info_dict['id']\n    if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n        try:\n            upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n            info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n        except (ValueError, OverflowError, OSError):\n            pass\n    if self.params.get('listsubtitles', False):\n        if 'automatic_captions' in info_dict:\n            self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n        self.list_subtitles(info_dict['id'], info_dict.get('subtitles'), 'subtitles')\n        return\n    info_dict['requested_subtitles'] = self.process_subtitles(info_dict['id'], info_dict.get('subtitles'), info_dict.get('automatic_captions'))\n    if info_dict.get('formats') is None:\n        formats = [info_dict]\n    else:\n        formats = info_dict['formats']\n    if not formats:\n        raise ExtractorError('No video formats found!')\n    formats_dict = {}\n    for (i, format) in enumerate(formats):\n        if 'url' not in format:\n            raise ExtractorError('Missing \"url\" key in result (index %d)' % i)\n        if format.get('format_id') is None:\n            format['format_id'] = compat_str(i)\n        format_id = format['format_id']\n        if format_id not in formats_dict:\n            formats_dict[format_id] = []\n        formats_dict[format_id].append(format)\n    for (format_id, ambiguous_formats) in formats_dict.items():\n        if len(ambiguous_formats) > 1:\n            for (i, format) in enumerate(ambiguous_formats):\n                format['format_id'] = '%s-%d' % (format_id, i)\n    for (i, format) in enumerate(formats):\n        if format.get('format') is None:\n            format['format'] = '{id} - {res}{note}'.format(id=format['format_id'], res=self.format_resolution(format), note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '')\n        if 'ext' not in format:\n            format['ext'] = determine_ext(format['url']).lower()\n        full_format_info = info_dict.copy()\n        full_format_info.update(format)\n        format['http_headers'] = self._calc_headers(full_format_info)\n    if formats[0] is not info_dict:\n        info_dict['formats'] = formats\n    if self.params.get('listformats'):\n        self.list_formats(info_dict)\n        return\n    if self.params.get('list_thumbnails'):\n        self.list_thumbnails(info_dict)\n        return\n    req_format = self.params.get('format')\n    if req_format is None:\n        req_format_list = []\n        if self.params.get('outtmpl', DEFAULT_OUTTMPL) != '-' and info_dict['extractor'] in ['youtube', 'ted']:\n            merger = FFmpegMergerPP(self)\n            if merger.available and merger.can_merge():\n                req_format_list.append('bestvideo+bestaudio')\n        req_format_list.append('best')\n        req_format = '/'.join(req_format_list)\n    format_selector = self.build_format_selector(req_format)\n    formats_to_download = list(format_selector(formats))\n    if not formats_to_download:\n        raise ExtractorError('requested format not available', expected=True)\n    if download:\n        if len(formats_to_download) > 1:\n            self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n        for format in formats_to_download:\n            new_info = dict(info_dict)\n            new_info.update(format)\n            self.process_info(new_info)\n    info_dict.update(formats_to_download[-1])\n    return info_dict",
                            "def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n    \"\"\"Select the requested subtitles and their format\"\"\"\n    available_subs = {}\n    if normal_subtitles and self.params.get('writesubtitles'):\n        available_subs.update(normal_subtitles)\n    if automatic_captions and self.params.get('writeautomaticsub'):\n        for (lang, cap_info) in automatic_captions.items():\n            if lang not in available_subs:\n                available_subs[lang] = cap_info\n    if not self.params.get('writesubtitles') and (not self.params.get('writeautomaticsub')) or not available_subs:\n        return None\n    if self.params.get('allsubtitles', False):\n        requested_langs = available_subs.keys()\n    elif self.params.get('subtitleslangs', False):\n        requested_langs = self.params.get('subtitleslangs')\n    elif 'en' in available_subs:\n        requested_langs = ['en']\n    else:\n        requested_langs = [list(available_subs.keys())[0]]\n    formats_query = self.params.get('subtitlesformat', 'best')\n    formats_preference = formats_query.split('/') if formats_query else []\n    subs = {}\n    for lang in requested_langs:\n        formats = available_subs.get(lang)\n        if formats is None:\n            self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n            continue\n        for ext in formats_preference:\n            if ext == 'best':\n                f = formats[-1]\n                break\n            matches = list(filter(lambda f: f['ext'] == ext, formats))\n            if matches:\n                f = matches[-1]\n                break\n        else:\n            f = formats[-1]\n            self.report_warning('No subtitle format found matching \"%s\" for language %s, using %s' % (formats_query, lang, f['ext']))\n        subs[lang] = f\n    return subs",
                            "def process_info(self, info_dict):\n    \"\"\"Process a single resolved IE result.\"\"\"\n    assert info_dict.get('_type', 'video') == 'video'\n    max_downloads = self.params.get('max_downloads')\n    if max_downloads is not None:\n        if self._num_downloads >= int(max_downloads):\n            raise MaxDownloadsReached()\n    info_dict['fulltitle'] = info_dict['title']\n    if len(info_dict['title']) > 200:\n        info_dict['title'] = info_dict['title'][:197] + '...'\n    if 'format' not in info_dict:\n        info_dict['format'] = info_dict['ext']\n    reason = self._match_entry(info_dict, incomplete=False)\n    if reason is not None:\n        self.to_screen('[download] ' + reason)\n        return\n    self._num_downloads += 1\n    info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n    if self.params.get('forcetitle', False):\n        self.to_stdout(info_dict['fulltitle'])\n    if self.params.get('forceid', False):\n        self.to_stdout(info_dict['id'])\n    if self.params.get('forceurl', False):\n        if info_dict.get('requested_formats') is not None:\n            for f in info_dict['requested_formats']:\n                self.to_stdout(f['url'] + f.get('play_path', ''))\n        else:\n            self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n    if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n        self.to_stdout(info_dict['thumbnail'])\n    if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n        self.to_stdout(info_dict['description'])\n    if self.params.get('forcefilename', False) and filename is not None:\n        self.to_stdout(filename)\n    if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n        self.to_stdout(formatSeconds(info_dict['duration']))\n    if self.params.get('forceformat', False):\n        self.to_stdout(info_dict['format'])\n    if self.params.get('forcejson', False):\n        self.to_stdout(json.dumps(info_dict))\n    if self.params.get('simulate', False):\n        return\n    if filename is None:\n        return\n    try:\n        dn = os.path.dirname(sanitize_path(encodeFilename(filename)))\n        if dn and (not os.path.exists(dn)):\n            os.makedirs(dn)\n    except (OSError, IOError) as err:\n        self.report_error('unable to create directory ' + compat_str(err))\n        return\n    if self.params.get('writedescription', False):\n        descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n            self.to_screen('[info] Video description is already present')\n        elif info_dict.get('description') is None:\n            self.report_warning(\"There's no description to write.\")\n        else:\n            try:\n                self.to_screen('[info] Writing video description to: ' + descfn)\n                with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                    descfile.write(info_dict['description'])\n            except (OSError, IOError):\n                self.report_error('Cannot write description file ' + descfn)\n                return\n    if self.params.get('writeannotations', False):\n        annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n            self.to_screen('[info] Video annotations are already present')\n        else:\n            try:\n                self.to_screen('[info] Writing video annotations to: ' + annofn)\n                with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                    annofile.write(info_dict['annotations'])\n            except (KeyError, TypeError):\n                self.report_warning('There are no annotations to write.')\n            except (OSError, IOError):\n                self.report_error('Cannot write annotations file: ' + annofn)\n                return\n    subtitles_are_requested = any([self.params.get('writesubtitles', False), self.params.get('writeautomaticsub')])\n    if subtitles_are_requested and info_dict.get('requested_subtitles'):\n        subtitles = info_dict['requested_subtitles']\n        ie = self.get_info_extractor(info_dict['extractor_key'])\n        for (sub_lang, sub_info) in subtitles.items():\n            sub_format = sub_info['ext']\n            if sub_info.get('data') is not None:\n                sub_data = sub_info['data']\n            else:\n                try:\n                    sub_data = ie._download_webpage(sub_info['url'], info_dict['id'], note=False)\n                except ExtractorError as err:\n                    self.report_warning('Unable to download subtitle for \"%s\": %s' % (sub_lang, compat_str(err.cause)))\n                    continue\n            try:\n                sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n                if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                    self.to_screen('[info] Video subtitle %s.%s is already_present' % (sub_lang, sub_format))\n                else:\n                    self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                    with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8') as subfile:\n                        subfile.write(sub_data)\n            except (OSError, IOError):\n                self.report_error('Cannot write subtitles file ' + sub_filename)\n                return\n    if self.params.get('writeinfojson', False):\n        infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n            self.to_screen('[info] Video description metadata is already present')\n        else:\n            self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n            try:\n                write_json_file(self.filter_requested_info(info_dict), infofn)\n            except (OSError, IOError):\n                self.report_error('Cannot write metadata to JSON file ' + infofn)\n                return\n    self._write_thumbnails(info_dict, filename)\n    if not self.params.get('skip_download', False):\n        try:\n\n            def dl(name, info):\n                fd = get_suitable_downloader(info, self.params)(self, self.params)\n                for ph in self._progress_hooks:\n                    fd.add_progress_hook(ph)\n                if self.params.get('verbose'):\n                    self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                return fd.download(name, info)\n            if info_dict.get('requested_formats') is not None:\n                downloaded = []\n                success = True\n                merger = FFmpegMergerPP(self)\n                if not merger.available:\n                    postprocessors = []\n                    self.report_warning(\"You have requested multiple formats but ffmpeg or avconv are not installed. The formats won't be merged.\")\n                else:\n                    postprocessors = [merger]\n\n                def compatible_formats(formats):\n                    (video, audio) = formats\n                    (video_ext, audio_ext) = (audio.get('ext'), video.get('ext'))\n                    if video_ext and audio_ext:\n                        COMPATIBLE_EXTS = (('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v'), 'webm')\n                        for exts in COMPATIBLE_EXTS:\n                            if video_ext in exts and audio_ext in exts:\n                                return True\n                    return False\n                filename_real_ext = os.path.splitext(filename)[1][1:]\n                filename_wo_ext = os.path.splitext(filename)[0] if filename_real_ext == info_dict['ext'] else filename\n                requested_formats = info_dict['requested_formats']\n                if self.params.get('merge_output_format') is None and (not compatible_formats(requested_formats)):\n                    info_dict['ext'] = 'mkv'\n                    self.report_warning('Requested formats are incompatible for merge and will be merged into mkv.')\n                filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                if os.path.exists(encodeFilename(filename)):\n                    self.to_screen('[download] %s has already been downloaded and merged' % filename)\n                else:\n                    for f in requested_formats:\n                        new_info = dict(info_dict)\n                        new_info.update(f)\n                        fname = self.prepare_filename(new_info)\n                        fname = prepend_extension(fname, 'f%s' % f['format_id'], new_info['ext'])\n                        downloaded.append(fname)\n                        partial_success = dl(fname, new_info)\n                        success = success and partial_success\n                    info_dict['__postprocessors'] = postprocessors\n                    info_dict['__files_to_merge'] = downloaded\n            else:\n                success = dl(filename, info_dict)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            self.report_error('unable to download video data: %s' % str(err))\n            return\n        except (OSError, IOError) as err:\n            raise UnavailableVideoError(err)\n        except (ContentTooShortError,) as err:\n            self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n            return\n        if success:\n            fixup_policy = self.params.get('fixup')\n            if fixup_policy is None:\n                fixup_policy = 'detect_or_warn'\n            stretched_ratio = info_dict.get('stretched_ratio')\n            if stretched_ratio is not None and stretched_ratio != 1:\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: Non-uniform pixel ratio (%s)' % (info_dict['id'], stretched_ratio))\n                elif fixup_policy == 'detect_or_warn':\n                    stretched_pp = FFmpegFixupStretchedPP(self)\n                    if stretched_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(stretched_pp)\n                    else:\n                        self.report_warning('%s: Non-uniform pixel ratio (%s). Install ffmpeg or avconv to fix this automatically.' % (info_dict['id'], stretched_ratio))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n            if info_dict.get('requested_formats') is None and info_dict.get('container') == 'm4a_dash':\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: writing DASH m4a. Only some players support this container.' % info_dict['id'])\n                elif fixup_policy == 'detect_or_warn':\n                    fixup_pp = FFmpegFixupM4aPP(self)\n                    if fixup_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(fixup_pp)\n                    else:\n                        self.report_warning('%s: writing DASH m4a. Only some players support this container. Install ffmpeg or avconv to fix this automatically.' % info_dict['id'])\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n            try:\n                self.post_process(filename, info_dict)\n            except PostProcessingError as err:\n                self.report_error('postprocessing: %s' % str(err))\n                return\n            self.record_download_archive(info_dict)",
                            "def download(self, url_list):\n    \"\"\"Download a given list of URLs.\"\"\"\n    outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n    if len(url_list) > 1 and '%' not in outtmpl and (self.params.get('max_downloads') != 1):\n        raise SameFileError(outtmpl)\n    for url in url_list:\n        try:\n            res = self.extract_info(url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n        except UnavailableVideoError:\n            self.report_error('unable to download video')\n        except MaxDownloadsReached:\n            self.to_screen('[info] Maximum number of downloaded files reached.')\n            raise\n        else:\n            if self.params.get('dump_single_json', False):\n                self.to_stdout(json.dumps(res))\n    return self._download_retcode",
                            "def download_with_info_file(self, info_filename):\n    with contextlib.closing(fileinput.FileInput([info_filename], mode='r', openhook=fileinput.hook_encoded('utf-8'))) as f:\n        info = self.filter_requested_info(json.loads('\\n'.join(f)))\n    try:\n        self.process_ie_result(info, download=True)\n    except DownloadError:\n        webpage_url = info.get('webpage_url')\n        if webpage_url is not None:\n            self.report_warning('The info failed to download, trying with \"%s\"' % webpage_url)\n            return self.download([webpage_url])\n        else:\n            raise\n    return self._download_retcode",
                            "@staticmethod\ndef filter_requested_info(info_dict):\n    return dict(((k, v) for (k, v) in info_dict.items() if k not in ['requested_formats', 'requested_subtitles']))",
                            "def post_process(self, filename, ie_info):\n    \"\"\"Run all the postprocessors on the given file.\"\"\"\n    info = dict(ie_info)\n    info['filepath'] = filename\n    pps_chain = []\n    if ie_info.get('__postprocessors') is not None:\n        pps_chain.extend(ie_info['__postprocessors'])\n    pps_chain.extend(self._pps)\n    for pp in pps_chain:\n        files_to_delete = []\n        try:\n            (files_to_delete, info) = pp.run(info)\n        except PostProcessingError as e:\n            self.report_error(e.msg)\n        if files_to_delete and (not self.params.get('keepvideo', False)):\n            for old_filename in files_to_delete:\n                self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                try:\n                    os.remove(encodeFilename(old_filename))\n                except (IOError, OSError):\n                    self.report_warning('Unable to remove downloaded original file')",
                            "def _make_archive_id(self, info_dict):\n    extractor = info_dict.get('extractor_key')\n    if extractor is None:\n        if 'id' in info_dict:\n            extractor = info_dict.get('ie_key')\n    if extractor is None:\n        return None\n    return extractor.lower() + ' ' + info_dict['id']",
                            "def in_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return False\n    vid_id = self._make_archive_id(info_dict)\n    if vid_id is None:\n        return False\n    try:\n        with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n            for line in archive_file:\n                if line.strip() == vid_id:\n                    return True\n    except IOError as ioe:\n        if ioe.errno != errno.ENOENT:\n            raise\n    return False",
                            "def record_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return\n    vid_id = self._make_archive_id(info_dict)\n    assert vid_id\n    with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n        archive_file.write(vid_id + '\\n')",
                            "@staticmethod\ndef format_resolution(format, default='unknown'):\n    if format.get('vcodec') == 'none':\n        return 'audio only'\n    if format.get('resolution') is not None:\n        return format['resolution']\n    if format.get('height') is not None:\n        if format.get('width') is not None:\n            res = '%sx%s' % (format['width'], format['height'])\n        else:\n            res = '%sp' % format['height']\n    elif format.get('width') is not None:\n        res = '?x%d' % format['width']\n    else:\n        res = default\n    return res",
                            "def _format_note(self, fdict):\n    res = ''\n    if fdict.get('ext') in ['f4f', 'f4m']:\n        res += '(unsupported) '\n    if fdict.get('format_note') is not None:\n        res += fdict['format_note'] + ' '\n    if fdict.get('tbr') is not None:\n        res += '%4dk ' % fdict['tbr']\n    if fdict.get('container') is not None:\n        if res:\n            res += ', '\n        res += '%s container' % fdict['container']\n    if fdict.get('vcodec') is not None and fdict.get('vcodec') != 'none':\n        if res:\n            res += ', '\n        res += fdict['vcodec']\n        if fdict.get('vbr') is not None:\n            res += '@'\n    elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n        res += 'video@'\n    if fdict.get('vbr') is not None:\n        res += '%4dk' % fdict['vbr']\n    if fdict.get('fps') is not None:\n        res += ', %sfps' % fdict['fps']\n    if fdict.get('acodec') is not None:\n        if res:\n            res += ', '\n        if fdict['acodec'] == 'none':\n            res += 'video only'\n        else:\n            res += '%-5s' % fdict['acodec']\n    elif fdict.get('abr') is not None:\n        if res:\n            res += ', '\n        res += 'audio'\n    if fdict.get('abr') is not None:\n        res += '@%3dk' % fdict['abr']\n    if fdict.get('asr') is not None:\n        res += ' (%5dHz)' % fdict['asr']\n    if fdict.get('filesize') is not None:\n        if res:\n            res += ', '\n        res += format_bytes(fdict['filesize'])\n    elif fdict.get('filesize_approx') is not None:\n        if res:\n            res += ', '\n        res += '~' + format_bytes(fdict['filesize_approx'])\n    return res",
                            "def list_formats(self, info_dict):\n    formats = info_dict.get('formats', [info_dict])\n    table = [[f['format_id'], f['ext'], self.format_resolution(f), self._format_note(f)] for f in formats if f.get('preference') is None or f['preference'] >= -1000]\n    if len(formats) > 1:\n        table[-1][-1] += (' ' if table[-1][-1] else '') + '(best)'\n    header_line = ['format code', 'extension', 'resolution', 'note']\n    self.to_screen('[info] Available formats for %s:\\n%s' % (info_dict['id'], render_table(header_line, table)))",
                            "def list_thumbnails(self, info_dict):\n    thumbnails = info_dict.get('thumbnails')\n    if not thumbnails:\n        tn_url = info_dict.get('thumbnail')\n        if tn_url:\n            thumbnails = [{'id': '0', 'url': tn_url}]\n        else:\n            self.to_screen('[info] No thumbnails present for %s' % info_dict['id'])\n            return\n    self.to_screen('[info] Thumbnails for %s:' % info_dict['id'])\n    self.to_screen(render_table(['ID', 'width', 'height', 'URL'], [[t['id'], t.get('width', 'unknown'), t.get('height', 'unknown'), t['url']] for t in thumbnails]))",
                            "def list_subtitles(self, video_id, subtitles, name='subtitles'):\n    if not subtitles:\n        self.to_screen('%s has no %s' % (video_id, name))\n        return\n    self.to_screen('Available %s for %s:' % (name, video_id))\n    self.to_screen(render_table(['Language', 'formats'], [[lang, ', '.join((f['ext'] for f in reversed(formats)))] for (lang, formats) in subtitles.items()]))",
                            "def urlopen(self, req):\n    \"\"\" Start an HTTP download \"\"\"\n    req_is_string = isinstance(req, compat_basestring)\n    url = req if req_is_string else req.get_full_url()\n    url_escaped = escape_url(url)\n    if url != url_escaped:\n        if req_is_string:\n            req = url_escaped\n        else:\n            req_type = HEADRequest if req.get_method() == 'HEAD' else compat_urllib_request.Request\n            req = req_type(url_escaped, data=req.data, headers=req.headers, origin_req_host=req.origin_req_host, unverifiable=req.unverifiable)\n    return self._opener.open(req, timeout=self._socket_timeout)",
                            "def print_debug_header(self):\n    if not self.params.get('verbose'):\n        return\n    if type('') is not compat_str:\n        self.report_warning('Your Python is broken! Update to a newer and supported version')\n    stdout_encoding = getattr(sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n    encoding_str = '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (locale.getpreferredencoding(), sys.getfilesystemencoding(), stdout_encoding, self.get_encoding())\n    write_string(encoding_str, encoding=None)\n    self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n    try:\n        sp = subprocess.Popen(['git', 'rev-parse', '--short', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=os.path.dirname(os.path.abspath(__file__)))\n        (out, err) = sp.communicate()\n        out = out.decode().strip()\n        if re.match('[0-9a-f]+', out):\n            self._write_string('[debug] Git HEAD: ' + out + '\\n')\n    except Exception:\n        try:\n            sys.exc_clear()\n        except Exception:\n            pass\n    self._write_string('[debug] Python version %s - %s\\n' % (platform.python_version(), platform_name()))\n    exe_versions = FFmpegPostProcessor.get_versions(self)\n    exe_versions['rtmpdump'] = rtmpdump_version()\n    exe_str = ', '.join(('%s %s' % (exe, v) for (exe, v) in sorted(exe_versions.items()) if v))\n    if not exe_str:\n        exe_str = 'none'\n    self._write_string('[debug] exe versions: %s\\n' % exe_str)\n    proxy_map = {}\n    for handler in self._opener.handlers:\n        if hasattr(handler, 'proxies'):\n            proxy_map.update(handler.proxies)\n    self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n    if self.params.get('call_home', False):\n        ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n        self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n        latest_version = self.urlopen('https://yt-dl.org/latest/version').read().decode('utf-8')\n        if version_tuple(latest_version) > version_tuple(__version__):\n            self.report_warning('You are using an outdated version (newest version: %s)! See https://yt-dl.org/update if you need help updating.' % latest_version)",
                            "def _setup_opener(self):\n    timeout_val = self.params.get('socket_timeout')\n    self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n    opts_cookiefile = self.params.get('cookiefile')\n    opts_proxy = self.params.get('proxy')\n    if opts_cookiefile is None:\n        self.cookiejar = compat_cookiejar.CookieJar()\n    else:\n        self.cookiejar = compat_cookiejar.MozillaCookieJar(opts_cookiefile)\n        if os.access(opts_cookiefile, os.R_OK):\n            self.cookiejar.load()\n    cookie_processor = compat_urllib_request.HTTPCookieProcessor(self.cookiejar)\n    if opts_proxy is not None:\n        if opts_proxy == '':\n            proxies = {}\n        else:\n            proxies = {'http': opts_proxy, 'https': opts_proxy}\n    else:\n        proxies = compat_urllib_request.getproxies()\n        if 'http' in proxies and 'https' not in proxies:\n            proxies['https'] = proxies['http']\n    proxy_handler = PerRequestProxyHandler(proxies)\n    debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n    https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n    ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n    opener = compat_urllib_request.build_opener(proxy_handler, https_handler, cookie_processor, ydlh)\n    opener.addheaders = []\n    self._opener = opener",
                            "def encode(self, s):\n    if isinstance(s, bytes):\n        return s\n    try:\n        return s.encode(self.get_encoding())\n    except UnicodeEncodeError as err:\n        err.reason = err.reason + '. Check your system encoding configuration or use the --encoding option.'\n        raise",
                            "def get_encoding(self):\n    encoding = self.params.get('encoding')\n    if encoding is None:\n        encoding = preferredencoding()\n    return encoding",
                            "def _write_thumbnails(self, info_dict, filename):\n    if self.params.get('writethumbnail', False):\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails:\n            thumbnails = [thumbnails[-1]]\n    elif self.params.get('write_all_thumbnails', False):\n        thumbnails = info_dict.get('thumbnails')\n    else:\n        return\n    if not thumbnails:\n        return\n    for t in thumbnails:\n        thumb_ext = determine_ext(t['url'], 'jpg')\n        suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n        thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n        t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n            self.to_screen('[%s] %s: Thumbnail %sis already present' % (info_dict['extractor'], info_dict['id'], thumb_display_id))\n        else:\n            self.to_screen('[%s] %s: Downloading thumbnail %s...' % (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            try:\n                uf = self.urlopen(t['url'])\n                with open(thumb_filename, 'wb') as thumbf:\n                    shutil.copyfileobj(uf, thumbf)\n                self.to_screen('[%s] %s: Writing thumbnail %sto: %s' % (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_warning('Unable to download thumbnail \"%s\": %s' % (t['url'], compat_str(err)))",
                            "def _filter(f):\n    actual_value = f.get(m.group('key'))\n    if actual_value is None:\n        return m.group('none_inclusive')\n    return op(actual_value, comparison_value)",
                            "def syntax_error(note, start):\n    message = 'Invalid format specification: {0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1])\n    return SyntaxError(message)",
                            "def _parse_filter(tokens):\n    filter_parts = []\n    for (type, string, start, _, _) in tokens:\n        if type == tokenize.OP and string == ']':\n            return ''.join(filter_parts)\n        else:\n            filter_parts.append(string)",
                            "def _parse_format_selection(tokens, endwith=[]):\n    selectors = []\n    current_selector = None\n    for (type, string, start, _, _) in tokens:\n        if type == getattr(tokenize, 'ENCODING', None):\n            continue\n        elif type in [tokenize.NAME, tokenize.NUMBER]:\n            current_selector = FormatSelector(SINGLE, string, [])\n        elif type == tokenize.OP:\n            if string in endwith:\n                break\n            elif string == ')':\n                tokens.restore_last_token()\n                break\n            if string == ',':\n                selectors.append(current_selector)\n                current_selector = None\n            elif string == '/':\n                first_choice = current_selector\n                second_choice = _parse_format_selection(tokens, [','])\n                current_selector = None\n                selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n            elif string == '[':\n                if not current_selector:\n                    current_selector = FormatSelector(SINGLE, 'best', [])\n                format_filter = _parse_filter(tokens)\n                current_selector.filters.append(format_filter)\n            elif string == '(':\n                if current_selector:\n                    raise syntax_error('Unexpected \"(\"', start)\n                current_selector = FormatSelector(GROUP, _parse_format_selection(tokens, [')']), [])\n            elif string == '+':\n                video_selector = current_selector\n                audio_selector = _parse_format_selection(tokens, [','])\n                current_selector = None\n                selectors.append(FormatSelector(MERGE, (video_selector, audio_selector), []))\n            else:\n                raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n        elif type == tokenize.ENDMARKER:\n            break\n    if current_selector:\n        selectors.append(current_selector)\n    return selectors",
                            "def _build_selector_function(selector):\n    if isinstance(selector, list):\n        fs = [_build_selector_function(s) for s in selector]\n\n        def selector_function(formats):\n            for f in fs:\n                for format in f(formats):\n                    yield format\n        return selector_function\n    elif selector.type == GROUP:\n        selector_function = _build_selector_function(selector.selector)\n    elif selector.type == PICKFIRST:\n        fs = [_build_selector_function(s) for s in selector.selector]\n\n        def selector_function(formats):\n            for f in fs:\n                picked_formats = list(f(formats))\n                if picked_formats:\n                    return picked_formats\n            return []\n    elif selector.type == SINGLE:\n        format_spec = selector.selector\n\n        def selector_function(formats):\n            if format_spec == 'all':\n                for f in formats:\n                    yield f\n            elif format_spec in ['best', 'worst', None]:\n                format_idx = 0 if format_spec == 'worst' else -1\n                audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                if audiovideo_formats:\n                    yield audiovideo_formats[format_idx]\n                elif all((f.get('acodec') != 'none' for f in formats)) or all((f.get('vcodec') != 'none' for f in formats)):\n                    yield formats[format_idx]\n            elif format_spec == 'bestaudio':\n                audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[-1]\n            elif format_spec == 'worstaudio':\n                audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[0]\n            elif format_spec == 'bestvideo':\n                video_formats = [f for f in formats if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[-1]\n            elif format_spec == 'worstvideo':\n                video_formats = [f for f in formats if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[0]\n            else:\n                extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                if format_spec in extensions:\n                    filter_f = lambda f: f['ext'] == format_spec\n                else:\n                    filter_f = lambda f: f['format_id'] == format_spec\n                matches = list(filter(filter_f, formats))\n                if matches:\n                    yield matches[-1]\n    elif selector.type == MERGE:\n\n        def _merge(formats_info):\n            (format_1, format_2) = [f['format_id'] for f in formats_info]\n            if formats_info[0].get('vcodec') == 'none':\n                self.report_error('The first format must contain the video, try using \"-f %s+%s\"' % (format_2, format_1))\n                return\n            output_ext = formats_info[0]['ext'] if self.params.get('merge_output_format') is None else self.params['merge_output_format']\n            return {'requested_formats': formats_info, 'format': '%s+%s' % (formats_info[0].get('format'), formats_info[1].get('format')), 'format_id': '%s+%s' % (formats_info[0].get('format_id'), formats_info[1].get('format_id')), 'width': formats_info[0].get('width'), 'height': formats_info[0].get('height'), 'resolution': formats_info[0].get('resolution'), 'fps': formats_info[0].get('fps'), 'vcodec': formats_info[0].get('vcodec'), 'vbr': formats_info[0].get('vbr'), 'stretched_ratio': formats_info[0].get('stretched_ratio'), 'acodec': formats_info[1].get('acodec'), 'abr': formats_info[1].get('abr'), 'ext': output_ext}\n        (video_selector, audio_selector) = map(_build_selector_function, selector.selector)\n\n        def selector_function(formats):\n            formats = list(formats)\n            for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                yield _merge(pair)\n    filters = [self._build_format_filter(f) for f in selector.filters]\n\n    def final_selector(formats):\n        for _filter in filters:\n            formats = list(filter(_filter, formats))\n        return selector_function(formats)\n    return final_selector",
                            "def final_selector(formats):\n    for _filter in filters:\n        formats = list(filter(_filter, formats))\n    return selector_function(formats)",
                            "def __init__(self, tokens):\n    self.tokens = tokens\n    self.counter = 0",
                            "def __iter__(self):\n    return self",
                            "def __next__(self):\n    if self.counter >= len(self.tokens):\n        raise StopIteration()\n    value = self.tokens[self.counter]\n    self.counter += 1\n    return value",
                            "def restore_last_token(self):\n    self.counter -= 1",
                            "def selector_function(formats):\n    for f in fs:\n        for format in f(formats):\n            yield format",
                            "def dl(name, info):\n    fd = get_suitable_downloader(info, self.params)(self, self.params)\n    for ph in self._progress_hooks:\n        fd.add_progress_hook(ph)\n    if self.params.get('verbose'):\n        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n    return fd.download(name, info)",
                            "def compatible_formats(formats):\n    (video, audio) = formats\n    (video_ext, audio_ext) = (audio.get('ext'), video.get('ext'))\n    if video_ext and audio_ext:\n        COMPATIBLE_EXTS = (('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v'), 'webm')\n        for exts in COMPATIBLE_EXTS:\n            if video_ext in exts and audio_ext in exts:\n                return True\n    return False",
                            "def selector_function(formats):\n    for f in fs:\n        picked_formats = list(f(formats))\n        if picked_formats:\n            return picked_formats\n    return []",
                            "def iter_playlistitems(format):\n    for string_segment in format.split(','):\n        if '-' in string_segment:\n            (start, end) = string_segment.split('-')\n            for item in range(int(start), int(end) + 1):\n                yield int(item)\n        else:\n            yield int(string_segment)",
                            "def _fixup(r):\n    self.add_extra_info(r, {'extractor': ie_result['extractor'], 'webpage_url': ie_result['webpage_url'], 'webpage_url_basename': url_basename(ie_result['webpage_url']), 'extractor_key': ie_result['extractor_key']})\n    return r",
                            "def selector_function(formats):\n    if format_spec == 'all':\n        for f in formats:\n            yield f\n    elif format_spec in ['best', 'worst', None]:\n        format_idx = 0 if format_spec == 'worst' else -1\n        audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n        if audiovideo_formats:\n            yield audiovideo_formats[format_idx]\n        elif all((f.get('acodec') != 'none' for f in formats)) or all((f.get('vcodec') != 'none' for f in formats)):\n            yield formats[format_idx]\n    elif format_spec == 'bestaudio':\n        audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[-1]\n    elif format_spec == 'worstaudio':\n        audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[0]\n    elif format_spec == 'bestvideo':\n        video_formats = [f for f in formats if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[-1]\n    elif format_spec == 'worstvideo':\n        video_formats = [f for f in formats if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[0]\n    else:\n        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n        if format_spec in extensions:\n            filter_f = lambda f: f['ext'] == format_spec\n        else:\n            filter_f = lambda f: f['format_id'] == format_spec\n        matches = list(filter(filter_f, formats))\n        if matches:\n            yield matches[-1]",
                            "def _merge(formats_info):\n    (format_1, format_2) = [f['format_id'] for f in formats_info]\n    if formats_info[0].get('vcodec') == 'none':\n        self.report_error('The first format must contain the video, try using \"-f %s+%s\"' % (format_2, format_1))\n        return\n    output_ext = formats_info[0]['ext'] if self.params.get('merge_output_format') is None else self.params['merge_output_format']\n    return {'requested_formats': formats_info, 'format': '%s+%s' % (formats_info[0].get('format'), formats_info[1].get('format')), 'format_id': '%s+%s' % (formats_info[0].get('format_id'), formats_info[1].get('format_id')), 'width': formats_info[0].get('width'), 'height': formats_info[0].get('height'), 'resolution': formats_info[0].get('resolution'), 'fps': formats_info[0].get('fps'), 'vcodec': formats_info[0].get('vcodec'), 'vbr': formats_info[0].get('vbr'), 'stretched_ratio': formats_info[0].get('stretched_ratio'), 'acodec': formats_info[1].get('acodec'), 'abr': formats_info[1].get('abr'), 'ext': output_ext}",
                            "def selector_function(formats):\n    formats = list(formats)\n    for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n        yield _merge(pair)"
                        ],
                        "constructor_variables": [
                            "self._ies = []",
                            "self._ies_instances = {}",
                            "self._pps = []",
                            "self._progress_hooks = []",
                            "self._download_retcode = 0",
                            "self._num_downloads = 0",
                            "self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]",
                            "self._err_file = sys.stderr",
                            "self.params = params",
                            "self.cache = Cache(self)",
                            "self._output_process = subprocess.Popen(['bidiv'] + width_args, **sp_kwargs)",
                            "self._output_process = subprocess.Popen(['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)",
                            "self._output_channel = os.fdopen(master, 'rb')"
                        ],
                        "class_level_variables": [
                            "params = None",
                            "_ies = []",
                            "_pps = []",
                            "_download_retcode = None",
                            "_num_downloads = None",
                            "_screen_file = None"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, params=None, auto_init=True)",
                            "warn_if_short_id(self, argv)",
                            "add_info_extractor(self, ie)",
                            "get_info_extractor(self, ie_key)",
                            "add_default_info_extractors(self)",
                            "add_post_processor(self, pp)",
                            "add_progress_hook(self, ph)",
                            "_bidi_workaround(self, message)",
                            "to_screen(self, message, skip_eol=False)",
                            "_write_string(self, s, out=None)",
                            "to_stdout(self, message, skip_eol=False, check_quiet=False)",
                            "to_stderr(self, message)",
                            "to_console_title(self, message)",
                            "save_console_title(self)",
                            "restore_console_title(self)",
                            "__enter__(self)",
                            "__exit__(self, *args)",
                            "trouble(self, message=None, tb=None)",
                            "report_warning(self, message)",
                            "report_error(self, message, tb=None)",
                            "report_file_already_downloaded(self, file_name)",
                            "prepare_filename(self, info_dict)",
                            "_match_entry(self, info_dict, incomplete)",
                            "add_extra_info(info_dict, extra_info)",
                            "extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False)",
                            "add_default_extra_info(self, ie_result, ie, url)",
                            "process_ie_result(self, ie_result, download=True, extra_info={})",
                            "_build_format_filter(self, filter_spec)",
                            "build_format_selector(self, format_spec)",
                            "_calc_headers(self, info_dict)",
                            "_calc_cookies(self, info_dict)",
                            "process_video_result(self, info_dict, download=True)",
                            "process_subtitles(self, video_id, normal_subtitles, automatic_captions)",
                            "process_info(self, info_dict)",
                            "download(self, url_list)",
                            "download_with_info_file(self, info_filename)",
                            "filter_requested_info(info_dict)",
                            "post_process(self, filename, ie_info)",
                            "_make_archive_id(self, info_dict)",
                            "in_download_archive(self, info_dict)",
                            "record_download_archive(self, info_dict)",
                            "format_resolution(format, default='unknown')",
                            "_format_note(self, fdict)",
                            "list_formats(self, info_dict)",
                            "list_thumbnails(self, info_dict)",
                            "list_subtitles(self, video_id, subtitles, name='subtitles')",
                            "urlopen(self, req)",
                            "print_debug_header(self)",
                            "_setup_opener(self)",
                            "encode(self, s)",
                            "get_encoding(self)",
                            "_write_thumbnails(self, info_dict, filename)",
                            "_filter(f)",
                            "syntax_error(note, start)",
                            "_parse_filter(tokens)",
                            "_parse_format_selection(tokens, endwith=[])",
                            "_build_selector_function(selector)",
                            "final_selector(formats)",
                            "__init__(self, tokens)",
                            "__iter__(self)",
                            "__next__(self)",
                            "restore_last_token(self)",
                            "selector_function(formats)",
                            "dl(name, info)",
                            "compatible_formats(formats)",
                            "selector_function(formats)",
                            "iter_playlistitems(format)",
                            "_fixup(r)",
                            "selector_function(formats)",
                            "_merge(formats_info)",
                            "selector_function(formats)"
                        ],
                        "class_level_variable_names": [
                            "params",
                            "_ies",
                            "_pps",
                            "_download_retcode",
                            "_num_downloads",
                            "_screen_file"
                        ],
                        "constructor_variable_names": [
                            "_ies_instances",
                            "_num_downloads",
                            "_err_file",
                            "pp",
                            "_download_retcode",
                            "pp_def",
                            "width",
                            "_ies",
                            "sp_kwargs",
                            "pp_class",
                            "_progress_hooks",
                            "_pps",
                            "params",
                            "_screen_file",
                            "width_args",
                            "_output_process",
                            "_output_channel",
                            "cache"
                        ]
                    },
                    "used_imports": [
                        "import collections",
                        "import io",
                        "import itertools",
                        "import tokenize",
                        "from .compat import compat_basestring, compat_cookiejar, compat_expanduser, compat_get_terminal_size, compat_http_client, compat_kwargs, compat_str, compat_tokenize_tokenize, compat_urllib_error, compat_urllib_request"
                    ],
                    "variable_values": [
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line='')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line='')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7fe872a8e410>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7fe872a8e410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endwith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7fe872a71320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7fe876591440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7fe872a41e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7fe872a713b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7fe872a13690>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fe876529940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7fe8729aeb30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line='')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line='')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MERGE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SINGLE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GROUP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatSelector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "<bound method YoutubeDL.report_error of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<test.test_YoutubeDL.YDL object at 0x7f51ff612a50>",
                                    "variable_type": "YDL",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "{'consoletitle': False, 'continuedl': True, 'forcedescription': False, 'forcefilename': False, 'forceformat': False, 'forcethumbnail': False, 'forcetitle': False, 'forceurl': False, 'format': 'bestvideo+bestaudio', 'ignoreerrors': False, 'listformats': None, 'logtostderr': False, 'matchtitle': None, 'max_downloads': None, 'nooverwrites': False, 'nopart': False, 'noprogress': False, 'outtmpl': '%(id)s.%(ext)s', 'password': None, 'playlistend': -1, 'playliststart': 1, 'prefer_free_formats': False, 'quiet': False, 'ratelimit': None, 'rejecttitle': None, 'retries': 10, 'simulate': False, 'subtitleslang': None, 'subtitlesformat': 'best', 'test': True, 'updatetime': True, 'usenetrc': False, 'username': None, 'verbose': True, 'writedescription': False, 'writeinfojson': True, 'writesubtitles': False, 'allsubtitles': False, 'listssubtitles': False, 'socket_timeout': 20, 'fixup': 'never'}",
                                    "variable_type": "dict",
                                    "variable_shape": "41"
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "<bound method YoutubeDL._build_format_filter of <test.test_YoutubeDL.YDL object at 0x7f51ff612a50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "note": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec": {
                                    "variable_value": "'bestvideo+bestaudio'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PICKFIRST": {
                                    "variable_value": "'PICKFIRST'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "MERGE": {
                                    "variable_value": "'MERGE'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "SINGLE": {
                                    "variable_value": "'SINGLE'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "GROUP": {
                                    "variable_value": "'GROUP'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "FormatSelector": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.FormatSelector'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "collections.namedtuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tokenize.OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_parts.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokens.restore_last_token": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inside_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selectors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "first_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "second_choice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_format_selection": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_format_selection at 0x7f5202a31200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "format_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_filter": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._parse_filter at 0x7f52029d5680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "current_selector.filters.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syntax_error": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>.syntax_error at 0x7f52029d5d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_build_selector_function": {
                                    "variable_value": "<function YoutubeDL.build_format_selector.<locals>._build_selector_function at 0x7f5202a31290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "selector.selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "picked_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audiovideo_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "audio_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "video_formats": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extensions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "formats_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.report_error": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator object at 0x7f51ff616b50>",
                                    "variable_type": "TokenIterator",
                                    "variable_shape": null
                                },
                                "output_ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pair": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.product": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_merge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._build_format_filter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "selector.filters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": "<_io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_spec.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7f5203374ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "compat_tokenize_tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream.readline": {
                                    "variable_value": "<built-in method readline of _io.BytesIO object at 0x7f5202a28590>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "tokenize.TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tokens": {
                                    "variable_value": "[TokenInfo(type=57 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line=''), TokenInfo(type=1 (NAME), string='bestvideo', start=(1, 0), end=(1, 9), line='bestvideo+bestaudio'), TokenInfo(type=53 (OP), string='+', start=(1, 9), end=(1, 10), line='bestvideo+bestaudio'), TokenInfo(type=1 (NAME), string='bestaudio', start=(1, 10), end=(1, 19), line='bestvideo+bestaudio'), TokenInfo(type=4 (NEWLINE), string='', start=(1, 19), end=(1, 20), line=''), TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "self.counter": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')",
                                    "variable_type": "TokenInfo",
                                    "variable_shape": "5"
                                },
                                "__next__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_selector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenIterator": {
                                    "variable_value": "<class 'youtube_dl.YoutubeDL.YoutubeDL.build_format_selector.<locals>.TokenIterator'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, params=None, auto_init=True):\n    \"\"\"Create a FileDownloader object with the given options.\"\"\"\n    if params is None:\n        params = {}\n    self._ies = []\n    self._ies_instances = {}\n    self._pps = []\n    self._progress_hooks = []\n    self._download_retcode = 0\n    self._num_downloads = 0\n    self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n    self._err_file = sys.stderr\n    self.params = params\n    self.cache = Cache(self)\n\n    if params.get('bidi_workaround', False):\n        try:\n            import pty\n            master, slave = pty.openpty()\n            width = compat_get_terminal_size().columns\n            if width is None:\n                width_args = []\n            else:\n                width_args = ['-w', str(width)]\n            sp_kwargs = dict(\n                stdin=subprocess.PIPE,\n                stdout=slave,\n                stderr=self._err_file)\n            try:\n                self._output_process = subprocess.Popen(\n                    ['bidiv'] + width_args, **sp_kwargs\n                )\n            except OSError:\n                self._output_process = subprocess.Popen(\n                    ['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n            self._output_channel = os.fdopen(master, 'rb')\n        except OSError as ose:\n            if ose.errno == 2:\n                self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n            else:\n                raise\n\n    if (sys.version_info >= (3,) and sys.platform != 'win32' and\n            sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968'] and\n            not params.get('restrictfilenames', False)):\n        # On Python 3, the Unicode filesystem API will throw errors (#1474)\n        self.report_warning(\n            'Assuming --restrict-filenames since file system encoding '\n            'cannot encode all characters. '\n            'Set the LC_ALL environment variable to fix this.')\n        self.params['restrictfilenames'] = True\n\n    if isinstance(params.get('outtmpl'), bytes):\n        self.report_warning(\n            'Parameter outtmpl is bytes, but should be a unicode string. '\n            'Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n\n    self._setup_opener()\n\n    if auto_init:\n        self.print_debug_header()\n        self.add_default_info_extractors()\n\n    for pp_def_raw in self.params.get('postprocessors', []):\n        pp_class = get_postprocessor(pp_def_raw['key'])\n        pp_def = dict(pp_def_raw)\n        del pp_def['key']\n        pp = pp_class(self, **compat_kwargs(pp_def))\n        self.add_post_processor(pp)\n\n    for ph in self.params.get('progress_hooks', []):\n        self.add_progress_hook(ph)",
                "def warn_if_short_id(self, argv):\n    # short YouTube ID starting with dash?\n    idxs = [\n        i for i, a in enumerate(argv)\n        if re.match(r'^-[0-9A-Za-z_-]{10}$', a)]\n    if idxs:\n        correct_argv = (\n            ['youtube-dl'] +\n            [a for i, a in enumerate(argv) if i not in idxs] +\n            ['--'] + [argv[i] for i in idxs]\n        )\n        self.report_warning(\n            'Long argument string detected. '\n            'Use -- to separate parameters and URLs, like this:\\n%s\\n' %\n            args_to_str(correct_argv))",
                "def add_info_extractor(self, ie):\n    \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n    self._ies.append(ie)\n    self._ies_instances[ie.ie_key()] = ie\n    ie.set_downloader(self)",
                "def get_info_extractor(self, ie_key):\n    \"\"\"\n    Get an instance of an IE with name ie_key, it will try to get one from\n    the _ies list, if there's no instance it will create a new one and add\n    it to the extractor list.\n    \"\"\"\n    ie = self._ies_instances.get(ie_key)\n    if ie is None:\n        ie = get_info_extractor(ie_key)()\n        self.add_info_extractor(ie)\n    return ie",
                "def add_default_info_extractors(self):\n    \"\"\"\n    Add the InfoExtractors returned by gen_extractors to the end of the list\n    \"\"\"\n    for ie in gen_extractors():\n        self.add_info_extractor(ie)",
                "def add_post_processor(self, pp):\n    \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n    self._pps.append(pp)\n    pp.set_downloader(self)",
                "def add_progress_hook(self, ph):\n    \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n    self._progress_hooks.append(ph)",
                "def _bidi_workaround(self, message):\n    if not hasattr(self, '_output_channel'):\n        return message\n\n    assert hasattr(self, '_output_process')\n    assert isinstance(message, compat_str)\n    line_count = message.count('\\n') + 1\n    self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n    self._output_process.stdin.flush()\n    res = ''.join(self._output_channel.readline().decode('utf-8')\n                  for _ in range(line_count))\n    return res[:-len('\\n')]",
                "def to_screen(self, message, skip_eol=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    return self.to_stdout(message, skip_eol, check_quiet=True)",
                "def _write_string(self, s, out=None):\n    write_string(s, out=out, encoding=self.params.get('encoding'))",
                "def to_stdout(self, message, skip_eol=False, check_quiet=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    if self.params.get('logger'):\n        self.params['logger'].debug(message)\n    elif not check_quiet or not self.params.get('quiet', False):\n        message = self._bidi_workaround(message)\n        terminator = ['\\n', ''][skip_eol]\n        output = message + terminator\n\n        self._write_string(output, self._screen_file)",
                "def to_stderr(self, message):\n    \"\"\"Print message to stderr.\"\"\"\n    assert isinstance(message, compat_str)\n    if self.params.get('logger'):\n        self.params['logger'].error(message)\n    else:\n        message = self._bidi_workaround(message)\n        output = message + '\\n'\n        self._write_string(output, self._err_file)",
                "def to_console_title(self, message):\n    if not self.params.get('consoletitle', False):\n        return\n    if os.name == 'nt' and ctypes.windll.kernel32.GetConsoleWindow():\n        # c_wchar_p() might not be necessary if `message` is\n        # already of type unicode()\n        ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n    elif 'TERM' in os.environ:\n        self._write_string('\\033]0;%s\\007' % message, self._screen_file)",
                "def save_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        # Save the title on stack\n        self._write_string('\\033[22;0t', self._screen_file)",
                "def restore_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        # Restore the title from stack\n        self._write_string('\\033[23;0t', self._screen_file)",
                "def __enter__(self):\n    self.save_console_title()\n    return self",
                "def __exit__(self, *args):\n    self.restore_console_title()\n\n    if self.params.get('cookiefile') is not None:\n        self.cookiejar.save()",
                "def trouble(self, message=None, tb=None):\n    \"\"\"Determine action to take when a download problem appears.\n\n    Depending on if the downloader has been configured to ignore\n    download errors or not, this method may throw an exception or\n    not when errors are found, after printing the message.\n\n    tb, if given, is additional traceback information.\n    \"\"\"\n    if message is not None:\n        self.to_stderr(message)\n    if self.params.get('verbose'):\n        if tb is None:\n            if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                tb = ''\n                if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                    tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                tb += compat_str(traceback.format_exc())\n            else:\n                tb_data = traceback.format_list(traceback.extract_stack())\n                tb = ''.join(tb_data)\n        self.to_stderr(tb)\n    if not self.params.get('ignoreerrors', False):\n        if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n            exc_info = sys.exc_info()[1].exc_info\n        else:\n            exc_info = sys.exc_info()\n        raise DownloadError(message, exc_info)\n    self._download_retcode = 1",
                "def report_warning(self, message):\n    '''\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    '''\n    if self.params.get('logger') is not None:\n        self.params['logger'].warning(message)\n    else:\n        if self.params.get('no_warnings'):\n            return\n        if not self.params.get('no_color') and self._err_file.isatty() and os.name != 'nt':\n            _msg_header = '\\033[0;33mWARNING:\\033[0m'\n        else:\n            _msg_header = 'WARNING:'\n        warning_message = '%s %s' % (_msg_header, message)\n        self.to_stderr(warning_message)",
                "def report_error(self, message, tb=None):\n    '''\n    Do the same as trouble, but prefixes the message with 'ERROR:', colored\n    in red if stderr is a tty file.\n    '''\n    if not self.params.get('no_color') and self._err_file.isatty() and os.name != 'nt':\n        _msg_header = '\\033[0;31mERROR:\\033[0m'\n    else:\n        _msg_header = 'ERROR:'\n    error_message = '%s %s' % (_msg_header, message)\n    self.trouble(error_message, tb)",
                "def report_file_already_downloaded(self, file_name):\n    \"\"\"Report file has already been fully downloaded.\"\"\"\n    try:\n        self.to_screen('[download] %s has already been downloaded' % file_name)\n    except UnicodeEncodeError:\n        self.to_screen('[download] The file has already been downloaded')",
                "def prepare_filename(self, info_dict):\n    \"\"\"Generate the output filename.\"\"\"\n    try:\n        template_dict = dict(info_dict)\n\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size')\n        if autonumber_size is None:\n            autonumber_size = 5\n        autonumber_templ = '%0' + str(autonumber_size) + 'd'\n        template_dict['autonumber'] = autonumber_templ % self._num_downloads\n        if template_dict.get('playlist_index') is not None:\n            template_dict['playlist_index'] = '%0*d' % (len(str(template_dict['n_entries'])), template_dict['playlist_index'])\n        if template_dict.get('resolution') is None:\n            if template_dict.get('width') and template_dict.get('height'):\n                template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n            elif template_dict.get('height'):\n                template_dict['resolution'] = '%sp' % template_dict['height']\n            elif template_dict.get('width'):\n                template_dict['resolution'] = '?x%d' % template_dict['width']\n\n        sanitize = lambda k, v: sanitize_filename(\n            compat_str(v),\n            restricted=self.params.get('restrictfilenames'),\n            is_id=(k == 'id'))\n        template_dict = dict((k, sanitize(k, v))\n                             for k, v in template_dict.items()\n                             if v is not None)\n        template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n        outtmpl = sanitize_path(self.params.get('outtmpl', DEFAULT_OUTTMPL))\n        tmpl = compat_expanduser(outtmpl)\n        filename = tmpl % template_dict\n        # Temporary fix for #4787\n        # 'Treat' all problem characters by passing filename through preferredencoding\n        # to workaround encoding issues with subprocess on python2 @ Windows\n        if sys.version_info < (3, 0) and sys.platform == 'win32':\n            filename = encodeFilename(filename, True).decode(preferredencoding())\n        return filename\n    except ValueError as err:\n        self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n        return None",
                "def _match_entry(self, info_dict, incomplete):\n    \"\"\" Returns None iff the file should be downloaded \"\"\"\n\n    video_title = info_dict.get('title', info_dict.get('id', 'video'))\n    if 'title' in info_dict:\n        # This can happen when we're just evaluating the playlist\n        title = info_dict['title']\n        matchtitle = self.params.get('matchtitle', False)\n        if matchtitle:\n            if not re.search(matchtitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n        rejecttitle = self.params.get('rejecttitle', False)\n        if rejecttitle:\n            if re.search(rejecttitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n    date = info_dict.get('upload_date', None)\n    if date is not None:\n        dateRange = self.params.get('daterange', DateRange())\n        if date not in dateRange:\n            return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n    view_count = info_dict.get('view_count', None)\n    if view_count is not None:\n        min_views = self.params.get('min_views')\n        if min_views is not None and view_count < min_views:\n            return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n        max_views = self.params.get('max_views')\n        if max_views is not None and view_count > max_views:\n            return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n    if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n        return 'Skipping \"%s\" because it is age restricted' % video_title\n    if self.in_download_archive(info_dict):\n        return '%s has already been recorded in archive' % video_title\n\n    if not incomplete:\n        match_filter = self.params.get('match_filter')\n        if match_filter is not None:\n            ret = match_filter(info_dict)\n            if ret is not None:\n                return ret\n\n    return None",
                "@staticmethod\ndef add_extra_info(info_dict, extra_info):\n    '''Set the keys from extra_info in info dict if they are missing'''\n    for key, value in extra_info.items():\n        info_dict.setdefault(key, value)",
                "def extract_info(self, url, download=True, ie_key=None, extra_info={},\n                 process=True, force_generic_extractor=False):\n    '''\n    Returns a list with a dictionary for each video we find.\n    If 'download', also downloads the videos.\n    extra_info is a dict containing the extra values to add to each result\n    '''\n\n    if not ie_key and force_generic_extractor:\n        ie_key = 'Generic'\n\n    if ie_key:\n        ies = [self.get_info_extractor(ie_key)]\n    else:\n        ies = self._ies\n\n    for ie in ies:\n        if not ie.suitable(url):\n            continue\n\n        if not ie.working():\n            self.report_warning('The program functionality for this site has been marked as broken, '\n                                'and will probably not work.')\n\n        try:\n            ie_result = ie.extract(url)\n            if ie_result is None:  # Finished already (backwards compatibility; listformats and friends should be moved here)\n                break\n            if isinstance(ie_result, list):\n                # Backwards compatibility: old IE result format\n                ie_result = {\n                    '_type': 'compat_list',\n                    'entries': ie_result,\n                }\n            self.add_default_extra_info(ie_result, ie, url)\n            if process:\n                return self.process_ie_result(ie_result, download, extra_info)\n            else:\n                return ie_result\n        except ExtractorError as de:  # An error we somewhat expected\n            self.report_error(compat_str(de), de.format_traceback())\n            break\n        except MaxDownloadsReached:\n            raise\n        except Exception as e:\n            if self.params.get('ignoreerrors', False):\n                self.report_error(compat_str(e), tb=compat_str(traceback.format_exc()))\n                break\n            else:\n                raise\n    else:\n        self.report_error('no suitable InfoExtractor for URL %s' % url)",
                "def add_default_extra_info(self, ie_result, ie, url):\n    self.add_extra_info(ie_result, {\n        'extractor': ie.IE_NAME,\n        'webpage_url': url,\n        'webpage_url_basename': url_basename(url),\n        'extractor_key': ie.ie_key(),\n    })",
                "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    \"\"\"\n    Take the result of the ie(may be modified) and resolve all unresolved\n    references (URLs, playlist items).\n\n    It will also download the videos if 'download'.\n    Returns the resolved ie_result.\n    \"\"\"\n\n    result_type = ie_result.get('_type', 'video')\n\n    if result_type in ('url', 'url_transparent'):\n        extract_flat = self.params.get('extract_flat', False)\n        if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                extract_flat is True):\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'url':\n        # We have to add extra_info to the results because it may be\n        # contained in a playlist\n        return self.extract_info(ie_result['url'],\n                                 download,\n                                 ie_key=ie_result.get('ie_key'),\n                                 extra_info=extra_info)\n    elif result_type == 'url_transparent':\n        # Use the information from the embedding page\n        info = self.extract_info(\n            ie_result['url'], ie_key=ie_result.get('ie_key'),\n            extra_info=extra_info, download=False, process=False)\n\n        force_properties = dict(\n            (k, v) for k, v in ie_result.items() if v is not None)\n        for f in ('_type', 'url'):\n            if f in force_properties:\n                del force_properties[f]\n        new_result = info.copy()\n        new_result.update(force_properties)\n\n        assert new_result.get('_type') != 'url_transparent'\n\n        return self.process_ie_result(\n            new_result, download=download, extra_info=extra_info)\n    elif result_type == 'playlist' or result_type == 'multi_video':\n        # We process each entry in the playlist\n        playlist = ie_result.get('title', None) or ie_result.get('id', None)\n        self.to_screen('[download] Downloading playlist: %s' % playlist)\n\n        playlist_results = []\n\n        playliststart = self.params.get('playliststart', 1) - 1\n        playlistend = self.params.get('playlistend', None)\n        # For backwards compatibility, interpret -1 as whole list\n        if playlistend == -1:\n            playlistend = None\n\n        playlistitems_str = self.params.get('playlist_items', None)\n        playlistitems = None\n        if playlistitems_str is not None:\n            def iter_playlistitems(format):\n                for string_segment in format.split(','):\n                    if '-' in string_segment:\n                        start, end = string_segment.split('-')\n                        for item in range(int(start), int(end) + 1):\n                            yield int(item)\n                    else:\n                        yield int(string_segment)\n            playlistitems = iter_playlistitems(playlistitems_str)\n\n        ie_entries = ie_result['entries']\n        if isinstance(ie_entries, list):\n            n_all_entries = len(ie_entries)\n            if playlistitems:\n                entries = [\n                    ie_entries[i - 1] for i in playlistitems\n                    if -n_all_entries <= i - 1 < n_all_entries]\n            else:\n                entries = ie_entries[playliststart:playlistend]\n            n_entries = len(entries)\n            self.to_screen(\n                \"[%s] playlist %s: Collected %d video ids (downloading %d of them)\" %\n                (ie_result['extractor'], playlist, n_all_entries, n_entries))\n        elif isinstance(ie_entries, PagedList):\n            if playlistitems:\n                entries = []\n                for item in playlistitems:\n                    entries.extend(ie_entries.getslice(\n                        item - 1, item\n                    ))\n            else:\n                entries = ie_entries.getslice(\n                    playliststart, playlistend)\n            n_entries = len(entries)\n            self.to_screen(\n                \"[%s] playlist %s: Downloading %d videos\" %\n                (ie_result['extractor'], playlist, n_entries))\n        else:  # iterable\n            if playlistitems:\n                entry_list = list(ie_entries)\n                entries = [entry_list[i - 1] for i in playlistitems]\n            else:\n                entries = list(itertools.islice(\n                    ie_entries, playliststart, playlistend))\n            n_entries = len(entries)\n            self.to_screen(\n                \"[%s] playlist %s: Downloading %d videos\" %\n                (ie_result['extractor'], playlist, n_entries))\n\n        if self.params.get('playlistreverse', False):\n            entries = entries[::-1]\n\n        for i, entry in enumerate(entries, 1):\n            self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n            extra = {\n                'n_entries': n_entries,\n                'playlist': playlist,\n                'playlist_id': ie_result.get('id'),\n                'playlist_title': ie_result.get('title'),\n                'playlist_index': i + playliststart,\n                'extractor': ie_result['extractor'],\n                'webpage_url': ie_result['webpage_url'],\n                'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                'extractor_key': ie_result['extractor_key'],\n            }\n\n            reason = self._match_entry(entry, incomplete=True)\n            if reason is not None:\n                self.to_screen('[download] ' + reason)\n                continue\n\n            entry_result = self.process_ie_result(entry,\n                                                  download=download,\n                                                  extra_info=extra)\n            playlist_results.append(entry_result)\n        ie_result['entries'] = playlist_results\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning(\n            'Extractor %s returned a compat_list result. '\n            'It needs to be updated.' % ie_result.get('extractor'))\n\n        def _fixup(r):\n            self.add_extra_info(\n                r,\n                {\n                    'extractor': ie_result['extractor'],\n                    'webpage_url': ie_result['webpage_url'],\n                    'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                    'extractor_key': ie_result['extractor_key'],\n                }\n            )\n            return r\n        ie_result['entries'] = [\n            self.process_ie_result(_fixup(r), download, extra_info)\n            for r in ie_result['entries']\n        ]\n        return ie_result\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
                "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|fps)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        $\n        ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        try:\n            comparison_value = int(m.group('value'))\n        except ValueError:\n            comparison_value = parse_filesize(m.group('value'))\n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('value') + 'B')\n            if comparison_value is None:\n                raise ValueError(\n                    'Invalid value %r in format specification %r' % (\n                        m.group('value'), filter_spec))\n        op = OPERATORS[m.group('op')]\n\n    if not m:\n        STR_OPERATORS = {\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        str_operator_rex = re.compile(r'''(?x)\n            \\s*(?P<key>ext|acodec|vcodec|container|protocol)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n            \\s*(?P<value>[a-zA-Z0-9_-]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            comparison_value = m.group('value')\n            op = STR_OPERATORS[m.group('op')]\n\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    def _filter(f):\n        actual_value = f.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n    return _filter",
                "def build_format_selector(self, format_spec):\n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for type, string, start, _, _ in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n\n    def _parse_format_selection(tokens, endwith=[]):\n        selectors = []\n        current_selector = None\n        for type, string, start, _, _ in tokens:\n            # ENCODING is only defined in python 3.x\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string in endwith:\n                    break\n                elif string == ')':\n                    # ')' will be handled by the parentheses group\n                    tokens.restore_last_token()\n                    break\n                if string == ',':\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    current_selector = FormatSelector(GROUP, _parse_format_selection(tokens, [')']), [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(MERGE, (video_selector, audio_selector), []))\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n\n    def _build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [_build_selector_function(s) for s in selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    for format in f(formats):\n                        yield format\n            return selector_function\n        elif selector.type == GROUP:\n            selector_function = _build_selector_function(selector.selector)\n        elif selector.type == PICKFIRST:\n            fs = [_build_selector_function(s) for s in selector.selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    picked_formats = list(f(formats))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == SINGLE:\n            format_spec = selector.selector\n\n            def selector_function(formats):\n                if format_spec == 'all':\n                    for f in formats:\n                        yield f\n                elif format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == 'worst' else -1\n                    audiovideo_formats = [\n                        f for f in formats\n                        if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                    elif (all(f.get('acodec') != 'none' for f in formats) or\n                          all(f.get('vcodec') != 'none' for f in formats)):\n                        yield formats[format_idx]\n                elif format_spec == 'bestaudio':\n                    audio_formats = [\n                        f for f in formats\n                        if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[-1]\n                elif format_spec == 'worstaudio':\n                    audio_formats = [\n                        f for f in formats\n                        if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[0]\n                elif format_spec == 'bestvideo':\n                    video_formats = [\n                        f for f in formats\n                        if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[-1]\n                elif format_spec == 'worstvideo':\n                    video_formats = [\n                        f for f in formats\n                        if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[0]\n                else:\n                    extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                    if format_spec in extensions:\n                        filter_f = lambda f: f['ext'] == format_spec\n                    else:\n                        filter_f = lambda f: f['format_id'] == format_spec\n                    matches = list(filter(filter_f, formats))\n                    if matches:\n                        yield matches[-1]\n        elif selector.type == MERGE:\n            def _merge(formats_info):\n                format_1, format_2 = [f['format_id'] for f in formats_info]\n                # The first format must contain the video and the\n                # second the audio\n                if formats_info[0].get('vcodec') == 'none':\n                    self.report_error('The first format must '\n                                      'contain the video, try using '\n                                      '\"-f %s+%s\"' % (format_2, format_1))\n                    return\n                output_ext = (\n                    formats_info[0]['ext']\n                    if self.params.get('merge_output_format') is None\n                    else self.params['merge_output_format'])\n                return {\n                    'requested_formats': formats_info,\n                    'format': '%s+%s' % (formats_info[0].get('format'),\n                                         formats_info[1].get('format')),\n                    'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                            formats_info[1].get('format_id')),\n                    'width': formats_info[0].get('width'),\n                    'height': formats_info[0].get('height'),\n                    'resolution': formats_info[0].get('resolution'),\n                    'fps': formats_info[0].get('fps'),\n                    'vcodec': formats_info[0].get('vcodec'),\n                    'vbr': formats_info[0].get('vbr'),\n                    'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                    'acodec': formats_info[1].get('acodec'),\n                    'abr': formats_info[1].get('abr'),\n                    'ext': output_ext,\n                }\n            video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n            def selector_function(formats):\n                formats = list(formats)\n                for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                    yield _merge(pair)\n\n        filters = [self._build_format_filter(f) for f in selector.filters]\n\n        def final_selector(formats):\n            for _filter in filters:\n                formats = list(filter(_filter, formats))\n            return selector_function(formats)\n        return final_selector\n\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    class TokenIterator(object):\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)",
                "def _calc_headers(self, info_dict):\n    res = std_headers.copy()\n\n    add_headers = info_dict.get('http_headers')\n    if add_headers:\n        res.update(add_headers)\n\n    cookies = self._calc_cookies(info_dict)\n    if cookies:\n        res['Cookie'] = cookies\n\n    return res",
                "def _calc_cookies(self, info_dict):\n    pr = compat_urllib_request.Request(info_dict['url'])\n    self.cookiejar.add_cookie_header(pr)\n    return pr.get_header('Cookie')",
                "def process_video_result(self, info_dict, download=True):\n    assert info_dict.get('_type', 'video') == 'video'\n\n    if 'id' not in info_dict:\n        raise ExtractorError('Missing \"id\" field in extractor result')\n    if 'title' not in info_dict:\n        raise ExtractorError('Missing \"title\" field in extractor result')\n\n    if 'playlist' not in info_dict:\n        # It isn't part of a playlist\n        info_dict['playlist'] = None\n        info_dict['playlist_index'] = None\n\n    thumbnails = info_dict.get('thumbnails')\n    if thumbnails is None:\n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n    if thumbnails:\n        thumbnails.sort(key=lambda t: (\n            t.get('preference'), t.get('width'), t.get('height'),\n            t.get('id'), t.get('url')))\n        for i, t in enumerate(thumbnails):\n            if 'width' in t and 'height' in t:\n                t['resolution'] = '%dx%d' % (t['width'], t['height'])\n            if t.get('id') is None:\n                t['id'] = '%d' % i\n\n    if thumbnails and 'thumbnail' not in info_dict:\n        info_dict['thumbnail'] = thumbnails[-1]['url']\n\n    if 'display_id' not in info_dict and 'id' in info_dict:\n        info_dict['display_id'] = info_dict['id']\n\n    if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n        # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n        # see http://bugs.python.org/issue1646728)\n        try:\n            upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n            info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n        except (ValueError, OverflowError, OSError):\n            pass\n\n    if self.params.get('listsubtitles', False):\n        if 'automatic_captions' in info_dict:\n            self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n        self.list_subtitles(info_dict['id'], info_dict.get('subtitles'), 'subtitles')\n        return\n    info_dict['requested_subtitles'] = self.process_subtitles(\n        info_dict['id'], info_dict.get('subtitles'),\n        info_dict.get('automatic_captions'))\n\n    # We now pick which formats have to be downloaded\n    if info_dict.get('formats') is None:\n        # There's only one format available\n        formats = [info_dict]\n    else:\n        formats = info_dict['formats']\n\n    if not formats:\n        raise ExtractorError('No video formats found!')\n\n    formats_dict = {}\n\n    # We check that all the formats have the format and format_id fields\n    for i, format in enumerate(formats):\n        if 'url' not in format:\n            raise ExtractorError('Missing \"url\" key in result (index %d)' % i)\n\n        if format.get('format_id') is None:\n            format['format_id'] = compat_str(i)\n        format_id = format['format_id']\n        if format_id not in formats_dict:\n            formats_dict[format_id] = []\n        formats_dict[format_id].append(format)\n\n    # Make sure all formats have unique format_id\n    for format_id, ambiguous_formats in formats_dict.items():\n        if len(ambiguous_formats) > 1:\n            for i, format in enumerate(ambiguous_formats):\n                format['format_id'] = '%s-%d' % (format_id, i)\n\n    for i, format in enumerate(formats):\n        if format.get('format') is None:\n            format['format'] = '{id} - {res}{note}'.format(\n                id=format['format_id'],\n                res=self.format_resolution(format),\n                note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n            )\n        # Automatically determine file extension if missing\n        if 'ext' not in format:\n            format['ext'] = determine_ext(format['url']).lower()\n        # Add HTTP headers, so that external programs can use them from the\n        # json output\n        full_format_info = info_dict.copy()\n        full_format_info.update(format)\n        format['http_headers'] = self._calc_headers(full_format_info)\n\n    # TODO Central sorting goes here\n\n    if formats[0] is not info_dict:\n        # only set the 'formats' fields if the original info_dict list them\n        # otherwise we end up with a circular reference, the first (and unique)\n        # element in the 'formats' field in info_dict is info_dict itself,\n        # wich can't be exported to json\n        info_dict['formats'] = formats\n    if self.params.get('listformats'):\n        self.list_formats(info_dict)\n        return\n    if self.params.get('list_thumbnails'):\n        self.list_thumbnails(info_dict)\n        return\n\n    req_format = self.params.get('format')\n    if req_format is None:\n        req_format_list = []\n        if (self.params.get('outtmpl', DEFAULT_OUTTMPL) != '-' and\n                info_dict['extractor'] in ['youtube', 'ted']):\n            merger = FFmpegMergerPP(self)\n            if merger.available and merger.can_merge():\n                req_format_list.append('bestvideo+bestaudio')\n        req_format_list.append('best')\n        req_format = '/'.join(req_format_list)\n    format_selector = self.build_format_selector(req_format)\n    formats_to_download = list(format_selector(formats))\n    if not formats_to_download:\n        raise ExtractorError('requested format not available',\n                             expected=True)\n\n    if download:\n        if len(formats_to_download) > 1:\n            self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n        for format in formats_to_download:\n            new_info = dict(info_dict)\n            new_info.update(format)\n            self.process_info(new_info)\n    # We update the info dict with the best quality format (backwards compatibility)\n    info_dict.update(formats_to_download[-1])\n    return info_dict",
                "def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n    \"\"\"Select the requested subtitles and their format\"\"\"\n    available_subs = {}\n    if normal_subtitles and self.params.get('writesubtitles'):\n        available_subs.update(normal_subtitles)\n    if automatic_captions and self.params.get('writeautomaticsub'):\n        for lang, cap_info in automatic_captions.items():\n            if lang not in available_subs:\n                available_subs[lang] = cap_info\n\n    if (not self.params.get('writesubtitles') and not\n            self.params.get('writeautomaticsub') or not\n            available_subs):\n        return None\n\n    if self.params.get('allsubtitles', False):\n        requested_langs = available_subs.keys()\n    else:\n        if self.params.get('subtitleslangs', False):\n            requested_langs = self.params.get('subtitleslangs')\n        elif 'en' in available_subs:\n            requested_langs = ['en']\n        else:\n            requested_langs = [list(available_subs.keys())[0]]\n\n    formats_query = self.params.get('subtitlesformat', 'best')\n    formats_preference = formats_query.split('/') if formats_query else []\n    subs = {}\n    for lang in requested_langs:\n        formats = available_subs.get(lang)\n        if formats is None:\n            self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n            continue\n        for ext in formats_preference:\n            if ext == 'best':\n                f = formats[-1]\n                break\n            matches = list(filter(lambda f: f['ext'] == ext, formats))\n            if matches:\n                f = matches[-1]\n                break\n        else:\n            f = formats[-1]\n            self.report_warning(\n                'No subtitle format found matching \"%s\" for language %s, '\n                'using %s' % (formats_query, lang, f['ext']))\n        subs[lang] = f\n    return subs",
                "def process_info(self, info_dict):\n    \"\"\"Process a single resolved IE result.\"\"\"\n\n    assert info_dict.get('_type', 'video') == 'video'\n\n    max_downloads = self.params.get('max_downloads')\n    if max_downloads is not None:\n        if self._num_downloads >= int(max_downloads):\n            raise MaxDownloadsReached()\n\n    info_dict['fulltitle'] = info_dict['title']\n    if len(info_dict['title']) > 200:\n        info_dict['title'] = info_dict['title'][:197] + '...'\n\n    if 'format' not in info_dict:\n        info_dict['format'] = info_dict['ext']\n\n    reason = self._match_entry(info_dict, incomplete=False)\n    if reason is not None:\n        self.to_screen('[download] ' + reason)\n        return\n\n    self._num_downloads += 1\n\n    info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n\n    # Forced printings\n    if self.params.get('forcetitle', False):\n        self.to_stdout(info_dict['fulltitle'])\n    if self.params.get('forceid', False):\n        self.to_stdout(info_dict['id'])\n    if self.params.get('forceurl', False):\n        if info_dict.get('requested_formats') is not None:\n            for f in info_dict['requested_formats']:\n                self.to_stdout(f['url'] + f.get('play_path', ''))\n        else:\n            # For RTMP URLs, also include the playpath\n            self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n    if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n        self.to_stdout(info_dict['thumbnail'])\n    if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n        self.to_stdout(info_dict['description'])\n    if self.params.get('forcefilename', False) and filename is not None:\n        self.to_stdout(filename)\n    if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n        self.to_stdout(formatSeconds(info_dict['duration']))\n    if self.params.get('forceformat', False):\n        self.to_stdout(info_dict['format'])\n    if self.params.get('forcejson', False):\n        self.to_stdout(json.dumps(info_dict))\n\n    # Do nothing else if in simulate mode\n    if self.params.get('simulate', False):\n        return\n\n    if filename is None:\n        return\n\n    try:\n        dn = os.path.dirname(sanitize_path(encodeFilename(filename)))\n        if dn and not os.path.exists(dn):\n            os.makedirs(dn)\n    except (OSError, IOError) as err:\n        self.report_error('unable to create directory ' + compat_str(err))\n        return\n\n    if self.params.get('writedescription', False):\n        descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n            self.to_screen('[info] Video description is already present')\n        elif info_dict.get('description') is None:\n            self.report_warning('There\\'s no description to write.')\n        else:\n            try:\n                self.to_screen('[info] Writing video description to: ' + descfn)\n                with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                    descfile.write(info_dict['description'])\n            except (OSError, IOError):\n                self.report_error('Cannot write description file ' + descfn)\n                return\n\n    if self.params.get('writeannotations', False):\n        annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n            self.to_screen('[info] Video annotations are already present')\n        else:\n            try:\n                self.to_screen('[info] Writing video annotations to: ' + annofn)\n                with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                    annofile.write(info_dict['annotations'])\n            except (KeyError, TypeError):\n                self.report_warning('There are no annotations to write.')\n            except (OSError, IOError):\n                self.report_error('Cannot write annotations file: ' + annofn)\n                return\n\n    subtitles_are_requested = any([self.params.get('writesubtitles', False),\n                                   self.params.get('writeautomaticsub')])\n\n    if subtitles_are_requested and info_dict.get('requested_subtitles'):\n        # subtitles download errors are already managed as troubles in relevant IE\n        # that way it will silently go on when used with unsupporting IE\n        subtitles = info_dict['requested_subtitles']\n        ie = self.get_info_extractor(info_dict['extractor_key'])\n        for sub_lang, sub_info in subtitles.items():\n            sub_format = sub_info['ext']\n            if sub_info.get('data') is not None:\n                sub_data = sub_info['data']\n            else:\n                try:\n                    sub_data = ie._download_webpage(\n                        sub_info['url'], info_dict['id'], note=False)\n                except ExtractorError as err:\n                    self.report_warning('Unable to download subtitle for \"%s\": %s' %\n                                        (sub_lang, compat_str(err.cause)))\n                    continue\n            try:\n                sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n                if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                    self.to_screen('[info] Video subtitle %s.%s is already_present' % (sub_lang, sub_format))\n                else:\n                    self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                    with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8') as subfile:\n                        subfile.write(sub_data)\n            except (OSError, IOError):\n                self.report_error('Cannot write subtitles file ' + sub_filename)\n                return\n\n    if self.params.get('writeinfojson', False):\n        infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n            self.to_screen('[info] Video description metadata is already present')\n        else:\n            self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n            try:\n                write_json_file(self.filter_requested_info(info_dict), infofn)\n            except (OSError, IOError):\n                self.report_error('Cannot write metadata to JSON file ' + infofn)\n                return\n\n    self._write_thumbnails(info_dict, filename)\n\n    if not self.params.get('skip_download', False):\n        try:\n            def dl(name, info):\n                fd = get_suitable_downloader(info, self.params)(self, self.params)\n                for ph in self._progress_hooks:\n                    fd.add_progress_hook(ph)\n                if self.params.get('verbose'):\n                    self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                return fd.download(name, info)\n\n            if info_dict.get('requested_formats') is not None:\n                downloaded = []\n                success = True\n                merger = FFmpegMergerPP(self)\n                if not merger.available:\n                    postprocessors = []\n                    self.report_warning('You have requested multiple '\n                                        'formats but ffmpeg or avconv are not installed.'\n                                        ' The formats won\\'t be merged.')\n                else:\n                    postprocessors = [merger]\n\n                def compatible_formats(formats):\n                    video, audio = formats\n                    # Check extension\n                    video_ext, audio_ext = audio.get('ext'), video.get('ext')\n                    if video_ext and audio_ext:\n                        COMPATIBLE_EXTS = (\n                            ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v'),\n                            ('webm')\n                        )\n                        for exts in COMPATIBLE_EXTS:\n                            if video_ext in exts and audio_ext in exts:\n                                return True\n                    # TODO: Check acodec/vcodec\n                    return False\n\n                filename_real_ext = os.path.splitext(filename)[1][1:]\n                filename_wo_ext = (\n                    os.path.splitext(filename)[0]\n                    if filename_real_ext == info_dict['ext']\n                    else filename)\n                requested_formats = info_dict['requested_formats']\n                if self.params.get('merge_output_format') is None and not compatible_formats(requested_formats):\n                    info_dict['ext'] = 'mkv'\n                    self.report_warning(\n                        'Requested formats are incompatible for merge and will be merged into mkv.')\n                # Ensure filename always has a correct extension for successful merge\n                filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                if os.path.exists(encodeFilename(filename)):\n                    self.to_screen(\n                        '[download] %s has already been downloaded and '\n                        'merged' % filename)\n                else:\n                    for f in requested_formats:\n                        new_info = dict(info_dict)\n                        new_info.update(f)\n                        fname = self.prepare_filename(new_info)\n                        fname = prepend_extension(fname, 'f%s' % f['format_id'], new_info['ext'])\n                        downloaded.append(fname)\n                        partial_success = dl(fname, new_info)\n                        success = success and partial_success\n                    info_dict['__postprocessors'] = postprocessors\n                    info_dict['__files_to_merge'] = downloaded\n            else:\n                # Just a single file\n                success = dl(filename, info_dict)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            self.report_error('unable to download video data: %s' % str(err))\n            return\n        except (OSError, IOError) as err:\n            raise UnavailableVideoError(err)\n        except (ContentTooShortError, ) as err:\n            self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n            return\n\n        if success:\n            # Fixup content\n            fixup_policy = self.params.get('fixup')\n            if fixup_policy is None:\n                fixup_policy = 'detect_or_warn'\n\n            stretched_ratio = info_dict.get('stretched_ratio')\n            if stretched_ratio is not None and stretched_ratio != 1:\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: Non-uniform pixel ratio (%s)' % (\n                        info_dict['id'], stretched_ratio))\n                elif fixup_policy == 'detect_or_warn':\n                    stretched_pp = FFmpegFixupStretchedPP(self)\n                    if stretched_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(stretched_pp)\n                    else:\n                        self.report_warning(\n                            '%s: Non-uniform pixel ratio (%s). Install ffmpeg or avconv to fix this automatically.' % (\n                                info_dict['id'], stretched_ratio))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n\n            if info_dict.get('requested_formats') is None and info_dict.get('container') == 'm4a_dash':\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: writing DASH m4a. Only some players support this container.' % (\n                        info_dict['id']))\n                elif fixup_policy == 'detect_or_warn':\n                    fixup_pp = FFmpegFixupM4aPP(self)\n                    if fixup_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(fixup_pp)\n                    else:\n                        self.report_warning(\n                            '%s: writing DASH m4a. Only some players support this container. Install ffmpeg or avconv to fix this automatically.' % (\n                                info_dict['id']))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n\n            try:\n                self.post_process(filename, info_dict)\n            except (PostProcessingError) as err:\n                self.report_error('postprocessing: %s' % str(err))\n                return\n            self.record_download_archive(info_dict)",
                "def download(self, url_list):\n    \"\"\"Download a given list of URLs.\"\"\"\n    outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n    if (len(url_list) > 1 and\n            '%' not in outtmpl and\n            self.params.get('max_downloads') != 1):\n        raise SameFileError(outtmpl)\n\n    for url in url_list:\n        try:\n            # It also downloads the videos\n            res = self.extract_info(\n                url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n        except UnavailableVideoError:\n            self.report_error('unable to download video')\n        except MaxDownloadsReached:\n            self.to_screen('[info] Maximum number of downloaded files reached.')\n            raise\n        else:\n            if self.params.get('dump_single_json', False):\n                self.to_stdout(json.dumps(res))\n\n    return self._download_retcode",
                "def download_with_info_file(self, info_filename):\n    with contextlib.closing(fileinput.FileInput(\n            [info_filename], mode='r',\n            openhook=fileinput.hook_encoded('utf-8'))) as f:\n        # FileInput doesn't have a read method, we can't call json.load\n        info = self.filter_requested_info(json.loads('\\n'.join(f)))\n    try:\n        self.process_ie_result(info, download=True)\n    except DownloadError:\n        webpage_url = info.get('webpage_url')\n        if webpage_url is not None:\n            self.report_warning('The info failed to download, trying with \"%s\"' % webpage_url)\n            return self.download([webpage_url])\n        else:\n            raise\n    return self._download_retcode",
                "@staticmethod\ndef filter_requested_info(info_dict):\n    return dict(\n        (k, v) for k, v in info_dict.items()\n        if k not in ['requested_formats', 'requested_subtitles'])",
                "def post_process(self, filename, ie_info):\n    \"\"\"Run all the postprocessors on the given file.\"\"\"\n    info = dict(ie_info)\n    info['filepath'] = filename\n    pps_chain = []\n    if ie_info.get('__postprocessors') is not None:\n        pps_chain.extend(ie_info['__postprocessors'])\n    pps_chain.extend(self._pps)\n    for pp in pps_chain:\n        files_to_delete = []\n        try:\n            files_to_delete, info = pp.run(info)\n        except PostProcessingError as e:\n            self.report_error(e.msg)\n        if files_to_delete and not self.params.get('keepvideo', False):\n            for old_filename in files_to_delete:\n                self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                try:\n                    os.remove(encodeFilename(old_filename))\n                except (IOError, OSError):\n                    self.report_warning('Unable to remove downloaded original file')",
                "def _make_archive_id(self, info_dict):\n    # Future-proof against any change in case\n    # and backwards compatibility with prior versions\n    extractor = info_dict.get('extractor_key')\n    if extractor is None:\n        if 'id' in info_dict:\n            extractor = info_dict.get('ie_key')  # key in a playlist\n    if extractor is None:\n        return None  # Incomplete video information\n    return extractor.lower() + ' ' + info_dict['id']",
                "def in_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return False\n\n    vid_id = self._make_archive_id(info_dict)\n    if vid_id is None:\n        return False  # Incomplete video information\n\n    try:\n        with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n            for line in archive_file:\n                if line.strip() == vid_id:\n                    return True\n    except IOError as ioe:\n        if ioe.errno != errno.ENOENT:\n            raise\n    return False",
                "def record_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return\n    vid_id = self._make_archive_id(info_dict)\n    assert vid_id\n    with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n        archive_file.write(vid_id + '\\n')",
                "@staticmethod\ndef format_resolution(format, default='unknown'):\n    if format.get('vcodec') == 'none':\n        return 'audio only'\n    if format.get('resolution') is not None:\n        return format['resolution']\n    if format.get('height') is not None:\n        if format.get('width') is not None:\n            res = '%sx%s' % (format['width'], format['height'])\n        else:\n            res = '%sp' % format['height']\n    elif format.get('width') is not None:\n        res = '?x%d' % format['width']\n    else:\n        res = default\n    return res",
                "def _format_note(self, fdict):\n    res = ''\n    if fdict.get('ext') in ['f4f', 'f4m']:\n        res += '(unsupported) '\n    if fdict.get('format_note') is not None:\n        res += fdict['format_note'] + ' '\n    if fdict.get('tbr') is not None:\n        res += '%4dk ' % fdict['tbr']\n    if fdict.get('container') is not None:\n        if res:\n            res += ', '\n        res += '%s container' % fdict['container']\n    if (fdict.get('vcodec') is not None and\n            fdict.get('vcodec') != 'none'):\n        if res:\n            res += ', '\n        res += fdict['vcodec']\n        if fdict.get('vbr') is not None:\n            res += '@'\n    elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n        res += 'video@'\n    if fdict.get('vbr') is not None:\n        res += '%4dk' % fdict['vbr']\n    if fdict.get('fps') is not None:\n        res += ', %sfps' % fdict['fps']\n    if fdict.get('acodec') is not None:\n        if res:\n            res += ', '\n        if fdict['acodec'] == 'none':\n            res += 'video only'\n        else:\n            res += '%-5s' % fdict['acodec']\n    elif fdict.get('abr') is not None:\n        if res:\n            res += ', '\n        res += 'audio'\n    if fdict.get('abr') is not None:\n        res += '@%3dk' % fdict['abr']\n    if fdict.get('asr') is not None:\n        res += ' (%5dHz)' % fdict['asr']\n    if fdict.get('filesize') is not None:\n        if res:\n            res += ', '\n        res += format_bytes(fdict['filesize'])\n    elif fdict.get('filesize_approx') is not None:\n        if res:\n            res += ', '\n        res += '~' + format_bytes(fdict['filesize_approx'])\n    return res",
                "def list_formats(self, info_dict):\n    formats = info_dict.get('formats', [info_dict])\n    table = [\n        [f['format_id'], f['ext'], self.format_resolution(f), self._format_note(f)]\n        for f in formats\n        if f.get('preference') is None or f['preference'] >= -1000]\n    if len(formats) > 1:\n        table[-1][-1] += (' ' if table[-1][-1] else '') + '(best)'\n\n    header_line = ['format code', 'extension', 'resolution', 'note']\n    self.to_screen(\n        '[info] Available formats for %s:\\n%s' %\n        (info_dict['id'], render_table(header_line, table)))",
                "def list_thumbnails(self, info_dict):\n    thumbnails = info_dict.get('thumbnails')\n    if not thumbnails:\n        tn_url = info_dict.get('thumbnail')\n        if tn_url:\n            thumbnails = [{'id': '0', 'url': tn_url}]\n        else:\n            self.to_screen(\n                '[info] No thumbnails present for %s' % info_dict['id'])\n            return\n\n    self.to_screen(\n        '[info] Thumbnails for %s:' % info_dict['id'])\n    self.to_screen(render_table(\n        ['ID', 'width', 'height', 'URL'],\n        [[t['id'], t.get('width', 'unknown'), t.get('height', 'unknown'), t['url']] for t in thumbnails]))",
                "def list_subtitles(self, video_id, subtitles, name='subtitles'):\n    if not subtitles:\n        self.to_screen('%s has no %s' % (video_id, name))\n        return\n    self.to_screen(\n        'Available %s for %s:' % (name, video_id))\n    self.to_screen(render_table(\n        ['Language', 'formats'],\n        [[lang, ', '.join(f['ext'] for f in reversed(formats))]\n            for lang, formats in subtitles.items()]))",
                "def urlopen(self, req):\n    \"\"\" Start an HTTP download \"\"\"\n\n    # According to RFC 3986, URLs can not contain non-ASCII characters, however this is not\n    # always respected by websites, some tend to give out URLs with non percent-encoded\n    # non-ASCII characters (see telemb.py, ard.py [#3412])\n    # urllib chokes on URLs with non-ASCII characters (see http://bugs.python.org/issue3991)\n    # To work around aforementioned issue we will replace request's original URL with\n    # percent-encoded one\n    req_is_string = isinstance(req, compat_basestring)\n    url = req if req_is_string else req.get_full_url()\n    url_escaped = escape_url(url)\n\n    # Substitute URL if any change after escaping\n    if url != url_escaped:\n        if req_is_string:\n            req = url_escaped\n        else:\n            req_type = HEADRequest if req.get_method() == 'HEAD' else compat_urllib_request.Request\n            req = req_type(\n                url_escaped, data=req.data, headers=req.headers,\n                origin_req_host=req.origin_req_host, unverifiable=req.unverifiable)\n\n    return self._opener.open(req, timeout=self._socket_timeout)",
                "def print_debug_header(self):\n    if not self.params.get('verbose'):\n        return\n\n    if type('') is not compat_str:\n        # Python 2.6 on SLES11 SP1 (https://github.com/rg3/youtube-dl/issues/3326)\n        self.report_warning(\n            'Your Python is broken! Update to a newer and supported version')\n\n    stdout_encoding = getattr(\n        sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n    encoding_str = (\n        '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (\n            locale.getpreferredencoding(),\n            sys.getfilesystemencoding(),\n            stdout_encoding,\n            self.get_encoding()))\n    write_string(encoding_str, encoding=None)\n\n    self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n    try:\n        sp = subprocess.Popen(\n            ['git', 'rev-parse', '--short', 'HEAD'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            cwd=os.path.dirname(os.path.abspath(__file__)))\n        out, err = sp.communicate()\n        out = out.decode().strip()\n        if re.match('[0-9a-f]+', out):\n            self._write_string('[debug] Git HEAD: ' + out + '\\n')\n    except Exception:\n        try:\n            sys.exc_clear()\n        except Exception:\n            pass\n    self._write_string('[debug] Python version %s - %s\\n' % (\n        platform.python_version(), platform_name()))\n\n    exe_versions = FFmpegPostProcessor.get_versions(self)\n    exe_versions['rtmpdump'] = rtmpdump_version()\n    exe_str = ', '.join(\n        '%s %s' % (exe, v)\n        for exe, v in sorted(exe_versions.items())\n        if v\n    )\n    if not exe_str:\n        exe_str = 'none'\n    self._write_string('[debug] exe versions: %s\\n' % exe_str)\n\n    proxy_map = {}\n    for handler in self._opener.handlers:\n        if hasattr(handler, 'proxies'):\n            proxy_map.update(handler.proxies)\n    self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n\n    if self.params.get('call_home', False):\n        ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n        self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n        latest_version = self.urlopen(\n            'https://yt-dl.org/latest/version').read().decode('utf-8')\n        if version_tuple(latest_version) > version_tuple(__version__):\n            self.report_warning(\n                'You are using an outdated version (newest version: %s)! '\n                'See https://yt-dl.org/update if you need help updating.' %\n                latest_version)",
                "def _setup_opener(self):\n    timeout_val = self.params.get('socket_timeout')\n    self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n\n    opts_cookiefile = self.params.get('cookiefile')\n    opts_proxy = self.params.get('proxy')\n\n    if opts_cookiefile is None:\n        self.cookiejar = compat_cookiejar.CookieJar()\n    else:\n        self.cookiejar = compat_cookiejar.MozillaCookieJar(\n            opts_cookiefile)\n        if os.access(opts_cookiefile, os.R_OK):\n            self.cookiejar.load()\n\n    cookie_processor = compat_urllib_request.HTTPCookieProcessor(\n        self.cookiejar)\n    if opts_proxy is not None:\n        if opts_proxy == '':\n            proxies = {}\n        else:\n            proxies = {'http': opts_proxy, 'https': opts_proxy}\n    else:\n        proxies = compat_urllib_request.getproxies()\n        # Set HTTPS proxy to HTTP one if given (https://github.com/rg3/youtube-dl/issues/805)\n        if 'http' in proxies and 'https' not in proxies:\n            proxies['https'] = proxies['http']\n    proxy_handler = PerRequestProxyHandler(proxies)\n\n    debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n    https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n    ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n    opener = compat_urllib_request.build_opener(\n        proxy_handler, https_handler, cookie_processor, ydlh)\n\n    # Delete the default user-agent header, which would otherwise apply in\n    # cases where our custom HTTP handler doesn't come into play\n    # (See https://github.com/rg3/youtube-dl/issues/1309 for details)\n    opener.addheaders = []\n    self._opener = opener",
                "def encode(self, s):\n    if isinstance(s, bytes):\n        return s  # Already encoded\n\n    try:\n        return s.encode(self.get_encoding())\n    except UnicodeEncodeError as err:\n        err.reason = err.reason + '. Check your system encoding configuration or use the --encoding option.'\n        raise",
                "def get_encoding(self):\n    encoding = self.params.get('encoding')\n    if encoding is None:\n        encoding = preferredencoding()\n    return encoding",
                "def _write_thumbnails(self, info_dict, filename):\n    if self.params.get('writethumbnail', False):\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails:\n            thumbnails = [thumbnails[-1]]\n    elif self.params.get('write_all_thumbnails', False):\n        thumbnails = info_dict.get('thumbnails')\n    else:\n        return\n\n    if not thumbnails:\n        # No thumbnails present, so return immediately\n        return\n\n    for t in thumbnails:\n        thumb_ext = determine_ext(t['url'], 'jpg')\n        suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n        thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n        t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n            self.to_screen('[%s] %s: Thumbnail %sis already present' %\n                           (info_dict['extractor'], info_dict['id'], thumb_display_id))\n        else:\n            self.to_screen('[%s] %s: Downloading thumbnail %s...' %\n                           (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            try:\n                uf = self.urlopen(t['url'])\n                with open(thumb_filename, 'wb') as thumbf:\n                    shutil.copyfileobj(uf, thumbf)\n                self.to_screen('[%s] %s: Writing thumbnail %sto: %s' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_warning('Unable to download thumbnail \"%s\": %s' %\n                                    (t['url'], compat_str(err)))",
                "def _filter(f):\n    actual_value = f.get(m.group('key'))\n    if actual_value is None:\n        return m.group('none_inclusive')\n    return op(actual_value, comparison_value)",
                "def syntax_error(note, start):\n    message = (\n        'Invalid format specification: '\n        '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n    return SyntaxError(message)",
                "def _parse_filter(tokens):\n    filter_parts = []\n    for type, string, start, _, _ in tokens:\n        if type == tokenize.OP and string == ']':\n            return ''.join(filter_parts)\n        else:\n            filter_parts.append(string)",
                "def _parse_format_selection(tokens, endwith=[]):\n    selectors = []\n    current_selector = None\n    for type, string, start, _, _ in tokens:\n        # ENCODING is only defined in python 3.x\n        if type == getattr(tokenize, 'ENCODING', None):\n            continue\n        elif type in [tokenize.NAME, tokenize.NUMBER]:\n            current_selector = FormatSelector(SINGLE, string, [])\n        elif type == tokenize.OP:\n            if string in endwith:\n                break\n            elif string == ')':\n                # ')' will be handled by the parentheses group\n                tokens.restore_last_token()\n                break\n            if string == ',':\n                selectors.append(current_selector)\n                current_selector = None\n            elif string == '/':\n                first_choice = current_selector\n                second_choice = _parse_format_selection(tokens, [','])\n                current_selector = None\n                selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n            elif string == '[':\n                if not current_selector:\n                    current_selector = FormatSelector(SINGLE, 'best', [])\n                format_filter = _parse_filter(tokens)\n                current_selector.filters.append(format_filter)\n            elif string == '(':\n                if current_selector:\n                    raise syntax_error('Unexpected \"(\"', start)\n                current_selector = FormatSelector(GROUP, _parse_format_selection(tokens, [')']), [])\n            elif string == '+':\n                video_selector = current_selector\n                audio_selector = _parse_format_selection(tokens, [','])\n                current_selector = None\n                selectors.append(FormatSelector(MERGE, (video_selector, audio_selector), []))\n            else:\n                raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n        elif type == tokenize.ENDMARKER:\n            break\n    if current_selector:\n        selectors.append(current_selector)\n    return selectors",
                "def _build_selector_function(selector):\n    if isinstance(selector, list):\n        fs = [_build_selector_function(s) for s in selector]\n\n        def selector_function(formats):\n            for f in fs:\n                for format in f(formats):\n                    yield format\n        return selector_function\n    elif selector.type == GROUP:\n        selector_function = _build_selector_function(selector.selector)\n    elif selector.type == PICKFIRST:\n        fs = [_build_selector_function(s) for s in selector.selector]\n\n        def selector_function(formats):\n            for f in fs:\n                picked_formats = list(f(formats))\n                if picked_formats:\n                    return picked_formats\n            return []\n    elif selector.type == SINGLE:\n        format_spec = selector.selector\n\n        def selector_function(formats):\n            if format_spec == 'all':\n                for f in formats:\n                    yield f\n            elif format_spec in ['best', 'worst', None]:\n                format_idx = 0 if format_spec == 'worst' else -1\n                audiovideo_formats = [\n                    f for f in formats\n                    if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                if audiovideo_formats:\n                    yield audiovideo_formats[format_idx]\n                # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                elif (all(f.get('acodec') != 'none' for f in formats) or\n                      all(f.get('vcodec') != 'none' for f in formats)):\n                    yield formats[format_idx]\n            elif format_spec == 'bestaudio':\n                audio_formats = [\n                    f for f in formats\n                    if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[-1]\n            elif format_spec == 'worstaudio':\n                audio_formats = [\n                    f for f in formats\n                    if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[0]\n            elif format_spec == 'bestvideo':\n                video_formats = [\n                    f for f in formats\n                    if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[-1]\n            elif format_spec == 'worstvideo':\n                video_formats = [\n                    f for f in formats\n                    if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[0]\n            else:\n                extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                if format_spec in extensions:\n                    filter_f = lambda f: f['ext'] == format_spec\n                else:\n                    filter_f = lambda f: f['format_id'] == format_spec\n                matches = list(filter(filter_f, formats))\n                if matches:\n                    yield matches[-1]\n    elif selector.type == MERGE:\n        def _merge(formats_info):\n            format_1, format_2 = [f['format_id'] for f in formats_info]\n            # The first format must contain the video and the\n            # second the audio\n            if formats_info[0].get('vcodec') == 'none':\n                self.report_error('The first format must '\n                                  'contain the video, try using '\n                                  '\"-f %s+%s\"' % (format_2, format_1))\n                return\n            output_ext = (\n                formats_info[0]['ext']\n                if self.params.get('merge_output_format') is None\n                else self.params['merge_output_format'])\n            return {\n                'requested_formats': formats_info,\n                'format': '%s+%s' % (formats_info[0].get('format'),\n                                     formats_info[1].get('format')),\n                'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                        formats_info[1].get('format_id')),\n                'width': formats_info[0].get('width'),\n                'height': formats_info[0].get('height'),\n                'resolution': formats_info[0].get('resolution'),\n                'fps': formats_info[0].get('fps'),\n                'vcodec': formats_info[0].get('vcodec'),\n                'vbr': formats_info[0].get('vbr'),\n                'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                'acodec': formats_info[1].get('acodec'),\n                'abr': formats_info[1].get('abr'),\n                'ext': output_ext,\n            }\n        video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n        def selector_function(formats):\n            formats = list(formats)\n            for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                yield _merge(pair)\n\n    filters = [self._build_format_filter(f) for f in selector.filters]\n\n    def final_selector(formats):\n        for _filter in filters:\n            formats = list(filter(_filter, formats))\n        return selector_function(formats)\n    return final_selector",
                "def final_selector(formats):\n    for _filter in filters:\n        formats = list(filter(_filter, formats))\n    return selector_function(formats)",
                "def __init__(self, tokens):\n    self.tokens = tokens\n    self.counter = 0",
                "def __iter__(self):\n    return self",
                "def __next__(self):\n    if self.counter >= len(self.tokens):\n        raise StopIteration()\n    value = self.tokens[self.counter]\n    self.counter += 1\n    return value",
                "def restore_last_token(self):\n    self.counter -= 1",
                "def selector_function(formats):\n    for f in fs:\n        for format in f(formats):\n            yield format",
                "def dl(name, info):\n    fd = get_suitable_downloader(info, self.params)(self, self.params)\n    for ph in self._progress_hooks:\n        fd.add_progress_hook(ph)\n    if self.params.get('verbose'):\n        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n    return fd.download(name, info)",
                "def compatible_formats(formats):\n    video, audio = formats\n    # Check extension\n    video_ext, audio_ext = audio.get('ext'), video.get('ext')\n    if video_ext and audio_ext:\n        COMPATIBLE_EXTS = (\n            ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v'),\n            ('webm')\n        )\n        for exts in COMPATIBLE_EXTS:\n            if video_ext in exts and audio_ext in exts:\n                return True\n    # TODO: Check acodec/vcodec\n    return False",
                "def selector_function(formats):\n    for f in fs:\n        picked_formats = list(f(formats))\n        if picked_formats:\n            return picked_formats\n    return []",
                "def iter_playlistitems(format):\n    for string_segment in format.split(','):\n        if '-' in string_segment:\n            start, end = string_segment.split('-')\n            for item in range(int(start), int(end) + 1):\n                yield int(item)\n        else:\n            yield int(string_segment)",
                "def _fixup(r):\n    self.add_extra_info(\n        r,\n        {\n            'extractor': ie_result['extractor'],\n            'webpage_url': ie_result['webpage_url'],\n            'webpage_url_basename': url_basename(ie_result['webpage_url']),\n            'extractor_key': ie_result['extractor_key'],\n        }\n    )\n    return r",
                "def selector_function(formats):\n    if format_spec == 'all':\n        for f in formats:\n            yield f\n    elif format_spec in ['best', 'worst', None]:\n        format_idx = 0 if format_spec == 'worst' else -1\n        audiovideo_formats = [\n            f for f in formats\n            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n        if audiovideo_formats:\n            yield audiovideo_formats[format_idx]\n        # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n        elif (all(f.get('acodec') != 'none' for f in formats) or\n              all(f.get('vcodec') != 'none' for f in formats)):\n            yield formats[format_idx]\n    elif format_spec == 'bestaudio':\n        audio_formats = [\n            f for f in formats\n            if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[-1]\n    elif format_spec == 'worstaudio':\n        audio_formats = [\n            f for f in formats\n            if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[0]\n    elif format_spec == 'bestvideo':\n        video_formats = [\n            f for f in formats\n            if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[-1]\n    elif format_spec == 'worstvideo':\n        video_formats = [\n            f for f in formats\n            if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[0]\n    else:\n        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n        if format_spec in extensions:\n            filter_f = lambda f: f['ext'] == format_spec\n        else:\n            filter_f = lambda f: f['format_id'] == format_spec\n        matches = list(filter(filter_f, formats))\n        if matches:\n            yield matches[-1]",
                "def _merge(formats_info):\n    format_1, format_2 = [f['format_id'] for f in formats_info]\n    # The first format must contain the video and the\n    # second the audio\n    if formats_info[0].get('vcodec') == 'none':\n        self.report_error('The first format must '\n                          'contain the video, try using '\n                          '\"-f %s+%s\"' % (format_2, format_1))\n        return\n    output_ext = (\n        formats_info[0]['ext']\n        if self.params.get('merge_output_format') is None\n        else self.params['merge_output_format'])\n    return {\n        'requested_formats': formats_info,\n        'format': '%s+%s' % (formats_info[0].get('format'),\n                             formats_info[1].get('format')),\n        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                formats_info[1].get('format_id')),\n        'width': formats_info[0].get('width'),\n        'height': formats_info[0].get('height'),\n        'resolution': formats_info[0].get('resolution'),\n        'fps': formats_info[0].get('fps'),\n        'vcodec': formats_info[0].get('vcodec'),\n        'vbr': formats_info[0].get('vbr'),\n        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n        'acodec': formats_info[1].get('acodec'),\n        'abr': formats_info[1].get('abr'),\n        'ext': output_ext,\n    }",
                "def selector_function(formats):\n    formats = list(formats)\n    for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n        yield _merge(pair)"
            ],
            "inscope_function_signatures": [
                "__init__(self, params=None, auto_init=True)",
                "warn_if_short_id(self, argv)",
                "add_info_extractor(self, ie)",
                "get_info_extractor(self, ie_key)",
                "add_default_info_extractors(self)",
                "add_post_processor(self, pp)",
                "add_progress_hook(self, ph)",
                "_bidi_workaround(self, message)",
                "to_screen(self, message, skip_eol=False)",
                "_write_string(self, s, out=None)",
                "to_stdout(self, message, skip_eol=False, check_quiet=False)",
                "to_stderr(self, message)",
                "to_console_title(self, message)",
                "save_console_title(self)",
                "restore_console_title(self)",
                "__enter__(self)",
                "__exit__(self, *args)",
                "trouble(self, message=None, tb=None)",
                "report_warning(self, message)",
                "report_error(self, message, tb=None)",
                "report_file_already_downloaded(self, file_name)",
                "prepare_filename(self, info_dict)",
                "_match_entry(self, info_dict, incomplete)",
                "add_extra_info(info_dict, extra_info)",
                "extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False)",
                "add_default_extra_info(self, ie_result, ie, url)",
                "process_ie_result(self, ie_result, download=True, extra_info={})",
                "_build_format_filter(self, filter_spec)",
                "build_format_selector(self, format_spec)",
                "_calc_headers(self, info_dict)",
                "_calc_cookies(self, info_dict)",
                "process_video_result(self, info_dict, download=True)",
                "process_subtitles(self, video_id, normal_subtitles, automatic_captions)",
                "process_info(self, info_dict)",
                "download(self, url_list)",
                "download_with_info_file(self, info_filename)",
                "filter_requested_info(info_dict)",
                "post_process(self, filename, ie_info)",
                "_make_archive_id(self, info_dict)",
                "in_download_archive(self, info_dict)",
                "record_download_archive(self, info_dict)",
                "format_resolution(format, default='unknown')",
                "_format_note(self, fdict)",
                "list_formats(self, info_dict)",
                "list_thumbnails(self, info_dict)",
                "list_subtitles(self, video_id, subtitles, name='subtitles')",
                "urlopen(self, req)",
                "print_debug_header(self)",
                "_setup_opener(self)",
                "encode(self, s)",
                "get_encoding(self)",
                "_write_thumbnails(self, info_dict, filename)",
                "_filter(f)",
                "syntax_error(note, start)",
                "_parse_filter(tokens)",
                "_parse_format_selection(tokens, endwith=[])",
                "_build_selector_function(selector)",
                "final_selector(formats)",
                "__init__(self, tokens)",
                "__iter__(self)",
                "__next__(self)",
                "restore_last_token(self)",
                "selector_function(formats)",
                "dl(name, info)",
                "compatible_formats(formats)",
                "selector_function(formats)",
                "iter_playlistitems(format)",
                "_fixup(r)",
                "selector_function(formats)",
                "_merge(formats_info)",
                "selector_function(formats)"
            ],
            "variables_in_file": {
                "os.name": [
                    514,
                    27,
                    443,
                    526
                ],
                "os": [
                    514,
                    1416,
                    526,
                    27,
                    1451,
                    1463,
                    311,
                    443,
                    1979,
                    1981,
                    447,
                    453,
                    1863,
                    460,
                    1512,
                    1514,
                    1392,
                    1393,
                    1394,
                    1524,
                    1401,
                    1916,
                    1662
                ],
                "object": [
                    1103,
                    95
                ],
                "params": [
                    288,
                    320,
                    291,
                    328,
                    269,
                    278,
                    279,
                    286
                ],
                "_ies": [
                    270
                ],
                "_pps": [
                    271
                ],
                "_download_retcode": [
                    272
                ],
                "_num_downloads": [
                    273
                ],
                "_screen_file": [
                    274
                ],
                "self._ies": [
                    280,
                    645,
                    367
                ],
                "self": [
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    303,
                    305,
                    309,
                    311,
                    314,
                    322,
                    326,
                    329,
                    333,
                    336,
                    337,
                    339,
                    343,
                    344,
                    346,
                    347,
                    360,
                    367,
                    368,
                    369,
                    377,
                    380,
                    388,
                    392,
                    393,
                    397,
                    400,
                    403,
                    406,
                    407,
                    408,
                    414,
                    417,
                    421,
                    422,
                    423,
                    424,
                    428,
                    433,
                    434,
                    436,
                    438,
                    441,
                    448,
                    451,
                    455,
                    458,
                    462,
                    465,
                    466,
                    469,
                    471,
                    472,
                    484,
                    485,
                    495,
                    496,
                    502,
                    509,
                    510,
                    512,
                    514,
                    519,
                    526,
                    531,
                    536,
                    538,
                    546,
                    550,
                    563,
                    570,
                    580,
                    590,
                    594,
                    600,
                    605,
                    608,
                    611,
                    613,
                    617,
                    643,
                    645,
                    652,
                    665,
                    667,
                    671,
                    676,
                    677,
                    682,
                    685,
                    704,
                    707,
                    708,
                    712,
                    713,
                    717,
                    723,
                    737,
                    742,
                    746,
                    747,
                    752,
                    775,
                    789,
                    800,
                    804,
                    808,
                    821,
                    823,
                    826,
                    833,
                    838,
                    849,
                    1057,
                    1063,
                    1064,
                    1089,
                    1105,
                    1106,
                    1109,
                    1112,
                    1114,
                    1115,
                    1121,
                    1133,
                    1141,
                    1187,
                    1189,
                    1190,
                    1192,
                    1230,
                    1240,
                    1250,
                    1251,
                    1253,
                    1254,
                    1257,
                    1260,
                    1262,
                    1267,
                    1275,
                    1279,
                    1287,
                    1289,
                    1294,
                    1295,
                    1299,
                    1302,
                    1303,
                    1309,
                    1315,
                    1327,
                    1338,
                    1340,
                    1350,
                    1352,
                    1355,
                    1357,
                    1360,
                    1361,
                    1362,
                    1363,
                    1364,
                    1367,
                    1370,
                    1371,
                    1372,
                    1373,
                    1374,
                    1375,
                    1376,
                    1377,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1385,
                    1396,
                    1399,
                    1401,
                    1402,
                    1404,
                    1407,
                    1411,
                    1414,
                    1416,
                    1417,
                    1420,
                    1424,
                    1426,
                    1429,
                    1430,
                    1436,
                    1446,
                    1451,
                    1452,
                    1454,
                    1458,
                    1461,
                    1463,
                    1464,
                    1466,
                    1468,
                    1470,
                    1473,
                    1475,
                    1478,
                    1479,
                    1481,
                    1482,
                    1488,
                    1491,
                    1518,
                    1520,
                    1525,
                    1532,
                    1543,
                    1548,
                    1553,
                    1560,
                    1563,
                    1568,
                    1576,
                    1579,
                    1584,
                    1591,
                    1593,
                    1595,
                    1599,
                    1602,
                    1608,
                    1609,
                    1611,
                    1613,
                    1616,
                    1617,
                    1619,
                    1626,
                    1628,
                    1632,
                    1633,
                    1636,
                    1651,
                    1657,
                    1658,
                    1660,
                    1664,
                    1678,
                    1682,
                    1697,
                    1700,
                    1775,
                    1782,
                    1793,
                    1797,
                    1799,
                    1805,
                    1807,
                    1809,
                    1837,
                    1840,
                    1845,
                    1855,
                    1858,
                    1867,
                    1873,
                    1876,
                    1885,
                    1888,
                    1891,
                    1893,
                    1894,
                    1895,
                    1896,
                    1899,
                    1905,
                    1906,
                    1908,
                    1909,
                    1912,
                    1914,
                    1917,
                    1920,
                    1933,
                    1934,
                    1935,
                    1943,
                    1950,
                    1956,
                    1962,
                    1966,
                    1981,
                    1982,
                    1985,
                    1988,
                    1991,
                    1994
                ],
                "self._ies_instances": [
                    368,
                    281,
                    377
                ],
                "self._pps": [
                    392,
                    282,
                    1651
                ],
                "self._progress_hooks": [
                    283,
                    397,
                    1479
                ],
                "self._download_retcode": [
                    1636,
                    1619,
                    284,
                    502
                ],
                "self._num_downloads": [
                    1355,
                    1340,
                    285,
                    550
                ],
                "self._screen_file": [
                    448,
                    455,
                    428,
                    462,
                    286
                ],
                "sys.stdout": [
                    1849,
                    286
                ],
                "sys": [
                    576,
                    287,
                    487,
                    489,
                    490,
                    1870,
                    497,
                    498,
                    500,
                    1849,
                    286,
                    1853,
                    318,
                    319
                ],
                "sys.stderr": [
                    286,
                    287
                ],
                "params.get": [
                    320,
                    328,
                    291,
                    286
                ],
                "self._err_file": [
                    514,
                    526,
                    303,
                    438,
                    287
                ],
                "self.params": [
                    512,
                    514,
                    526,
                    1553,
                    546,
                    1063,
                    1064,
                    563,
                    570,
                    1599,
                    1602,
                    1609,
                    590,
                    1616,
                    594,
                    600,
                    605,
                    608,
                    611,
                    617,
                    1658,
                    1678,
                    1697,
                    1187,
                    676,
                    704,
                    707,
                    1250,
                    1253,
                    1257,
                    746,
                    747,
                    1260,
                    752,
                    1287,
                    1289,
                    1294,
                    1295,
                    1299,
                    1302,
                    1303,
                    1309,
                    288,
                    804,
                    1840,
                    1338,
                    326,
                    1360,
                    1362,
                    339,
                    1364,
                    346,
                    1371,
                    1373,
                    1375,
                    1377,
                    1379,
                    1381,
                    1893,
                    1385,
                    1905,
                    1908,
                    1909,
                    1399,
                    1401,
                    1414,
                    1416,
                    1933,
                    1934,
                    1935,
                    1429,
                    1430,
                    417,
                    1956,
                    421,
                    422,
                    423,
                    1962,
                    1451,
                    1966,
                    433,
                    434,
                    1461,
                    1463,
                    441,
                    1981,
                    451,
                    1475,
                    1478,
                    1481,
                    458,
                    471,
                    485,
                    1518,
                    496,
                    509,
                    510
                ],
                "self.cache": [
                    289
                ],
                "Cache": [
                    289
                ],
                "master": [
                    294,
                    311
                ],
                "slave": [
                    302,
                    294
                ],
                "pty.openpty": [
                    294
                ],
                "pty": [
                    294
                ],
                "width": [
                    296,
                    299,
                    295
                ],
                "columns": [
                    295
                ],
                "compat_get_terminal_size": [
                    295
                ],
                "width_args": [
                    297,
                    306,
                    299,
                    310
                ],
                "str": [
                    580,
                    549,
                    1543,
                    552,
                    299,
                    1593
                ],
                "sp_kwargs": [
                    306,
                    300,
                    310
                ],
                "dict": [
                    1640,
                    300,
                    1646,
                    565,
                    341,
                    727,
                    1530,
                    1277,
                    543
                ],
                "subprocess.PIPE": [
                    301,
                    1862
                ],
                "subprocess": [
                    1860,
                    1862,
                    301,
                    305,
                    309
                ],
                "self._output_process": [
                    305,
                    309,
                    406,
                    407
                ],
                "subprocess.Popen": [
                    305,
                    1860,
                    309
                ],
                "OSError": [
                    1184,
                    1410,
                    1545,
                    1425,
                    1457,
                    1395,
                    308,
                    312,
                    1469,
                    1663
                ],
                "self._output_channel": [
                    408,
                    311
                ],
                "os.fdopen": [
                    311
                ],
                "ose.errno": [
                    313
                ],
                "ose": [
                    313
                ],
                "self.report_warning": [
                    1664,
                    652,
                    1424,
                    1560,
                    1568,
                    1315,
                    1446,
                    1576,
                    1327,
                    1584,
                    1845,
                    314,
                    833,
                    322,
                    329,
                    1994,
                    1491,
                    1632,
                    360,
                    1899,
                    1520,
                    1404
                ],
                "sys.version_info": [
                    576,
                    318
                ],
                "sys.platform": [
                    576,
                    318
                ],
                "sys.getfilesystemencoding": [
                    1853,
                    319
                ],
                "isinstance": [
                    328,
                    778,
                    432,
                    659,
                    404,
                    981,
                    1946,
                    766,
                    1823
                ],
                "bytes": [
                    328,
                    1946
                ],
                "self._setup_opener": [
                    333
                ],
                "auto_init": [
                    335
                ],
                "self.print_debug_header": [
                    336
                ],
                "self.add_default_info_extractors": [
                    337
                ],
                "pp_def_raw": [
                    339,
                    340,
                    341
                ],
                "self.params.get": [
                    512,
                    514,
                    526,
                    1553,
                    546,
                    1063,
                    563,
                    570,
                    1599,
                    1602,
                    1609,
                    590,
                    1616,
                    594,
                    600,
                    605,
                    608,
                    611,
                    617,
                    1658,
                    1678,
                    1697,
                    1187,
                    676,
                    704,
                    707,
                    1250,
                    1253,
                    1257,
                    746,
                    747,
                    1260,
                    752,
                    1287,
                    1289,
                    1294,
                    1295,
                    1299,
                    1302,
                    1303,
                    1309,
                    804,
                    1840,
                    1338,
                    1360,
                    1362,
                    339,
                    1364,
                    346,
                    1371,
                    1373,
                    1375,
                    1377,
                    1379,
                    1381,
                    1893,
                    1385,
                    1905,
                    1908,
                    1909,
                    1399,
                    1401,
                    1414,
                    1416,
                    1933,
                    1429,
                    1430,
                    417,
                    1956,
                    421,
                    423,
                    1962,
                    1451,
                    1966,
                    433,
                    1461,
                    1463,
                    441,
                    1981,
                    451,
                    1475,
                    1481,
                    458,
                    471,
                    485,
                    1518,
                    496,
                    509
                ],
                "pp_class": [
                    340,
                    343
                ],
                "get_postprocessor": [
                    340
                ],
                "pp_def": [
                    341,
                    342,
                    343
                ],
                "pp": [
                    1655,
                    392,
                    393,
                    1652,
                    343,
                    344
                ],
                "compat_kwargs": [
                    343
                ],
                "self.add_post_processor": [
                    344
                ],
                "ph": [
                    1479,
                    1480,
                    397,
                    346,
                    347
                ],
                "self.add_progress_hook": [
                    347
                ],
                "idxs": [
                    354,
                    357,
                    358,
                    351
                ],
                "i": [
                    352,
                    770,
                    771,
                    357,
                    358,
                    807,
                    808,
                    1223,
                    1224,
                    1226,
                    1211,
                    814,
                    1166,
                    1170,
                    1209,
                    795,
                    1214
                ],
                "a": [
                    352,
                    353,
                    357
                ],
                "enumerate": [
                    352,
                    357,
                    807,
                    1223,
                    1226,
                    1166,
                    1209
                ],
                "argv": [
                    352,
                    357,
                    358
                ],
                "re.match": [
                    353,
                    1866
                ],
                "re": [
                    353,
                    897,
                    867,
                    872,
                    1866,
                    592,
                    596,
                    892
                ],
                "correct_argv": [
                    363,
                    355
                ],
                "args_to_str": [
                    363
                ],
                "self._ies.append": [
                    367
                ],
                "ie": [
                    387,
                    388,
                    647,
                    648,
                    651,
                    656,
                    665,
                    1436,
                    1443,
                    686,
                    689,
                    367,
                    368,
                    369,
                    377,
                    378,
                    379,
                    380,
                    381
                ],
                "ie.ie_key": [
                    368,
                    689
                ],
                "ie.set_downloader": [
                    369
                ],
                "self._ies_instances.get": [
                    377
                ],
                "ie_key": [
                    640,
                    642,
                    643,
                    377,
                    379,
                    639
                ],
                "get_info_extractor": [
                    379
                ],
                "self.add_info_extractor": [
                    388,
                    380
                ],
                "gen_extractors": [
                    387
                ],
                "self._pps.append": [
                    392
                ],
                "pp.set_downloader": [
                    393
                ],
                "self._progress_hooks.append": [
                    397
                ],
                "hasattr": [
                    1889,
                    489,
                    400,
                    497,
                    403
                ],
                "message": [
                    518,
                    401,
                    530,
                    915,
                    404,
                    405,
                    406,
                    918,
                    414,
                    422,
                    424,
                    426,
                    432,
                    434,
                    436,
                    437,
                    446,
                    448,
                    483,
                    484,
                    501,
                    510
                ],
                "compat_str": [
                    1891,
                    677,
                    1447,
                    491,
                    1995,
                    432,
                    562,
                    1843,
                    404,
                    1396,
                    1214,
                    671
                ],
                "line_count": [
                    409,
                    405
                ],
                "message.count": [
                    405
                ],
                "self._output_process.stdin.write": [
                    406
                ],
                "self._output_process.stdin": [
                    406,
                    407
                ],
                "encode": [
                    406
                ],
                "self._output_process.stdin.flush": [
                    407
                ],
                "res": [
                    408,
                    410,
                    1713,
                    1715,
                    1717,
                    1719,
                    1720,
                    1723,
                    1725,
                    1727,
                    1729,
                    1731,
                    1732,
                    1733,
                    1608,
                    1736,
                    1737,
                    1738,
                    1740,
                    1742,
                    1744,
                    1617,
                    1746,
                    1748,
                    1749,
                    1751,
                    1753,
                    1755,
                    1756,
                    1757,
                    1759,
                    1761,
                    1763,
                    1764,
                    1765,
                    1127,
                    1767,
                    1768,
                    1769,
                    1131,
                    1770,
                    1135,
                    1137
                ],
                "join": [
                    897,
                    930,
                    872,
                    490,
                    494,
                    1266,
                    1811,
                    1878,
                    408,
                    1626
                ],
                "decode": [
                    408,
                    577,
                    1896,
                    1894
                ],
                "self._output_channel.readline": [
                    408
                ],
                "_": [
                    928,
                    409,
                    937
                ],
                "range": [
                    409,
                    759
                ],
                "len": [
                    1344,
                    1600,
                    1978,
                    774,
                    1222,
                    552,
                    1274,
                    1101,
                    1778,
                    788,
                    799,
                    1112,
                    1977,
                    410,
                    1275,
                    767
                ],
                "self.to_stdout": [
                    1376,
                    1374,
                    1378,
                    708,
                    1380,
                    1382,
                    1482,
                    1361,
                    1617,
                    1363,
                    1367,
                    1370,
                    1372,
                    414
                ],
                "skip_eol": [
                    425,
                    414
                ],
                "write_string": [
                    1856,
                    417
                ],
                "s": [
                    992,
                    417,
                    982,
                    1946,
                    1947,
                    1950
                ],
                "out": [
                    417,
                    1864,
                    1865,
                    1866,
                    1867
                ],
                "debug": [
                    422
                ],
                "check_quiet": [
                    423
                ],
                "self._bidi_workaround": [
                    424,
                    436
                ],
                "terminator": [
                    425,
                    426
                ],
                "output": [
                    426,
                    428,
                    437,
                    438
                ],
                "self._write_string": [
                    448,
                    1858,
                    1891,
                    455,
                    1895,
                    1867,
                    428,
                    462,
                    1873,
                    438,
                    1885
                ],
                "error": [
                    434
                ],
                "ctypes.windll.kernel32.GetConsoleWindow": [
                    443
                ],
                "ctypes.windll.kernel32": [
                    443,
                    446
                ],
                "ctypes.windll": [
                    443,
                    446
                ],
                "ctypes": [
                    443,
                    446
                ],
                "ctypes.windll.kernel32.SetConsoleTitleW": [
                    446
                ],
                "ctypes.c_wchar_p": [
                    446
                ],
                "os.environ": [
                    460,
                    453,
                    447
                ],
                "self.save_console_title": [
                    465
                ],
                "self.restore_console_title": [
                    469
                ],
                "self.cookiejar.save": [
                    472
                ],
                "self.cookiejar": [
                    1920,
                    1912,
                    1141,
                    472,
                    1914,
                    1917
                ],
                "self.to_stderr": [
                    484,
                    519,
                    495
                ],
                "tb": [
                    486,
                    488,
                    490,
                    491,
                    494,
                    495,
                    531
                ],
                "sys.exc_info": [
                    487,
                    489,
                    490,
                    497,
                    498,
                    500
                ],
                "exc_info": [
                    489,
                    490,
                    497,
                    498,
                    500,
                    501
                ],
                "traceback.format_exception": [
                    490
                ],
                "traceback": [
                    490,
                    491,
                    493,
                    677
                ],
                "traceback.format_exc": [
                    491,
                    677
                ],
                "tb_data": [
                    493,
                    494
                ],
                "traceback.format_list": [
                    493
                ],
                "traceback.extract_stack": [
                    493
                ],
                "DownloadError": [
                    1629,
                    501
                ],
                "warning": [
                    510
                ],
                "self._err_file.isatty": [
                    514,
                    526
                ],
                "_msg_header": [
                    515,
                    517,
                    518,
                    527,
                    529,
                    530
                ],
                "warning_message": [
                    518,
                    519
                ],
                "error_message": [
                    530,
                    531
                ],
                "self.trouble": [
                    531
                ],
                "self.to_screen": [
                    1793,
                    1797,
                    775,
                    1799,
                    1417,
                    1420,
                    1805,
                    1807,
                    1809,
                    789,
                    536,
                    538,
                    800,
                    808,
                    1452,
                    1454,
                    823,
                    1464,
                    1466,
                    1982,
                    1985,
                    1991,
                    1352,
                    1613,
                    742,
                    1525,
                    1782,
                    1402,
                    1275,
                    1660,
                    1407
                ],
                "file_name": [
                    536
                ],
                "UnicodeEncodeError": [
                    537,
                    1951
                ],
                "template_dict": [
                    545,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    565,
                    566,
                    568,
                    572,
                    543
                ],
                "info_dict": [
                    1537,
                    1538,
                    1541,
                    1557,
                    1561,
                    1565,
                    1566,
                    543,
                    1570,
                    1574,
                    1577,
                    1581,
                    1582,
                    1586,
                    1591,
                    1595,
                    586,
                    587,
                    589,
                    598,
                    603,
                    611,
                    613,
                    1129,
                    1641,
                    619,
                    1133,
                    1140,
                    629,
                    1145,
                    1147,
                    1149,
                    1152,
                    1154,
                    1155,
                    1157,
                    1669,
                    1159,
                    1671,
                    1161,
                    1672,
                    1675,
                    1682,
                    1172,
                    1173,
                    1175,
                    1176,
                    1178,
                    1182,
                    1183,
                    1188,
                    1189,
                    1190,
                    1700,
                    1192,
                    1193,
                    1194,
                    1197,
                    1199,
                    1201,
                    1238,
                    1244,
                    1249,
                    1251,
                    1254,
                    1261,
                    1773,
                    1784,
                    1275,
                    1787,
                    1277,
                    1789,
                    1281,
                    1282,
                    1794,
                    1798,
                    1336,
                    1343,
                    1344,
                    1345,
                    1347,
                    1348,
                    1350,
                    1357,
                    1361,
                    1363,
                    1365,
                    1366,
                    1370,
                    1371,
                    1372,
                    1373,
                    1374,
                    1377,
                    1378,
                    1380,
                    1382,
                    1400,
                    1403,
                    1409,
                    1415,
                    1422,
                    1432,
                    1435,
                    1436,
                    1444,
                    1963,
                    1967,
                    1462,
                    1468,
                    1983,
                    1473,
                    1986,
                    1992,
                    1485,
                    1515,
                    1517,
                    1519,
                    1523,
                    1530
                ],
                "int": [
                    545,
                    876,
                    759,
                    760,
                    762,
                    1340
                ],
                "time.time": [
                    545
                ],
                "time": [
                    545
                ],
                "autonumber_size": [
                    546,
                    547,
                    548,
                    549
                ],
                "autonumber_templ": [
                    549,
                    550
                ],
                "template_dict.get": [
                    551,
                    553,
                    554,
                    556,
                    558
                ],
                "sanitize": [
                    561,
                    565
                ],
                "sanitize_filename": [
                    561
                ],
                "v": [
                    1641,
                    1879,
                    562,
                    1880,
                    565,
                    566,
                    567,
                    728,
                    1881
                ],
                "k": [
                    1641,
                    1642,
                    564,
                    565,
                    566,
                    728
                ],
                "template_dict.items": [
                    566
                ],
                "collections.defaultdict": [
                    568
                ],
                "collections": [
                    568,
                    924
                ],
                "outtmpl": [
                    1601,
                    1603,
                    570,
                    571,
                    1599
                ],
                "sanitize_path": [
                    1392,
                    570
                ],
                "DEFAULT_OUTTMPL": [
                    570,
                    1260,
                    1599
                ],
                "tmpl": [
                    571,
                    572
                ],
                "compat_expanduser": [
                    571
                ],
                "filename": [
                    1541,
                    1415,
                    1450,
                    1462,
                    1591,
                    1979,
                    572,
                    577,
                    578,
                    1473,
                    1357,
                    1375,
                    1376,
                    1512,
                    1514,
                    1388,
                    1516,
                    1647,
                    1392,
                    1523,
                    1524,
                    1527,
                    1400
                ],
                "encodeFilename": [
                    1408,
                    577,
                    1416,
                    1451,
                    1421,
                    1455,
                    1392,
                    1524,
                    1463,
                    1401,
                    1981,
                    1662
                ],
                "preferredencoding": [
                    577,
                    580,
                    1958
                ],
                "ValueError": [
                    1184,
                    579,
                    904,
                    877,
                    882
                ],
                "self.report_error": [
                    1057,
                    1411,
                    580,
                    677,
                    1543,
                    682,
                    1611,
                    1548,
                    1657,
                    1426,
                    1458,
                    1396,
                    1593,
                    1470,
                    671
                ],
                "err": [
                    1952,
                    580,
                    1543,
                    1447,
                    1864,
                    1546,
                    1995,
                    1548,
                    1396,
                    1593
                ],
                "repr": [
                    580
                ],
                "video_title": [
                    610,
                    612,
                    614,
                    586,
                    607
                ],
                "info_dict.get": [
                    1157,
                    1669,
                    1159,
                    1415,
                    1672,
                    1557,
                    1432,
                    1178,
                    1787,
                    1189,
                    1190,
                    1574,
                    1193,
                    1194,
                    1963,
                    1197,
                    1967,
                    1462,
                    1336,
                    586,
                    1485,
                    1365,
                    598,
                    1370,
                    1371,
                    603,
                    1373,
                    1377,
                    611,
                    1129,
                    1773,
                    1400,
                    1145,
                    1403,
                    1789
                ],
                "title": [
                    589,
                    592,
                    593,
                    596,
                    597
                ],
                "matchtitle": [
                    592,
                    593,
                    590,
                    591
                ],
                "re.search": [
                    592,
                    596
                ],
                "re.IGNORECASE": [
                    592,
                    596
                ],
                "rejecttitle": [
                    594,
                    595,
                    596,
                    597
                ],
                "date": [
                    601,
                    602,
                    598,
                    599
                ],
                "dateRange": [
                    600,
                    601,
                    602
                ],
                "DateRange": [
                    600
                ],
                "isoformat": [
                    602
                ],
                "date_from_str": [
                    602
                ],
                "view_count": [
                    609,
                    610,
                    603,
                    604,
                    606,
                    607
                ],
                "min_views": [
                    605,
                    606,
                    607
                ],
                "max_views": [
                    608,
                    609,
                    610
                ],
                "age_restricted": [
                    611
                ],
                "self.in_download_archive": [
                    613
                ],
                "incomplete": [
                    616
                ],
                "match_filter": [
                    617,
                    618,
                    619
                ],
                "ret": [
                    619,
                    620,
                    621
                ],
                "key": [
                    628,
                    629
                ],
                "value": [
                    1114,
                    628,
                    629,
                    1116
                ],
                "extra_info.items": [
                    628
                ],
                "extra_info": [
                    705,
                    738,
                    712,
                    720,
                    849,
                    628,
                    725,
                    667
                ],
                "info_dict.setdefault": [
                    1565,
                    1581,
                    629
                ],
                "staticmethod": [
                    625,
                    1705,
                    1638
                ],
                "force_generic_extractor": [
                    639
                ],
                "ies": [
                    643,
                    645,
                    647
                ],
                "self.get_info_extractor": [
                    643,
                    1436
                ],
                "ie.suitable": [
                    648
                ],
                "url": [
                    1824,
                    1825,
                    1828,
                    1605,
                    648,
                    1609,
                    682,
                    687,
                    656,
                    688,
                    665
                ],
                "ie.working": [
                    651
                ],
                "ie_result": [
                    777,
                    656,
                    657,
                    659,
                    661,
                    663,
                    791,
                    665,
                    667,
                    669,
                    802,
                    812,
                    685,
                    813,
                    815,
                    816,
                    817,
                    818,
                    701,
                    830,
                    831,
                    835,
                    708,
                    709,
                    712,
                    713,
                    841,
                    842,
                    843,
                    717,
                    844,
                    719,
                    848,
                    850,
                    724,
                    852,
                    728,
                    741,
                    765
                ],
                "ie.extract": [
                    656
                ],
                "list": [
                    996,
                    1093,
                    1321,
                    1099,
                    659,
                    1085,
                    981,
                    1268,
                    1048,
                    794,
                    1307,
                    797,
                    766
                ],
                "self.add_default_extra_info": [
                    665
                ],
                "process": [
                    666
                ],
                "self.process_ie_result": [
                    737,
                    849,
                    826,
                    667,
                    1628
                ],
                "download": [
                    827,
                    738,
                    713,
                    718,
                    849,
                    1273,
                    667
                ],
                "ExtractorError": [
                    1445,
                    670,
                    1204,
                    1270,
                    1211,
                    1148,
                    1150
                ],
                "de": [
                    671
                ],
                "de.format_traceback": [
                    671
                ],
                "MaxDownloadsReached": [
                    673,
                    1612,
                    1341
                ],
                "Exception": [
                    675,
                    1868,
                    854,
                    1871
                ],
                "e": [
                    1657,
                    677
                ],
                "self.add_extra_info": [
                    712,
                    685,
                    838
                ],
                "ie.IE_NAME": [
                    686
                ],
                "url_basename": [
                    688,
                    817,
                    843
                ],
                "result_type": [
                    832,
                    739,
                    711,
                    714,
                    721,
                    854,
                    701,
                    703
                ],
                "ie_result.get": [
                    835,
                    741,
                    812,
                    813,
                    719,
                    724,
                    701
                ],
                "extract_flat": [
                    704,
                    705,
                    706
                ],
                "json.dumps": [
                    1617,
                    708,
                    1382
                ],
                "json": [
                    1617,
                    1626,
                    708,
                    1382
                ],
                "self.process_video_result": [
                    713
                ],
                "self.extract_info": [
                    1608,
                    723,
                    717
                ],
                "info": [
                    1478,
                    1482,
                    1483,
                    1646,
                    1647,
                    723,
                    1655,
                    1626,
                    732,
                    1630,
                    1628
                ],
                "force_properties": [
                    730,
                    731,
                    733,
                    727
                ],
                "ie_result.items": [
                    728
                ],
                "f": [
                    1026,
                    1027,
                    1032,
                    1033,
                    907,
                    1038,
                    1039,
                    1811,
                    1045,
                    1047,
                    1053,
                    1533,
                    1319,
                    1321,
                    1323,
                    1326,
                    1329,
                    1330,
                    1089,
                    1366,
                    1367,
                    1624,
                    729,
                    986,
                    730,
                    731,
                    985,
                    1626,
                    995,
                    996,
                    1005,
                    1006,
                    1775,
                    1776,
                    1777,
                    1010,
                    1011,
                    1015,
                    1016,
                    1529,
                    1531,
                    1020,
                    1021
                ],
                "new_result": [
                    738,
                    732,
                    733,
                    735
                ],
                "info.copy": [
                    732
                ],
                "new_result.update": [
                    733
                ],
                "new_result.get": [
                    735
                ],
                "playlist": [
                    802,
                    741,
                    742,
                    777,
                    811,
                    791
                ],
                "playlist_results": [
                    744,
                    829,
                    830
                ],
                "playliststart": [
                    773,
                    746,
                    814,
                    787,
                    798
                ],
                "playlistend": [
                    773,
                    747,
                    749,
                    750,
                    787,
                    798
                ],
                "playlistitems_str": [
                    752,
                    754,
                    763
                ],
                "playlistitems": [
                    768,
                    795,
                    770,
                    779,
                    781,
                    753,
                    793,
                    763
                ],
                "string_segment": [
                    762,
                    756,
                    757,
                    758
                ],
                "format.split": [
                    756
                ],
                "format": [
                    916,
                    1707,
                    1709,
                    1710,
                    1711,
                    1712,
                    1713,
                    1715,
                    1716,
                    1717,
                    1209,
                    1210,
                    1213,
                    1214,
                    1215,
                    1218,
                    1223,
                    1224,
                    1226,
                    1227,
                    1228,
                    973,
                    1229,
                    1230,
                    1231,
                    1234,
                    1235,
                    1239,
                    1240,
                    986,
                    987,
                    756,
                    1276,
                    1278
                ],
                "start": [
                    928,
                    965,
                    937,
                    973,
                    917,
                    758,
                    759
                ],
                "end": [
                    758,
                    759
                ],
                "string_segment.split": [
                    758
                ],
                "item": [
                    760,
                    783,
                    781,
                    759
                ],
                "iter_playlistitems": [
                    763
                ],
                "ie_entries": [
                    770,
                    773,
                    778,
                    782,
                    798,
                    786,
                    794,
                    765,
                    766,
                    767
                ],
                "n_all_entries": [
                    777,
                    771,
                    767
                ],
                "entries": [
                    769,
                    773,
                    774,
                    805,
                    807,
                    780,
                    782,
                    786,
                    788,
                    795,
                    797,
                    799
                ],
                "n_entries": [
                    802,
                    774,
                    808,
                    777,
                    810,
                    788,
                    791,
                    799
                ],
                "PagedList": [
                    778
                ],
                "entries.extend": [
                    782
                ],
                "ie_entries.getslice": [
                    786,
                    782
                ],
                "entry_list": [
                    794,
                    795
                ],
                "itertools.islice": [
                    797
                ],
                "itertools": [
                    797,
                    1086
                ],
                "entry": [
                    826,
                    821,
                    807
                ],
                "extra": [
                    809,
                    828
                ],
                "reason": [
                    1350,
                    1351,
                    1352,
                    821,
                    822,
                    823
                ],
                "self._match_entry": [
                    821,
                    1350
                ],
                "entry_result": [
                    826,
                    829
                ],
                "playlist_results.append": [
                    829
                ],
                "r": [
                    849,
                    850,
                    847,
                    839
                ],
                "_fixup": [
                    849
                ],
                "OPERATORS": [
                    872,
                    859,
                    885
                ],
                "operator.lt": [
                    860
                ],
                "operator": [
                    864,
                    865,
                    889,
                    890,
                    860,
                    861,
                    862,
                    863
                ],
                "operator.le": [
                    861
                ],
                "operator.gt": [
                    862
                ],
                "operator.ge": [
                    863
                ],
                "operator.eq": [
                    864,
                    889
                ],
                "operator.ne": [
                    865,
                    890
                ],
                "operator_rex": [
                    873,
                    867
                ],
                "re.compile": [
                    867,
                    892
                ],
                "map": [
                    872,
                    897,
                    1082
                ],
                "re.escape": [
                    872,
                    897
                ],
                "OPERATORS.keys": [
                    872
                ],
                "m": [
                    898,
                    899,
                    900,
                    901,
                    903,
                    873,
                    874,
                    907,
                    876,
                    909,
                    878,
                    880,
                    884,
                    885,
                    887
                ],
                "operator_rex.search": [
                    873
                ],
                "filter_spec": [
                    904,
                    873,
                    898,
                    884
                ],
                "comparison_value": [
                    900,
                    876,
                    878,
                    879,
                    880,
                    881,
                    910
                ],
                "m.group": [
                    900,
                    901,
                    907,
                    876,
                    909,
                    878,
                    880,
                    884,
                    885
                ],
                "parse_filesize": [
                    880,
                    878
                ],
                "op": [
                    910,
                    885,
                    901
                ],
                "STR_OPERATORS": [
                    888,
                    897,
                    901
                ],
                "str_operator_rex": [
                    898,
                    892
                ],
                "STR_OPERATORS.keys": [
                    897
                ],
                "str_operator_rex.search": [
                    898
                ],
                "actual_value": [
                    907,
                    908,
                    910
                ],
                "f.get": [
                    1027,
                    1033,
                    907,
                    1039,
                    1777,
                    1011,
                    1015,
                    1016,
                    1021,
                    1367
                ],
                "_filter": [
                    1092,
                    1093,
                    911
                ],
                "note": [
                    917
                ],
                "format_spec": [
                    1024,
                    1030,
                    1001,
                    1097,
                    1004,
                    1036,
                    1101,
                    1007,
                    1008,
                    1044,
                    917,
                    1045,
                    1047,
                    1018
                ],
                "SyntaxError": [
                    918
                ],
                "PICKFIRST": [
                    920,
                    957,
                    991
                ],
                "MERGE": [
                    1051,
                    921,
                    971
                ],
                "SINGLE": [
                    960,
                    1000,
                    922,
                    942
                ],
                "GROUP": [
                    923,
                    989,
                    966
                ],
                "FormatSelector": [
                    960,
                    966,
                    971,
                    942,
                    924,
                    957
                ],
                "collections.namedtuple": [
                    924
                ],
                "filter_parts": [
                    930,
                    932,
                    927
                ],
                "type": [
                    928,
                    929,
                    937,
                    939,
                    941,
                    974,
                    943,
                    1843,
                    1849
                ],
                "string": [
                    928,
                    929,
                    963,
                    932,
                    967,
                    937,
                    973,
                    942,
                    944,
                    946,
                    950,
                    953,
                    958
                ],
                "tokens": [
                    928,
                    961,
                    1123,
                    966,
                    937,
                    969,
                    1099,
                    1105,
                    948,
                    955
                ],
                "tokenize.OP": [
                    929,
                    943
                ],
                "tokenize": [
                    929,
                    939,
                    1100,
                    941,
                    974,
                    943
                ],
                "filter_parts.append": [
                    932
                ],
                "selectors": [
                    935,
                    971,
                    977,
                    978,
                    951,
                    957
                ],
                "current_selector": [
                    960,
                    962,
                    964,
                    966,
                    936,
                    968,
                    970,
                    942,
                    976,
                    977,
                    951,
                    952,
                    954,
                    956,
                    959
                ],
                "getattr": [
                    1848,
                    939
                ],
                "tokenize.NAME": [
                    941
                ],
                "tokenize.NUMBER": [
                    941
                ],
                "endwith": [
                    944
                ],
                "tokens.restore_last_token": [
                    948
                ],
                "selectors.append": [
                    977,
                    971,
                    957,
                    951
                ],
                "first_choice": [
                    954,
                    957
                ],
                "second_choice": [
                    955,
                    957
                ],
                "_parse_format_selection": [
                    969,
                    955,
                    966,
                    1123
                ],
                "format_filter": [
                    961,
                    962
                ],
                "_parse_filter": [
                    961
                ],
                "current_selector.filters.append": [
                    962
                ],
                "current_selector.filters": [
                    962
                ],
                "syntax_error": [
                    973,
                    1101,
                    965
                ],
                "video_selector": [
                    968,
                    1082,
                    971,
                    1086
                ],
                "audio_selector": [
                    969,
                    1082,
                    971,
                    1086
                ],
                "tokenize.ENDMARKER": [
                    974
                ],
                "selector": [
                    992,
                    1089,
                    1000,
                    1001,
                    981,
                    982,
                    1082,
                    1051,
                    989,
                    990,
                    991
                ],
                "fs": [
                    992,
                    985,
                    995,
                    982
                ],
                "_build_selector_function": [
                    992,
                    1124,
                    982,
                    1082,
                    990
                ],
                "formats": [
                    1026,
                    1032,
                    1038,
                    1811,
                    1812,
                    1048,
                    1313,
                    1314,
                    1319,
                    1321,
                    1326,
                    1199,
                    1201,
                    1203,
                    1209,
                    1085,
                    1086,
                    1093,
                    1094,
                    1226,
                    986,
                    1498,
                    1244,
                    1249,
                    996,
                    1005,
                    1773,
                    1776,
                    1010,
                    1778,
                    1268,
                    1015,
                    1016,
                    1017,
                    1020
                ],
                "selector_function": [
                    1094,
                    988,
                    990
                ],
                "selector.type": [
                    1000,
                    1051,
                    989,
                    991
                ],
                "selector.selector": [
                    992,
                    1001,
                    1082,
                    990
                ],
                "picked_formats": [
                    996,
                    997,
                    998
                ],
                "format_idx": [
                    1008,
                    1017,
                    1013
                ],
                "audiovideo_formats": [
                    1009,
                    1012,
                    1013
                ],
                "all": [
                    1016,
                    1015
                ],
                "audio_formats": [
                    1025,
                    1028,
                    1029,
                    1019,
                    1022,
                    1023
                ],
                "video_formats": [
                    1031,
                    1034,
                    1035,
                    1037,
                    1040,
                    1041
                ],
                "extensions": [
                    1043,
                    1044
                ],
                "filter_f": [
                    1048,
                    1045,
                    1047
                ],
                "matches": [
                    1321,
                    1322,
                    1323,
                    1048,
                    1049,
                    1050
                ],
                "filter": [
                    1048,
                    1321,
                    1093
                ],
                "format_1": [
                    1059,
                    1053
                ],
                "format_2": [
                    1059,
                    1053
                ],
                "formats_info": [
                    1056,
                    1062,
                    1066,
                    1067,
                    1068,
                    1069,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079,
                    1053
                ],
                "get": [
                    1056,
                    1067,
                    1068,
                    1069,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079
                ],
                "output_ext": [
                    1080,
                    1061
                ],
                "pair": [
                    1086,
                    1087
                ],
                "itertools.product": [
                    1086
                ],
                "_merge": [
                    1087
                ],
                "filters": [
                    1089,
                    1092
                ],
                "self._build_format_filter": [
                    1089
                ],
                "selector.filters": [
                    1089
                ],
                "final_selector": [
                    1095
                ],
                "stream": [
                    1097,
                    1099
                ],
                "io.BytesIO": [
                    1097
                ],
                "io": [
                    1408,
                    1097,
                    1421,
                    1455
                ],
                "format_spec.encode": [
                    1097
                ],
                "compat_tokenize_tokenize": [
                    1099
                ],
                "stream.readline": [
                    1099
                ],
                "tokenize.TokenError": [
                    1100
                ],
                "self.tokens": [
                    1112,
                    1105,
                    1114
                ],
                "self.counter": [
                    1121,
                    1106,
                    1112,
                    1114,
                    1115
                ],
                "StopIteration": [
                    1113
                ],
                "next": [
                    1118
                ],
                "__next__": [
                    1118
                ],
                "parsed_selector": [
                    1123,
                    1124
                ],
                "iter": [
                    1123
                ],
                "TokenIterator": [
                    1123
                ],
                "std_headers.copy": [
                    1127
                ],
                "std_headers": [
                    1127
                ],
                "add_headers": [
                    1129,
                    1130,
                    1131
                ],
                "res.update": [
                    1131
                ],
                "cookies": [
                    1133,
                    1134,
                    1135
                ],
                "self._calc_cookies": [
                    1133
                ],
                "pr": [
                    1140,
                    1141,
                    1142
                ],
                "compat_urllib_request.Request": [
                    1832,
                    1140
                ],
                "compat_urllib_request": [
                    1927,
                    1832,
                    1936,
                    1140,
                    1919
                ],
                "self.cookiejar.add_cookie_header": [
                    1141
                ],
                "pr.get_header": [
                    1142
                ],
                "thumbnails": [
                    1157,
                    1158,
                    1161,
                    1162,
                    1163,
                    1801,
                    1166,
                    1172,
                    1173,
                    1963,
                    1964,
                    1965,
                    1967,
                    1971,
                    1975,
                    1977,
                    1978,
                    1787,
                    1788,
                    1791
                ],
                "thumbnail": [
                    1160,
                    1161,
                    1159
                ],
                "thumbnails.sort": [
                    1163
                ],
                "t.get": [
                    1169,
                    1164,
                    1165,
                    1801
                ],
                "t": [
                    1988,
                    1801,
                    1995,
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1170,
                    1975,
                    1976,
                    1977,
                    1978,
                    1979
                ],
                "upload_date": [
                    1182,
                    1183
                ],
                "datetime.datetime.utcfromtimestamp": [
                    1182
                ],
                "datetime.datetime": [
                    1182
                ],
                "datetime": [
                    1182
                ],
                "upload_date.strftime": [
                    1183
                ],
                "OverflowError": [
                    1184
                ],
                "self.list_subtitles": [
                    1189,
                    1190
                ],
                "self.process_subtitles": [
                    1192
                ],
                "formats_dict": [
                    1216,
                    1217,
                    1218,
                    1221,
                    1206
                ],
                "format.get": [
                    1707,
                    1227,
                    1709,
                    1231,
                    1711,
                    1712,
                    1716,
                    1213
                ],
                "format_id": [
                    1216,
                    1217,
                    1218,
                    1221,
                    1224,
                    1215
                ],
                "append": [
                    1582,
                    1218,
                    1566
                ],
                "ambiguous_formats": [
                    1221,
                    1222,
                    1223
                ],
                "formats_dict.items": [
                    1221
                ],
                "self.format_resolution": [
                    1230,
                    1775
                ],
                "lower": [
                    1235
                ],
                "determine_ext": [
                    1976,
                    1235
                ],
                "full_format_info": [
                    1240,
                    1238,
                    1239
                ],
                "info_dict.copy": [
                    1238
                ],
                "full_format_info.update": [
                    1239
                ],
                "self._calc_headers": [
                    1240
                ],
                "self.list_formats": [
                    1251
                ],
                "self.list_thumbnails": [
                    1254
                ],
                "req_format": [
                    1257,
                    1258,
                    1267,
                    1266
                ],
                "req_format_list": [
                    1264,
                    1265,
                    1266,
                    1259
                ],
                "merger": [
                    1262,
                    1263,
                    1488,
                    1489,
                    1495
                ],
                "FFmpegMergerPP": [
                    1488,
                    1262
                ],
                "merger.available": [
                    1489,
                    1263
                ],
                "merger.can_merge": [
                    1263
                ],
                "req_format_list.append": [
                    1264,
                    1265
                ],
                "format_selector": [
                    1267,
                    1268
                ],
                "self.build_format_selector": [
                    1267
                ],
                "formats_to_download": [
                    1281,
                    1268,
                    1269,
                    1274,
                    1275,
                    1276
                ],
                "new_info": [
                    1533,
                    1535,
                    1530,
                    1531,
                    1532,
                    1277,
                    1278,
                    1279
                ],
                "new_info.update": [
                    1531,
                    1278
                ],
                "self.process_info": [
                    1279
                ],
                "info_dict.update": [
                    1281
                ],
                "available_subs": [
                    1313,
                    1286,
                    1288,
                    1291,
                    1292,
                    1296,
                    1300,
                    1304,
                    1307
                ],
                "normal_subtitles": [
                    1288,
                    1287
                ],
                "available_subs.update": [
                    1288
                ],
                "automatic_captions": [
                    1289,
                    1290
                ],
                "lang": [
                    1312,
                    1313,
                    1315,
                    1290,
                    1291,
                    1292,
                    1329,
                    1330,
                    1811,
                    1812
                ],
                "cap_info": [
                    1290,
                    1292
                ],
                "automatic_captions.items": [
                    1290
                ],
                "requested_langs": [
                    1312,
                    1300,
                    1303,
                    1305,
                    1307
                ],
                "available_subs.keys": [
                    1307,
                    1300
                ],
                "formats_query": [
                    1329,
                    1309,
                    1310
                ],
                "formats_preference": [
                    1317,
                    1310
                ],
                "formats_query.split": [
                    1310
                ],
                "subs": [
                    1330,
                    1331,
                    1311
                ],
                "available_subs.get": [
                    1313
                ],
                "video_id": [
                    1808,
                    1315,
                    1805
                ],
                "ext": [
                    1321,
                    1317,
                    1318
                ],
                "max_downloads": [
                    1338,
                    1339,
                    1340
                ],
                "self.prepare_filename": [
                    1532,
                    1357
                ],
                "formatSeconds": [
                    1378
                ],
                "dn": [
                    1392,
                    1393,
                    1394
                ],
                "os.path.dirname": [
                    1392,
                    1863
                ],
                "os.path": [
                    1863,
                    1416,
                    1512,
                    1514,
                    1451,
                    1392,
                    1393,
                    1524,
                    1463,
                    1401,
                    1979,
                    1981
                ],
                "os.path.exists": [
                    1416,
                    1451,
                    1393,
                    1524,
                    1463,
                    1401,
                    1981
                ],
                "os.makedirs": [
                    1394
                ],
                "IOError": [
                    1410,
                    1545,
                    1425,
                    1457,
                    1395,
                    1691,
                    1469,
                    1663
                ],
                "descfn": [
                    1408,
                    1411,
                    1400,
                    1401,
                    1407
                ],
                "replace_extension": [
                    1400,
                    1462,
                    1415
                ],
                "io.open": [
                    1408,
                    1421,
                    1455
                ],
                "descfile": [
                    1408,
                    1409
                ],
                "descfile.write": [
                    1409
                ],
                "annofn": [
                    1415,
                    1416,
                    1420,
                    1421,
                    1426
                ],
                "annofile": [
                    1421,
                    1422
                ],
                "annofile.write": [
                    1422
                ],
                "KeyError": [
                    1423
                ],
                "TypeError": [
                    1423
                ],
                "subtitles_are_requested": [
                    1432,
                    1429
                ],
                "any": [
                    1429
                ],
                "subtitles": [
                    1812,
                    1435,
                    1804,
                    1437
                ],
                "sub_lang": [
                    1450,
                    1452,
                    1437,
                    1447
                ],
                "sub_info": [
                    1440,
                    1444,
                    1437,
                    1438,
                    1439
                ],
                "subtitles.items": [
                    1812,
                    1437
                ],
                "sub_format": [
                    1450,
                    1452,
                    1438
                ],
                "sub_info.get": [
                    1439
                ],
                "sub_data": [
                    1440,
                    1443,
                    1456
                ],
                "ie._download_webpage": [
                    1443
                ],
                "err.cause": [
                    1447
                ],
                "sub_filename": [
                    1450,
                    1451,
                    1454,
                    1455,
                    1458
                ],
                "subtitles_filename": [
                    1450
                ],
                "subfile": [
                    1456,
                    1455
                ],
                "subfile.write": [
                    1456
                ],
                "infofn": [
                    1462,
                    1463,
                    1466,
                    1468,
                    1470
                ],
                "write_json_file": [
                    1468
                ],
                "self.filter_requested_info": [
                    1626,
                    1468
                ],
                "self._write_thumbnails": [
                    1473
                ],
                "fd": [
                    1480,
                    1483,
                    1478
                ],
                "get_suitable_downloader": [
                    1478
                ],
                "fd.add_progress_hook": [
                    1480
                ],
                "info.get": [
                    1482,
                    1630
                ],
                "fd.download": [
                    1483
                ],
                "name": [
                    1808,
                    1483,
                    1805
                ],
                "downloaded": [
                    1534,
                    1538,
                    1486
                ],
                "success": [
                    1536,
                    1551,
                    1541,
                    1487
                ],
                "postprocessors": [
                    1537,
                    1490,
                    1495
                ],
                "video": [
                    1498,
                    1500
                ],
                "audio": [
                    1498,
                    1500
                ],
                "video_ext": [
                    1507,
                    1500,
                    1501
                ],
                "audio_ext": [
                    1507,
                    1500,
                    1501
                ],
                "audio.get": [
                    1500
                ],
                "video.get": [
                    1500
                ],
                "COMPATIBLE_EXTS": [
                    1506,
                    1502
                ],
                "exts": [
                    1506,
                    1507
                ],
                "filename_real_ext": [
                    1512,
                    1515
                ],
                "os.path.splitext": [
                    1512,
                    1514,
                    1979
                ],
                "filename_wo_ext": [
                    1513,
                    1523
                ],
                "requested_formats": [
                    1529,
                    1517,
                    1518
                ],
                "compatible_formats": [
                    1518
                ],
                "fname": [
                    1532,
                    1533,
                    1534,
                    1535
                ],
                "prepend_extension": [
                    1533
                ],
                "downloaded.append": [
                    1534
                ],
                "partial_success": [
                    1536,
                    1535
                ],
                "dl": [
                    1541,
                    1535
                ],
                "compat_urllib_error.URLError": [
                    1993,
                    1542
                ],
                "compat_urllib_error": [
                    1993,
                    1542
                ],
                "compat_http_client.HTTPException": [
                    1993,
                    1542
                ],
                "compat_http_client": [
                    1993,
                    1542
                ],
                "socket.error": [
                    1993,
                    1542
                ],
                "socket": [
                    1993,
                    1542
                ],
                "UnavailableVideoError": [
                    1546,
                    1610
                ],
                "ContentTooShortError": [
                    1547
                ],
                "err.expected": [
                    1548
                ],
                "err.downloaded": [
                    1548
                ],
                "fixup_policy": [
                    1572,
                    1575,
                    1578,
                    1553,
                    1554,
                    1555,
                    1588,
                    1559,
                    1562
                ],
                "stretched_ratio": [
                    1561,
                    1570,
                    1557,
                    1558
                ],
                "stretched_pp": [
                    1563,
                    1564,
                    1566
                ],
                "FFmpegFixupStretchedPP": [
                    1563
                ],
                "stretched_pp.available": [
                    1564
                ],
                "fixup_pp": [
                    1579,
                    1580,
                    1582
                ],
                "FFmpegFixupM4aPP": [
                    1579
                ],
                "fixup_pp.available": [
                    1580
                ],
                "self.post_process": [
                    1591
                ],
                "PostProcessingError": [
                    1592,
                    1656
                ],
                "self.record_download_archive": [
                    1595
                ],
                "url_list": [
                    1600,
                    1605
                ],
                "SameFileError": [
                    1603
                ],
                "contextlib.closing": [
                    1622
                ],
                "contextlib": [
                    1622
                ],
                "fileinput.FileInput": [
                    1622
                ],
                "fileinput": [
                    1624,
                    1622
                ],
                "info_filename": [
                    1623
                ],
                "fileinput.hook_encoded": [
                    1624
                ],
                "json.loads": [
                    1626
                ],
                "webpage_url": [
                    1632,
                    1633,
                    1630,
                    1631
                ],
                "self.download": [
                    1633
                ],
                "info_dict.items": [
                    1641
                ],
                "ie_info": [
                    1649,
                    1650,
                    1646
                ],
                "pps_chain": [
                    1648,
                    1650,
                    1651,
                    1652
                ],
                "ie_info.get": [
                    1649
                ],
                "pps_chain.extend": [
                    1650,
                    1651
                ],
                "files_to_delete": [
                    1658,
                    1659,
                    1653,
                    1655
                ],
                "pp.run": [
                    1655
                ],
                "e.msg": [
                    1657
                ],
                "old_filename": [
                    1659,
                    1660,
                    1662
                ],
                "os.remove": [
                    1662
                ],
                "extractor": [
                    1669,
                    1670,
                    1672,
                    1673,
                    1675
                ],
                "extractor.lower": [
                    1675
                ],
                "fn": [
                    1697,
                    1698,
                    1702,
                    1678,
                    1679,
                    1687
                ],
                "vid_id": [
                    1700,
                    1701,
                    1703,
                    1682,
                    1683,
                    1689
                ],
                "self._make_archive_id": [
                    1682,
                    1700
                ],
                "locked_file": [
                    1702,
                    1687
                ],
                "archive_file": [
                    1688,
                    1703,
                    1702,
                    1687
                ],
                "line": [
                    1688,
                    1689
                ],
                "line.strip": [
                    1689
                ],
                "ioe.errno": [
                    1692
                ],
                "ioe": [
                    1692
                ],
                "errno.ENOENT": [
                    1692
                ],
                "errno": [
                    1692
                ],
                "archive_file.write": [
                    1703
                ],
                "default": [
                    1719
                ],
                "fdict.get": [
                    1728,
                    1760,
                    1730,
                    1762,
                    1734,
                    1735,
                    1766,
                    1739,
                    1741,
                    1758,
                    1743,
                    1745,
                    1747,
                    1754,
                    1724,
                    1726
                ],
                "fdict": [
                    1724,
                    1726,
                    1727,
                    1728,
                    1729,
                    1730,
                    1733,
                    1734,
                    1735,
                    1738,
                    1739,
                    1741,
                    1743,
                    1744,
                    1745,
                    1746,
                    1747,
                    1750,
                    1753,
                    1754,
                    1758,
                    1759,
                    1760,
                    1761,
                    1762,
                    1765,
                    1766,
                    1769
                ],
                "format_bytes": [
                    1769,
                    1765
                ],
                "table": [
                    1784,
                    1779,
                    1774
                ],
                "self._format_note": [
                    1775
                ],
                "header_line": [
                    1784,
                    1781
                ],
                "render_table": [
                    1784,
                    1809,
                    1799
                ],
                "tn_url": [
                    1789,
                    1790,
                    1791
                ],
                "reversed": [
                    1811
                ],
                "req_is_string": [
                    1824,
                    1829,
                    1823
                ],
                "req": [
                    1824,
                    1830,
                    1832,
                    1833,
                    1834,
                    1835,
                    1837,
                    1823
                ],
                "compat_basestring": [
                    1823
                ],
                "req.get_full_url": [
                    1824
                ],
                "url_escaped": [
                    1825,
                    1834,
                    1828,
                    1830
                ],
                "escape_url": [
                    1825
                ],
                "req_type": [
                    1832,
                    1833
                ],
                "req.get_method": [
                    1832
                ],
                "HEADRequest": [
                    1832
                ],
                "req.data": [
                    1834
                ],
                "req.headers": [
                    1834
                ],
                "req.origin_req_host": [
                    1835
                ],
                "req.unverifiable": [
                    1835
                ],
                "self._opener.open": [
                    1837
                ],
                "self._opener": [
                    1888,
                    1837,
                    1943
                ],
                "self._socket_timeout": [
                    1906,
                    1837
                ],
                "stdout_encoding": [
                    1848,
                    1854
                ],
                "__name__": [
                    1849
                ],
                "encoding_str": [
                    1856,
                    1850
                ],
                "locale.getpreferredencoding": [
                    1852
                ],
                "locale": [
                    1852
                ],
                "self.get_encoding": [
                    1950,
                    1855
                ],
                "__version__": [
                    1858,
                    1898
                ],
                "sp": [
                    1864,
                    1860
                ],
                "os.path.abspath": [
                    1863
                ],
                "__file__": [
                    1863
                ],
                "sp.communicate": [
                    1864
                ],
                "strip": [
                    1865
                ],
                "out.decode": [
                    1865
                ],
                "sys.exc_clear": [
                    1870
                ],
                "platform.python_version": [
                    1874
                ],
                "platform": [
                    1874
                ],
                "platform_name": [
                    1874
                ],
                "exe_versions": [
                    1880,
                    1876,
                    1877
                ],
                "FFmpegPostProcessor.get_versions": [
                    1876
                ],
                "FFmpegPostProcessor": [
                    1876
                ],
                "rtmpdump_version": [
                    1877
                ],
                "exe_str": [
                    1883,
                    1884,
                    1885,
                    1878
                ],
                "exe": [
                    1880,
                    1879
                ],
                "sorted": [
                    1880
                ],
                "exe_versions.items": [
                    1880
                ],
                "proxy_map": [
                    1890,
                    1891,
                    1887
                ],
                "handler": [
                    1888,
                    1889,
                    1890
                ],
                "self._opener.handlers": [
                    1888
                ],
                "proxy_map.update": [
                    1890
                ],
                "handler.proxies": [
                    1890
                ],
                "ipaddr": [
                    1894,
                    1895
                ],
                "read": [
                    1896,
                    1894
                ],
                "self.urlopen": [
                    1896,
                    1988,
                    1894
                ],
                "latest_version": [
                    1896,
                    1898,
                    1902
                ],
                "version_tuple": [
                    1898
                ],
                "timeout_val": [
                    1905,
                    1906
                ],
                "float": [
                    1906
                ],
                "opts_cookiefile": [
                    1916,
                    1915,
                    1908,
                    1911
                ],
                "opts_proxy": [
                    1921,
                    1922,
                    1909,
                    1925
                ],
                "compat_cookiejar.CookieJar": [
                    1912
                ],
                "compat_cookiejar": [
                    1912,
                    1914
                ],
                "compat_cookiejar.MozillaCookieJar": [
                    1914
                ],
                "os.access": [
                    1916
                ],
                "os.R_OK": [
                    1916
                ],
                "self.cookiejar.load": [
                    1917
                ],
                "cookie_processor": [
                    1937,
                    1919
                ],
                "compat_urllib_request.HTTPCookieProcessor": [
                    1919
                ],
                "proxies": [
                    1923,
                    1925,
                    1927,
                    1929,
                    1930,
                    1931
                ],
                "compat_urllib_request.getproxies": [
                    1927
                ],
                "proxy_handler": [
                    1937,
                    1931
                ],
                "PerRequestProxyHandler": [
                    1931
                ],
                "debuglevel": [
                    1933,
                    1934,
                    1935
                ],
                "https_handler": [
                    1937,
                    1934
                ],
                "make_HTTPS_handler": [
                    1934
                ],
                "ydlh": [
                    1937,
                    1935
                ],
                "YoutubeDLHandler": [
                    1935
                ],
                "opener": [
                    1936,
                    1942,
                    1943
                ],
                "compat_urllib_request.build_opener": [
                    1936
                ],
                "opener.addheaders": [
                    1942
                ],
                "s.encode": [
                    1950
                ],
                "err.reason": [
                    1952
                ],
                "encoding": [
                    1956,
                    1957,
                    1958,
                    1959
                ],
                "thumb_ext": [
                    1976,
                    1979
                ],
                "suffix": [
                    1977,
                    1979
                ],
                "thumb_display_id": [
                    1992,
                    1986,
                    1978,
                    1983
                ],
                "thumb_filename": [
                    1989,
                    1979,
                    1981,
                    1992
                ],
                "uf": [
                    1988,
                    1990
                ],
                "open": [
                    1989
                ],
                "thumbf": [
                    1989,
                    1990
                ],
                "shutil.copyfileobj": [
                    1990
                ],
                "shutil": [
                    1990
                ]
            },
            "filtered_variables_in_file": {
                "os.name": [
                    514,
                    27,
                    443,
                    526
                ],
                "os": [
                    514,
                    1416,
                    526,
                    27,
                    1451,
                    1463,
                    311,
                    443,
                    1979,
                    1981,
                    447,
                    453,
                    1863,
                    460,
                    1512,
                    1514,
                    1392,
                    1393,
                    1394,
                    1524,
                    1401,
                    1916,
                    1662
                ],
                "params": [
                    288,
                    320,
                    291,
                    328,
                    269,
                    278,
                    279,
                    286
                ],
                "_ies": [
                    270
                ],
                "_pps": [
                    271
                ],
                "_download_retcode": [
                    272
                ],
                "_num_downloads": [
                    273
                ],
                "_screen_file": [
                    274
                ],
                "self._ies": [
                    280,
                    645,
                    367
                ],
                "self": [
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    303,
                    305,
                    309,
                    311,
                    314,
                    322,
                    326,
                    329,
                    333,
                    336,
                    337,
                    339,
                    343,
                    344,
                    346,
                    347,
                    360,
                    367,
                    368,
                    369,
                    377,
                    380,
                    388,
                    392,
                    393,
                    397,
                    400,
                    403,
                    406,
                    407,
                    408,
                    414,
                    417,
                    421,
                    422,
                    423,
                    424,
                    428,
                    433,
                    434,
                    436,
                    438,
                    441,
                    448,
                    451,
                    455,
                    458,
                    462,
                    465,
                    466,
                    469,
                    471,
                    472,
                    484,
                    485,
                    495,
                    496,
                    502,
                    509,
                    510,
                    512,
                    514,
                    519,
                    526,
                    531,
                    536,
                    538,
                    546,
                    550,
                    563,
                    570,
                    580,
                    590,
                    594,
                    600,
                    605,
                    608,
                    611,
                    613,
                    617,
                    643,
                    645,
                    652,
                    665,
                    667,
                    671,
                    676,
                    677,
                    682,
                    685,
                    704,
                    707,
                    708,
                    712,
                    713,
                    717,
                    723,
                    737,
                    742,
                    746,
                    747,
                    752,
                    775,
                    789,
                    800,
                    804,
                    808,
                    821,
                    823,
                    826,
                    833,
                    838,
                    849,
                    1057,
                    1063,
                    1064,
                    1089,
                    1105,
                    1106,
                    1109,
                    1112,
                    1114,
                    1115,
                    1121,
                    1133,
                    1141,
                    1187,
                    1189,
                    1190,
                    1192,
                    1230,
                    1240,
                    1250,
                    1251,
                    1253,
                    1254,
                    1257,
                    1260,
                    1262,
                    1267,
                    1275,
                    1279,
                    1287,
                    1289,
                    1294,
                    1295,
                    1299,
                    1302,
                    1303,
                    1309,
                    1315,
                    1327,
                    1338,
                    1340,
                    1350,
                    1352,
                    1355,
                    1357,
                    1360,
                    1361,
                    1362,
                    1363,
                    1364,
                    1367,
                    1370,
                    1371,
                    1372,
                    1373,
                    1374,
                    1375,
                    1376,
                    1377,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1385,
                    1396,
                    1399,
                    1401,
                    1402,
                    1404,
                    1407,
                    1411,
                    1414,
                    1416,
                    1417,
                    1420,
                    1424,
                    1426,
                    1429,
                    1430,
                    1436,
                    1446,
                    1451,
                    1452,
                    1454,
                    1458,
                    1461,
                    1463,
                    1464,
                    1466,
                    1468,
                    1470,
                    1473,
                    1475,
                    1478,
                    1479,
                    1481,
                    1482,
                    1488,
                    1491,
                    1518,
                    1520,
                    1525,
                    1532,
                    1543,
                    1548,
                    1553,
                    1560,
                    1563,
                    1568,
                    1576,
                    1579,
                    1584,
                    1591,
                    1593,
                    1595,
                    1599,
                    1602,
                    1608,
                    1609,
                    1611,
                    1613,
                    1616,
                    1617,
                    1619,
                    1626,
                    1628,
                    1632,
                    1633,
                    1636,
                    1651,
                    1657,
                    1658,
                    1660,
                    1664,
                    1678,
                    1682,
                    1697,
                    1700,
                    1775,
                    1782,
                    1793,
                    1797,
                    1799,
                    1805,
                    1807,
                    1809,
                    1837,
                    1840,
                    1845,
                    1855,
                    1858,
                    1867,
                    1873,
                    1876,
                    1885,
                    1888,
                    1891,
                    1893,
                    1894,
                    1895,
                    1896,
                    1899,
                    1905,
                    1906,
                    1908,
                    1909,
                    1912,
                    1914,
                    1917,
                    1920,
                    1933,
                    1934,
                    1935,
                    1943,
                    1950,
                    1956,
                    1962,
                    1966,
                    1981,
                    1982,
                    1985,
                    1988,
                    1991,
                    1994
                ],
                "self._ies_instances": [
                    368,
                    281,
                    377
                ],
                "self._pps": [
                    392,
                    282,
                    1651
                ],
                "self._progress_hooks": [
                    283,
                    397,
                    1479
                ],
                "self._download_retcode": [
                    1636,
                    1619,
                    284,
                    502
                ],
                "self._num_downloads": [
                    1355,
                    1340,
                    285,
                    550
                ],
                "self._screen_file": [
                    448,
                    455,
                    428,
                    462,
                    286
                ],
                "sys.stdout": [
                    1849,
                    286
                ],
                "sys": [
                    576,
                    287,
                    487,
                    489,
                    490,
                    1870,
                    497,
                    498,
                    500,
                    1849,
                    286,
                    1853,
                    318,
                    319
                ],
                "sys.stderr": [
                    286,
                    287
                ],
                "params.get": [
                    320,
                    328,
                    291,
                    286
                ],
                "self._err_file": [
                    514,
                    526,
                    303,
                    438,
                    287
                ],
                "self.params": [
                    512,
                    514,
                    526,
                    1553,
                    546,
                    1063,
                    1064,
                    563,
                    570,
                    1599,
                    1602,
                    1609,
                    590,
                    1616,
                    594,
                    600,
                    605,
                    608,
                    611,
                    617,
                    1658,
                    1678,
                    1697,
                    1187,
                    676,
                    704,
                    707,
                    1250,
                    1253,
                    1257,
                    746,
                    747,
                    1260,
                    752,
                    1287,
                    1289,
                    1294,
                    1295,
                    1299,
                    1302,
                    1303,
                    1309,
                    288,
                    804,
                    1840,
                    1338,
                    326,
                    1360,
                    1362,
                    339,
                    1364,
                    346,
                    1371,
                    1373,
                    1375,
                    1377,
                    1379,
                    1381,
                    1893,
                    1385,
                    1905,
                    1908,
                    1909,
                    1399,
                    1401,
                    1414,
                    1416,
                    1933,
                    1934,
                    1935,
                    1429,
                    1430,
                    417,
                    1956,
                    421,
                    422,
                    423,
                    1962,
                    1451,
                    1966,
                    433,
                    434,
                    1461,
                    1463,
                    441,
                    1981,
                    451,
                    1475,
                    1478,
                    1481,
                    458,
                    471,
                    485,
                    1518,
                    496,
                    509,
                    510
                ],
                "self.cache": [
                    289
                ],
                "Cache": [
                    289
                ],
                "master": [
                    294,
                    311
                ],
                "slave": [
                    302,
                    294
                ],
                "pty.openpty": [
                    294
                ],
                "pty": [
                    294
                ],
                "width": [
                    296,
                    299,
                    295
                ],
                "columns": [
                    295
                ],
                "compat_get_terminal_size": [
                    295
                ],
                "width_args": [
                    297,
                    306,
                    299,
                    310
                ],
                "sp_kwargs": [
                    306,
                    300,
                    310
                ],
                "subprocess.PIPE": [
                    301,
                    1862
                ],
                "subprocess": [
                    1860,
                    1862,
                    301,
                    305,
                    309
                ],
                "self._output_process": [
                    305,
                    309,
                    406,
                    407
                ],
                "subprocess.Popen": [
                    305,
                    1860,
                    309
                ],
                "self._output_channel": [
                    408,
                    311
                ],
                "os.fdopen": [
                    311
                ],
                "ose.errno": [
                    313
                ],
                "ose": [
                    313
                ],
                "self.report_warning": [
                    1664,
                    652,
                    1424,
                    1560,
                    1568,
                    1315,
                    1446,
                    1576,
                    1327,
                    1584,
                    1845,
                    314,
                    833,
                    322,
                    329,
                    1994,
                    1491,
                    1632,
                    360,
                    1899,
                    1520,
                    1404
                ],
                "sys.version_info": [
                    576,
                    318
                ],
                "sys.platform": [
                    576,
                    318
                ],
                "sys.getfilesystemencoding": [
                    1853,
                    319
                ],
                "self._setup_opener": [
                    333
                ],
                "auto_init": [
                    335
                ],
                "self.print_debug_header": [
                    336
                ],
                "self.add_default_info_extractors": [
                    337
                ],
                "pp_def_raw": [
                    339,
                    340,
                    341
                ],
                "self.params.get": [
                    512,
                    514,
                    526,
                    1553,
                    546,
                    1063,
                    563,
                    570,
                    1599,
                    1602,
                    1609,
                    590,
                    1616,
                    594,
                    600,
                    605,
                    608,
                    611,
                    617,
                    1658,
                    1678,
                    1697,
                    1187,
                    676,
                    704,
                    707,
                    1250,
                    1253,
                    1257,
                    746,
                    747,
                    1260,
                    752,
                    1287,
                    1289,
                    1294,
                    1295,
                    1299,
                    1302,
                    1303,
                    1309,
                    804,
                    1840,
                    1338,
                    1360,
                    1362,
                    339,
                    1364,
                    346,
                    1371,
                    1373,
                    1375,
                    1377,
                    1379,
                    1381,
                    1893,
                    1385,
                    1905,
                    1908,
                    1909,
                    1399,
                    1401,
                    1414,
                    1416,
                    1933,
                    1429,
                    1430,
                    417,
                    1956,
                    421,
                    423,
                    1962,
                    1451,
                    1966,
                    433,
                    1461,
                    1463,
                    441,
                    1981,
                    451,
                    1475,
                    1481,
                    458,
                    471,
                    485,
                    1518,
                    496,
                    509
                ],
                "pp_class": [
                    340,
                    343
                ],
                "get_postprocessor": [
                    340
                ],
                "pp_def": [
                    341,
                    342,
                    343
                ],
                "pp": [
                    1655,
                    392,
                    393,
                    1652,
                    343,
                    344
                ],
                "compat_kwargs": [
                    343
                ],
                "self.add_post_processor": [
                    344
                ],
                "ph": [
                    1479,
                    1480,
                    397,
                    346,
                    347
                ],
                "self.add_progress_hook": [
                    347
                ],
                "idxs": [
                    354,
                    357,
                    358,
                    351
                ],
                "i": [
                    352,
                    770,
                    771,
                    357,
                    358,
                    807,
                    808,
                    1223,
                    1224,
                    1226,
                    1211,
                    814,
                    1166,
                    1170,
                    1209,
                    795,
                    1214
                ],
                "a": [
                    352,
                    353,
                    357
                ],
                "argv": [
                    352,
                    357,
                    358
                ],
                "re.match": [
                    353,
                    1866
                ],
                "re": [
                    353,
                    897,
                    867,
                    872,
                    1866,
                    592,
                    596,
                    892
                ],
                "correct_argv": [
                    363,
                    355
                ],
                "args_to_str": [
                    363
                ],
                "self._ies.append": [
                    367
                ],
                "ie": [
                    387,
                    388,
                    647,
                    648,
                    651,
                    656,
                    665,
                    1436,
                    1443,
                    686,
                    689,
                    367,
                    368,
                    369,
                    377,
                    378,
                    379,
                    380,
                    381
                ],
                "ie.ie_key": [
                    368,
                    689
                ],
                "ie.set_downloader": [
                    369
                ],
                "self._ies_instances.get": [
                    377
                ],
                "ie_key": [
                    640,
                    642,
                    643,
                    377,
                    379,
                    639
                ],
                "get_info_extractor": [
                    379
                ],
                "self.add_info_extractor": [
                    388,
                    380
                ],
                "gen_extractors": [
                    387
                ],
                "self._pps.append": [
                    392
                ],
                "pp.set_downloader": [
                    393
                ],
                "self._progress_hooks.append": [
                    397
                ],
                "message": [
                    518,
                    401,
                    530,
                    915,
                    404,
                    405,
                    406,
                    918,
                    414,
                    422,
                    424,
                    426,
                    432,
                    434,
                    436,
                    437,
                    446,
                    448,
                    483,
                    484,
                    501,
                    510
                ],
                "compat_str": [
                    1891,
                    677,
                    1447,
                    491,
                    1995,
                    432,
                    562,
                    1843,
                    404,
                    1396,
                    1214,
                    671
                ],
                "line_count": [
                    409,
                    405
                ],
                "message.count": [
                    405
                ],
                "self._output_process.stdin.write": [
                    406
                ],
                "self._output_process.stdin": [
                    406,
                    407
                ],
                "encode": [
                    406
                ],
                "self._output_process.stdin.flush": [
                    407
                ],
                "res": [
                    408,
                    410,
                    1713,
                    1715,
                    1717,
                    1719,
                    1720,
                    1723,
                    1725,
                    1727,
                    1729,
                    1731,
                    1732,
                    1733,
                    1608,
                    1736,
                    1737,
                    1738,
                    1740,
                    1742,
                    1744,
                    1617,
                    1746,
                    1748,
                    1749,
                    1751,
                    1753,
                    1755,
                    1756,
                    1757,
                    1759,
                    1761,
                    1763,
                    1764,
                    1765,
                    1127,
                    1767,
                    1768,
                    1769,
                    1131,
                    1770,
                    1135,
                    1137
                ],
                "join": [
                    897,
                    930,
                    872,
                    490,
                    494,
                    1266,
                    1811,
                    1878,
                    408,
                    1626
                ],
                "decode": [
                    408,
                    577,
                    1896,
                    1894
                ],
                "self._output_channel.readline": [
                    408
                ],
                "_": [
                    928,
                    409,
                    937
                ],
                "self.to_stdout": [
                    1376,
                    1374,
                    1378,
                    708,
                    1380,
                    1382,
                    1482,
                    1361,
                    1617,
                    1363,
                    1367,
                    1370,
                    1372,
                    414
                ],
                "skip_eol": [
                    425,
                    414
                ],
                "write_string": [
                    1856,
                    417
                ],
                "s": [
                    992,
                    417,
                    982,
                    1946,
                    1947,
                    1950
                ],
                "out": [
                    417,
                    1864,
                    1865,
                    1866,
                    1867
                ],
                "debug": [
                    422
                ],
                "check_quiet": [
                    423
                ],
                "self._bidi_workaround": [
                    424,
                    436
                ],
                "terminator": [
                    425,
                    426
                ],
                "output": [
                    426,
                    428,
                    437,
                    438
                ],
                "self._write_string": [
                    448,
                    1858,
                    1891,
                    455,
                    1895,
                    1867,
                    428,
                    462,
                    1873,
                    438,
                    1885
                ],
                "error": [
                    434
                ],
                "ctypes.windll.kernel32.GetConsoleWindow": [
                    443
                ],
                "ctypes.windll.kernel32": [
                    443,
                    446
                ],
                "ctypes.windll": [
                    443,
                    446
                ],
                "ctypes": [
                    443,
                    446
                ],
                "ctypes.windll.kernel32.SetConsoleTitleW": [
                    446
                ],
                "ctypes.c_wchar_p": [
                    446
                ],
                "os.environ": [
                    460,
                    453,
                    447
                ],
                "self.save_console_title": [
                    465
                ],
                "self.restore_console_title": [
                    469
                ],
                "self.cookiejar.save": [
                    472
                ],
                "self.cookiejar": [
                    1920,
                    1912,
                    1141,
                    472,
                    1914,
                    1917
                ],
                "self.to_stderr": [
                    484,
                    519,
                    495
                ],
                "tb": [
                    486,
                    488,
                    490,
                    491,
                    494,
                    495,
                    531
                ],
                "sys.exc_info": [
                    487,
                    489,
                    490,
                    497,
                    498,
                    500
                ],
                "exc_info": [
                    489,
                    490,
                    497,
                    498,
                    500,
                    501
                ],
                "traceback.format_exception": [
                    490
                ],
                "traceback": [
                    490,
                    491,
                    493,
                    677
                ],
                "traceback.format_exc": [
                    491,
                    677
                ],
                "tb_data": [
                    493,
                    494
                ],
                "traceback.format_list": [
                    493
                ],
                "traceback.extract_stack": [
                    493
                ],
                "DownloadError": [
                    1629,
                    501
                ],
                "warning": [
                    510
                ],
                "self._err_file.isatty": [
                    514,
                    526
                ],
                "_msg_header": [
                    515,
                    517,
                    518,
                    527,
                    529,
                    530
                ],
                "warning_message": [
                    518,
                    519
                ],
                "error_message": [
                    530,
                    531
                ],
                "self.trouble": [
                    531
                ],
                "self.to_screen": [
                    1793,
                    1797,
                    775,
                    1799,
                    1417,
                    1420,
                    1805,
                    1807,
                    1809,
                    789,
                    536,
                    538,
                    800,
                    808,
                    1452,
                    1454,
                    823,
                    1464,
                    1466,
                    1982,
                    1985,
                    1991,
                    1352,
                    1613,
                    742,
                    1525,
                    1782,
                    1402,
                    1275,
                    1660,
                    1407
                ],
                "file_name": [
                    536
                ],
                "template_dict": [
                    545,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    565,
                    566,
                    568,
                    572,
                    543
                ],
                "info_dict": [
                    1537,
                    1538,
                    1541,
                    1557,
                    1561,
                    1565,
                    1566,
                    543,
                    1570,
                    1574,
                    1577,
                    1581,
                    1582,
                    1586,
                    1591,
                    1595,
                    586,
                    587,
                    589,
                    598,
                    603,
                    611,
                    613,
                    1129,
                    1641,
                    619,
                    1133,
                    1140,
                    629,
                    1145,
                    1147,
                    1149,
                    1152,
                    1154,
                    1155,
                    1157,
                    1669,
                    1159,
                    1671,
                    1161,
                    1672,
                    1675,
                    1682,
                    1172,
                    1173,
                    1175,
                    1176,
                    1178,
                    1182,
                    1183,
                    1188,
                    1189,
                    1190,
                    1700,
                    1192,
                    1193,
                    1194,
                    1197,
                    1199,
                    1201,
                    1238,
                    1244,
                    1249,
                    1251,
                    1254,
                    1261,
                    1773,
                    1784,
                    1275,
                    1787,
                    1277,
                    1789,
                    1281,
                    1282,
                    1794,
                    1798,
                    1336,
                    1343,
                    1344,
                    1345,
                    1347,
                    1348,
                    1350,
                    1357,
                    1361,
                    1363,
                    1365,
                    1366,
                    1370,
                    1371,
                    1372,
                    1373,
                    1374,
                    1377,
                    1378,
                    1380,
                    1382,
                    1400,
                    1403,
                    1409,
                    1415,
                    1422,
                    1432,
                    1435,
                    1436,
                    1444,
                    1963,
                    1967,
                    1462,
                    1468,
                    1983,
                    1473,
                    1986,
                    1992,
                    1485,
                    1515,
                    1517,
                    1519,
                    1523,
                    1530
                ],
                "time.time": [
                    545
                ],
                "time": [
                    545
                ],
                "autonumber_size": [
                    546,
                    547,
                    548,
                    549
                ],
                "autonumber_templ": [
                    549,
                    550
                ],
                "template_dict.get": [
                    551,
                    553,
                    554,
                    556,
                    558
                ],
                "sanitize": [
                    561,
                    565
                ],
                "sanitize_filename": [
                    561
                ],
                "v": [
                    1641,
                    1879,
                    562,
                    1880,
                    565,
                    566,
                    567,
                    728,
                    1881
                ],
                "k": [
                    1641,
                    1642,
                    564,
                    565,
                    566,
                    728
                ],
                "template_dict.items": [
                    566
                ],
                "collections.defaultdict": [
                    568
                ],
                "collections": [
                    568,
                    924
                ],
                "outtmpl": [
                    1601,
                    1603,
                    570,
                    571,
                    1599
                ],
                "sanitize_path": [
                    1392,
                    570
                ],
                "DEFAULT_OUTTMPL": [
                    570,
                    1260,
                    1599
                ],
                "tmpl": [
                    571,
                    572
                ],
                "compat_expanduser": [
                    571
                ],
                "filename": [
                    1541,
                    1415,
                    1450,
                    1462,
                    1591,
                    1979,
                    572,
                    577,
                    578,
                    1473,
                    1357,
                    1375,
                    1376,
                    1512,
                    1514,
                    1388,
                    1516,
                    1647,
                    1392,
                    1523,
                    1524,
                    1527,
                    1400
                ],
                "encodeFilename": [
                    1408,
                    577,
                    1416,
                    1451,
                    1421,
                    1455,
                    1392,
                    1524,
                    1463,
                    1401,
                    1981,
                    1662
                ],
                "preferredencoding": [
                    577,
                    580,
                    1958
                ],
                "self.report_error": [
                    1057,
                    1411,
                    580,
                    677,
                    1543,
                    682,
                    1611,
                    1548,
                    1657,
                    1426,
                    1458,
                    1396,
                    1593,
                    1470,
                    671
                ],
                "err": [
                    1952,
                    580,
                    1543,
                    1447,
                    1864,
                    1546,
                    1995,
                    1548,
                    1396,
                    1593
                ],
                "video_title": [
                    610,
                    612,
                    614,
                    586,
                    607
                ],
                "info_dict.get": [
                    1157,
                    1669,
                    1159,
                    1415,
                    1672,
                    1557,
                    1432,
                    1178,
                    1787,
                    1189,
                    1190,
                    1574,
                    1193,
                    1194,
                    1963,
                    1197,
                    1967,
                    1462,
                    1336,
                    586,
                    1485,
                    1365,
                    598,
                    1370,
                    1371,
                    603,
                    1373,
                    1377,
                    611,
                    1129,
                    1773,
                    1400,
                    1145,
                    1403,
                    1789
                ],
                "title": [
                    589,
                    592,
                    593,
                    596,
                    597
                ],
                "matchtitle": [
                    592,
                    593,
                    590,
                    591
                ],
                "re.search": [
                    592,
                    596
                ],
                "re.IGNORECASE": [
                    592,
                    596
                ],
                "rejecttitle": [
                    594,
                    595,
                    596,
                    597
                ],
                "date": [
                    601,
                    602,
                    598,
                    599
                ],
                "dateRange": [
                    600,
                    601,
                    602
                ],
                "DateRange": [
                    600
                ],
                "isoformat": [
                    602
                ],
                "date_from_str": [
                    602
                ],
                "view_count": [
                    609,
                    610,
                    603,
                    604,
                    606,
                    607
                ],
                "min_views": [
                    605,
                    606,
                    607
                ],
                "max_views": [
                    608,
                    609,
                    610
                ],
                "age_restricted": [
                    611
                ],
                "self.in_download_archive": [
                    613
                ],
                "incomplete": [
                    616
                ],
                "match_filter": [
                    617,
                    618,
                    619
                ],
                "ret": [
                    619,
                    620,
                    621
                ],
                "key": [
                    628,
                    629
                ],
                "value": [
                    1114,
                    628,
                    629,
                    1116
                ],
                "extra_info.items": [
                    628
                ],
                "extra_info": [
                    705,
                    738,
                    712,
                    720,
                    849,
                    628,
                    725,
                    667
                ],
                "info_dict.setdefault": [
                    1565,
                    1581,
                    629
                ],
                "force_generic_extractor": [
                    639
                ],
                "ies": [
                    643,
                    645,
                    647
                ],
                "self.get_info_extractor": [
                    643,
                    1436
                ],
                "ie.suitable": [
                    648
                ],
                "url": [
                    1824,
                    1825,
                    1828,
                    1605,
                    648,
                    1609,
                    682,
                    687,
                    656,
                    688,
                    665
                ],
                "ie.working": [
                    651
                ],
                "ie_result": [
                    777,
                    656,
                    657,
                    659,
                    661,
                    663,
                    791,
                    665,
                    667,
                    669,
                    802,
                    812,
                    685,
                    813,
                    815,
                    816,
                    817,
                    818,
                    701,
                    830,
                    831,
                    835,
                    708,
                    709,
                    712,
                    713,
                    841,
                    842,
                    843,
                    717,
                    844,
                    719,
                    848,
                    850,
                    724,
                    852,
                    728,
                    741,
                    765
                ],
                "ie.extract": [
                    656
                ],
                "self.add_default_extra_info": [
                    665
                ],
                "process": [
                    666
                ],
                "self.process_ie_result": [
                    737,
                    849,
                    826,
                    667,
                    1628
                ],
                "download": [
                    827,
                    738,
                    713,
                    718,
                    849,
                    1273,
                    667
                ],
                "ExtractorError": [
                    1445,
                    670,
                    1204,
                    1270,
                    1211,
                    1148,
                    1150
                ],
                "de": [
                    671
                ],
                "de.format_traceback": [
                    671
                ],
                "MaxDownloadsReached": [
                    673,
                    1612,
                    1341
                ],
                "e": [
                    1657,
                    677
                ],
                "self.add_extra_info": [
                    712,
                    685,
                    838
                ],
                "ie.IE_NAME": [
                    686
                ],
                "url_basename": [
                    688,
                    817,
                    843
                ],
                "result_type": [
                    832,
                    739,
                    711,
                    714,
                    721,
                    854,
                    701,
                    703
                ],
                "ie_result.get": [
                    835,
                    741,
                    812,
                    813,
                    719,
                    724,
                    701
                ],
                "extract_flat": [
                    704,
                    705,
                    706
                ],
                "json.dumps": [
                    1617,
                    708,
                    1382
                ],
                "json": [
                    1617,
                    1626,
                    708,
                    1382
                ],
                "self.process_video_result": [
                    713
                ],
                "self.extract_info": [
                    1608,
                    723,
                    717
                ],
                "info": [
                    1478,
                    1482,
                    1483,
                    1646,
                    1647,
                    723,
                    1655,
                    1626,
                    732,
                    1630,
                    1628
                ],
                "force_properties": [
                    730,
                    731,
                    733,
                    727
                ],
                "ie_result.items": [
                    728
                ],
                "f": [
                    1026,
                    1027,
                    1032,
                    1033,
                    907,
                    1038,
                    1039,
                    1811,
                    1045,
                    1047,
                    1053,
                    1533,
                    1319,
                    1321,
                    1323,
                    1326,
                    1329,
                    1330,
                    1089,
                    1366,
                    1367,
                    1624,
                    729,
                    986,
                    730,
                    731,
                    985,
                    1626,
                    995,
                    996,
                    1005,
                    1006,
                    1775,
                    1776,
                    1777,
                    1010,
                    1011,
                    1015,
                    1016,
                    1529,
                    1531,
                    1020,
                    1021
                ],
                "new_result": [
                    738,
                    732,
                    733,
                    735
                ],
                "info.copy": [
                    732
                ],
                "new_result.update": [
                    733
                ],
                "new_result.get": [
                    735
                ],
                "playlist": [
                    802,
                    741,
                    742,
                    777,
                    811,
                    791
                ],
                "playlist_results": [
                    744,
                    829,
                    830
                ],
                "playliststart": [
                    773,
                    746,
                    814,
                    787,
                    798
                ],
                "playlistend": [
                    773,
                    747,
                    749,
                    750,
                    787,
                    798
                ],
                "playlistitems_str": [
                    752,
                    754,
                    763
                ],
                "playlistitems": [
                    768,
                    795,
                    770,
                    779,
                    781,
                    753,
                    793,
                    763
                ],
                "string_segment": [
                    762,
                    756,
                    757,
                    758
                ],
                "format.split": [
                    756
                ],
                "start": [
                    928,
                    965,
                    937,
                    973,
                    917,
                    758,
                    759
                ],
                "end": [
                    758,
                    759
                ],
                "string_segment.split": [
                    758
                ],
                "item": [
                    760,
                    783,
                    781,
                    759
                ],
                "iter_playlistitems": [
                    763
                ],
                "ie_entries": [
                    770,
                    773,
                    778,
                    782,
                    798,
                    786,
                    794,
                    765,
                    766,
                    767
                ],
                "n_all_entries": [
                    777,
                    771,
                    767
                ],
                "entries": [
                    769,
                    773,
                    774,
                    805,
                    807,
                    780,
                    782,
                    786,
                    788,
                    795,
                    797,
                    799
                ],
                "n_entries": [
                    802,
                    774,
                    808,
                    777,
                    810,
                    788,
                    791,
                    799
                ],
                "PagedList": [
                    778
                ],
                "entries.extend": [
                    782
                ],
                "ie_entries.getslice": [
                    786,
                    782
                ],
                "entry_list": [
                    794,
                    795
                ],
                "itertools.islice": [
                    797
                ],
                "itertools": [
                    797,
                    1086
                ],
                "entry": [
                    826,
                    821,
                    807
                ],
                "extra": [
                    809,
                    828
                ],
                "reason": [
                    1350,
                    1351,
                    1352,
                    821,
                    822,
                    823
                ],
                "self._match_entry": [
                    821,
                    1350
                ],
                "entry_result": [
                    826,
                    829
                ],
                "playlist_results.append": [
                    829
                ],
                "r": [
                    849,
                    850,
                    847,
                    839
                ],
                "_fixup": [
                    849
                ],
                "OPERATORS": [
                    872,
                    859,
                    885
                ],
                "operator.lt": [
                    860
                ],
                "operator": [
                    864,
                    865,
                    889,
                    890,
                    860,
                    861,
                    862,
                    863
                ],
                "operator.le": [
                    861
                ],
                "operator.gt": [
                    862
                ],
                "operator.ge": [
                    863
                ],
                "operator.eq": [
                    864,
                    889
                ],
                "operator.ne": [
                    865,
                    890
                ],
                "operator_rex": [
                    873,
                    867
                ],
                "re.compile": [
                    867,
                    892
                ],
                "re.escape": [
                    872,
                    897
                ],
                "OPERATORS.keys": [
                    872
                ],
                "m": [
                    898,
                    899,
                    900,
                    901,
                    903,
                    873,
                    874,
                    907,
                    876,
                    909,
                    878,
                    880,
                    884,
                    885,
                    887
                ],
                "operator_rex.search": [
                    873
                ],
                "filter_spec": [
                    904,
                    873,
                    898,
                    884
                ],
                "comparison_value": [
                    900,
                    876,
                    878,
                    879,
                    880,
                    881,
                    910
                ],
                "m.group": [
                    900,
                    901,
                    907,
                    876,
                    909,
                    878,
                    880,
                    884,
                    885
                ],
                "parse_filesize": [
                    880,
                    878
                ],
                "op": [
                    910,
                    885,
                    901
                ],
                "STR_OPERATORS": [
                    888,
                    897,
                    901
                ],
                "str_operator_rex": [
                    898,
                    892
                ],
                "STR_OPERATORS.keys": [
                    897
                ],
                "str_operator_rex.search": [
                    898
                ],
                "actual_value": [
                    907,
                    908,
                    910
                ],
                "f.get": [
                    1027,
                    1033,
                    907,
                    1039,
                    1777,
                    1011,
                    1015,
                    1016,
                    1021,
                    1367
                ],
                "_filter": [
                    1092,
                    1093,
                    911
                ],
                "note": [
                    917
                ],
                "format_spec": [
                    1024,
                    1030,
                    1001,
                    1097,
                    1004,
                    1036,
                    1101,
                    1007,
                    1008,
                    1044,
                    917,
                    1045,
                    1047,
                    1018
                ],
                "PICKFIRST": [
                    920,
                    957,
                    991
                ],
                "MERGE": [
                    1051,
                    921,
                    971
                ],
                "SINGLE": [
                    960,
                    1000,
                    922,
                    942
                ],
                "GROUP": [
                    923,
                    989,
                    966
                ],
                "FormatSelector": [
                    960,
                    966,
                    971,
                    942,
                    924,
                    957
                ],
                "collections.namedtuple": [
                    924
                ],
                "filter_parts": [
                    930,
                    932,
                    927
                ],
                "string": [
                    928,
                    929,
                    963,
                    932,
                    967,
                    937,
                    973,
                    942,
                    944,
                    946,
                    950,
                    953,
                    958
                ],
                "tokens": [
                    928,
                    961,
                    1123,
                    966,
                    937,
                    969,
                    1099,
                    1105,
                    948,
                    955
                ],
                "tokenize.OP": [
                    929,
                    943
                ],
                "tokenize": [
                    929,
                    939,
                    1100,
                    941,
                    974,
                    943
                ],
                "filter_parts.append": [
                    932
                ],
                "selectors": [
                    935,
                    971,
                    977,
                    978,
                    951,
                    957
                ],
                "current_selector": [
                    960,
                    962,
                    964,
                    966,
                    936,
                    968,
                    970,
                    942,
                    976,
                    977,
                    951,
                    952,
                    954,
                    956,
                    959
                ],
                "tokenize.NAME": [
                    941
                ],
                "tokenize.NUMBER": [
                    941
                ],
                "endwith": [
                    944
                ],
                "tokens.restore_last_token": [
                    948
                ],
                "selectors.append": [
                    977,
                    971,
                    957,
                    951
                ],
                "first_choice": [
                    954,
                    957
                ],
                "second_choice": [
                    955,
                    957
                ],
                "_parse_format_selection": [
                    969,
                    955,
                    966,
                    1123
                ],
                "format_filter": [
                    961,
                    962
                ],
                "_parse_filter": [
                    961
                ],
                "current_selector.filters.append": [
                    962
                ],
                "current_selector.filters": [
                    962
                ],
                "syntax_error": [
                    973,
                    1101,
                    965
                ],
                "video_selector": [
                    968,
                    1082,
                    971,
                    1086
                ],
                "audio_selector": [
                    969,
                    1082,
                    971,
                    1086
                ],
                "tokenize.ENDMARKER": [
                    974
                ],
                "selector": [
                    992,
                    1089,
                    1000,
                    1001,
                    981,
                    982,
                    1082,
                    1051,
                    989,
                    990,
                    991
                ],
                "fs": [
                    992,
                    985,
                    995,
                    982
                ],
                "_build_selector_function": [
                    992,
                    1124,
                    982,
                    1082,
                    990
                ],
                "formats": [
                    1026,
                    1032,
                    1038,
                    1811,
                    1812,
                    1048,
                    1313,
                    1314,
                    1319,
                    1321,
                    1326,
                    1199,
                    1201,
                    1203,
                    1209,
                    1085,
                    1086,
                    1093,
                    1094,
                    1226,
                    986,
                    1498,
                    1244,
                    1249,
                    996,
                    1005,
                    1773,
                    1776,
                    1010,
                    1778,
                    1268,
                    1015,
                    1016,
                    1017,
                    1020
                ],
                "selector_function": [
                    1094,
                    988,
                    990
                ],
                "selector.type": [
                    1000,
                    1051,
                    989,
                    991
                ],
                "selector.selector": [
                    992,
                    1001,
                    1082,
                    990
                ],
                "picked_formats": [
                    996,
                    997,
                    998
                ],
                "format_idx": [
                    1008,
                    1017,
                    1013
                ],
                "audiovideo_formats": [
                    1009,
                    1012,
                    1013
                ],
                "audio_formats": [
                    1025,
                    1028,
                    1029,
                    1019,
                    1022,
                    1023
                ],
                "video_formats": [
                    1031,
                    1034,
                    1035,
                    1037,
                    1040,
                    1041
                ],
                "extensions": [
                    1043,
                    1044
                ],
                "filter_f": [
                    1048,
                    1045,
                    1047
                ],
                "matches": [
                    1321,
                    1322,
                    1323,
                    1048,
                    1049,
                    1050
                ],
                "format_1": [
                    1059,
                    1053
                ],
                "format_2": [
                    1059,
                    1053
                ],
                "formats_info": [
                    1056,
                    1062,
                    1066,
                    1067,
                    1068,
                    1069,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079,
                    1053
                ],
                "get": [
                    1056,
                    1067,
                    1068,
                    1069,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079
                ],
                "output_ext": [
                    1080,
                    1061
                ],
                "pair": [
                    1086,
                    1087
                ],
                "itertools.product": [
                    1086
                ],
                "_merge": [
                    1087
                ],
                "filters": [
                    1089,
                    1092
                ],
                "self._build_format_filter": [
                    1089
                ],
                "selector.filters": [
                    1089
                ],
                "final_selector": [
                    1095
                ],
                "stream": [
                    1097,
                    1099
                ],
                "io.BytesIO": [
                    1097
                ],
                "io": [
                    1408,
                    1097,
                    1421,
                    1455
                ],
                "format_spec.encode": [
                    1097
                ],
                "compat_tokenize_tokenize": [
                    1099
                ],
                "stream.readline": [
                    1099
                ],
                "tokenize.TokenError": [
                    1100
                ],
                "self.tokens": [
                    1112,
                    1105,
                    1114
                ],
                "self.counter": [
                    1121,
                    1106,
                    1112,
                    1114,
                    1115
                ],
                "__next__": [
                    1118
                ],
                "parsed_selector": [
                    1123,
                    1124
                ],
                "TokenIterator": [
                    1123
                ],
                "std_headers.copy": [
                    1127
                ],
                "std_headers": [
                    1127
                ],
                "add_headers": [
                    1129,
                    1130,
                    1131
                ],
                "res.update": [
                    1131
                ],
                "cookies": [
                    1133,
                    1134,
                    1135
                ],
                "self._calc_cookies": [
                    1133
                ],
                "pr": [
                    1140,
                    1141,
                    1142
                ],
                "compat_urllib_request.Request": [
                    1832,
                    1140
                ],
                "compat_urllib_request": [
                    1927,
                    1832,
                    1936,
                    1140,
                    1919
                ],
                "self.cookiejar.add_cookie_header": [
                    1141
                ],
                "pr.get_header": [
                    1142
                ],
                "thumbnails": [
                    1157,
                    1158,
                    1161,
                    1162,
                    1163,
                    1801,
                    1166,
                    1172,
                    1173,
                    1963,
                    1964,
                    1965,
                    1967,
                    1971,
                    1975,
                    1977,
                    1978,
                    1787,
                    1788,
                    1791
                ],
                "thumbnail": [
                    1160,
                    1161,
                    1159
                ],
                "thumbnails.sort": [
                    1163
                ],
                "t.get": [
                    1169,
                    1164,
                    1165,
                    1801
                ],
                "t": [
                    1988,
                    1801,
                    1995,
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1170,
                    1975,
                    1976,
                    1977,
                    1978,
                    1979
                ],
                "upload_date": [
                    1182,
                    1183
                ],
                "datetime.datetime.utcfromtimestamp": [
                    1182
                ],
                "datetime.datetime": [
                    1182
                ],
                "datetime": [
                    1182
                ],
                "upload_date.strftime": [
                    1183
                ],
                "self.list_subtitles": [
                    1189,
                    1190
                ],
                "self.process_subtitles": [
                    1192
                ],
                "formats_dict": [
                    1216,
                    1217,
                    1218,
                    1221,
                    1206
                ],
                "format.get": [
                    1707,
                    1227,
                    1709,
                    1231,
                    1711,
                    1712,
                    1716,
                    1213
                ],
                "format_id": [
                    1216,
                    1217,
                    1218,
                    1221,
                    1224,
                    1215
                ],
                "append": [
                    1582,
                    1218,
                    1566
                ],
                "ambiguous_formats": [
                    1221,
                    1222,
                    1223
                ],
                "formats_dict.items": [
                    1221
                ],
                "self.format_resolution": [
                    1230,
                    1775
                ],
                "lower": [
                    1235
                ],
                "determine_ext": [
                    1976,
                    1235
                ],
                "full_format_info": [
                    1240,
                    1238,
                    1239
                ],
                "info_dict.copy": [
                    1238
                ],
                "full_format_info.update": [
                    1239
                ],
                "self._calc_headers": [
                    1240
                ],
                "self.list_formats": [
                    1251
                ],
                "self.list_thumbnails": [
                    1254
                ],
                "req_format": [
                    1257,
                    1258,
                    1267,
                    1266
                ],
                "req_format_list": [
                    1264,
                    1265,
                    1266,
                    1259
                ],
                "merger": [
                    1262,
                    1263,
                    1488,
                    1489,
                    1495
                ],
                "FFmpegMergerPP": [
                    1488,
                    1262
                ],
                "merger.available": [
                    1489,
                    1263
                ],
                "merger.can_merge": [
                    1263
                ],
                "req_format_list.append": [
                    1264,
                    1265
                ],
                "format_selector": [
                    1267,
                    1268
                ],
                "self.build_format_selector": [
                    1267
                ],
                "formats_to_download": [
                    1281,
                    1268,
                    1269,
                    1274,
                    1275,
                    1276
                ],
                "new_info": [
                    1533,
                    1535,
                    1530,
                    1531,
                    1532,
                    1277,
                    1278,
                    1279
                ],
                "new_info.update": [
                    1531,
                    1278
                ],
                "self.process_info": [
                    1279
                ],
                "info_dict.update": [
                    1281
                ],
                "available_subs": [
                    1313,
                    1286,
                    1288,
                    1291,
                    1292,
                    1296,
                    1300,
                    1304,
                    1307
                ],
                "normal_subtitles": [
                    1288,
                    1287
                ],
                "available_subs.update": [
                    1288
                ],
                "automatic_captions": [
                    1289,
                    1290
                ],
                "lang": [
                    1312,
                    1313,
                    1315,
                    1290,
                    1291,
                    1292,
                    1329,
                    1330,
                    1811,
                    1812
                ],
                "cap_info": [
                    1290,
                    1292
                ],
                "automatic_captions.items": [
                    1290
                ],
                "requested_langs": [
                    1312,
                    1300,
                    1303,
                    1305,
                    1307
                ],
                "available_subs.keys": [
                    1307,
                    1300
                ],
                "formats_query": [
                    1329,
                    1309,
                    1310
                ],
                "formats_preference": [
                    1317,
                    1310
                ],
                "formats_query.split": [
                    1310
                ],
                "subs": [
                    1330,
                    1331,
                    1311
                ],
                "available_subs.get": [
                    1313
                ],
                "video_id": [
                    1808,
                    1315,
                    1805
                ],
                "ext": [
                    1321,
                    1317,
                    1318
                ],
                "max_downloads": [
                    1338,
                    1339,
                    1340
                ],
                "self.prepare_filename": [
                    1532,
                    1357
                ],
                "formatSeconds": [
                    1378
                ],
                "dn": [
                    1392,
                    1393,
                    1394
                ],
                "os.path.dirname": [
                    1392,
                    1863
                ],
                "os.path": [
                    1863,
                    1416,
                    1512,
                    1514,
                    1451,
                    1392,
                    1393,
                    1524,
                    1463,
                    1401,
                    1979,
                    1981
                ],
                "os.path.exists": [
                    1416,
                    1451,
                    1393,
                    1524,
                    1463,
                    1401,
                    1981
                ],
                "os.makedirs": [
                    1394
                ],
                "descfn": [
                    1408,
                    1411,
                    1400,
                    1401,
                    1407
                ],
                "replace_extension": [
                    1400,
                    1462,
                    1415
                ],
                "io.open": [
                    1408,
                    1421,
                    1455
                ],
                "descfile": [
                    1408,
                    1409
                ],
                "descfile.write": [
                    1409
                ],
                "annofn": [
                    1415,
                    1416,
                    1420,
                    1421,
                    1426
                ],
                "annofile": [
                    1421,
                    1422
                ],
                "annofile.write": [
                    1422
                ],
                "subtitles_are_requested": [
                    1432,
                    1429
                ],
                "subtitles": [
                    1812,
                    1435,
                    1804,
                    1437
                ],
                "sub_lang": [
                    1450,
                    1452,
                    1437,
                    1447
                ],
                "sub_info": [
                    1440,
                    1444,
                    1437,
                    1438,
                    1439
                ],
                "subtitles.items": [
                    1812,
                    1437
                ],
                "sub_format": [
                    1450,
                    1452,
                    1438
                ],
                "sub_info.get": [
                    1439
                ],
                "sub_data": [
                    1440,
                    1443,
                    1456
                ],
                "ie._download_webpage": [
                    1443
                ],
                "err.cause": [
                    1447
                ],
                "sub_filename": [
                    1450,
                    1451,
                    1454,
                    1455,
                    1458
                ],
                "subtitles_filename": [
                    1450
                ],
                "subfile": [
                    1456,
                    1455
                ],
                "subfile.write": [
                    1456
                ],
                "infofn": [
                    1462,
                    1463,
                    1466,
                    1468,
                    1470
                ],
                "write_json_file": [
                    1468
                ],
                "self.filter_requested_info": [
                    1626,
                    1468
                ],
                "self._write_thumbnails": [
                    1473
                ],
                "fd": [
                    1480,
                    1483,
                    1478
                ],
                "get_suitable_downloader": [
                    1478
                ],
                "fd.add_progress_hook": [
                    1480
                ],
                "info.get": [
                    1482,
                    1630
                ],
                "fd.download": [
                    1483
                ],
                "name": [
                    1808,
                    1483,
                    1805
                ],
                "downloaded": [
                    1534,
                    1538,
                    1486
                ],
                "success": [
                    1536,
                    1551,
                    1541,
                    1487
                ],
                "postprocessors": [
                    1537,
                    1490,
                    1495
                ],
                "video": [
                    1498,
                    1500
                ],
                "audio": [
                    1498,
                    1500
                ],
                "video_ext": [
                    1507,
                    1500,
                    1501
                ],
                "audio_ext": [
                    1507,
                    1500,
                    1501
                ],
                "audio.get": [
                    1500
                ],
                "video.get": [
                    1500
                ],
                "COMPATIBLE_EXTS": [
                    1506,
                    1502
                ],
                "exts": [
                    1506,
                    1507
                ],
                "filename_real_ext": [
                    1512,
                    1515
                ],
                "os.path.splitext": [
                    1512,
                    1514,
                    1979
                ],
                "filename_wo_ext": [
                    1513,
                    1523
                ],
                "requested_formats": [
                    1529,
                    1517,
                    1518
                ],
                "compatible_formats": [
                    1518
                ],
                "fname": [
                    1532,
                    1533,
                    1534,
                    1535
                ],
                "prepend_extension": [
                    1533
                ],
                "downloaded.append": [
                    1534
                ],
                "partial_success": [
                    1536,
                    1535
                ],
                "dl": [
                    1541,
                    1535
                ],
                "compat_urllib_error.URLError": [
                    1993,
                    1542
                ],
                "compat_urllib_error": [
                    1993,
                    1542
                ],
                "compat_http_client.HTTPException": [
                    1993,
                    1542
                ],
                "compat_http_client": [
                    1993,
                    1542
                ],
                "socket.error": [
                    1993,
                    1542
                ],
                "socket": [
                    1993,
                    1542
                ],
                "UnavailableVideoError": [
                    1546,
                    1610
                ],
                "ContentTooShortError": [
                    1547
                ],
                "err.expected": [
                    1548
                ],
                "err.downloaded": [
                    1548
                ],
                "fixup_policy": [
                    1572,
                    1575,
                    1578,
                    1553,
                    1554,
                    1555,
                    1588,
                    1559,
                    1562
                ],
                "stretched_ratio": [
                    1561,
                    1570,
                    1557,
                    1558
                ],
                "stretched_pp": [
                    1563,
                    1564,
                    1566
                ],
                "FFmpegFixupStretchedPP": [
                    1563
                ],
                "stretched_pp.available": [
                    1564
                ],
                "fixup_pp": [
                    1579,
                    1580,
                    1582
                ],
                "FFmpegFixupM4aPP": [
                    1579
                ],
                "fixup_pp.available": [
                    1580
                ],
                "self.post_process": [
                    1591
                ],
                "PostProcessingError": [
                    1592,
                    1656
                ],
                "self.record_download_archive": [
                    1595
                ],
                "url_list": [
                    1600,
                    1605
                ],
                "SameFileError": [
                    1603
                ],
                "contextlib.closing": [
                    1622
                ],
                "contextlib": [
                    1622
                ],
                "fileinput.FileInput": [
                    1622
                ],
                "fileinput": [
                    1624,
                    1622
                ],
                "info_filename": [
                    1623
                ],
                "fileinput.hook_encoded": [
                    1624
                ],
                "json.loads": [
                    1626
                ],
                "webpage_url": [
                    1632,
                    1633,
                    1630,
                    1631
                ],
                "self.download": [
                    1633
                ],
                "info_dict.items": [
                    1641
                ],
                "ie_info": [
                    1649,
                    1650,
                    1646
                ],
                "pps_chain": [
                    1648,
                    1650,
                    1651,
                    1652
                ],
                "ie_info.get": [
                    1649
                ],
                "pps_chain.extend": [
                    1650,
                    1651
                ],
                "files_to_delete": [
                    1658,
                    1659,
                    1653,
                    1655
                ],
                "pp.run": [
                    1655
                ],
                "e.msg": [
                    1657
                ],
                "old_filename": [
                    1659,
                    1660,
                    1662
                ],
                "os.remove": [
                    1662
                ],
                "extractor": [
                    1669,
                    1670,
                    1672,
                    1673,
                    1675
                ],
                "extractor.lower": [
                    1675
                ],
                "fn": [
                    1697,
                    1698,
                    1702,
                    1678,
                    1679,
                    1687
                ],
                "vid_id": [
                    1700,
                    1701,
                    1703,
                    1682,
                    1683,
                    1689
                ],
                "self._make_archive_id": [
                    1682,
                    1700
                ],
                "locked_file": [
                    1702,
                    1687
                ],
                "archive_file": [
                    1688,
                    1703,
                    1702,
                    1687
                ],
                "line": [
                    1688,
                    1689
                ],
                "line.strip": [
                    1689
                ],
                "ioe.errno": [
                    1692
                ],
                "ioe": [
                    1692
                ],
                "errno.ENOENT": [
                    1692
                ],
                "errno": [
                    1692
                ],
                "archive_file.write": [
                    1703
                ],
                "default": [
                    1719
                ],
                "fdict.get": [
                    1728,
                    1760,
                    1730,
                    1762,
                    1734,
                    1735,
                    1766,
                    1739,
                    1741,
                    1758,
                    1743,
                    1745,
                    1747,
                    1754,
                    1724,
                    1726
                ],
                "fdict": [
                    1724,
                    1726,
                    1727,
                    1728,
                    1729,
                    1730,
                    1733,
                    1734,
                    1735,
                    1738,
                    1739,
                    1741,
                    1743,
                    1744,
                    1745,
                    1746,
                    1747,
                    1750,
                    1753,
                    1754,
                    1758,
                    1759,
                    1760,
                    1761,
                    1762,
                    1765,
                    1766,
                    1769
                ],
                "format_bytes": [
                    1769,
                    1765
                ],
                "table": [
                    1784,
                    1779,
                    1774
                ],
                "self._format_note": [
                    1775
                ],
                "header_line": [
                    1784,
                    1781
                ],
                "render_table": [
                    1784,
                    1809,
                    1799
                ],
                "tn_url": [
                    1789,
                    1790,
                    1791
                ],
                "req_is_string": [
                    1824,
                    1829,
                    1823
                ],
                "req": [
                    1824,
                    1830,
                    1832,
                    1833,
                    1834,
                    1835,
                    1837,
                    1823
                ],
                "compat_basestring": [
                    1823
                ],
                "req.get_full_url": [
                    1824
                ],
                "url_escaped": [
                    1825,
                    1834,
                    1828,
                    1830
                ],
                "escape_url": [
                    1825
                ],
                "req_type": [
                    1832,
                    1833
                ],
                "req.get_method": [
                    1832
                ],
                "HEADRequest": [
                    1832
                ],
                "req.data": [
                    1834
                ],
                "req.headers": [
                    1834
                ],
                "req.origin_req_host": [
                    1835
                ],
                "req.unverifiable": [
                    1835
                ],
                "self._opener.open": [
                    1837
                ],
                "self._opener": [
                    1888,
                    1837,
                    1943
                ],
                "self._socket_timeout": [
                    1906,
                    1837
                ],
                "stdout_encoding": [
                    1848,
                    1854
                ],
                "encoding_str": [
                    1856,
                    1850
                ],
                "locale.getpreferredencoding": [
                    1852
                ],
                "locale": [
                    1852
                ],
                "self.get_encoding": [
                    1950,
                    1855
                ],
                "__version__": [
                    1858,
                    1898
                ],
                "sp": [
                    1864,
                    1860
                ],
                "os.path.abspath": [
                    1863
                ],
                "__file__": [
                    1863
                ],
                "sp.communicate": [
                    1864
                ],
                "strip": [
                    1865
                ],
                "out.decode": [
                    1865
                ],
                "sys.exc_clear": [
                    1870
                ],
                "platform.python_version": [
                    1874
                ],
                "platform": [
                    1874
                ],
                "platform_name": [
                    1874
                ],
                "exe_versions": [
                    1880,
                    1876,
                    1877
                ],
                "FFmpegPostProcessor.get_versions": [
                    1876
                ],
                "FFmpegPostProcessor": [
                    1876
                ],
                "rtmpdump_version": [
                    1877
                ],
                "exe_str": [
                    1883,
                    1884,
                    1885,
                    1878
                ],
                "exe": [
                    1880,
                    1879
                ],
                "exe_versions.items": [
                    1880
                ],
                "proxy_map": [
                    1890,
                    1891,
                    1887
                ],
                "handler": [
                    1888,
                    1889,
                    1890
                ],
                "self._opener.handlers": [
                    1888
                ],
                "proxy_map.update": [
                    1890
                ],
                "handler.proxies": [
                    1890
                ],
                "ipaddr": [
                    1894,
                    1895
                ],
                "read": [
                    1896,
                    1894
                ],
                "self.urlopen": [
                    1896,
                    1988,
                    1894
                ],
                "latest_version": [
                    1896,
                    1898,
                    1902
                ],
                "version_tuple": [
                    1898
                ],
                "timeout_val": [
                    1905,
                    1906
                ],
                "opts_cookiefile": [
                    1916,
                    1915,
                    1908,
                    1911
                ],
                "opts_proxy": [
                    1921,
                    1922,
                    1909,
                    1925
                ],
                "compat_cookiejar.CookieJar": [
                    1912
                ],
                "compat_cookiejar": [
                    1912,
                    1914
                ],
                "compat_cookiejar.MozillaCookieJar": [
                    1914
                ],
                "os.access": [
                    1916
                ],
                "os.R_OK": [
                    1916
                ],
                "self.cookiejar.load": [
                    1917
                ],
                "cookie_processor": [
                    1937,
                    1919
                ],
                "compat_urllib_request.HTTPCookieProcessor": [
                    1919
                ],
                "proxies": [
                    1923,
                    1925,
                    1927,
                    1929,
                    1930,
                    1931
                ],
                "compat_urllib_request.getproxies": [
                    1927
                ],
                "proxy_handler": [
                    1937,
                    1931
                ],
                "PerRequestProxyHandler": [
                    1931
                ],
                "debuglevel": [
                    1933,
                    1934,
                    1935
                ],
                "https_handler": [
                    1937,
                    1934
                ],
                "make_HTTPS_handler": [
                    1934
                ],
                "ydlh": [
                    1937,
                    1935
                ],
                "YoutubeDLHandler": [
                    1935
                ],
                "opener": [
                    1936,
                    1942,
                    1943
                ],
                "compat_urllib_request.build_opener": [
                    1936
                ],
                "opener.addheaders": [
                    1942
                ],
                "s.encode": [
                    1950
                ],
                "err.reason": [
                    1952
                ],
                "encoding": [
                    1956,
                    1957,
                    1958,
                    1959
                ],
                "thumb_ext": [
                    1976,
                    1979
                ],
                "suffix": [
                    1977,
                    1979
                ],
                "thumb_display_id": [
                    1992,
                    1986,
                    1978,
                    1983
                ],
                "thumb_filename": [
                    1989,
                    1979,
                    1981,
                    1992
                ],
                "uf": [
                    1988,
                    1990
                ],
                "thumbf": [
                    1989,
                    1990
                ],
                "shutil.copyfileobj": [
                    1990
                ],
                "shutil": [
                    1990
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/youtube-dl_9/test/test_YoutubeDL.py",
                "test_function": "test_youtube_format_selection",
                "test_function_code": "    def test_youtube_format_selection(self):\n        order = [\n            '38', '37', '46', '22', '45', '35', '44', '18', '34', '43', '6', '5', '36', '17', '13',\n            # Apple HTTP Live Streaming\n            '96', '95', '94', '93', '92', '132', '151',\n            # 3D\n            '85', '84', '102', '83', '101', '82', '100',\n            # Dash video\n            '137', '248', '136', '247', '135', '246',\n            '245', '244', '134', '243', '133', '242', '160',\n            # Dash audio\n            '141', '172', '140', '171', '139',\n        ]\n\n        def format_info(f_id):\n            info = YoutubeIE._formats[f_id].copy()\n            info['format_id'] = f_id\n            info['url'] = 'url:' + f_id\n            return info\n        formats_order = [format_info(f_id) for f_id in order]\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '137+141')\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo[height>=999999]+bestaudio/best'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '38')\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=mp4],bestvideo[ext=webm])+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['137+141', '248+141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=mp4],bestvideo[ext=webm])[height<=720]+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['136+141', '247+141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=none]/bestvideo[ext=webm])+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['248+141'])\n\n        for f1, f2 in zip(formats_order, formats_order[1:]):\n            info_dict = _make_result([f1, f2], extractor='youtube')\n            ydl = YDL({'format': 'best/bestvideo'})\n            yie = YoutubeIE(ydl)\n            yie._sort_formats(info_dict['formats'])\n            ydl.process_ie_result(info_dict)\n            downloaded = ydl.downloaded_info_dicts[0]\n            self.assertEqual(downloaded['format_id'], f1['format_id'])\n\n            info_dict = _make_result([f2, f1], extractor='youtube')\n            ydl = YDL({'format': 'best/bestvideo'})\n            yie = YoutubeIE(ydl)\n            yie._sort_formats(info_dict['formats'])\n            ydl.process_ie_result(info_dict)\n            downloaded = ydl.downloaded_info_dicts[0]\n            self.assertEqual(downloaded['format_id'], f1['format_id'])",
                "test_error": "youtube_dl.utils.ExtractorError: requested format not available",
                "full_test_error": "self = <test.test_YoutubeDL.TestFormatSelection testMethod=test_youtube_format_selection>\n\n    def test_youtube_format_selection(self):\n        order = [\n            '38', '37', '46', '22', '45', '35', '44', '18', '34', '43', '6', '5', '36', '17', '13',\n            # Apple HTTP Live Streaming\n            '96', '95', '94', '93', '92', '132', '151',\n            # 3D\n            '85', '84', '102', '83', '101', '82', '100',\n            # Dash video\n            '137', '248', '136', '247', '135', '246',\n            '245', '244', '134', '243', '133', '242', '160',\n            # Dash audio\n            '141', '172', '140', '171', '139',\n        ]\n    \n        def format_info(f_id):\n            info = YoutubeIE._formats[f_id].copy()\n            info['format_id'] = f_id\n            info['url'] = 'url:' + f_id\n            return info\n        formats_order = [format_info(f_id) for f_id in order]\n    \n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '137+141')\n        self.assertEqual(downloaded['ext'], 'mp4')\n    \n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo[height>=999999]+bestaudio/best'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n>       ydl.process_ie_result(info_dict)\n\ntest/test_YoutubeDL.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nyoutube_dl/YoutubeDL.py:713: in process_ie_result\n    return self.process_video_result(ie_result, download=download)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test.test_YoutubeDL.YDL object at 0x7fb7de608150>\ninfo_dict = {'display_id': 'testid', 'extractor': 'youtube', 'formats': [{'abr': 48, 'acodec': 'aac', 'container': 'm4a_dash', 'ex...codec': 'none', 'ext': 'mp4', 'format': '160 - 144p (DASH video)', 'format_id': '160', ...}, ...], 'id': 'testid', ...}\ndownload = True\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n    \n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n    \n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n    \n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference'), t.get('width'), t.get('height'),\n                t.get('id'), t.get('url')))\n            for i, t in enumerate(thumbnails):\n                if 'width' in t and 'height' in t:\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n    \n        if thumbnails and 'thumbnail' not in info_dict:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n    \n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n    \n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n    \n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n            self.list_subtitles(info_dict['id'], info_dict.get('subtitles'), 'subtitles')\n            return\n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], info_dict.get('subtitles'),\n            info_dict.get('automatic_captions'))\n    \n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n    \n        if not formats:\n            raise ExtractorError('No video formats found!')\n    \n        formats_dict = {}\n    \n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            if 'url' not in format:\n                raise ExtractorError('Missing \"url\" key in result (index %d)' % i)\n    \n            if format.get('format_id') is None:\n                format['format_id'] = compat_str(i)\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n    \n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n    \n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if 'ext' not in format:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n    \n        # TODO Central sorting goes here\n    \n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # wich can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n    \n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format_list = []\n            if (self.params.get('outtmpl', DEFAULT_OUTTMPL) != '-' and\n                    info_dict['extractor'] in ['youtube', 'ted']):\n                merger = FFmpegMergerPP(self)\n                if merger.available and merger.can_merge():\n                    req_format_list.append('bestvideo+bestaudio')\n            req_format_list.append('best')\n            req_format = '/'.join(req_format_list)\n        format_selector = self.build_format_selector(req_format)\n        formats_to_download = list(format_selector(formats))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n>                                expected=True)\nE           youtube_dl.utils.ExtractorError: requested format not available\n\nyoutube_dl/YoutubeDL.py:1271: ExtractorError",
                "traceback": "youtube_dl/YoutubeDL.py:713: in process_ie_result\n    return self.process_video_result(ie_result, download=download)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test.test_YoutubeDL.YDL object at 0x7fb7de608150>\ninfo_dict = {'display_id': 'testid', 'extractor': 'youtube', 'formats': [{'abr': 48, 'acodec': 'aac', 'container': 'm4a_dash', 'ex...codec': 'none', 'ext': 'mp4', 'format': '160 - 144p (DASH video)', 'format_id': '160', ...}, ...], 'id': 'testid', ...}\ndownload = True\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n    \n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n    \n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n    \n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference'), t.get('width'), t.get('height'),\n                t.get('id'), t.get('url')))\n            for i, t in enumerate(thumbnails):\n                if 'width' in t and 'height' in t:\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n    \n        if thumbnails and 'thumbnail' not in info_dict:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n    \n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n    \n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n    \n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n            self.list_subtitles(info_dict['id'], info_dict.get('subtitles'), 'subtitles')\n            return\n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], info_dict.get('subtitles'),\n            info_dict.get('automatic_captions'))\n    \n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n    \n        if not formats:\n            raise ExtractorError('No video formats found!')\n    \n        formats_dict = {}\n    \n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            if 'url' not in format:\n                raise ExtractorError('Missing \"url\" key in result (index %d)' % i)\n    \n            if format.get('format_id') is None:\n                format['format_id'] = compat_str(i)\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n    \n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n    \n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if 'ext' not in format:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n    \n        # TODO Central sorting goes here\n    \n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # wich can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n    \n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format_list = []\n            if (self.params.get('outtmpl', DEFAULT_OUTTMPL) != '-' and\n                    info_dict['extractor'] in ['youtube', 'ted']):\n                merger = FFmpegMergerPP(self)\n                if merger.available and merger.can_merge():\n                    req_format_list.append('bestvideo+bestaudio')\n            req_format_list.append('best')\n            req_format = '/'.join(req_format_list)\n        format_selector = self.build_format_selector(req_format)\n        formats_to_download = list(format_selector(formats))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n>                                expected=True)\nE           youtube_dl.utils.ExtractorError: requested format not available\n\nyoutube_dl/YoutubeDL.py:1271: ExtractorError",
                "test_function_decorators": []
            }
        ]
    }
}