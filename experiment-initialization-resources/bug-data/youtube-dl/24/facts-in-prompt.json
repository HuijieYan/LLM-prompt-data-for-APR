{
    "1": "    def _match_one(filter_part, dct):\n        COMPARISON_OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>[a-z_]+)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?:\n                (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n                (?P<strval>(?![0-9.])[a-z0-9A-Z]*)\n            )\n            \\s*$\n            ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n        m = operator_rex.search(filter_part)\n        if m:\n            op = COMPARISON_OPERATORS[m.group('op')]\n            if m.group('strval') is not None:\n                if m.group('op') not in ('=', '!='):\n                    raise ValueError(\n                        'Operator %s does not support string values!' % m.group('op'))\n                comparison_value = m.group('strval')\n            else:\n                try:\n                    comparison_value = int(m.group('intval'))\n                except ValueError:\n                    comparison_value = parse_filesize(m.group('intval'))\n                    if comparison_value is None:\n                        comparison_value = parse_filesize(m.group('intval') + 'B')\n                    if comparison_value is None:\n                        raise ValueError(\n                            'Invalid integer value %r in filter part %r' % (\n                                m.group('intval'), filter_part))\n            actual_value = dct.get(m.group('key'))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n    \n        UNARY_OPERATORS = {\n            '': lambda v: v is not None,\n            '!': lambda v: v is None,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<op>%s)\\s*(?P<key>[a-z_]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n        m = operator_rex.search(filter_part)\n        if m:\n            op = UNARY_OPERATORS[m.group('op')]\n            actual_value = dct.get(m.group('key'))\n            return op(actual_value)\n    \n        raise ValueError('Invalid filter part %r' % filter_part)\n    \n",
    "2": "",
    "3": "# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_24/youtube_dl/utils.py\n\n# relative function's signature in this file\ndef parse_filesize(s):\n    # ... omitted code ...\n    pass\n\n",
    "4": "# A test function for the buggy function\n```python\n# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_24/test/test_YoutubeDL.py\n\n    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n\n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n\n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n\n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n        }\n        videos = [first, second]\n\n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n\n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n\n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n\n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n```\n\n## Error message from test function\n```text\nself = <test.test_YoutubeDL.TestYoutubeDL testMethod=test_match_filter>\n\n    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n    \n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n    \n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n    \n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n        }\n        videos = [first, second]\n    \n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n    \n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n    \n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n    \n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n    \n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n    \n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n    \n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n    \n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n>       self.assertEqual(res, ['1'])\nE       AssertionError: Lists differ: [] != ['1']\nE       \nE       Second list contains 1 additional elements.\nE       First extra element 0:\nE       '1'\nE       \nE       - []\nE       + ['1']\n\ntest/test_YoutubeDL.py:657: AssertionError\n\n```\n",
    "5": "# Variable runtime value and type inside buggy function\n## Buggy case 1\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'duration < 30'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 13), match='duration < 30'>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, value: `30`, type: `int`\n\ncomparison_value, value: `30`, type: `int`\n\n## Buggy case 2\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'duration < 30'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 13), match='duration < 30'>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, value: `10`, type: `int`\n\ncomparison_value, value: `30`, type: `int`\n\n## Buggy case 3\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'description = foo'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='description = foo'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, value: `'foo'`, type: `str`\n\n## Buggy case 4\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'description = foo'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='description = foo'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, value: `'foo'`, type: `str`\n\ncomparison_value, value: `'foo'`, type: `str`\n\n## Buggy case 5\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'description =? foo'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 18), match='description =? foo'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, value: `'foo'`, type: `str`\n\n## Buggy case 6\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'description =? foo'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 18), match='description =? foo'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, value: `'foo'`, type: `str`\n\ncomparison_value, value: `'foo'`, type: `str`\n\n## Buggy case 7\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'filesize > 5KiB'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='filesize > 5KiB'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `10240`, type: `int`\n\ncomparison_value, value: `5120`, type: `int`\n\n## Buggy case 8\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'filesize > 5KiB'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='filesize > 5KiB'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `5120`, type: `int`\n\ncomparison_value, value: `5120`, type: `int`\n\n## Buggy case 9\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'playlist_id = 42'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 16), match='playlist_id = 42'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, value: `'42'`, type: `str`\n\ncomparison_value, value: `'42'`, type: `str`\n\n## Buggy case 10\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'playlist_id = 42'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 16), match='playlist_id = 42'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, value: `'43'`, type: `str`\n\ncomparison_value, value: `'42'`, type: `str`\n\n\n\n# Expected variable value and type in tests\n## Expected case 1\n### Input parameter value and type\nfilter_part, value: `'duration < 30'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 13), match='duration < 30'>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `30`, type: `int`\n\nactual_value, expected value: `30`, type: `int`\n\n## Expected case 2\n### Input parameter value and type\nfilter_part, value: `'duration < 30'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 13), match='duration < 30'>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `30`, type: `int`\n\nactual_value, expected value: `10`, type: `int`\n\n## Expected case 3\n### Input parameter value and type\nfilter_part, value: `'description = foo'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='description = foo'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `'foo'`, type: `str`\n\n## Expected case 4\n### Input parameter value and type\nfilter_part, value: `'description = foo'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='description = foo'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `'foo'`, type: `str`\n\nactual_value, expected value: `'foo'`, type: `str`\n\n## Expected case 5\n### Input parameter value and type\nfilter_part, value: `'description =? foo'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 18), match='description =? foo'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `'foo'`, type: `str`\n\n## Expected case 6\n### Input parameter value and type\nfilter_part, value: `'description =? foo'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 18), match='description =? foo'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `'foo'`, type: `str`\n\nactual_value, expected value: `'foo'`, type: `str`\n\n## Expected case 7\n### Input parameter value and type\nfilter_part, value: `'filesize > 5KiB'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 15), match='filesize > 5KiB'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `5120`, type: `int`\n\nactual_value, expected value: `10240`, type: `int`\n\n## Expected case 8\n### Input parameter value and type\nfilter_part, value: `'filesize > 5KiB'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 15), match='filesize > 5KiB'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `5120`, type: `int`\n\nactual_value, expected value: `5120`, type: `int`\n\n## Expected case 9\n### Input parameter value and type\nfilter_part, value: `'playlist_id = 42'`, type: `str`\n\ndct, value: `array of shape 17`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 16), match='playlist_id = 42'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `42`, type: `int`\n\nactual_value, expected value: `'42'`, type: `str`\n\n## Expected case 10\n### Input parameter value and type\nfilter_part, value: `'playlist_id = 42'`, type: `str`\n\ndct, value: `array of shape 18`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 16), match='playlist_id = 42'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `42`, type: `int`\n\nactual_value, expected value: `'43'`, type: `str`\n\n\n\n",
    "6": "# A GitHub issue title for this bug\n```text\nUsing --match-filter for comparison playlist_id. Always being skipped.\n```\n\n## The associated detailed issue description\n```text\nPlease follow the guide below\nYou will be asked some questions and requested to provide some information, please read them carefully and answer honestly\nPut an x into all the boxes [ ] relevant to your issue (like that [x])\nUse Preview tab to see how your issue will actually look like\nMake sure you are using the latest version: run youtube-dl --version and ensure your version is 2016.10.31. If it's not read this FAQ entry and update. Issues with outdated version will be rejected.\n I've verified and I assure that I'm running youtube-dl 2016.10.31\nBefore submitting an issue make sure you have:\n At least skimmed through README and most notably FAQ and BUGS sections\n Searched the bugtracker for similar issues including closed ones\nWhat is the purpose of your issue?\n Bug report (encountered problems with youtube-dl)\n Site support request (request for adding support for a new site)\n Feature request (request for a new functionality)\n Question\n Other\nThe following sections concretize particular purposed issues, you can erase any section (the contents between triple ---) not applicable to your issue\nIf the purpose of this issue is a bug report, site support request or you are not completely sure provide the full verbose output as follows:\nAdd -v flag to your command line you run youtube-dl with, copy the whole output and insert it here. It should look similar to one below (replace it with your log inserted between triple ```\n\n",
    "7": "# Instructions\n\n1. Analyze the test case and its relationship with the error message, if applicable.\n2. Identify the potential error location within the problematic function.\n3. Explain the reasons behind the occurrence of the bug.\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function."
}