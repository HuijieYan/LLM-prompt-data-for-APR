{
    "youtube-dl:27": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/youtube-dl_27/youtube_dl/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "parse_dfxp_time_expr",
                    "function_code": "def parse_dfxp_time_expr(time_expr):\n    if not time_expr:\n        return\n\n    mobj = re.match(r'^(?P<time_offset>\\d+(?:\\.\\d+)?)s?$', time_expr)\n    if mobj:\n        return float(mobj.group('time_offset'))\n\n    mobj = re.match(r'^(\\d+):(\\d\\d):(\\d\\d(?:\\.\\d+)?)$', time_expr)\n    if mobj:\n        return 3600 * int(mobj.group(1)) + 60 * int(mobj.group(2)) + float(mobj.group(3))\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1977,
                    "end_line": 1987,
                    "variables": {
                        "time_expr": [
                            1985,
                            1978,
                            1981
                        ],
                        "mobj": [
                            1985,
                            1986,
                            1987,
                            1981,
                            1982,
                            1983
                        ],
                        "re.match": [
                            1985,
                            1981
                        ],
                        "re": [
                            1985,
                            1981
                        ],
                        "float": [
                            1987,
                            1983
                        ],
                        "mobj.group": [
                            1987,
                            1983
                        ],
                        "int": [
                            1987
                        ]
                    },
                    "filtered_variables": {
                        "time_expr": [
                            1985,
                            1978,
                            1981
                        ],
                        "mobj": [
                            1985,
                            1986,
                            1987,
                            1981,
                            1982,
                            1983
                        ],
                        "re.match": [
                            1985,
                            1981
                        ],
                        "re": [
                            1985,
                            1981
                        ],
                        "mobj.group": [
                            1987,
                            1983
                        ]
                    },
                    "diff_line_number": 1985,
                    "class_data": null,
                    "used_imports": [
                        "import re"
                    ],
                    "variable_values": [
                        [
                            {
                                "time_expr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 3), match='0.1'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f8ac1866f30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'0.1s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'0.1s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 4), match='0.1s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f8ac1866a30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 8), match='00:00:01'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f8ac22e9cb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01.100'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01.100'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 12), match='00:00:01.100'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f8ac22e9cb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "time_expr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 3), match='0.1'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f87a6c5cbb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'0.1s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'0.1s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 4), match='0.1s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f87a6c5ca30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 8), match='00:00:01'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f87a76ddcb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01.100'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01.100'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 12), match='00:00:01.100'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f87a76ddcb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01:100'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "mobj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time_expr": {
                                    "variable_value": "'00:00:01:100'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "mobj": {
                                    "variable_value": "<re.Match object; span=(0, 12), match='00:00:01:100'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mobj.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f87a76ddcb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        'TEST'.encode(pref)\n    except Exception:\n        pref = 'UTF-8'\n\n    return pref",
                        "signature": "preferredencoding()"
                    },
                    {
                        "code": "def write_json_file(obj, fn):\n    \"\"\" Encode obj as JSON and write it to fn, atomically if possible \"\"\"\n\n    fn = encodeFilename(fn)\n    if sys.version_info < (3, 0) and sys.platform != 'win32':\n        encoding = get_filesystem_encoding()\n        # os.path.basename returns a bytes object, but NamedTemporaryFile\n        # will fail if the filename contains non ascii characters unless we\n        # use a unicode object\n        path_basename = lambda f: os.path.basename(fn).decode(encoding)\n        # the same for os.path.dirname\n        path_dirname = lambda f: os.path.dirname(fn).decode(encoding)\n    else:\n        path_basename = os.path.basename\n        path_dirname = os.path.dirname\n\n    args = {\n        'suffix': '.tmp',\n        'prefix': path_basename(fn) + '.',\n        'dir': path_dirname(fn),\n        'delete': False,\n    }\n\n    # In Python 2.x, json.dump expects a bytestream.\n    # In Python 3.x, it writes to a character stream\n    if sys.version_info < (3, 0):\n        args['mode'] = 'wb'\n    else:\n        args.update({\n            'mode': 'w',\n            'encoding': 'utf-8',\n        })\n\n    tf = tempfile.NamedTemporaryFile(**compat_kwargs(args))\n\n    try:\n        with tf:\n            json.dump(obj, tf)\n        if sys.platform == 'win32':\n            # Need to remove existing file on Windows, else os.rename raises\n            # WindowsError or FileExistsError.\n            try:\n                os.unlink(fn)\n            except OSError:\n                pass\n        os.rename(tf.name, fn)\n    except Exception:\n        try:\n            os.remove(tf.name)\n        except OSError:\n            pass\n        raise",
                        "signature": "write_json_file(obj, fn)"
                    },
                    {
                        "code": "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
                        "signature": "xpath_with_ns(path, ns_map)"
                    },
                    {
                        "code": "def xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT):\n    def _find_xpath(xpath):\n        if sys.version_info < (2, 7):  # Crazy 2.6\n            xpath = xpath.encode('ascii')\n        return node.find(xpath)\n\n    if isinstance(xpath, (str, compat_str)):\n        n = _find_xpath(xpath)\n    else:\n        for xp in xpath:\n            n = _find_xpath(xp)\n            if n is not None:\n                break\n\n    if n is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element %s' % name)\n        else:\n            return None\n    return n",
                        "signature": "xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT)"
                    },
                    {
                        "code": "def xpath_text(node, xpath, name=None, fatal=False, default=NO_DEFAULT):\n    n = xpath_element(node, xpath, name, fatal=fatal, default=default)\n    if n is None or n == default:\n        return n\n    if n.text is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element\\'s text %s' % name)\n        else:\n            return None\n    return n.text",
                        "signature": "xpath_text(node, xpath, name=None, fatal=False, default=NO_DEFAULT)"
                    },
                    {
                        "code": "def xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT):\n    n = find_xpath_attr(node, xpath, key)\n    if n is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = '%s[@%s]' % (xpath, key) if name is None else name\n            raise ExtractorError('Could not find XML attribute %s' % name)\n        else:\n            return None\n    return n.attrib[key]",
                        "signature": "xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT)"
                    },
                    {
                        "code": "def get_element_by_id(id, html):\n    \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n    return get_element_by_attribute(\"id\", id, html)",
                        "signature": "get_element_by_id(id, html)"
                    },
                    {
                        "code": "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n\n    m = re.search(r'''(?xs)\n        <([a-zA-Z0-9:._-]+)\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n         \\s+%s=['\"]?%s['\"]?\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n        \\s*>\n        (?P<content>.*?)\n        </\\1>\n    ''' % (re.escape(attribute), re.escape(value)), html)\n\n    if not m:\n        return None\n    res = m.group('content')\n\n    if res.startswith('\"') or res.startswith(\"'\"):\n        res = res[1:-1]\n\n    return unescapeHTML(res)",
                        "signature": "get_element_by_attribute(attribute, value, html)"
                    },
                    {
                        "code": "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n\n    if html is None:  # Convenience for sanitizing descriptions etc.\n        return html\n\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
                        "signature": "clean_html(html)"
                    },
                    {
                        "code": "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == '-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = sanitize_path(filename)\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(alt_filename), open_mode)\n            return (stream, alt_filename)",
                        "signature": "sanitize_open(filename, open_mode)"
                    },
                    {
                        "code": "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
                        "signature": "timeconvert(timestr)"
                    },
                    {
                        "code": "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    # Handle timestamps\n    s = re.sub(r'[0-9]+(?::[0-9]+)+', lambda m: m.group(0).replace(':', '_'), s)\n    result = ''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if result.startswith('-'):\n            result = '_' + result[len('-'):]\n        result = result.lstrip('.')\n        if not result:\n            result = '_'\n    return result",
                        "signature": "sanitize_filename(s, restricted=False, is_id=False)"
                    },
                    {
                        "code": "def sanitize_path(s):\n    \"\"\"Sanitizes and normalizes path on Windows\"\"\"\n    if sys.platform != 'win32':\n        return s\n    drive_or_unc, _ = os.path.splitdrive(s)\n    if sys.version_info < (2, 7) and not drive_or_unc:\n        drive_or_unc, _ = os.path.splitunc(s)\n    norm_path = os.path.normpath(remove_start(s, drive_or_unc)).split(os.path.sep)\n    if drive_or_unc:\n        norm_path.pop(0)\n    sanitized_path = [\n        path_part if path_part in ['.', '..'] else re.sub('(?:[/<>:\"\\\\|\\\\\\\\?\\\\*]|[\\s.]$)', '#', path_part)\n        for path_part in norm_path]\n    if drive_or_unc:\n        sanitized_path.insert(0, drive_or_unc + os.path.sep)\n    return os.path.join(*sanitized_path)",
                        "signature": "sanitize_path(s)"
                    },
                    {
                        "code": "def sanitized_Request(url, *args, **kwargs):\n    return compat_urllib_request.Request(\n        'http:%s' % url if url.startswith('//') else url, *args, **kwargs)",
                        "signature": "sanitized_Request(url, *args, **kwargs)"
                    },
                    {
                        "code": "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
                        "signature": "orderedSet(iterable)"
                    },
                    {
                        "code": "def _htmlentity_transform(entity):\n    \"\"\"Transforms an HTML entity to a character.\"\"\"\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(r'#(x[0-9a-fA-F]+|[0-9]+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith('x'):\n            base = 16\n            numstr = '0%s' % numstr\n        else:\n            base = 10\n        # See https://github.com/rg3/youtube-dl/issues/7518\n        try:\n            return compat_chr(int(numstr, base))\n        except ValueError:\n            pass\n\n    # Unknown entity in name, return its literal representation\n    return '&%s;' % entity",
                        "signature": "_htmlentity_transform(entity)"
                    },
                    {
                        "code": "def unescapeHTML(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n\n    return re.sub(\n        r'&([^;]+);', lambda m: _htmlentity_transform(m.group(1)), s)",
                        "signature": "unescapeHTML(s)"
                    },
                    {
                        "code": "def get_subprocess_encoding():\n    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        # For subprocess calls, encode with locale encoding\n        # Refer to http://stackoverflow.com/a/9951851/35070\n        encoding = preferredencoding()\n    else:\n        encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    return encoding",
                        "signature": "get_subprocess_encoding()"
                    },
                    {
                        "code": "def encodeFilename(s, for_subprocess=False):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == compat_str\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    # Pass '' directly to use Unicode APIs on Windows 2000 and up\n    # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n    # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n    if not for_subprocess and sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        return s\n\n    return s.encode(get_subprocess_encoding(), 'ignore')",
                        "signature": "encodeFilename(s, for_subprocess=False)"
                    },
                    {
                        "code": "def decodeFilename(b, for_subprocess=False):\n\n    if sys.version_info >= (3, 0):\n        return b\n\n    if not isinstance(b, bytes):\n        return b\n\n    return b.decode(get_subprocess_encoding(), 'ignore')",
                        "signature": "decodeFilename(b, for_subprocess=False)"
                    },
                    {
                        "code": "def encodeArgument(s):\n    if not isinstance(s, compat_str):\n        # Legacy code that uses byte strings\n        # Uncomment the following line after fixing all post processors\n        # assert False, 'Internal error: %r should be of type %r, is %r' % (s, compat_str, type(s))\n        s = s.decode('ascii')\n    return encodeFilename(s, True)",
                        "signature": "encodeArgument(s)"
                    },
                    {
                        "code": "def decodeArgument(b):\n    return decodeFilename(b, True)",
                        "signature": "decodeArgument(b)"
                    },
                    {
                        "code": "def decodeOption(optval):\n    if optval is None:\n        return optval\n    if isinstance(optval, bytes):\n        optval = optval.decode(preferredencoding())\n\n    assert isinstance(optval, compat_str)\n    return optval",
                        "signature": "decodeOption(optval)"
                    },
                    {
                        "code": "def formatSeconds(secs):\n    if secs > 3600:\n        return '%d:%02d:%02d' % (secs // 3600, (secs % 3600) // 60, secs % 60)\n    elif secs > 60:\n        return '%d:%02d' % (secs // 60, secs % 60)\n    else:\n        return '%d' % secs",
                        "signature": "formatSeconds(secs)"
                    },
                    {
                        "code": "def make_HTTPS_handler(params, **kwargs):\n    opts_no_check_certificate = params.get('nocheckcertificate', False)\n    if hasattr(ssl, 'create_default_context'):  # Python >= 3.4 or 2.7.9\n        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n        if opts_no_check_certificate:\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n        try:\n            return YoutubeDLHTTPSHandler(params, context=context, **kwargs)\n        except TypeError:\n            # Python 2.7.8\n            # (create_default_context present but HTTPSHandler has no context=)\n            pass\n\n    if sys.version_info < (3, 2):\n        return YoutubeDLHTTPSHandler(params, **kwargs)\n    else:  # Python < 3.4\n        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        return YoutubeDLHTTPSHandler(params, context=context, **kwargs)",
                        "signature": "make_HTTPS_handler(params, **kwargs)"
                    },
                    {
                        "code": "def bug_reports_message():\n    if ytdl_is_updateable():\n        update_cmd = 'type  youtube-dl -U  to update'\n    else:\n        update_cmd = 'see  https://yt-dl.org/update  on how to update'\n    msg = '; please report this issue on https://yt-dl.org/bug .'\n    msg += ' Make sure you are using the latest version; %s.' % update_cmd\n    msg += ' Be sure to call youtube-dl with the --verbose flag and include its complete output.'\n    return msg",
                        "signature": "bug_reports_message()"
                    },
                    {
                        "code": "def _create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs):\n    # Working around python 2 bug (see http://bugs.python.org/issue17849) by limiting\n    # expected HTTP responses to meet HTTP/1.0 or later (see also\n    # https://github.com/rg3/youtube-dl/issues/6727)\n    if sys.version_info < (3, 0):\n        kwargs[b'strict'] = True\n    hc = http_class(*args, **kwargs)\n    source_address = ydl_handler._params.get('source_address')\n    if source_address is not None:\n        sa = (source_address, 0)\n        if hasattr(hc, 'source_address'):  # Python 2.7+\n            hc.source_address = sa\n        else:  # Python 2.6\n            def _hc_connect(self, *args, **kwargs):\n                sock = compat_socket_create_connection(\n                    (self.host, self.port), self.timeout, sa)\n                if is_https:\n                    self.sock = ssl.wrap_socket(\n                        sock, self.key_file, self.cert_file,\n                        ssl_version=ssl.PROTOCOL_TLSv1)\n                else:\n                    self.sock = sock\n            hc.connect = functools.partial(_hc_connect, hc)\n\n    return hc",
                        "signature": "_create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs)"
                    },
                    {
                        "code": "def handle_youtubedl_headers(headers):\n    filtered_headers = headers\n\n    if 'Youtubedl-no-compression' in filtered_headers:\n        filtered_headers = dict((k, v) for k, v in filtered_headers.items() if k.lower() != 'accept-encoding')\n        del filtered_headers['Youtubedl-no-compression']\n\n    return filtered_headers",
                        "signature": "handle_youtubedl_headers(headers)"
                    },
                    {
                        "code": "def parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date \"\"\"\n\n    if date_str is None:\n        return None\n\n    date_str = re.sub(r'\\.[0-9]+', '', date_str)\n\n    if timezone is None:\n        m = re.search(\n            r'(?:Z$| ?(?P<sign>\\+|-)(?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})$)',\n            date_str)\n        if not m:\n            timezone = datetime.timedelta()\n        else:\n            date_str = date_str[:-len(m.group(0))]\n            if not m.group('sign'):\n                timezone = datetime.timedelta()\n            else:\n                sign = 1 if m.group('sign') == '+' else -1\n                timezone = datetime.timedelta(\n                    hours=sign * int(m.group('hours')),\n                    minutes=sign * int(m.group('minutes')))\n    try:\n        date_format = '%Y-%m-%d{0}%H:%M:%S'.format(delimiter)\n        dt = datetime.datetime.strptime(date_str, date_format) - timezone\n        return calendar.timegm(dt.timetuple())\n    except ValueError:\n        pass",
                        "signature": "parse_iso8601(date_str, delimiter='T', timezone=None)"
                    },
                    {
                        "code": "def unified_strdate(date_str, day_first=True):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n\n    if date_str is None:\n        return None\n    upload_date = None\n    # Replace commas\n    date_str = date_str.replace(',', ' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    if not re.match(r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$', date_str):\n        date_str = re.sub(r' ?(\\+|-)[0-9]{2}:?[0-9]{2}$', '', date_str)\n    # Remove AM/PM + timezone\n    date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n\n    format_expressions = [\n        '%d %B %Y',\n        '%d %b %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%b %dst %Y %I:%M%p',\n        '%b %dnd %Y %I:%M%p',\n        '%b %dth %Y %I:%M%p',\n        '%Y %m %d',\n        '%Y-%m-%d',\n        '%Y/%m/%d',\n        '%Y/%m/%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S.%f',\n        '%d.%m.%Y %H:%M',\n        '%d.%m.%Y %H.%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M:%S.%f',\n        '%Y-%m-%dT%H:%M',\n    ]\n    if day_first:\n        format_expressions.extend([\n            '%d-%m-%Y',\n            '%d.%m.%Y',\n            '%d/%m/%Y',\n            '%d/%m/%y',\n            '%d/%m/%Y %H:%M:%S',\n        ])\n    else:\n        format_expressions.extend([\n            '%m-%d-%Y',\n            '%m.%d.%Y',\n            '%m/%d/%Y',\n            '%m/%d/%y',\n            '%m/%d/%Y %H:%M:%S',\n        ])\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    if upload_date is not None:\n        return compat_str(upload_date)",
                        "signature": "unified_strdate(date_str, day_first=True)"
                    },
                    {
                        "code": "def determine_ext(url, default_ext='unknown_video'):\n    if url is None:\n        return default_ext\n    guess = url.partition('?')[0].rpartition('.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    elif guess.rstrip('/') in (\n            'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'aac',\n            'flv', 'f4v', 'f4a', 'f4b',\n            'webm', 'ogg', 'ogv', 'oga', 'ogx', 'spx', 'opus',\n            'mkv', 'mka', 'mk3d',\n            'avi', 'divx',\n            'mov',\n            'asf', 'wmv', 'wma',\n            '3gp', '3g2',\n            'mp3',\n            'flac',\n            'ape',\n            'wav',\n            'f4f', 'f4m', 'm3u8', 'smil'):\n        return guess.rstrip('/')\n    else:\n        return default_ext",
                        "signature": "determine_ext(url, default_ext='unknown_video')"
                    },
                    {
                        "code": "def subtitles_filename(filename, sub_lang, sub_format):\n    return filename.rsplit('.', 1)[0] + '.' + sub_lang + '.' + sub_format",
                        "signature": "subtitles_filename(filename, sub_lang, sub_format)"
                    },
                    {
                        "code": "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str in ('now', 'today'):\n        return today\n    if date_str == 'yesterday':\n        return today - datetime.timedelta(days=1)\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        # A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
                        "signature": "date_from_str(date_str)"
                    },
                    {
                        "code": "def hyphenate_date(date_str):\n    \"\"\"\n    Convert a date in 'YYYYMMDD' format to 'YYYY-MM-DD' format\"\"\"\n    match = re.match(r'^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)$', date_str)\n    if match is not None:\n        return '-'.join(match.groups())\n    else:\n        return date_str",
                        "signature": "hyphenate_date(date_str)"
                    },
                    {
                        "code": "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
                        "signature": "platform_name()"
                    },
                    {
                        "code": "def _windows_write_string(s, out):\n    \"\"\" Returns True if the string was written using special methods,\n    False if it has yet to be written out.\"\"\"\n    # Adapted from http://stackoverflow.com/a/3259271/35070\n\n    import ctypes\n    import ctypes.wintypes\n\n    WIN_OUTPUT_IDS = {\n        1: -11,\n        2: -12,\n    }\n\n    try:\n        fileno = out.fileno()\n    except AttributeError:\n        # If the output stream doesn't have a fileno, it's virtual\n        return False\n    except io.UnsupportedOperation:\n        # Some strange Windows pseudo files?\n        return False\n    if fileno not in WIN_OUTPUT_IDS:\n        return False\n\n    GetStdHandle = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)(\n        (b\"GetStdHandle\", ctypes.windll.kernel32))\n    h = GetStdHandle(WIN_OUTPUT_IDS[fileno])\n\n    WriteConsoleW = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR,\n        ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD),\n        ctypes.wintypes.LPVOID)((b\"WriteConsoleW\", ctypes.windll.kernel32))\n    written = ctypes.wintypes.DWORD(0)\n\n    GetFileType = ctypes.WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)((b\"GetFileType\", ctypes.windll.kernel32))\n    FILE_TYPE_CHAR = 0x0002\n    FILE_TYPE_REMOTE = 0x8000\n    GetConsoleMode = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE,\n        ctypes.POINTER(ctypes.wintypes.DWORD))(\n        (b\"GetConsoleMode\", ctypes.windll.kernel32))\n    INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD(-1).value\n\n    def not_a_console(handle):\n        if handle == INVALID_HANDLE_VALUE or handle is None:\n            return True\n        return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR or\n                GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)\n\n    if not_a_console(h):\n        return False\n\n    def next_nonbmp_pos(s):\n        try:\n            return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n        except StopIteration:\n            return len(s)\n\n    while s:\n        count = min(next_nonbmp_pos(s), 1024)\n\n        ret = WriteConsoleW(\n            h, s, count if count else 2, ctypes.byref(written), None)\n        if ret == 0:\n            raise OSError('Failed to write string')\n        if not count:  # We just wrote a non-BMP character\n            assert written.value == 2\n            s = s[1:]\n        else:\n            assert written.value > 0\n            s = s[written.value:]\n    return True",
                        "signature": "_windows_write_string(s, out)"
                    },
                    {
                        "code": "def write_string(s, out=None, encoding=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == compat_str\n\n    if sys.platform == 'win32' and encoding is None and hasattr(out, 'fileno'):\n        if _windows_write_string(s, out):\n            return\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        byt = s.encode(encoding or preferredencoding(), 'ignore')\n        out.write(byt)\n    elif hasattr(out, 'buffer'):\n        enc = encoding or getattr(out, 'encoding', None) or preferredencoding()\n        byt = s.encode(enc, 'ignore')\n        out.buffer.write(byt)\n    else:\n        out.write(s)\n    out.flush()",
                        "signature": "write_string(s, out=None, encoding=None)"
                    },
                    {
                        "code": "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
                        "signature": "bytes_to_intlist(bs)"
                    },
                    {
                        "code": "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    return struct_pack('%dB' % len(xs), *xs)",
                        "signature": "intlist_to_bytes(xs)"
                    },
                    {
                        "code": "def get_filesystem_encoding():\n    encoding = sys.getfilesystemencoding()\n    return encoding if encoding is not None else 'utf-8'",
                        "signature": "get_filesystem_encoding()"
                    },
                    {
                        "code": "def shell_quote(args):\n    quoted_args = []\n    encoding = get_filesystem_encoding()\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return ' '.join(quoted_args)",
                        "signature": "shell_quote(args)"
                    },
                    {
                        "code": "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {'__youtubedl_smuggle': json.dumps(data)})\n    return url + '#' + sdata",
                        "signature": "smuggle_url(url, data)"
                    },
                    {
                        "code": "def unsmuggle_url(smug_url, default=None):\n    if '#__youtubedl_smuggle' not in smug_url:\n        return smug_url, default\n    url, _, sdata = smug_url.rpartition('#')\n    jsond = compat_parse_qs(sdata)['__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
                        "signature": "unsmuggle_url(smug_url, default=None)"
                    },
                    {
                        "code": "def format_bytes(bytes):\n    if bytes is None:\n        return 'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return '%.2f%s' % (converted, suffix)",
                        "signature": "format_bytes(bytes)"
                    },
                    {
                        "code": "def parse_filesize(s):\n    if s is None:\n        return None\n\n    # The lower-case forms are of course incorrect and inofficial,\n    # but we support those too\n    _UNIT_TABLE = {\n        'B': 1,\n        'b': 1,\n        'KiB': 1024,\n        'KB': 1000,\n        'kB': 1024,\n        'Kb': 1000,\n        'MiB': 1024 ** 2,\n        'MB': 1000 ** 2,\n        'mB': 1024 ** 2,\n        'Mb': 1000 ** 2,\n        'GiB': 1024 ** 3,\n        'GB': 1000 ** 3,\n        'gB': 1024 ** 3,\n        'Gb': 1000 ** 3,\n        'TiB': 1024 ** 4,\n        'TB': 1000 ** 4,\n        'tB': 1024 ** 4,\n        'Tb': 1000 ** 4,\n        'PiB': 1024 ** 5,\n        'PB': 1000 ** 5,\n        'pB': 1024 ** 5,\n        'Pb': 1000 ** 5,\n        'EiB': 1024 ** 6,\n        'EB': 1000 ** 6,\n        'eB': 1024 ** 6,\n        'Eb': 1000 ** 6,\n        'ZiB': 1024 ** 7,\n        'ZB': 1000 ** 7,\n        'zB': 1024 ** 7,\n        'Zb': 1000 ** 7,\n        'YiB': 1024 ** 8,\n        'YB': 1000 ** 8,\n        'yB': 1024 ** 8,\n        'Yb': 1000 ** 8,\n    }\n\n    units_re = '|'.join(re.escape(u) for u in _UNIT_TABLE)\n    m = re.match(\n        r'(?P<num>[0-9]+(?:[,.][0-9]*)?)\\s*(?P<unit>%s)' % units_re, s)\n    if not m:\n        return None\n\n    num_str = m.group('num').replace(',', '.')\n    mult = _UNIT_TABLE[m.group('unit')]\n    return int(float(num_str) * mult)",
                        "signature": "parse_filesize(s)"
                    },
                    {
                        "code": "def month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    try:\n        return ENGLISH_MONTH_NAMES.index(name) + 1\n    except ValueError:\n        return None",
                        "signature": "month_by_name(name)"
                    },
                    {
                        "code": "def month_by_abbreviation(abbrev):\n    \"\"\" Return the number of a month by (locale-independently) English\n        abbreviations \"\"\"\n\n    try:\n        return [s[:3] for s in ENGLISH_MONTH_NAMES].index(abbrev) + 1\n    except ValueError:\n        return None",
                        "signature": "month_by_abbreviation(abbrev)"
                    },
                    {
                        "code": "def fix_xml_ampersands(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return re.sub(\n        r'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',\n        '&amp;',\n        xml_str)",
                        "signature": "fix_xml_ampersands(xml_str)"
                    },
                    {
                        "code": "def setproctitle(title):\n    assert isinstance(title, compat_str)\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title_bytes = title.encode('utf-8')\n    buf = ctypes.create_string_buffer(len(title_bytes))\n    buf.value = title_bytes\n    try:\n        libc.prctl(15, buf, 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this",
                        "signature": "setproctitle(title)"
                    },
                    {
                        "code": "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
                        "signature": "remove_start(s, start)"
                    },
                    {
                        "code": "def remove_end(s, end):\n    if s.endswith(end):\n        return s[:-len(end)]\n    return s",
                        "signature": "remove_end(s, end)"
                    },
                    {
                        "code": "def remove_quotes(s):\n    if s is None or len(s) < 2:\n        return s\n    for quote in ('\"', \"'\", ):\n        if s[0] == quote and s[-1] == quote:\n            return s[1:-1]\n    return s",
                        "signature": "remove_quotes(s)"
                    },
                    {
                        "code": "def url_basename(url):\n    path = compat_urlparse.urlparse(url).path\n    return path.strip('/').split('/')[-1]",
                        "signature": "url_basename(url)"
                    },
                    {
                        "code": "def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v == '':\n        v = None\n    if v is None:\n        return default\n    try:\n        return int(v) * invscale // scale\n    except ValueError:\n        return default",
                        "signature": "int_or_none(v, scale=1, default=None, get_attr=None, invscale=1)"
                    },
                    {
                        "code": "def str_or_none(v, default=None):\n    return default if v is None else compat_str(v)",
                        "signature": "str_or_none(v, default=None)"
                    },
                    {
                        "code": "def str_to_int(int_str):\n    \"\"\" A more relaxed version of int_or_none \"\"\"\n    if int_str is None:\n        return None\n    int_str = re.sub(r'[,\\.\\+]', '', int_str)\n    return int(int_str)",
                        "signature": "str_to_int(int_str)"
                    },
                    {
                        "code": "def float_or_none(v, scale=1, invscale=1, default=None):\n    if v is None:\n        return default\n    try:\n        return float(v) * invscale / scale\n    except ValueError:\n        return default",
                        "signature": "float_or_none(v, scale=1, invscale=1, default=None)"
                    },
                    {
                        "code": "def parse_duration(s):\n    if not isinstance(s, compat_basestring):\n        return None\n\n    s = s.strip()\n\n    m = re.match(\n        r'''(?ix)(?:P?T)?\n        (?:\n            (?P<only_mins>[0-9.]+)\\s*(?:mins?\\.?|minutes?)\\s*|\n            (?P<only_hours>[0-9.]+)\\s*(?:hours?)|\n\n            \\s*(?P<hours_reversed>[0-9]+)\\s*(?:[:h]|hours?)\\s*(?P<mins_reversed>[0-9]+)\\s*(?:[:m]|mins?\\.?|minutes?)\\s*|\n            (?:\n                (?:\n                    (?:(?P<days>[0-9]+)\\s*(?:[:d]|days?)\\s*)?\n                    (?P<hours>[0-9]+)\\s*(?:[:h]|hours?)\\s*\n                )?\n                (?P<mins>[0-9]+)\\s*(?:[:m]|mins?|minutes?)\\s*\n            )?\n            (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*(?:s|secs?|seconds?)?\n        )$''', s)\n    if not m:\n        return None\n    res = 0\n    if m.group('only_mins'):\n        return float_or_none(m.group('only_mins'), invscale=60)\n    if m.group('only_hours'):\n        return float_or_none(m.group('only_hours'), invscale=60 * 60)\n    if m.group('secs'):\n        res += int(m.group('secs'))\n    if m.group('mins_reversed'):\n        res += int(m.group('mins_reversed')) * 60\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n    if m.group('hours'):\n        res += int(m.group('hours')) * 60 * 60\n    if m.group('hours_reversed'):\n        res += int(m.group('hours_reversed')) * 60 * 60\n    if m.group('days'):\n        res += int(m.group('days')) * 24 * 60 * 60\n    if m.group('ms'):\n        res += float(m.group('ms'))\n    return res",
                        "signature": "parse_duration(s)"
                    },
                    {
                        "code": "def prepend_extension(filename, ext, expected_real_ext=None):\n    name, real_ext = os.path.splitext(filename)\n    return (\n        '{0}.{1}{2}'.format(name, ext, real_ext)\n        if not expected_real_ext or real_ext[1:] == expected_real_ext\n        else '{0}.{1}'.format(filename, ext))",
                        "signature": "prepend_extension(filename, ext, expected_real_ext=None)"
                    },
                    {
                        "code": "def replace_extension(filename, ext, expected_real_ext=None):\n    name, real_ext = os.path.splitext(filename)\n    return '{0}.{1}'.format(\n        name if not expected_real_ext or real_ext[1:] == expected_real_ext else filename,\n        ext)",
                        "signature": "replace_extension(filename, ext, expected_real_ext=None)"
                    },
                    {
                        "code": "def check_executable(exe, args=[]):\n    \"\"\" Checks if the given binary is installed somewhere in PATH, and returns its name.\n    args can be a list of arguments for a short output (like -version) \"\"\"\n    try:\n        subprocess.Popen([exe] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n    except OSError:\n        return False\n    return exe",
                        "signature": "check_executable(exe, args=[])"
                    },
                    {
                        "code": "def get_exe_version(exe, args=['--version'],\n                    version_re=None, unrecognized='present'):\n    \"\"\" Returns the version of the specified executable,\n    or False if the executable is not present \"\"\"\n    try:\n        out, _ = subprocess.Popen(\n            [encodeArgument(exe)] + args,\n            stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()\n    except OSError:\n        return False\n    if isinstance(out, bytes):  # Python 2.x\n        out = out.decode('ascii', 'ignore')\n    return detect_exe_version(out, version_re, unrecognized)",
                        "signature": "get_exe_version(exe, args=['--version'], version_re=None, unrecognized='present')"
                    },
                    {
                        "code": "def detect_exe_version(output, version_re=None, unrecognized='present'):\n    assert isinstance(output, compat_str)\n    if version_re is None:\n        version_re = r'version\\s+([-0-9._a-zA-Z]+)'\n    m = re.search(version_re, output)\n    if m:\n        return m.group(1)\n    else:\n        return unrecognized",
                        "signature": "detect_exe_version(output, version_re=None, unrecognized='present')"
                    },
                    {
                        "code": "def uppercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\U[0-9a-fA-F]{8}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
                        "signature": "uppercase_escape(s)"
                    },
                    {
                        "code": "def lowercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\u[0-9a-fA-F]{4}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
                        "signature": "lowercase_escape(s)"
                    },
                    {
                        "code": "def escape_rfc3986(s):\n    \"\"\"Escape non-ASCII characters as suggested by RFC 3986\"\"\"\n    if sys.version_info < (3, 0) and isinstance(s, compat_str):\n        s = s.encode('utf-8')\n    return compat_urllib_parse.quote(s, b\"%/;:@&=+$,!~*'()?#[]\")",
                        "signature": "escape_rfc3986(s)"
                    },
                    {
                        "code": "def escape_url(url):\n    \"\"\"Escape URL as suggested by RFC 3986\"\"\"\n    url_parsed = compat_urllib_parse_urlparse(url)\n    return url_parsed._replace(\n        path=escape_rfc3986(url_parsed.path),\n        params=escape_rfc3986(url_parsed.params),\n        query=escape_rfc3986(url_parsed.query),\n        fragment=escape_rfc3986(url_parsed.fragment)\n    ).geturl()",
                        "signature": "escape_url(url)"
                    },
                    {
                        "code": "def read_batch_urls(batch_fd):\n    def fixup(url):\n        if not isinstance(url, compat_str):\n            url = url.decode('utf-8', 'replace')\n        BOM_UTF8 = '\\xef\\xbb\\xbf'\n        if url.startswith(BOM_UTF8):\n            url = url[len(BOM_UTF8):]\n        url = url.strip()\n        if url.startswith(('#', ';', ']')):\n            return False\n        return url\n\n    with contextlib.closing(batch_fd) as fd:\n        return [url for url in map(fixup, fd) if url]",
                        "signature": "read_batch_urls(batch_fd)"
                    },
                    {
                        "code": "def urlencode_postdata(*args, **kargs):\n    return compat_urllib_parse.urlencode(*args, **kargs).encode('ascii')",
                        "signature": "urlencode_postdata(*args, **kargs)"
                    },
                    {
                        "code": "def encode_dict(d, encoding='utf-8'):\n    def encode(v):\n        return v.encode(encoding) if isinstance(v, compat_basestring) else v\n    return dict((encode(k), encode(v)) for k, v in d.items())",
                        "signature": "encode_dict(d, encoding='utf-8')"
                    },
                    {
                        "code": "def parse_age_limit(s):\n    if s is None:\n        return None\n    m = re.match(r'^(?P<age>\\d{1,2})\\+?$', s)\n    return int(m.group('age')) if m else US_RATINGS.get(s, None)",
                        "signature": "parse_age_limit(s)"
                    },
                    {
                        "code": "def strip_jsonp(code):\n    return re.sub(\n        r'(?s)^[a-zA-Z0-9_]+\\s*\\(\\s*(.*)\\);?\\s*?(?://[^\\n]*)*$', r'\\1', code)",
                        "signature": "strip_jsonp(code)"
                    },
                    {
                        "code": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        if v.startswith('\"'):\n            v = re.sub(r\"\\\\'\", \"'\", v[1:-1])\n        elif v.startswith(\"'\"):\n            v = v[1:-1]\n            v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n                '\\\\\\\\': '\\\\\\\\',\n                \"\\\\'\": \"'\",\n                '\"': '\\\\\"',\n            }[m.group(0)], v)\n        return '\"%s\"' % v\n\n    res = re.sub(r'''(?x)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^'\\\\]*'|\n        [a-zA-Z_][.a-zA-Z_0-9]*\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*[\\]}])', lambda m: m.group(1), res)\n    return res",
                        "signature": "js_to_json(code)"
                    },
                    {
                        "code": "def qualities(quality_ids):\n    \"\"\" Get a numeric quality value out of a list of possible values \"\"\"\n    def q(qid):\n        try:\n            return quality_ids.index(qid)\n        except ValueError:\n            return -1\n    return q",
                        "signature": "qualities(quality_ids)"
                    },
                    {
                        "code": "def limit_length(s, length):\n    \"\"\" Add ellipses to overly long strings \"\"\"\n    if s is None:\n        return None\n    ELLIPSES = '...'\n    if len(s) > length:\n        return s[:length - len(ELLIPSES)] + ELLIPSES\n    return s",
                        "signature": "limit_length(s, length)"
                    },
                    {
                        "code": "def version_tuple(v):\n    return tuple(int(e) for e in re.split(r'[-.]', v))",
                        "signature": "version_tuple(v)"
                    },
                    {
                        "code": "def is_outdated_version(version, limit, assume_new=True):\n    if not version:\n        return not assume_new\n    try:\n        return version_tuple(version) < version_tuple(limit)\n    except ValueError:\n        return not assume_new",
                        "signature": "is_outdated_version(version, limit, assume_new=True)"
                    },
                    {
                        "code": "def ytdl_is_updateable():\n    \"\"\" Returns if youtube-dl can be updated with -U \"\"\"\n    from zipimport import zipimporter\n\n    return isinstance(globals().get('__loader__'), zipimporter) or hasattr(sys, 'frozen')",
                        "signature": "ytdl_is_updateable()"
                    },
                    {
                        "code": "def args_to_str(args):\n    # Get a short string representation for a subprocess command\n    return ' '.join(shlex_quote(a) for a in args)",
                        "signature": "args_to_str(args)"
                    },
                    {
                        "code": "def mimetype2ext(mt):\n    _, _, res = mt.rpartition('/')\n\n    return {\n        'x-ms-wmv': 'wmv',\n        'x-mp4-fragmented': 'mp4',\n        'ttml+xml': 'ttml',\n    }.get(res, res)",
                        "signature": "mimetype2ext(mt)"
                    },
                    {
                        "code": "def urlhandle_detect_ext(url_handle):\n    try:\n        url_handle.headers\n        getheader = lambda h: url_handle.headers[h]\n    except AttributeError:  # Python < 3\n        getheader = url_handle.info().getheader\n\n    cd = getheader('Content-Disposition')\n    if cd:\n        m = re.match(r'attachment;\\s*filename=\"(?P<filename>[^\"]+)\"', cd)\n        if m:\n            e = determine_ext(m.group('filename'), default_ext=None)\n            if e:\n                return e\n\n    return mimetype2ext(getheader('Content-Type'))",
                        "signature": "urlhandle_detect_ext(url_handle)"
                    },
                    {
                        "code": "def encode_data_uri(data, mime_type):\n    return 'data:%s;base64,%s' % (mime_type, base64.b64encode(data).decode('ascii'))",
                        "signature": "encode_data_uri(data, mime_type)"
                    },
                    {
                        "code": "def age_restricted(content_limit, age_limit):\n    \"\"\" Returns True iff the content should be blocked \"\"\"\n\n    if age_limit is None:  # No limit set\n        return False\n    if content_limit is None:\n        return False  # Content available for everyone\n    return age_limit < content_limit",
                        "signature": "age_restricted(content_limit, age_limit)"
                    },
                    {
                        "code": "def is_html(first_bytes):\n    \"\"\" Detect whether a file contains HTML by examining its first bytes. \"\"\"\n\n    BOMS = [\n        (b'\\xef\\xbb\\xbf', 'utf-8'),\n        (b'\\x00\\x00\\xfe\\xff', 'utf-32-be'),\n        (b'\\xff\\xfe\\x00\\x00', 'utf-32-le'),\n        (b'\\xff\\xfe', 'utf-16-le'),\n        (b'\\xfe\\xff', 'utf-16-be'),\n    ]\n    for bom, enc in BOMS:\n        if first_bytes.startswith(bom):\n            s = first_bytes[len(bom):].decode(enc, 'replace')\n            break\n    else:\n        s = first_bytes.decode('utf-8', 'replace')\n\n    return re.match(r'^\\s*<', s)",
                        "signature": "is_html(first_bytes)"
                    },
                    {
                        "code": "def determine_protocol(info_dict):\n    protocol = info_dict.get('protocol')\n    if protocol is not None:\n        return protocol\n\n    url = info_dict['url']\n    if url.startswith('rtmp'):\n        return 'rtmp'\n    elif url.startswith('mms'):\n        return 'mms'\n    elif url.startswith('rtsp'):\n        return 'rtsp'\n\n    ext = determine_ext(url)\n    if ext == 'm3u8':\n        return 'm3u8'\n    elif ext == 'f4m':\n        return 'f4m'\n\n    return compat_urllib_parse_urlparse(url).scheme",
                        "signature": "determine_protocol(info_dict)"
                    },
                    {
                        "code": "def render_table(header_row, data):\n    \"\"\" Render a list of rows, each as a list of values \"\"\"\n    table = [header_row] + data\n    max_lens = [max(len(compat_str(v)) for v in col) for col in zip(*table)]\n    format_str = ' '.join('%-' + compat_str(ml + 1) + 's' for ml in max_lens[:-1]) + '%s'\n    return '\\n'.join(format_str % tuple(row) for row in table)",
                        "signature": "render_table(header_row, data)"
                    },
                    {
                        "code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?:\n            (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n            (?P<strval>(?![0-9.])[a-z0-9A-Z]*)\n        )\n        \\s*$\n        ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        if m.group('strval') is not None:\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('strval')\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        actual_value = dct.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>%s)\\s*(?P<key>[a-z_]+)\n        \\s*$\n        ''' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
                        "signature": "_match_one(filter_part, dct)"
                    },
                    {
                        "code": "def match_str(filter_str, dct):\n    \"\"\" Filter a dictionary with a simple string syntax. Returns True (=passes filter) or false \"\"\"\n\n    return all(\n        _match_one(filter_part, dct) for filter_part in filter_str.split('&'))",
                        "signature": "match_str(filter_str, dct)"
                    },
                    {
                        "code": "def match_filter_func(filter_str):\n    def _match_func(info_dict):\n        if match_str(filter_str, info_dict):\n            return None\n        else:\n            video_title = info_dict.get('title', info_dict.get('id', 'video'))\n            return '%s does not pass filter %s, skipping ..' % (video_title, filter_str)\n    return _match_func",
                        "signature": "match_filter_func(filter_str)"
                    },
                    {
                        "code": "def parse_dfxp_time_expr(time_expr):\n    if not time_expr:\n        return\n\n    mobj = re.match(r'^(?P<time_offset>\\d+(?:\\.\\d+)?)s?$', time_expr)\n    if mobj:\n        return float(mobj.group('time_offset'))\n\n    mobj = re.match(r'^(\\d+):(\\d\\d):(\\d\\d(?:\\.\\d+)?)$', time_expr)\n    if mobj:\n        return 3600 * int(mobj.group(1)) + 60 * int(mobj.group(2)) + float(mobj.group(3))",
                        "signature": "parse_dfxp_time_expr(time_expr)"
                    },
                    {
                        "code": "def srt_subtitles_timecode(seconds):\n    return '%02d:%02d:%02d,%03d' % (seconds / 3600, (seconds % 3600) / 60, seconds % 60, (seconds % 1) * 1000)",
                        "signature": "srt_subtitles_timecode(seconds)"
                    },
                    {
                        "code": "def dfxp2srt(dfxp_data):\n    _x = functools.partial(xpath_with_ns, ns_map={\n        'ttml': 'http://www.w3.org/ns/ttml',\n        'ttaf1': 'http://www.w3.org/2006/10/ttaf1',\n    })\n\n    def parse_node(node):\n        str_or_empty = functools.partial(str_or_none, default='')\n\n        out = str_or_empty(node.text)\n\n        for child in node:\n            if child.tag in (_x('ttml:br'), _x('ttaf1:br'), 'br'):\n                out += '\\n' + str_or_empty(child.tail)\n            elif child.tag in (_x('ttml:span'), _x('ttaf1:span'), 'span'):\n                out += str_or_empty(parse_node(child))\n            else:\n                out += str_or_empty(xml.etree.ElementTree.tostring(child))\n\n        return out\n\n    dfxp = compat_etree_fromstring(dfxp_data.encode('utf-8'))\n    out = []\n    paras = dfxp.findall(_x('.//ttml:p')) or dfxp.findall(_x('.//ttaf1:p')) or dfxp.findall('.//p')\n\n    if not paras:\n        raise ValueError('Invalid dfxp/TTML subtitle')\n\n    for para, index in zip(paras, itertools.count(1)):\n        begin_time = parse_dfxp_time_expr(para.attrib.get('begin'))\n        end_time = parse_dfxp_time_expr(para.attrib.get('end'))\n        dur = parse_dfxp_time_expr(para.attrib.get('dur'))\n        if begin_time is None:\n            continue\n        if not end_time:\n            if not dur:\n                continue\n            end_time = begin_time + dur\n        out.append('%d\\n%s --> %s\\n%s\\n\\n' % (\n            index,\n            srt_subtitles_timecode(begin_time),\n            srt_subtitles_timecode(end_time),\n            parse_node(para)))\n\n    return ''.join(out)",
                        "signature": "dfxp2srt(dfxp_data)"
                    },
                    {
                        "code": "def cli_option(params, command_option, param):\n    param = params.get(param)\n    return [command_option, param] if param is not None else []",
                        "signature": "cli_option(params, command_option, param)"
                    },
                    {
                        "code": "def cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None):\n    param = params.get(param)\n    assert isinstance(param, bool)\n    if separator:\n        return [command_option + separator + (true_value if param else false_value)]\n    return [command_option, true_value if param else false_value]",
                        "signature": "cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None)"
                    },
                    {
                        "code": "def cli_valueless_option(params, command_option, param, expected_value=True):\n    param = params.get(param)\n    return [command_option] if param == expected_value else []",
                        "signature": "cli_valueless_option(params, command_option, param, expected_value=True)"
                    },
                    {
                        "code": "def cli_configuration_args(params, param, default=[]):\n    ex_args = params.get(param)\n    if ex_args is None:\n        return default\n    assert isinstance(ex_args, list)\n    return ex_args",
                        "signature": "cli_configuration_args(params, param, default=[])"
                    },
                    {
                        "code": "def find_xpath_attr(node, xpath, key, val=None):\n    \"\"\" Find the xpath xpath[@key=val] \"\"\"\n    assert re.match(r'^[a-zA-Z_-]+$', key)\n    if val:\n        assert re.match(r'^[a-zA-Z0-9@\\s:._-]*$', val)\n    expr = xpath + ('[@%s]' % key if val is None else \"[@%s='%s']\" % (key, val))\n    return node.find(expr)",
                        "signature": "find_xpath_attr(node, xpath, key, val=None)"
                    },
                    {
                        "code": "def find_xpath_attr(node, xpath, key, val=None):\n    # Here comes the crazy part: In 2.6, if the xpath is a unicode,\n    # .//node does not match if a node is a direct child of . !\n    if isinstance(xpath, compat_str):\n        xpath = xpath.encode('ascii')\n\n    for f in node.findall(xpath):\n        if key not in f.attrib:\n            continue\n        if val is None or f.attrib.get(key) == val:\n            return f\n    return None",
                        "signature": "find_xpath_attr(node, xpath, key, val=None)"
                    },
                    {
                        "code": "def _lock_file(f, exclusive):\n    overlapped = OVERLAPPED()\n    overlapped.Offset = 0\n    overlapped.OffsetHigh = 0\n    overlapped.hEvent = 0\n    f._lock_file_overlapped_p = ctypes.pointer(overlapped)\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,\n                      whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Locking file failed: %r' % ctypes.FormatError())",
                        "signature": "_lock_file(f, exclusive)"
                    },
                    {
                        "code": "def _unlock_file(f):\n    assert f._lock_file_overlapped_p\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not UnlockFileEx(handle, 0,\n                        whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Unlocking file failed: %r' % ctypes.FormatError())",
                        "signature": "_unlock_file(f)"
                    },
                    {
                        "code": "def _lock_file(f, exclusive):\n    fcntl.flock(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)",
                        "signature": "_lock_file(f, exclusive)"
                    },
                    {
                        "code": "def _unlock_file(f):\n    fcntl.flock(f, fcntl.LOCK_UN)",
                        "signature": "_unlock_file(f)"
                    },
                    {
                        "code": "def struct_pack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.pack(spec, *args)",
                        "signature": "struct_pack(spec, *args)"
                    },
                    {
                        "code": "def struct_unpack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.unpack(spec, *args)",
                        "signature": "struct_unpack(spec, *args)"
                    },
                    {
                        "code": "def _hc_connect(self, *args, **kwargs):\n    sock = compat_socket_create_connection(\n        (self.host, self.port), self.timeout, sa)\n    if is_https:\n        self.sock = ssl.wrap_socket(\n            sock, self.key_file, self.cert_file,\n            ssl_version=ssl.PROTOCOL_TLSv1)\n    else:\n        self.sock = sock",
                        "signature": "_hc_connect(self, *args, **kwargs)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class ExtractorError:",
                        "functions": [
                            {
                                "code": "def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if video_id is not None:\n        msg = video_id + ': ' + msg\n    if cause:\n        msg += ' (caused by %r)' % cause\n    if not expected:\n        msg += bug_reports_message()\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause\n    self.video_id = video_id",
                                "signature": "__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)"
                            },
                            {
                                "code": "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return ''.join(traceback.format_tb(self.traceback))",
                                "signature": "format_traceback(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class UnsupportedError:",
                        "functions": [
                            {
                                "code": "def __init__(self, url):\n    super(UnsupportedError, self).__init__(\n        'Unsupported URL: %s' % url, expected=True)\n    self.url = url",
                                "signature": "__init__(self, url)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class RegexNotFoundError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class DownloadError:",
                        "functions": [
                            {
                                "code": "def __init__(self, msg, exc_info=None):\n    \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n    super(DownloadError, self).__init__(msg)\n    self.exc_info = exc_info",
                                "signature": "__init__(self, msg, exc_info=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class SameFileError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class PostProcessingError:",
                        "functions": [
                            {
                                "code": "def __init__(self, msg):\n    self.msg = msg",
                                "signature": "__init__(self, msg)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class MaxDownloadsReached:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class UnavailableVideoError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class ContentTooShortError:",
                        "functions": [
                            {
                                "code": "def __init__(self, downloaded, expected):\n    # Both in bytes\n    self.downloaded = downloaded\n    self.expected = expected",
                                "signature": "__init__(self, downloaded, expected)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class YoutubeDLHandler:",
                        "functions": [
                            {
                                "code": "def __init__(self, params, *args, **kwargs):\n    compat_urllib_request.HTTPHandler.__init__(self, *args, **kwargs)\n    self._params = params",
                                "signature": "__init__(self, params, *args, **kwargs)"
                            },
                            {
                                "code": "def http_open(self, req):\n    return self.do_open(functools.partial(\n        _create_http_connection, self, compat_http_client.HTTPConnection, False),\n        req)",
                                "signature": "http_open(self, req)"
                            },
                            {
                                "code": "@staticmethod\ndef deflate(data):\n    try:\n        return zlib.decompress(data, -zlib.MAX_WBITS)\n    except zlib.error:\n        return zlib.decompress(data)",
                                "signature": "deflate(data)"
                            },
                            {
                                "code": "@staticmethod\ndef addinfourl_wrapper(stream, headers, url, code):\n    if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n        return compat_urllib_request.addinfourl(stream, headers, url, code)\n    ret = compat_urllib_request.addinfourl(stream, headers, url)\n    ret.code = code\n    return ret",
                                "signature": "addinfourl_wrapper(stream, headers, url, code)"
                            },
                            {
                                "code": "def http_request(self, req):\n    # According to RFC 3986, URLs can not contain non-ASCII characters, however this is not\n    # always respected by websites, some tend to give out URLs with non percent-encoded\n    # non-ASCII characters (see telemb.py, ard.py [#3412])\n    # urllib chokes on URLs with non-ASCII characters (see http://bugs.python.org/issue3991)\n    # To work around aforementioned issue we will replace request's original URL with\n    # percent-encoded one\n    # Since redirects are also affected (e.g. http://www.southpark.de/alle-episoden/s18e09)\n    # the code of this workaround has been moved here from YoutubeDL.urlopen()\n    url = req.get_full_url()\n    url_escaped = escape_url(url)\n\n    # Substitute URL if any change after escaping\n    if url != url_escaped:\n        req_type = HEADRequest if req.get_method() == 'HEAD' else compat_urllib_request.Request\n        new_req = req_type(\n            url_escaped, data=req.data, headers=req.headers,\n            origin_req_host=req.origin_req_host, unverifiable=req.unverifiable)\n        new_req.timeout = req.timeout\n        req = new_req\n\n    for h, v in std_headers.items():\n        # Capitalize is needed because of Python bug 2275: http://bugs.python.org/issue2275\n        # The dict keys are capitalized because of this bug by urllib\n        if h.capitalize() not in req.headers:\n            req.add_header(h, v)\n\n    req.headers = handle_youtubedl_headers(req.headers)\n\n    if sys.version_info < (2, 7) and '#' in req.get_full_url():\n        # Python 2.6 is brain-dead when it comes to fragments\n        req._Request__original = req._Request__original.partition('#')[0]\n        req._Request__r_type = req._Request__r_type.partition('#')[0]\n\n    return req",
                                "signature": "http_request(self, req)"
                            },
                            {
                                "code": "def http_response(self, req, resp):\n    old_resp = resp\n    # gzip\n    if resp.headers.get('Content-encoding', '') == 'gzip':\n        content = resp.read()\n        gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n        try:\n            uncompressed = io.BytesIO(gz.read())\n        except IOError as original_ioerror:\n            # There may be junk add the end of the file\n            # See http://stackoverflow.com/q/4928560/35070 for details\n            for i in range(1, 1024):\n                try:\n                    gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                    uncompressed = io.BytesIO(gz.read())\n                except IOError:\n                    continue\n                break\n            else:\n                raise original_ioerror\n        resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # deflate\n    if resp.headers.get('Content-encoding', '') == 'deflate':\n        gz = io.BytesIO(self.deflate(resp.read()))\n        resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # Percent-encode redirect URL of Location HTTP header to satisfy RFC 3986 (see\n    # https://github.com/rg3/youtube-dl/issues/6457).\n    if 300 <= resp.code < 400:\n        location = resp.headers.get('Location')\n        if location:\n            # As of RFC 2616 default charset is iso-8859-1 that is respected by python 3\n            if sys.version_info >= (3, 0):\n                location = location.encode('iso-8859-1').decode('utf-8')\n            location_escaped = escape_url(location)\n            if location != location_escaped:\n                del resp.headers['Location']\n                resp.headers['Location'] = location_escaped\n    return resp",
                                "signature": "http_response(self, req, resp)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class YoutubeDLHTTPSHandler:",
                        "functions": [
                            {
                                "code": "def __init__(self, params, https_conn_class=None, *args, **kwargs):\n    compat_urllib_request.HTTPSHandler.__init__(self, *args, **kwargs)\n    self._https_conn_class = https_conn_class or compat_http_client.HTTPSConnection\n    self._params = params",
                                "signature": "__init__(self, params, https_conn_class=None, *args, **kwargs)"
                            },
                            {
                                "code": "def https_open(self, req):\n    kwargs = {}\n    if hasattr(self, '_context'):  # python > 2.6\n        kwargs['context'] = self._context\n    if hasattr(self, '_check_hostname'):  # python 3.x\n        kwargs['check_hostname'] = self._check_hostname\n    return self.do_open(functools.partial(\n        _create_http_connection, self, self._https_conn_class, True),\n        req, **kwargs)",
                                "signature": "https_open(self, req)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class YoutubeDLCookieProcessor:",
                        "functions": [
                            {
                                "code": "def __init__(self, cookiejar=None):\n    compat_urllib_request.HTTPCookieProcessor.__init__(self, cookiejar)",
                                "signature": "__init__(self, cookiejar=None)"
                            },
                            {
                                "code": "def http_response(self, request, response):\n    # Python 2 will choke on next HTTP request in row if there are non-ASCII\n    # characters in Set-Cookie HTTP header of last response (see\n    # https://github.com/rg3/youtube-dl/issues/6769).\n    # In order to at least prevent crashing we will percent encode Set-Cookie\n    # header before HTTPCookieProcessor starts processing it.\n    # if sys.version_info < (3, 0) and response.headers:\n    #     for set_cookie_header in ('Set-Cookie', 'Set-Cookie2'):\n    #         set_cookie = response.headers.get(set_cookie_header)\n    #         if set_cookie:\n    #             set_cookie_escaped = compat_urllib_parse.quote(set_cookie, b\"%/;:@&=+$,!~*'()?#[] \")\n    #             if set_cookie != set_cookie_escaped:\n    #                 del response.headers[set_cookie_header]\n    #                 response.headers[set_cookie_header] = set_cookie_escaped\n    return compat_urllib_request.HTTPCookieProcessor.http_response(self, request, response)",
                                "signature": "http_response(self, request, response)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class DateRange:",
                        "functions": [
                            {
                                "code": "def __init__(self, start=None, end=None):\n    \"\"\"start and end must be strings in the format accepted by date\"\"\"\n    if start is not None:\n        self.start = date_from_str(start)\n    else:\n        self.start = datetime.datetime.min.date()\n    if end is not None:\n        self.end = date_from_str(end)\n    else:\n        self.end = datetime.datetime.max.date()\n    if self.start > self.end:\n        raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
                                "signature": "__init__(self, start=None, end=None)"
                            },
                            {
                                "code": "@classmethod\ndef day(cls, day):\n    \"\"\"Returns a range that only contains the given day\"\"\"\n    return cls(day, day)",
                                "signature": "day(cls, day)"
                            },
                            {
                                "code": "def __contains__(self, date):\n    \"\"\"Check if the date is in the range\"\"\"\n    if not isinstance(date, datetime.date):\n        date = date_from_str(date)\n    return self.start <= date <= self.end",
                                "signature": "__contains__(self, date)"
                            },
                            {
                                "code": "def __str__(self):\n    return '%s - %s' % (self.start.isoformat(), self.end.isoformat())",
                                "signature": "__str__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class locked_file:",
                        "functions": [
                            {
                                "code": "def __init__(self, filename, mode, encoding=None):\n    assert mode in ['r', 'a', 'w']\n    self.f = io.open(filename, mode, encoding=encoding)\n    self.mode = mode",
                                "signature": "__init__(self, filename, mode, encoding=None)"
                            },
                            {
                                "code": "def __enter__(self):\n    exclusive = self.mode != 'r'\n    try:\n        _lock_file(self.f, exclusive)\n    except IOError:\n        self.f.close()\n        raise\n    return self",
                                "signature": "__enter__(self)"
                            },
                            {
                                "code": "def __exit__(self, etype, value, traceback):\n    try:\n        _unlock_file(self.f)\n    finally:\n        self.f.close()",
                                "signature": "__exit__(self, etype, value, traceback)"
                            },
                            {
                                "code": "def __iter__(self):\n    return iter(self.f)",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "def write(self, *args):\n    return self.f.write(*args)",
                                "signature": "write(self, *args)"
                            },
                            {
                                "code": "def read(self, *args):\n    return self.f.read(*args)",
                                "signature": "read(self, *args)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HEADRequest:",
                        "functions": [
                            {
                                "code": "def get_method(self):\n    return \"HEAD\"",
                                "signature": "get_method(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class PagedList:",
                        "functions": [
                            {
                                "code": "def __len__(self):\n    # This is only useful for tests\n    return len(self.getslice())",
                                "signature": "__len__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class OnDemandPagedList:",
                        "functions": [
                            {
                                "code": "def __init__(self, pagefunc, pagesize):\n    self._pagefunc = pagefunc\n    self._pagesize = pagesize",
                                "signature": "__init__(self, pagefunc, pagesize)"
                            },
                            {
                                "code": "def getslice(self, start=0, end=None):\n    res = []\n    for pagenum in itertools.count(start // self._pagesize):\n        firstid = pagenum * self._pagesize\n        nextfirstid = pagenum * self._pagesize + self._pagesize\n        if start >= nextfirstid:\n            continue\n\n        page_results = list(self._pagefunc(pagenum))\n\n        startv = (\n            start % self._pagesize\n            if firstid <= start < nextfirstid\n            else 0)\n\n        endv = (\n            ((end - 1) % self._pagesize) + 1\n            if (end is not None and firstid <= end <= nextfirstid)\n            else None)\n\n        if startv != 0 or endv is not None:\n            page_results = page_results[startv:endv]\n        res.extend(page_results)\n\n        # A little optimization - if current page is not \"full\", ie. does\n        # not contain page_size videos then we can assume that this page\n        # is the last one - there are no more ids on further pages -\n        # i.e. no need to query again.\n        if len(page_results) + startv < self._pagesize:\n            break\n\n        # If we got the whole page, but the next page is not interesting,\n        # break out early as well\n        if end == nextfirstid:\n            break\n    return res",
                                "signature": "getslice(self, start=0, end=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class InAdvancePagedList:",
                        "functions": [
                            {
                                "code": "def __init__(self, pagefunc, pagecount, pagesize):\n    self._pagefunc = pagefunc\n    self._pagecount = pagecount\n    self._pagesize = pagesize",
                                "signature": "__init__(self, pagefunc, pagecount, pagesize)"
                            },
                            {
                                "code": "def getslice(self, start=0, end=None):\n    res = []\n    start_page = start // self._pagesize\n    end_page = (\n        self._pagecount if end is None else (end // self._pagesize + 1))\n    skip_elems = start - start_page * self._pagesize\n    only_more = None if end is None else end - start\n    for pagenum in range(start_page, end_page):\n        page = list(self._pagefunc(pagenum))\n        if skip_elems:\n            page = page[skip_elems:]\n            skip_elems = None\n        if only_more is not None:\n            if len(page) < only_more:\n                only_more -= len(page)\n            else:\n                page = page[:only_more]\n                res.extend(page)\n                break\n        res.extend(page)\n    return res",
                                "signature": "getslice(self, start=0, end=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ISO639Utils:",
                        "functions": [
                            {
                                "code": "@classmethod\ndef short2long(cls, code):\n    \"\"\"Convert language code from ISO 639-1 to ISO 639-2/T\"\"\"\n    return cls._lang_map.get(code[:2])",
                                "signature": "short2long(cls, code)"
                            },
                            {
                                "code": "@classmethod\ndef long2short(cls, code):\n    \"\"\"Convert language code from ISO 639-2/T to ISO 639-1\"\"\"\n    for short_name, long_name in cls._lang_map.items():\n        if long_name == code:\n            return short_name",
                                "signature": "long2short(cls, code)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ISO3166Utils:",
                        "functions": [
                            {
                                "code": "@classmethod\ndef short2full(cls, code):\n    \"\"\"Convert an ISO 3166-2 country code to the corresponding full name\"\"\"\n    return cls._country_map.get(code.upper())",
                                "signature": "short2full(cls, code)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class PerRequestProxyHandler:",
                        "functions": [
                            {
                                "code": "def __init__(self, proxies=None):\n    # Set default handlers\n    for type in ('http', 'https'):\n        setattr(self, '%s_open' % type,\n                lambda r, proxy='__noproxy__', type=type, meth=self.proxy_open:\n                    meth(r, proxy, type))\n    return compat_urllib_request.ProxyHandler.__init__(self, proxies)",
                                "signature": "__init__(self, proxies=None)"
                            },
                            {
                                "code": "def proxy_open(self, req, proxy, type):\n    req_proxy = req.headers.get('Ytdl-request-proxy')\n    if req_proxy is not None:\n        proxy = req_proxy\n        del req.headers['Ytdl-request-proxy']\n\n    if proxy == '__noproxy__':\n        return None  # No Proxy\n    return compat_urllib_request.ProxyHandler.proxy_open(\n        self, req, proxy, type)",
                                "signature": "proxy_open(self, req, proxy, type)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class OVERLAPPED:",
                        "functions": []
                    }
                ]
            },
            "variables_in_file": {
                "compiled_regex_type": [
                    56
                ],
                "type": [
                    419,
                    1124,
                    2532,
                    2533,
                    2534,
                    2535,
                    1290,
                    2547,
                    56,
                    442
                ],
                "re.compile": [
                    56,
                    1947,
                    1910
                ],
                "re": [
                    270,
                    271,
                    398,
                    273,
                    146,
                    1553,
                    148,
                    1947,
                    1950,
                    1828,
                    421,
                    1450,
                    941,
                    56,
                    1469,
                    1981,
                    1727,
                    1344,
                    1345,
                    1985,
                    1732,
                    1868,
                    846,
                    975,
                    1742,
                    849,
                    1745,
                    341,
                    1752,
                    1757,
                    1376,
                    998,
                    1640,
                    880,
                    369,
                    242,
                    881,
                    883,
                    1648,
                    1910,
                    1785,
                    250,
                    1918
                ],
                "std_headers": [
                    58,
                    739
                ],
                "NO_DEFAULT": [
                    224,
                    67,
                    196,
                    206,
                    211,
                    181,
                    221
                ],
                "object": [
                    67,
                    1223,
                    1005,
                    2067,
                    1560,
                    2269
                ],
                "ENGLISH_MONTH_NAMES": [
                    1369,
                    69,
                    1359
                ],
                "pref": [
                    81,
                    82,
                    84,
                    86
                ],
                "locale.getpreferredencoding": [
                    81
                ],
                "locale": [
                    81
                ],
                "encode": [
                    1706,
                    82,
                    1712
                ],
                "Exception": [
                    577,
                    611,
                    135,
                    616,
                    600,
                    591,
                    625,
                    83,
                    536
                ],
                "fn": [
                    98,
                    131,
                    100,
                    134,
                    107,
                    108,
                    92
                ],
                "encodeFilename": [
                    474,
                    307,
                    92,
                    295
                ],
                "sys.version_info": [
                    514,
                    643,
                    363,
                    459,
                    747,
                    1131,
                    143,
                    114,
                    787,
                    183,
                    1656,
                    93,
                    445
                ],
                "sys": [
                    514,
                    643,
                    1159,
                    1801,
                    143,
                    787,
                    544,
                    291,
                    293,
                    294,
                    426,
                    555,
                    431,
                    183,
                    445,
                    451,
                    459,
                    93,
                    1123,
                    1126,
                    1255,
                    360,
                    363,
                    747,
                    1131,
                    114,
                    1656,
                    127
                ],
                "sys.platform": [
                    291,
                    451,
                    1126,
                    1159,
                    360,
                    426,
                    93,
                    127
                ],
                "encoding": [
                    98,
                    100,
                    1126,
                    1255,
                    1256,
                    1226,
                    1132,
                    429,
                    1261,
                    431,
                    432,
                    433,
                    434,
                    1135,
                    1265,
                    1711,
                    94
                ],
                "get_filesystem_encoding": [
                    1261,
                    94
                ],
                "path_basename": [
                    98,
                    107,
                    102
                ],
                "decode": [
                    98,
                    100,
                    1863,
                    1838,
                    788
                ],
                "os.path.basename": [
                    98,
                    102
                ],
                "os.path": [
                    98,
                    100,
                    102,
                    103,
                    1510,
                    362,
                    364,
                    365,
                    1518,
                    372,
                    373
                ],
                "os": [
                    98,
                    131,
                    100,
                    293,
                    102,
                    103,
                    134,
                    137,
                    362,
                    1510,
                    364,
                    365,
                    1518,
                    372,
                    373
                ],
                "path_dirname": [
                    108,
                    100,
                    103
                ],
                "os.path.dirname": [
                    100,
                    103
                ],
                "args": [
                    1248,
                    801,
                    1251,
                    1540,
                    645,
                    105,
                    1706,
                    1262,
                    1678,
                    1806,
                    115,
                    1683,
                    117,
                    695,
                    1528,
                    122,
                    380
                ],
                "args.update": [
                    117
                ],
                "tf": [
                    134,
                    137,
                    122,
                    125,
                    126
                ],
                "tempfile.NamedTemporaryFile": [
                    122
                ],
                "tempfile": [
                    122
                ],
                "compat_kwargs": [
                    122
                ],
                "json.dump": [
                    126
                ],
                "json": [
                    1274,
                    1283,
                    126
                ],
                "obj": [
                    126
                ],
                "os.unlink": [
                    131
                ],
                "OSError": [
                    132,
                    1542,
                    297,
                    138,
                    1386,
                    1204,
                    1111,
                    1529,
                    1211
                ],
                "os.rename": [
                    134
                ],
                "tf.name": [
                    137,
                    134
                ],
                "os.remove": [
                    137
                ],
                "re.match": [
                    1345,
                    1985,
                    1828,
                    998,
                    1868,
                    941,
                    398,
                    975,
                    880,
                    1981,
                    146,
                    148,
                    1469,
                    1727
                ],
                "key": [
                    161,
                    227,
                    231,
                    146,
                    149,
                    222,
                    159
                ],
                "val": [
                    161,
                    147,
                    148,
                    149
                ],
                "expr": [
                    149,
                    150
                ],
                "xpath": [
                    227,
                    199,
                    187,
                    190,
                    207,
                    188,
                    149,
                    214,
                    184,
                    185,
                    155,
                    156,
                    222,
                    158
                ],
                "node.find": [
                    185,
                    150
                ],
                "node": [
                    207,
                    2003,
                    2005,
                    150,
                    185,
                    222,
                    158
                ],
                "isinstance": [
                    2048,
                    1028,
                    1544,
                    1801,
                    1676,
                    1550,
                    1039,
                    2063,
                    1681,
                    1042,
                    155,
                    1691,
                    1711,
                    1464,
                    187,
                    462,
                    469,
                    484,
                    487,
                    1383,
                    1263,
                    1656,
                    1146
                ],
                "compat_str": [
                    419,
                    1124,
                    1443,
                    934,
                    487,
                    1383,
                    1896,
                    1897,
                    1676,
                    187,
                    1550,
                    1681,
                    1042,
                    469,
                    1656,
                    442,
                    155,
                    1691
                ],
                "xpath.encode": [
                    184,
                    156
                ],
                "f": [
                    161,
                    162,
                    1217,
                    1220,
                    1200,
                    1201,
                    1203,
                    1207,
                    1208,
                    1210,
                    158,
                    159
                ],
                "node.findall": [
                    158
                ],
                "f.attrib": [
                    161,
                    159
                ],
                "f.attrib.get": [
                    161
                ],
                "components": [
                    170,
                    172
                ],
                "c.split": [
                    170
                ],
                "c": [
                    170,
                    172,
                    173,
                    174,
                    1101,
                    176,
                    1149
                ],
                "path.split": [
                    170
                ],
                "path": [
                    170,
                    1419,
                    1420
                ],
                "replaced": [
                    177,
                    178,
                    171,
                    174
                ],
                "len": [
                    1410,
                    1155,
                    1629,
                    1863,
                    1896,
                    173,
                    1389,
                    1103,
                    1599,
                    1695,
                    1405,
                    1779,
                    1780,
                    855,
                    1563,
                    1628,
                    1399,
                    351
                ],
                "replaced.append": [
                    177,
                    174
                ],
                "ns": [
                    176,
                    177
                ],
                "tag": [
                    176,
                    177
                ],
                "ns_map": [
                    177
                ],
                "join": [
                    1344,
                    1000,
                    1897,
                    1898,
                    1806,
                    178,
                    1267,
                    562,
                    1950,
                    342,
                    2038,
                    1918
                ],
                "str": [
                    1290,
                    187
                ],
                "n": [
                    192,
                    223,
                    195,
                    231,
                    203,
                    207,
                    208,
                    209,
                    210,
                    218,
                    188,
                    222,
                    191
                ],
                "_find_xpath": [
                    188,
                    191
                ],
                "xp": [
                    190,
                    191
                ],
                "default": [
                    224,
                    225,
                    1280,
                    1443,
                    196,
                    197,
                    2062,
                    207,
                    208,
                    1456,
                    211,
                    212,
                    1460,
                    1435,
                    1439
                ],
                "fatal": [
                    226,
                    213,
                    198,
                    207
                ],
                "name": [
                    227,
                    228,
                    1510,
                    199,
                    200,
                    1512,
                    1518,
                    207,
                    1359,
                    1520,
                    214,
                    215
                ],
                "ExtractorError": [
                    228,
                    200,
                    552,
                    565,
                    215,
                    572
                ],
                "xpath_element": [
                    207
                ],
                "n.text": [
                    218,
                    210
                ],
                "find_xpath_attr": [
                    222
                ],
                "n.attrib": [
                    231
                ],
                "get_element_by_attribute": [
                    236
                ],
                "id": [
                    236
                ],
                "html": [
                    265,
                    266,
                    236,
                    269,
                    270,
                    271,
                    273,
                    275,
                    276,
                    250
                ],
                "m": [
                    1920,
                    1921,
                    1922,
                    1923,
                    1925,
                    1926,
                    1757,
                    1929,
                    1931,
                    1933,
                    1553,
                    1554,
                    1555,
                    1937,
                    1938,
                    1940,
                    1951,
                    1952,
                    1953,
                    1954,
                    1828,
                    1829,
                    422,
                    1830,
                    1469,
                    1727,
                    1728,
                    1345,
                    1347,
                    1350,
                    1351,
                    1738,
                    1485,
                    1488,
                    849,
                    1489,
                    1490,
                    852,
                    341,
                    1491,
                    855,
                    856,
                    1492,
                    1493,
                    859,
                    1494,
                    861,
                    862,
                    1495,
                    1496,
                    1497,
                    1498,
                    1499,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1505,
                    1642,
                    1749,
                    242,
                    1650,
                    252,
                    254,
                    1919
                ],
                "re.search": [
                    849,
                    242,
                    1553
                ],
                "re.escape": [
                    1344,
                    250,
                    1950,
                    1918
                ],
                "attribute": [
                    250
                ],
                "value": [
                    1088,
                    250
                ],
                "res": [
                    256,
                    257,
                    385,
                    259,
                    387,
                    388,
                    389,
                    1038,
                    1039,
                    1040,
                    1042,
                    1043,
                    1810,
                    1816,
                    1572,
                    1593,
                    1606,
                    1487,
                    1616,
                    1493,
                    1495,
                    1752,
                    1497,
                    1499,
                    1501,
                    1757,
                    1503,
                    1632,
                    1505,
                    1506,
                    1634,
                    1635,
                    1758,
                    254
                ],
                "m.group": [
                    1921,
                    1922,
                    1923,
                    1925,
                    1926,
                    1757,
                    1929,
                    1931,
                    1933,
                    1937,
                    1938,
                    1555,
                    1940,
                    1953,
                    1954,
                    422,
                    1830,
                    1728,
                    1350,
                    1351,
                    1738,
                    1488,
                    1489,
                    1490,
                    1491,
                    1492,
                    341,
                    1493,
                    1495,
                    1496,
                    855,
                    856,
                    1494,
                    859,
                    861,
                    862,
                    1497,
                    1498,
                    1499,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1505,
                    1749,
                    1642,
                    1650,
                    254
                ],
                "res.startswith": [
                    256
                ],
                "unescapeHTML": [
                    275,
                    259
                ],
                "html.replace": [
                    269
                ],
                "re.sub": [
                    1376,
                    1732,
                    421,
                    1640,
                    1450,
                    1752,
                    270,
                    271,
                    846,
                    273,
                    369,
                    881,
                    883,
                    341,
                    1648,
                    1742,
                    1745,
                    1757
                ],
                "html.strip": [
                    276
                ],
                "filename": [
                    290,
                    963,
                    294,
                    295,
                    296,
                    1510,
                    1226,
                    1514,
                    302,
                    303,
                    1518,
                    1520
                ],
                "msvcrt.setmode": [
                    293
                ],
                "msvcrt": [
                    1208,
                    1201,
                    293
                ],
                "sys.stdout.fileno": [
                    293
                ],
                "sys.stdout": [
                    293,
                    294
                ],
                "os.O_BINARY": [
                    293
                ],
                "hasattr": [
                    294,
                    807,
                    712,
                    649,
                    809,
                    1126,
                    1801,
                    1134,
                    502
                ],
                "sys.stdout.buffer": [
                    294
                ],
                "stream": [
                    295,
                    296,
                    713,
                    714,
                    307,
                    308
                ],
                "open": [
                    307,
                    295
                ],
                "open_mode": [
                    307,
                    295
                ],
                "IOError": [
                    297,
                    762,
                    1233,
                    769
                ],
                "err.errno": [
                    298
                ],
                "err": [
                    298
                ],
                "errno.EACCES": [
                    298
                ],
                "errno": [
                    298
                ],
                "alt_filename": [
                    307,
                    308,
                    302,
                    303
                ],
                "sanitize_path": [
                    302
                ],
                "timestamp": [
                    313,
                    316,
                    317
                ],
                "timetuple": [
                    930,
                    931,
                    932,
                    314,
                    315,
                    316
                ],
                "email.utils.parsedate_tz": [
                    930,
                    314
                ],
                "email.utils": [
                    930,
                    314,
                    316
                ],
                "email": [
                    930,
                    314,
                    316
                ],
                "timestr": [
                    314
                ],
                "email.utils.mktime_tz": [
                    316
                ],
                "char": [
                    326,
                    328,
                    330,
                    332,
                    334,
                    336,
                    338
                ],
                "ord": [
                    336,
                    1149,
                    1101,
                    326
                ],
                "restricted": [
                    329,
                    331,
                    334,
                    336,
                    348
                ],
                "char.isspace": [
                    334
                ],
                "s": [
                    1781,
                    1410,
                    1411,
                    1413,
                    1414,
                    1415,
                    1656,
                    1302,
                    417,
                    419,
                    422,
                    1464,
                    442,
                    1467,
                    1725,
                    446,
                    1727,
                    1728,
                    1346,
                    452,
                    454,
                    1863,
                    1866,
                    1484,
                    1101,
                    1868,
                    1103,
                    1105,
                    1106,
                    341,
                    342,
                    469,
                    1109,
                    473,
                    474,
                    1114,
                    1369,
                    1117,
                    1124,
                    1127,
                    361,
                    362,
                    1643,
                    364,
                    365,
                    1132,
                    1136,
                    1776,
                    1139,
                    1651,
                    1779,
                    1398,
                    1399,
                    1400,
                    1657,
                    1658,
                    1780,
                    1404,
                    1405,
                    1406
                ],
                "replace": [
                    341,
                    1350
                ],
                "result": [
                    352,
                    353,
                    354,
                    355,
                    342,
                    344,
                    345,
                    346,
                    348,
                    349,
                    350,
                    351
                ],
                "map": [
                    1918,
                    1950,
                    1702,
                    342
                ],
                "replace_insane": [
                    342
                ],
                "is_id": [
                    343
                ],
                "result.replace": [
                    345
                ],
                "result.strip": [
                    346
                ],
                "result.startswith": [
                    348,
                    350
                ],
                "result.lstrip": [
                    352
                ],
                "drive_or_unc": [
                    362,
                    363,
                    364,
                    365,
                    366,
                    371,
                    372
                ],
                "_": [
                    1281,
                    1539,
                    362,
                    364,
                    1810
                ],
                "os.path.splitdrive": [
                    362
                ],
                "os.path.splitunc": [
                    364
                ],
                "norm_path": [
                    370,
                    365,
                    367
                ],
                "split": [
                    1420,
                    365
                ],
                "os.path.normpath": [
                    365
                ],
                "remove_start": [
                    365
                ],
                "os.path.sep": [
                    372,
                    365
                ],
                "norm_path.pop": [
                    367
                ],
                "sanitized_path": [
                    368,
                    372,
                    373
                ],
                "path_part": [
                    369,
                    370
                ],
                "sanitized_path.insert": [
                    372
                ],
                "os.path.join": [
                    373
                ],
                "compat_urllib_request.Request": [
                    379,
                    732,
                    1423
                ],
                "compat_urllib_request": [
                    801,
                    834,
                    2529,
                    676,
                    836,
                    712,
                    713,
                    714,
                    2536,
                    1423,
                    816,
                    818,
                    2546,
                    695,
                    379,
                    732,
                    799
                ],
                "url.startswith": [
                    1697,
                    1877,
                    1879,
                    1881,
                    380,
                    1694
                ],
                "url": [
                    1281,
                    1284,
                    1419,
                    1691,
                    1692,
                    1694,
                    1695,
                    1696,
                    1697,
                    1699,
                    1702,
                    938,
                    940,
                    568,
                    569,
                    713,
                    714,
                    1876,
                    1877,
                    727,
                    728,
                    1879,
                    1881,
                    731,
                    1884,
                    1890,
                    1275,
                    380,
                    1663
                ],
                "kwargs": [
                    801,
                    515,
                    644,
                    645,
                    806,
                    808,
                    522,
                    810,
                    508,
                    813,
                    695,
                    380
                ],
                "el": [
                    386,
                    387,
                    388
                ],
                "iterable": [
                    386
                ],
                "res.append": [
                    388
                ],
                "entity": [
                    395,
                    396,
                    413,
                    398
                ],
                "compat_html_entities.name2codepoint": [
                    395,
                    396
                ],
                "compat_html_entities": [
                    395,
                    396
                ],
                "compat_chr": [
                    408,
                    396
                ],
                "mobj": [
                    1985,
                    1986,
                    1987,
                    398,
                    399,
                    400,
                    1981,
                    1982,
                    1983
                ],
                "numstr": [
                    400,
                    401,
                    403,
                    408
                ],
                "mobj.group": [
                    400,
                    1987,
                    1983
                ],
                "numstr.startswith": [
                    401
                ],
                "base": [
                    408,
                    402,
                    405
                ],
                "int": [
                    1929,
                    1295,
                    408,
                    1437,
                    1451,
                    1728,
                    1987,
                    1352,
                    978,
                    1493,
                    1495,
                    1497,
                    1499,
                    1501,
                    861,
                    862,
                    1503,
                    1785,
                    1146
                ],
                "ValueError": [
                    1793,
                    867,
                    1924,
                    1957,
                    1766,
                    2020,
                    1930,
                    1935,
                    1360,
                    1459,
                    409,
                    1370,
                    1019,
                    1438,
                    927
                ],
                "_htmlentity_transform": [
                    422
                ],
                "sys.getwindowsversion": [
                    426,
                    451
                ],
                "preferredencoding": [
                    485,
                    1132,
                    429,
                    1135,
                    1040
                ],
                "sys.getfilesystemencoding": [
                    1255,
                    431
                ],
                "for_subprocess": [
                    451
                ],
                "s.encode": [
                    1136,
                    1657,
                    1132,
                    454
                ],
                "get_subprocess_encoding": [
                    465,
                    454
                ],
                "b": [
                    460,
                    462,
                    463,
                    465,
                    478
                ],
                "bytes": [
                    484,
                    1288,
                    1544,
                    1290,
                    1291,
                    1292,
                    462,
                    1263,
                    1039,
                    1295,
                    1297
                ],
                "b.decode": [
                    465
                ],
                "s.decode": [
                    473
                ],
                "decodeFilename": [
                    478
                ],
                "optval": [
                    482,
                    483,
                    484,
                    485,
                    487,
                    488
                ],
                "optval.decode": [
                    485
                ],
                "secs": [
                    492,
                    493,
                    494,
                    495,
                    497
                ],
                "opts_no_check_certificate": [
                    504,
                    501,
                    519
                ],
                "params.get": [
                    2055,
                    2060,
                    501,
                    2042,
                    2047
                ],
                "params": [
                    515,
                    803,
                    2055,
                    522,
                    2060,
                    501,
                    696,
                    2042,
                    508,
                    2047
                ],
                "ssl": [
                    517,
                    518,
                    520,
                    656,
                    658,
                    502,
                    503,
                    506
                ],
                "context": [
                    517,
                    518,
                    521,
                    522,
                    503,
                    505,
                    506,
                    508
                ],
                "ssl.create_default_context": [
                    503
                ],
                "ssl.Purpose.SERVER_AUTH": [
                    503
                ],
                "ssl.Purpose": [
                    503
                ],
                "context.check_hostname": [
                    505
                ],
                "context.verify_mode": [
                    506,
                    518
                ],
                "ssl.CERT_NONE": [
                    506,
                    518
                ],
                "YoutubeDLHTTPSHandler": [
                    522,
                    515,
                    508
                ],
                "TypeError": [
                    1673,
                    509
                ],
                "ssl.SSLContext": [
                    517
                ],
                "ssl.PROTOCOL_TLSv1": [
                    658,
                    517
                ],
                "ssl.CERT_REQUIRED": [
                    520
                ],
                "context.set_default_verify_paths": [
                    521
                ],
                "ytdl_is_updateable": [
                    526
                ],
                "update_cmd": [
                    529,
                    531,
                    527
                ],
                "msg": [
                    608,
                    547,
                    549,
                    551,
                    552,
                    587,
                    530,
                    531,
                    532,
                    533
                ],
                "sys.exc_info": [
                    544,
                    555
                ],
                "compat_urllib_error.URLError": [
                    544
                ],
                "compat_urllib_error": [
                    544
                ],
                "socket.timeout": [
                    544
                ],
                "socket": [
                    544
                ],
                "UnavailableVideoError": [
                    544
                ],
                "expected": [
                    545,
                    636,
                    550
                ],
                "video_id": [
                    546,
                    547,
                    557
                ],
                "cause": [
                    548,
                    549,
                    556
                ],
                "bug_reports_message": [
                    551
                ],
                "__init__": [
                    552,
                    587,
                    567
                ],
                "super": [
                    552,
                    587,
                    567
                ],
                "self": [
                    774,
                    1019,
                    1030,
                    1033,
                    778,
                    779,
                    1579,
                    654,
                    656,
                    657,
                    660,
                    1563,
                    1568,
                    801,
                    802,
                    803,
                    1569,
                    1573,
                    1574,
                    807,
                    552,
                    808,
                    554,
                    555,
                    556,
                    557,
                    809,
                    810,
                    560,
                    811,
                    562,
                    812,
                    818,
                    1582,
                    1587,
                    695,
                    567,
                    569,
                    696,
                    699,
                    700,
                    1599,
                    834,
                    1226,
                    587,
                    588,
                    1227,
                    1230,
                    1611,
                    1232,
                    1612,
                    1234,
                    1613,
                    1236,
                    1617,
                    1619,
                    1620,
                    1240,
                    1623,
                    1242,
                    1245,
                    608,
                    1248,
                    1251,
                    2533,
                    2534,
                    2536,
                    1011,
                    2547,
                    1013,
                    1575,
                    1015,
                    1017,
                    1018,
                    635,
                    636
                ],
                "self.traceback": [
                    560,
                    554,
                    562
                ],
                "tb": [
                    554
                ],
                "self.exc_info": [
                    555,
                    588
                ],
                "self.cause": [
                    556
                ],
                "self.video_id": [
                    557
                ],
                "traceback.format_tb": [
                    562
                ],
                "traceback": [
                    562
                ],
                "UnsupportedError": [
                    567
                ],
                "self.url": [
                    569
                ],
                "DownloadError": [
                    587
                ],
                "exc_info": [
                    588
                ],
                "self.msg": [
                    608
                ],
                "self.downloaded": [
                    635
                ],
                "downloaded": [
                    635
                ],
                "self.expected": [
                    636
                ],
                "hc": [
                    645,
                    649,
                    650,
                    661,
                    663
                ],
                "http_class": [
                    645
                ],
                "source_address": [
                    648,
                    646,
                    647
                ],
                "ydl_handler._params.get": [
                    646
                ],
                "ydl_handler._params": [
                    646
                ],
                "ydl_handler": [
                    646
                ],
                "sa": [
                    648,
                    650,
                    654
                ],
                "hc.source_address": [
                    650
                ],
                "sock": [
                    657,
                    660,
                    653
                ],
                "compat_socket_create_connection": [
                    653
                ],
                "self.host": [
                    654
                ],
                "self.port": [
                    654
                ],
                "self.timeout": [
                    654
                ],
                "is_https": [
                    655
                ],
                "self.sock": [
                    656,
                    660
                ],
                "ssl.wrap_socket": [
                    656
                ],
                "self.key_file": [
                    657
                ],
                "self.cert_file": [
                    657
                ],
                "hc.connect": [
                    661
                ],
                "functools.partial": [
                    811,
                    1995,
                    2001,
                    661,
                    699
                ],
                "functools": [
                    811,
                    1995,
                    2001,
                    661,
                    699
                ],
                "_hc_connect": [
                    661
                ],
                "filtered_headers": [
                    673,
                    667,
                    669,
                    670,
                    671
                ],
                "headers": [
                    713,
                    714,
                    667
                ],
                "dict": [
                    1712,
                    670
                ],
                "k": [
                    1712,
                    670
                ],
                "v": [
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1944,
                    1945,
                    1437,
                    670,
                    1443,
                    1455,
                    1711,
                    1712,
                    1458,
                    1738,
                    1739,
                    1740,
                    1741,
                    1742,
                    1743,
                    1744,
                    1745,
                    1749,
                    1750,
                    739,
                    743,
                    1896,
                    1785
                ],
                "filtered_headers.items": [
                    670
                ],
                "k.lower": [
                    670
                ],
                "compat_urllib_request.HTTPHandler": [
                    676,
                    695
                ],
                "compat_urllib_request.HTTPHandler.__init__": [
                    695
                ],
                "self._params": [
                    696,
                    803
                ],
                "self.do_open": [
                    811,
                    699
                ],
                "_create_http_connection": [
                    700,
                    812
                ],
                "compat_http_client.HTTPConnection": [
                    700
                ],
                "compat_http_client": [
                    802,
                    700
                ],
                "req": [
                    736,
                    737,
                    742,
                    743,
                    745,
                    747,
                    2539,
                    749,
                    750,
                    813,
                    752,
                    2542,
                    2547,
                    727,
                    732,
                    701,
                    734,
                    735
                ],
                "zlib.decompress": [
                    706,
                    708
                ],
                "zlib": [
                    706,
                    707,
                    708
                ],
                "data": [
                    706,
                    1283,
                    1284,
                    708,
                    1895,
                    1838,
                    1274
                ],
                "zlib.MAX_WBITS": [
                    706
                ],
                "zlib.error": [
                    707
                ],
                "staticmethod": [
                    710,
                    703
                ],
                "compat_urllib_request.addinfourl": [
                    712,
                    713,
                    714
                ],
                "code": [
                    1733,
                    713,
                    715,
                    2259,
                    2265,
                    1756,
                    2526
                ],
                "ret": [
                    714,
                    715,
                    716,
                    1108,
                    1110
                ],
                "ret.code": [
                    715
                ],
                "req.get_full_url": [
                    747,
                    727
                ],
                "url_escaped": [
                    728,
                    731,
                    734
                ],
                "escape_url": [
                    728,
                    789
                ],
                "req_type": [
                    732,
                    733
                ],
                "req.get_method": [
                    732
                ],
                "HEADRequest": [
                    732
                ],
                "new_req": [
                    736,
                    737,
                    733
                ],
                "req.data": [
                    734
                ],
                "req.headers": [
                    742,
                    745,
                    2539,
                    2542,
                    734
                ],
                "req.origin_req_host": [
                    735
                ],
                "req.unverifiable": [
                    735
                ],
                "new_req.timeout": [
                    736
                ],
                "req.timeout": [
                    736
                ],
                "h": [
                    739,
                    742,
                    743,
                    1096,
                    1073,
                    1109,
                    1822
                ],
                "std_headers.items": [
                    739
                ],
                "h.capitalize": [
                    742
                ],
                "req.add_header": [
                    743
                ],
                "handle_youtubedl_headers": [
                    745
                ],
                "req._Request__original": [
                    749
                ],
                "req._Request__original.partition": [
                    749
                ],
                "req._Request__r_type": [
                    750
                ],
                "req._Request__r_type.partition": [
                    750
                ],
                "old_resp": [
                    774,
                    775,
                    779,
                    780,
                    755
                ],
                "resp": [
                    774,
                    775,
                    777,
                    778,
                    779,
                    780,
                    783,
                    784,
                    755,
                    757,
                    758,
                    791,
                    792,
                    793
                ],
                "resp.headers.get": [
                    784,
                    777,
                    757
                ],
                "resp.headers": [
                    777,
                    784,
                    757,
                    791,
                    792
                ],
                "content": [
                    767,
                    758,
                    759
                ],
                "resp.read": [
                    778,
                    758
                ],
                "gz": [
                    768,
                    778,
                    779,
                    759,
                    761,
                    767
                ],
                "gzip.GzipFile": [
                    767,
                    759
                ],
                "gzip": [
                    767,
                    759
                ],
                "io.BytesIO": [
                    768,
                    778,
                    759,
                    761,
                    767
                ],
                "io": [
                    768,
                    1064,
                    778,
                    1226,
                    759,
                    761,
                    767
                ],
                "uncompressed": [
                    768,
                    761,
                    774
                ],
                "gz.read": [
                    768,
                    761
                ],
                "i": [
                    1101,
                    765,
                    767
                ],
                "range": [
                    765,
                    1622
                ],
                "original_ioerror": [
                    773
                ],
                "self.addinfourl_wrapper": [
                    779,
                    774
                ],
                "old_resp.headers": [
                    779,
                    774
                ],
                "old_resp.url": [
                    779,
                    774
                ],
                "old_resp.code": [
                    779,
                    774
                ],
                "resp.msg": [
                    780,
                    775
                ],
                "old_resp.msg": [
                    780,
                    775
                ],
                "self.deflate": [
                    778
                ],
                "resp.code": [
                    783
                ],
                "location": [
                    784,
                    785,
                    788,
                    789,
                    790
                ],
                "location.encode": [
                    788
                ],
                "location_escaped": [
                    792,
                    789,
                    790
                ],
                "https_request": [
                    795,
                    836
                ],
                "http_request": [
                    795
                ],
                "https_response": [
                    796,
                    837
                ],
                "http_response": [
                    796,
                    837
                ],
                "compat_urllib_request.HTTPSHandler": [
                    801,
                    799
                ],
                "compat_urllib_request.HTTPSHandler.__init__": [
                    801
                ],
                "self._https_conn_class": [
                    802,
                    812
                ],
                "https_conn_class": [
                    802
                ],
                "compat_http_client.HTTPSConnection": [
                    802
                ],
                "self._context": [
                    808
                ],
                "self._check_hostname": [
                    810
                ],
                "compat_urllib_request.HTTPCookieProcessor": [
                    816,
                    818,
                    836,
                    834
                ],
                "compat_urllib_request.HTTPCookieProcessor.__init__": [
                    818
                ],
                "cookiejar": [
                    818
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_response": [
                    834
                ],
                "request": [
                    834
                ],
                "response": [
                    834
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_request": [
                    836
                ],
                "date_str": [
                    992,
                    865,
                    930,
                    998,
                    874,
                    843,
                    971,
                    973,
                    846,
                    878,
                    880,
                    881,
                    975,
                    851,
                    883,
                    1002,
                    855,
                    926
                ],
                "timezone": [
                    865,
                    848,
                    853,
                    857,
                    860
                ],
                "datetime.timedelta": [
                    974,
                    853,
                    857,
                    860,
                    990
                ],
                "datetime": [
                    992,
                    865,
                    932,
                    1028,
                    970,
                    974,
                    853,
                    990,
                    1013,
                    857,
                    860,
                    1017,
                    926
                ],
                "sign": [
                    977,
                    979,
                    859,
                    861,
                    862
                ],
                "date_format": [
                    864,
                    865
                ],
                "format": [
                    864,
                    1512,
                    1514,
                    1519
                ],
                "delimiter": [
                    864
                ],
                "dt": [
                    865,
                    866
                ],
                "datetime.datetime.strptime": [
                    992,
                    865,
                    926
                ],
                "datetime.datetime": [
                    992,
                    865,
                    932,
                    1013,
                    1017,
                    926
                ],
                "calendar.timegm": [
                    866
                ],
                "calendar": [
                    866
                ],
                "dt.timetuple": [
                    866
                ],
                "upload_date": [
                    929,
                    932,
                    933,
                    934,
                    876,
                    926
                ],
                "date_str.replace": [
                    878
                ],
                "format_expressions": [
                    924,
                    885,
                    909,
                    917
                ],
                "day_first": [
                    908
                ],
                "format_expressions.extend": [
                    909,
                    917
                ],
                "expression": [
                    924,
                    926
                ],
                "strftime": [
                    932,
                    926
                ],
                "default_ext": [
                    939,
                    959
                ],
                "guess": [
                    940,
                    941,
                    942,
                    943,
                    957
                ],
                "rpartition": [
                    940
                ],
                "url.partition": [
                    940
                ],
                "guess.rstrip": [
                    957,
                    943
                ],
                "filename.rsplit": [
                    963
                ],
                "sub_lang": [
                    963
                ],
                "sub_format": [
                    963
                ],
                "today": [
                    970,
                    972,
                    974,
                    991
                ],
                "datetime.date.today": [
                    970
                ],
                "datetime.date": [
                    970,
                    1028
                ],
                "match": [
                    998,
                    999,
                    1000,
                    975,
                    976,
                    977,
                    978,
                    981
                ],
                "match.group": [
                    977,
                    978,
                    981
                ],
                "time": [
                    978,
                    980,
                    985,
                    988,
                    990
                ],
                "unit": [
                    981,
                    983,
                    984,
                    986,
                    987,
                    989,
                    990
                ],
                "delta": [
                    990,
                    991
                ],
                "date": [
                    992,
                    1028,
                    1029,
                    1030
                ],
                "match.groups": [
                    1000
                ],
                "start": [
                    1573,
                    1576,
                    1582,
                    1583,
                    1617,
                    1010,
                    1011,
                    1620,
                    1621,
                    1398,
                    1399
                ],
                "self.start": [
                    1030,
                    1033,
                    1011,
                    1013,
                    1018
                ],
                "date_from_str": [
                    1011,
                    1029,
                    1015
                ],
                "datetime.datetime.min.date": [
                    1013
                ],
                "datetime.datetime.min": [
                    1013
                ],
                "end": [
                    1604,
                    1587,
                    1588,
                    1619,
                    1014,
                    1015,
                    1621,
                    1404,
                    1405
                ],
                "self.end": [
                    1030,
                    1033,
                    1015,
                    1017,
                    1018
                ],
                "datetime.datetime.max.date": [
                    1017
                ],
                "datetime.datetime.max": [
                    1017
                ],
                "cls": [
                    1024,
                    2259,
                    2526,
                    2264
                ],
                "day": [
                    1024
                ],
                "classmethod": [
                    2256,
                    2261,
                    1021,
                    2523
                ],
                "self.start.isoformat": [
                    1033
                ],
                "self.end.isoformat": [
                    1033
                ],
                "platform.platform": [
                    1038
                ],
                "platform": [
                    1038
                ],
                "res.decode": [
                    1040
                ],
                "WIN_OUTPUT_IDS": [
                    1073,
                    1067,
                    1054
                ],
                "fileno": [
                    1073,
                    1067,
                    1060
                ],
                "out.fileno": [
                    1060
                ],
                "out": [
                    1539,
                    1544,
                    1545,
                    1546,
                    1060,
                    2003,
                    2007,
                    2009,
                    2011,
                    2013,
                    2016,
                    1122,
                    1123,
                    1126,
                    1127,
                    1130,
                    1133,
                    1134,
                    1135,
                    2032,
                    1137,
                    1139,
                    1140,
                    2038
                ],
                "AttributeError": [
                    1393,
                    1061,
                    1823
                ],
                "io.UnsupportedOperation": [
                    1064
                ],
                "GetStdHandle": [
                    1073,
                    1070
                ],
                "ctypes.WINFUNCTYPE": [
                    1081,
                    1075,
                    1084,
                    1070
                ],
                "ctypes": [
                    1163,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1172,
                    1175,
                    1176,
                    1177,
                    1178,
                    1179,
                    1180,
                    1182,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1191,
                    1070,
                    1071,
                    1072,
                    1200,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079,
                    1204,
                    1081,
                    1211,
                    1084,
                    1085,
                    1086,
                    1087,
                    1088,
                    1094,
                    1109,
                    1385,
                    1389
                ],
                "ctypes.wintypes.HANDLE": [
                    1185,
                    1071,
                    1169,
                    1076,
                    1175,
                    1085
                ],
                "ctypes.wintypes": [
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1175,
                    1176,
                    1177,
                    1178,
                    1179,
                    1182,
                    1185,
                    1186,
                    1187,
                    1188,
                    1191,
                    1071,
                    1076,
                    1077,
                    1078,
                    1079,
                    1081,
                    1085,
                    1086,
                    1088,
                    1094
                ],
                "ctypes.wintypes.DWORD": [
                    1088,
                    1177,
                    1186,
                    1187,
                    1188,
                    1094,
                    1071,
                    1167,
                    1168,
                    1077,
                    1079,
                    1176,
                    1081,
                    1178,
                    1179,
                    1086
                ],
                "ctypes.windll.kernel32": [
                    1072,
                    1172,
                    1078,
                    1081,
                    1087
                ],
                "ctypes.windll": [
                    1072,
                    1172,
                    1078,
                    1081,
                    1087
                ],
                "WriteConsoleW": [
                    1075,
                    1108
                ],
                "ctypes.wintypes.BOOL": [
                    1076,
                    1085,
                    1182,
                    1191
                ],
                "ctypes.wintypes.LPWSTR": [
                    1076
                ],
                "ctypes.POINTER": [
                    1180,
                    1077,
                    1086,
                    1189
                ],
                "ctypes.wintypes.LPVOID": [
                    1166,
                    1165,
                    1078
                ],
                "written": [
                    1109,
                    1079,
                    1113,
                    1116,
                    1117
                ],
                "GetFileType": [
                    1081,
                    1093
                ],
                "FILE_TYPE_CHAR": [
                    1082,
                    1093
                ],
                "FILE_TYPE_REMOTE": [
                    1083,
                    1093
                ],
                "GetConsoleMode": [
                    1084,
                    1094
                ],
                "INVALID_HANDLE_VALUE": [
                    1088,
                    1091
                ],
                "handle": [
                    1091,
                    1093,
                    1094,
                    1201,
                    1202,
                    1208,
                    1209
                ],
                "ctypes.byref": [
                    1109,
                    1094
                ],
                "not_a_console": [
                    1096
                ],
                "next": [
                    1101
                ],
                "enumerate": [
                    1101
                ],
                "StopIteration": [
                    1102
                ],
                "count": [
                    1112,
                    1106,
                    1109
                ],
                "min": [
                    1106
                ],
                "next_nonbmp_pos": [
                    1106
                ],
                "written.value": [
                    1113,
                    1116,
                    1117
                ],
                "sys.stderr": [
                    1123
                ],
                "_windows_write_string": [
                    1127
                ],
                "getattr": [
                    1431,
                    1130,
                    1135
                ],
                "byt": [
                    1136,
                    1137,
                    1132,
                    1133
                ],
                "out.write": [
                    1139,
                    1133
                ],
                "enc": [
                    1136,
                    1861,
                    1863,
                    1135
                ],
                "out.buffer.write": [
                    1137
                ],
                "out.buffer": [
                    1137
                ],
                "out.flush": [
                    1140
                ],
                "bs": [
                    1144,
                    1146,
                    1147,
                    1149
                ],
                "list": [
                    1579,
                    1147,
                    2063,
                    1623
                ],
                "xs": [
                    1153,
                    1155
                ],
                "struct_pack": [
                    1155,
                    1685
                ],
                "ctypes.Structure": [
                    1163
                ],
                "_fields_": [
                    1164
                ],
                "kernel32": [
                    1172,
                    1173,
                    1183
                ],
                "LockFileEx": [
                    1202,
                    1182,
                    1173,
                    1174
                ],
                "kernel32.LockFileEx": [
                    1173
                ],
                "LockFileEx.argtypes": [
                    1174
                ],
                "OVERLAPPED": [
                    1196,
                    1180,
                    1189
                ],
                "LockFileEx.restype": [
                    1182
                ],
                "UnlockFileEx": [
                    1184,
                    1191,
                    1209,
                    1183
                ],
                "kernel32.UnlockFileEx": [
                    1183
                ],
                "UnlockFileEx.argtypes": [
                    1184
                ],
                "UnlockFileEx.restype": [
                    1191
                ],
                "whole_low": [
                    1192,
                    1210,
                    1203
                ],
                "whole_high": [
                    1193,
                    1210,
                    1203
                ],
                "overlapped": [
                    1196,
                    1197,
                    1198,
                    1199,
                    1200
                ],
                "overlapped.Offset": [
                    1197
                ],
                "overlapped.OffsetHigh": [
                    1198
                ],
                "overlapped.hEvent": [
                    1199
                ],
                "f._lock_file_overlapped_p": [
                    1200,
                    1210,
                    1203,
                    1207
                ],
                "ctypes.pointer": [
                    1200
                ],
                "msvcrt.get_osfhandle": [
                    1208,
                    1201
                ],
                "f.fileno": [
                    1208,
                    1201
                ],
                "exclusive": [
                    1232,
                    1217,
                    1202,
                    1230
                ],
                "ctypes.FormatError": [
                    1211,
                    1204
                ],
                "fcntl.flock": [
                    1217,
                    1220
                ],
                "fcntl": [
                    1217,
                    1220
                ],
                "fcntl.LOCK_EX": [
                    1217
                ],
                "fcntl.LOCK_SH": [
                    1217
                ],
                "fcntl.LOCK_UN": [
                    1220
                ],
                "mode": [
                    1225,
                    1226,
                    1227
                ],
                "self.f": [
                    1248,
                    1251,
                    1226,
                    1232,
                    1234,
                    1240,
                    1242,
                    1245
                ],
                "io.open": [
                    1226
                ],
                "self.mode": [
                    1227,
                    1230
                ],
                "_lock_file": [
                    1232
                ],
                "self.f.close": [
                    1242,
                    1234
                ],
                "_unlock_file": [
                    1240
                ],
                "iter": [
                    1245
                ],
                "self.f.write": [
                    1248
                ],
                "self.f.read": [
                    1251
                ],
                "quoted_args": [
                    1266,
                    1267,
                    1260
                ],
                "a": [
                    1806,
                    1262,
                    1263,
                    1265,
                    1266
                ],
                "a.decode": [
                    1265
                ],
                "quoted_args.append": [
                    1266
                ],
                "pipes.quote": [
                    1266
                ],
                "pipes": [
                    1266
                ],
                "sdata": [
                    1273,
                    1282,
                    1275,
                    1281
                ],
                "compat_urllib_parse.urlencode": [
                    1273,
                    1706
                ],
                "compat_urllib_parse": [
                    1706,
                    1273,
                    1658
                ],
                "json.dumps": [
                    1274
                ],
                "smug_url": [
                    1280,
                    1281,
                    1279
                ],
                "smug_url.rpartition": [
                    1281
                ],
                "jsond": [
                    1282,
                    1283
                ],
                "compat_parse_qs": [
                    1282
                ],
                "json.loads": [
                    1283
                ],
                "float": [
                    1505,
                    1987,
                    1352,
                    1291,
                    1297,
                    1458,
                    1983
                ],
                "exponent": [
                    1296,
                    1297,
                    1293,
                    1295
                ],
                "math.log": [
                    1295
                ],
                "math": [
                    1295
                ],
                "suffix": [
                    1296,
                    1298
                ],
                "converted": [
                    1297,
                    1298
                ],
                "_UNIT_TABLE": [
                    1344,
                    1307,
                    1351
                ],
                "units_re": [
                    1344,
                    1346
                ],
                "u": [
                    1344
                ],
                "num_str": [
                    1352,
                    1350
                ],
                "mult": [
                    1352,
                    1351
                ],
                "ENGLISH_MONTH_NAMES.index": [
                    1359
                ],
                "index": [
                    1369,
                    2033,
                    2022
                ],
                "abbrev": [
                    1369
                ],
                "xml_str": [
                    1379
                ],
                "title": [
                    1388,
                    1383
                ],
                "libc": [
                    1392,
                    1385
                ],
                "ctypes.cdll.LoadLibrary": [
                    1385
                ],
                "ctypes.cdll": [
                    1385
                ],
                "title_bytes": [
                    1388,
                    1389,
                    1390
                ],
                "title.encode": [
                    1388
                ],
                "buf": [
                    1392,
                    1389,
                    1390
                ],
                "ctypes.create_string_buffer": [
                    1389
                ],
                "buf.value": [
                    1390
                ],
                "libc.prctl": [
                    1392
                ],
                "s.startswith": [
                    1398
                ],
                "s.endswith": [
                    1404
                ],
                "quote": [
                    1412,
                    1413
                ],
                "compat_urlparse.urlparse": [
                    1419
                ],
                "compat_urlparse": [
                    1419
                ],
                "path.strip": [
                    1420
                ],
                "get_attr": [
                    1429,
                    1431
                ],
                "invscale": [
                    1458,
                    1437
                ],
                "scale": [
                    1458,
                    1437
                ],
                "int_str": [
                    1448,
                    1450,
                    1451
                ],
                "compat_basestring": [
                    1464,
                    1711
                ],
                "s.strip": [
                    1467
                ],
                "float_or_none": [
                    1489,
                    1491
                ],
                "real_ext": [
                    1510,
                    1512,
                    1513,
                    1518,
                    1520
                ],
                "os.path.splitext": [
                    1518,
                    1510
                ],
                "expected_real_ext": [
                    1520,
                    1513
                ],
                "ext": [
                    1512,
                    1514,
                    1521,
                    1884,
                    1885,
                    1887
                ],
                "communicate": [
                    1528,
                    1539
                ],
                "subprocess.Popen": [
                    1528,
                    1539
                ],
                "subprocess": [
                    1528,
                    1539,
                    1541
                ],
                "exe": [
                    1528,
                    1531,
                    1540
                ],
                "subprocess.PIPE": [
                    1528,
                    1541
                ],
                "encodeArgument": [
                    1540
                ],
                "subprocess.STDOUT": [
                    1541
                ],
                "out.decode": [
                    1545
                ],
                "detect_exe_version": [
                    1546
                ],
                "version_re": [
                    1552,
                    1553,
                    1546,
                    1551
                ],
                "unrecognized": [
                    1546,
                    1557
                ],
                "output": [
                    1553,
                    1550
                ],
                "self.getslice": [
                    1563
                ],
                "PagedList": [
                    1609,
                    1566
                ],
                "self._pagefunc": [
                    1568,
                    1611,
                    1579,
                    1623
                ],
                "pagefunc": [
                    1568,
                    1611
                ],
                "self._pagesize": [
                    1569,
                    1573,
                    1574,
                    1575,
                    1613,
                    1582,
                    1617,
                    1587,
                    1619,
                    1620,
                    1599
                ],
                "pagesize": [
                    1569,
                    1613
                ],
                "pagenum": [
                    1573,
                    1574,
                    1575,
                    1579,
                    1622,
                    1623
                ],
                "itertools.count": [
                    1573,
                    2022
                ],
                "itertools": [
                    1573,
                    2022
                ],
                "firstid": [
                    1588,
                    1574,
                    1583
                ],
                "nextfirstid": [
                    1604,
                    1575,
                    1576,
                    1583,
                    1588
                ],
                "page_results": [
                    1592,
                    1593,
                    1579,
                    1599
                ],
                "startv": [
                    1592,
                    1599,
                    1581,
                    1591
                ],
                "endv": [
                    1592,
                    1586,
                    1591
                ],
                "res.extend": [
                    1632,
                    1593,
                    1634
                ],
                "self._pagecount": [
                    1619,
                    1612
                ],
                "pagecount": [
                    1612
                ],
                "start_page": [
                    1617,
                    1620,
                    1622
                ],
                "end_page": [
                    1618,
                    1622
                ],
                "skip_elems": [
                    1624,
                    1625,
                    1626,
                    1620
                ],
                "only_more": [
                    1621,
                    1627,
                    1628,
                    1629,
                    1631
                ],
                "page": [
                    1632,
                    1634,
                    1623,
                    1625,
                    1628,
                    1629,
                    1631
                ],
                "unicode_escape": [
                    1642,
                    1647,
                    1650,
                    1639
                ],
                "codecs.getdecoder": [
                    1647,
                    1639
                ],
                "codecs": [
                    1647,
                    1639
                ],
                "compat_urllib_parse.quote": [
                    1658
                ],
                "url_parsed": [
                    1664,
                    1665,
                    1666,
                    1667,
                    1668,
                    1663
                ],
                "compat_urllib_parse_urlparse": [
                    1890,
                    1663
                ],
                "geturl": [
                    1664
                ],
                "url_parsed._replace": [
                    1664
                ],
                "escape_rfc3986": [
                    1665,
                    1666,
                    1667,
                    1668
                ],
                "url_parsed.path": [
                    1665
                ],
                "url_parsed.params": [
                    1666
                ],
                "url_parsed.query": [
                    1667
                ],
                "url_parsed.fragment": [
                    1668
                ],
                "struct.pack": [
                    1672,
                    1685,
                    1678
                ],
                "struct": [
                    1672,
                    1678,
                    1683,
                    1685,
                    1686
                ],
                "spec": [
                    1676,
                    1677,
                    1678,
                    1681,
                    1682,
                    1683
                ],
                "spec.encode": [
                    1682,
                    1677
                ],
                "struct.unpack": [
                    1683,
                    1686
                ],
                "struct_unpack": [
                    1686
                ],
                "url.decode": [
                    1692
                ],
                "BOM_UTF8": [
                    1693,
                    1694,
                    1695
                ],
                "url.strip": [
                    1696
                ],
                "contextlib.closing": [
                    1701
                ],
                "contextlib": [
                    1701
                ],
                "batch_fd": [
                    1701
                ],
                "fd": [
                    1701,
                    1702
                ],
                "fixup": [
                    1702
                ],
                "kargs": [
                    1706
                ],
                "v.encode": [
                    1711
                ],
                "d.items": [
                    1712
                ],
                "d": [
                    1712
                ],
                "US_RATINGS": [
                    1728,
                    1715
                ],
                "US_RATINGS.get": [
                    1728
                ],
                "v.startswith": [
                    1741,
                    1743
                ],
                "fix_kv": [
                    1756
                ],
                "quality_ids.index": [
                    1765
                ],
                "quality_ids": [
                    1765
                ],
                "qid": [
                    1765
                ],
                "q": [
                    1768
                ],
                "DEFAULT_OUTTMPL": [
                    1771
                ],
                "ELLIPSES": [
                    1778,
                    1780
                ],
                "length": [
                    1779,
                    1780
                ],
                "tuple": [
                    1785,
                    1898
                ],
                "e": [
                    1832,
                    1785,
                    1830,
                    1831
                ],
                "re.split": [
                    1785
                ],
                "version": [
                    1792,
                    1789
                ],
                "assume_new": [
                    1794,
                    1790
                ],
                "version_tuple": [
                    1792
                ],
                "limit": [
                    1792
                ],
                "get": [
                    1801,
                    1812
                ],
                "globals": [
                    1801
                ],
                "zipimporter": [
                    1801
                ],
                "shlex_quote": [
                    1806
                ],
                "mt.rpartition": [
                    1810
                ],
                "mt": [
                    1810
                ],
                "url_handle.headers": [
                    1821,
                    1822
                ],
                "url_handle": [
                    1824,
                    1821,
                    1822
                ],
                "getheader": [
                    1824,
                    1826,
                    1834,
                    1822
                ],
                "url_handle.info": [
                    1824
                ],
                "cd": [
                    1826,
                    1827,
                    1828
                ],
                "determine_ext": [
                    1884,
                    1830
                ],
                "mimetype2ext": [
                    1834
                ],
                "mime_type": [
                    1838
                ],
                "base64.b64encode": [
                    1838
                ],
                "base64": [
                    1838
                ],
                "age_limit": [
                    1848,
                    1844
                ],
                "content_limit": [
                    1848,
                    1846
                ],
                "BOMS": [
                    1861,
                    1854
                ],
                "bom": [
                    1861,
                    1862,
                    1863
                ],
                "first_bytes.startswith": [
                    1862
                ],
                "first_bytes": [
                    1866,
                    1862,
                    1863
                ],
                "first_bytes.decode": [
                    1866
                ],
                "protocol": [
                    1872,
                    1873,
                    1874
                ],
                "info_dict.get": [
                    1872,
                    1972
                ],
                "info_dict": [
                    1872,
                    1969,
                    1972,
                    1876
                ],
                "scheme": [
                    1890
                ],
                "table": [
                    1896,
                    1898,
                    1895
                ],
                "header_row": [
                    1895
                ],
                "max_lens": [
                    1896,
                    1897
                ],
                "max": [
                    1896
                ],
                "col": [
                    1896
                ],
                "zip": [
                    1896,
                    2022
                ],
                "format_str": [
                    1897,
                    1898
                ],
                "ml": [
                    1897
                ],
                "row": [
                    1898
                ],
                "COMPARISON_OPERATORS": [
                    1921,
                    1918,
                    1902
                ],
                "operator.lt": [
                    1903
                ],
                "operator": [
                    1903,
                    1904,
                    1905,
                    1906,
                    1907,
                    1908
                ],
                "operator.le": [
                    1904
                ],
                "operator.gt": [
                    1905
                ],
                "operator.ge": [
                    1906
                ],
                "operator.eq": [
                    1907
                ],
                "operator.ne": [
                    1908
                ],
                "operator_rex": [
                    1951,
                    1947,
                    1910,
                    1919
                ],
                "COMPARISON_OPERATORS.keys": [
                    1918
                ],
                "operator_rex.search": [
                    1951,
                    1919
                ],
                "filter_part": [
                    1957,
                    1964,
                    1937,
                    1919,
                    1951
                ],
                "op": [
                    1955,
                    1921,
                    1953,
                    1941
                ],
                "comparison_value": [
                    1926,
                    1929,
                    1931,
                    1932,
                    1933,
                    1934,
                    1941
                ],
                "parse_filesize": [
                    1931,
                    1933
                ],
                "actual_value": [
                    1954,
                    1955,
                    1938,
                    1939,
                    1941
                ],
                "dct.get": [
                    1954,
                    1938
                ],
                "dct": [
                    1954,
                    1938,
                    1964
                ],
                "UNARY_OPERATORS": [
                    1953,
                    1950,
                    1943
                ],
                "UNARY_OPERATORS.keys": [
                    1950
                ],
                "all": [
                    1963
                ],
                "_match_one": [
                    1964
                ],
                "filter_str.split": [
                    1964
                ],
                "filter_str": [
                    1969,
                    1964,
                    1973
                ],
                "match_str": [
                    1969
                ],
                "video_title": [
                    1972,
                    1973
                ],
                "_match_func": [
                    1974
                ],
                "time_expr": [
                    1985,
                    1978,
                    1981
                ],
                "seconds": [
                    1991
                ],
                "_x": [
                    2008,
                    2017,
                    1995,
                    2006
                ],
                "xpath_with_ns": [
                    1995
                ],
                "str_or_empty": [
                    2001,
                    2003,
                    2007,
                    2009,
                    2011
                ],
                "str_or_none": [
                    2001
                ],
                "node.text": [
                    2003
                ],
                "child": [
                    2005,
                    2006,
                    2007,
                    2008,
                    2009,
                    2011
                ],
                "child.tag": [
                    2008,
                    2006
                ],
                "child.tail": [
                    2007
                ],
                "parse_node": [
                    2009,
                    2036
                ],
                "xml.etree.ElementTree.tostring": [
                    2011
                ],
                "xml.etree.ElementTree": [
                    2011
                ],
                "xml.etree": [
                    2011
                ],
                "xml": [
                    2011
                ],
                "dfxp": [
                    2017,
                    2015
                ],
                "compat_etree_fromstring": [
                    2015
                ],
                "dfxp_data.encode": [
                    2015
                ],
                "dfxp_data": [
                    2015
                ],
                "paras": [
                    2017,
                    2019,
                    2022
                ],
                "dfxp.findall": [
                    2017
                ],
                "para": [
                    2022,
                    2023,
                    2024,
                    2025,
                    2036
                ],
                "begin_time": [
                    2026,
                    2031,
                    2034,
                    2023
                ],
                "parse_dfxp_time_expr": [
                    2024,
                    2025,
                    2023
                ],
                "para.attrib.get": [
                    2024,
                    2025,
                    2023
                ],
                "para.attrib": [
                    2024,
                    2025,
                    2023
                ],
                "end_time": [
                    2024,
                    2035,
                    2028,
                    2031
                ],
                "dur": [
                    2025,
                    2029,
                    2031
                ],
                "out.append": [
                    2032
                ],
                "srt_subtitles_timecode": [
                    2034,
                    2035
                ],
                "param": [
                    2048,
                    2050,
                    2051,
                    2055,
                    2056,
                    2060,
                    2042,
                    2043,
                    2047
                ],
                "command_option": [
                    2051,
                    2056,
                    2050,
                    2043
                ],
                "bool": [
                    2048
                ],
                "separator": [
                    2049,
                    2050
                ],
                "true_value": [
                    2050,
                    2051
                ],
                "false_value": [
                    2050,
                    2051
                ],
                "expected_value": [
                    2056
                ],
                "ex_args": [
                    2064,
                    2060,
                    2061,
                    2063
                ],
                "_lang_map": [
                    2069
                ],
                "cls._lang_map.get": [
                    2259
                ],
                "cls._lang_map": [
                    2264,
                    2259
                ],
                "short_name": [
                    2264,
                    2266
                ],
                "long_name": [
                    2264,
                    2265
                ],
                "cls._lang_map.items": [
                    2264
                ],
                "_country_map": [
                    2271
                ],
                "cls._country_map.get": [
                    2526
                ],
                "cls._country_map": [
                    2526
                ],
                "code.upper": [
                    2526
                ],
                "compat_urllib_request.ProxyHandler": [
                    2536,
                    2529,
                    2546
                ],
                "setattr": [
                    2533
                ],
                "self.proxy_open": [
                    2534
                ],
                "meth": [
                    2535
                ],
                "r": [
                    2535
                ],
                "proxy": [
                    2544,
                    2547,
                    2541,
                    2535
                ],
                "compat_urllib_request.ProxyHandler.__init__": [
                    2536
                ],
                "proxies": [
                    2536
                ],
                "req_proxy": [
                    2539,
                    2540,
                    2541
                ],
                "req.headers.get": [
                    2539
                ],
                "compat_urllib_request.ProxyHandler.proxy_open": [
                    2546
                ]
            },
            "filtered_variables_in_file": {
                "compiled_regex_type": [
                    56
                ],
                "re.compile": [
                    56,
                    1947,
                    1910
                ],
                "re": [
                    270,
                    271,
                    398,
                    273,
                    146,
                    1553,
                    148,
                    1947,
                    1950,
                    1828,
                    421,
                    1450,
                    941,
                    56,
                    1469,
                    1981,
                    1727,
                    1344,
                    1345,
                    1985,
                    1732,
                    1868,
                    846,
                    975,
                    1742,
                    849,
                    1745,
                    341,
                    1752,
                    1757,
                    1376,
                    998,
                    1640,
                    880,
                    369,
                    242,
                    881,
                    883,
                    1648,
                    1910,
                    1785,
                    250,
                    1918
                ],
                "std_headers": [
                    58,
                    739
                ],
                "NO_DEFAULT": [
                    224,
                    67,
                    196,
                    206,
                    211,
                    181,
                    221
                ],
                "ENGLISH_MONTH_NAMES": [
                    1369,
                    69,
                    1359
                ],
                "pref": [
                    81,
                    82,
                    84,
                    86
                ],
                "locale.getpreferredencoding": [
                    81
                ],
                "locale": [
                    81
                ],
                "encode": [
                    1706,
                    82,
                    1712
                ],
                "fn": [
                    98,
                    131,
                    100,
                    134,
                    107,
                    108,
                    92
                ],
                "encodeFilename": [
                    474,
                    307,
                    92,
                    295
                ],
                "sys.version_info": [
                    514,
                    643,
                    363,
                    459,
                    747,
                    1131,
                    143,
                    114,
                    787,
                    183,
                    1656,
                    93,
                    445
                ],
                "sys": [
                    514,
                    643,
                    1159,
                    1801,
                    143,
                    787,
                    544,
                    291,
                    293,
                    294,
                    426,
                    555,
                    431,
                    183,
                    445,
                    451,
                    459,
                    93,
                    1123,
                    1126,
                    1255,
                    360,
                    363,
                    747,
                    1131,
                    114,
                    1656,
                    127
                ],
                "sys.platform": [
                    291,
                    451,
                    1126,
                    1159,
                    360,
                    426,
                    93,
                    127
                ],
                "encoding": [
                    98,
                    100,
                    1126,
                    1255,
                    1256,
                    1226,
                    1132,
                    429,
                    1261,
                    431,
                    432,
                    433,
                    434,
                    1135,
                    1265,
                    1711,
                    94
                ],
                "get_filesystem_encoding": [
                    1261,
                    94
                ],
                "path_basename": [
                    98,
                    107,
                    102
                ],
                "decode": [
                    98,
                    100,
                    1863,
                    1838,
                    788
                ],
                "os.path.basename": [
                    98,
                    102
                ],
                "os.path": [
                    98,
                    100,
                    102,
                    103,
                    1510,
                    362,
                    364,
                    365,
                    1518,
                    372,
                    373
                ],
                "os": [
                    98,
                    131,
                    100,
                    293,
                    102,
                    103,
                    134,
                    137,
                    362,
                    1510,
                    364,
                    365,
                    1518,
                    372,
                    373
                ],
                "path_dirname": [
                    108,
                    100,
                    103
                ],
                "os.path.dirname": [
                    100,
                    103
                ],
                "args": [
                    1248,
                    801,
                    1251,
                    1540,
                    645,
                    105,
                    1706,
                    1262,
                    1678,
                    1806,
                    115,
                    1683,
                    117,
                    695,
                    1528,
                    122,
                    380
                ],
                "args.update": [
                    117
                ],
                "tf": [
                    134,
                    137,
                    122,
                    125,
                    126
                ],
                "tempfile.NamedTemporaryFile": [
                    122
                ],
                "tempfile": [
                    122
                ],
                "compat_kwargs": [
                    122
                ],
                "json.dump": [
                    126
                ],
                "json": [
                    1274,
                    1283,
                    126
                ],
                "obj": [
                    126
                ],
                "os.unlink": [
                    131
                ],
                "os.rename": [
                    134
                ],
                "tf.name": [
                    137,
                    134
                ],
                "os.remove": [
                    137
                ],
                "re.match": [
                    1345,
                    1985,
                    1828,
                    998,
                    1868,
                    941,
                    398,
                    975,
                    880,
                    1981,
                    146,
                    148,
                    1469,
                    1727
                ],
                "key": [
                    161,
                    227,
                    231,
                    146,
                    149,
                    222,
                    159
                ],
                "val": [
                    161,
                    147,
                    148,
                    149
                ],
                "expr": [
                    149,
                    150
                ],
                "xpath": [
                    227,
                    199,
                    187,
                    190,
                    207,
                    188,
                    149,
                    214,
                    184,
                    185,
                    155,
                    156,
                    222,
                    158
                ],
                "node.find": [
                    185,
                    150
                ],
                "node": [
                    207,
                    2003,
                    2005,
                    150,
                    185,
                    222,
                    158
                ],
                "compat_str": [
                    419,
                    1124,
                    1443,
                    934,
                    487,
                    1383,
                    1896,
                    1897,
                    1676,
                    187,
                    1550,
                    1681,
                    1042,
                    469,
                    1656,
                    442,
                    155,
                    1691
                ],
                "xpath.encode": [
                    184,
                    156
                ],
                "f": [
                    161,
                    162,
                    1217,
                    1220,
                    1200,
                    1201,
                    1203,
                    1207,
                    1208,
                    1210,
                    158,
                    159
                ],
                "node.findall": [
                    158
                ],
                "f.attrib": [
                    161,
                    159
                ],
                "f.attrib.get": [
                    161
                ],
                "components": [
                    170,
                    172
                ],
                "c.split": [
                    170
                ],
                "c": [
                    170,
                    172,
                    173,
                    174,
                    1101,
                    176,
                    1149
                ],
                "path.split": [
                    170
                ],
                "path": [
                    170,
                    1419,
                    1420
                ],
                "replaced": [
                    177,
                    178,
                    171,
                    174
                ],
                "replaced.append": [
                    177,
                    174
                ],
                "ns": [
                    176,
                    177
                ],
                "tag": [
                    176,
                    177
                ],
                "ns_map": [
                    177
                ],
                "join": [
                    1344,
                    1000,
                    1897,
                    1898,
                    1806,
                    178,
                    1267,
                    562,
                    1950,
                    342,
                    2038,
                    1918
                ],
                "n": [
                    192,
                    223,
                    195,
                    231,
                    203,
                    207,
                    208,
                    209,
                    210,
                    218,
                    188,
                    222,
                    191
                ],
                "_find_xpath": [
                    188,
                    191
                ],
                "xp": [
                    190,
                    191
                ],
                "default": [
                    224,
                    225,
                    1280,
                    1443,
                    196,
                    197,
                    2062,
                    207,
                    208,
                    1456,
                    211,
                    212,
                    1460,
                    1435,
                    1439
                ],
                "fatal": [
                    226,
                    213,
                    198,
                    207
                ],
                "name": [
                    227,
                    228,
                    1510,
                    199,
                    200,
                    1512,
                    1518,
                    207,
                    1359,
                    1520,
                    214,
                    215
                ],
                "ExtractorError": [
                    228,
                    200,
                    552,
                    565,
                    215,
                    572
                ],
                "xpath_element": [
                    207
                ],
                "n.text": [
                    218,
                    210
                ],
                "find_xpath_attr": [
                    222
                ],
                "n.attrib": [
                    231
                ],
                "get_element_by_attribute": [
                    236
                ],
                "html": [
                    265,
                    266,
                    236,
                    269,
                    270,
                    271,
                    273,
                    275,
                    276,
                    250
                ],
                "m": [
                    1920,
                    1921,
                    1922,
                    1923,
                    1925,
                    1926,
                    1757,
                    1929,
                    1931,
                    1933,
                    1553,
                    1554,
                    1555,
                    1937,
                    1938,
                    1940,
                    1951,
                    1952,
                    1953,
                    1954,
                    1828,
                    1829,
                    422,
                    1830,
                    1469,
                    1727,
                    1728,
                    1345,
                    1347,
                    1350,
                    1351,
                    1738,
                    1485,
                    1488,
                    849,
                    1489,
                    1490,
                    852,
                    341,
                    1491,
                    855,
                    856,
                    1492,
                    1493,
                    859,
                    1494,
                    861,
                    862,
                    1495,
                    1496,
                    1497,
                    1498,
                    1499,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1505,
                    1642,
                    1749,
                    242,
                    1650,
                    252,
                    254,
                    1919
                ],
                "re.search": [
                    849,
                    242,
                    1553
                ],
                "re.escape": [
                    1344,
                    250,
                    1950,
                    1918
                ],
                "attribute": [
                    250
                ],
                "value": [
                    1088,
                    250
                ],
                "res": [
                    256,
                    257,
                    385,
                    259,
                    387,
                    388,
                    389,
                    1038,
                    1039,
                    1040,
                    1042,
                    1043,
                    1810,
                    1816,
                    1572,
                    1593,
                    1606,
                    1487,
                    1616,
                    1493,
                    1495,
                    1752,
                    1497,
                    1499,
                    1501,
                    1757,
                    1503,
                    1632,
                    1505,
                    1506,
                    1634,
                    1635,
                    1758,
                    254
                ],
                "m.group": [
                    1921,
                    1922,
                    1923,
                    1925,
                    1926,
                    1757,
                    1929,
                    1931,
                    1933,
                    1937,
                    1938,
                    1555,
                    1940,
                    1953,
                    1954,
                    422,
                    1830,
                    1728,
                    1350,
                    1351,
                    1738,
                    1488,
                    1489,
                    1490,
                    1491,
                    1492,
                    341,
                    1493,
                    1495,
                    1496,
                    855,
                    856,
                    1494,
                    859,
                    861,
                    862,
                    1497,
                    1498,
                    1499,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1505,
                    1749,
                    1642,
                    1650,
                    254
                ],
                "res.startswith": [
                    256
                ],
                "unescapeHTML": [
                    275,
                    259
                ],
                "html.replace": [
                    269
                ],
                "re.sub": [
                    1376,
                    1732,
                    421,
                    1640,
                    1450,
                    1752,
                    270,
                    271,
                    846,
                    273,
                    369,
                    881,
                    883,
                    341,
                    1648,
                    1742,
                    1745,
                    1757
                ],
                "html.strip": [
                    276
                ],
                "filename": [
                    290,
                    963,
                    294,
                    295,
                    296,
                    1510,
                    1226,
                    1514,
                    302,
                    303,
                    1518,
                    1520
                ],
                "msvcrt.setmode": [
                    293
                ],
                "msvcrt": [
                    1208,
                    1201,
                    293
                ],
                "sys.stdout.fileno": [
                    293
                ],
                "sys.stdout": [
                    293,
                    294
                ],
                "os.O_BINARY": [
                    293
                ],
                "sys.stdout.buffer": [
                    294
                ],
                "stream": [
                    295,
                    296,
                    713,
                    714,
                    307,
                    308
                ],
                "open_mode": [
                    307,
                    295
                ],
                "err.errno": [
                    298
                ],
                "err": [
                    298
                ],
                "errno.EACCES": [
                    298
                ],
                "errno": [
                    298
                ],
                "alt_filename": [
                    307,
                    308,
                    302,
                    303
                ],
                "sanitize_path": [
                    302
                ],
                "timestamp": [
                    313,
                    316,
                    317
                ],
                "timetuple": [
                    930,
                    931,
                    932,
                    314,
                    315,
                    316
                ],
                "email.utils.parsedate_tz": [
                    930,
                    314
                ],
                "email.utils": [
                    930,
                    314,
                    316
                ],
                "email": [
                    930,
                    314,
                    316
                ],
                "timestr": [
                    314
                ],
                "email.utils.mktime_tz": [
                    316
                ],
                "char": [
                    326,
                    328,
                    330,
                    332,
                    334,
                    336,
                    338
                ],
                "restricted": [
                    329,
                    331,
                    334,
                    336,
                    348
                ],
                "char.isspace": [
                    334
                ],
                "s": [
                    1781,
                    1410,
                    1411,
                    1413,
                    1414,
                    1415,
                    1656,
                    1302,
                    417,
                    419,
                    422,
                    1464,
                    442,
                    1467,
                    1725,
                    446,
                    1727,
                    1728,
                    1346,
                    452,
                    454,
                    1863,
                    1866,
                    1484,
                    1101,
                    1868,
                    1103,
                    1105,
                    1106,
                    341,
                    342,
                    469,
                    1109,
                    473,
                    474,
                    1114,
                    1369,
                    1117,
                    1124,
                    1127,
                    361,
                    362,
                    1643,
                    364,
                    365,
                    1132,
                    1136,
                    1776,
                    1139,
                    1651,
                    1779,
                    1398,
                    1399,
                    1400,
                    1657,
                    1658,
                    1780,
                    1404,
                    1405,
                    1406
                ],
                "replace": [
                    341,
                    1350
                ],
                "result": [
                    352,
                    353,
                    354,
                    355,
                    342,
                    344,
                    345,
                    346,
                    348,
                    349,
                    350,
                    351
                ],
                "replace_insane": [
                    342
                ],
                "is_id": [
                    343
                ],
                "result.replace": [
                    345
                ],
                "result.strip": [
                    346
                ],
                "result.startswith": [
                    348,
                    350
                ],
                "result.lstrip": [
                    352
                ],
                "drive_or_unc": [
                    362,
                    363,
                    364,
                    365,
                    366,
                    371,
                    372
                ],
                "_": [
                    1281,
                    1539,
                    362,
                    364,
                    1810
                ],
                "os.path.splitdrive": [
                    362
                ],
                "os.path.splitunc": [
                    364
                ],
                "norm_path": [
                    370,
                    365,
                    367
                ],
                "split": [
                    1420,
                    365
                ],
                "os.path.normpath": [
                    365
                ],
                "remove_start": [
                    365
                ],
                "os.path.sep": [
                    372,
                    365
                ],
                "norm_path.pop": [
                    367
                ],
                "sanitized_path": [
                    368,
                    372,
                    373
                ],
                "path_part": [
                    369,
                    370
                ],
                "sanitized_path.insert": [
                    372
                ],
                "os.path.join": [
                    373
                ],
                "compat_urllib_request.Request": [
                    379,
                    732,
                    1423
                ],
                "compat_urllib_request": [
                    801,
                    834,
                    2529,
                    676,
                    836,
                    712,
                    713,
                    714,
                    2536,
                    1423,
                    816,
                    818,
                    2546,
                    695,
                    379,
                    732,
                    799
                ],
                "url.startswith": [
                    1697,
                    1877,
                    1879,
                    1881,
                    380,
                    1694
                ],
                "url": [
                    1281,
                    1284,
                    1419,
                    1691,
                    1692,
                    1694,
                    1695,
                    1696,
                    1697,
                    1699,
                    1702,
                    938,
                    940,
                    568,
                    569,
                    713,
                    714,
                    1876,
                    1877,
                    727,
                    728,
                    1879,
                    1881,
                    731,
                    1884,
                    1890,
                    1275,
                    380,
                    1663
                ],
                "kwargs": [
                    801,
                    515,
                    644,
                    645,
                    806,
                    808,
                    522,
                    810,
                    508,
                    813,
                    695,
                    380
                ],
                "el": [
                    386,
                    387,
                    388
                ],
                "iterable": [
                    386
                ],
                "res.append": [
                    388
                ],
                "entity": [
                    395,
                    396,
                    413,
                    398
                ],
                "compat_html_entities.name2codepoint": [
                    395,
                    396
                ],
                "compat_html_entities": [
                    395,
                    396
                ],
                "compat_chr": [
                    408,
                    396
                ],
                "mobj": [
                    1985,
                    1986,
                    1987,
                    398,
                    399,
                    400,
                    1981,
                    1982,
                    1983
                ],
                "numstr": [
                    400,
                    401,
                    403,
                    408
                ],
                "mobj.group": [
                    400,
                    1987,
                    1983
                ],
                "numstr.startswith": [
                    401
                ],
                "base": [
                    408,
                    402,
                    405
                ],
                "_htmlentity_transform": [
                    422
                ],
                "sys.getwindowsversion": [
                    426,
                    451
                ],
                "preferredencoding": [
                    485,
                    1132,
                    429,
                    1135,
                    1040
                ],
                "sys.getfilesystemencoding": [
                    1255,
                    431
                ],
                "for_subprocess": [
                    451
                ],
                "s.encode": [
                    1136,
                    1657,
                    1132,
                    454
                ],
                "get_subprocess_encoding": [
                    465,
                    454
                ],
                "b": [
                    460,
                    462,
                    463,
                    465,
                    478
                ],
                "b.decode": [
                    465
                ],
                "s.decode": [
                    473
                ],
                "decodeFilename": [
                    478
                ],
                "optval": [
                    482,
                    483,
                    484,
                    485,
                    487,
                    488
                ],
                "optval.decode": [
                    485
                ],
                "secs": [
                    492,
                    493,
                    494,
                    495,
                    497
                ],
                "opts_no_check_certificate": [
                    504,
                    501,
                    519
                ],
                "params.get": [
                    2055,
                    2060,
                    501,
                    2042,
                    2047
                ],
                "params": [
                    515,
                    803,
                    2055,
                    522,
                    2060,
                    501,
                    696,
                    2042,
                    508,
                    2047
                ],
                "ssl": [
                    517,
                    518,
                    520,
                    656,
                    658,
                    502,
                    503,
                    506
                ],
                "context": [
                    517,
                    518,
                    521,
                    522,
                    503,
                    505,
                    506,
                    508
                ],
                "ssl.create_default_context": [
                    503
                ],
                "ssl.Purpose.SERVER_AUTH": [
                    503
                ],
                "ssl.Purpose": [
                    503
                ],
                "context.check_hostname": [
                    505
                ],
                "context.verify_mode": [
                    506,
                    518
                ],
                "ssl.CERT_NONE": [
                    506,
                    518
                ],
                "YoutubeDLHTTPSHandler": [
                    522,
                    515,
                    508
                ],
                "ssl.SSLContext": [
                    517
                ],
                "ssl.PROTOCOL_TLSv1": [
                    658,
                    517
                ],
                "ssl.CERT_REQUIRED": [
                    520
                ],
                "context.set_default_verify_paths": [
                    521
                ],
                "ytdl_is_updateable": [
                    526
                ],
                "update_cmd": [
                    529,
                    531,
                    527
                ],
                "msg": [
                    608,
                    547,
                    549,
                    551,
                    552,
                    587,
                    530,
                    531,
                    532,
                    533
                ],
                "sys.exc_info": [
                    544,
                    555
                ],
                "compat_urllib_error.URLError": [
                    544
                ],
                "compat_urllib_error": [
                    544
                ],
                "socket.timeout": [
                    544
                ],
                "socket": [
                    544
                ],
                "UnavailableVideoError": [
                    544
                ],
                "expected": [
                    545,
                    636,
                    550
                ],
                "video_id": [
                    546,
                    547,
                    557
                ],
                "cause": [
                    548,
                    549,
                    556
                ],
                "bug_reports_message": [
                    551
                ],
                "__init__": [
                    552,
                    587,
                    567
                ],
                "self": [
                    774,
                    1019,
                    1030,
                    1033,
                    778,
                    779,
                    1579,
                    654,
                    656,
                    657,
                    660,
                    1563,
                    1568,
                    801,
                    802,
                    803,
                    1569,
                    1573,
                    1574,
                    807,
                    552,
                    808,
                    554,
                    555,
                    556,
                    557,
                    809,
                    810,
                    560,
                    811,
                    562,
                    812,
                    818,
                    1582,
                    1587,
                    695,
                    567,
                    569,
                    696,
                    699,
                    700,
                    1599,
                    834,
                    1226,
                    587,
                    588,
                    1227,
                    1230,
                    1611,
                    1232,
                    1612,
                    1234,
                    1613,
                    1236,
                    1617,
                    1619,
                    1620,
                    1240,
                    1623,
                    1242,
                    1245,
                    608,
                    1248,
                    1251,
                    2533,
                    2534,
                    2536,
                    1011,
                    2547,
                    1013,
                    1575,
                    1015,
                    1017,
                    1018,
                    635,
                    636
                ],
                "self.traceback": [
                    560,
                    554,
                    562
                ],
                "tb": [
                    554
                ],
                "self.exc_info": [
                    555,
                    588
                ],
                "self.cause": [
                    556
                ],
                "self.video_id": [
                    557
                ],
                "traceback.format_tb": [
                    562
                ],
                "traceback": [
                    562
                ],
                "UnsupportedError": [
                    567
                ],
                "self.url": [
                    569
                ],
                "DownloadError": [
                    587
                ],
                "exc_info": [
                    588
                ],
                "self.msg": [
                    608
                ],
                "self.downloaded": [
                    635
                ],
                "downloaded": [
                    635
                ],
                "self.expected": [
                    636
                ],
                "hc": [
                    645,
                    649,
                    650,
                    661,
                    663
                ],
                "http_class": [
                    645
                ],
                "source_address": [
                    648,
                    646,
                    647
                ],
                "ydl_handler._params.get": [
                    646
                ],
                "ydl_handler._params": [
                    646
                ],
                "ydl_handler": [
                    646
                ],
                "sa": [
                    648,
                    650,
                    654
                ],
                "hc.source_address": [
                    650
                ],
                "sock": [
                    657,
                    660,
                    653
                ],
                "compat_socket_create_connection": [
                    653
                ],
                "self.host": [
                    654
                ],
                "self.port": [
                    654
                ],
                "self.timeout": [
                    654
                ],
                "is_https": [
                    655
                ],
                "self.sock": [
                    656,
                    660
                ],
                "ssl.wrap_socket": [
                    656
                ],
                "self.key_file": [
                    657
                ],
                "self.cert_file": [
                    657
                ],
                "hc.connect": [
                    661
                ],
                "functools.partial": [
                    811,
                    1995,
                    2001,
                    661,
                    699
                ],
                "functools": [
                    811,
                    1995,
                    2001,
                    661,
                    699
                ],
                "_hc_connect": [
                    661
                ],
                "filtered_headers": [
                    673,
                    667,
                    669,
                    670,
                    671
                ],
                "headers": [
                    713,
                    714,
                    667
                ],
                "k": [
                    1712,
                    670
                ],
                "v": [
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1944,
                    1945,
                    1437,
                    670,
                    1443,
                    1455,
                    1711,
                    1712,
                    1458,
                    1738,
                    1739,
                    1740,
                    1741,
                    1742,
                    1743,
                    1744,
                    1745,
                    1749,
                    1750,
                    739,
                    743,
                    1896,
                    1785
                ],
                "filtered_headers.items": [
                    670
                ],
                "k.lower": [
                    670
                ],
                "compat_urllib_request.HTTPHandler": [
                    676,
                    695
                ],
                "compat_urllib_request.HTTPHandler.__init__": [
                    695
                ],
                "self._params": [
                    696,
                    803
                ],
                "self.do_open": [
                    811,
                    699
                ],
                "_create_http_connection": [
                    700,
                    812
                ],
                "compat_http_client.HTTPConnection": [
                    700
                ],
                "compat_http_client": [
                    802,
                    700
                ],
                "req": [
                    736,
                    737,
                    742,
                    743,
                    745,
                    747,
                    2539,
                    749,
                    750,
                    813,
                    752,
                    2542,
                    2547,
                    727,
                    732,
                    701,
                    734,
                    735
                ],
                "zlib.decompress": [
                    706,
                    708
                ],
                "zlib": [
                    706,
                    707,
                    708
                ],
                "data": [
                    706,
                    1283,
                    1284,
                    708,
                    1895,
                    1838,
                    1274
                ],
                "zlib.MAX_WBITS": [
                    706
                ],
                "zlib.error": [
                    707
                ],
                "compat_urllib_request.addinfourl": [
                    712,
                    713,
                    714
                ],
                "code": [
                    1733,
                    713,
                    715,
                    2259,
                    2265,
                    1756,
                    2526
                ],
                "ret": [
                    714,
                    715,
                    716,
                    1108,
                    1110
                ],
                "ret.code": [
                    715
                ],
                "req.get_full_url": [
                    747,
                    727
                ],
                "url_escaped": [
                    728,
                    731,
                    734
                ],
                "escape_url": [
                    728,
                    789
                ],
                "req_type": [
                    732,
                    733
                ],
                "req.get_method": [
                    732
                ],
                "HEADRequest": [
                    732
                ],
                "new_req": [
                    736,
                    737,
                    733
                ],
                "req.data": [
                    734
                ],
                "req.headers": [
                    742,
                    745,
                    2539,
                    2542,
                    734
                ],
                "req.origin_req_host": [
                    735
                ],
                "req.unverifiable": [
                    735
                ],
                "new_req.timeout": [
                    736
                ],
                "req.timeout": [
                    736
                ],
                "h": [
                    739,
                    742,
                    743,
                    1096,
                    1073,
                    1109,
                    1822
                ],
                "std_headers.items": [
                    739
                ],
                "h.capitalize": [
                    742
                ],
                "req.add_header": [
                    743
                ],
                "handle_youtubedl_headers": [
                    745
                ],
                "req._Request__original": [
                    749
                ],
                "req._Request__original.partition": [
                    749
                ],
                "req._Request__r_type": [
                    750
                ],
                "req._Request__r_type.partition": [
                    750
                ],
                "old_resp": [
                    774,
                    775,
                    779,
                    780,
                    755
                ],
                "resp": [
                    774,
                    775,
                    777,
                    778,
                    779,
                    780,
                    783,
                    784,
                    755,
                    757,
                    758,
                    791,
                    792,
                    793
                ],
                "resp.headers.get": [
                    784,
                    777,
                    757
                ],
                "resp.headers": [
                    777,
                    784,
                    757,
                    791,
                    792
                ],
                "content": [
                    767,
                    758,
                    759
                ],
                "resp.read": [
                    778,
                    758
                ],
                "gz": [
                    768,
                    778,
                    779,
                    759,
                    761,
                    767
                ],
                "gzip.GzipFile": [
                    767,
                    759
                ],
                "gzip": [
                    767,
                    759
                ],
                "io.BytesIO": [
                    768,
                    778,
                    759,
                    761,
                    767
                ],
                "io": [
                    768,
                    1064,
                    778,
                    1226,
                    759,
                    761,
                    767
                ],
                "uncompressed": [
                    768,
                    761,
                    774
                ],
                "gz.read": [
                    768,
                    761
                ],
                "i": [
                    1101,
                    765,
                    767
                ],
                "original_ioerror": [
                    773
                ],
                "self.addinfourl_wrapper": [
                    779,
                    774
                ],
                "old_resp.headers": [
                    779,
                    774
                ],
                "old_resp.url": [
                    779,
                    774
                ],
                "old_resp.code": [
                    779,
                    774
                ],
                "resp.msg": [
                    780,
                    775
                ],
                "old_resp.msg": [
                    780,
                    775
                ],
                "self.deflate": [
                    778
                ],
                "resp.code": [
                    783
                ],
                "location": [
                    784,
                    785,
                    788,
                    789,
                    790
                ],
                "location.encode": [
                    788
                ],
                "location_escaped": [
                    792,
                    789,
                    790
                ],
                "https_request": [
                    795,
                    836
                ],
                "http_request": [
                    795
                ],
                "https_response": [
                    796,
                    837
                ],
                "http_response": [
                    796,
                    837
                ],
                "compat_urllib_request.HTTPSHandler": [
                    801,
                    799
                ],
                "compat_urllib_request.HTTPSHandler.__init__": [
                    801
                ],
                "self._https_conn_class": [
                    802,
                    812
                ],
                "https_conn_class": [
                    802
                ],
                "compat_http_client.HTTPSConnection": [
                    802
                ],
                "self._context": [
                    808
                ],
                "self._check_hostname": [
                    810
                ],
                "compat_urllib_request.HTTPCookieProcessor": [
                    816,
                    818,
                    836,
                    834
                ],
                "compat_urllib_request.HTTPCookieProcessor.__init__": [
                    818
                ],
                "cookiejar": [
                    818
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_response": [
                    834
                ],
                "request": [
                    834
                ],
                "response": [
                    834
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_request": [
                    836
                ],
                "date_str": [
                    992,
                    865,
                    930,
                    998,
                    874,
                    843,
                    971,
                    973,
                    846,
                    878,
                    880,
                    881,
                    975,
                    851,
                    883,
                    1002,
                    855,
                    926
                ],
                "timezone": [
                    865,
                    848,
                    853,
                    857,
                    860
                ],
                "datetime.timedelta": [
                    974,
                    853,
                    857,
                    860,
                    990
                ],
                "datetime": [
                    992,
                    865,
                    932,
                    1028,
                    970,
                    974,
                    853,
                    990,
                    1013,
                    857,
                    860,
                    1017,
                    926
                ],
                "sign": [
                    977,
                    979,
                    859,
                    861,
                    862
                ],
                "date_format": [
                    864,
                    865
                ],
                "delimiter": [
                    864
                ],
                "dt": [
                    865,
                    866
                ],
                "datetime.datetime.strptime": [
                    992,
                    865,
                    926
                ],
                "datetime.datetime": [
                    992,
                    865,
                    932,
                    1013,
                    1017,
                    926
                ],
                "calendar.timegm": [
                    866
                ],
                "calendar": [
                    866
                ],
                "dt.timetuple": [
                    866
                ],
                "upload_date": [
                    929,
                    932,
                    933,
                    934,
                    876,
                    926
                ],
                "date_str.replace": [
                    878
                ],
                "format_expressions": [
                    924,
                    885,
                    909,
                    917
                ],
                "day_first": [
                    908
                ],
                "format_expressions.extend": [
                    909,
                    917
                ],
                "expression": [
                    924,
                    926
                ],
                "strftime": [
                    932,
                    926
                ],
                "default_ext": [
                    939,
                    959
                ],
                "guess": [
                    940,
                    941,
                    942,
                    943,
                    957
                ],
                "rpartition": [
                    940
                ],
                "url.partition": [
                    940
                ],
                "guess.rstrip": [
                    957,
                    943
                ],
                "filename.rsplit": [
                    963
                ],
                "sub_lang": [
                    963
                ],
                "sub_format": [
                    963
                ],
                "today": [
                    970,
                    972,
                    974,
                    991
                ],
                "datetime.date.today": [
                    970
                ],
                "datetime.date": [
                    970,
                    1028
                ],
                "match": [
                    998,
                    999,
                    1000,
                    975,
                    976,
                    977,
                    978,
                    981
                ],
                "match.group": [
                    977,
                    978,
                    981
                ],
                "time": [
                    978,
                    980,
                    985,
                    988,
                    990
                ],
                "unit": [
                    981,
                    983,
                    984,
                    986,
                    987,
                    989,
                    990
                ],
                "delta": [
                    990,
                    991
                ],
                "date": [
                    992,
                    1028,
                    1029,
                    1030
                ],
                "match.groups": [
                    1000
                ],
                "start": [
                    1573,
                    1576,
                    1582,
                    1583,
                    1617,
                    1010,
                    1011,
                    1620,
                    1621,
                    1398,
                    1399
                ],
                "self.start": [
                    1030,
                    1033,
                    1011,
                    1013,
                    1018
                ],
                "date_from_str": [
                    1011,
                    1029,
                    1015
                ],
                "datetime.datetime.min.date": [
                    1013
                ],
                "datetime.datetime.min": [
                    1013
                ],
                "end": [
                    1604,
                    1587,
                    1588,
                    1619,
                    1014,
                    1015,
                    1621,
                    1404,
                    1405
                ],
                "self.end": [
                    1030,
                    1033,
                    1015,
                    1017,
                    1018
                ],
                "datetime.datetime.max.date": [
                    1017
                ],
                "datetime.datetime.max": [
                    1017
                ],
                "cls": [
                    1024,
                    2259,
                    2526,
                    2264
                ],
                "day": [
                    1024
                ],
                "self.start.isoformat": [
                    1033
                ],
                "self.end.isoformat": [
                    1033
                ],
                "platform.platform": [
                    1038
                ],
                "platform": [
                    1038
                ],
                "res.decode": [
                    1040
                ],
                "WIN_OUTPUT_IDS": [
                    1073,
                    1067,
                    1054
                ],
                "fileno": [
                    1073,
                    1067,
                    1060
                ],
                "out.fileno": [
                    1060
                ],
                "out": [
                    1539,
                    1544,
                    1545,
                    1546,
                    1060,
                    2003,
                    2007,
                    2009,
                    2011,
                    2013,
                    2016,
                    1122,
                    1123,
                    1126,
                    1127,
                    1130,
                    1133,
                    1134,
                    1135,
                    2032,
                    1137,
                    1139,
                    1140,
                    2038
                ],
                "io.UnsupportedOperation": [
                    1064
                ],
                "GetStdHandle": [
                    1073,
                    1070
                ],
                "ctypes.WINFUNCTYPE": [
                    1081,
                    1075,
                    1084,
                    1070
                ],
                "ctypes": [
                    1163,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1172,
                    1175,
                    1176,
                    1177,
                    1178,
                    1179,
                    1180,
                    1182,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1191,
                    1070,
                    1071,
                    1072,
                    1200,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079,
                    1204,
                    1081,
                    1211,
                    1084,
                    1085,
                    1086,
                    1087,
                    1088,
                    1094,
                    1109,
                    1385,
                    1389
                ],
                "ctypes.wintypes.HANDLE": [
                    1185,
                    1071,
                    1169,
                    1076,
                    1175,
                    1085
                ],
                "ctypes.wintypes": [
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1175,
                    1176,
                    1177,
                    1178,
                    1179,
                    1182,
                    1185,
                    1186,
                    1187,
                    1188,
                    1191,
                    1071,
                    1076,
                    1077,
                    1078,
                    1079,
                    1081,
                    1085,
                    1086,
                    1088,
                    1094
                ],
                "ctypes.wintypes.DWORD": [
                    1088,
                    1177,
                    1186,
                    1187,
                    1188,
                    1094,
                    1071,
                    1167,
                    1168,
                    1077,
                    1079,
                    1176,
                    1081,
                    1178,
                    1179,
                    1086
                ],
                "ctypes.windll.kernel32": [
                    1072,
                    1172,
                    1078,
                    1081,
                    1087
                ],
                "ctypes.windll": [
                    1072,
                    1172,
                    1078,
                    1081,
                    1087
                ],
                "WriteConsoleW": [
                    1075,
                    1108
                ],
                "ctypes.wintypes.BOOL": [
                    1076,
                    1085,
                    1182,
                    1191
                ],
                "ctypes.wintypes.LPWSTR": [
                    1076
                ],
                "ctypes.POINTER": [
                    1180,
                    1077,
                    1086,
                    1189
                ],
                "ctypes.wintypes.LPVOID": [
                    1166,
                    1165,
                    1078
                ],
                "written": [
                    1109,
                    1079,
                    1113,
                    1116,
                    1117
                ],
                "GetFileType": [
                    1081,
                    1093
                ],
                "FILE_TYPE_CHAR": [
                    1082,
                    1093
                ],
                "FILE_TYPE_REMOTE": [
                    1083,
                    1093
                ],
                "GetConsoleMode": [
                    1084,
                    1094
                ],
                "INVALID_HANDLE_VALUE": [
                    1088,
                    1091
                ],
                "handle": [
                    1091,
                    1093,
                    1094,
                    1201,
                    1202,
                    1208,
                    1209
                ],
                "ctypes.byref": [
                    1109,
                    1094
                ],
                "not_a_console": [
                    1096
                ],
                "count": [
                    1112,
                    1106,
                    1109
                ],
                "next_nonbmp_pos": [
                    1106
                ],
                "written.value": [
                    1113,
                    1116,
                    1117
                ],
                "sys.stderr": [
                    1123
                ],
                "_windows_write_string": [
                    1127
                ],
                "byt": [
                    1136,
                    1137,
                    1132,
                    1133
                ],
                "out.write": [
                    1139,
                    1133
                ],
                "enc": [
                    1136,
                    1861,
                    1863,
                    1135
                ],
                "out.buffer.write": [
                    1137
                ],
                "out.buffer": [
                    1137
                ],
                "out.flush": [
                    1140
                ],
                "bs": [
                    1144,
                    1146,
                    1147,
                    1149
                ],
                "xs": [
                    1153,
                    1155
                ],
                "struct_pack": [
                    1155,
                    1685
                ],
                "ctypes.Structure": [
                    1163
                ],
                "_fields_": [
                    1164
                ],
                "kernel32": [
                    1172,
                    1173,
                    1183
                ],
                "LockFileEx": [
                    1202,
                    1182,
                    1173,
                    1174
                ],
                "kernel32.LockFileEx": [
                    1173
                ],
                "LockFileEx.argtypes": [
                    1174
                ],
                "OVERLAPPED": [
                    1196,
                    1180,
                    1189
                ],
                "LockFileEx.restype": [
                    1182
                ],
                "UnlockFileEx": [
                    1184,
                    1191,
                    1209,
                    1183
                ],
                "kernel32.UnlockFileEx": [
                    1183
                ],
                "UnlockFileEx.argtypes": [
                    1184
                ],
                "UnlockFileEx.restype": [
                    1191
                ],
                "whole_low": [
                    1192,
                    1210,
                    1203
                ],
                "whole_high": [
                    1193,
                    1210,
                    1203
                ],
                "overlapped": [
                    1196,
                    1197,
                    1198,
                    1199,
                    1200
                ],
                "overlapped.Offset": [
                    1197
                ],
                "overlapped.OffsetHigh": [
                    1198
                ],
                "overlapped.hEvent": [
                    1199
                ],
                "f._lock_file_overlapped_p": [
                    1200,
                    1210,
                    1203,
                    1207
                ],
                "ctypes.pointer": [
                    1200
                ],
                "msvcrt.get_osfhandle": [
                    1208,
                    1201
                ],
                "f.fileno": [
                    1208,
                    1201
                ],
                "exclusive": [
                    1232,
                    1217,
                    1202,
                    1230
                ],
                "ctypes.FormatError": [
                    1211,
                    1204
                ],
                "fcntl.flock": [
                    1217,
                    1220
                ],
                "fcntl": [
                    1217,
                    1220
                ],
                "fcntl.LOCK_EX": [
                    1217
                ],
                "fcntl.LOCK_SH": [
                    1217
                ],
                "fcntl.LOCK_UN": [
                    1220
                ],
                "mode": [
                    1225,
                    1226,
                    1227
                ],
                "self.f": [
                    1248,
                    1251,
                    1226,
                    1232,
                    1234,
                    1240,
                    1242,
                    1245
                ],
                "io.open": [
                    1226
                ],
                "self.mode": [
                    1227,
                    1230
                ],
                "_lock_file": [
                    1232
                ],
                "self.f.close": [
                    1242,
                    1234
                ],
                "_unlock_file": [
                    1240
                ],
                "self.f.write": [
                    1248
                ],
                "self.f.read": [
                    1251
                ],
                "quoted_args": [
                    1266,
                    1267,
                    1260
                ],
                "a": [
                    1806,
                    1262,
                    1263,
                    1265,
                    1266
                ],
                "a.decode": [
                    1265
                ],
                "quoted_args.append": [
                    1266
                ],
                "pipes.quote": [
                    1266
                ],
                "pipes": [
                    1266
                ],
                "sdata": [
                    1273,
                    1282,
                    1275,
                    1281
                ],
                "compat_urllib_parse.urlencode": [
                    1273,
                    1706
                ],
                "compat_urllib_parse": [
                    1706,
                    1273,
                    1658
                ],
                "json.dumps": [
                    1274
                ],
                "smug_url": [
                    1280,
                    1281,
                    1279
                ],
                "smug_url.rpartition": [
                    1281
                ],
                "jsond": [
                    1282,
                    1283
                ],
                "compat_parse_qs": [
                    1282
                ],
                "json.loads": [
                    1283
                ],
                "exponent": [
                    1296,
                    1297,
                    1293,
                    1295
                ],
                "math.log": [
                    1295
                ],
                "math": [
                    1295
                ],
                "suffix": [
                    1296,
                    1298
                ],
                "converted": [
                    1297,
                    1298
                ],
                "_UNIT_TABLE": [
                    1344,
                    1307,
                    1351
                ],
                "units_re": [
                    1344,
                    1346
                ],
                "u": [
                    1344
                ],
                "num_str": [
                    1352,
                    1350
                ],
                "mult": [
                    1352,
                    1351
                ],
                "ENGLISH_MONTH_NAMES.index": [
                    1359
                ],
                "index": [
                    1369,
                    2033,
                    2022
                ],
                "abbrev": [
                    1369
                ],
                "xml_str": [
                    1379
                ],
                "title": [
                    1388,
                    1383
                ],
                "libc": [
                    1392,
                    1385
                ],
                "ctypes.cdll.LoadLibrary": [
                    1385
                ],
                "ctypes.cdll": [
                    1385
                ],
                "title_bytes": [
                    1388,
                    1389,
                    1390
                ],
                "title.encode": [
                    1388
                ],
                "buf": [
                    1392,
                    1389,
                    1390
                ],
                "ctypes.create_string_buffer": [
                    1389
                ],
                "buf.value": [
                    1390
                ],
                "libc.prctl": [
                    1392
                ],
                "s.startswith": [
                    1398
                ],
                "s.endswith": [
                    1404
                ],
                "quote": [
                    1412,
                    1413
                ],
                "compat_urlparse.urlparse": [
                    1419
                ],
                "compat_urlparse": [
                    1419
                ],
                "path.strip": [
                    1420
                ],
                "get_attr": [
                    1429,
                    1431
                ],
                "invscale": [
                    1458,
                    1437
                ],
                "scale": [
                    1458,
                    1437
                ],
                "int_str": [
                    1448,
                    1450,
                    1451
                ],
                "compat_basestring": [
                    1464,
                    1711
                ],
                "s.strip": [
                    1467
                ],
                "float_or_none": [
                    1489,
                    1491
                ],
                "real_ext": [
                    1510,
                    1512,
                    1513,
                    1518,
                    1520
                ],
                "os.path.splitext": [
                    1518,
                    1510
                ],
                "expected_real_ext": [
                    1520,
                    1513
                ],
                "ext": [
                    1512,
                    1514,
                    1521,
                    1884,
                    1885,
                    1887
                ],
                "communicate": [
                    1528,
                    1539
                ],
                "subprocess.Popen": [
                    1528,
                    1539
                ],
                "subprocess": [
                    1528,
                    1539,
                    1541
                ],
                "exe": [
                    1528,
                    1531,
                    1540
                ],
                "subprocess.PIPE": [
                    1528,
                    1541
                ],
                "encodeArgument": [
                    1540
                ],
                "subprocess.STDOUT": [
                    1541
                ],
                "out.decode": [
                    1545
                ],
                "detect_exe_version": [
                    1546
                ],
                "version_re": [
                    1552,
                    1553,
                    1546,
                    1551
                ],
                "unrecognized": [
                    1546,
                    1557
                ],
                "output": [
                    1553,
                    1550
                ],
                "self.getslice": [
                    1563
                ],
                "PagedList": [
                    1609,
                    1566
                ],
                "self._pagefunc": [
                    1568,
                    1611,
                    1579,
                    1623
                ],
                "pagefunc": [
                    1568,
                    1611
                ],
                "self._pagesize": [
                    1569,
                    1573,
                    1574,
                    1575,
                    1613,
                    1582,
                    1617,
                    1587,
                    1619,
                    1620,
                    1599
                ],
                "pagesize": [
                    1569,
                    1613
                ],
                "pagenum": [
                    1573,
                    1574,
                    1575,
                    1579,
                    1622,
                    1623
                ],
                "itertools.count": [
                    1573,
                    2022
                ],
                "itertools": [
                    1573,
                    2022
                ],
                "firstid": [
                    1588,
                    1574,
                    1583
                ],
                "nextfirstid": [
                    1604,
                    1575,
                    1576,
                    1583,
                    1588
                ],
                "page_results": [
                    1592,
                    1593,
                    1579,
                    1599
                ],
                "startv": [
                    1592,
                    1599,
                    1581,
                    1591
                ],
                "endv": [
                    1592,
                    1586,
                    1591
                ],
                "res.extend": [
                    1632,
                    1593,
                    1634
                ],
                "self._pagecount": [
                    1619,
                    1612
                ],
                "pagecount": [
                    1612
                ],
                "start_page": [
                    1617,
                    1620,
                    1622
                ],
                "end_page": [
                    1618,
                    1622
                ],
                "skip_elems": [
                    1624,
                    1625,
                    1626,
                    1620
                ],
                "only_more": [
                    1621,
                    1627,
                    1628,
                    1629,
                    1631
                ],
                "page": [
                    1632,
                    1634,
                    1623,
                    1625,
                    1628,
                    1629,
                    1631
                ],
                "unicode_escape": [
                    1642,
                    1647,
                    1650,
                    1639
                ],
                "codecs.getdecoder": [
                    1647,
                    1639
                ],
                "codecs": [
                    1647,
                    1639
                ],
                "compat_urllib_parse.quote": [
                    1658
                ],
                "url_parsed": [
                    1664,
                    1665,
                    1666,
                    1667,
                    1668,
                    1663
                ],
                "compat_urllib_parse_urlparse": [
                    1890,
                    1663
                ],
                "geturl": [
                    1664
                ],
                "url_parsed._replace": [
                    1664
                ],
                "escape_rfc3986": [
                    1665,
                    1666,
                    1667,
                    1668
                ],
                "url_parsed.path": [
                    1665
                ],
                "url_parsed.params": [
                    1666
                ],
                "url_parsed.query": [
                    1667
                ],
                "url_parsed.fragment": [
                    1668
                ],
                "struct.pack": [
                    1672,
                    1685,
                    1678
                ],
                "struct": [
                    1672,
                    1678,
                    1683,
                    1685,
                    1686
                ],
                "spec": [
                    1676,
                    1677,
                    1678,
                    1681,
                    1682,
                    1683
                ],
                "spec.encode": [
                    1682,
                    1677
                ],
                "struct.unpack": [
                    1683,
                    1686
                ],
                "struct_unpack": [
                    1686
                ],
                "url.decode": [
                    1692
                ],
                "BOM_UTF8": [
                    1693,
                    1694,
                    1695
                ],
                "url.strip": [
                    1696
                ],
                "contextlib.closing": [
                    1701
                ],
                "contextlib": [
                    1701
                ],
                "batch_fd": [
                    1701
                ],
                "fd": [
                    1701,
                    1702
                ],
                "fixup": [
                    1702
                ],
                "kargs": [
                    1706
                ],
                "v.encode": [
                    1711
                ],
                "d.items": [
                    1712
                ],
                "d": [
                    1712
                ],
                "US_RATINGS": [
                    1728,
                    1715
                ],
                "US_RATINGS.get": [
                    1728
                ],
                "v.startswith": [
                    1741,
                    1743
                ],
                "fix_kv": [
                    1756
                ],
                "quality_ids.index": [
                    1765
                ],
                "quality_ids": [
                    1765
                ],
                "qid": [
                    1765
                ],
                "q": [
                    1768
                ],
                "DEFAULT_OUTTMPL": [
                    1771
                ],
                "ELLIPSES": [
                    1778,
                    1780
                ],
                "length": [
                    1779,
                    1780
                ],
                "e": [
                    1832,
                    1785,
                    1830,
                    1831
                ],
                "re.split": [
                    1785
                ],
                "version": [
                    1792,
                    1789
                ],
                "assume_new": [
                    1794,
                    1790
                ],
                "version_tuple": [
                    1792
                ],
                "limit": [
                    1792
                ],
                "get": [
                    1801,
                    1812
                ],
                "zipimporter": [
                    1801
                ],
                "shlex_quote": [
                    1806
                ],
                "mt.rpartition": [
                    1810
                ],
                "mt": [
                    1810
                ],
                "url_handle.headers": [
                    1821,
                    1822
                ],
                "url_handle": [
                    1824,
                    1821,
                    1822
                ],
                "getheader": [
                    1824,
                    1826,
                    1834,
                    1822
                ],
                "url_handle.info": [
                    1824
                ],
                "cd": [
                    1826,
                    1827,
                    1828
                ],
                "determine_ext": [
                    1884,
                    1830
                ],
                "mimetype2ext": [
                    1834
                ],
                "mime_type": [
                    1838
                ],
                "base64.b64encode": [
                    1838
                ],
                "base64": [
                    1838
                ],
                "age_limit": [
                    1848,
                    1844
                ],
                "content_limit": [
                    1848,
                    1846
                ],
                "BOMS": [
                    1861,
                    1854
                ],
                "bom": [
                    1861,
                    1862,
                    1863
                ],
                "first_bytes.startswith": [
                    1862
                ],
                "first_bytes": [
                    1866,
                    1862,
                    1863
                ],
                "first_bytes.decode": [
                    1866
                ],
                "protocol": [
                    1872,
                    1873,
                    1874
                ],
                "info_dict.get": [
                    1872,
                    1972
                ],
                "info_dict": [
                    1872,
                    1969,
                    1972,
                    1876
                ],
                "scheme": [
                    1890
                ],
                "table": [
                    1896,
                    1898,
                    1895
                ],
                "header_row": [
                    1895
                ],
                "max_lens": [
                    1896,
                    1897
                ],
                "col": [
                    1896
                ],
                "format_str": [
                    1897,
                    1898
                ],
                "ml": [
                    1897
                ],
                "row": [
                    1898
                ],
                "COMPARISON_OPERATORS": [
                    1921,
                    1918,
                    1902
                ],
                "operator.lt": [
                    1903
                ],
                "operator": [
                    1903,
                    1904,
                    1905,
                    1906,
                    1907,
                    1908
                ],
                "operator.le": [
                    1904
                ],
                "operator.gt": [
                    1905
                ],
                "operator.ge": [
                    1906
                ],
                "operator.eq": [
                    1907
                ],
                "operator.ne": [
                    1908
                ],
                "operator_rex": [
                    1951,
                    1947,
                    1910,
                    1919
                ],
                "COMPARISON_OPERATORS.keys": [
                    1918
                ],
                "operator_rex.search": [
                    1951,
                    1919
                ],
                "filter_part": [
                    1957,
                    1964,
                    1937,
                    1919,
                    1951
                ],
                "op": [
                    1955,
                    1921,
                    1953,
                    1941
                ],
                "comparison_value": [
                    1926,
                    1929,
                    1931,
                    1932,
                    1933,
                    1934,
                    1941
                ],
                "parse_filesize": [
                    1931,
                    1933
                ],
                "actual_value": [
                    1954,
                    1955,
                    1938,
                    1939,
                    1941
                ],
                "dct.get": [
                    1954,
                    1938
                ],
                "dct": [
                    1954,
                    1938,
                    1964
                ],
                "UNARY_OPERATORS": [
                    1953,
                    1950,
                    1943
                ],
                "UNARY_OPERATORS.keys": [
                    1950
                ],
                "_match_one": [
                    1964
                ],
                "filter_str.split": [
                    1964
                ],
                "filter_str": [
                    1969,
                    1964,
                    1973
                ],
                "match_str": [
                    1969
                ],
                "video_title": [
                    1972,
                    1973
                ],
                "_match_func": [
                    1974
                ],
                "time_expr": [
                    1985,
                    1978,
                    1981
                ],
                "seconds": [
                    1991
                ],
                "_x": [
                    2008,
                    2017,
                    1995,
                    2006
                ],
                "xpath_with_ns": [
                    1995
                ],
                "str_or_empty": [
                    2001,
                    2003,
                    2007,
                    2009,
                    2011
                ],
                "str_or_none": [
                    2001
                ],
                "node.text": [
                    2003
                ],
                "child": [
                    2005,
                    2006,
                    2007,
                    2008,
                    2009,
                    2011
                ],
                "child.tag": [
                    2008,
                    2006
                ],
                "child.tail": [
                    2007
                ],
                "parse_node": [
                    2009,
                    2036
                ],
                "xml.etree.ElementTree.tostring": [
                    2011
                ],
                "xml.etree.ElementTree": [
                    2011
                ],
                "xml.etree": [
                    2011
                ],
                "xml": [
                    2011
                ],
                "dfxp": [
                    2017,
                    2015
                ],
                "compat_etree_fromstring": [
                    2015
                ],
                "dfxp_data.encode": [
                    2015
                ],
                "dfxp_data": [
                    2015
                ],
                "paras": [
                    2017,
                    2019,
                    2022
                ],
                "dfxp.findall": [
                    2017
                ],
                "para": [
                    2022,
                    2023,
                    2024,
                    2025,
                    2036
                ],
                "begin_time": [
                    2026,
                    2031,
                    2034,
                    2023
                ],
                "parse_dfxp_time_expr": [
                    2024,
                    2025,
                    2023
                ],
                "para.attrib.get": [
                    2024,
                    2025,
                    2023
                ],
                "para.attrib": [
                    2024,
                    2025,
                    2023
                ],
                "end_time": [
                    2024,
                    2035,
                    2028,
                    2031
                ],
                "dur": [
                    2025,
                    2029,
                    2031
                ],
                "out.append": [
                    2032
                ],
                "srt_subtitles_timecode": [
                    2034,
                    2035
                ],
                "param": [
                    2048,
                    2050,
                    2051,
                    2055,
                    2056,
                    2060,
                    2042,
                    2043,
                    2047
                ],
                "command_option": [
                    2051,
                    2056,
                    2050,
                    2043
                ],
                "separator": [
                    2049,
                    2050
                ],
                "true_value": [
                    2050,
                    2051
                ],
                "false_value": [
                    2050,
                    2051
                ],
                "expected_value": [
                    2056
                ],
                "ex_args": [
                    2064,
                    2060,
                    2061,
                    2063
                ],
                "_lang_map": [
                    2069
                ],
                "cls._lang_map.get": [
                    2259
                ],
                "cls._lang_map": [
                    2264,
                    2259
                ],
                "short_name": [
                    2264,
                    2266
                ],
                "long_name": [
                    2264,
                    2265
                ],
                "cls._lang_map.items": [
                    2264
                ],
                "_country_map": [
                    2271
                ],
                "cls._country_map.get": [
                    2526
                ],
                "cls._country_map": [
                    2526
                ],
                "code.upper": [
                    2526
                ],
                "compat_urllib_request.ProxyHandler": [
                    2536,
                    2529,
                    2546
                ],
                "self.proxy_open": [
                    2534
                ],
                "meth": [
                    2535
                ],
                "r": [
                    2535
                ],
                "proxy": [
                    2544,
                    2547,
                    2541,
                    2535
                ],
                "compat_urllib_request.ProxyHandler.__init__": [
                    2536
                ],
                "proxies": [
                    2536
                ],
                "req_proxy": [
                    2539,
                    2540,
                    2541
                ],
                "req.headers.get": [
                    2539
                ],
                "compat_urllib_request.ProxyHandler.proxy_open": [
                    2546
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/youtube-dl_27/test/test_utils.py",
                "test_function": "test_parse_dfxp_time_expr",
                "test_function_code": "    def test_parse_dfxp_time_expr(self):\n        self.assertEqual(parse_dfxp_time_expr(None), None)\n        self.assertEqual(parse_dfxp_time_expr(''), None)\n        self.assertEqual(parse_dfxp_time_expr('0.1'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('0.1s'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01'), 1.0)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01.100'), 1.1)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01:100'), 1.1)",
                "test_error": "AssertionError: None != 1.1",
                "full_test_error": "self = <test.test_utils.TestUtil testMethod=test_parse_dfxp_time_expr>\n\n    def test_parse_dfxp_time_expr(self):\n        self.assertEqual(parse_dfxp_time_expr(None), None)\n        self.assertEqual(parse_dfxp_time_expr(''), None)\n        self.assertEqual(parse_dfxp_time_expr('0.1'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('0.1s'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01'), 1.0)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01.100'), 1.1)\n>       self.assertEqual(parse_dfxp_time_expr('00:00:01:100'), 1.1)\nE       AssertionError: None != 1.1\n\ntest/test_utils.py:670: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}