{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom tornado.concurrent import Future, future_add_done_callback, future_set_result_unless_cancelled\nfrom tornado.escape import native_str, utf8\nfrom tornado import httputil\nfrom tornado import iostream\nfrom typing import cast, Optional, Type, Awaitable, Callable, Union, Tuple\n```\n\n## The source code of the buggy function\n```python\n# The relative path of the buggy file: tornado/http1connection.py\n\n\n\n    # this is the buggy function you need to fix\n    def write_headers(\n        self,\n        start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n        headers: httputil.HTTPHeaders,\n        chunk: bytes = None,\n    ) -> \"Future[None]\":\n        \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n        lines = []\n        if self.is_client:\n            assert isinstance(start_line, httputil.RequestStartLine)\n            self._request_start_line = start_line\n            lines.append(utf8(\"%s %s HTTP/1.1\" % (start_line[0], start_line[1])))\n            # Client requests with a non-empty body must have either a\n            # Content-Length or a Transfer-Encoding.\n            self._chunking_output = (\n                start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n                and \"Content-Length\" not in headers\n                and \"Transfer-Encoding\" not in headers\n            )\n        else:\n            assert isinstance(start_line, httputil.ResponseStartLine)\n            assert self._request_start_line is not None\n            assert self._request_headers is not None\n            self._response_start_line = start_line\n            lines.append(utf8(\"HTTP/1.1 %d %s\" % (start_line[1], start_line[2])))\n            self._chunking_output = (\n                # TODO: should this use\n                # self._request_start_line.version or\n                # start_line.version?\n                self._request_start_line.version == \"HTTP/1.1\"\n                # 1xx, 204 and 304 responses have no body (not even a zero-length\n                # body), and so should not have either Content-Length or\n                # Transfer-Encoding headers.\n                and start_line.code not in (204, 304)\n                and (start_line.code < 100 or start_line.code >= 200)\n                # No need to chunk the output if a Content-Length is specified.\n                and \"Content-Length\" not in headers\n                # Applications are discouraged from touching Transfer-Encoding,\n                # but if they do, leave it alone.\n                and \"Transfer-Encoding\" not in headers\n            )\n            # If connection to a 1.1 client will be closed, inform client\n            if (\n                self._request_start_line.version == \"HTTP/1.1\"\n                and self._disconnect_on_finish\n            ):\n                headers[\"Connection\"] = \"close\"\n            # If a 1.0 client asked for keep-alive, add the header.\n            if (\n                self._request_start_line.version == \"HTTP/1.0\"\n                and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n            ):\n                headers[\"Connection\"] = \"Keep-Alive\"\n        if self._chunking_output:\n            headers[\"Transfer-Encoding\"] = \"chunked\"\n        if not self.is_client and (\n            self._request_start_line.method == \"HEAD\"\n            or cast(httputil.ResponseStartLine, start_line).code == 304\n        ):\n            self._expected_content_remaining = 0\n        elif \"Content-Length\" in headers:\n            self._expected_content_remaining = int(headers[\"Content-Length\"])\n        else:\n            self._expected_content_remaining = None\n        # TODO: headers are supposed to be of type str, but we still have some\n        # cases that let bytes slip through. Remove these native_str calls when those\n        # are fixed.\n        header_lines = (\n            native_str(n) + \": \" + native_str(v) for n, v in headers.get_all()\n        )\n        lines.extend(l.encode(\"latin1\") for l in header_lines)\n        for line in lines:\n            if b\"\\n\" in line:\n                raise ValueError(\"Newline in header: \" + repr(line))\n        future = None\n        if self.stream.closed():\n            future = self._write_future = Future()\n            future.set_exception(iostream.StreamClosedError())\n            future.exception()\n        else:\n            future = self._write_future = Future()\n            data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n            if chunk:\n                data += self._format_chunk(chunk)\n            self._pending_write = self.stream.write(data)\n            future_add_done_callback(self._pending_write, self._on_write_complete)\n        return future\n    \n```",
    "2": "# The declaration of the class containing the buggy function\nclass HTTP1Connection(httputil.HTTPConnection):\n    \"\"\"\n    Implements the HTTP/1.x protocol.\n    \n    This class can be on its own for clients, or via `HTTP1ServerConnection`\n    for servers.\n    \"\"\"\n\n\n",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef _format_chunk(self, chunk: bytes) -> bytes:\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef write(self, chunk: bytes) -> 'Future[None]':\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _on_write_complete(self, future: 'Future[None]') -> None:\n    # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def _format_chunk(self, chunk: bytes) -> bytes:\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def write(self, chunk: bytes) -> 'Future[None]':\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def _on_write_complete(self, future: 'Future[None]') -> None:\n        # Please ignore the body of this function\n\n",
    "4": "## A failing test function for the buggy function\n```python\n# The relative path of the failing test file: tornado/test/httpclient_test.py\n\n    def test_redirect_put_without_body(self):\n        # This \"without body\" edge case is similar to what happens with body_producer.\n        response = self.fetch(\n            \"/redirect?url=/put&status=307\",\n            method=\"PUT\",\n            allow_nonstandard_methods=True,\n        )\n        self.assertEqual(response.body, b\"Put body: \")\n```\n\n\n",
    "5": "### The error message from the failing test\n```text\nself = <tornado.test.httpclient_test.HTTPClientCommonTestCase testMethod=test_redirect_put_without_body>\n\n    def test_redirect_put_without_body(self):\n        # This \"without body\" edge case is similar to what happens with body_producer.\n        response = self.fetch(\n            \"/redirect?url=/put&status=307\",\n            method=\"PUT\",\n>           allow_nonstandard_methods=True,\n        )\n\ntornado/test/httpclient_test.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntornado/testing.py:437: in fetch\n    timeout=get_async_test_timeout(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tornado.platform.asyncio.AsyncIOLoop object at 0x7f399eb1ba10>\nfunc = <function AsyncHTTPTestCase.fetch.<locals>.<lambda> at 0x7f399eb44950>\ntimeout = 5\n\n    def run_sync(self, func: Callable, timeout: float = None) -> Any:\n        \"\"\"Starts the `IOLoop`, runs the given function, and stops the loop.\n    \n        The function must return either an awaitable object or\n        ``None``. If the function returns an awaitable object, the\n        `IOLoop` will run until the awaitable is resolved (and\n        `run_sync()` will return the awaitable's result). If it raises\n        an exception, the `IOLoop` will stop and the exception will be\n        re-raised to the caller.\n    \n        The keyword-only argument ``timeout`` may be used to set\n        a maximum duration for the function.  If the timeout expires,\n        a `tornado.util.TimeoutError` is raised.\n    \n        This method is useful to allow asynchronous calls in a\n        ``main()`` function::\n    \n            async def main():\n                # do stuff...\n    \n            if __name__ == '__main__':\n                IOLoop.current().run_sync(main)\n    \n        .. versionchanged:: 4.3\n           Returning a non-``None``, non-awaitable value is now an error.\n    \n        .. versionchanged:: 5.0\n           If a timeout occurs, the ``func`` coroutine will be cancelled.\n    \n        \"\"\"\n        future_cell = [None]  # type: List[Optional[Future]]\n    \n        def run() -> None:\n            try:\n                result = func()\n                if result is not None:\n                    from tornado.gen import convert_yielded\n    \n                    result = convert_yielded(result)\n            except Exception:\n                fut = Future()  # type: Future[Any]\n                future_cell[0] = fut\n                future_set_exc_info(fut, sys.exc_info())\n            else:\n                if is_future(result):\n                    future_cell[0] = result\n                else:\n                    fut = Future()\n                    future_cell[0] = fut\n                    fut.set_result(result)\n            assert future_cell[0] is not None\n            self.add_future(future_cell[0], lambda future: self.stop())\n    \n        self.add_callback(run)\n        if timeout is not None:\n    \n            def timeout_callback() -> None:\n                # If we can cancel the future, do so and wait on it. If not,\n                # Just stop the loop and return with the task still pending.\n                # (If we neither cancel nor wait for the task, a warning\n                # will be logged).\n                assert future_cell[0] is not None\n                if not future_cell[0].cancel():\n                    self.stop()\n    \n            timeout_handle = self.add_timeout(self.time() + timeout, timeout_callback)\n        self.start()\n        if timeout is not None:\n            self.remove_timeout(timeout_handle)\n        assert future_cell[0] is not None\n        if future_cell[0].cancelled() or not future_cell[0].done():\n>           raise TimeoutError(\"Operation timed out after %s seconds\" % timeout)\nE           tornado.util.TimeoutError: Operation timed out after 5 seconds\n\ntornado/ioloop.py:530: TimeoutError\n\n```\n",
    "6": "## Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n### Case 1\n#### Runtime values and types of the input parameters of the buggy function\nself.is_client, value: `True`, type: `bool`\n\nstart_line, value: `RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.method, value: `'PUT'`, type: `str`\n\nself._disconnect_on_finish, value: `False`, type: `bool`\n\n#### Runtime values and types of variables right before the buggy function's return\nlines, value: `[b'PUT /redirect?url=/put&status=307 HTTP/1.1', b'Connection: close', b'Host: 127.0.0.1:42095', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked']`, type: `list`\n\nself._request_start_line, value: `RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')`, type: `RequestStartLine`\n\nself._chunking_output, value: `True`, type: `bool`\n\nline, value: `b'Transfer-Encoding: chunked'`, type: `bytes`\n\nfuture, value: `<Future finished result=None>`, type: `Future`\n\ndata, value: `b'PUT /redirect?url=/put&status=307 HTTP/1.1\\r\\nConnection: close\\r\\nHost: 127.0.0.1:42095\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n'`, type: `bytes`\n\nself._pending_write, value: `<Future finished result=None>`, type: `Future`\n\n### Case 2\n#### Runtime values and types of the input parameters of the buggy function\nself.is_client, value: `False`, type: `bool`\n\nstart_line, value: `ResponseStartLine(version='', code=307, reason='Temporary Redirect')`, type: `ResponseStartLine`\n\nself._request_start_line, value: `RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='HTTP/1.1')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.code, value: `307`, type: `int`\n\nself._disconnect_on_finish, value: `True`, type: `bool`\n\nchunk, value: `b'redirects can have bodies too'`, type: `bytes`\n\n#### Runtime values and types of variables right before the buggy function's return\nlines, value: `[b'HTTP/1.1 307 Temporary Redirect', b'Server: TornadoServer/6.0.dev1', b'Content-Type: text/html; charset=UTF-8', b'Date: Mon, 29 Jan 2024 17:01:26 GMT', b'Location: /put', b'Content-Length: 29', b'Vary: Accept-Encoding', b'Connection: close']`, type: `list`\n\nself._response_start_line, value: `ResponseStartLine(version='', code=307, reason='Temporary Redirect')`, type: `ResponseStartLine`\n\nself._expected_content_remaining, value: `0`, type: `int`\n\nline, value: `b'Connection: close'`, type: `bytes`\n\nfuture, value: `<Future finished result=None>`, type: `Future`\n\ndata, value: `b'HTTP/1.1 307 Temporary Redirect\\r\\nServer: TornadoServer/6.0.dev1\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 29 Jan 2024 17:01:26 GMT\\r\\nLocation: /put\\r\\nContent-Length: 29\\r\\nVary: Accept-Encoding\\r\\nConnection: close\\r\\n\\r\\nredirects can have bodies too'`, type: `bytes`\n\nself._pending_write, value: `<Future finished result=None>`, type: `Future`\n\n### Case 3\n#### Runtime values and types of the input parameters of the buggy function\nself.is_client, value: `True`, type: `bool`\n\nstart_line, value: `RequestStartLine(method='PUT', path='/put', version='')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.method, value: `'PUT'`, type: `str`\n\nself._disconnect_on_finish, value: `False`, type: `bool`\n\n#### Runtime values and types of variables right before the buggy function's return\nlines, value: `[b'PUT /put HTTP/1.1', b'Connection: close', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked', b'Host: 127.0.0.1:42095']`, type: `list`\n\nself._request_start_line, value: `RequestStartLine(method='PUT', path='/put', version='')`, type: `RequestStartLine`\n\nself._chunking_output, value: `True`, type: `bool`\n\nline, value: `b'Host: 127.0.0.1:42095'`, type: `bytes`\n\nfuture, value: `<Future finished result=None>`, type: `Future`\n\ndata, value: `b'PUT /put HTTP/1.1\\r\\nConnection: close\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\nHost: 127.0.0.1:42095\\r\\n\\r\\n'`, type: `bytes`\n\nself._pending_write, value: `<Future finished result=None>`, type: `Future`\n\n### Case 4\n#### Runtime values and types of the input parameters of the buggy function\nself.is_client, value: `False`, type: `bool`\n\nstart_line, value: `ResponseStartLine(version='', code=200, reason='OK')`, type: `ResponseStartLine`\n\nself._request_start_line, value: `RequestStartLine(method='PUT', path='/put', version='HTTP/1.1')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.code, value: `200`, type: `int`\n\nself._disconnect_on_finish, value: `True`, type: `bool`\n\nchunk, value: `b'Put body: '`, type: `bytes`\n\n#### Runtime values and types of variables right before the buggy function's return\nlines, value: `[b'HTTP/1.1 200 OK', b'Server: TornadoServer/6.0.dev1', b'Content-Type: text/html; charset=UTF-8', b'Date: Mon, 29 Jan 2024 17:01:26 GMT', b'Content-Length: 10', b'Vary: Accept-Encoding', b'Connection: close']`, type: `list`\n\nself._response_start_line, value: `ResponseStartLine(version='', code=200, reason='OK')`, type: `ResponseStartLine`\n\nself._expected_content_remaining, value: `0`, type: `int`\n\nline, value: `b'Connection: close'`, type: `bytes`\n\nfuture, value: `<Future finished result=None>`, type: `Future`\n\ndata, value: `b'HTTP/1.1 200 OK\\r\\nServer: TornadoServer/6.0.dev1\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 29 Jan 2024 17:01:26 GMT\\r\\nContent-Length: 10\\r\\nVary: Accept-Encoding\\r\\nConnection: close\\r\\n\\r\\nPut body: '`, type: `bytes`\n\nself._pending_write, value: `<Future finished result=None>`, type: `Future`\n\n",
    "7": "## Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n### Expected case 1\n#### The values and types of buggy function's parameters\nself.is_client, value: `True`, type: `bool`\n\nstart_line, value: `RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.method, value: `'PUT'`, type: `str`\n\nself._disconnect_on_finish, value: `False`, type: `bool`\n\n#### Expected values and types of variables right before the buggy function's return\nlines, expected value: `[b'PUT /redirect?url=/put&status=307 HTTP/1.1', b'Connection: close', b'Host: 127.0.0.1:37583', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked']`, type: `list`\n\nself._request_start_line, expected value: `RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')`, type: `RequestStartLine`\n\nself._chunking_output, expected value: `True`, type: `bool`\n\nline, expected value: `b'Transfer-Encoding: chunked'`, type: `bytes`\n\nfuture, expected value: `<Future finished result=None>`, type: `Future`\n\ndata, expected value: `b'PUT /redirect?url=/put&status=307 HTTP/1.1\\r\\nConnection: close\\r\\nHost: 127.0.0.1:37583\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n'`, type: `bytes`\n\nself._pending_write, expected value: `<Future finished result=None>`, type: `Future`\n\n### Expected case 2\n#### The values and types of buggy function's parameters\nself.is_client, value: `False`, type: `bool`\n\nstart_line, value: `ResponseStartLine(version='', code=307, reason='Temporary Redirect')`, type: `ResponseStartLine`\n\nself._request_start_line, value: `RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='HTTP/1.1')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.code, value: `307`, type: `int`\n\nself._disconnect_on_finish, value: `True`, type: `bool`\n\nchunk, value: `b'redirects can have bodies too'`, type: `bytes`\n\n#### Expected values and types of variables right before the buggy function's return\nlines, expected value: `[b'HTTP/1.1 307 Temporary Redirect', b'Server: TornadoServer/6.0.dev1', b'Content-Type: text/html; charset=UTF-8', b'Date: Mon, 29 Jan 2024 17:01:20 GMT', b'Location: /put', b'Content-Length: 29', b'Vary: Accept-Encoding', b'Connection: close']`, type: `list`\n\nself._response_start_line, expected value: `ResponseStartLine(version='', code=307, reason='Temporary Redirect')`, type: `ResponseStartLine`\n\nself._expected_content_remaining, expected value: `0`, type: `int`\n\nline, expected value: `b'Connection: close'`, type: `bytes`\n\nfuture, expected value: `<Future finished result=None>`, type: `Future`\n\ndata, expected value: `b'HTTP/1.1 307 Temporary Redirect\\r\\nServer: TornadoServer/6.0.dev1\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 29 Jan 2024 17:01:20 GMT\\r\\nLocation: /put\\r\\nContent-Length: 29\\r\\nVary: Accept-Encoding\\r\\nConnection: close\\r\\n\\r\\nredirects can have bodies too'`, type: `bytes`\n\nself._pending_write, expected value: `<Future finished result=None>`, type: `Future`\n\n### Expected case 3\n#### The values and types of buggy function's parameters\nself.is_client, value: `True`, type: `bool`\n\nstart_line, value: `RequestStartLine(method='PUT', path='/put', version='')`, type: `RequestStartLine`\n\nself._chunking_output, value: `False`, type: `bool`\n\nstart_line.method, value: `'PUT'`, type: `str`\n\nself._disconnect_on_finish, value: `False`, type: `bool`\n\n#### Expected values and types of variables right before the buggy function's return\nlines, expected value: `[b'PUT /put HTTP/1.1', b'Connection: close', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked', b'Host: 127.0.0.1:37583']`, type: `list`\n\nself._request_start_line, expected value: `RequestStartLine(method='PUT', path='/put', version='')`, type: `RequestStartLine`\n\nline, expected value: `b'Host: 127.0.0.1:37583'`, type: `bytes`\n\nfuture, expected value: `<Future finished result=None>`, type: `Future`\n\ndata, expected value: `b'PUT /put HTTP/1.1\\r\\nConnection: close\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\nHost: 127.0.0.1:37583\\r\\n\\r\\n'`, type: `bytes`\n\nself._pending_write, expected value: `<Future finished result=None>`, type: `Future`\n\n",
    "8": "",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the buggy class, related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The buggy class docs, \n   (c) The related functions, \n   (d) The failing test, \n   (e) The corresponding error message, \n   (f) The actual input/output variable values, \n   (g) The expected input/output variable values\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) the function satisfies the expected input/output variable information provided\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom tornado.concurrent import Future, future_add_done_callback, future_set_result_unless_cancelled\nfrom tornado.escape import native_str, utf8\nfrom tornado import httputil\nfrom tornado import iostream\nfrom typing import cast, Optional, Type, Awaitable, Callable, Union, Tuple\n```\n\n",
    "source_code_body": "# This function from the same file, but not the same class, is called by the buggy function\ndef _format_chunk(self, chunk: bytes) -> bytes:\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef write(self, chunk: bytes) -> 'Future[None]':\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _on_write_complete(self, future: 'Future[None]') -> None:\n    # Please ignore the body of this function\n\n# The declaration of the class containing the buggy function\nclass HTTP1Connection(httputil.HTTPConnection):\n    \"\"\"\n    Implements the HTTP/1.x protocol.\n    \n    This class can be on its own for clients, or via `HTTP1ServerConnection`\n    for servers.\n    \"\"\"\n\n\n    # This function from the same class is called by the buggy function\n    def _format_chunk(self, chunk: bytes) -> bytes:\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def write(self, chunk: bytes) -> 'Future[None]':\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def _on_write_complete(self, future: 'Future[None]') -> None:\n        # Please ignore the body of this function\n\n\n\n    # this is the buggy function you need to fix\n    def write_headers(\n        self,\n        start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n        headers: httputil.HTTPHeaders,\n        chunk: bytes = None,\n    ) -> \"Future[None]\":\n        \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n        lines = []\n        if self.is_client:\n            assert isinstance(start_line, httputil.RequestStartLine)\n            self._request_start_line = start_line\n            lines.append(utf8(\"%s %s HTTP/1.1\" % (start_line[0], start_line[1])))\n            # Client requests with a non-empty body must have either a\n            # Content-Length or a Transfer-Encoding.\n            self._chunking_output = (\n                start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n                and \"Content-Length\" not in headers\n                and \"Transfer-Encoding\" not in headers\n            )\n        else:\n            assert isinstance(start_line, httputil.ResponseStartLine)\n            assert self._request_start_line is not None\n            assert self._request_headers is not None\n            self._response_start_line = start_line\n            lines.append(utf8(\"HTTP/1.1 %d %s\" % (start_line[1], start_line[2])))\n            self._chunking_output = (\n                # TODO: should this use\n                # self._request_start_line.version or\n                # start_line.version?\n                self._request_start_line.version == \"HTTP/1.1\"\n                # 1xx, 204 and 304 responses have no body (not even a zero-length\n                # body), and so should not have either Content-Length or\n                # Transfer-Encoding headers.\n                and start_line.code not in (204, 304)\n                and (start_line.code < 100 or start_line.code >= 200)\n                # No need to chunk the output if a Content-Length is specified.\n                and \"Content-Length\" not in headers\n                # Applications are discouraged from touching Transfer-Encoding,\n                # but if they do, leave it alone.\n                and \"Transfer-Encoding\" not in headers\n            )\n            # If connection to a 1.1 client will be closed, inform client\n            if (\n                self._request_start_line.version == \"HTTP/1.1\"\n                and self._disconnect_on_finish\n            ):\n                headers[\"Connection\"] = \"close\"\n            # If a 1.0 client asked for keep-alive, add the header.\n            if (\n                self._request_start_line.version == \"HTTP/1.0\"\n                and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n            ):\n                headers[\"Connection\"] = \"Keep-Alive\"\n        if self._chunking_output:\n            headers[\"Transfer-Encoding\"] = \"chunked\"\n        if not self.is_client and (\n            self._request_start_line.method == \"HEAD\"\n            or cast(httputil.ResponseStartLine, start_line).code == 304\n        ):\n            self._expected_content_remaining = 0\n        elif \"Content-Length\" in headers:\n            self._expected_content_remaining = int(headers[\"Content-Length\"])\n        else:\n            self._expected_content_remaining = None\n        # TODO: headers are supposed to be of type str, but we still have some\n        # cases that let bytes slip through. Remove these native_str calls when those\n        # are fixed.\n        header_lines = (\n            native_str(n) + \": \" + native_str(v) for n, v in headers.get_all()\n        )\n        lines.extend(l.encode(\"latin1\") for l in header_lines)\n        for line in lines:\n            if b\"\\n\" in line:\n                raise ValueError(\"Newline in header: \" + repr(line))\n        future = None\n        if self.stream.closed():\n            future = self._write_future = Future()\n            future.set_exception(iostream.StreamClosedError())\n            future.exception()\n        else:\n            future = self._write_future = Future()\n            data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n            if chunk:\n                data += self._format_chunk(chunk)\n            self._pending_write = self.stream.write(data)\n            future_add_done_callback(self._pending_write, self._on_write_complete)\n        return future\n    \n"
}