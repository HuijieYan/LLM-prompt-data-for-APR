{
    "tornado:8": {
        "github_issue_title": [
            "AttributeError if Websocket client misses required header\n"
        ],
        "github_issue_description": [
            "If the client misses required header for websocket handshake, the server raises AttributeError.\n\nMinimal code for reproduce\n\nClient\nimport socket\n\nREQ_1 = ('GET /ws HTTP/1.1\\r\\n'\n         'Host: example.com:9221\\r\\n'\n         'Upgrade: websocket\\r\\n'\n         'Connection: Upgrade\\r\\n'\n        #  'Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n'\n         'Sec-WebSocket-Version: 13\\r\\n'\n         '\\r\\n')\nconn = socket.create_connection(('127.0.0.1', 9221))\nconn.send(REQ_1.encode('utf-8'))\nresp_1 = conn.recv(10 * 1024)\nServer\nimport tornado.ioloop\nimport tornado.web\nimport tornado.websocket\n\nclass WsHandler(tornado.websocket.WebSocketHandler):\n    pass\n\ndef make_app():\n    return tornado.web.Application([\n        (r'/ws', WsHandler),\n    ])\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(9221)\n    tornado.ioloop.IOLoop.current().start()\nTraceback\nERROR:tornado.application:Uncaught exception GET /ws (127.0.0.1)\nHTTPServerRequest(protocol='http', host='example.com:8000', method='GET', uri='/ws', version='HTTP/1.1', remote_ip='127.0.0.1', headers={'Host': 'example.com:8000', 'Upgrade': 'websocket', 'Connection': 'Upgrade', 'Sec-Websocket-Version': '13'})\nTraceback (most recent call last):\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 618, in accept_connection\n    self._handle_websocket_headers()\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 634, in _handle_websocket_headers\n    raise ValueError(\"Missing/Invalid WebSocket headers\")\nValueError: Missing/Invalid WebSocket headers\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/web.py\", line 1467, in _stack_context_handle_exception\n    raise_exc_info((type, value, traceback))\n  File \"<string>\", line 4, in raise_exc_info\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/web.py\", line 1669, in wrapper\n    result = method(self, *args, **kwargs)\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 196, in get\n    self.ws_connection.accept_connection()\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 623, in accept_connection\n    self._abort()\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 512, in _abort\n    self.stream.close()  # forcibly tear down the connection\nAttributeError: 'NoneType' object has no attribute 'close'\nERROR:tornado.access:500 GET /ws (127.0.0.1) 4.13ms\nIt seems that WebSocketProtocol13.accept_connection calls WebSocketProtocol._abort immediately if there is missing required headers, however, it is before the handshake, thus there is yet no self.stream whereas the _abort function tries to self.stream.close(). Also, the _abort function calls self.close() and there is also the same buggy code which calls self.stream.close() without checking the nullity of self.stream.\n"
        ]
    }
}