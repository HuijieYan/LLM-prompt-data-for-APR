{
    "1.1.1": "def set_nodelay(self, value: bool) -> None:\n    \n    assert self.stream is not None\n    self.stream.set_nodelay(value)\n",
    "1.1.2": "Set the no-delay flag for this stream.\n\nBy default, small messages may be delayed and/or combined to minimize\nthe number of packets sent.  This can sometimes cause 200-500ms delays\ndue to the interaction between Nagle's algorithm and TCP delayed\nACKs.  To reduce this delay (at the expense of possibly increasing\nbandwidth usage), call ``self.set_nodelay(True)`` once the websocket\nconnection is established.\n\nSee `.BaseIOStream.set_nodelay` for additional details.\n\n.. versionadded:: 3.1",
    "1.2.1": "tornado/websocket.py",
    "1.2.2": null,
    "1.3.1": "class WebSocketHandler(tornado.web.RequestHandler)",
    "1.3.2": "Subclass this class to create a basic WebSocket handler.\n\nOverride `on_message` to handle incoming messages, and use\n`write_message` to send messages to the client. You can also\noverride `open` and `on_close` to handle opened and closed\nconnections.\n\nCustom upgrade response headers can be sent by overriding\n`~tornado.web.RequestHandler.set_default_headers` or\n`~tornado.web.RequestHandler.prepare`.\n\nSee http://dev.w3.org/html5/websockets/ for details on the\nJavaScript interface.  The protocol is specified at\nhttp://tools.ietf.org/html/rfc6455.\n\nHere is an example WebSocket handler that echos back all received messages\nback to the client:\n\n.. testcode::\n\n  class EchoWebSocket(tornado.websocket.WebSocketHandler):\n      def open(self):\n          print(\"WebSocket opened\")\n\n      def on_message(self, message):\n          self.write_message(u\"You said: \" + message)\n\n      def on_close(self):\n          print(\"WebSocket closed\")\n\n.. testoutput::\n   :hide:\n\nWebSockets are not standard HTTP connections. The \"handshake\" is\nHTTP, but after the handshake, the protocol is\nmessage-based. Consequently, most of the Tornado HTTP facilities\nare not available in handlers of this type. The only communication\nmethods available to you are `write_message()`, `ping()`, and\n`close()`. Likewise, your request handler class should implement\n`open()` method rather than ``get()`` or ``post()``.\n\nIf you map the handler above to ``/websocket`` in your application, you can\ninvoke it in JavaScript with::\n\n  var ws = new WebSocket(\"ws://localhost:8888/websocket\");\n  ws.onopen = function() {\n     ws.send(\"Hello, world\");\n  };\n  ws.onmessage = function (evt) {\n     alert(evt.data);\n  };\n\nThis script pops up an alert box that says \"You said: Hello, world\".\n\nWeb browsers allow any site to open a websocket connection to any other,\ninstead of using the same-origin policy that governs other network\naccess from javascript.  This can be surprising and is a potential\nsecurity hole, so since Tornado 4.0 `WebSocketHandler` requires\napplications that wish to receive cross-origin websockets to opt in\nby overriding the `~WebSocketHandler.check_origin` method (see that\nmethod's docs for details).  Failure to do so is the most likely\ncause of 403 errors when making a websocket connection.\n\nWhen using a secure websocket connection (``wss://``) with a self-signed\ncertificate, the connection from a browser may fail because it wants\nto show the \"accept this certificate\" dialog but has nowhere to show it.\nYou must first visit a regular HTML page using the same certificate\nto accept it before the websocket connection will succeed.\n\nIf the application setting ``websocket_ping_interval`` has a non-zero\nvalue, a ping will be sent periodically, and the connection will be\nclosed if a response is not received before the ``websocket_ping_timeout``.\n\nMessages larger than the ``websocket_max_message_size`` application setting\n(default 10MiB) will not be accepted.\n\n.. versionchanged:: 4.5\n   Added ``websocket_ping_interval``, ``websocket_ping_timeout``, and\n   ``websocket_max_message_size``.",
    "1.4.1": [
        "set_nodelay(self, value: bool) -> None"
    ],
    "1.4.2": [
        "set_nodelay(self, value: bool) -> None"
    ],
    "1.5.1": [
        "    @gen_test\n    def test_nodelay(self):\n        ws = yield self.ws_connect(\"/nodelay\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello\")"
    ],
    "1.5.2": [
        "tornado/test/websocket_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: None != 'hello'"
        ]
    ],
    "2.1.2": [
        [
            "self = <tornado.test.websocket_test.WebSocketTest testMethod=test_nodelay>\n\n    @gen_test\n    def test_nodelay(self):\n        ws = yield self.ws_connect(\"/nodelay\")\n        res = yield ws.read_message()\n>       self.assertEqual(res, \"hello\")",
            "\ntornado/test/websocket_test.py:576: AssertionError"
        ]
    ],
    "2.2.1": null,
    "2.2.2": null,
    "2.3.1": [
        [
            {
                "value": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.3.2": [
        [
            {
                "value": "bool"
            },
            {}
        ]
    ],
    "3.1.1": [
        "WebsocketHandler.set_nodelay results in assertion failure\n"
    ],
    "3.1.2": [
        "In previous versions of Torando, WebsocketHandler.set_nodelay could be called from open to set the nodelay option. In Tornado 6.0, this results in an assertion failure:\n\nFile \".../tornado/websocket.py\", line 561, in set_nodelay\nassert self.stream is not None\n"
    ]
}