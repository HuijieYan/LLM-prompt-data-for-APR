{
    "1.1.1": "def _update_next(self, current_time):\n    if self._next_timeout <= current_time:\n        callback_time_sec = self.callback_time / 1000.0\n        self._next_timeout += (math.floor((current_time - self._next_timeout) /\n                                          callback_time_sec) + 1) * callback_time_sec\n",
    "1.1.2": null,
    "1.2.1": "class PeriodicCallback(object)",
    "1.2.2": "Schedules the given callback to be called periodically.\n\nThe callback is called every ``callback_time`` milliseconds.\nNote that the timeout is given in milliseconds, while most other\ntime-related functions in Tornado use seconds.\n\nIf the callback runs for longer than ``callback_time`` milliseconds,\nsubsequent invocations will be skipped to get back on schedule.\n\n`start` must be called after the `PeriodicCallback` is created.\n\n.. versionchanged:: 5.0\n   The ``io_loop`` argument (deprecated since version 4.1) has been removed.",
    "1.2.3": null,
    "1.3.1": "tornado/ioloop.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_clock_backwards(self):\n        pc = PeriodicCallback(None, 10000)\n        # Backwards jumps are ignored, potentially resulting in a\n        # slightly slow schedule (although we assume that when\n        # time.time() and time.monotonic() are different, time.time()\n        # is getting adjusted by NTP and is therefore more accurate)\n        self.assertEqual(self.simulate_calls(pc, [-2, -1, -3, -2, 0]),\n                         [1010, 1020, 1030, 1040, 1050])\n\n        # For big jumps, we should perhaps alter the schedule, but we\n        # don't currently. This trace shows that we run callbacks\n        # every 10s of time.time(), but the first and second calls are\n        # 110s of real time apart because the backwards jump is\n        # ignored.\n        self.assertEqual(self.simulate_calls(pc, [-100, 0, 0]),\n                         [1010, 1020, 1030])"
    ],
    "1.4.2": [
        "tornado/test/ioloop_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Lists differ: [1010.0, 1010.0, 1010.0, 1010.0, 1010.0] != [1010, 1020, 1030, 1040, 1050]\nE       \nE       First differing element 1:\nE       1010.0\nE       1020\nE       \nE       - [1010.0, 1010.0, 1010.0, 1010.0, 1010.0]\nE       + [1010, 1020, 1030, 1040, 1050]"
        ]
    ],
    "2.1.2": [
        [
            "self = <tornado.test.ioloop_test.TestPeriodicCallbackMath testMethod=test_clock_backwards>\n\n    def test_clock_backwards(self):\n        pc = PeriodicCallback(None, 10000)\n        # Backwards jumps are ignored, potentially resulting in a\n        # slightly slow schedule (although we assume that when\n        # time.time() and time.monotonic() are different, time.time()\n        # is getting adjusted by NTP and is therefore more accurate)\n        self.assertEqual(self.simulate_calls(pc, [-2, -1, -3, -2, 0]),\n>                        [1010, 1020, 1030, 1040, 1050])",
            "\ntornado/test/ioloop_test.py:838: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self._next_timeout": {
                    "value": "1000",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1000",
                    "shape": null,
                    "omitted": false
                },
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                },
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1008.0",
                    "shape": null,
                    "omitted": false
                },
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1009.0",
                    "shape": null,
                    "omitted": false
                },
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1007.0",
                    "shape": null,
                    "omitted": false
                },
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "self._next_timeout": "int",
                "current_time": "int",
                "self.callback_time": "int"
            },
            {
                "self._next_timeout": "float",
                "callback_time_sec": "float"
            }
        ],
        [
            {
                "self._next_timeout": "float",
                "current_time": "float",
                "self.callback_time": "int"
            },
            {}
        ],
        [
            {
                "self._next_timeout": "float",
                "current_time": "float",
                "self.callback_time": "int"
            },
            {}
        ],
        [
            {
                "self._next_timeout": "float",
                "current_time": "float",
                "self.callback_time": "int"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1000",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1000",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1008.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1020.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1020.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1019.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1030.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1030.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1027.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1040.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1040.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1038.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1050.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1010.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "910.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1020.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.callback_time": {
                    "value": "10000",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1020.0",
                    "shape": null,
                    "omitted": false
                },
                "current_time": {
                    "value": "1020.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "callback_time_sec": {
                    "value": "10.0",
                    "shape": null,
                    "omitted": false
                },
                "self._next_timeout": {
                    "value": "1030.0",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "int",
                "current_time": "int"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ],
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "float",
                "current_time": "float"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ],
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "float",
                "current_time": "float"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ],
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "float",
                "current_time": "float"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ],
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "float",
                "current_time": "float"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ],
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "float",
                "current_time": "float"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ],
        [
            {
                "self.callback_time": "int",
                "self._next_timeout": "float",
                "current_time": "float"
            },
            {
                "callback_time_sec": "float",
                "self._next_timeout": "float"
            }
        ]
    ],
    "3.1.1": [
        "ioloop: PeriodicCallback executes too often on windows\n"
    ],
    "3.1.2": [
        "Here is the code:\nimport math\n\nimport logging\nfrom crontab import CronTab\nfrom tornado.ioloop import PeriodicCallback, IOLoop\n\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\nclass CronTabCallback(PeriodicCallback):\n\ndef __init__(self, callback, schedule):\n    self._callback = callback\n    self._crontab = CronTab(schedule)\n    super(CronTabCallback, self).__init__(self.run, self._calc_callbacktime())\n\ndef _calc_callbacktime(self, now=None):\n    return math.ceil(self._crontab.next(now)) * 1000.0\n\ndef run(self):\n    return self._callback()\n\ndef _schedule_next(self):\n    self.callback_time = self._calc_callbacktime()\n    logging.info('calc ---------------------')\n    logging.info('delay %s' % self.callback_time)\n    logging.info('last execute %s' % self._next_timeout)\n\n    last = self._next_timeout\n    super(CronTabCallback, self)._schedule_next()\n\n    if last == self._next_timeout:\n        logging.error('error !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n\n    logging.info('current: %s' % self.io_loop.time())\n    logging.info('calc next: %s' % self._next_timeout)\n    logging.info('--------------------------\\n')\ndef crontab(schedule):\ndef decorator(func):\nCronTabCallback(func, schedule).start()\nreturn func\n\nreturn decorator\n@crontab('*/1 * * * *')\ndef run():\nlogging.info('execute ... \\n')\n\nif name == 'main':\nIOLoop.current().start()\n\nHere is the console log\n2018-03-30 11:33:00,311 - asyncio - DEBUG - Using selector: SelectSelector\n2018-03-30 11:33:00,316 - root - INFO - calc ---------------------\n2018-03-30 11:33:00,316 - root - INFO - delay 60000.0\n2018-03-30 11:33:00,316 - root - INFO - last execute 1522380780.3169544\n2018-03-30 11:33:00,316 - root - INFO - current: 1522380780.3169544\n2018-03-30 11:33:00,316 - root - INFO - calc next: 1522380840.3169544\n2018-03-30 11:33:00,316 - root - INFO - --------------------------\n\n2018-03-30 11:34:00,313 - root - INFO - execute ...\n\n2018-03-30 11:34:00,313 - root - INFO - calc ---------------------\n2018-03-30 11:34:00,313 - root - INFO - delay 60000.0\n2018-03-30 11:34:00,313 - root - INFO - last execute 1522380840.3169544\n2018-03-30 11:34:00,313 - root - ERROR - error !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n2018-03-30 11:34:00,313 - root - INFO - current: 1522380840.3139544\n2018-03-30 11:34:00,313 - root - INFO - calc next: 1522380840.3169544\n2018-03-30 11:34:00,313 - root - INFO - --------------------------\n\n2018-03-30 11:34:00,318 - root - INFO - execute ...\n\n2018-03-30 11:34:00,318 - root - INFO - calc ---------------------\n2018-03-30 11:34:00,318 - root - INFO - delay 60000.0\n2018-03-30 11:34:00,318 - root - INFO - last execute 1522380840.3169544\n2018-03-30 11:34:00,318 - root - INFO - current: 1522380840.3189545\n2018-03-30 11:34:00,318 - root - INFO - calc next: 1522380900.3169544\n2018-03-30 11:34:00,318 - root - INFO - --------------------------\n\nEnvironment:\nOS: windows 7\nPython: python 3.6\nDependent library: crontab 0.22.0\n\nTornado 4.5.1 python2 (ok) python3(ok)\nTornado 5.0.1 python2 (ok) python3 (linux ok, window has issue)\n"
    ],
    "used_imports": "import math"
}