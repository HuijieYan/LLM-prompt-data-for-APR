{
    "tornado:3": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/tornado_3/tornado/httpclient.py": {
            "buggy_functions": [
                {
                    "function_name": "close",
                    "function_code": "def close(self) -> None:\n    \"\"\"Destroys this HTTP client, freeing any file descriptors used.\n\n    This method is **not needed in normal use** due to the way\n    that `AsyncHTTPClient` objects are transparently reused.\n    ``close()`` is generally only necessary when either the\n    `.IOLoop` is also being closed, or the ``force_instance=True``\n    argument was used when creating the `AsyncHTTPClient`.\n\n    No other methods may be called on the `AsyncHTTPClient` after\n    ``close()``.\n\n    \"\"\"\n    if self._closed:\n        return\n    self._closed = True\n    if self._instance_cache is not None:\n        if self._instance_cache.get(self.io_loop) is not self:\n            raise RuntimeError(\"inconsistent AsyncHTTPClient cache\")\n        del self._instance_cache[self.io_loop]\n",
                    "decorators": [],
                    "docstring": "Destroys this HTTP client, freeing any file descriptors used.\n\nThis method is **not needed in normal use** due to the way\nthat `AsyncHTTPClient` objects are transparently reused.\n``close()`` is generally only necessary when either the\n`.IOLoop` is also being closed, or the ``force_instance=True``\nargument was used when creating the `AsyncHTTPClient`.\n\nNo other methods may be called on the `AsyncHTTPClient` after\n``close()``.",
                    "start_line": 219,
                    "end_line": 238,
                    "variables": {
                        "self._closed": [
                            232,
                            234
                        ],
                        "self": [
                            232,
                            234,
                            235,
                            236,
                            238
                        ],
                        "self._instance_cache": [
                            235,
                            236,
                            238
                        ],
                        "self._instance_cache.get": [
                            236
                        ],
                        "self.io_loop": [
                            236,
                            238
                        ],
                        "RuntimeError": [
                            237
                        ]
                    },
                    "filtered_variables": {
                        "self._closed": [
                            232,
                            234
                        ],
                        "self": [
                            232,
                            234,
                            235,
                            236,
                            238
                        ],
                        "self._instance_cache": [
                            235,
                            236,
                            238
                        ],
                        "self._instance_cache.get": [
                            236
                        ],
                        "self.io_loop": [
                            236,
                            238
                        ]
                    },
                    "diff_line_number": 236,
                    "class_data": {
                        "signature": "class AsyncHTTPClient(Configurable)",
                        "docstring": "An non-blocking HTTP client.\n\nExample usage::\n\n    async def f():\n        http_client = AsyncHTTPClient()\n        try:\n            response = await http_client.fetch(\"http://www.google.com\")\n        except Exception as e:\n            print(\"Error: %s\" % e)\n        else:\n            print(response.body)\n\nThe constructor for this class is magic in several respects: It\nactually creates an instance of an implementation-specific\nsubclass, and instances are reused as a kind of pseudo-singleton\n(one per `.IOLoop`). The keyword argument ``force_instance=True``\ncan be used to suppress this singleton behavior. Unless\n``force_instance=True`` is used, no arguments should be passed to\nthe `AsyncHTTPClient` constructor. The implementation subclass as\nwell as arguments to its constructor can be set with the static\nmethod `configure()`\n\nAll `AsyncHTTPClient` implementations support a ``defaults``\nkeyword argument, which can be used to set default values for\n`HTTPRequest` attributes.  For example::\n\n    AsyncHTTPClient.configure(\n        None, defaults=dict(user_agent=\"MyUserAgent\"))\n    # or with force_instance:\n    client = AsyncHTTPClient(force_instance=True,\n        defaults=dict(user_agent=\"MyUserAgent\"))\n\n.. versionchanged:: 5.0\n   The ``io_loop`` argument (deprecated since version 4.1) has been removed.",
                        "constructor_docstring": null,
                        "functions": [
                            "@classmethod\ndef configurable_base(cls) -> Type[Configurable]:\n    return AsyncHTTPClient",
                            "@classmethod\ndef configurable_default(cls) -> Type[Configurable]:\n    from tornado.simple_httpclient import SimpleAsyncHTTPClient\n    return SimpleAsyncHTTPClient",
                            "@classmethod\ndef _async_clients(cls) -> Dict[IOLoop, 'AsyncHTTPClient']:\n    attr_name = '_async_client_dict_' + cls.__name__\n    if not hasattr(cls, attr_name):\n        setattr(cls, attr_name, weakref.WeakKeyDictionary())\n    return getattr(cls, attr_name)",
                            "def __new__(cls, force_instance: bool=False, **kwargs: Any) -> 'AsyncHTTPClient':\n    io_loop = IOLoop.current()\n    if force_instance:\n        instance_cache = None\n    else:\n        instance_cache = cls._async_clients()\n    if instance_cache is not None and io_loop in instance_cache:\n        return instance_cache[io_loop]\n    instance = super(AsyncHTTPClient, cls).__new__(cls, **kwargs)\n    instance._instance_cache = instance_cache\n    if instance_cache is not None:\n        instance_cache[instance.io_loop] = instance\n    return instance",
                            "def initialize(self, defaults: Dict[str, Any]=None) -> None:\n    self.io_loop = IOLoop.current()\n    self.defaults = dict(HTTPRequest._DEFAULTS)\n    if defaults is not None:\n        self.defaults.update(defaults)\n    self._closed = False",
                            "def close(self) -> None:\n    \"\"\"Destroys this HTTP client, freeing any file descriptors used.\n\n    This method is **not needed in normal use** due to the way\n    that `AsyncHTTPClient` objects are transparently reused.\n    ``close()`` is generally only necessary when either the\n    `.IOLoop` is also being closed, or the ``force_instance=True``\n    argument was used when creating the `AsyncHTTPClient`.\n\n    No other methods may be called on the `AsyncHTTPClient` after\n    ``close()``.\n\n    \"\"\"\n    if self._closed:\n        return\n    self._closed = True\n    if self._instance_cache is not None:\n        if self._instance_cache.get(self.io_loop) is not self:\n            raise RuntimeError('inconsistent AsyncHTTPClient cache')\n        del self._instance_cache[self.io_loop]",
                            "def fetch(self, request: Union[str, 'HTTPRequest'], raise_error: bool=True, **kwargs: Any) -> 'Future[HTTPResponse]':\n    \"\"\"Executes a request, asynchronously returning an `HTTPResponse`.\n\n    The request may be either a string URL or an `HTTPRequest` object.\n    If it is a string, we construct an `HTTPRequest` using any additional\n    kwargs: ``HTTPRequest(request, **kwargs)``\n\n    This method returns a `.Future` whose result is an\n    `HTTPResponse`. By default, the ``Future`` will raise an\n    `HTTPError` if the request returned a non-200 response code\n    (other errors may also be raised if the server could not be\n    contacted). Instead, if ``raise_error`` is set to False, the\n    response will always be returned regardless of the response\n    code.\n\n    If a ``callback`` is given, it will be invoked with the `HTTPResponse`.\n    In the callback interface, `HTTPError` is not automatically raised.\n    Instead, you must check the response's ``error`` attribute or\n    call its `~HTTPResponse.rethrow` method.\n\n    .. versionchanged:: 6.0\n\n       The ``callback`` argument was removed. Use the returned\n       `.Future` instead.\n\n       The ``raise_error=False`` argument only affects the\n       `HTTPError` raised when a non-200 response code is used,\n       instead of suppressing all errors.\n    \"\"\"\n    if self._closed:\n        raise RuntimeError('fetch() called on closed AsyncHTTPClient')\n    if not isinstance(request, HTTPRequest):\n        request = HTTPRequest(url=request, **kwargs)\n    elif kwargs:\n        raise ValueError(\"kwargs can't be used if request is an HTTPRequest object\")\n    request.headers = httputil.HTTPHeaders(request.headers)\n    request_proxy = _RequestProxy(request, self.defaults)\n    future = Future()\n\n    def handle_response(response: 'HTTPResponse') -> None:\n        if response.error:\n            if raise_error or not response._error_is_response_code:\n                future.set_exception(response.error)\n                return\n        future_set_result_unless_cancelled(future, response)\n    self.fetch_impl(cast(HTTPRequest, request_proxy), handle_response)\n    return future",
                            "def fetch_impl(self, request: 'HTTPRequest', callback: Callable[['HTTPResponse'], None]) -> None:\n    raise NotImplementedError()",
                            "@classmethod\ndef configure(cls, impl: Union[None, str, Type[Configurable]], **kwargs: Any) -> None:\n    \"\"\"Configures the `AsyncHTTPClient` subclass to use.\n\n    ``AsyncHTTPClient()`` actually creates an instance of a subclass.\n    This method may be called with either a class object or the\n    fully-qualified name of such a class (or ``None`` to use the default,\n    ``SimpleAsyncHTTPClient``)\n\n    If additional keyword arguments are given, they will be passed\n    to the constructor of each subclass instance created.  The\n    keyword argument ``max_clients`` determines the maximum number\n    of simultaneous `~AsyncHTTPClient.fetch()` operations that can\n    execute in parallel on each `.IOLoop`.  Additional arguments\n    may be supported depending on the implementation class in use.\n\n    Example::\n\n       AsyncHTTPClient.configure(\"tornado.curl_httpclient.CurlAsyncHTTPClient\")\n    \"\"\"\n    super(AsyncHTTPClient, cls).configure(impl, **kwargs)",
                            "def handle_response(response: 'HTTPResponse') -> None:\n    if response.error:\n        if raise_error or not response._error_is_response_code:\n            future.set_exception(response.error)\n            return\n    future_set_result_unless_cancelled(future, response)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_instance_cache = None"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "configurable_base(cls) -> Type[Configurable]",
                            "configurable_default(cls) -> Type[Configurable]",
                            "_async_clients(cls) -> Dict[IOLoop, 'AsyncHTTPClient']",
                            "__new__(cls, force_instance: bool=False, **kwargs: Any) -> 'AsyncHTTPClient'",
                            "initialize(self, defaults: Dict[str, Any]=None) -> None",
                            "close(self) -> None",
                            "fetch(self, request: Union[str, 'HTTPRequest'], raise_error: bool=True, **kwargs: Any) -> 'Future[HTTPResponse]'",
                            "fetch_impl(self, request: 'HTTPRequest', callback: Callable[['HTTPResponse'], None]) -> None",
                            "configure(cls, impl: Union[None, str, Type[Configurable]], **kwargs: Any) -> None",
                            "handle_response(response: 'HTTPResponse') -> None"
                        ],
                        "class_level_variable_names": [
                            "_instance_cache"
                        ],
                        "constructor_variable_names": []
                    },
                    "used_imports": [],
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def main() -> None:\n    from tornado.options import define, options, parse_command_line\n\n    define(\"print_headers\", type=bool, default=False)\n    define(\"print_body\", type=bool, default=True)\n    define(\"follow_redirects\", type=bool, default=True)\n    define(\"validate_cert\", type=bool, default=True)\n    define(\"proxy_host\", type=str)\n    define(\"proxy_port\", type=int)\n    args = parse_command_line()\n    client = HTTPClient()\n    for arg in args:\n        try:\n            response = client.fetch(\n                arg,\n                follow_redirects=options.follow_redirects,\n                validate_cert=options.validate_cert,\n                proxy_host=options.proxy_host,\n                proxy_port=options.proxy_port,\n            )\n        except HTTPError as e:\n            if e.response is not None:\n                response = e.response\n            else:\n                raise\n        if options.print_headers:\n            print(response.headers)\n        if options.print_body:\n            print(native_str(response.body))\n    client.close()",
                "def __init__(\n    self, async_client_class: Type[\"AsyncHTTPClient\"] = None, **kwargs: Any\n) -> None:\n    # Initialize self._closed at the beginning of the constructor\n    # so that an exception raised here doesn't lead to confusing\n    # failures in __del__.\n    self._closed = True\n    self._io_loop = IOLoop(make_current=False)\n    if async_client_class is None:\n        async_client_class = AsyncHTTPClient\n\n    # Create the client while our IOLoop is \"current\", without\n    # clobbering the thread's real current IOLoop (if any).\n    async def make_client() -> \"AsyncHTTPClient\":\n        await gen.sleep(0)\n        assert async_client_class is not None\n        return async_client_class(**kwargs)\n\n    self._async_client = self._io_loop.run_sync(make_client)\n    self._closed = False",
                "def __del__(self) -> None:\n    self.close()",
                "def close(self) -> None:\n    \"\"\"Closes the HTTPClient, freeing any resources used.\"\"\"\n    if not self._closed:\n        self._async_client.close()\n        self._io_loop.close()\n        self._closed = True",
                "def fetch(\n    self, request: Union[\"HTTPRequest\", str], **kwargs: Any\n) -> \"HTTPResponse\":\n    \"\"\"Executes a request, returning an `HTTPResponse`.\n\n    The request may be either a string URL or an `HTTPRequest` object.\n    If it is a string, we construct an `HTTPRequest` using any additional\n    kwargs: ``HTTPRequest(request, **kwargs)``\n\n    If an error occurs during the fetch, we raise an `HTTPError` unless\n    the ``raise_error`` keyword argument is set to False.\n    \"\"\"\n    response = self._io_loop.run_sync(\n        functools.partial(self._async_client.fetch, request, **kwargs)\n    )\n    return response",
                "@classmethod\ndef configurable_base(cls) -> Type[Configurable]:\n    return AsyncHTTPClient",
                "@classmethod\ndef configurable_default(cls) -> Type[Configurable]:\n    from tornado.simple_httpclient import SimpleAsyncHTTPClient\n\n    return SimpleAsyncHTTPClient",
                "@classmethod\ndef _async_clients(cls) -> Dict[IOLoop, \"AsyncHTTPClient\"]:\n    attr_name = \"_async_client_dict_\" + cls.__name__\n    if not hasattr(cls, attr_name):\n        setattr(cls, attr_name, weakref.WeakKeyDictionary())\n    return getattr(cls, attr_name)",
                "def __new__(cls, force_instance: bool = False, **kwargs: Any) -> \"AsyncHTTPClient\":\n    io_loop = IOLoop.current()\n    if force_instance:\n        instance_cache = None\n    else:\n        instance_cache = cls._async_clients()\n    if instance_cache is not None and io_loop in instance_cache:\n        return instance_cache[io_loop]\n    instance = super(AsyncHTTPClient, cls).__new__(cls, **kwargs)  # type: ignore\n    # Make sure the instance knows which cache to remove itself from.\n    # It can't simply call _async_clients() because we may be in\n    # __new__(AsyncHTTPClient) but instance.__class__ may be\n    # SimpleAsyncHTTPClient.\n    instance._instance_cache = instance_cache\n    if instance_cache is not None:\n        instance_cache[instance.io_loop] = instance\n    return instance",
                "def initialize(self, defaults: Dict[str, Any] = None) -> None:\n    self.io_loop = IOLoop.current()\n    self.defaults = dict(HTTPRequest._DEFAULTS)\n    if defaults is not None:\n        self.defaults.update(defaults)\n    self._closed = False",
                "def close(self) -> None:\n    \"\"\"Destroys this HTTP client, freeing any file descriptors used.\n\n    This method is **not needed in normal use** due to the way\n    that `AsyncHTTPClient` objects are transparently reused.\n    ``close()`` is generally only necessary when either the\n    `.IOLoop` is also being closed, or the ``force_instance=True``\n    argument was used when creating the `AsyncHTTPClient`.\n\n    No other methods may be called on the `AsyncHTTPClient` after\n    ``close()``.\n\n    \"\"\"\n    if self._closed:\n        return\n    self._closed = True\n    if self._instance_cache is not None:\n        if self._instance_cache.get(self.io_loop) is not self:\n            raise RuntimeError(\"inconsistent AsyncHTTPClient cache\")\n        del self._instance_cache[self.io_loop]",
                "def fetch(\n    self,\n    request: Union[str, \"HTTPRequest\"],\n    raise_error: bool = True,\n    **kwargs: Any\n) -> \"Future[HTTPResponse]\":\n    \"\"\"Executes a request, asynchronously returning an `HTTPResponse`.\n\n    The request may be either a string URL or an `HTTPRequest` object.\n    If it is a string, we construct an `HTTPRequest` using any additional\n    kwargs: ``HTTPRequest(request, **kwargs)``\n\n    This method returns a `.Future` whose result is an\n    `HTTPResponse`. By default, the ``Future`` will raise an\n    `HTTPError` if the request returned a non-200 response code\n    (other errors may also be raised if the server could not be\n    contacted). Instead, if ``raise_error`` is set to False, the\n    response will always be returned regardless of the response\n    code.\n\n    If a ``callback`` is given, it will be invoked with the `HTTPResponse`.\n    In the callback interface, `HTTPError` is not automatically raised.\n    Instead, you must check the response's ``error`` attribute or\n    call its `~HTTPResponse.rethrow` method.\n\n    .. versionchanged:: 6.0\n\n       The ``callback`` argument was removed. Use the returned\n       `.Future` instead.\n\n       The ``raise_error=False`` argument only affects the\n       `HTTPError` raised when a non-200 response code is used,\n       instead of suppressing all errors.\n    \"\"\"\n    if self._closed:\n        raise RuntimeError(\"fetch() called on closed AsyncHTTPClient\")\n    if not isinstance(request, HTTPRequest):\n        request = HTTPRequest(url=request, **kwargs)\n    else:\n        if kwargs:\n            raise ValueError(\n                \"kwargs can't be used if request is an HTTPRequest object\"\n            )\n    # We may modify this (to add Host, Accept-Encoding, etc),\n    # so make sure we don't modify the caller's object.  This is also\n    # where normal dicts get converted to HTTPHeaders objects.\n    request.headers = httputil.HTTPHeaders(request.headers)\n    request_proxy = _RequestProxy(request, self.defaults)\n    future = Future()  # type: Future[HTTPResponse]\n\n    def handle_response(response: \"HTTPResponse\") -> None:\n        if response.error:\n            if raise_error or not response._error_is_response_code:\n                future.set_exception(response.error)\n                return\n        future_set_result_unless_cancelled(future, response)\n\n    self.fetch_impl(cast(HTTPRequest, request_proxy), handle_response)\n    return future",
                "def fetch_impl(\n    self, request: \"HTTPRequest\", callback: Callable[[\"HTTPResponse\"], None]\n) -> None:\n    raise NotImplementedError()",
                "@classmethod\ndef configure(\n    cls, impl: Union[None, str, Type[Configurable]], **kwargs: Any\n) -> None:\n    \"\"\"Configures the `AsyncHTTPClient` subclass to use.\n\n    ``AsyncHTTPClient()`` actually creates an instance of a subclass.\n    This method may be called with either a class object or the\n    fully-qualified name of such a class (or ``None`` to use the default,\n    ``SimpleAsyncHTTPClient``)\n\n    If additional keyword arguments are given, they will be passed\n    to the constructor of each subclass instance created.  The\n    keyword argument ``max_clients`` determines the maximum number\n    of simultaneous `~AsyncHTTPClient.fetch()` operations that can\n    execute in parallel on each `.IOLoop`.  Additional arguments\n    may be supported depending on the implementation class in use.\n\n    Example::\n\n       AsyncHTTPClient.configure(\"tornado.curl_httpclient.CurlAsyncHTTPClient\")\n    \"\"\"\n    super(AsyncHTTPClient, cls).configure(impl, **kwargs)",
                "def __init__(\n    self,\n    url: str,\n    method: str = \"GET\",\n    headers: Union[Dict[str, str], httputil.HTTPHeaders] = None,\n    body: Union[bytes, str] = None,\n    auth_username: str = None,\n    auth_password: str = None,\n    auth_mode: str = None,\n    connect_timeout: float = None,\n    request_timeout: float = None,\n    if_modified_since: Union[float, datetime.datetime] = None,\n    follow_redirects: bool = None,\n    max_redirects: int = None,\n    user_agent: str = None,\n    use_gzip: bool = None,\n    network_interface: str = None,\n    streaming_callback: Callable[[bytes], None] = None,\n    header_callback: Callable[[str], None] = None,\n    prepare_curl_callback: Callable[[Any], None] = None,\n    proxy_host: str = None,\n    proxy_port: int = None,\n    proxy_username: str = None,\n    proxy_password: str = None,\n    proxy_auth_mode: str = None,\n    allow_nonstandard_methods: bool = None,\n    validate_cert: bool = None,\n    ca_certs: str = None,\n    allow_ipv6: bool = None,\n    client_key: str = None,\n    client_cert: str = None,\n    body_producer: Callable[[Callable[[bytes], None]], \"Future[None]\"] = None,\n    expect_100_continue: bool = False,\n    decompress_response: bool = None,\n    ssl_options: Union[Dict[str, Any], ssl.SSLContext] = None,\n) -> None:\n    r\"\"\"All parameters except ``url`` are optional.\n\n    :arg str url: URL to fetch\n    :arg str method: HTTP method, e.g. \"GET\" or \"POST\"\n    :arg headers: Additional HTTP headers to pass on the request\n    :type headers: `~tornado.httputil.HTTPHeaders` or `dict`\n    :arg body: HTTP request body as a string (byte or unicode; if unicode\n       the utf-8 encoding will be used)\n    :arg body_producer: Callable used for lazy/asynchronous request bodies.\n       It is called with one argument, a ``write`` function, and should\n       return a `.Future`.  It should call the write function with new\n       data as it becomes available.  The write function returns a\n       `.Future` which can be used for flow control.\n       Only one of ``body`` and ``body_producer`` may\n       be specified.  ``body_producer`` is not supported on\n       ``curl_httpclient``.  When using ``body_producer`` it is recommended\n       to pass a ``Content-Length`` in the headers as otherwise chunked\n       encoding will be used, and many servers do not support chunked\n       encoding on requests.  New in Tornado 4.0\n    :arg str auth_username: Username for HTTP authentication\n    :arg str auth_password: Password for HTTP authentication\n    :arg str auth_mode: Authentication mode; default is \"basic\".\n       Allowed values are implementation-defined; ``curl_httpclient``\n       supports \"basic\" and \"digest\"; ``simple_httpclient`` only supports\n       \"basic\"\n    :arg float connect_timeout: Timeout for initial connection in seconds,\n       default 20 seconds\n    :arg float request_timeout: Timeout for entire request in seconds,\n       default 20 seconds\n    :arg if_modified_since: Timestamp for ``If-Modified-Since`` header\n    :type if_modified_since: `datetime` or `float`\n    :arg bool follow_redirects: Should redirects be followed automatically\n       or return the 3xx response? Default True.\n    :arg int max_redirects: Limit for ``follow_redirects``, default 5.\n    :arg str user_agent: String to send as ``User-Agent`` header\n    :arg bool decompress_response: Request a compressed response from\n       the server and decompress it after downloading.  Default is True.\n       New in Tornado 4.0.\n    :arg bool use_gzip: Deprecated alias for ``decompress_response``\n       since Tornado 4.0.\n    :arg str network_interface: Network interface or source IP to use for request.\n       See ``curl_httpclient`` note below.\n    :arg collections.abc.Callable streaming_callback: If set, ``streaming_callback`` will\n       be run with each chunk of data as it is received, and\n       ``HTTPResponse.body`` and ``HTTPResponse.buffer`` will be empty in\n       the final response.\n    :arg collections.abc.Callable header_callback: If set, ``header_callback`` will\n       be run with each header line as it is received (including the\n       first line, e.g. ``HTTP/1.0 200 OK\\r\\n``, and a final line\n       containing only ``\\r\\n``.  All lines include the trailing newline\n       characters).  ``HTTPResponse.headers`` will be empty in the final\n       response.  This is most useful in conjunction with\n       ``streaming_callback``, because it's the only way to get access to\n       header data while the request is in progress.\n    :arg collections.abc.Callable prepare_curl_callback: If set, will be called with\n       a ``pycurl.Curl`` object to allow the application to make additional\n       ``setopt`` calls.\n    :arg str proxy_host: HTTP proxy hostname.  To use proxies,\n       ``proxy_host`` and ``proxy_port`` must be set; ``proxy_username``,\n       ``proxy_pass`` and ``proxy_auth_mode`` are optional.  Proxies are\n       currently only supported with ``curl_httpclient``.\n    :arg int proxy_port: HTTP proxy port\n    :arg str proxy_username: HTTP proxy username\n    :arg str proxy_password: HTTP proxy password\n    :arg str proxy_auth_mode: HTTP proxy Authentication mode;\n       default is \"basic\". supports \"basic\" and \"digest\"\n    :arg bool allow_nonstandard_methods: Allow unknown values for ``method``\n       argument? Default is False.\n    :arg bool validate_cert: For HTTPS requests, validate the server's\n       certificate? Default is True.\n    :arg str ca_certs: filename of CA certificates in PEM format,\n       or None to use defaults.  See note below when used with\n       ``curl_httpclient``.\n    :arg str client_key: Filename for client SSL key, if any.  See\n       note below when used with ``curl_httpclient``.\n    :arg str client_cert: Filename for client SSL certificate, if any.\n       See note below when used with ``curl_httpclient``.\n    :arg ssl.SSLContext ssl_options: `ssl.SSLContext` object for use in\n       ``simple_httpclient`` (unsupported by ``curl_httpclient``).\n       Overrides ``validate_cert``, ``ca_certs``, ``client_key``,\n       and ``client_cert``.\n    :arg bool allow_ipv6: Use IPv6 when available?  Default is true.\n    :arg bool expect_100_continue: If true, send the\n       ``Expect: 100-continue`` header and wait for a continue response\n       before sending the request body.  Only supported with\n       simple_httpclient.\n\n    .. note::\n\n        When using ``curl_httpclient`` certain options may be\n        inherited by subsequent fetches because ``pycurl`` does\n        not allow them to be cleanly reset.  This applies to the\n        ``ca_certs``, ``client_key``, ``client_cert``, and\n        ``network_interface`` arguments.  If you use these\n        options, you should pass them on every request (you don't\n        have to always use the same values, but it's not possible\n        to mix requests that specify these options with ones that\n        use the defaults).\n\n    .. versionadded:: 3.1\n       The ``auth_mode`` argument.\n\n    .. versionadded:: 4.0\n       The ``body_producer`` and ``expect_100_continue`` arguments.\n\n    .. versionadded:: 4.2\n       The ``ssl_options`` argument.\n\n    .. versionadded:: 4.5\n       The ``proxy_auth_mode`` argument.\n    \"\"\"\n    # Note that some of these attributes go through property setters\n    # defined below.\n    self.headers = headers\n    if if_modified_since:\n        self.headers[\"If-Modified-Since\"] = httputil.format_timestamp(\n            if_modified_since\n        )\n    self.proxy_host = proxy_host\n    self.proxy_port = proxy_port\n    self.proxy_username = proxy_username\n    self.proxy_password = proxy_password\n    self.proxy_auth_mode = proxy_auth_mode\n    self.url = url\n    self.method = method\n    self.body = body\n    self.body_producer = body_producer\n    self.auth_username = auth_username\n    self.auth_password = auth_password\n    self.auth_mode = auth_mode\n    self.connect_timeout = connect_timeout\n    self.request_timeout = request_timeout\n    self.follow_redirects = follow_redirects\n    self.max_redirects = max_redirects\n    self.user_agent = user_agent\n    if decompress_response is not None:\n        self.decompress_response = decompress_response  # type: Optional[bool]\n    else:\n        self.decompress_response = use_gzip\n    self.network_interface = network_interface\n    self.streaming_callback = streaming_callback\n    self.header_callback = header_callback\n    self.prepare_curl_callback = prepare_curl_callback\n    self.allow_nonstandard_methods = allow_nonstandard_methods\n    self.validate_cert = validate_cert\n    self.ca_certs = ca_certs\n    self.allow_ipv6 = allow_ipv6\n    self.client_key = client_key\n    self.client_cert = client_cert\n    self.ssl_options = ssl_options\n    self.expect_100_continue = expect_100_continue\n    self.start_time = time.time()",
                "@property\ndef headers(self) -> httputil.HTTPHeaders:\n    # TODO: headers may actually be a plain dict until fairly late in\n    # the process (AsyncHTTPClient.fetch), but practically speaking,\n    # whenever the property is used they're already HTTPHeaders.\n    return self._headers  # type: ignore",
                "@headers.setter\ndef headers(self, value: Union[Dict[str, str], httputil.HTTPHeaders]) -> None:\n    if value is None:\n        self._headers = httputil.HTTPHeaders()\n    else:\n        self._headers = value  # type: ignore",
                "@property\ndef body(self) -> bytes:\n    return self._body",
                "@body.setter\ndef body(self, value: Union[bytes, str]) -> None:\n    self._body = utf8(value)",
                "def __init__(\n    self,\n    request: HTTPRequest,\n    code: int,\n    headers: httputil.HTTPHeaders = None,\n    buffer: BytesIO = None,\n    effective_url: str = None,\n    error: BaseException = None,\n    request_time: float = None,\n    time_info: Dict[str, float] = None,\n    reason: str = None,\n    start_time: float = None,\n) -> None:\n    if isinstance(request, _RequestProxy):\n        self.request = request.request\n    else:\n        self.request = request\n    self.code = code\n    self.reason = reason or httputil.responses.get(code, \"Unknown\")\n    if headers is not None:\n        self.headers = headers\n    else:\n        self.headers = httputil.HTTPHeaders()\n    self.buffer = buffer\n    self._body = None  # type: Optional[bytes]\n    if effective_url is None:\n        self.effective_url = request.url\n    else:\n        self.effective_url = effective_url\n    self._error_is_response_code = False\n    if error is None:\n        if self.code < 200 or self.code >= 300:\n            self._error_is_response_code = True\n            self.error = HTTPError(self.code, message=self.reason, response=self)\n        else:\n            self.error = None\n    else:\n        self.error = error\n    self.start_time = start_time\n    self.request_time = request_time\n    self.time_info = time_info or {}",
                "@property\ndef body(self) -> bytes:\n    if self.buffer is None:\n        raise ValueError(\"body not set\")\n    elif self._body is None:\n        self._body = self.buffer.getvalue()\n\n    return self._body",
                "def rethrow(self) -> None:\n    \"\"\"If there was an error on the request, raise an `HTTPError`.\"\"\"\n    if self.error:\n        raise self.error",
                "def __repr__(self) -> str:\n    args = \",\".join(\"%s=%r\" % i for i in sorted(self.__dict__.items()))\n    return \"%s(%s)\" % (self.__class__.__name__, args)",
                "def __init__(\n    self, code: int, message: str = None, response: HTTPResponse = None\n) -> None:\n    self.code = code\n    self.message = message or httputil.responses.get(code, \"Unknown\")\n    self.response = response\n    super(HTTPClientError, self).__init__(code, message, response)",
                "def __str__(self) -> str:\n    return \"HTTP %d: %s\" % (self.code, self.message)",
                "def __init__(\n    self, request: HTTPRequest, defaults: Optional[Dict[str, Any]]\n) -> None:\n    self.request = request\n    self.defaults = defaults",
                "def __getattr__(self, name: str) -> Any:\n    request_attr = getattr(self.request, name)\n    if request_attr is not None:\n        return request_attr\n    elif self.defaults is not None:\n        return self.defaults.get(name, None)\n    else:\n        return None",
                "async def make_client() -> \"AsyncHTTPClient\":\n    await gen.sleep(0)\n    assert async_client_class is not None\n    return async_client_class(**kwargs)",
                "def handle_response(response: \"HTTPResponse\") -> None:\n    if response.error:\n        if raise_error or not response._error_is_response_code:\n            future.set_exception(response.error)\n            return\n    future_set_result_unless_cancelled(future, response)"
            ],
            "inscope_function_signatures": [
                "main() -> None",
                "__init__(self, async_client_class: Type['AsyncHTTPClient']=None, **kwargs: Any) -> None",
                "__del__(self) -> None",
                "close(self) -> None",
                "fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse'",
                "configurable_base(cls) -> Type[Configurable]",
                "configurable_default(cls) -> Type[Configurable]",
                "_async_clients(cls) -> Dict[IOLoop, 'AsyncHTTPClient']",
                "__new__(cls, force_instance: bool=False, **kwargs: Any) -> 'AsyncHTTPClient'",
                "initialize(self, defaults: Dict[str, Any]=None) -> None",
                "close(self) -> None",
                "fetch(self, request: Union[str, 'HTTPRequest'], raise_error: bool=True, **kwargs: Any) -> 'Future[HTTPResponse]'",
                "fetch_impl(self, request: 'HTTPRequest', callback: Callable[['HTTPResponse'], None]) -> None",
                "configure(cls, impl: Union[None, str, Type[Configurable]], **kwargs: Any) -> None",
                "__init__(self, url: str, method: str='GET', headers: Union[Dict[str, str], httputil.HTTPHeaders]=None, body: Union[bytes, str]=None, auth_username: str=None, auth_password: str=None, auth_mode: str=None, connect_timeout: float=None, request_timeout: float=None, if_modified_since: Union[float, datetime.datetime]=None, follow_redirects: bool=None, max_redirects: int=None, user_agent: str=None, use_gzip: bool=None, network_interface: str=None, streaming_callback: Callable[[bytes], None]=None, header_callback: Callable[[str], None]=None, prepare_curl_callback: Callable[[Any], None]=None, proxy_host: str=None, proxy_port: int=None, proxy_username: str=None, proxy_password: str=None, proxy_auth_mode: str=None, allow_nonstandard_methods: bool=None, validate_cert: bool=None, ca_certs: str=None, allow_ipv6: bool=None, client_key: str=None, client_cert: str=None, body_producer: Callable[[Callable[[bytes], None]], 'Future[None]']=None, expect_100_continue: bool=False, decompress_response: bool=None, ssl_options: Union[Dict[str, Any], ssl.SSLContext]=None) -> None",
                "headers(self) -> httputil.HTTPHeaders",
                "headers(self, value: Union[Dict[str, str], httputil.HTTPHeaders]) -> None",
                "body(self) -> bytes",
                "body(self, value: Union[bytes, str]) -> None",
                "__init__(self, request: HTTPRequest, code: int, headers: httputil.HTTPHeaders=None, buffer: BytesIO=None, effective_url: str=None, error: BaseException=None, request_time: float=None, time_info: Dict[str, float]=None, reason: str=None, start_time: float=None) -> None",
                "body(self) -> bytes",
                "rethrow(self) -> None",
                "__repr__(self) -> str",
                "__init__(self, code: int, message: str=None, response: HTTPResponse=None) -> None",
                "__str__(self) -> str",
                "__init__(self, request: HTTPRequest, defaults: Optional[Dict[str, Any]]) -> None",
                "__getattr__(self, name: str) -> Any",
                "make_client() -> 'AsyncHTTPClient'",
                "handle_response(response: 'HTTPResponse') -> None"
            ],
            "variables_in_file": {
                "object": [
                    57,
                    330,
                    718,
                    561
                ],
                "Type": [
                    88,
                    178,
                    307,
                    182
                ],
                "Any": [
                    194,
                    368,
                    307,
                    212,
                    244,
                    725,
                    119,
                    88,
                    730,
                    383
                ],
                "self._closed": [
                    232,
                    106,
                    234,
                    113,
                    274,
                    116,
                    217,
                    93
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    521,
                    523,
                    524,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    533,
                    534,
                    535,
                    536,
                    543,
                    548,
                    550,
                    554,
                    558,
                    93,
                    94,
                    105,
                    106,
                    109,
                    113,
                    114,
                    115,
                    116,
                    629,
                    631,
                    632,
                    633,
                    635,
                    637,
                    638,
                    639,
                    641,
                    130,
                    131,
                    643,
                    644,
                    646,
                    647,
                    648,
                    650,
                    652,
                    653,
                    654,
                    655,
                    659,
                    661,
                    662,
                    664,
                    668,
                    669,
                    672,
                    673,
                    700,
                    701,
                    702,
                    703,
                    706,
                    213,
                    214,
                    727,
                    216,
                    217,
                    728,
                    731,
                    734,
                    735,
                    232,
                    234,
                    235,
                    236,
                    238,
                    274,
                    287,
                    297,
                    498,
                    500,
                    503,
                    504,
                    505,
                    506,
                    507,
                    508,
                    509,
                    510,
                    511
                ],
                "self._io_loop": [
                    105,
                    130,
                    115,
                    94
                ],
                "IOLoop": [
                    195,
                    188,
                    213,
                    94
                ],
                "async_client_class": [
                    96,
                    103,
                    102,
                    95
                ],
                "AsyncHTTPClient": [
                    96,
                    202,
                    179,
                    327
                ],
                "gen.sleep": [
                    101
                ],
                "gen": [
                    101
                ],
                "kwargs": [
                    131,
                    103,
                    327,
                    202,
                    277,
                    279
                ],
                "self._async_client": [
                    105,
                    114,
                    131
                ],
                "self._io_loop.run_sync": [
                    105,
                    130
                ],
                "make_client": [
                    105
                ],
                "self.close": [
                    109
                ],
                "self._async_client.close": [
                    114
                ],
                "self._io_loop.close": [
                    115
                ],
                "Union": [
                    353,
                    354,
                    546,
                    360,
                    557,
                    242,
                    307,
                    119,
                    383
                ],
                "str": [
                    671,
                    546,
                    557,
                    307,
                    698,
                    705,
                    212,
                    725,
                    730,
                    351,
                    352,
                    353,
                    354,
                    355,
                    356,
                    357,
                    363,
                    747,
                    365,
                    621,
                    367,
                    624,
                    369,
                    242,
                    371,
                    372,
                    373,
                    625,
                    119,
                    376,
                    378,
                    379,
                    383
                ],
                "response": [
                    768,
                    130,
                    291,
                    292,
                    293,
                    133,
                    295,
                    766,
                    753,
                    762,
                    702,
                    703
                ],
                "functools.partial": [
                    131
                ],
                "functools": [
                    131
                ],
                "self._async_client.fetch": [
                    131
                ],
                "request": [
                    641,
                    131,
                    613,
                    631,
                    727,
                    276,
                    277,
                    628,
                    629,
                    286,
                    287
                ],
                "Configurable": [
                    136,
                    178,
                    307,
                    182
                ],
                "_instance_cache": [
                    175
                ],
                "classmethod": [
                    177,
                    187,
                    181,
                    305
                ],
                "SimpleAsyncHTTPClient": [
                    185
                ],
                "attr_name": [
                    192,
                    189,
                    190,
                    191
                ],
                "cls.__name__": [
                    189
                ],
                "cls": [
                    192,
                    199,
                    327,
                    202,
                    189,
                    190,
                    191
                ],
                "hasattr": [
                    190
                ],
                "setattr": [
                    191
                ],
                "weakref.WeakKeyDictionary": [
                    191
                ],
                "weakref": [
                    191
                ],
                "getattr": [
                    192,
                    731
                ],
                "Dict": [
                    353,
                    546,
                    624,
                    212,
                    725,
                    188,
                    383
                ],
                "bool": [
                    194,
                    743,
                    744,
                    361,
                    745,
                    746,
                    364,
                    243,
                    374,
                    375,
                    377,
                    381,
                    382
                ],
                "io_loop": [
                    200,
                    201,
                    195
                ],
                "IOLoop.current": [
                    195,
                    213
                ],
                "force_instance": [
                    196
                ],
                "instance_cache": [
                    197,
                    199,
                    200,
                    201,
                    207,
                    208,
                    209
                ],
                "cls._async_clients": [
                    199
                ],
                "instance": [
                    209,
                    202,
                    210,
                    207
                ],
                "__new__": [
                    202
                ],
                "super": [
                    703,
                    202,
                    327
                ],
                "instance._instance_cache": [
                    207
                ],
                "instance.io_loop": [
                    209
                ],
                "self.io_loop": [
                    236,
                    213,
                    238
                ],
                "self.defaults": [
                    728,
                    735,
                    214,
                    216,
                    734,
                    287
                ],
                "dict": [
                    338,
                    214
                ],
                "HTTPRequest._DEFAULTS": [
                    214
                ],
                "HTTPRequest": [
                    297,
                    617,
                    276,
                    277,
                    214,
                    725
                ],
                "defaults": [
                    216,
                    728,
                    215
                ],
                "self.defaults.update": [
                    216
                ],
                "self._instance_cache": [
                    235,
                    236,
                    238
                ],
                "self._instance_cache.get": [
                    236
                ],
                "RuntimeError": [
                    275,
                    237
                ],
                "isinstance": [
                    628,
                    276
                ],
                "ValueError": [
                    280,
                    660
                ],
                "request.headers": [
                    286
                ],
                "httputil.HTTPHeaders": [
                    353,
                    546,
                    548,
                    619,
                    539,
                    637,
                    286
                ],
                "httputil": [
                    353,
                    546,
                    548,
                    701,
                    619,
                    500,
                    633,
                    539,
                    637,
                    286
                ],
                "request_proxy": [
                    297,
                    287
                ],
                "_RequestProxy": [
                    628,
                    287
                ],
                "future": [
                    288,
                    298,
                    293,
                    295
                ],
                "Future": [
                    288
                ],
                "response.error": [
                    291,
                    293
                ],
                "raise_error": [
                    292
                ],
                "response._error_is_response_code": [
                    292
                ],
                "future.set_exception": [
                    293
                ],
                "future_set_result_unless_cancelled": [
                    295
                ],
                "self.fetch_impl": [
                    297
                ],
                "cast": [
                    297
                ],
                "handle_response": [
                    297
                ],
                "Callable": [
                    301,
                    366,
                    367,
                    368,
                    380
                ],
                "NotImplementedError": [
                    303
                ],
                "configure": [
                    327
                ],
                "impl": [
                    327
                ],
                "_headers": [
                    333
                ],
                "_DEFAULTS": [
                    338
                ],
                "bytes": [
                    354,
                    553,
                    557,
                    366,
                    658,
                    380
                ],
                "float": [
                    358,
                    359,
                    360,
                    623,
                    624,
                    626
                ],
                "datetime.datetime": [
                    360
                ],
                "datetime": [
                    360
                ],
                "int": [
                    362,
                    618,
                    748,
                    370,
                    698
                ],
                "ssl.SSLContext": [
                    383
                ],
                "ssl": [
                    383
                ],
                "self.headers": [
                    498,
                    635,
                    500,
                    637
                ],
                "headers": [
                    545,
                    498,
                    635,
                    634
                ],
                "if_modified_since": [
                    499,
                    501
                ],
                "httputil.format_timestamp": [
                    500
                ],
                "self.proxy_host": [
                    503
                ],
                "proxy_host": [
                    503
                ],
                "self.proxy_port": [
                    504
                ],
                "proxy_port": [
                    504
                ],
                "self.proxy_username": [
                    505
                ],
                "proxy_username": [
                    505
                ],
                "self.proxy_password": [
                    506
                ],
                "proxy_password": [
                    506
                ],
                "self.proxy_auth_mode": [
                    507
                ],
                "proxy_auth_mode": [
                    507
                ],
                "self.url": [
                    508
                ],
                "url": [
                    508
                ],
                "self.method": [
                    509
                ],
                "method": [
                    509
                ],
                "self.body": [
                    510
                ],
                "body": [
                    556,
                    510
                ],
                "self.body_producer": [
                    511
                ],
                "body_producer": [
                    511
                ],
                "self.auth_username": [
                    512
                ],
                "auth_username": [
                    512
                ],
                "self.auth_password": [
                    513
                ],
                "auth_password": [
                    513
                ],
                "self.auth_mode": [
                    514
                ],
                "auth_mode": [
                    514
                ],
                "self.connect_timeout": [
                    515
                ],
                "connect_timeout": [
                    515
                ],
                "self.request_timeout": [
                    516
                ],
                "request_timeout": [
                    516
                ],
                "self.follow_redirects": [
                    517
                ],
                "follow_redirects": [
                    517
                ],
                "self.max_redirects": [
                    518
                ],
                "max_redirects": [
                    518
                ],
                "self.user_agent": [
                    519
                ],
                "user_agent": [
                    519
                ],
                "decompress_response": [
                    520,
                    521
                ],
                "self.decompress_response": [
                    521,
                    523
                ],
                "use_gzip": [
                    523
                ],
                "self.network_interface": [
                    524
                ],
                "network_interface": [
                    524
                ],
                "self.streaming_callback": [
                    525
                ],
                "streaming_callback": [
                    525
                ],
                "self.header_callback": [
                    526
                ],
                "header_callback": [
                    526
                ],
                "self.prepare_curl_callback": [
                    527
                ],
                "prepare_curl_callback": [
                    527
                ],
                "self.allow_nonstandard_methods": [
                    528
                ],
                "allow_nonstandard_methods": [
                    528
                ],
                "self.validate_cert": [
                    529
                ],
                "validate_cert": [
                    529
                ],
                "self.ca_certs": [
                    530
                ],
                "ca_certs": [
                    530
                ],
                "self.allow_ipv6": [
                    531
                ],
                "allow_ipv6": [
                    531
                ],
                "self.client_key": [
                    532
                ],
                "client_key": [
                    532
                ],
                "self.client_cert": [
                    533
                ],
                "client_cert": [
                    533
                ],
                "self.ssl_options": [
                    534
                ],
                "ssl_options": [
                    534
                ],
                "self.expect_100_continue": [
                    535
                ],
                "expect_100_continue": [
                    535
                ],
                "self.start_time": [
                    536,
                    653
                ],
                "time.time": [
                    536
                ],
                "time": [
                    536
                ],
                "self._headers": [
                    548,
                    550,
                    543
                ],
                "property": [
                    552,
                    657,
                    538
                ],
                "value": [
                    558,
                    547,
                    550
                ],
                "headers.setter": [
                    545
                ],
                "self._body": [
                    554,
                    558,
                    661,
                    662,
                    664,
                    639
                ],
                "utf8": [
                    558
                ],
                "body.setter": [
                    556
                ],
                "error": [
                    611,
                    652,
                    645
                ],
                "_error_is_response_code": [
                    612
                ],
                "BytesIO": [
                    620
                ],
                "BaseException": [
                    622
                ],
                "self.request": [
                    727,
                    731,
                    629,
                    631
                ],
                "request.request": [
                    629
                ],
                "self.code": [
                    706,
                    646,
                    648,
                    632,
                    700
                ],
                "code": [
                    632,
                    633,
                    700,
                    701,
                    703
                ],
                "self.reason": [
                    648,
                    633
                ],
                "reason": [
                    633
                ],
                "httputil.responses.get": [
                    633,
                    701
                ],
                "httputil.responses": [
                    633,
                    701
                ],
                "self.buffer": [
                    662,
                    659,
                    638
                ],
                "buffer": [
                    638
                ],
                "effective_url": [
                    640,
                    643
                ],
                "self.effective_url": [
                    641,
                    643
                ],
                "request.url": [
                    641
                ],
                "self._error_is_response_code": [
                    644,
                    647
                ],
                "self.error": [
                    648,
                    650,
                    652,
                    668,
                    669
                ],
                "HTTPError": [
                    648,
                    760,
                    715
                ],
                "start_time": [
                    653
                ],
                "self.request_time": [
                    654
                ],
                "request_time": [
                    654
                ],
                "self.time_info": [
                    655
                ],
                "time_info": [
                    655
                ],
                "self.buffer.getvalue": [
                    662
                ],
                "args": [
                    672,
                    673,
                    749,
                    751
                ],
                "join": [
                    672
                ],
                "i": [
                    672
                ],
                "sorted": [
                    672
                ],
                "self.__dict__.items": [
                    672
                ],
                "self.__dict__": [
                    672
                ],
                "self.__class__.__name__": [
                    673
                ],
                "self.__class__": [
                    673
                ],
                "Exception": [
                    676
                ],
                "HTTPResponse": [
                    698
                ],
                "self.message": [
                    706,
                    701
                ],
                "message": [
                    701,
                    703
                ],
                "self.response": [
                    702
                ],
                "__init__": [
                    703
                ],
                "HTTPClientError": [
                    715,
                    703
                ],
                "__repr__": [
                    712
                ],
                "__str__": [
                    712
                ],
                "Optional": [
                    725
                ],
                "request_attr": [
                    731,
                    732,
                    733
                ],
                "name": [
                    731,
                    735
                ],
                "self.defaults.get": [
                    735
                ],
                "define": [
                    743,
                    744,
                    745,
                    746,
                    747,
                    748
                ],
                "parse_command_line": [
                    749
                ],
                "client": [
                    753,
                    750,
                    769
                ],
                "HTTPClient": [
                    750
                ],
                "arg": [
                    754,
                    751
                ],
                "client.fetch": [
                    753
                ],
                "options.follow_redirects": [
                    755
                ],
                "options": [
                    755,
                    756,
                    757,
                    758,
                    765,
                    767
                ],
                "options.validate_cert": [
                    756
                ],
                "options.proxy_host": [
                    757
                ],
                "options.proxy_port": [
                    758
                ],
                "e.response": [
                    761,
                    762
                ],
                "e": [
                    761,
                    762
                ],
                "options.print_headers": [
                    765
                ],
                "print": [
                    768,
                    766
                ],
                "response.headers": [
                    766
                ],
                "options.print_body": [
                    767
                ],
                "native_str": [
                    768
                ],
                "response.body": [
                    768
                ],
                "client.close": [
                    769
                ],
                "__name__": [
                    772
                ],
                "main": [
                    773
                ]
            },
            "filtered_variables_in_file": {
                "Type": [
                    88,
                    178,
                    307,
                    182
                ],
                "Any": [
                    194,
                    368,
                    307,
                    212,
                    244,
                    725,
                    119,
                    88,
                    730,
                    383
                ],
                "self._closed": [
                    232,
                    106,
                    234,
                    113,
                    274,
                    116,
                    217,
                    93
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    521,
                    523,
                    524,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    533,
                    534,
                    535,
                    536,
                    543,
                    548,
                    550,
                    554,
                    558,
                    93,
                    94,
                    105,
                    106,
                    109,
                    113,
                    114,
                    115,
                    116,
                    629,
                    631,
                    632,
                    633,
                    635,
                    637,
                    638,
                    639,
                    641,
                    130,
                    131,
                    643,
                    644,
                    646,
                    647,
                    648,
                    650,
                    652,
                    653,
                    654,
                    655,
                    659,
                    661,
                    662,
                    664,
                    668,
                    669,
                    672,
                    673,
                    700,
                    701,
                    702,
                    703,
                    706,
                    213,
                    214,
                    727,
                    216,
                    217,
                    728,
                    731,
                    734,
                    735,
                    232,
                    234,
                    235,
                    236,
                    238,
                    274,
                    287,
                    297,
                    498,
                    500,
                    503,
                    504,
                    505,
                    506,
                    507,
                    508,
                    509,
                    510,
                    511
                ],
                "self._io_loop": [
                    105,
                    130,
                    115,
                    94
                ],
                "IOLoop": [
                    195,
                    188,
                    213,
                    94
                ],
                "async_client_class": [
                    96,
                    103,
                    102,
                    95
                ],
                "AsyncHTTPClient": [
                    96,
                    202,
                    179,
                    327
                ],
                "gen.sleep": [
                    101
                ],
                "gen": [
                    101
                ],
                "kwargs": [
                    131,
                    103,
                    327,
                    202,
                    277,
                    279
                ],
                "self._async_client": [
                    105,
                    114,
                    131
                ],
                "self._io_loop.run_sync": [
                    105,
                    130
                ],
                "make_client": [
                    105
                ],
                "self.close": [
                    109
                ],
                "self._async_client.close": [
                    114
                ],
                "self._io_loop.close": [
                    115
                ],
                "Union": [
                    353,
                    354,
                    546,
                    360,
                    557,
                    242,
                    307,
                    119,
                    383
                ],
                "response": [
                    768,
                    130,
                    291,
                    292,
                    293,
                    133,
                    295,
                    766,
                    753,
                    762,
                    702,
                    703
                ],
                "functools.partial": [
                    131
                ],
                "functools": [
                    131
                ],
                "self._async_client.fetch": [
                    131
                ],
                "request": [
                    641,
                    131,
                    613,
                    631,
                    727,
                    276,
                    277,
                    628,
                    629,
                    286,
                    287
                ],
                "Configurable": [
                    136,
                    178,
                    307,
                    182
                ],
                "_instance_cache": [
                    175
                ],
                "SimpleAsyncHTTPClient": [
                    185
                ],
                "attr_name": [
                    192,
                    189,
                    190,
                    191
                ],
                "cls.__name__": [
                    189
                ],
                "cls": [
                    192,
                    199,
                    327,
                    202,
                    189,
                    190,
                    191
                ],
                "weakref.WeakKeyDictionary": [
                    191
                ],
                "weakref": [
                    191
                ],
                "Dict": [
                    353,
                    546,
                    624,
                    212,
                    725,
                    188,
                    383
                ],
                "io_loop": [
                    200,
                    201,
                    195
                ],
                "IOLoop.current": [
                    195,
                    213
                ],
                "force_instance": [
                    196
                ],
                "instance_cache": [
                    197,
                    199,
                    200,
                    201,
                    207,
                    208,
                    209
                ],
                "cls._async_clients": [
                    199
                ],
                "instance": [
                    209,
                    202,
                    210,
                    207
                ],
                "__new__": [
                    202
                ],
                "instance._instance_cache": [
                    207
                ],
                "instance.io_loop": [
                    209
                ],
                "self.io_loop": [
                    236,
                    213,
                    238
                ],
                "self.defaults": [
                    728,
                    735,
                    214,
                    216,
                    734,
                    287
                ],
                "HTTPRequest._DEFAULTS": [
                    214
                ],
                "HTTPRequest": [
                    297,
                    617,
                    276,
                    277,
                    214,
                    725
                ],
                "defaults": [
                    216,
                    728,
                    215
                ],
                "self.defaults.update": [
                    216
                ],
                "self._instance_cache": [
                    235,
                    236,
                    238
                ],
                "self._instance_cache.get": [
                    236
                ],
                "request.headers": [
                    286
                ],
                "httputil.HTTPHeaders": [
                    353,
                    546,
                    548,
                    619,
                    539,
                    637,
                    286
                ],
                "httputil": [
                    353,
                    546,
                    548,
                    701,
                    619,
                    500,
                    633,
                    539,
                    637,
                    286
                ],
                "request_proxy": [
                    297,
                    287
                ],
                "_RequestProxy": [
                    628,
                    287
                ],
                "future": [
                    288,
                    298,
                    293,
                    295
                ],
                "Future": [
                    288
                ],
                "response.error": [
                    291,
                    293
                ],
                "raise_error": [
                    292
                ],
                "response._error_is_response_code": [
                    292
                ],
                "future.set_exception": [
                    293
                ],
                "future_set_result_unless_cancelled": [
                    295
                ],
                "self.fetch_impl": [
                    297
                ],
                "cast": [
                    297
                ],
                "handle_response": [
                    297
                ],
                "Callable": [
                    301,
                    366,
                    367,
                    368,
                    380
                ],
                "configure": [
                    327
                ],
                "impl": [
                    327
                ],
                "_headers": [
                    333
                ],
                "_DEFAULTS": [
                    338
                ],
                "datetime.datetime": [
                    360
                ],
                "datetime": [
                    360
                ],
                "ssl.SSLContext": [
                    383
                ],
                "ssl": [
                    383
                ],
                "self.headers": [
                    498,
                    635,
                    500,
                    637
                ],
                "headers": [
                    545,
                    498,
                    635,
                    634
                ],
                "if_modified_since": [
                    499,
                    501
                ],
                "httputil.format_timestamp": [
                    500
                ],
                "self.proxy_host": [
                    503
                ],
                "proxy_host": [
                    503
                ],
                "self.proxy_port": [
                    504
                ],
                "proxy_port": [
                    504
                ],
                "self.proxy_username": [
                    505
                ],
                "proxy_username": [
                    505
                ],
                "self.proxy_password": [
                    506
                ],
                "proxy_password": [
                    506
                ],
                "self.proxy_auth_mode": [
                    507
                ],
                "proxy_auth_mode": [
                    507
                ],
                "self.url": [
                    508
                ],
                "url": [
                    508
                ],
                "self.method": [
                    509
                ],
                "method": [
                    509
                ],
                "self.body": [
                    510
                ],
                "body": [
                    556,
                    510
                ],
                "self.body_producer": [
                    511
                ],
                "body_producer": [
                    511
                ],
                "self.auth_username": [
                    512
                ],
                "auth_username": [
                    512
                ],
                "self.auth_password": [
                    513
                ],
                "auth_password": [
                    513
                ],
                "self.auth_mode": [
                    514
                ],
                "auth_mode": [
                    514
                ],
                "self.connect_timeout": [
                    515
                ],
                "connect_timeout": [
                    515
                ],
                "self.request_timeout": [
                    516
                ],
                "request_timeout": [
                    516
                ],
                "self.follow_redirects": [
                    517
                ],
                "follow_redirects": [
                    517
                ],
                "self.max_redirects": [
                    518
                ],
                "max_redirects": [
                    518
                ],
                "self.user_agent": [
                    519
                ],
                "user_agent": [
                    519
                ],
                "decompress_response": [
                    520,
                    521
                ],
                "self.decompress_response": [
                    521,
                    523
                ],
                "use_gzip": [
                    523
                ],
                "self.network_interface": [
                    524
                ],
                "network_interface": [
                    524
                ],
                "self.streaming_callback": [
                    525
                ],
                "streaming_callback": [
                    525
                ],
                "self.header_callback": [
                    526
                ],
                "header_callback": [
                    526
                ],
                "self.prepare_curl_callback": [
                    527
                ],
                "prepare_curl_callback": [
                    527
                ],
                "self.allow_nonstandard_methods": [
                    528
                ],
                "allow_nonstandard_methods": [
                    528
                ],
                "self.validate_cert": [
                    529
                ],
                "validate_cert": [
                    529
                ],
                "self.ca_certs": [
                    530
                ],
                "ca_certs": [
                    530
                ],
                "self.allow_ipv6": [
                    531
                ],
                "allow_ipv6": [
                    531
                ],
                "self.client_key": [
                    532
                ],
                "client_key": [
                    532
                ],
                "self.client_cert": [
                    533
                ],
                "client_cert": [
                    533
                ],
                "self.ssl_options": [
                    534
                ],
                "ssl_options": [
                    534
                ],
                "self.expect_100_continue": [
                    535
                ],
                "expect_100_continue": [
                    535
                ],
                "self.start_time": [
                    536,
                    653
                ],
                "time.time": [
                    536
                ],
                "time": [
                    536
                ],
                "self._headers": [
                    548,
                    550,
                    543
                ],
                "value": [
                    558,
                    547,
                    550
                ],
                "headers.setter": [
                    545
                ],
                "self._body": [
                    554,
                    558,
                    661,
                    662,
                    664,
                    639
                ],
                "utf8": [
                    558
                ],
                "body.setter": [
                    556
                ],
                "error": [
                    611,
                    652,
                    645
                ],
                "_error_is_response_code": [
                    612
                ],
                "BytesIO": [
                    620
                ],
                "self.request": [
                    727,
                    731,
                    629,
                    631
                ],
                "request.request": [
                    629
                ],
                "self.code": [
                    706,
                    646,
                    648,
                    632,
                    700
                ],
                "code": [
                    632,
                    633,
                    700,
                    701,
                    703
                ],
                "self.reason": [
                    648,
                    633
                ],
                "reason": [
                    633
                ],
                "httputil.responses.get": [
                    633,
                    701
                ],
                "httputil.responses": [
                    633,
                    701
                ],
                "self.buffer": [
                    662,
                    659,
                    638
                ],
                "buffer": [
                    638
                ],
                "effective_url": [
                    640,
                    643
                ],
                "self.effective_url": [
                    641,
                    643
                ],
                "request.url": [
                    641
                ],
                "self._error_is_response_code": [
                    644,
                    647
                ],
                "self.error": [
                    648,
                    650,
                    652,
                    668,
                    669
                ],
                "HTTPError": [
                    648,
                    760,
                    715
                ],
                "start_time": [
                    653
                ],
                "self.request_time": [
                    654
                ],
                "request_time": [
                    654
                ],
                "self.time_info": [
                    655
                ],
                "time_info": [
                    655
                ],
                "self.buffer.getvalue": [
                    662
                ],
                "args": [
                    672,
                    673,
                    749,
                    751
                ],
                "join": [
                    672
                ],
                "i": [
                    672
                ],
                "self.__dict__.items": [
                    672
                ],
                "self.__dict__": [
                    672
                ],
                "self.__class__.__name__": [
                    673
                ],
                "self.__class__": [
                    673
                ],
                "HTTPResponse": [
                    698
                ],
                "self.message": [
                    706,
                    701
                ],
                "message": [
                    701,
                    703
                ],
                "self.response": [
                    702
                ],
                "__init__": [
                    703
                ],
                "HTTPClientError": [
                    715,
                    703
                ],
                "__repr__": [
                    712
                ],
                "__str__": [
                    712
                ],
                "Optional": [
                    725
                ],
                "request_attr": [
                    731,
                    732,
                    733
                ],
                "name": [
                    731,
                    735
                ],
                "self.defaults.get": [
                    735
                ],
                "define": [
                    743,
                    744,
                    745,
                    746,
                    747,
                    748
                ],
                "parse_command_line": [
                    749
                ],
                "client": [
                    753,
                    750,
                    769
                ],
                "HTTPClient": [
                    750
                ],
                "arg": [
                    754,
                    751
                ],
                "client.fetch": [
                    753
                ],
                "options.follow_redirects": [
                    755
                ],
                "options": [
                    755,
                    756,
                    757,
                    758,
                    765,
                    767
                ],
                "options.validate_cert": [
                    756
                ],
                "options.proxy_host": [
                    757
                ],
                "options.proxy_port": [
                    758
                ],
                "e.response": [
                    761,
                    762
                ],
                "e": [
                    761,
                    762
                ],
                "options.print_headers": [
                    765
                ],
                "response.headers": [
                    766
                ],
                "options.print_body": [
                    767
                ],
                "native_str": [
                    768
                ],
                "response.body": [
                    768
                ],
                "client.close": [
                    769
                ],
                "main": [
                    773
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/tornado_3/tornado/test/httpclient_test.py",
                "test_function": "test_destructor_log",
                "test_function_code": "    def test_destructor_log(self):\n        # Regression test for\n        # https://github.com/tornadoweb/tornado/issues/2539\n        #\n        # In the past, the following program would log an\n        # \"inconsistent AsyncHTTPClient cache\" error from a destructor\n        # when the process is shutting down. The shutdown process is\n        # subtle and I don't fully understand it; the failure does not\n        # manifest if that lambda isn't there or is a simpler object\n        # like an int (nor does it manifest in the tornado test suite\n        # as a whole, which is why we use this subprocess).\n        proc = subprocess.run(\n            [\n                sys.executable,\n                \"-c\",\n                \"from tornado.httpclient import HTTPClient; f = lambda: None; c = HTTPClient()\",\n            ],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            check=True,\n        )\n        if proc.stdout:\n            print(\"STDOUT:\")\n            print(to_unicode(proc.stdout))\n        if proc.stdout:\n            self.fail(\"subprocess produced unexpected output\")",
                "test_error": "AssertionError: subprocess produced unexpected output",
                "full_test_error": "self = <tornado.test.httpclient_test.SyncHTTPClientSubprocessTest testMethod=test_destructor_log>\n\n    def test_destructor_log(self):\n        # Regression test for\n        # https://github.com/tornadoweb/tornado/issues/2539\n        #\n        # In the past, the following program would log an\n        # \"inconsistent AsyncHTTPClient cache\" error from a destructor\n        # when the process is shutting down. The shutdown process is\n        # subtle and I don't fully understand it; the failure does not\n        # manifest if that lambda isn't there or is a simpler object\n        # like an int (nor does it manifest in the tornado test suite\n        # as a whole, which is why we use this subprocess).\n        proc = subprocess.run(\n            [\n                sys.executable,\n                \"-c\",\n                \"from tornado.httpclient import HTTPClient; f = lambda: None; c = HTTPClient()\",\n            ],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            check=True,\n        )\n        if proc.stdout:\n            print(\"STDOUT:\")\n            print(to_unicode(proc.stdout))\n        if proc.stdout:\n>           self.fail(\"subprocess produced unexpected output\")\nE           AssertionError: subprocess produced unexpected output\n\ntornado/test/httpclient_test.py:707: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}