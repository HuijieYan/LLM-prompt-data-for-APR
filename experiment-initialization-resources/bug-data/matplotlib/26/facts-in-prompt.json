{
    "1": "# The source code of the buggy function\n```python\n# The relative path of the buggy file: lib/matplotlib/axis.py\n\n# this is the buggy function you need to fix\ndef _make_getset_interval(method_name, lim_name, attr_name):\n    \"\"\"\n    Helper to generate ``get_{data,view}_interval`` and\n    ``set_{data,view}_interval`` implementations.\n    \"\"\"\n\n    def getter(self):\n        # docstring inherited.\n        return getattr(getattr(self.axes, lim_name), attr_name)\n\n    def setter(self, vmin, vmax, ignore=False):\n        # docstring inherited.\n        if ignore:\n            setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))\n        else:\n            oldmin, oldmax = getter(self)\n            if oldmin < oldmax:\n                setter(self, min(vmin, vmax, oldmin), max(vmin, vmax, oldmax),\n                       ignore=True)\n            else:\n                setter(self, max(vmin, vmax, oldmax), min(vmin, vmax, oldmin),\n                       ignore=True)\n        self.stale = True\n\n    getter.__name__ = f\"get_{method_name}_interval\"\n    setter.__name__ = f\"set_{method_name}_interval\"\n\n    return getter, setter\n\n```",
    "2": "",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef getter(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef setter(self, vmin, vmax, ignore=False):\n    # Please ignore the body of this function\n\n",
    "4": "# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: lib/matplotlib/tests/test_axes.py\n\ndef test_set_ticks_inverted():\n    fig, ax = plt.subplots()\n    ax.invert_xaxis()\n    ax.set_xticks([.3, .7])\n    assert ax.get_xlim() == (1, 0)\n```\n\n\n",
    "5": "## The error message from the failing test\n```text\ndef test_set_ticks_inverted():\n        fig, ax = plt.subplots()\n        ax.invert_xaxis()\n        ax.set_xticks([.3, .7])\n>       assert ax.get_xlim() == (1, 0)\nE       assert (0.7, 0.3) == (1, 0)\nE         At index 0 diff: 0.7 != 1\nE         Full diff:\nE         - (1, 0)\nE         + (0.7, 0.3)\n\nlib/matplotlib/tests/test_axes.py:6441: AssertionError\n\n```\n",
    "6": "# Runtime value and type of variables inside the buggy function\nEach case below includes input parameter value and type, and the value and type of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n## Case 1\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Case 2\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n## Case 3\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Case 4\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n## Case 5\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'xy_viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Case 6\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'xy_dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n## Case 7\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'xy_viewLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Case 8\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'xy_dataLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n## Case 9\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'zz_viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Case 10\n### Runtime value and type of the input parameters of the buggy function\nlim_name, value: `'zz_dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Runtime value and type of variables right before the buggy function's return\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n",
    "7": "# Expected value and type of variables during the failing test execution\nEach case below includes input parameter value and type, and the expected value and type of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n## Expected case 1\n### Input parameter value and type\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 2\n### Input parameter value and type\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n## Expected case 3\n### Input parameter value and type\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 4\n### Input parameter value and type\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n## Expected case 5\n### Input parameter value and type\nlim_name, value: `'xy_viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 6\n### Input parameter value and type\nlim_name, value: `'xy_dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n## Expected case 7\n### Input parameter value and type\nlim_name, value: `'xy_viewLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 8\n### Input parameter value and type\nlim_name, value: `'xy_dataLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n## Expected case 9\n### Input parameter value and type\nlim_name, value: `'zz_viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 10\n### Input parameter value and type\nlim_name, value: `'zz_dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected value and type of variables right before the buggy function's return\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n",
    "8": "# A GitHub issue title for this bug\n```text\nHeatmaps are being truncated when using with seaborn\n```\n\n## The GitHub issue's detailed description\n```text\nBug report\nBug summary\n\nThe very top and bottom of the heatmaps are getting truncated to 1/2 height in version 3.1.1. This does not happen for version 3.0.3.\n\nMatplotlib version\n\nOperating system: Ubuntu Linux\nMatplotlib version: 3.1.1\nMatplotlib backend: module://ipykernel.pylab.backend_inline\nPython version: 3.6\nJupyter version (if applicable): 4.4.0\nOther libraries:\n```\n\n",
    "9": "1. Analyze the buggy function and it's relationship with the related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information, the github issue.\n2. Identify the potential error location within the problematic function.\n3. Elucidate the bug's cause using:\n   (a). The buggy function\n   (b). The related functions\n   (c). The failing test\n   (d). The corresponding error message\n   (e). Discrepancies between actual input/output variable value\n   (f). Discrepancies between expected input/output variable value\n   (g). The GitHub Issue information\n\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function such that it satisfied the following:\n   (a). Passes the failing test\n   (b). Satisfies the expected input/output variable information provided\n   (c). Successfully resolves the issue posted in GitHub\n\n",
    "1.3.3": "",
    "source_code_section": "# The source code of the buggy function\n```python\n# The relative path of the buggy file: lib/matplotlib/axis.py\n\n# this is the buggy function you need to fix\ndef _make_getset_interval(method_name, lim_name, attr_name):\n    \"\"\"\n    Helper to generate ``get_{data,view}_interval`` and\n    ``set_{data,view}_interval`` implementations.\n    \"\"\"\n\n    def getter(self):\n        # docstring inherited.\n        return getattr(getattr(self.axes, lim_name), attr_name)\n\n    def setter(self, vmin, vmax, ignore=False):\n        # docstring inherited.\n        if ignore:\n            setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))\n        else:\n            oldmin, oldmax = getter(self)\n            if oldmin < oldmax:\n                setter(self, min(vmin, vmax, oldmin), max(vmin, vmax, oldmax),\n                       ignore=True)\n            else:\n                setter(self, max(vmin, vmax, oldmax), min(vmin, vmax, oldmin),\n                       ignore=True)\n        self.stale = True\n\n    getter.__name__ = f\"get_{method_name}_interval\"\n    setter.__name__ = f\"set_{method_name}_interval\"\n\n    return getter, setter\n\n```"
}