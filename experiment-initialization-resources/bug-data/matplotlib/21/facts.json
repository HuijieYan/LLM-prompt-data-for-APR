{
    "1.1.1": "@cbook._rename_parameter(\"3.1\", \"manage_xticks\", \"manage_ticks\")\ndef bxp(self, bxpstats, positions=None, widths=None, vert=True,\n        patch_artist=False, shownotches=False, showmeans=False,\n        showcaps=True, showbox=True, showfliers=True,\n        boxprops=None, whiskerprops=None, flierprops=None,\n        medianprops=None, capprops=None, meanprops=None,\n        meanline=False, manage_ticks=True, zorder=None):\n    \n    # lists of artists to be output\n    whiskers = []\n    caps = []\n    boxes = []\n    medians = []\n    means = []\n    fliers = []\n\n    # empty list of xticklabels\n    datalabels = []\n\n    # Use default zorder if none specified\n    if zorder is None:\n        zorder = mlines.Line2D.zorder\n\n    zdelta = 0.1\n\n    def line_props_with_rcdefaults(subkey, explicit, zdelta=0):\n        d = {k.split('.')[-1]: v for k, v in rcParams.items()\n             if k.startswith(f'boxplot.{subkey}')}\n        d['zorder'] = zorder + zdelta\n        if explicit is not None:\n            d.update(\n                cbook.normalize_kwargs(explicit, mlines.Line2D._alias_map))\n        return d\n\n    # box properties\n    if patch_artist:\n        final_boxprops = dict(\n            linestyle=rcParams['boxplot.boxprops.linestyle'],\n            linewidth=rcParams['boxplot.boxprops.linewidth'],\n            edgecolor=rcParams['boxplot.boxprops.color'],\n            facecolor=('white' if rcParams['_internal.classic_mode'] else\n                       rcParams['patch.facecolor']),\n            zorder=zorder,\n        )\n        if boxprops is not None:\n            final_boxprops.update(\n                cbook.normalize_kwargs(\n                    boxprops, mpatches.PathPatch._alias_map))\n    else:\n        final_boxprops = line_props_with_rcdefaults('boxprops', boxprops)\n    final_whiskerprops = line_props_with_rcdefaults(\n        'whiskerprops', whiskerprops)\n    final_capprops = line_props_with_rcdefaults(\n        'capprops', capprops)\n    final_flierprops = line_props_with_rcdefaults(\n        'flierprops', flierprops)\n    final_medianprops = line_props_with_rcdefaults(\n        'medianprops', medianprops, zdelta)\n    final_meanprops = line_props_with_rcdefaults(\n        'meanprops', meanprops, zdelta)\n    removed_prop = 'marker' if meanline else 'linestyle'\n    # Only remove the property if it's not set explicitly as a parameter.\n    if meanprops is None or removed_prop not in meanprops:\n        final_meanprops[removed_prop] = ''\n\n    def to_vc(xs, ys):\n        # convert arguments to verts and codes, append (0, 0) (ignored).\n        verts = np.append(np.column_stack([xs, ys]), [(0, 0)], 0)\n        codes = ([mpath.Path.MOVETO]\n                 + [mpath.Path.LINETO] * (len(verts) - 2)\n                 + [mpath.Path.CLOSEPOLY])\n        return verts, codes\n\n    def patch_list(xs, ys, **kwargs):\n        verts, codes = to_vc(xs, ys)\n        path = mpath.Path(verts, codes)\n        patch = mpatches.PathPatch(path, **kwargs)\n        self.add_artist(patch)\n        return [patch]\n\n    # vertical or horizontal plot?\n    if vert:\n        def doplot(*args, **kwargs):\n            return self.plot(*args, **kwargs)\n\n        def dopatch(xs, ys, **kwargs):\n            return patch_list(xs, ys, **kwargs)\n\n    else:\n        def doplot(*args, **kwargs):\n            shuffled = []\n            for i in range(0, len(args), 2):\n                shuffled.extend([args[i + 1], args[i]])\n            return self.plot(*shuffled, **kwargs)\n\n        def dopatch(xs, ys, **kwargs):\n            xs, ys = ys, xs  # flip X, Y\n            return patch_list(xs, ys, **kwargs)\n\n    # input validation\n    N = len(bxpstats)\n    datashape_message = (\"List of boxplot statistics and `{0}` \"\n                         \"values must have same the length\")\n    # check position\n    if positions is None:\n        positions = list(range(1, N + 1))\n    elif len(positions) != N:\n        raise ValueError(datashape_message.format(\"positions\"))\n\n    positions = np.array(positions)\n    if len(positions) > 0 and not isinstance(positions[0], Number):\n        raise TypeError(\"positions should be an iterable of numbers\")\n\n    # width\n    if widths is None:\n        widths = [np.clip(0.15 * np.ptp(positions), 0.15, 0.5)] * N\n    elif np.isscalar(widths):\n        widths = [widths] * N\n    elif len(widths) != N:\n        raise ValueError(datashape_message.format(\"widths\"))\n\n    for pos, width, stats in zip(positions, widths, bxpstats):\n        # try to find a new label\n        datalabels.append(stats.get('label', pos))\n\n        # whisker coords\n        whisker_x = np.ones(2) * pos\n        whiskerlo_y = np.array([stats['q1'], stats['whislo']])\n        whiskerhi_y = np.array([stats['q3'], stats['whishi']])\n\n        # cap coords\n        cap_left = pos - width * 0.25\n        cap_right = pos + width * 0.25\n        cap_x = np.array([cap_left, cap_right])\n        cap_lo = np.ones(2) * stats['whislo']\n        cap_hi = np.ones(2) * stats['whishi']\n\n        # box and median coords\n        box_left = pos - width * 0.5\n        box_right = pos + width * 0.5\n        med_y = [stats['med'], stats['med']]\n\n        # notched boxes\n        if shownotches:\n            box_x = [box_left, box_right, box_right, cap_right, box_right,\n                     box_right, box_left, box_left, cap_left, box_left,\n                     box_left]\n            box_y = [stats['q1'], stats['q1'], stats['cilo'],\n                     stats['med'], stats['cihi'], stats['q3'],\n                     stats['q3'], stats['cihi'], stats['med'],\n                     stats['cilo'], stats['q1']]\n            med_x = cap_x\n\n        # plain boxes\n        else:\n            box_x = [box_left, box_right, box_right, box_left, box_left]\n            box_y = [stats['q1'], stats['q1'], stats['q3'], stats['q3'],\n                     stats['q1']]\n            med_x = [box_left, box_right]\n\n        # maybe draw the box:\n        if showbox:\n            if patch_artist:\n                boxes.extend(dopatch(box_x, box_y, **final_boxprops))\n            else:\n                boxes.extend(doplot(box_x, box_y, **final_boxprops))\n\n        # draw the whiskers\n        whiskers.extend(doplot(\n            whisker_x, whiskerlo_y, **final_whiskerprops\n        ))\n        whiskers.extend(doplot(\n            whisker_x, whiskerhi_y, **final_whiskerprops\n        ))\n\n        # maybe draw the caps:\n        if showcaps:\n            caps.extend(doplot(cap_x, cap_lo, **final_capprops))\n            caps.extend(doplot(cap_x, cap_hi, **final_capprops))\n\n        # draw the medians\n        medians.extend(doplot(med_x, med_y, **final_medianprops))\n\n        # maybe draw the means\n        if showmeans:\n            if meanline:\n                means.extend(doplot(\n                    [box_left, box_right], [stats['mean'], stats['mean']],\n                    **final_meanprops\n                ))\n            else:\n                means.extend(doplot(\n                    [pos], [stats['mean']], **final_meanprops\n                ))\n\n        # maybe draw the fliers\n        if showfliers:\n            # fliers coords\n            flier_x = np.full(len(stats['fliers']), pos, dtype=np.float64)\n            flier_y = stats['fliers']\n\n            fliers.extend(doplot(\n                flier_x, flier_y, **final_flierprops\n            ))\n\n    if manage_ticks:\n        axis_name = \"x\" if vert else \"y\"\n        interval = getattr(self.dataLim, f\"interval{axis_name}\")\n        axis = getattr(self, f\"{axis_name}axis\")\n        positions = axis.convert_units(positions)\n        # The 0.5 additional padding ensures reasonable-looking boxes\n        # even when drawing a single box.  We set the sticky edge to\n        # prevent margins expansion, in order to match old behavior (back\n        # when separate calls to boxplot() would completely reset the axis\n        # limits regardless of what was drawn before).  The sticky edges\n        # are attached to the median lines, as they are always present.\n        interval[:] = (min(interval[0], min(positions) - .5),\n                       max(interval[1], max(positions) + .5))\n        for median, position in zip(medians, positions):\n            getattr(median.sticky_edges, axis_name).extend(\n                [position - .5, position + .5])\n        # Modified from Axis.set_ticks and Axis.set_ticklabels.\n        locator = axis.get_major_locator()\n        if not isinstance(axis.get_major_locator(),\n                          mticker.FixedLocator):\n            locator = mticker.FixedLocator([])\n            axis.set_major_locator(locator)\n        locator.locs = np.array([*locator.locs, *positions])\n        formatter = axis.get_major_formatter()\n        if not isinstance(axis.get_major_formatter(),\n                          mticker.FixedFormatter):\n            formatter = mticker.FixedFormatter([])\n            axis.set_major_formatter(formatter)\n        formatter.seq = [*formatter.seq, *datalabels]\n\n        self._request_autoscale_view(\n            scalex=self._autoscaleXon, scaley=self._autoscaleYon)\n\n    return dict(whiskers=whiskers, caps=caps, boxes=boxes,\n                medians=medians, fliers=fliers, means=means)\n",
    "1.1.2": "Drawing function for box and whisker plots.\n\nMake a box and whisker plot for each column of *x* or each\nvector in sequence *x*.  The box extends from the lower to\nupper quartile values of the data, with a line at the median.\nThe whiskers extend from the box to show the range of the\ndata.  Flier points are those past the end of the whiskers.\n\nParameters\n----------\nbxpstats : list of dicts\n  A list of dictionaries containing stats for each boxplot.\n  Required keys are:\n\n  - ``med``: The median (scalar float).\n\n  - ``q1``: The first quartile (25th percentile) (scalar\n    float).\n\n  - ``q3``: The third quartile (75th percentile) (scalar\n    float).\n\n  - ``whislo``: Lower bound of the lower whisker (scalar\n    float).\n\n  - ``whishi``: Upper bound of the upper whisker (scalar\n    float).\n\n  Optional keys are:\n\n  - ``mean``: The mean (scalar float). Needed if\n    ``showmeans=True``.\n\n  - ``fliers``: Data beyond the whiskers (sequence of floats).\n    Needed if ``showfliers=True``.\n\n  - ``cilo`` & ``cihi``: Lower and upper confidence intervals\n    about the median. Needed if ``shownotches=True``.\n\n  - ``label``: Name of the dataset (string). If available,\n    this will be used a tick label for the boxplot\n\npositions : array-like, default: [1, 2, ..., n]\n  Sets the positions of the boxes. The ticks and limits\n  are automatically set to match the positions.\n\nwidths : array-like, default: None\n  Either a scalar or a vector and sets the width of each\n  box. The default is ``0.15*(distance between extreme\n  positions)``, clipped to no less than 0.15 and no more than\n  0.5.\n\nvert : bool, default: True\n  If `True` (default), makes the boxes vertical.  If `False`,\n  makes horizontal boxes.\n\npatch_artist : bool, default: False\n  If `False` produces boxes with the `.Line2D` artist.\n  If `True` produces boxes with the `~matplotlib.patches.Patch` artist.\n\nshownotches : bool, default: False\n  If `False` (default), produces a rectangular box plot.\n  If `True`, will produce a notched box plot\n\nshowmeans : bool, default: False\n  If `True`, will toggle on the rendering of the means\n\nshowcaps  : bool, default: True\n  If `True`, will toggle on the rendering of the caps\n\nshowbox  : bool, default: True\n  If `True`, will toggle on the rendering of the box\n\nshowfliers : bool, default: True\n  If `True`, will toggle on the rendering of the fliers\n\nboxprops : dict or None (default)\n  If provided, will set the plotting style of the boxes\n\nwhiskerprops : dict or None (default)\n  If provided, will set the plotting style of the whiskers\n\ncapprops : dict or None (default)\n  If provided, will set the plotting style of the caps\n\nflierprops : dict or None (default)\n  If provided will set the plotting style of the fliers\n\nmedianprops : dict or None (default)\n  If provided, will set the plotting style of the medians\n\nmeanprops : dict or None (default)\n  If provided, will set the plotting style of the means\n\nmeanline : bool, default: False\n  If `True` (and *showmeans* is `True`), will try to render the mean\n  as a line spanning the full width of the box according to\n  *meanprops*. Not recommended if *shownotches* is also True.\n  Otherwise, means will be shown as points.\n\nmanage_ticks : bool, default: True\n  If True, the tick locations and labels will be adjusted to match the\n  boxplot positions.\n\nzorder : scalar, default: None\n  The zorder of the resulting boxplot.\n\nReturns\n-------\nresult : dict\n  A dictionary mapping each component of the boxplot to a list\n  of the `.Line2D` instances created. That dictionary has the\n  following keys (assuming vertical boxplots):\n\n  - ``boxes``: the main body of the boxplot showing the\n    quartiles and the median's confidence intervals if\n    enabled.\n\n  - ``medians``: horizontal lines at the median of each box.\n\n  - ``whiskers``: the vertical lines extending to the most\n    extreme, non-outlier data points.\n\n  - ``caps``: the horizontal lines at the ends of the\n    whiskers.\n\n  - ``fliers``: points representing data that extend beyond\n    the whiskers (fliers).\n\n  - ``means``: points or lines representing the means.\n\nExamples\n--------\n.. plot:: gallery/statistics/bxp.py",
    "1.2.1": "class Axes(_AxesBase)",
    "1.2.2": "The `Axes` contains most of the figure elements: `~.axis.Axis`,\n`~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\nand sets the coordinate system.\n\nThe `Axes` instance supports callbacks through a callbacks attribute which\nis a `~.cbook.CallbackRegistry` instance.  The events you can connect to\nare 'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(*ax*) where *ax* is the `Axes` instance.\n\nAttributes\n----------\ndataLim : `.Bbox`\n    The bounding box enclosing all data displayed in the Axes.\nviewLim : `.Bbox`\n    The view limits in data coordinates.",
    "1.2.3": [
        "plot(self, *args, **kwargs)",
        "line_props_with_rcdefaults(subkey, explicit, zdelta=0)",
        "to_vc(xs, ys)",
        "patch_list(xs, ys, **kwargs)",
        "doplot(*args, **kwargs)",
        "dopatch(xs, ys, **kwargs)",
        "doplot(*args, **kwargs)",
        "dopatch(xs, ys, **kwargs)"
    ],
    "1.3.1": "lib/matplotlib/axes/_axes.py",
    "1.3.2": [
        "plot(self, *args, **kwargs)",
        "line_props_with_rcdefaults(subkey, explicit, zdelta=0)",
        "to_vc(xs, ys)",
        "patch_list(xs, ys, **kwargs)",
        "doplot(*args, **kwargs)",
        "dopatch(xs, ys, **kwargs)",
        "doplot(*args, **kwargs)",
        "dopatch(xs, ys, **kwargs)"
    ],
    "1.4.1": [
        "def test_boxplot_marker_behavior():\n    plt.rcParams['lines.marker'] = 's'\n    plt.rcParams['boxplot.flierprops.marker'] = 'o'\n    plt.rcParams['boxplot.meanprops.marker'] = '^'\n    fig, ax = plt.subplots()\n    test_data = np.arange(100)\n    test_data[-1] = 150  # a flier point\n    bxp_handle = ax.boxplot(test_data, showmeans=True)\n    for bxp_lines in ['whiskers', 'caps', 'boxes', 'medians']:\n        for each_line in bxp_handle[bxp_lines]:\n            # Ensure that the rcParams['lines.marker'] is overridden by ''\n            assert each_line.get_marker() == ''\n\n    # Ensure that markers for fliers and means aren't overridden with ''\n    assert bxp_handle['fliers'][0].get_marker() == 'o'\n    assert bxp_handle['means'][0].get_marker() == '^'"
    ],
    "1.4.2": [
        "lib/matplotlib/tests/test_axes.py"
    ],
    "2.1.1": [
        [
            "E               AssertionError: assert 's' == ''\nE                 + s"
        ]
    ],
    "2.1.2": [
        [
            "def test_boxplot_marker_behavior():\n        plt.rcParams['lines.marker'] = 's'\n        plt.rcParams['boxplot.flierprops.marker'] = 'o'\n        plt.rcParams['boxplot.meanprops.marker'] = '^'\n        fig, ax = plt.subplots()\n        test_data = np.arange(100)\n        test_data[-1] = 150  # a flier point\n        bxp_handle = ax.boxplot(test_data, showmeans=True)\n        for bxp_lines in ['whiskers', 'caps', 'boxes', 'medians']:\n            for each_line in bxp_handle[bxp_lines]:\n                # Ensure that the rcParams['lines.marker'] is overridden by ''\n>               assert each_line.get_marker() == ''",
            "\nlib/matplotlib/tests/test_axes.py:2715: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "patch_artist": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "boxprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "whiskerprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "capprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "flierprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "medianprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "meanprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "meanline": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "vert": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "bxpstats": {
                    "value": "[{'mean': 50.01, 'iqr': 49.5, 'cilo': 41.7285, 'cihi': 57.2715, 'whishi': 98, 'whislo': 0, 'fliers': array([150]), 'q1': 24.75, 'med': 49.5, 'q3': 74.25}]",
                    "shape": "1",
                    "omitted": false
                },
                "shownotches": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "showbox": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "showcaps": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "showmeans": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "showfliers": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "manage_ticks": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.dataLim": {
                    "value": "Bbox([[inf, inf], [-inf, -inf]])",
                    "shape": null,
                    "omitted": false
                },
                "self._autoscaleXon": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self._autoscaleYon": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "whiskers": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "caps": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "boxes": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "medians": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "means": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "fliers": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "datalabels": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "zorder": {
                    "value": "2",
                    "shape": null,
                    "omitted": false
                },
                "zdelta": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "d": {
                    "value": "{'color': 'b', 'linestyle': '-', 'linewidth': 1.0, 'zorder': 2}",
                    "shape": "4",
                    "omitted": false
                },
                "subkey": {
                    "value": "'boxprops'",
                    "shape": "8",
                    "omitted": false
                },
                "explicit": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "patch_artist": "bool",
                "boxprops": "dict",
                "whiskerprops": "dict",
                "capprops": "dict",
                "flierprops": "dict",
                "medianprops": "dict",
                "meanprops": "dict",
                "meanline": "bool",
                "vert": "bool",
                "bxpstats": "list",
                "shownotches": "bool",
                "showbox": "bool",
                "showcaps": "bool",
                "showmeans": "bool",
                "showfliers": "bool",
                "manage_ticks": "bool",
                "self.dataLim": "Bbox",
                "self._autoscaleXon": "bool",
                "self._autoscaleYon": "bool"
            },
            {
                "whiskers": "list",
                "caps": "list",
                "boxes": "list",
                "medians": "list",
                "means": "list",
                "fliers": "list",
                "datalabels": "list",
                "zorder": "int",
                "zdelta": "int",
                "d": "dict",
                "subkey": "str",
                "explicit": "dict"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "patch_artist": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "boxprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "whiskerprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "capprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "flierprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "medianprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "meanprops": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "meanline": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "vert": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "bxpstats": {
                    "value": "[{'mean': 50.01, 'iqr': 49.5, 'cilo': 41.7285, 'cihi': 57.2715, 'whishi': 98, 'whislo': 0, 'fliers': array([150]), 'q1': 24.75, 'med': 49.5, 'q3': 74.25}]",
                    "shape": "1",
                    "omitted": false
                },
                "shownotches": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "showbox": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "showcaps": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "showmeans": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "showfliers": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "manage_ticks": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.dataLim": {
                    "value": "Bbox([[inf, inf], [-inf, -inf]])",
                    "shape": null,
                    "omitted": false
                },
                "self._autoscaleXon": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self._autoscaleYon": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "whiskers": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "caps": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "boxes": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "medians": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "means": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "fliers": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "datalabels": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "zorder": {
                    "value": "2",
                    "shape": null,
                    "omitted": false
                },
                "zdelta": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "d": {
                    "value": "{'color': 'b', 'linestyle': '-', 'linewidth': 1.0, 'zorder': 2, 'marker': ''}",
                    "shape": "5",
                    "omitted": false
                },
                "subkey": {
                    "value": "'boxprops'",
                    "shape": "8",
                    "omitted": false
                },
                "use_marker": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "explicit": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "patch_artist": "bool",
                "boxprops": "dict",
                "whiskerprops": "dict",
                "capprops": "dict",
                "flierprops": "dict",
                "medianprops": "dict",
                "meanprops": "dict",
                "meanline": "bool",
                "vert": "bool",
                "bxpstats": "list",
                "shownotches": "bool",
                "showbox": "bool",
                "showcaps": "bool",
                "showmeans": "bool",
                "showfliers": "bool",
                "manage_ticks": "bool",
                "self.dataLim": "Bbox",
                "self._autoscaleXon": "bool",
                "self._autoscaleYon": "bool"
            },
            {
                "whiskers": "list",
                "caps": "list",
                "boxes": "list",
                "medians": "list",
                "means": "list",
                "fliers": "list",
                "datalabels": "list",
                "zorder": "int",
                "zdelta": "int",
                "d": "dict",
                "subkey": "str",
                "use_marker": "bool",
                "explicit": "dict"
            }
        ]
    ],
    "3.1.1": [
        "Setting lines.marker = s in matplotlibrc also sets markers in boxplots\n"
    ],
    "3.1.2": [
        "Bug report\nSetting this line\nlines.marker : s ## the default marker\nin the matplotlibrc leads to an unexpected result:\n\n%pylab inline\nboxplot(range(100))\n"
    ],
    "used_imports": "from numbers import Number\nimport numpy as np\nimport matplotlib.cbook as cbook\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\nimport matplotlib.path as mpath\nimport matplotlib.ticker as mticker\nfrom matplotlib import _preprocess_data, rcParams\nfrom builtins import range"
}