{
    "matplotlib:22": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/matplotlib_22/lib/matplotlib/axes/_axes.py": {
            "buggy_functions": [
                {
                    "function_name": "hist",
                    "function_code": "@_preprocess_data(replace_names=[\"x\", 'weights'], label_namer=\"x\")\ndef hist(self, x, bins=None, range=None, density=False, weights=None,\n         cumulative=False, bottom=None, histtype='bar', align='mid',\n         orientation='vertical', rwidth=None, log=False,\n         color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n\n    Compute and draw the histogram of *x*.  The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data.  See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n\n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset.  Note that\n    the ndarray form is transposed relative to the list form.\n\n    Masked arrays are not supported.\n\n    The *bins*, *range*, *weights*, and *density* parameters behave as in\n    `numpy.histogram`.\n\n    Parameters\n    ----------\n    x : (n,) array or sequence of (n,) arrays\n        Input values, this takes either a single array or a sequence of\n        arrays which are not required to be of the same length.\n\n    bins : int or sequence or str, optional\n        If *bins* is an integer, it defines the number of equal-width bins\n        in the range.\n\n        If *bins* is a sequence, it defines the bin edges, including the\n        left edge of the first bin and the right edge of the last bin;\n        in this case, bins may be unequally spaced.  All but the last\n        (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n            [1, 2, 3, 4]\n\n        then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n        the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n        *includes* 4.\n\n        If *bins* is a string, it is one of the binning strategies\n        supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n        'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\n        The default is :rc:`hist.bins`.\n\n    range : tuple or None, optional\n        The lower and upper range of the bins. Lower and upper outliers\n        are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n        Range has no effect if *bins* is a sequence.\n\n        If *bins* is a sequence or *range* is specified, autoscaling\n        is based on the specified bin range instead of the\n        range of x.\n\n        Default is ``None``\n\n    density : bool, optional\n        If ``True``, the first element of the return tuple will\n        be the counts normalized to form a probability density, i.e.,\n        the area (or integral) under the histogram will sum to 1.\n        This is achieved by dividing the count by the number of\n        observations times the bin width and not dividing by the total\n        number of observations. If *stacked* is also ``True``, the sum of\n        the histograms is normalized to 1.\n\n        Default is ``False``.\n\n    weights : (n, ) array-like or None, optional\n        An array of weights, of the same shape as *x*.  Each value in *x*\n        only contributes its associated weight towards the bin count\n        (instead of 1).  If *normed* or *density* is ``True``,\n        the weights are normalized, so that the integral of the density\n        over the range remains 1.\n\n        Default is ``None``.\n\n        This parameter can be used to draw a histogram of data that has\n        already been binned, e.g. using `np.histogram` (by treating each\n        bin as a single point with a weight equal to its count) ::\n\n            counts, bins = np.histogram(data)\n            plt.hist(bins[:-1], bins, weights=counts)\n\n        (or you may alternatively use `~.bar()`).\n\n    cumulative : bool or -1, optional\n        If ``True``, then a histogram is computed where each bin gives the\n        counts in that bin plus all bins for smaller values. The last bin\n        gives the total number of datapoints.\n\n        If *density* is also ``True`` then the histogram is normalized such\n        that the last bin equals 1.\n\n        If *cumulative* is a number less than 0 (e.g., -1), the direction\n        of accumulation is reversed.  In this case, if *density* is also\n        ``True``, then the histogram is normalized such that the first bin\n        equals 1.\n\n        Default is ``False``\n\n    bottom : array-like, scalar, or None\n        Location of the bottom baseline of each bin.  If a scalar,\n        the base line for each bin is shifted by the same amount.\n        If an array, each bin is shifted independently and the length\n        of bottom must match the number of bins.  If None, defaults to 0.\n\n        Default is ``None``\n\n    histtype : {'bar', 'barstacked', 'step',  'stepfilled'}, optional\n        The type of histogram to draw.\n\n        - 'bar' is a traditional bar-type histogram.  If multiple data\n          are given the bars are arranged side by side.\n        - 'barstacked' is a bar-type histogram where multiple\n          data are stacked on top of each other.\n        - 'step' generates a lineplot that is by default unfilled.\n        - 'stepfilled' generates a lineplot that is by default filled.\n\n        Default is 'bar'\n\n    align : {'left', 'mid', 'right'}, optional\n        Controls how the histogram is plotted.\n\n        - 'left': bars are centered on the left bin edges.\n        - 'mid': bars are centered between the bin edges.\n        - 'right': bars are centered on the right bin edges.\n\n        Default is 'mid'\n\n    orientation : {'horizontal', 'vertical'}, optional\n        If 'horizontal', `~matplotlib.pyplot.barh` will be used for\n        bar-type histograms and the *bottom* kwarg will be the left edges.\n\n    rwidth : scalar or None, optional\n        The relative width of the bars as a fraction of the bin width.  If\n        ``None``, automatically compute the width.\n\n        Ignored if *histtype* is 'step' or 'stepfilled'.\n\n        Default is ``None``\n\n    log : bool, optional\n        If ``True``, the histogram axis will be set to a log scale. If\n        *log* is ``True`` and *x* is a 1D array, empty bins will be\n        filtered out and only the non-empty ``(n, bins, patches)``\n        will be returned.\n\n        Default is ``False``\n\n    color : color or array-like of colors or None, optional\n        Color or sequence of colors, one per dataset.  Default (``None``)\n        uses the standard line color sequence.\n\n        Default is ``None``\n\n    label : str or None, optional\n        String, or sequence of strings to match multiple datasets.  Bar\n        charts yield multiple patches per dataset, but only the first gets\n        the label, so that the legend command will work as expected.\n\n        default is ``None``\n\n    stacked : bool, optional\n        If ``True``, multiple data are stacked on top of each other If\n        ``False`` multiple data are arranged side by side if histtype is\n        'bar' or on top of each other if histtype is 'step'\n\n        Default is ``False``\n\n    Returns\n    -------\n    n : array or list of arrays\n        The values of the histogram bins. See *density* and *weights* for a\n        description of the possible semantics.  If input *x* is an array,\n        then this is an array of length *nbins*. If input is a sequence of\n        arrays ``[data1, data2, ...]``, then this is a list of arrays with\n        the values of the histograms for each of the arrays in the same\n        order.  The dtype of the array *n* (or of its element arrays) will\n        always be float even if no weighting or normalization is used.\n\n    bins : array\n        The edges of the bins. Length nbins + 1 (nbins left edges and right\n        edge of last bin).  Always a single array even when multiple data\n        sets are passed in.\n\n    patches : list or list of lists\n        Silent list of individual patches used to create the histogram\n        or list of such list if multiple input datasets.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Patch` properties\n\n    See also\n    --------\n    hist2d : 2D histograms\n\n    \"\"\"\n    # Avoid shadowing the builtin.\n    bin_range = range\n    from builtins import range\n\n    if np.isscalar(x):\n        x = [x]\n\n    if bins is None:\n        bins = rcParams['hist.bins']\n\n    # Validate string inputs here to avoid cluttering subsequent code.\n    cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'],\n                         histtype=histtype)\n    cbook._check_in_list(['left', 'mid', 'right'], align=align)\n    cbook._check_in_list(['horizontal', 'vertical'],\n                         orientation=orientation)\n\n    if histtype == 'barstacked' and not stacked:\n        stacked = True\n\n    # basic input validation\n    input_empty = np.size(x) == 0\n    # Massage 'x' for processing.\n    x = cbook._reshape_2D(x, 'x')\n    nx = len(x)  # number of datasets\n\n    # Process unit information\n    # Unit conversion is done individually on each dataset\n    self._process_unit_info(xdata=x[0], kwargs=kwargs)\n    x = [self.convert_xunits(xi) for xi in x]\n\n    if bin_range is not None:\n        bin_range = self.convert_xunits(bin_range)\n\n    # We need to do to 'weights' what was done to 'x'\n    if weights is not None:\n        w = cbook._reshape_2D(weights, 'weights')\n    else:\n        w = [None] * nx\n\n    if len(w) != nx:\n        raise ValueError('weights should have the same shape as x')\n\n    for xi, wi in zip(x, w):\n        if wi is not None and len(wi) != len(xi):\n            raise ValueError(\n                'weights should have the same shape as x')\n\n    if color is None:\n        color = [self._get_lines.get_next_color() for i in range(nx)]\n    else:\n        color = mcolors.to_rgba_array(color)\n        if len(color) != nx:\n            error_message = (\n                \"color kwarg must have one color per data set. %d data \"\n                \"sets and %d colors were provided\" % (nx, len(color)))\n            raise ValueError(error_message)\n\n    hist_kwargs = dict()\n\n    # if the bin_range is not given, compute without nan numpy\n    # does not do this for us when guessing the range (but will\n    # happily ignore nans when computing the histogram).\n    if bin_range is None:\n        xmin = np.inf\n        xmax = -np.inf\n        for xi in x:\n            if len(xi):\n                # python's min/max ignore nan,\n                # np.minnan returns nan for all nan input\n                xmin = min(xmin, np.nanmin(xi))\n                xmax = max(xmax, np.nanmax(xi))\n        # make sure we have seen at least one non-nan and finite\n        # value before we reset the bin range\n        if not np.isnan([xmin, xmax]).any() and not (xmin > xmax):\n            bin_range = (xmin, xmax)\n\n    # If bins are not specified either explicitly or via range,\n    # we need to figure out the range required for all datasets,\n    # and supply that to np.histogram.\n    if not input_empty and len(x) > 1:\n        if weights is not None:\n            _w = np.concatenate(w)\n        else:\n            _w = None\n\n        bins = histogram_bin_edges(np.concatenate(x),\n                                   bins, bin_range, _w)\n    else:\n        hist_kwargs['range'] = bin_range\n\n    density = bool(density)\n    if density and not stacked:\n        hist_kwargs['density'] = density\n\n    # List to store all the top coordinates of the histograms\n    tops = []  # Will have shape (n_datasets, n_bins).\n    # Loop through datasets\n    for i in range(nx):\n        # this will automatically overwrite bins,\n        # so that each histogram uses the same bins\n        m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n        tops.append(m)\n    tops = np.array(tops, float)  # causes problems later if it's an int\n    if stacked:\n        tops = tops.cumsum(axis=0)\n        # If a stacked density plot, normalize so the area of all the\n        # stacked histograms together is 1\n        if density:\n            tops = (tops / np.diff(bins)) / tops[-1].sum()\n    if cumulative:\n        slc = slice(None)\n        if isinstance(cumulative, Number) and cumulative < 0:\n            slc = slice(None, None, -1)\n        if density:\n            tops = (tops * np.diff(bins))[:, slc].cumsum(axis=1)[:, slc]\n        else:\n            tops = tops[:, slc].cumsum(axis=1)[:, slc]\n\n    patches = []\n\n    # Save autoscale state for later restoration; turn autoscaling\n    # off so we can do it all a single time at the end, instead\n    # of having it done by bar or fill and then having to be redone.\n    _saved_autoscalex = self.get_autoscalex_on()\n    _saved_autoscaley = self.get_autoscaley_on()\n    self.set_autoscalex_on(False)\n    self.set_autoscaley_on(False)\n\n    if histtype.startswith('bar'):\n\n        totwidth = np.diff(bins)\n\n        if rwidth is not None:\n            dr = np.clip(rwidth, 0, 1)\n        elif (len(tops) > 1 and\n              ((not stacked) or rcParams['_internal.classic_mode'])):\n            dr = 0.8\n        else:\n            dr = 1.0\n\n        if histtype == 'bar' and not stacked:\n            width = dr * totwidth / nx\n            dw = width\n            boffset = -0.5 * dr * totwidth * (1 - 1 / nx)\n        elif histtype == 'barstacked' or stacked:\n            width = dr * totwidth\n            boffset, dw = 0.0, 0.0\n\n        if align == 'mid':\n            boffset += 0.5 * totwidth\n        elif align == 'right':\n            boffset += totwidth\n\n        if orientation == 'horizontal':\n            _barfunc = self.barh\n            bottom_kwarg = 'left'\n        else:  # orientation == 'vertical'\n            _barfunc = self.bar\n            bottom_kwarg = 'bottom'\n\n        for m, c in zip(tops, color):\n            if bottom is None:\n                bottom = np.zeros(len(m))\n            if stacked:\n                height = m - bottom\n            else:\n                height = m\n            patch = _barfunc(bins[:-1]+boffset, height, width,\n                             align='center', log=log,\n                             color=c, **{bottom_kwarg: bottom})\n            patches.append(patch)\n            if stacked:\n                bottom[:] = m\n            boffset += dw\n\n    elif histtype.startswith('step'):\n        # these define the perimeter of the polygon\n        x = np.zeros(4 * len(bins) - 3)\n        y = np.zeros(4 * len(bins) - 3)\n\n        x[0:2*len(bins)-1:2], x[1:2*len(bins)-1:2] = bins, bins[:-1]\n        x[2*len(bins)-1:] = x[1:2*len(bins)-1][::-1]\n\n        if bottom is None:\n            bottom = np.zeros(len(bins) - 1)\n\n        y[1:2*len(bins)-1:2], y[2:2*len(bins):2] = bottom, bottom\n        y[2*len(bins)-1:] = y[1:2*len(bins)-1][::-1]\n\n        if log:\n            if orientation == 'horizontal':\n                self.set_xscale('log', nonposx='clip')\n            else:  # orientation == 'vertical'\n                self.set_yscale('log', nonposy='clip')\n\n        if align == 'left':\n            x -= 0.5*(bins[1]-bins[0])\n        elif align == 'right':\n            x += 0.5*(bins[1]-bins[0])\n\n        # If fill kwarg is set, it will be passed to the patch collection,\n        # overriding this\n        fill = (histtype == 'stepfilled')\n\n        xvals, yvals = [], []\n        for m in tops:\n            if stacked:\n                # starting point for drawing polygon\n                y[0] = y[1]\n                # top of the previous polygon becomes the bottom\n                y[2*len(bins)-1:] = y[1:2*len(bins)-1][::-1]\n            # set the top of this polygon\n            y[1:2*len(bins)-1:2], y[2:2*len(bins):2] = (m + bottom,\n                                                        m + bottom)\n            if orientation == 'horizontal':\n                xvals.append(y.copy())\n                yvals.append(x.copy())\n            else:\n                xvals.append(x.copy())\n                yvals.append(y.copy())\n\n        # stepfill is closed, step is not\n        split = -1 if fill else 2 * len(bins)\n        # add patches in reverse order so that when stacking,\n        # items lower in the stack are plotted on top of\n        # items higher in the stack\n        for x, y, c in reversed(list(zip(xvals, yvals, color))):\n            patches.append(self.fill(\n                x[:split], y[:split],\n                closed=True if fill else None,\n                facecolor=c,\n                edgecolor=None if fill else c,\n                fill=fill if fill else None))\n        for patch_list in patches:\n            for patch in patch_list:\n                if orientation == 'vertical':\n                    patch.sticky_edges.y.append(0)\n                elif orientation == 'horizontal':\n                    patch.sticky_edges.x.append(0)\n\n        # we return patches, so put it back in the expected order\n        patches.reverse()\n\n    self.set_autoscalex_on(_saved_autoscalex)\n    self.set_autoscaley_on(_saved_autoscaley)\n    self._request_autoscale_view()\n\n    if label is None:\n        labels = [None]\n    elif isinstance(label, str):\n        labels = [label]\n    elif not np.iterable(label):\n        labels = [str(label)]\n    else:\n        labels = [str(lab) for lab in label]\n\n    for patch, lbl in itertools.zip_longest(patches, labels):\n        if patch:\n            p = patch[0]\n            p.update(kwargs)\n            if lbl is not None:\n                p.set_label(lbl)\n\n            for p in patch[1:]:\n                p.update(kwargs)\n                p.set_label('_nolegend_')\n\n    if nx == 1:\n        return tops[0], bins, cbook.silent_list('Patch', patches[0])\n    else:\n        return tops, bins, cbook.silent_list('Lists of Patches', patches)\n",
                    "decorators": [
                        "_preprocess_data(replace_names=['x', 'weights'], label_namer='x')"
                    ],
                    "docstring": "Plot a histogram.\n\nCompute and draw the histogram of *x*.  The return value is a tuple\n(*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n*patches1*,...]) if the input contains multiple data.  See the\ndocumentation of the *weights* parameter to draw a histogram of\nalready-binned data.\n\nMultiple data can be provided via *x* as a list of datasets\nof potentially different length ([*x0*, *x1*, ...]), or as\na 2-D ndarray in which each column is a dataset.  Note that\nthe ndarray form is transposed relative to the list form.\n\nMasked arrays are not supported.\n\nThe *bins*, *range*, *weights*, and *density* parameters behave as in\n`numpy.histogram`.\n\nParameters\n----------\nx : (n,) array or sequence of (n,) arrays\n    Input values, this takes either a single array or a sequence of\n    arrays which are not required to be of the same length.\n\nbins : int or sequence or str, optional\n    If *bins* is an integer, it defines the number of equal-width bins\n    in the range.\n\n    If *bins* is a sequence, it defines the bin edges, including the\n    left edge of the first bin and the right edge of the last bin;\n    in this case, bins may be unequally spaced.  All but the last\n    (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n        [1, 2, 3, 4]\n\n    then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n    the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n    *includes* 4.\n\n    If *bins* is a string, it is one of the binning strategies\n    supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n    'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\n    The default is :rc:`hist.bins`.\n\nrange : tuple or None, optional\n    The lower and upper range of the bins. Lower and upper outliers\n    are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n    Range has no effect if *bins* is a sequence.\n\n    If *bins* is a sequence or *range* is specified, autoscaling\n    is based on the specified bin range instead of the\n    range of x.\n\n    Default is ``None``\n\ndensity : bool, optional\n    If ``True``, the first element of the return tuple will\n    be the counts normalized to form a probability density, i.e.,\n    the area (or integral) under the histogram will sum to 1.\n    This is achieved by dividing the count by the number of\n    observations times the bin width and not dividing by the total\n    number of observations. If *stacked* is also ``True``, the sum of\n    the histograms is normalized to 1.\n\n    Default is ``False``.\n\nweights : (n, ) array-like or None, optional\n    An array of weights, of the same shape as *x*.  Each value in *x*\n    only contributes its associated weight towards the bin count\n    (instead of 1).  If *normed* or *density* is ``True``,\n    the weights are normalized, so that the integral of the density\n    over the range remains 1.\n\n    Default is ``None``.\n\n    This parameter can be used to draw a histogram of data that has\n    already been binned, e.g. using `np.histogram` (by treating each\n    bin as a single point with a weight equal to its count) ::\n\n        counts, bins = np.histogram(data)\n        plt.hist(bins[:-1], bins, weights=counts)\n\n    (or you may alternatively use `~.bar()`).\n\ncumulative : bool or -1, optional\n    If ``True``, then a histogram is computed where each bin gives the\n    counts in that bin plus all bins for smaller values. The last bin\n    gives the total number of datapoints.\n\n    If *density* is also ``True`` then the histogram is normalized such\n    that the last bin equals 1.\n\n    If *cumulative* is a number less than 0 (e.g., -1), the direction\n    of accumulation is reversed.  In this case, if *density* is also\n    ``True``, then the histogram is normalized such that the first bin\n    equals 1.\n\n    Default is ``False``\n\nbottom : array-like, scalar, or None\n    Location of the bottom baseline of each bin.  If a scalar,\n    the base line for each bin is shifted by the same amount.\n    If an array, each bin is shifted independently and the length\n    of bottom must match the number of bins.  If None, defaults to 0.\n\n    Default is ``None``\n\nhisttype : {'bar', 'barstacked', 'step',  'stepfilled'}, optional\n    The type of histogram to draw.\n\n    - 'bar' is a traditional bar-type histogram.  If multiple data\n      are given the bars are arranged side by side.\n    - 'barstacked' is a bar-type histogram where multiple\n      data are stacked on top of each other.\n    - 'step' generates a lineplot that is by default unfilled.\n    - 'stepfilled' generates a lineplot that is by default filled.\n\n    Default is 'bar'\n\nalign : {'left', 'mid', 'right'}, optional\n    Controls how the histogram is plotted.\n\n    - 'left': bars are centered on the left bin edges.\n    - 'mid': bars are centered between the bin edges.\n    - 'right': bars are centered on the right bin edges.\n\n    Default is 'mid'\n\norientation : {'horizontal', 'vertical'}, optional\n    If 'horizontal', `~matplotlib.pyplot.barh` will be used for\n    bar-type histograms and the *bottom* kwarg will be the left edges.\n\nrwidth : scalar or None, optional\n    The relative width of the bars as a fraction of the bin width.  If\n    ``None``, automatically compute the width.\n\n    Ignored if *histtype* is 'step' or 'stepfilled'.\n\n    Default is ``None``\n\nlog : bool, optional\n    If ``True``, the histogram axis will be set to a log scale. If\n    *log* is ``True`` and *x* is a 1D array, empty bins will be\n    filtered out and only the non-empty ``(n, bins, patches)``\n    will be returned.\n\n    Default is ``False``\n\ncolor : color or array-like of colors or None, optional\n    Color or sequence of colors, one per dataset.  Default (``None``)\n    uses the standard line color sequence.\n\n    Default is ``None``\n\nlabel : str or None, optional\n    String, or sequence of strings to match multiple datasets.  Bar\n    charts yield multiple patches per dataset, but only the first gets\n    the label, so that the legend command will work as expected.\n\n    default is ``None``\n\nstacked : bool, optional\n    If ``True``, multiple data are stacked on top of each other If\n    ``False`` multiple data are arranged side by side if histtype is\n    'bar' or on top of each other if histtype is 'step'\n\n    Default is ``False``\n\nReturns\n-------\nn : array or list of arrays\n    The values of the histogram bins. See *density* and *weights* for a\n    description of the possible semantics.  If input *x* is an array,\n    then this is an array of length *nbins*. If input is a sequence of\n    arrays ``[data1, data2, ...]``, then this is a list of arrays with\n    the values of the histograms for each of the arrays in the same\n    order.  The dtype of the array *n* (or of its element arrays) will\n    always be float even if no weighting or normalization is used.\n\nbins : array\n    The edges of the bins. Length nbins + 1 (nbins left edges and right\n    edge of last bin).  Always a single array even when multiple data\n    sets are passed in.\n\npatches : list or list of lists\n    Silent list of individual patches used to create the histogram\n    or list of such list if multiple input datasets.\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Patch` properties\n\nSee also\n--------\nhist2d : 2D histograms",
                    "start_line": 6338,
                    "end_line": 6813,
                    "variables": {
                        "bin_range": [
                            6629,
                            6631,
                            6605,
                            6573,
                            6574,
                            6543,
                            6617
                        ],
                        "range": [
                            6640,
                            6591,
                            6543
                        ],
                        "np.isscalar": [
                            6546
                        ],
                        "np": [
                            6657,
                            6794,
                            6673,
                            6546,
                            6676,
                            6563,
                            6705,
                            6720,
                            6721,
                            6727,
                            6606,
                            6607,
                            6612,
                            6613,
                            6616,
                            6624,
                            6628,
                            6643,
                            6645,
                            6651
                        ],
                        "x": [
                            6546,
                            6547,
                            6563,
                            6565,
                            6566,
                            6570,
                            6571,
                            6585,
                            6720,
                            6723,
                            6724,
                            6608,
                            6739,
                            6741,
                            6622,
                            6628,
                            6759,
                            6761,
                            6769,
                            6643,
                            6771
                        ],
                        "bins": [
                            6657,
                            6673,
                            6549,
                            6550,
                            6811,
                            6813,
                            6710,
                            6720,
                            6721,
                            6723,
                            6724,
                            6727,
                            6729,
                            6730,
                            6739,
                            6741,
                            6753,
                            6755,
                            6628,
                            6629,
                            6765,
                            6643,
                            6651
                        ],
                        "rcParams": [
                            6550,
                            6678
                        ],
                        "cbook._check_in_list": [
                            6553,
                            6555,
                            6556
                        ],
                        "cbook": [
                            6565,
                            6578,
                            6811,
                            6553,
                            6555,
                            6556,
                            6813
                        ],
                        "histtype": [
                            6559,
                            6671,
                            6745,
                            6554,
                            6683,
                            6718,
                            6687
                        ],
                        "align": [
                            6691,
                            6693,
                            6738,
                            6740,
                            6555
                        ],
                        "orientation": [
                            6757,
                            6696,
                            6733,
                            6778,
                            6780,
                            6557
                        ],
                        "stacked": [
                            6560,
                            6634,
                            6687,
                            6706,
                            6678,
                            6646,
                            6714,
                            6683,
                            6749,
                            6559
                        ],
                        "input_empty": [
                            6563,
                            6622
                        ],
                        "np.size": [
                            6563
                        ],
                        "cbook._reshape_2D": [
                            6578,
                            6565
                        ],
                        "nx": [
                            6594,
                            6597,
                            6566,
                            6640,
                            6580,
                            6582,
                            6810,
                            6684,
                            6686,
                            6591
                        ],
                        "len": [
                            6677,
                            6566,
                            6705,
                            6582,
                            6586,
                            6720,
                            6721,
                            6594,
                            6723,
                            6724,
                            6597,
                            6727,
                            6729,
                            6730,
                            6609,
                            6622,
                            6753,
                            6755,
                            6765
                        ],
                        "self._process_unit_info": [
                            6570
                        ],
                        "self": [
                            6786,
                            6787,
                            6788,
                            6697,
                            6570,
                            6571,
                            6666,
                            6667,
                            6574,
                            6668,
                            6669,
                            6700,
                            6734,
                            6736,
                            6770,
                            6591
                        ],
                        "kwargs": [
                            6807,
                            6570,
                            6802
                        ],
                        "self.convert_xunits": [
                            6571,
                            6574
                        ],
                        "xi": [
                            6571,
                            6608,
                            6609,
                            6612,
                            6613,
                            6585,
                            6586
                        ],
                        "weights": [
                            6577,
                            6578,
                            6623
                        ],
                        "w": [
                            6624,
                            6578,
                            6643,
                            6580,
                            6582,
                            6585
                        ],
                        "ValueError": [
                            6587,
                            6598,
                            6583
                        ],
                        "wi": [
                            6585,
                            6586
                        ],
                        "zip": [
                            6585,
                            6769,
                            6703
                        ],
                        "color": [
                            6593,
                            6594,
                            6597,
                            6703,
                            6769,
                            6590,
                            6591
                        ],
                        "self._get_lines.get_next_color": [
                            6591
                        ],
                        "self._get_lines": [
                            6591
                        ],
                        "i": [
                            6640,
                            6643,
                            6591
                        ],
                        "mcolors.to_rgba_array": [
                            6593
                        ],
                        "mcolors": [
                            6593
                        ],
                        "error_message": [
                            6595,
                            6598
                        ],
                        "hist_kwargs": [
                            6600,
                            6643,
                            6635,
                            6631
                        ],
                        "dict": [
                            6600
                        ],
                        "xmin": [
                            6616,
                            6617,
                            6612,
                            6606
                        ],
                        "np.inf": [
                            6606,
                            6607
                        ],
                        "xmax": [
                            6616,
                            6617,
                            6613,
                            6607
                        ],
                        "min": [
                            6612
                        ],
                        "np.nanmin": [
                            6612
                        ],
                        "max": [
                            6613
                        ],
                        "np.nanmax": [
                            6613
                        ],
                        "any": [
                            6616
                        ],
                        "np.isnan": [
                            6616
                        ],
                        "_w": [
                            6624,
                            6626,
                            6629
                        ],
                        "np.concatenate": [
                            6624,
                            6628
                        ],
                        "histogram_bin_edges": [
                            6628
                        ],
                        "density": [
                            6656,
                            6633,
                            6634,
                            6635,
                            6650
                        ],
                        "bool": [
                            6633
                        ],
                        "tops": [
                            6657,
                            6659,
                            6638,
                            6703,
                            6811,
                            6644,
                            6645,
                            6677,
                            6647,
                            6651,
                            6748,
                            6813
                        ],
                        "m": [
                            6755,
                            6756,
                            6703,
                            6705,
                            6643,
                            6644,
                            6707,
                            6709,
                            6715,
                            6748
                        ],
                        "np.histogram": [
                            6643
                        ],
                        "tops.append": [
                            6644
                        ],
                        "np.array": [
                            6645
                        ],
                        "float": [
                            6645
                        ],
                        "tops.cumsum": [
                            6647
                        ],
                        "np.diff": [
                            6657,
                            6651,
                            6673
                        ],
                        "sum": [
                            6651
                        ],
                        "cumulative": [
                            6652,
                            6654
                        ],
                        "slc": [
                            6657,
                            6659,
                            6653,
                            6655
                        ],
                        "slice": [
                            6653,
                            6655
                        ],
                        "isinstance": [
                            6792,
                            6654
                        ],
                        "Number": [
                            6654
                        ],
                        "cumsum": [
                            6657,
                            6659
                        ],
                        "patches": [
                            6784,
                            6661,
                            6799,
                            6770,
                            6776,
                            6713,
                            6811,
                            6813
                        ],
                        "_saved_autoscalex": [
                            6666,
                            6786
                        ],
                        "self.get_autoscalex_on": [
                            6666
                        ],
                        "_saved_autoscaley": [
                            6667,
                            6787
                        ],
                        "self.get_autoscaley_on": [
                            6667
                        ],
                        "self.set_autoscalex_on": [
                            6786,
                            6668
                        ],
                        "self.set_autoscaley_on": [
                            6787,
                            6669
                        ],
                        "histtype.startswith": [
                            6718,
                            6671
                        ],
                        "totwidth": [
                            6688,
                            6692,
                            6694,
                            6673,
                            6684,
                            6686
                        ],
                        "rwidth": [
                            6675,
                            6676
                        ],
                        "dr": [
                            6688,
                            6676,
                            6679,
                            6681,
                            6684,
                            6686
                        ],
                        "np.clip": [
                            6676
                        ],
                        "width": [
                            6688,
                            6684,
                            6685,
                            6710
                        ],
                        "dw": [
                            6689,
                            6716,
                            6685
                        ],
                        "boffset": [
                            6689,
                            6692,
                            6694,
                            6710,
                            6716,
                            6686
                        ],
                        "_barfunc": [
                            6697,
                            6700,
                            6710
                        ],
                        "self.barh": [
                            6697
                        ],
                        "bottom_kwarg": [
                            6712,
                            6698,
                            6701
                        ],
                        "self.bar": [
                            6700
                        ],
                        "c": [
                            6703,
                            6769,
                            6773,
                            6774,
                            6712
                        ],
                        "bottom": [
                            6755,
                            6756,
                            6726,
                            6727,
                            6729,
                            6704,
                            6705,
                            6707,
                            6712,
                            6715
                        ],
                        "np.zeros": [
                            6720,
                            6705,
                            6727,
                            6721
                        ],
                        "height": [
                            6707,
                            6709,
                            6710
                        ],
                        "patch": [
                            6799,
                            6800,
                            6777,
                            6801,
                            6710,
                            6806,
                            6713,
                            6779,
                            6781
                        ],
                        "log": [
                            6732,
                            6711
                        ],
                        "patches.append": [
                            6713,
                            6770
                        ],
                        "y": [
                            6721,
                            6753,
                            6755,
                            6758,
                            6729,
                            6730,
                            6762,
                            6769,
                            6771,
                            6751
                        ],
                        "self.set_xscale": [
                            6734
                        ],
                        "self.set_yscale": [
                            6736
                        ],
                        "fill": [
                            6765,
                            6772,
                            6774,
                            6775,
                            6745
                        ],
                        "xvals": [
                            6761,
                            6747,
                            6769,
                            6758
                        ],
                        "yvals": [
                            6769,
                            6762,
                            6747,
                            6759
                        ],
                        "xvals.append": [
                            6761,
                            6758
                        ],
                        "y.copy": [
                            6762,
                            6758
                        ],
                        "yvals.append": [
                            6762,
                            6759
                        ],
                        "x.copy": [
                            6761,
                            6759
                        ],
                        "split": [
                            6771,
                            6765
                        ],
                        "reversed": [
                            6769
                        ],
                        "list": [
                            6769
                        ],
                        "self.fill": [
                            6770
                        ],
                        "patch_list": [
                            6776,
                            6777
                        ],
                        "patch.sticky_edges.y.append": [
                            6779
                        ],
                        "patch.sticky_edges.y": [
                            6779
                        ],
                        "patch.sticky_edges": [
                            6779,
                            6781
                        ],
                        "patch.sticky_edges.x.append": [
                            6781
                        ],
                        "patch.sticky_edges.x": [
                            6781
                        ],
                        "patches.reverse": [
                            6784
                        ],
                        "self._request_autoscale_view": [
                            6788
                        ],
                        "label": [
                            6790,
                            6792,
                            6793,
                            6794,
                            6795,
                            6797
                        ],
                        "labels": [
                            6791,
                            6793,
                            6795,
                            6797,
                            6799
                        ],
                        "str": [
                            6792,
                            6795,
                            6797
                        ],
                        "np.iterable": [
                            6794
                        ],
                        "lab": [
                            6797
                        ],
                        "lbl": [
                            6803,
                            6804,
                            6799
                        ],
                        "itertools.zip_longest": [
                            6799
                        ],
                        "itertools": [
                            6799
                        ],
                        "p": [
                            6801,
                            6802,
                            6804,
                            6806,
                            6807,
                            6808
                        ],
                        "p.update": [
                            6802,
                            6807
                        ],
                        "p.set_label": [
                            6808,
                            6804
                        ],
                        "cbook.silent_list": [
                            6811,
                            6813
                        ],
                        "_preprocess_data": [
                            6338
                        ]
                    },
                    "filtered_variables": {
                        "bin_range": [
                            6629,
                            6631,
                            6605,
                            6573,
                            6574,
                            6543,
                            6617
                        ],
                        "np.isscalar": [
                            6546
                        ],
                        "np": [
                            6657,
                            6794,
                            6673,
                            6546,
                            6676,
                            6563,
                            6705,
                            6720,
                            6721,
                            6727,
                            6606,
                            6607,
                            6612,
                            6613,
                            6616,
                            6624,
                            6628,
                            6643,
                            6645,
                            6651
                        ],
                        "x": [
                            6546,
                            6547,
                            6563,
                            6565,
                            6566,
                            6570,
                            6571,
                            6585,
                            6720,
                            6723,
                            6724,
                            6608,
                            6739,
                            6741,
                            6622,
                            6628,
                            6759,
                            6761,
                            6769,
                            6643,
                            6771
                        ],
                        "bins": [
                            6657,
                            6673,
                            6549,
                            6550,
                            6811,
                            6813,
                            6710,
                            6720,
                            6721,
                            6723,
                            6724,
                            6727,
                            6729,
                            6730,
                            6739,
                            6741,
                            6753,
                            6755,
                            6628,
                            6629,
                            6765,
                            6643,
                            6651
                        ],
                        "rcParams": [
                            6550,
                            6678
                        ],
                        "cbook._check_in_list": [
                            6553,
                            6555,
                            6556
                        ],
                        "cbook": [
                            6565,
                            6578,
                            6811,
                            6553,
                            6555,
                            6556,
                            6813
                        ],
                        "histtype": [
                            6559,
                            6671,
                            6745,
                            6554,
                            6683,
                            6718,
                            6687
                        ],
                        "align": [
                            6691,
                            6693,
                            6738,
                            6740,
                            6555
                        ],
                        "orientation": [
                            6757,
                            6696,
                            6733,
                            6778,
                            6780,
                            6557
                        ],
                        "stacked": [
                            6560,
                            6634,
                            6687,
                            6706,
                            6678,
                            6646,
                            6714,
                            6683,
                            6749,
                            6559
                        ],
                        "input_empty": [
                            6563,
                            6622
                        ],
                        "np.size": [
                            6563
                        ],
                        "cbook._reshape_2D": [
                            6578,
                            6565
                        ],
                        "nx": [
                            6594,
                            6597,
                            6566,
                            6640,
                            6580,
                            6582,
                            6810,
                            6684,
                            6686,
                            6591
                        ],
                        "self._process_unit_info": [
                            6570
                        ],
                        "self": [
                            6786,
                            6787,
                            6788,
                            6697,
                            6570,
                            6571,
                            6666,
                            6667,
                            6574,
                            6668,
                            6669,
                            6700,
                            6734,
                            6736,
                            6770,
                            6591
                        ],
                        "kwargs": [
                            6807,
                            6570,
                            6802
                        ],
                        "self.convert_xunits": [
                            6571,
                            6574
                        ],
                        "xi": [
                            6571,
                            6608,
                            6609,
                            6612,
                            6613,
                            6585,
                            6586
                        ],
                        "weights": [
                            6577,
                            6578,
                            6623
                        ],
                        "w": [
                            6624,
                            6578,
                            6643,
                            6580,
                            6582,
                            6585
                        ],
                        "wi": [
                            6585,
                            6586
                        ],
                        "color": [
                            6593,
                            6594,
                            6597,
                            6703,
                            6769,
                            6590,
                            6591
                        ],
                        "self._get_lines.get_next_color": [
                            6591
                        ],
                        "self._get_lines": [
                            6591
                        ],
                        "i": [
                            6640,
                            6643,
                            6591
                        ],
                        "mcolors.to_rgba_array": [
                            6593
                        ],
                        "mcolors": [
                            6593
                        ],
                        "error_message": [
                            6595,
                            6598
                        ],
                        "hist_kwargs": [
                            6600,
                            6643,
                            6635,
                            6631
                        ],
                        "xmin": [
                            6616,
                            6617,
                            6612,
                            6606
                        ],
                        "np.inf": [
                            6606,
                            6607
                        ],
                        "xmax": [
                            6616,
                            6617,
                            6613,
                            6607
                        ],
                        "np.nanmin": [
                            6612
                        ],
                        "np.nanmax": [
                            6613
                        ],
                        "np.isnan": [
                            6616
                        ],
                        "_w": [
                            6624,
                            6626,
                            6629
                        ],
                        "np.concatenate": [
                            6624,
                            6628
                        ],
                        "histogram_bin_edges": [
                            6628
                        ],
                        "density": [
                            6656,
                            6633,
                            6634,
                            6635,
                            6650
                        ],
                        "tops": [
                            6657,
                            6659,
                            6638,
                            6703,
                            6811,
                            6644,
                            6645,
                            6677,
                            6647,
                            6651,
                            6748,
                            6813
                        ],
                        "m": [
                            6755,
                            6756,
                            6703,
                            6705,
                            6643,
                            6644,
                            6707,
                            6709,
                            6715,
                            6748
                        ],
                        "np.histogram": [
                            6643
                        ],
                        "tops.append": [
                            6644
                        ],
                        "np.array": [
                            6645
                        ],
                        "tops.cumsum": [
                            6647
                        ],
                        "np.diff": [
                            6657,
                            6651,
                            6673
                        ],
                        "cumulative": [
                            6652,
                            6654
                        ],
                        "slc": [
                            6657,
                            6659,
                            6653,
                            6655
                        ],
                        "Number": [
                            6654
                        ],
                        "cumsum": [
                            6657,
                            6659
                        ],
                        "patches": [
                            6784,
                            6661,
                            6799,
                            6770,
                            6776,
                            6713,
                            6811,
                            6813
                        ],
                        "_saved_autoscalex": [
                            6666,
                            6786
                        ],
                        "self.get_autoscalex_on": [
                            6666
                        ],
                        "_saved_autoscaley": [
                            6667,
                            6787
                        ],
                        "self.get_autoscaley_on": [
                            6667
                        ],
                        "self.set_autoscalex_on": [
                            6786,
                            6668
                        ],
                        "self.set_autoscaley_on": [
                            6787,
                            6669
                        ],
                        "histtype.startswith": [
                            6718,
                            6671
                        ],
                        "totwidth": [
                            6688,
                            6692,
                            6694,
                            6673,
                            6684,
                            6686
                        ],
                        "rwidth": [
                            6675,
                            6676
                        ],
                        "dr": [
                            6688,
                            6676,
                            6679,
                            6681,
                            6684,
                            6686
                        ],
                        "np.clip": [
                            6676
                        ],
                        "width": [
                            6688,
                            6684,
                            6685,
                            6710
                        ],
                        "dw": [
                            6689,
                            6716,
                            6685
                        ],
                        "boffset": [
                            6689,
                            6692,
                            6694,
                            6710,
                            6716,
                            6686
                        ],
                        "_barfunc": [
                            6697,
                            6700,
                            6710
                        ],
                        "self.barh": [
                            6697
                        ],
                        "bottom_kwarg": [
                            6712,
                            6698,
                            6701
                        ],
                        "self.bar": [
                            6700
                        ],
                        "c": [
                            6703,
                            6769,
                            6773,
                            6774,
                            6712
                        ],
                        "bottom": [
                            6755,
                            6756,
                            6726,
                            6727,
                            6729,
                            6704,
                            6705,
                            6707,
                            6712,
                            6715
                        ],
                        "np.zeros": [
                            6720,
                            6705,
                            6727,
                            6721
                        ],
                        "height": [
                            6707,
                            6709,
                            6710
                        ],
                        "patch": [
                            6799,
                            6800,
                            6777,
                            6801,
                            6710,
                            6806,
                            6713,
                            6779,
                            6781
                        ],
                        "log": [
                            6732,
                            6711
                        ],
                        "patches.append": [
                            6713,
                            6770
                        ],
                        "y": [
                            6721,
                            6753,
                            6755,
                            6758,
                            6729,
                            6730,
                            6762,
                            6769,
                            6771,
                            6751
                        ],
                        "self.set_xscale": [
                            6734
                        ],
                        "self.set_yscale": [
                            6736
                        ],
                        "fill": [
                            6765,
                            6772,
                            6774,
                            6775,
                            6745
                        ],
                        "xvals": [
                            6761,
                            6747,
                            6769,
                            6758
                        ],
                        "yvals": [
                            6769,
                            6762,
                            6747,
                            6759
                        ],
                        "xvals.append": [
                            6761,
                            6758
                        ],
                        "y.copy": [
                            6762,
                            6758
                        ],
                        "yvals.append": [
                            6762,
                            6759
                        ],
                        "x.copy": [
                            6761,
                            6759
                        ],
                        "split": [
                            6771,
                            6765
                        ],
                        "self.fill": [
                            6770
                        ],
                        "patch_list": [
                            6776,
                            6777
                        ],
                        "patch.sticky_edges.y.append": [
                            6779
                        ],
                        "patch.sticky_edges.y": [
                            6779
                        ],
                        "patch.sticky_edges": [
                            6779,
                            6781
                        ],
                        "patch.sticky_edges.x.append": [
                            6781
                        ],
                        "patch.sticky_edges.x": [
                            6781
                        ],
                        "patches.reverse": [
                            6784
                        ],
                        "self._request_autoscale_view": [
                            6788
                        ],
                        "label": [
                            6790,
                            6792,
                            6793,
                            6794,
                            6795,
                            6797
                        ],
                        "labels": [
                            6791,
                            6793,
                            6795,
                            6797,
                            6799
                        ],
                        "np.iterable": [
                            6794
                        ],
                        "lab": [
                            6797
                        ],
                        "lbl": [
                            6803,
                            6804,
                            6799
                        ],
                        "itertools.zip_longest": [
                            6799
                        ],
                        "itertools": [
                            6799
                        ],
                        "p": [
                            6801,
                            6802,
                            6804,
                            6806,
                            6807,
                            6808
                        ],
                        "p.update": [
                            6802,
                            6807
                        ],
                        "p.set_label": [
                            6808,
                            6804
                        ],
                        "cbook.silent_list": [
                            6811,
                            6813
                        ],
                        "_preprocess_data": [
                            6338
                        ]
                    },
                    "diff_line_number": 6575,
                    "class_data": {
                        "signature": "class Axes(_AxesBase)",
                        "docstring": "The `Axes` contains most of the figure elements: `~.axis.Axis`,\n`~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\nand sets the coordinate system.\n\nThe `Axes` instance supports callbacks through a callbacks attribute which\nis a `~.cbook.CallbackRegistry` instance.  The events you can connect to\nare 'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(*ax*) where *ax* is the `Axes` instance.\n\nAttributes\n----------\ndataLim : `.Bbox`\n    The bounding box enclosing all data displayed in the Axes.\nviewLim : `.Bbox`\n    The view limits in data coordinates.",
                        "constructor_docstring": null,
                        "functions": [
                            "@cbook.deprecated('3.1')\n@property\ndef aname(self):\n    return 'Axes'",
                            "def get_title(self, loc='center'):\n    \"\"\"\n    Get an axes title.\n\n    Get one of the three available axes titles. The available titles\n    are positioned above the axes in the center, flush with the left\n    edge, and flush with the right edge.\n\n    Parameters\n    ----------\n    loc : {'center', 'left', 'right'}, str, optional\n        Which title to get, defaults to 'center'.\n\n    Returns\n    -------\n    title : str\n        The title text string.\n\n    \"\"\"\n    titles = {'left': self._left_title, 'center': self.title, 'right': self._right_title}\n    title = cbook._check_getitem(titles, loc=loc.lower())\n    return title.get_text()",
                            "def set_title(self, label, fontdict=None, loc=None, pad=None, **kwargs):\n    \"\"\"\n    Set a title for the axes.\n\n    Set one of the three available axes titles. The available titles\n    are positioned above the axes in the center, flush with the left\n    edge, and flush with the right edge.\n\n    Parameters\n    ----------\n    label : str\n        Text to use for the title\n\n    fontdict : dict\n        A dictionary controlling the appearance of the title text,\n        the default *fontdict* is::\n\n           {'fontsize': rcParams['axes.titlesize'],\n            'fontweight' : rcParams['axes.titleweight'],\n            'color' : rcParams['axes.titlecolor'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    loc : {'center', 'left', 'right'}, str, optional\n        Which title to set.\n        If *None*, defaults to :rc:`axes.titlelocation`.\n\n    pad : float\n        The offset of the title from the top of the axes, in points.\n        If *None*, defaults to :rc:`axes.titlepad`.\n\n    Returns\n    -------\n    text : :class:`~matplotlib.text.Text`\n        The matplotlib text instance representing the title\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.text.Text` properties\n        Other keyword arguments are text properties, see\n        :class:`~matplotlib.text.Text` for a list of valid text\n        properties.\n    \"\"\"\n    if loc is None:\n        loc = rcParams['axes.titlelocation']\n    titles = {'left': self._left_title, 'center': self.title, 'right': self._right_title}\n    title = cbook._check_getitem(titles, loc=loc.lower())\n    default = {'fontsize': rcParams['axes.titlesize'], 'fontweight': rcParams['axes.titleweight'], 'verticalalignment': 'baseline', 'horizontalalignment': loc.lower()}\n    titlecolor = rcParams['axes.titlecolor']\n    if not cbook._str_lower_equal(titlecolor, 'auto'):\n        default['color'] = titlecolor\n    if pad is None:\n        pad = rcParams['axes.titlepad']\n    self._set_title_offset_trans(float(pad))\n    title.set_text(label)\n    title.update(default)\n    if fontdict is not None:\n        title.update(fontdict)\n    title.update(kwargs)\n    return title",
                            "def get_xlabel(self):\n    \"\"\"\n    Get the xlabel text string.\n    \"\"\"\n    label = self.xaxis.get_label()\n    return label.get_text()",
                            "def set_xlabel(self, xlabel, fontdict=None, labelpad=None, **kwargs):\n    \"\"\"\n    Set the label for the x-axis.\n\n    Parameters\n    ----------\n    xlabel : str\n        The label text.\n\n    labelpad : scalar, optional, default: None\n        Spacing in points from the axes bounding box including ticks\n        and tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs : `.Text` properties\n        `.Text` properties control the appearance of the label.\n\n    See also\n    --------\n    text : for information on how override and the optional args work\n    \"\"\"\n    if labelpad is not None:\n        self.xaxis.labelpad = labelpad\n    return self.xaxis.set_label_text(xlabel, fontdict, **kwargs)",
                            "def get_ylabel(self):\n    \"\"\"\n    Get the ylabel text string.\n    \"\"\"\n    label = self.yaxis.get_label()\n    return label.get_text()",
                            "def set_ylabel(self, ylabel, fontdict=None, labelpad=None, **kwargs):\n    \"\"\"\n    Set the label for the y-axis.\n\n    Parameters\n    ----------\n    ylabel : str\n        The label text.\n\n    labelpad : scalar, optional, default: None\n        Spacing in points from the axes bounding box including ticks\n        and tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs : `.Text` properties\n        `.Text` properties control the appearance of the label.\n\n    See also\n    --------\n    text : for information on how override and the optional args work\n\n    \"\"\"\n    if labelpad is not None:\n        self.yaxis.labelpad = labelpad\n    return self.yaxis.set_label_text(ylabel, fontdict, **kwargs)",
                            "def get_legend_handles_labels(self, legend_handler_map=None):\n    \"\"\"\n    Return handles and labels for legend\n\n    ``ax.legend()`` is equivalent to ::\n\n      h, l = ax.get_legend_handles_labels()\n      ax.legend(h, l)\n\n    \"\"\"\n    (handles, labels) = mlegend._get_legend_handles_labels([self], legend_handler_map)\n    return (handles, labels)",
                            "@docstring.dedent_interpd\ndef legend(self, *args, **kwargs):\n    \"\"\"\n    Place a legend on the axes.\n\n    Call signatures::\n\n        legend()\n        legend(labels)\n        legend(handles, labels)\n\n    The call signatures correspond to three different ways how to use\n    this method.\n\n    **1. Automatic detection of elements to be shown in the legend**\n\n    The elements to be added to the legend are automatically determined,\n    when you do not pass in any extra arguments.\n\n    In this case, the labels are taken from the artist. You can specify\n    them either at artist creation or by calling the\n    :meth:`~.Artist.set_label` method on the artist::\n\n        line, = ax.plot([1, 2, 3], label='Inline label')\n        ax.legend()\n\n    or::\n\n        line, = ax.plot([1, 2, 3])\n        line.set_label('Label via method')\n        ax.legend()\n\n    Specific lines can be excluded from the automatic legend element\n    selection by defining a label starting with an underscore.\n    This is default for all artists, so calling `Axes.legend` without\n    any arguments and without setting the labels manually will result in\n    no legend being drawn.\n\n\n    **2. Labeling existing plot elements**\n\n    To make a legend for lines which already exist on the axes\n    (via plot for instance), simply call this function with an iterable\n    of strings, one for each legend item. For example::\n\n        ax.plot([1, 2, 3])\n        ax.legend(['A simple line'])\n\n    Note: This way of using is discouraged, because the relation between\n    plot elements and labels is only implicit by their order and can\n    easily be mixed up.\n\n\n    **3. Explicitly defining the elements in the legend**\n\n    For full control of which artists have a legend entry, it is possible\n    to pass an iterable of legend artists followed by an iterable of\n    legend labels respectively::\n\n        legend((line1, line2, line3), ('label1', 'label2', 'label3'))\n\n    Parameters\n    ----------\n    handles : sequence of `.Artist`, optional\n        A list of Artists (lines, patches) to be added to the legend.\n        Use this together with *labels*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n        The length of handles and labels should be the same in this\n        case. If they are not, they are truncated to the smaller length.\n\n    labels : list of str, optional\n        A list of labels to show next to the artists.\n        Use this together with *handles*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n    Other Parameters\n    ----------------\n    %(_legend_kw_doc)s\n\n    Returns\n    -------\n    legend : `~matplotlib.legend.Legend`\n\n    Notes\n    -----\n    Not all kinds of artist are supported by the legend command. See\n    :doc:`/tutorials/intermediate/legend_guide` for details.\n\n    Examples\n    --------\n    .. plot:: gallery/text_labels_and_annotations/legend.py\n    \"\"\"\n    (handles, labels, extra_args, kwargs) = mlegend._parse_legend_args([self], *args, **kwargs)\n    if len(extra_args):\n        raise TypeError('legend only accepts two non-keyword arguments')\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n    self.legend_._remove_method = self._remove_legend\n    return self.legend_",
                            "def _remove_legend(self, legend):\n    self.legend_ = None",
                            "def inset_axes(self, bounds, *, transform=None, zorder=5, **kwargs):\n    \"\"\"\n    Add a child inset axes to this existing axes.\n\n    Warnings\n    --------\n    This method is experimental as of 3.0, and the API may change.\n\n    Parameters\n    ----------\n    bounds : [x0, y0, width, height]\n        Lower-left corner of inset axes, and its width and height.\n\n    transform : `.Transform`\n        Defaults to `ax.transAxes`, i.e. the units of *rect* are in\n        axes-relative coordinates.\n\n    zorder : number\n        Defaults to 5 (same as `.Axes.legend`).  Adjust higher or lower\n        to change whether it is above or below data plotted on the\n        parent axes.\n\n    **kwargs\n        Other keyword arguments are passed on to the `.Axes` child axes.\n\n    Returns\n    -------\n    ax\n        The created `~.axes.Axes` instance.\n\n    Examples\n    --------\n    This example makes two inset axes, the first is in axes-relative\n    coordinates, and the second in data-coordinates::\n\n        fig, ax = plt.subplots()\n        ax.plot(range(10))\n        axin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\n        axin2 = ax.inset_axes(\n                [5, 7, 2.3, 2.3], transform=ax.transData)\n\n    \"\"\"\n    if transform is None:\n        transform = self.transAxes\n    label = kwargs.pop('label', 'inset_axes')\n    inset_locator = _make_inset_locator(bounds, transform, self)\n    bb = inset_locator(None, None)\n    inset_ax = Axes(self.figure, bb.bounds, zorder=zorder, label=label, **kwargs)\n    inset_ax.set_axes_locator(inset_locator)\n    self.add_child_axes(inset_ax)\n    return inset_ax",
                            "def indicate_inset(self, bounds, inset_ax=None, *, transform=None, facecolor='none', edgecolor='0.5', alpha=0.5, zorder=4.99, **kwargs):\n    \"\"\"\n    Add an inset indicator to the axes.  This is a rectangle on the plot\n    at the position indicated by *bounds* that optionally has lines that\n    connect the rectangle to an inset axes (`.Axes.inset_axes`).\n\n    Warnings\n    --------\n    This method is experimental as of 3.0, and the API may change.\n\n\n    Parameters\n    ----------\n    bounds : [x0, y0, width, height]\n        Lower-left corner of rectangle to be marked, and its width\n        and height.\n\n    inset_ax : `.Axes`\n        An optional inset axes to draw connecting lines to.  Two lines are\n        drawn connecting the indicator box to the inset axes on corners\n        chosen so as to not overlap with the indicator box.\n\n    transform : `.Transform`\n        Transform for the rectangle co-ordinates. Defaults to\n        `ax.transAxes`, i.e. the units of *rect* are in axes-relative\n        coordinates.\n\n    facecolor : Matplotlib color\n        Facecolor of the rectangle (default 'none').\n\n    edgecolor : Matplotlib color\n        Color of the rectangle and color of the connecting lines.  Default\n        is '0.5'.\n\n    alpha : float\n        Transparency of the rectangle and connector lines.  Default is 0.5.\n\n    zorder : float\n        Drawing order of the rectangle and connector lines. Default is 4.99\n        (just below the default level of inset axes).\n\n    **kwargs\n        Other keyword arguments are passed on to the rectangle patch.\n\n    Returns\n    -------\n    rectangle_patch : `.patches.Rectangle`\n         The indicator frame.\n\n    connector_lines : 4-tuple of `.patches.ConnectionPatch`\n        The four connector lines connecting to (lower_left, upper_left,\n        lower_right upper_right) corners of *inset_ax*. Two lines are\n        set with visibility to *False*,  but the user can set the\n        visibility to True if the automatic choice is not deemed correct.\n\n    \"\"\"\n    self.apply_aspect()\n    if transform is None:\n        transform = self.transData\n    label = kwargs.pop('label', 'indicate_inset')\n    (x, y, width, height) = bounds\n    rectangle_patch = mpatches.Rectangle((x, y), width, height, facecolor=facecolor, edgecolor=edgecolor, alpha=alpha, zorder=zorder, label=label, transform=transform, **kwargs)\n    self.add_patch(rectangle_patch)\n    connects = []\n    if inset_ax is not None:\n        for xy_inset_ax in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n            (ex, ey) = xy_inset_ax\n            if self.xaxis.get_inverted():\n                ex = 1 - ex\n            if self.yaxis.get_inverted():\n                ey = 1 - ey\n            xy_data = (x + ex * width, y + ey * height)\n            p = mpatches.ConnectionPatch(xyA=xy_inset_ax, coordsA=inset_ax.transAxes, xyB=xy_data, coordsB=self.transData, arrowstyle='-', zorder=zorder, edgecolor=edgecolor, alpha=alpha)\n            connects.append(p)\n            self.add_patch(p)\n        pos = inset_ax.get_position()\n        bboxins = pos.transformed(self.figure.transFigure)\n        rectbbox = mtransforms.Bbox.from_bounds(*bounds).transformed(transform)\n        x0 = rectbbox.x0 < bboxins.x0\n        x1 = rectbbox.x1 < bboxins.x1\n        y0 = rectbbox.y0 < bboxins.y0\n        y1 = rectbbox.y1 < bboxins.y1\n        connects[0].set_visible(x0 ^ y0)\n        connects[1].set_visible(x0 == y1)\n        connects[2].set_visible(x1 == y0)\n        connects[3].set_visible(x1 ^ y1)\n    return (rectangle_patch, tuple(connects) if connects else None)",
                            "def indicate_inset_zoom(self, inset_ax, **kwargs):\n    \"\"\"\n    Add an inset indicator rectangle to the axes based on the axis\n    limits for an *inset_ax* and draw connectors between *inset_ax*\n    and the rectangle.\n\n    Warnings\n    --------\n    This method is experimental as of 3.0, and the API may change.\n\n    Parameters\n    ----------\n    inset_ax : `.Axes`\n        Inset axes to draw connecting lines to.  Two lines are\n        drawn connecting the indicator box to the inset axes on corners\n        chosen so as to not overlap with the indicator box.\n\n    **kwargs\n        Other keyword arguments are passed on to `.Axes.indicate_inset`\n\n    Returns\n    -------\n    rectangle_patch : `.Patches.Rectangle`\n         Rectangle artist.\n\n    connector_lines : 4-tuple of `.Patches.ConnectionPatch`\n        Each of four connector lines coming from the rectangle drawn on\n        this axis, in the order lower left, upper left, lower right,\n        upper right.\n        Two are set with visibility to *False*,  but the user can\n        set the visibility to *True* if the automatic choice is not deemed\n        correct.\n    \"\"\"\n    xlim = inset_ax.get_xlim()\n    ylim = inset_ax.get_ylim()\n    rect = (xlim[0], ylim[0], xlim[1] - xlim[0], ylim[1] - ylim[0])\n    return self.indicate_inset(rect, inset_ax, **kwargs)",
                            "@docstring.dedent_interpd\ndef secondary_xaxis(self, location, *, functions=None, **kwargs):\n    \"\"\"\n    Add a second x-axis to this axes.\n\n    For example if we want to have a second scale for the data plotted on\n    the xaxis.\n\n    %(_secax_docstring)s\n\n    Examples\n    --------\n    The main axis shows frequency, and the secondary axis shows period.\n\n    .. plot::\n\n        fig, ax = plt.subplots()\n        ax.loglog(range(1, 360, 5), range(1, 360, 5))\n        ax.set_xlabel('frequency [Hz]')\n\n        def invert(x):\n            return 1 / x\n\n        secax = ax.secondary_xaxis('top', functions=(invert, invert))\n        secax.set_xlabel('Period [s]')\n        plt.show()\n    \"\"\"\n    if location in ['top', 'bottom'] or isinstance(location, Number):\n        secondary_ax = SecondaryAxis(self, 'x', location, functions, **kwargs)\n        self.add_child_axes(secondary_ax)\n        return secondary_ax\n    else:\n        raise ValueError('secondary_xaxis location must be either a float or \"top\"/\"bottom\"')",
                            "def secondary_yaxis(self, location, *, functions=None, **kwargs):\n    \"\"\"\n    Add a second y-axis to this axes.\n\n    For example if we want to have a second scale for the data plotted on\n    the yaxis.\n\n    %(_secax_docstring)s\n\n    Examples\n    --------\n    Add a secondary axes that converts from radians to degrees\n\n    .. plot::\n\n        fig, ax = plt.subplots()\n        ax.plot(range(1, 360, 5), range(1, 360, 5))\n        ax.set_ylabel('degrees')\n        secax = ax.secondary_yaxis('right', functions=(np.deg2rad,\n                                                       np.rad2deg))\n        secax.set_ylabel('radians')\n    \"\"\"\n    if location in ['left', 'right'] or isinstance(location, Number):\n        secondary_ax = SecondaryAxis(self, 'y', location, functions, **kwargs)\n        self.add_child_axes(secondary_ax)\n        return secondary_ax\n    else:\n        raise ValueError('secondary_yaxis location must be either a float or \"left\"/\"right\"')",
                            "@cbook._delete_parameter('3.1', 'withdash')\ndef text(self, x, y, s, fontdict=None, withdash=False, **kwargs):\n    \"\"\"\n    Add text to the axes.\n\n    Add the text *s* to the axes at location *x*, *y* in data coordinates.\n\n    Parameters\n    ----------\n    x, y : scalars\n        The position to place the text. By default, this is in data\n        coordinates. The coordinate system can be changed using the\n        *transform* parameter.\n\n    s : str\n        The text.\n\n    fontdict : dictionary, optional, default: None\n        A dictionary to override the default text properties. If fontdict\n        is None, the defaults are determined by your rc parameters.\n\n    withdash : boolean, optional, default: False\n        Creates a `~matplotlib.text.TextWithDash` instance instead of a\n        `~matplotlib.text.Text` instance.\n\n    Returns\n    -------\n    text : `.Text`\n        The created `.Text` instance.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.text.Text` properties.\n        Other miscellaneous text parameters.\n\n    Examples\n    --------\n    Individual keyword arguments can be used to override any given\n    parameter::\n\n        >>> text(x, y, s, fontsize=12)\n\n    The default transform specifies that text is in data coords,\n    alternatively, you can specify text in axis coords ((0, 0) is\n    lower-left and (1, 1) is upper-right).  The example below places\n    text in the center of the axes::\n\n        >>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',\n        ...      verticalalignment='center', transform=ax.transAxes)\n\n    You can put a rectangular box around the text instance (e.g., to\n    set a background color) by using the keyword *bbox*.  *bbox* is\n    a dictionary of `~matplotlib.patches.Rectangle`\n    properties.  For example::\n\n        >>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))\n    \"\"\"\n    if fontdict is None:\n        fontdict = {}\n    effective_kwargs = {'verticalalignment': 'baseline', 'horizontalalignment': 'left', 'transform': self.transData, 'clip_on': False, **fontdict, **kwargs}\n    if withdash and withdash is not cbook.deprecation._deprecated_parameter:\n        t = mtext.TextWithDash(x, y, text=s)\n    else:\n        t = mtext.Text(x, y, text=s)\n    t.update(effective_kwargs)\n    t.set_clip_path(self.patch)\n    self._add_text(t)\n    return t",
                            "@docstring.dedent_interpd\ndef annotate(self, s, xy, *args, **kwargs):\n    a = mtext.Annotation(s, xy, *args, **kwargs)\n    a.set_transform(mtransforms.IdentityTransform())\n    if 'clip_on' in kwargs:\n        a.set_clip_path(self.patch)\n    self._add_text(a)\n    return a",
                            "@docstring.dedent_interpd\ndef axhline(self, y=0, xmin=0, xmax=1, **kwargs):\n    \"\"\"\n    Add a horizontal line across the axis.\n\n    Parameters\n    ----------\n    y : scalar, optional, default: 0\n        y position in data coordinates of the horizontal line.\n\n    xmin : scalar, optional, default: 0\n        Should be between 0 and 1, 0 being the far left of the plot, 1 the\n        far right of the plot.\n\n    xmax : scalar, optional, default: 1\n        Should be between 0 and 1, 0 being the far left of the plot, 1 the\n        far right of the plot.\n\n    Returns\n    -------\n    line : `~matplotlib.lines.Line2D`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Valid keyword arguments are `.Line2D` properties, with the\n        exception of 'transform':\n\n        %(_Line2D_docstr)s\n\n    See also\n    --------\n    hlines : Add horizontal lines in data coordinates.\n    axhspan : Add a horizontal span (rectangle) across the axis.\n\n    Examples\n    --------\n    * draw a thick red hline at 'y' = 0 that spans the xrange::\n\n        >>> axhline(linewidth=4, color='r')\n\n    * draw a default hline at 'y' = 1 that spans the xrange::\n\n        >>> axhline(y=1)\n\n    * draw a default hline at 'y' = .5 that spans the middle half of\n      the xrange::\n\n        >>> axhline(y=.5, xmin=0.25, xmax=0.75)\n    \"\"\"\n    if 'transform' in kwargs:\n        raise ValueError(\"'transform' is not allowed as a kwarg;\" + 'axhline generates its own transform.')\n    (ymin, ymax) = self.get_ybound()\n    self._process_unit_info(ydata=y, kwargs=kwargs)\n    yy = self.convert_yunits(y)\n    scaley = yy < ymin or yy > ymax\n    trans = self.get_yaxis_transform(which='grid')\n    l = mlines.Line2D([xmin, xmax], [y, y], transform=trans, **kwargs)\n    self.add_line(l)\n    self._request_autoscale_view(scalex=False, scaley=scaley)\n    return l",
                            "@docstring.dedent_interpd\ndef axvline(self, x=0, ymin=0, ymax=1, **kwargs):\n    \"\"\"\n    Add a vertical line across the axes.\n\n    Parameters\n    ----------\n    x : scalar, optional, default: 0\n        x position in data coordinates of the vertical line.\n\n    ymin : scalar, optional, default: 0\n        Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n        top of the plot.\n\n    ymax : scalar, optional, default: 1\n        Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n        top of the plot.\n\n    Returns\n    -------\n    line : `~matplotlib.lines.Line2D`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Valid keyword arguments are `.Line2D` properties, with the\n        exception of 'transform':\n\n        %(_Line2D_docstr)s\n\n    Examples\n    --------\n    * draw a thick red vline at *x* = 0 that spans the yrange::\n\n        >>> axvline(linewidth=4, color='r')\n\n    * draw a default vline at *x* = 1 that spans the yrange::\n\n        >>> axvline(x=1)\n\n    * draw a default vline at *x* = .5 that spans the middle half of\n      the yrange::\n\n        >>> axvline(x=.5, ymin=0.25, ymax=0.75)\n\n    See also\n    --------\n    vlines : Add vertical lines in data coordinates.\n    axvspan : Add a vertical span (rectangle) across the axis.\n    \"\"\"\n    if 'transform' in kwargs:\n        raise ValueError(\"'transform' is not allowed as a kwarg;\" + 'axvline generates its own transform.')\n    (xmin, xmax) = self.get_xbound()\n    self._process_unit_info(xdata=x, kwargs=kwargs)\n    xx = self.convert_xunits(x)\n    scalex = xx < xmin or xx > xmax\n    trans = self.get_xaxis_transform(which='grid')\n    l = mlines.Line2D([x, x], [ymin, ymax], transform=trans, **kwargs)\n    self.add_line(l)\n    self._request_autoscale_view(scalex=scalex, scaley=False)\n    return l",
                            "@docstring.dedent_interpd\ndef axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs):\n    \"\"\"\n    Add a horizontal span (rectangle) across the axis.\n\n    Draw a horizontal span (rectangle) from *ymin* to *ymax*.\n    With the default values of *xmin* = 0 and *xmax* = 1, this\n    always spans the xrange, regardless of the xlim settings, even\n    if you change them, e.g., with the :meth:`set_xlim` command.\n    That is, the horizontal extent is in axes coords: 0=left,\n    0.5=middle, 1.0=right but the *y* location is in data\n    coordinates.\n\n    Parameters\n    ----------\n    ymin : float\n           Lower limit of the horizontal span in data units.\n    ymax : float\n           Upper limit of the horizontal span in data units.\n    xmin : float, optional, default: 0\n           Lower limit of the vertical span in axes (relative\n           0-1) units.\n    xmax : float, optional, default: 1\n           Upper limit of the vertical span in axes (relative\n           0-1) units.\n\n    Returns\n    -------\n    Polygon : `~matplotlib.patches.Polygon`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Polygon` properties.\n\n    %(Polygon)s\n\n    See Also\n    --------\n    axvspan : Add a vertical span across the axes.\n    \"\"\"\n    trans = self.get_yaxis_transform(which='grid')\n    self._process_unit_info([xmin, xmax], [ymin, ymax], kwargs=kwargs)\n    (xmin, xmax) = self.convert_xunits([xmin, xmax])\n    (ymin, ymax) = self.convert_yunits([ymin, ymax])\n    verts = ((xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin))\n    p = mpatches.Polygon(verts, **kwargs)\n    p.set_transform(trans)\n    self.add_patch(p)\n    self._request_autoscale_view(scalex=False)\n    return p",
                            "def axvspan(self, xmin, xmax, ymin=0, ymax=1, **kwargs):\n    \"\"\"\n    Add a vertical span (rectangle) across the axes.\n\n    Draw a vertical span (rectangle) from *xmin* to *xmax*.  With\n    the default values of *ymin* = 0 and *ymax* = 1. This always\n    spans the yrange, regardless of the ylim settings, even if you\n    change them, e.g., with the :meth:`set_ylim` command.  That is,\n    the vertical extent is in axes coords: 0=bottom, 0.5=middle,\n    1.0=top but the x location is in data coordinates.\n\n    Parameters\n    ----------\n    xmin : scalar\n        Number indicating the first X-axis coordinate of the vertical\n        span rectangle in data units.\n    xmax : scalar\n        Number indicating the second X-axis coordinate of the vertical\n        span rectangle in data units.\n    ymin : scalar, optional\n        Number indicating the first Y-axis coordinate of the vertical\n        span rectangle in relative Y-axis units (0-1). Default to 0.\n    ymax : scalar, optional\n        Number indicating the second Y-axis coordinate of the vertical\n        span rectangle in relative Y-axis units (0-1). Default to 1.\n\n    Returns\n    -------\n    rectangle : `~matplotlib.patches.Polygon`\n        Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Optional parameters are properties of the class `.Polygon`.\n\n    See Also\n    --------\n    axhspan : Add a horizontal span across the axes.\n\n    Examples\n    --------\n    Draw a vertical, green, translucent rectangle from x = 1.25 to\n    x = 1.55 that spans the yrange of the axes.\n\n    >>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)\n\n    \"\"\"\n    trans = self.get_xaxis_transform(which='grid')\n    self._process_unit_info([xmin, xmax], [ymin, ymax], kwargs=kwargs)\n    (xmin, xmax) = self.convert_xunits([xmin, xmax])\n    (ymin, ymax) = self.convert_yunits([ymin, ymax])\n    verts = [(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)]\n    p = mpatches.Polygon(verts, **kwargs)\n    p.set_transform(trans)\n    self.add_patch(p)\n    self._request_autoscale_view(scaley=False)\n    return p",
                            "@_preprocess_data(replace_names=['y', 'xmin', 'xmax', 'colors'], label_namer='y')\ndef hlines(self, y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs):\n    \"\"\"\n    Plot horizontal lines at each *y* from *xmin* to *xmax*.\n\n    Parameters\n    ----------\n    y : scalar or sequence of scalar\n        y-indexes where to plot the lines.\n\n    xmin, xmax : scalar or 1D array-like\n        Respective beginning and end of each line. If scalars are\n        provided, all lines will have same length.\n\n    colors : array-like of colors, optional, default: 'k'\n\n    linestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n    label : str, optional, default: ''\n\n    Returns\n    -------\n    lines : `~matplotlib.collections.LineCollection`\n\n    Other Parameters\n    ----------------\n    **kwargs :  `~matplotlib.collections.LineCollection` properties.\n\n    See also\n    --------\n    vlines : vertical lines\n    axhline: horizontal line across the axes\n    \"\"\"\n    self._process_unit_info([xmin, xmax], y, kwargs=kwargs)\n    y = self.convert_yunits(y)\n    xmin = self.convert_xunits(xmin)\n    xmax = self.convert_xunits(xmax)\n    if not np.iterable(y):\n        y = [y]\n    if not np.iterable(xmin):\n        xmin = [xmin]\n    if not np.iterable(xmax):\n        xmax = [xmax]\n    (y, xmin, xmax) = cbook.delete_masked_points(y, xmin, xmax)\n    y = np.ravel(y)\n    xmin = np.resize(xmin, y.shape)\n    xmax = np.resize(xmax, y.shape)\n    verts = [((thisxmin, thisy), (thisxmax, thisy)) for (thisxmin, thisxmax, thisy) in zip(xmin, xmax, y)]\n    lines = mcoll.LineCollection(verts, colors=colors, linestyles=linestyles, label=label)\n    self.add_collection(lines, autolim=False)\n    lines.update(kwargs)\n    if len(y) > 0:\n        minx = min(xmin.min(), xmax.min())\n        maxx = max(xmin.max(), xmax.max())\n        miny = y.min()\n        maxy = y.max()\n        corners = ((minx, miny), (maxx, maxy))\n        self.update_datalim(corners)\n        self._request_autoscale_view()\n    return lines",
                            "@_preprocess_data(replace_names=['x', 'ymin', 'ymax', 'colors'], label_namer='x')\ndef vlines(self, x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs):\n    \"\"\"\n    Plot vertical lines.\n\n    Plot vertical lines at each *x* from *ymin* to *ymax*.\n\n    Parameters\n    ----------\n    x : scalar or 1D array-like\n        x-indexes where to plot the lines.\n\n    ymin, ymax : scalar or 1D array-like\n        Respective beginning and end of each line. If scalars are\n        provided, all lines will have same length.\n\n    colors : array-like of colors, optional, default: 'k'\n\n    linestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n    label : str, optional, default: ''\n\n    Returns\n    -------\n    lines : `~matplotlib.collections.LineCollection`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.collections.LineCollection` properties.\n\n    See also\n    --------\n    hlines : horizontal lines\n    axvline: vertical line across the axes\n    \"\"\"\n    self._process_unit_info(xdata=x, ydata=[ymin, ymax], kwargs=kwargs)\n    x = self.convert_xunits(x)\n    ymin = self.convert_yunits(ymin)\n    ymax = self.convert_yunits(ymax)\n    if not np.iterable(x):\n        x = [x]\n    if not np.iterable(ymin):\n        ymin = [ymin]\n    if not np.iterable(ymax):\n        ymax = [ymax]\n    (x, ymin, ymax) = cbook.delete_masked_points(x, ymin, ymax)\n    x = np.ravel(x)\n    ymin = np.resize(ymin, x.shape)\n    ymax = np.resize(ymax, x.shape)\n    verts = [((thisx, thisymin), (thisx, thisymax)) for (thisx, thisymin, thisymax) in zip(x, ymin, ymax)]\n    lines = mcoll.LineCollection(verts, colors=colors, linestyles=linestyles, label=label)\n    self.add_collection(lines, autolim=False)\n    lines.update(kwargs)\n    if len(x) > 0:\n        minx = x.min()\n        maxx = x.max()\n        miny = min(ymin.min(), ymax.min())\n        maxy = max(ymin.max(), ymax.max())\n        corners = ((minx, miny), (maxx, maxy))\n        self.update_datalim(corners)\n        self._request_autoscale_view()\n    return lines",
                            "@_preprocess_data(replace_names=['positions', 'lineoffsets', 'linelengths', 'linewidths', 'colors', 'linestyles'])\n@docstring.dedent_interpd\ndef eventplot(self, positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', **kwargs):\n    \"\"\"\n    Plot identical parallel lines at the given positions.\n\n    *positions* should be a 1D or 2D array-like object, with each row\n    corresponding to a row or column of lines.\n\n    This type of plot is commonly used in neuroscience for representing\n    neural events, where it is usually called a spike raster, dot raster,\n    or raster plot.\n\n    However, it is useful in any situation where you wish to show the\n    timing or position of multiple sets of discrete events, such as the\n    arrival times of people to a business on each day of the month or the\n    date of hurricanes each year of the last century.\n\n    Parameters\n    ----------\n    positions : 1D or 2D array-like object\n        Each value is an event. If *positions* is a 2D array-like, each\n        row corresponds to a row or a column of lines (depending on the\n        *orientation* parameter).\n\n    orientation : {'horizontal', 'vertical'}, optional\n        Controls the direction of the event collections:\n\n            - 'horizontal' : the lines are arranged horizontally in rows,\n              and are vertical.\n            - 'vertical' : the lines are arranged vertically in columns,\n              and are horizontal.\n\n    lineoffsets : scalar or sequence of scalars, optional, default: 1\n        The offset of the center of the lines from the origin, in the\n        direction orthogonal to *orientation*.\n\n    linelengths : scalar or sequence of scalars, optional, default: 1\n        The total height of the lines (i.e. the lines stretches from\n        ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    linewidths : scalar, scalar sequence or None, optional, default: None\n        The line width(s) of the event lines, in points. If it is None,\n        defaults to its rcParams setting.\n\n    colors : color, sequence of colors or None, optional, default: None\n        The color(s) of the event lines. If it is None, defaults to its\n        rcParams setting.\n\n    linestyles : str or tuple or a sequence of such values, optional\n        Default is 'solid'. Valid strings are ['solid', 'dashed',\n        'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples\n        should be of the form::\n\n            (offset, onoffseq),\n\n        where *onoffseq* is an even length tuple of on and off ink\n        in points.\n\n    **kwargs : optional\n        Other keyword arguments are line collection properties.  See\n        :class:`~matplotlib.collections.LineCollection` for a list of\n        the valid properties.\n\n    Returns\n    -------\n    list : A list of :class:`~.collections.EventCollection` objects.\n        Contains the :class:`~.collections.EventCollection` that\n        were added.\n\n    Notes\n    -----\n    For *linelengths*, *linewidths*, *colors*, and *linestyles*, if only\n    a single value is given, that value is applied to all lines.  If an\n    array-like is given, it must have the same length as *positions*, and\n    each value will be applied to the corresponding row of the array.\n\n    Examples\n    --------\n    .. plot:: gallery/lines_bars_and_markers/eventplot_demo.py\n    \"\"\"\n    self._process_unit_info(xdata=positions, ydata=[lineoffsets, linelengths], kwargs=kwargs)\n    positions = self.convert_xunits(positions)\n    lineoffsets = self.convert_yunits(lineoffsets)\n    linelengths = self.convert_yunits(linelengths)\n    if not np.iterable(positions):\n        positions = [positions]\n    elif any((np.iterable(position) for position in positions)):\n        positions = [np.asanyarray(position) for position in positions]\n    else:\n        positions = [np.asanyarray(positions)]\n    if len(positions) == 0:\n        return []\n    colors = cbook.local_over_kwdict(colors, kwargs, 'color')\n    linewidths = cbook.local_over_kwdict(linewidths, kwargs, 'linewidth')\n    linestyles = cbook.local_over_kwdict(linestyles, kwargs, 'linestyle')\n    if not np.iterable(lineoffsets):\n        lineoffsets = [lineoffsets]\n    if not np.iterable(linelengths):\n        linelengths = [linelengths]\n    if not np.iterable(linewidths):\n        linewidths = [linewidths]\n    if not np.iterable(colors):\n        colors = [colors]\n    if hasattr(linestyles, 'lower') or not np.iterable(linestyles):\n        linestyles = [linestyles]\n    lineoffsets = np.asarray(lineoffsets)\n    linelengths = np.asarray(linelengths)\n    linewidths = np.asarray(linewidths)\n    if len(lineoffsets) == 0:\n        lineoffsets = [None]\n    if len(linelengths) == 0:\n        linelengths = [None]\n    if len(linewidths) == 0:\n        lineoffsets = [None]\n    if len(linewidths) == 0:\n        lineoffsets = [None]\n    if len(colors) == 0:\n        colors = [None]\n    try:\n        colors = mcolors.to_rgba_array(colors)\n    except ValueError:\n        pass\n    if len(lineoffsets) == 1 and len(positions) != 1:\n        lineoffsets = np.tile(lineoffsets, len(positions))\n        lineoffsets[0] = 0\n        lineoffsets = np.cumsum(lineoffsets)\n    if len(linelengths) == 1:\n        linelengths = np.tile(linelengths, len(positions))\n    if len(linewidths) == 1:\n        linewidths = np.tile(linewidths, len(positions))\n    if len(colors) == 1:\n        colors = list(colors)\n        colors = colors * len(positions)\n    if len(linestyles) == 1:\n        linestyles = [linestyles] * len(positions)\n    if len(lineoffsets) != len(positions):\n        raise ValueError('lineoffsets and positions are unequal sized sequences')\n    if len(linelengths) != len(positions):\n        raise ValueError('linelengths and positions are unequal sized sequences')\n    if len(linewidths) != len(positions):\n        raise ValueError('linewidths and positions are unequal sized sequences')\n    if len(colors) != len(positions):\n        raise ValueError('colors and positions are unequal sized sequences')\n    if len(linestyles) != len(positions):\n        raise ValueError('linestyles and positions are unequal sized sequences')\n    colls = []\n    for (position, lineoffset, linelength, linewidth, color, linestyle) in zip(positions, lineoffsets, linelengths, linewidths, colors, linestyles):\n        coll = mcoll.EventCollection(position, orientation=orientation, lineoffset=lineoffset, linelength=linelength, linewidth=linewidth, color=color, linestyle=linestyle)\n        self.add_collection(coll, autolim=False)\n        coll.update(kwargs)\n        colls.append(coll)\n    if len(positions) > 0:\n        min_max = [(np.min(_p), np.max(_p)) for _p in positions if len(_p) > 0]\n        if len(min_max) > 0:\n            (mins, maxes) = zip(*min_max)\n            minpos = np.min(mins)\n            maxpos = np.max(maxes)\n            minline = (lineoffsets - linelengths).min()\n            maxline = (lineoffsets + linelengths).max()\n            if orientation is not None and orientation.lower() == 'vertical':\n                corners = ((minline, minpos), (maxline, maxpos))\n            else:\n                corners = ((minpos, minline), (maxpos, maxline))\n            self.update_datalim(corners)\n            self._request_autoscale_view()\n    return colls",
                            "@docstring.dedent_interpd\ndef plot(self, *args, scalex=True, scaley=True, data=None, **kwargs):\n    \"\"\"\n    Plot y versus x as lines and/or markers.\n\n    Call signatures::\n\n        plot([x], y, [fmt], *, data=None, **kwargs)\n        plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    The coordinates of the points or line nodes are given by *x*, *y*.\n\n    The optional parameter *fmt* is a convenient way for defining basic\n    formatting like color, marker and linestyle. It's a shortcut string\n    notation described in the *Notes* section below.\n\n    >>> plot(x, y)        # plot x and y using default line style and color\n    >>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n    >>> plot(y)           # plot y using x as index array 0..N-1\n    >>> plot(y, 'r+')     # ditto, but with red plusses\n\n    You can use `.Line2D` properties as keyword arguments for more\n    control on the appearance. Line properties and *fmt* can be mixed.\n    The following two calls yield identical results:\n\n    >>> plot(x, y, 'go--', linewidth=2, markersize=12)\n    >>> plot(x, y, color='green', marker='o', linestyle='dashed',\n    ...      linewidth=2, markersize=12)\n\n    When conflicting with *fmt*, keyword arguments take precedence.\n\n\n    **Plotting labelled data**\n\n    There's a convenient way for plotting objects with labelled data (i.e.\n    data that can be accessed by index ``obj['y']``). Instead of giving\n    the data in *x* and *y*, you can provide the object in the *data*\n    parameter and just give the labels for *x* and *y*::\n\n    >>> plot('xlabel', 'ylabel', data=obj)\n\n    All indexable objects are supported. This could e.g. be a `dict`, a\n    `pandas.DataFame` or a structured numpy array.\n\n\n    **Plotting multiple sets of data**\n\n    There are various ways to plot multiple sets of data.\n\n    - The most straight forward way is just to call `plot` multiple times.\n      Example:\n\n      >>> plot(x1, y1, 'bo')\n      >>> plot(x2, y2, 'go')\n\n    - Alternatively, if your data is already a 2d array, you can pass it\n      directly to *x*, *y*. A separate data set will be drawn for every\n      column.\n\n      Example: an array ``a`` where the first column represents the *x*\n      values and the other columns are the *y* columns::\n\n      >>> plot(a[0], a[1:])\n\n    - The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n      groups::\n\n      >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n\n      In this case, any additional keyword argument applies to all\n      datasets. Also this syntax cannot be combined with the *data*\n      parameter.\n\n    By default, each line is assigned a different style specified by a\n    'style cycle'. The *fmt* and line property parameters are only\n    necessary if you want explicit deviations from these defaults.\n    Alternatively, you can also change the style cycle using\n    :rc:`axes.prop_cycle`.\n\n\n    Parameters\n    ----------\n    x, y : array-like or scalar\n        The horizontal / vertical coordinates of the data points.\n        *x* values are optional and default to `range(len(y))`.\n\n        Commonly, these parameters are 1D arrays.\n\n        They can also be scalars, or two-dimensional (in that case, the\n        columns represent separate data sets).\n\n        These arguments cannot be passed as keywords.\n\n    fmt : str, optional\n        A format string, e.g. 'ro' for red circles. See the *Notes*\n        section for a full description of the format strings.\n\n        Format strings are just an abbreviation for quickly setting\n        basic line properties. All of these and more can also be\n        controlled by keyword arguments.\n\n        This argument cannot be passed as keyword.\n\n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*.\n\n        .. note::\n            Technically there's a slight ambiguity in calls where the\n            second label is a valid *fmt*. `plot('n', 'o', data=obj)`\n            could be `plt(x, y)` or `plt(y, fmt)`. In such cases,\n            the former interpretation is chosen, but a warning is issued.\n            You may suppress the warning by adding an empty format string\n            `plot('n', 'o', '', data=obj)`.\n\n    Other Parameters\n    ----------------\n    scalex, scaley : bool, optional, default: True\n        These parameters determined if the view limits are adapted to\n        the data limits. The values are passed on to `autoscale_view`.\n\n    **kwargs : `.Line2D` properties, optional\n        *kwargs* are used to specify properties like a line label (for\n        auto legends), linewidth, antialiasing, marker face color.\n        Example::\n\n        >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n        >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n\n        If you make multiple lines with one plot command, the kwargs\n        apply to all those lines.\n\n        Here is a list of available `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    See Also\n    --------\n    scatter : XY scatter plot with markers of varying size and/or color (\n        sometimes also called bubble chart).\n\n    Notes\n    -----\n    **Format Strings**\n\n    A format string consists of a part for color, marker and line::\n\n        fmt = '[marker][line][color]'\n\n    Each of them is optional. If not provided, the value from the style\n    cycle is used. Exception: If ``line`` is given, but no ``marker``,\n    the data will be a line without markers.\n\n    Other combinations such as ``[color][marker][line]`` are also\n    supported, but note that their parsing may be ambiguous.\n\n    **Markers**\n\n    =============    ===============================\n    character        description\n    =============    ===============================\n    ``'.'``          point marker\n    ``','``          pixel marker\n    ``'o'``          circle marker\n    ``'v'``          triangle_down marker\n    ``'^'``          triangle_up marker\n    ``'<'``          triangle_left marker\n    ``'>'``          triangle_right marker\n    ``'1'``          tri_down marker\n    ``'2'``          tri_up marker\n    ``'3'``          tri_left marker\n    ``'4'``          tri_right marker\n    ``'s'``          square marker\n    ``'p'``          pentagon marker\n    ``'*'``          star marker\n    ``'h'``          hexagon1 marker\n    ``'H'``          hexagon2 marker\n    ``'+'``          plus marker\n    ``'x'``          x marker\n    ``'D'``          diamond marker\n    ``'d'``          thin_diamond marker\n    ``'|'``          vline marker\n    ``'_'``          hline marker\n    =============    ===============================\n\n    **Line Styles**\n\n    =============    ===============================\n    character        description\n    =============    ===============================\n    ``'-'``          solid line style\n    ``'--'``         dashed line style\n    ``'-.'``         dash-dot line style\n    ``':'``          dotted line style\n    =============    ===============================\n\n    Example format strings::\n\n        'b'    # blue markers with default shape\n        'or'   # red circles\n        '-g'   # green solid line\n        '--'   # dashed line with default color\n        '^k:'  # black triangle_up markers connected by a dotted line\n\n    **Colors**\n\n    The supported color abbreviations are the single letter codes\n\n    =============    ===============================\n    character        color\n    =============    ===============================\n    ``'b'``          blue\n    ``'g'``          green\n    ``'r'``          red\n    ``'c'``          cyan\n    ``'m'``          magenta\n    ``'y'``          yellow\n    ``'k'``          black\n    ``'w'``          white\n    =============    ===============================\n\n    and the ``'CN'`` colors that index into the default property cycle.\n\n    If the color is the only part of the format string, you can\n    additionally use any  `matplotlib.colors` spec, e.g. full names\n    (``'green'``) or hex strings (``'#008000'``).\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n    lines = [*self._get_lines(*args, data=data, **kwargs)]\n    for line in lines:\n        self.add_line(line)\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)\n    return lines",
                            "@_preprocess_data(replace_names=['x', 'y'], label_namer='y')\n@docstring.dedent_interpd\ndef plot_date(self, x, y, fmt='o', tz=None, xdate=True, ydate=False, **kwargs):\n    \"\"\"\n    Plot data that contains dates.\n\n    Similar to `.plot`, this plots *y* vs. *x* as lines or markers.\n    However, the axis labels are formatted as dates depending on *xdate*\n    and *ydate*.\n\n    Parameters\n    ----------\n    x, y : array-like\n        The coordinates of the data points. If *xdate* or *ydate* is\n        *True*, the respective values *x* or *y* are interpreted as\n        :ref:`Matplotlib dates <date-format>`.\n\n    fmt : str, optional\n        The plot format string. For details, see the corresponding\n        parameter in `.plot`.\n\n    tz : timezone string or `tzinfo` or None\n        The time zone to use in labeling dates. If *None*, defaults to\n        :rc:`timezone`.\n\n    xdate : bool, optional, default: True\n        If *True*, the *x*-axis will be interpreted as Matplotlib dates.\n\n    ydate : bool, optional, default: False\n        If *True*, the *y*-axis will be interpreted as Matplotlib dates.\n\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    matplotlib.dates : Helper functions on dates.\n    matplotlib.dates.date2num : Convert dates to num.\n    matplotlib.dates.num2date : Convert num to dates.\n    matplotlib.dates.drange : Create an equally spaced sequence of dates.\n\n    Notes\n    -----\n    If you are using custom date tickers and formatters, it may be\n    necessary to set the formatters/locators after the call to\n    `.plot_date`. `.plot_date` will set the default tick locator to\n    `.AutoDateLocator` (if the tick locator is not already set to a\n    `.DateLocator` instance) and the default tick formatter to\n    `.AutoDateFormatter` (if the tick formatter is not already set to a\n    `.DateFormatter` instance).\n    \"\"\"\n    if xdate:\n        self.xaxis_date(tz)\n    if ydate:\n        self.yaxis_date(tz)\n    ret = self.plot(x, y, fmt, **kwargs)\n    self._request_autoscale_view()\n    return ret",
                            "@docstring.dedent_interpd\ndef loglog(self, *args, **kwargs):\n    \"\"\"\n    Make a plot with log scaling on both the x and y axis.\n\n    Call signatures::\n\n        loglog([x], y, [fmt], data=None, **kwargs)\n        loglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    This is just a thin wrapper around `.plot` which additionally changes\n    both the x-axis and the y-axis to log scaling. All of the concepts and\n    parameters of plot can be used here as well.\n\n    The additional parameters *basex/y*, *subsx/y* and *nonposx/y* control\n    the x/y-axis properties. They are just forwarded to `.Axes.set_xscale`\n    and `.Axes.set_yscale`.\n\n    Parameters\n    ----------\n    basex, basey : scalar, optional, default 10\n        Base of the x/y logarithm.\n\n    subsx, subsy : sequence, optional\n        The location of the minor x/y ticks. If *None*, reasonable\n        locations are automatically chosen depending on the number of\n        decades in the plot.\n        See `.Axes.set_xscale` / `.Axes.set_yscale` for details.\n\n    nonposx, nonposy : {'mask', 'clip'}, optional, default 'mask'\n        Non-positive values in x or y can be masked as invalid, or clipped\n        to a very small positive number.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All parameters supported by `.plot`.\n    \"\"\"\n    dx = {k: kwargs.pop(k) for k in ['basex', 'subsx', 'nonposx'] if k in kwargs}\n    dy = {k: kwargs.pop(k) for k in ['basey', 'subsy', 'nonposy'] if k in kwargs}\n    self.set_xscale('log', **dx)\n    self.set_yscale('log', **dy)\n    l = self.plot(*args, **kwargs)\n    return l",
                            "@docstring.dedent_interpd\ndef semilogx(self, *args, **kwargs):\n    \"\"\"\n    Make a plot with log scaling on the x axis.\n\n    Call signatures::\n\n        semilogx([x], y, [fmt], data=None, **kwargs)\n        semilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    This is just a thin wrapper around `.plot` which additionally changes\n    the x-axis to log scaling. All of the concepts and parameters of plot\n    can be used here as well.\n\n    The additional parameters *basex*, *subsx* and *nonposx* control the\n    x-axis properties. They are just forwarded to `.Axes.set_xscale`.\n\n    Parameters\n    ----------\n    basex : scalar, optional, default 10\n        Base of the x logarithm.\n\n    subsx : array-like, optional\n        The location of the minor xticks. If *None*, reasonable locations\n        are automatically chosen depending on the number of decades in the\n        plot. See `.Axes.set_xscale` for details.\n\n    nonposx : {'mask', 'clip'}, optional, default 'mask'\n        Non-positive values in x can be masked as invalid, or clipped to a\n        very small positive number.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All parameters supported by `.plot`.\n    \"\"\"\n    d = {k: kwargs.pop(k) for k in ['basex', 'subsx', 'nonposx'] if k in kwargs}\n    self.set_xscale('log', **d)\n    l = self.plot(*args, **kwargs)\n    return l",
                            "@docstring.dedent_interpd\ndef semilogy(self, *args, **kwargs):\n    \"\"\"\n    Make a plot with log scaling on the y axis.\n\n    Call signatures::\n\n        semilogy([x], y, [fmt], data=None, **kwargs)\n        semilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    This is just a thin wrapper around `.plot` which additionally changes\n    the y-axis to log scaling. All of the concepts and parameters of plot\n    can be used here as well.\n\n    The additional parameters *basey*, *subsy* and *nonposy* control the\n    y-axis properties. They are just forwarded to `.Axes.set_yscale`.\n\n    Parameters\n    ----------\n    basey : scalar, optional, default 10\n        Base of the y logarithm.\n\n    subsy : array-like, optional\n        The location of the minor yticks. If *None*, reasonable locations\n        are automatically chosen depending on the number of decades in the\n        plot. See `.Axes.set_yscale` for details.\n\n    nonposy : {'mask', 'clip'}, optional, default 'mask'\n        Non-positive values in y can be masked as invalid, or clipped to a\n        very small positive number.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All parameters supported by `.plot`.\n    \"\"\"\n    d = {k: kwargs.pop(k) for k in ['basey', 'subsy', 'nonposy'] if k in kwargs}\n    self.set_yscale('log', **d)\n    l = self.plot(*args, **kwargs)\n    return l",
                            "@_preprocess_data(replace_names=['x'], label_namer='x')\ndef acorr(self, x, **kwargs):\n    \"\"\"\n    Plot the autocorrelation of *x*.\n\n    Parameters\n    ----------\n    x : array-like\n\n    detrend : callable, optional, default: `mlab.detrend_none`\n        *x* is detrended by the *detrend* callable. This must be a\n        function ``x = detrend(x)`` accepting and returning an\n        `numpy.array`. Default is no normalization.\n\n    normed : bool, optional, default: True\n        If ``True``, input vectors are normalised to unit length.\n\n    usevlines : bool, optional, default: True\n        Determines the plot style.\n\n        If ``True``, vertical lines are plotted from 0 to the acorr value\n        using `Axes.vlines`. Additionally, a horizontal line is plotted\n        at y=0 using `Axes.axhline`.\n\n        If ``False``, markers are plotted at the acorr values using\n        `Axes.plot`.\n\n    maxlags : int, optional, default: 10\n        Number of lags to show. If ``None``, will return all\n        ``2 * len(x) - 1`` lags.\n\n    Returns\n    -------\n    lags : array (length ``2*maxlags+1``)\n        The lag vector.\n    c : array  (length ``2*maxlags+1``)\n        The auto correlation vector.\n    line : `.LineCollection` or `.Line2D`\n        `.Artist` added to the axes of the correlation:\n\n        - `.LineCollection` if *usevlines* is True.\n        - `.Line2D` if *usevlines* is False.\n    b : `.Line2D` or None\n        Horizontal line at 0 if *usevlines* is True\n        None *usevlines* is False.\n\n    Other Parameters\n    ----------------\n    linestyle : `.Line2D` property, optional\n        The linestyle for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    marker : str, optional, default: 'o'\n        The marker for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    Notes\n    -----\n    The cross correlation is performed with :func:`numpy.correlate` with\n    ``mode = \"full\"``.\n    \"\"\"\n    return self.xcorr(x, x, **kwargs)",
                            "@_preprocess_data(replace_names=['x', 'y'], label_namer='y')\ndef xcorr(self, x, y, normed=True, detrend=mlab.detrend_none, usevlines=True, maxlags=10, **kwargs):\n    \"\"\"\n    Plot the cross correlation between *x* and *y*.\n\n    The correlation with lag k is defined as\n    :math:`\\\\sum_n x[n+k] \\\\cdot y^*[n]`, where :math:`y^*` is the complex\n    conjugate of :math:`y`.\n\n    Parameters\n    ----------\n    x : array-like of length n\n\n    y : array-like of length n\n\n    detrend : callable, optional, default: `mlab.detrend_none`\n        *x* and *y* are detrended by the *detrend* callable. This must be a\n        function ``x = detrend(x)`` accepting and returning an\n        `numpy.array`. Default is no normalization.\n\n    normed : bool, optional, default: True\n        If ``True``, input vectors are normalised to unit length.\n\n    usevlines : bool, optional, default: True\n        Determines the plot style.\n\n        If ``True``, vertical lines are plotted from 0 to the xcorr value\n        using `Axes.vlines`. Additionally, a horizontal line is plotted\n        at y=0 using `Axes.axhline`.\n\n        If ``False``, markers are plotted at the xcorr values using\n        `Axes.plot`.\n\n    maxlags : int, optional, default: 10\n        Number of lags to show. If None, will return all ``2 * len(x) - 1``\n        lags.\n\n    Returns\n    -------\n    lags : array (length ``2*maxlags+1``)\n        The lag vector.\n    c : array  (length ``2*maxlags+1``)\n        The auto correlation vector.\n    line : `.LineCollection` or `.Line2D`\n        `.Artist` added to the axes of the correlation:\n\n        - `.LineCollection` if *usevlines* is True.\n        - `.Line2D` if *usevlines* is False.\n    b : `.Line2D` or None\n        Horizontal line at 0 if *usevlines* is True\n        None *usevlines* is False.\n\n    Other Parameters\n    ----------------\n    linestyle : `.Line2D` property, optional\n        The linestyle for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    marker : str, optional, default: 'o'\n        The marker for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    Notes\n    -----\n    The cross correlation is performed with :func:`numpy.correlate` with\n    ``mode = \"full\"``.\n    \"\"\"\n    Nx = len(x)\n    if Nx != len(y):\n        raise ValueError('x and y must be equal length')\n    x = detrend(np.asarray(x))\n    y = detrend(np.asarray(y))\n    correls = np.correlate(x, y, mode='full')\n    if normed:\n        correls /= np.sqrt(np.dot(x, x) * np.dot(y, y))\n    if maxlags is None:\n        maxlags = Nx - 1\n    if maxlags >= Nx or maxlags < 1:\n        raise ValueError('maxlags must be None or strictly positive < %d' % Nx)\n    lags = np.arange(-maxlags, maxlags + 1)\n    correls = correls[Nx - 1 - maxlags:Nx + maxlags]\n    if usevlines:\n        a = self.vlines(lags, [0], correls, **kwargs)\n        kwargs.pop('label', '')\n        b = self.axhline(**kwargs)\n    else:\n        kwargs.setdefault('marker', 'o')\n        kwargs.setdefault('linestyle', 'None')\n        (a,) = self.plot(lags, correls, **kwargs)\n        b = None\n    return (lags, correls, a, b)",
                            "def step(self, x, y, *args, where='pre', data=None, **kwargs):\n    \"\"\"\n    Make a step plot.\n\n    Call signatures::\n\n        step(x, y, [fmt], *, data=None, where='pre', **kwargs)\n        step(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n\n    This is just a thin wrapper around `.plot` which changes some\n    formatting options. Most of the concepts and parameters of plot can be\n    used here as well.\n\n    Parameters\n    ----------\n    x : array-like\n        1-D sequence of x positions. It is assumed, but not checked, that\n        it is uniformly increasing.\n\n    y : array-like\n        1-D sequence of y levels.\n\n    fmt : str, optional\n        A format string, e.g. 'g' for a green line. See `.plot` for a more\n        detailed description.\n\n        Note: While full format strings are accepted, it is recommended to\n        only specify the color. Line styles are currently ignored (use\n        the keyword argument *linestyle* instead). Markers are accepted\n        and plotted on the given positions, however, this is a rarely\n        needed feature for step plots.\n\n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*.\n\n    where : {'pre', 'post', 'mid'}, optional, default 'pre'\n        Define where the steps should be placed:\n\n        - 'pre': The y value is continued constantly to the left from\n          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n          value ``y[i]``.\n        - 'post': The y value is continued constantly to the right from\n          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n          value ``y[i]``.\n        - 'mid': Steps occur half-way between the *x* positions.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additional parameters are the same as those for `.plot`.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n    \"\"\"\n    cbook._check_in_list(('pre', 'post', 'mid'), where=where)\n    kwargs['drawstyle'] = 'steps-' + where\n    return self.plot(x, y, *args, data=data, **kwargs)",
                            "@staticmethod\ndef _convert_dx(dx, x0, xconv, convert):\n    \"\"\"\n    Small helper to do logic of width conversion flexibly.\n\n    *dx* and *x0* have units, but *xconv* has already been converted\n    to unitless (and is an ndarray).  This allows the *dx* to have units\n    that are different from *x0*, but are still accepted by the\n    ``__add__`` operator of *x0*.\n    \"\"\"\n    assert type(xconv) is np.ndarray\n    if xconv.size == 0:\n        return convert(dx)\n    try:\n        try:\n            x0 = cbook.safe_first_element(x0)\n        except (TypeError, IndexError, KeyError):\n            x0 = x0\n        try:\n            x = cbook.safe_first_element(xconv)\n        except (TypeError, IndexError, KeyError):\n            x = xconv\n        delist = False\n        if not np.iterable(dx):\n            dx = [dx]\n            delist = True\n        dx = [convert(x0 + ddx) - x for ddx in dx]\n        if delist:\n            dx = dx[0]\n    except (ValueError, TypeError, AttributeError):\n        dx = convert(dx)\n    return dx",
                            "@_preprocess_data()\n@docstring.dedent_interpd\ndef bar(self, x, height, width=0.8, bottom=None, *, align='center', **kwargs):\n    \"\"\"\n    Make a bar plot.\n\n    The bars are positioned at *x* with the given *align*\\\\ment. Their\n    dimensions are given by *width* and *height*. The vertical baseline\n    is *bottom* (default 0).\n\n    Each of *x*, *height*, *width*, and *bottom* may either be a scalar\n    applying to all bars, or it may be a sequence of length N providing a\n    separate value for each bar.\n\n    Parameters\n    ----------\n    x : sequence of scalars\n        The x coordinates of the bars. See also *align* for the\n        alignment of the bars to the coordinates.\n\n    height : scalar or sequence of scalars\n        The height(s) of the bars.\n\n    width : scalar or array-like, optional\n        The width(s) of the bars (default: 0.8).\n\n    bottom : scalar or array-like, optional\n        The y coordinate(s) of the bars bases (default: 0).\n\n    align : {'center', 'edge'}, optional, default: 'center'\n        Alignment of the bars to the *x* coordinates:\n\n        - 'center': Center the base on the *x* positions.\n        - 'edge': Align the left edges of the bars with the *x* positions.\n\n        To align the bars on the right edge pass a negative *width* and\n        ``align='edge'``.\n\n    Returns\n    -------\n    container : `.BarContainer`\n        Container with all the bars and optionally errorbars.\n\n    Other Parameters\n    ----------------\n    color : scalar or array-like, optional\n        The colors of the bar faces.\n\n    edgecolor : scalar or array-like, optional\n        The colors of the bar edges.\n\n    linewidth : scalar or array-like, optional\n        Width of the bar edge(s). If 0, don't draw edges.\n\n    tick_label : str or array-like, optional\n        The tick labels of the bars.\n        Default: None (Use default numeric labels.)\n\n    xerr, yerr : scalar or array-like of shape(N,) or shape(2, N), optional\n        If not *None*, add horizontal / vertical errorbars to the bar tips.\n        The values are +/- sizes relative to the data:\n\n        - scalar: symmetric +/- values for all bars\n        - shape(N,): symmetric +/- values for each bar\n        - shape(2, N): Separate - and + values for each bar. First row\n          contains the lower errors, the second row contains the upper\n          errors.\n        - *None*: No errorbar. (Default)\n\n        See :doc:`/gallery/statistics/errorbar_features`\n        for an example on the usage of ``xerr`` and ``yerr``.\n\n    ecolor : scalar or array-like, optional, default: 'black'\n        The line color of the errorbars.\n\n    capsize : scalar, optional\n       The length of the error bar caps in points.\n       Default: None, which will take the value from\n       :rc:`errorbar.capsize`.\n\n    error_kw : dict, optional\n        Dictionary of kwargs to be passed to the `~.Axes.errorbar`\n        method. Values of *ecolor* or *capsize* defined here take\n        precedence over the independent kwargs.\n\n    log : bool, optional, default: False\n        If *True*, set the y-axis to be log scale.\n\n    orientation : {'vertical',  'horizontal'}, optional\n        *This is for internal use only.* Please use `barh` for\n        horizontal bar plots. Default: 'vertical'.\n\n    See also\n    --------\n    barh: Plot a horizontal bar plot.\n\n    Notes\n    -----\n    The optional arguments *color*, *edgecolor*, *linewidth*,\n    *xerr*, and *yerr* can be either scalars or sequences of\n    length equal to the number of bars.  This enables you to use\n    bar as the basis for stacked bar charts, or candlestick plots.\n    Detail: *xerr* and *yerr* are passed directly to\n    :meth:`errorbar`, so they can also have shape 2xN for\n    independent specification of lower and upper errors.\n\n    Other optional kwargs:\n\n    %(Rectangle)s\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mpatches.Patch)\n    color = kwargs.pop('color', None)\n    if color is None:\n        color = self._get_patches_for_fill.get_next_color()\n    edgecolor = kwargs.pop('edgecolor', None)\n    linewidth = kwargs.pop('linewidth', None)\n    xerr = kwargs.pop('xerr', None)\n    yerr = kwargs.pop('yerr', None)\n    error_kw = kwargs.pop('error_kw', {})\n    ezorder = error_kw.pop('zorder', None)\n    if ezorder is None:\n        ezorder = kwargs.get('zorder', None)\n        if ezorder is not None:\n            ezorder += 0.01\n    error_kw.setdefault('zorder', ezorder)\n    ecolor = kwargs.pop('ecolor', 'k')\n    capsize = kwargs.pop('capsize', rcParams['errorbar.capsize'])\n    error_kw.setdefault('ecolor', ecolor)\n    error_kw.setdefault('capsize', capsize)\n    orientation = kwargs.pop('orientation', 'vertical')\n    cbook._check_in_list(['vertical', 'horizontal'], orientation=orientation)\n    log = kwargs.pop('log', False)\n    label = kwargs.pop('label', '')\n    tick_labels = kwargs.pop('tick_label', None)\n    y = bottom\n    if orientation == 'vertical':\n        if y is None:\n            y = 0\n    elif orientation == 'horizontal':\n        if x is None:\n            x = 0\n    if orientation == 'vertical':\n        self._process_unit_info(xdata=x, ydata=height, kwargs=kwargs)\n        if log:\n            self.set_yscale('log', nonposy='clip')\n    elif orientation == 'horizontal':\n        self._process_unit_info(xdata=width, ydata=y, kwargs=kwargs)\n        if log:\n            self.set_xscale('log', nonposx='clip')\n    if self.xaxis is not None:\n        x0 = x\n        x = np.asarray(self.convert_xunits(x))\n        width = self._convert_dx(width, x0, x, self.convert_xunits)\n        if xerr is not None:\n            xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n    if self.yaxis is not None:\n        y0 = y\n        y = np.asarray(self.convert_yunits(y))\n        height = self._convert_dx(height, y0, y, self.convert_yunits)\n        if yerr is not None:\n            yerr = self._convert_dx(yerr, y0, y, self.convert_yunits)\n    (x, height, width, y, linewidth) = np.broadcast_arrays(np.atleast_1d(x), height, width, y, linewidth)\n    if orientation == 'vertical':\n        tick_label_axis = self.xaxis\n        tick_label_position = x\n    elif orientation == 'horizontal':\n        tick_label_axis = self.yaxis\n        tick_label_position = y\n    linewidth = itertools.cycle(np.atleast_1d(linewidth))\n    color = itertools.chain(itertools.cycle(mcolors.to_rgba_array(color)), itertools.repeat('none'))\n    if edgecolor is None:\n        edgecolor = itertools.repeat(None)\n    else:\n        edgecolor = itertools.chain(itertools.cycle(mcolors.to_rgba_array(edgecolor)), itertools.repeat('none'))\n    cbook._check_in_list(['center', 'edge'], align=align)\n    if align == 'center':\n        if orientation == 'vertical':\n            try:\n                left = x - width / 2\n            except TypeError as e:\n                raise TypeError(f'the dtypes of parameters x ({x.dtype}) and width ({width.dtype}) are incompatible') from e\n            bottom = y\n        elif orientation == 'horizontal':\n            try:\n                bottom = y - height / 2\n            except TypeError as e:\n                raise TypeError(f'the dtypes of parameters y ({y.dtype}) and height ({height.dtype}) are incompatible') from e\n            left = x\n    elif align == 'edge':\n        left = x\n        bottom = y\n    patches = []\n    args = zip(left, bottom, width, height, color, edgecolor, linewidth)\n    for (l, b, w, h, c, e, lw) in args:\n        r = mpatches.Rectangle(xy=(l, b), width=w, height=h, facecolor=c, edgecolor=e, linewidth=lw, label='_nolegend_')\n        r.update(kwargs)\n        r.get_path()._interpolation_steps = 100\n        if orientation == 'vertical':\n            r.sticky_edges.y.append(b)\n        elif orientation == 'horizontal':\n            r.sticky_edges.x.append(l)\n        self.add_patch(r)\n        patches.append(r)\n    if xerr is not None or yerr is not None:\n        if orientation == 'vertical':\n            ex = [l + 0.5 * w for (l, w) in zip(left, width)]\n            ey = [b + h for (b, h) in zip(bottom, height)]\n        elif orientation == 'horizontal':\n            ex = [l + w for (l, w) in zip(left, width)]\n            ey = [b + 0.5 * h for (b, h) in zip(bottom, height)]\n        error_kw.setdefault('label', '_nolegend_')\n        errorbar = self.errorbar(ex, ey, yerr=yerr, xerr=xerr, fmt='none', **error_kw)\n    else:\n        errorbar = None\n    self._request_autoscale_view()\n    bar_container = BarContainer(patches, errorbar, label=label)\n    self.add_container(bar_container)\n    if tick_labels is not None:\n        tick_labels = np.broadcast_to(tick_labels, len(patches))\n        tick_label_axis.set_ticks(tick_label_position)\n        tick_label_axis.set_ticklabels(tick_labels)\n    return bar_container",
                            "@docstring.dedent_interpd\ndef barh(self, y, width, height=0.8, left=None, *, align='center', **kwargs):\n    \"\"\"\n    Make a horizontal bar plot.\n\n    The bars are positioned at *y* with the given *align*\\\\ment. Their\n    dimensions are given by *width* and *height*. The horizontal baseline\n    is *left* (default 0).\n\n    Each of *y*, *width*, *height*, and *left* may either be a scalar\n    applying to all bars, or it may be a sequence of length N providing a\n    separate value for each bar.\n\n    Parameters\n    ----------\n    y : scalar or array-like\n        The y coordinates of the bars. See also *align* for the\n        alignment of the bars to the coordinates.\n\n    width : scalar or array-like\n        The width(s) of the bars.\n\n    height : sequence of scalars, optional, default: 0.8\n        The heights of the bars.\n\n    left : sequence of scalars\n        The x coordinates of the left sides of the bars (default: 0).\n\n    align : {'center', 'edge'}, optional, default: 'center'\n        Alignment of the base to the *y* coordinates*:\n\n        - 'center': Center the bars on the *y* positions.\n        - 'edge': Align the bottom edges of the bars with the *y*\n          positions.\n\n        To align the bars on the top edge pass a negative *height* and\n        ``align='edge'``.\n\n    Returns\n    -------\n    container : `.BarContainer`\n        Container with all the bars and optionally errorbars.\n\n    Other Parameters\n    ----------------\n    color : scalar or array-like, optional\n        The colors of the bar faces.\n\n    edgecolor : scalar or array-like, optional\n        The colors of the bar edges.\n\n    linewidth : scalar or array-like, optional\n        Width of the bar edge(s). If 0, don't draw edges.\n\n    tick_label : str or array-like, optional\n        The tick labels of the bars.\n        Default: None (Use default numeric labels.)\n\n    xerr, yerr : scalar or array-like of shape(N,) or shape(2, N), optional\n        If not ``None``, add horizontal / vertical errorbars to the\n        bar tips. The values are +/- sizes relative to the data:\n\n        - scalar: symmetric +/- values for all bars\n        - shape(N,): symmetric +/- values for each bar\n        - shape(2, N): Separate - and + values for each bar. First row\n          contains the lower errors, the second row contains the upper\n          errors.\n        - *None*: No errorbar. (default)\n\n        See :doc:`/gallery/statistics/errorbar_features`\n        for an example on the usage of ``xerr`` and ``yerr``.\n\n    ecolor : scalar or array-like, optional, default: 'black'\n        The line color of the errorbars.\n\n    capsize : scalar, optional\n       The length of the error bar caps in points.\n       Default: None, which will take the value from\n       :rc:`errorbar.capsize`.\n\n    error_kw : dict, optional\n        Dictionary of kwargs to be passed to the `~.Axes.errorbar`\n        method. Values of *ecolor* or *capsize* defined here take\n        precedence over the independent kwargs.\n\n    log : bool, optional, default: False\n        If ``True``, set the x-axis to be log scale.\n\n    See also\n    --------\n    bar: Plot a vertical bar plot.\n\n    Notes\n    -----\n    The optional arguments *color*, *edgecolor*, *linewidth*,\n    *xerr*, and *yerr* can be either scalars or sequences of\n    length equal to the number of bars.  This enables you to use\n    bar as the basis for stacked bar charts, or candlestick plots.\n    Detail: *xerr* and *yerr* are passed directly to\n    :meth:`errorbar`, so they can also have shape 2xN for\n    independent specification of lower and upper errors.\n\n    Other optional kwargs:\n\n    %(Rectangle)s\n    \"\"\"\n    kwargs.setdefault('orientation', 'horizontal')\n    patches = self.bar(x=left, height=height, width=width, bottom=y, align=align, **kwargs)\n    return patches",
                            "@_preprocess_data()\n@docstring.dedent_interpd\ndef broken_barh(self, xranges, yrange, **kwargs):\n    \"\"\"\n    Plot a horizontal sequence of rectangles.\n\n    A rectangle is drawn for each element of *xranges*. All rectangles\n    have the same vertical position and size defined by *yrange*.\n\n    This is a convenience function for instantiating a\n    `.BrokenBarHCollection`, adding it to the axes and autoscaling the\n    view.\n\n    Parameters\n    ----------\n    xranges : sequence of tuples (*xmin*, *xwidth*)\n        The x-positions and extends of the rectangles. For each tuple\n        (*xmin*, *xwidth*) a rectangle is drawn from *xmin* to *xmin* +\n        *xwidth*.\n    yrange : (*ymin*, *yheight*)\n        The y-position and extend for all the rectangles.\n\n    Other Parameters\n    ----------------\n    **kwargs : :class:`.BrokenBarHCollection` properties\n\n        Each *kwarg* can be either a single argument applying to all\n        rectangles, e.g.::\n\n            facecolors='black'\n\n        or a sequence of arguments over which is cycled, e.g.::\n\n            facecolors=('black', 'blue')\n\n        would create interleaving black and blue rectangles.\n\n        Supported keywords:\n\n        %(BrokenBarHCollection)s\n\n    Returns\n    -------\n    collection : A :class:`~.collections.BrokenBarHCollection`\n    \"\"\"\n    if len(xranges):\n        xdata = cbook.safe_first_element(xranges)\n    else:\n        xdata = None\n    if len(yrange):\n        ydata = cbook.safe_first_element(yrange)\n    else:\n        ydata = None\n    self._process_unit_info(xdata=xdata, ydata=ydata, kwargs=kwargs)\n    xranges_conv = []\n    for xr in xranges:\n        if len(xr) != 2:\n            raise ValueError('each range in xrange must be a sequence with two elements (i.e. an Nx2 array)')\n        x_conv = np.asarray(self.convert_xunits(xr[0]))\n        x1 = self._convert_dx(xr[1], xr[0], x_conv, self.convert_xunits)\n        xranges_conv.append((x_conv, x1))\n    yrange_conv = self.convert_yunits(yrange)\n    col = mcoll.BrokenBarHCollection(xranges_conv, yrange_conv, **kwargs)\n    self.add_collection(col, autolim=True)\n    self._request_autoscale_view()\n    return col",
                            "@_preprocess_data()\ndef stem(self, *args, linefmt=None, markerfmt=None, basefmt=None, bottom=0, label=None, use_line_collection=False):\n    \"\"\"\n    Create a stem plot.\n\n    A stem plot plots vertical lines at each *x* location from the baseline\n    to *y*, and places a marker there.\n\n    Call signature::\n\n      stem([x,] y, linefmt=None, markerfmt=None, basefmt=None)\n\n    The x-positions are optional. The formats may be provided either as\n    positional or as keyword-arguments.\n\n    Parameters\n    ----------\n    x : array-like, optional\n        The x-positions of the stems. Default: (0, 1, ..., len(y) - 1).\n\n    y : array-like\n        The y-values of the stem heads.\n\n    linefmt : str, optional\n        A string defining the properties of the vertical lines. Usually,\n        this will be a color or a color and a linestyle:\n\n        =========  =============\n        Character  Line Style\n        =========  =============\n        ``'-'``    solid line\n        ``'--'``   dashed line\n        ``'-.'``   dash-dot line\n        ``':'``    dotted line\n        =========  =============\n\n        Default: 'C0-', i.e. solid line with the first color of the color\n        cycle.\n\n        Note: While it is technically possible to specify valid formats\n        other than color or color and linestyle (e.g. 'rx' or '-.'), this\n        is beyond the intention of the method and will most likely not\n        result in a reasonable reasonable plot.\n\n    markerfmt : str, optional\n        A string defining the properties of the markers at the stem heads.\n        Default: 'C0o', i.e. filled circles with the first color of the\n        color cycle.\n\n    basefmt : str, optional\n        A format string defining the properties of the baseline.\n\n        Default: 'C3-' ('C2-' in classic mode).\n\n    bottom : float, optional, default: 0\n        The y-position of the baseline.\n\n    label : str, optional, default: None\n        The label to use for the stems in legends.\n\n    use_line_collection : bool, optional, default: False\n        If ``True``, store and plot the stem lines as a\n        `~.collections.LineCollection` instead of individual lines. This\n        significantly increases performance, and will become the default\n        option in Matplotlib 3.3. If ``False``, defaults to the old\n        behavior of using a list of `.Line2D` objects.\n\n\n    Returns\n    -------\n    container : :class:`~matplotlib.container.StemContainer`\n        The container may be treated like a tuple\n        (*markerline*, *stemlines*, *baseline*)\n\n\n    Notes\n    -----\n    .. seealso::\n        The MATLAB function\n        `stem <http://www.mathworks.com/help/techdoc/ref/stem.html>`_\n        which inspired this method.\n\n    \"\"\"\n    if not 1 <= len(args) <= 5:\n        raise TypeError('stem expected between 1 and 5 positional arguments, got {}'.format(args))\n    if len(args) == 1:\n        (y,) = args\n        x = np.arange(len(y))\n        args = ()\n    else:\n        (x, y, *args) = args\n    self._process_unit_info(xdata=x, ydata=y)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    if linefmt is None:\n        try:\n            linefmt = args[0]\n        except IndexError:\n            linecolor = 'C0'\n            linemarker = 'None'\n            linestyle = '-'\n        else:\n            (linestyle, linemarker, linecolor) = _process_plot_format(linefmt)\n    else:\n        (linestyle, linemarker, linecolor) = _process_plot_format(linefmt)\n    if markerfmt is None:\n        try:\n            markerfmt = args[1]\n        except IndexError:\n            markercolor = 'C0'\n            markermarker = 'o'\n            markerstyle = 'None'\n        else:\n            (markerstyle, markermarker, markercolor) = _process_plot_format(markerfmt)\n    else:\n        (markerstyle, markermarker, markercolor) = _process_plot_format(markerfmt)\n    if basefmt is None:\n        try:\n            basefmt = args[2]\n        except IndexError:\n            if rcParams['_internal.classic_mode']:\n                basecolor = 'C2'\n            else:\n                basecolor = 'C3'\n            basemarker = 'None'\n            basestyle = '-'\n        else:\n            (basestyle, basemarker, basecolor) = _process_plot_format(basefmt)\n    else:\n        (basestyle, basemarker, basecolor) = _process_plot_format(basefmt)\n    if use_line_collection:\n        stemlines = [((xi, bottom), (xi, yi)) for (xi, yi) in zip(x, y)]\n        if linestyle is None:\n            linestyle = rcParams['lines.linestyle']\n        stemlines = mcoll.LineCollection(stemlines, linestyles=linestyle, colors=linecolor, label='_nolegend_')\n        self.add_collection(stemlines)\n    else:\n        cbook._warn_external('In Matplotlib 3.3 individual lines on a stem plot will be added as a LineCollection instead of individual lines. This significantly improves the performance of a stem plot. To remove this warning and switch to the new behaviour, set the \"use_line_collection\" keyword argument to True.')\n        stemlines = []\n        for (xi, yi) in zip(x, y):\n            (l,) = self.plot([xi, xi], [bottom, yi], color=linecolor, linestyle=linestyle, marker=linemarker, label='_nolegend_')\n            stemlines.append(l)\n    (markerline,) = self.plot(x, y, color=markercolor, linestyle=markerstyle, marker=markermarker, label='_nolegend_')\n    (baseline,) = self.plot([np.min(x), np.max(x)], [bottom, bottom], color=basecolor, linestyle=basestyle, marker=basemarker, label='_nolegend_')\n    stem_container = StemContainer((markerline, stemlines, baseline), label=label)\n    self.add_container(stem_container)\n    return stem_container",
                            "@_preprocess_data(replace_names=['x', 'explode', 'labels', 'colors'])\ndef pie(self, x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False):\n    \"\"\"\n    Plot a pie chart.\n\n    Make a pie chart of array *x*.  The fractional area of each wedge is\n    given by ``x/sum(x)``.  If ``sum(x) < 1``, then the values of *x* give\n    the fractional area directly and the array will not be normalized. The\n    resulting pie will have an empty wedge of size ``1 - sum(x)``.\n\n    The wedges are plotted counterclockwise, by default starting from the\n    x-axis.\n\n    Parameters\n    ----------\n    x : array-like\n        The wedge sizes.\n\n    explode : array-like, optional, default: None\n        If not *None*, is a ``len(x)`` array which specifies the fraction\n        of the radius with which to offset each wedge.\n\n    labels : list, optional, default: None\n        A sequence of strings providing the labels for each wedge\n\n    colors : array-like, optional, default: None\n        A sequence of matplotlib color args through which the pie chart\n        will cycle.  If *None*, will use the colors in the currently\n        active cycle.\n\n    autopct : None (default), str, or function, optional\n        If not *None*, is a string or function used to label the wedges\n        with their numeric value.  The label will be placed inside the\n        wedge.  If it is a format string, the label will be ``fmt%pct``.\n        If it is a function, it will be called.\n\n    pctdistance : float, optional, default: 0.6\n        The ratio between the center of each pie slice and the start of\n        the text generated by *autopct*.  Ignored if *autopct* is *None*.\n\n    shadow : bool, optional, default: False\n        Draw a shadow beneath the pie.\n\n    labeldistance : float or None, optional, default: 1.1\n        The radial distance at which the pie labels are drawn.\n        If set to ``None``, label are not drawn, but are stored for use in\n        ``legend()``\n\n    startangle : float, optional, default: None\n        If not *None*, rotates the start of the pie chart by *angle*\n        degrees counterclockwise from the x-axis.\n\n    radius : float, optional, default: None\n        The radius of the pie, if *radius* is *None* it will be set to 1.\n\n    counterclock : bool, optional, default: True\n        Specify fractions direction, clockwise or counterclockwise.\n\n    wedgeprops : dict, optional, default: None\n        Dict of arguments passed to the wedge objects making the pie.\n        For example, you can pass in ``wedgeprops = {'linewidth': 3}``\n        to set the width of the wedge border lines equal to 3.\n        For more details, look at the doc/arguments of the wedge object.\n        By default ``clip_on=False``.\n\n    textprops : dict, optional, default: None\n        Dict of arguments to pass to the text objects.\n\n    center :  list of float, optional, default: (0, 0)\n        Center position of the chart. Takes value (0, 0) or is a sequence\n        of 2 scalars.\n\n    frame : bool, optional, default: False\n        Plot axes frame with the chart if true.\n\n    rotatelabels : bool, optional, default: False\n        Rotate each label to the angle of the corresponding slice if true.\n\n    Returns\n    -------\n    patches : list\n        A sequence of :class:`matplotlib.patches.Wedge` instances\n\n    texts : list\n        A list of the label :class:`matplotlib.text.Text` instances.\n\n    autotexts : list\n        A list of :class:`~matplotlib.text.Text` instances for the numeric\n        labels. This will only be returned if the parameter *autopct* is\n        not *None*.\n\n    Notes\n    -----\n    The pie chart will probably look best if the figure and axes are\n    square, or the Axes aspect is equal.\n    This method sets the aspect ratio of the axis to \"equal\".\n    The axes aspect ratio can be controlled with `Axes.set_aspect`.\n    \"\"\"\n    self.set_aspect('equal')\n    x = np.asarray(x, np.float32)\n    if x.ndim != 1 and x.squeeze().ndim <= 1:\n        cbook.warn_deprecated('3.1', message='Non-1D inputs to pie() are currently squeeze()d, but this behavior is deprecated since %(since)s and will be removed %(removal)s; pass a 1D array instead.')\n        x = np.atleast_1d(x.squeeze())\n    sx = x.sum()\n    if sx > 1:\n        x = x / sx\n    if labels is None:\n        labels = [''] * len(x)\n    if explode is None:\n        explode = [0] * len(x)\n    if len(x) != len(labels):\n        raise ValueError(\"'label' must be of length 'x'\")\n    if len(x) != len(explode):\n        raise ValueError(\"'explode' must be of length 'x'\")\n    if colors is None:\n        get_next_color = self._get_patches_for_fill.get_next_color\n    else:\n        color_cycle = itertools.cycle(colors)\n\n        def get_next_color():\n            return next(color_cycle)\n    if radius is None:\n        radius = 1\n    if startangle is None:\n        theta1 = 0\n    else:\n        theta1 = startangle / 360.0\n    if wedgeprops is None:\n        wedgeprops = {}\n    wedgeprops.setdefault('clip_on', False)\n    if textprops is None:\n        textprops = {}\n    textprops.setdefault('clip_on', False)\n    texts = []\n    slices = []\n    autotexts = []\n    for (frac, label, expl) in zip(x, labels, explode):\n        (x, y) = center\n        theta2 = theta1 + frac if counterclock else theta1 - frac\n        thetam = 2 * np.pi * 0.5 * (theta1 + theta2)\n        x += expl * math.cos(thetam)\n        y += expl * math.sin(thetam)\n        w = mpatches.Wedge((x, y), radius, 360.0 * min(theta1, theta2), 360.0 * max(theta1, theta2), facecolor=get_next_color(), **wedgeprops)\n        slices.append(w)\n        self.add_patch(w)\n        w.set_label(label)\n        if shadow:\n            shad = mpatches.Shadow(w, -0.02, -0.02)\n            shad.set_zorder(0.9 * w.get_zorder())\n            shad.set_label('_nolegend_')\n            self.add_patch(shad)\n        if labeldistance is not None:\n            xt = x + labeldistance * radius * math.cos(thetam)\n            yt = y + labeldistance * radius * math.sin(thetam)\n            label_alignment_h = 'left' if xt > 0 else 'right'\n            label_alignment_v = 'center'\n            label_rotation = 'horizontal'\n            if rotatelabels:\n                label_alignment_v = 'bottom' if yt > 0 else 'top'\n                label_rotation = np.rad2deg(thetam) + (0 if xt > 0 else 180)\n            props = dict(horizontalalignment=label_alignment_h, verticalalignment=label_alignment_v, rotation=label_rotation, size=rcParams['xtick.labelsize'])\n            props.update(textprops)\n            t = self.text(xt, yt, label, **props)\n            texts.append(t)\n        if autopct is not None:\n            xt = x + pctdistance * radius * math.cos(thetam)\n            yt = y + pctdistance * radius * math.sin(thetam)\n            if isinstance(autopct, str):\n                s = autopct % (100.0 * frac)\n            elif callable(autopct):\n                s = autopct(100.0 * frac)\n            else:\n                raise TypeError('autopct must be callable or a format string')\n            props = dict(horizontalalignment='center', verticalalignment='center')\n            props.update(textprops)\n            t = self.text(xt, yt, s, **props)\n            autotexts.append(t)\n        theta1 = theta2\n    if not frame:\n        self.set_frame_on(False)\n        self.set_xlim((-1.25 + center[0], 1.25 + center[0]))\n        self.set_ylim((-1.25 + center[1], 1.25 + center[1]))\n        self.set_xticks([])\n        self.set_yticks([])\n    if autopct is None:\n        return (slices, texts)\n    else:\n        return (slices, texts, autotexts)",
                            "@_preprocess_data(replace_names=['x', 'y', 'xerr', 'yerr'], label_namer='y')\n@docstring.dedent_interpd\ndef errorbar(self, x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, **kwargs):\n    \"\"\"\n    Plot y versus x as lines and/or markers with attached errorbars.\n\n    *x*, *y* define the data locations, *xerr*, *yerr* define the errorbar\n    sizes. By default, this draws the data markers/lines as well the\n    errorbars. Use fmt='none' to draw errorbars without any data markers.\n\n    Parameters\n    ----------\n    x, y : scalar or array-like\n        The data positions.\n\n    xerr, yerr : scalar or array-like, shape(N,) or shape(2, N), optional\n        The errorbar sizes:\n\n        - scalar: Symmetric +/- values for all data points.\n        - shape(N,): Symmetric +/-values for each data point.\n        - shape(2, N): Separate - and + values for each bar. First row\n          contains the lower errors, the second row contains the upper\n          errors.\n        - *None*: No errorbar.\n\n        Note that all error arrays should have *positive* values.\n\n        See :doc:`/gallery/statistics/errorbar_features`\n        for an example on the usage of ``xerr`` and ``yerr``.\n\n    fmt : str, optional, default: ''\n        The format for the data points / data lines. See `.plot` for\n        details.\n\n        Use 'none' (case insensitive) to plot errorbars without any data\n        markers.\n\n    ecolor : color, optional, default: None\n        The color of the errorbar lines.  If None, use the color of the\n        line connecting the markers.\n\n    elinewidth : scalar, optional, default: None\n        The linewidth of the errorbar lines. If None, the linewidth of\n        the current style is used.\n\n    capsize : scalar, optional, default: None\n        The length of the error bar caps in points. If None, it will take\n        the value from :rc:`errorbar.capsize`.\n\n    capthick : scalar, optional, default: None\n        An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).\n        This setting is a more sensible name for the property that\n        controls the thickness of the error bar cap in points. For\n        backwards compatibility, if *mew* or *markeredgewidth* are given,\n        then they will over-ride *capthick*. This may change in future\n        releases.\n\n    barsabove : bool, optional, default: False\n        If True, will plot the errorbars above the plot\n        symbols. Default is below.\n\n    lolims, uplims, xlolims, xuplims : bool, optional, default: False\n        These arguments can be used to indicate that a value gives only\n        upper/lower limits. In that case a caret symbol is used to\n        indicate this. *lims*-arguments may be of the same type as *xerr*\n        and *yerr*.  To use limits with inverted axes, :meth:`set_xlim`\n        or :meth:`set_ylim` must be called before :meth:`errorbar`.\n\n    errorevery : int or (int, int), optional, default: 1\n        draws error bars on a subset of the data. *errorevery* =N draws\n        error bars on the points (x[::N], y[::N]).\n        *errorevery* =(start, N) draws error bars on the points\n        (x[start::N], y[start::N]). e.g. errorevery=(6, 3)\n        adds error bars to the data at (x[6], x[9], x[12], x[15], ...).\n        Used to avoid overlapping error bars when two series share x-axis\n        values.\n\n    Returns\n    -------\n    container : :class:`~.container.ErrorbarContainer`\n        The container contains:\n\n        - plotline: `.Line2D` instance of x, y plot markers and/or line.\n        - caplines: A tuple of `.Line2D` instances of the error bar caps.\n        - barlinecols: A tuple of\n          :class:`~matplotlib.collections.LineCollection` with the\n          horizontal and vertical error ranges.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All other keyword arguments are passed on to the plot\n        command for the markers. For example, this code makes big red\n        squares with thick green edges::\n\n            x, y, yerr = rand(3, 10)\n            errorbar(x, y, yerr, marker='s', mfc='red',\n                     mec='green', ms=20, mew=4)\n\n        where *mfc*, *mec*, *ms* and *mew* are aliases for the longer\n        property names, *markerfacecolor*, *markeredgecolor*, *markersize*\n        and *markeredgewidth*.\n\n        Valid kwargs for the marker properties are `.Lines2D` properties:\n\n        %(_Line2D_docstr)s\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n    kwargs = {k: v for (k, v) in kwargs.items() if v is not None}\n    kwargs.setdefault('zorder', 2)\n    try:\n        (offset, errorevery) = errorevery\n    except TypeError:\n        offset = 0\n    if errorevery < 1 or int(errorevery) != errorevery:\n        raise ValueError('errorevery must be positive integer or tuple of integers')\n    if int(offset) != offset:\n        raise ValueError(\"errorevery's starting index must be an integer\")\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    plot_line = fmt.lower() != 'none'\n    label = kwargs.pop('label', None)\n    if fmt == '':\n        fmt_style_kwargs = {}\n    else:\n        fmt_style_kwargs = {k: v for (k, v) in zip(('linestyle', 'marker', 'color'), _process_plot_format(fmt)) if v is not None}\n    if fmt == 'none':\n        fmt_style_kwargs.pop('color')\n    if 'color' in kwargs or 'color' in fmt_style_kwargs or ecolor is not None:\n        base_style = {}\n        if 'color' in kwargs:\n            base_style['color'] = kwargs.pop('color')\n    else:\n        base_style = next(self._get_lines.prop_cycler)\n    base_style['label'] = '_nolegend_'\n    base_style.update(fmt_style_kwargs)\n    if 'color' not in base_style:\n        base_style['color'] = 'C0'\n    if ecolor is None:\n        ecolor = base_style['color']\n    if not np.iterable(x):\n        x = [x]\n    if not np.iterable(y):\n        y = [y]\n    if xerr is not None:\n        if not np.iterable(xerr):\n            xerr = [xerr] * len(x)\n    if yerr is not None:\n        if not np.iterable(yerr):\n            yerr = [yerr] * len(y)\n    plot_line_style = {**base_style, **kwargs, 'zorder': kwargs['zorder'] - 0.1 if barsabove else kwargs['zorder'] + 0.1}\n    eb_lines_style = dict(base_style)\n    eb_lines_style.pop('marker', None)\n    eb_lines_style.pop('linestyle', None)\n    eb_lines_style['color'] = ecolor\n    if elinewidth:\n        eb_lines_style['linewidth'] = elinewidth\n    elif 'linewidth' in kwargs:\n        eb_lines_style['linewidth'] = kwargs['linewidth']\n    for key in ('transform', 'alpha', 'zorder', 'rasterized'):\n        if key in kwargs:\n            eb_lines_style[key] = kwargs[key]\n    eb_cap_style = dict(base_style)\n    eb_cap_style.pop('marker', None)\n    eb_lines_style.pop('markerfacecolor', None)\n    eb_lines_style.pop('markeredgewidth', None)\n    eb_lines_style.pop('markeredgecolor', None)\n    eb_cap_style.pop('ls', None)\n    eb_cap_style['linestyle'] = 'none'\n    if capsize is None:\n        capsize = rcParams['errorbar.capsize']\n    if capsize > 0:\n        eb_cap_style['markersize'] = 2.0 * capsize\n    if capthick is not None:\n        eb_cap_style['markeredgewidth'] = capthick\n    for key in ('markeredgewidth', 'transform', 'alpha', 'zorder', 'rasterized'):\n        if key in kwargs:\n            eb_cap_style[key] = kwargs[key]\n    eb_cap_style['color'] = ecolor\n    data_line = None\n    if plot_line:\n        data_line = mlines.Line2D(x, y, **plot_line_style)\n        self.add_line(data_line)\n    barcols = []\n    caplines = []\n    lolims = np.broadcast_to(lolims, len(x)).astype(bool)\n    uplims = np.broadcast_to(uplims, len(x)).astype(bool)\n    xlolims = np.broadcast_to(xlolims, len(x)).astype(bool)\n    xuplims = np.broadcast_to(xuplims, len(x)).astype(bool)\n    everymask = np.zeros(len(x), bool)\n    everymask[offset::errorevery] = True\n\n    def xywhere(xs, ys, mask):\n        \"\"\"\n        return xs[mask], ys[mask] where mask is True but xs and\n        ys are not arrays\n        \"\"\"\n        assert len(xs) == len(ys)\n        assert len(xs) == len(mask)\n        xs = [thisx for (thisx, b) in zip(xs, mask) if b]\n        ys = [thisy for (thisy, b) in zip(ys, mask) if b]\n        return (xs, ys)\n\n    def extract_err(err, data):\n        \"\"\"\n        Private function to parse *err* and subtract/add it to *data*.\n\n        Both *err* and *data* are already iterables at this point.\n        \"\"\"\n        try:\n            (a, b) = err\n            iter(a)\n            iter(b)\n        except (TypeError, ValueError):\n            a = b = err\n        a_sh = np.shape(a)\n        b_sh = np.shape(b)\n        if len(a_sh) > 2 or (len(a_sh) == 2 and a_sh[1] != 1) or len(b_sh) > 2 or (len(b_sh) == 2 and b_sh[1] != 1):\n            raise ValueError('err must be a scalar or a 1D or (2, n) array-like')\n        if len(a_sh) == 2 or len(b_sh) == 2:\n            cbook.warn_deprecated('3.1', message='Support for passing a (n, 1)-shaped error array to errorbar() is deprecated since Matplotlib %(since)s and will be removed %(removal)s; pass a 1D array instead.')\n        for e in [a, b]:\n            if len(data) != len(e):\n                raise ValueError(f'The lengths of the data ({len(data)}) and the error {len(e)} do not match')\n        low = [v - e for (v, e) in zip(data, a)]\n        high = [v + e for (v, e) in zip(data, b)]\n        return (low, high)\n    if xerr is not None:\n        (left, right) = extract_err(xerr, x)\n        noxlims = ~(xlolims | xuplims)\n        if noxlims.any() or len(noxlims) == 0:\n            (yo, _) = xywhere(y, right, noxlims & everymask)\n            (lo, ro) = xywhere(left, right, noxlims & everymask)\n            barcols.append(self.hlines(yo, lo, ro, **eb_lines_style))\n            if capsize > 0:\n                caplines.append(mlines.Line2D(lo, yo, marker='|', **eb_cap_style))\n                caplines.append(mlines.Line2D(ro, yo, marker='|', **eb_cap_style))\n        if xlolims.any():\n            (yo, _) = xywhere(y, right, xlolims & everymask)\n            (lo, ro) = xywhere(x, right, xlolims & everymask)\n            barcols.append(self.hlines(yo, lo, ro, **eb_lines_style))\n            (rightup, yup) = xywhere(right, y, xlolims & everymask)\n            if self.xaxis_inverted():\n                marker = mlines.CARETLEFTBASE\n            else:\n                marker = mlines.CARETRIGHTBASE\n            caplines.append(mlines.Line2D(rightup, yup, ls='None', marker=marker, **eb_cap_style))\n            if capsize > 0:\n                (xlo, ylo) = xywhere(x, y, xlolims & everymask)\n                caplines.append(mlines.Line2D(xlo, ylo, marker='|', **eb_cap_style))\n        if xuplims.any():\n            (yo, _) = xywhere(y, right, xuplims & everymask)\n            (lo, ro) = xywhere(left, x, xuplims & everymask)\n            barcols.append(self.hlines(yo, lo, ro, **eb_lines_style))\n            (leftlo, ylo) = xywhere(left, y, xuplims & everymask)\n            if self.xaxis_inverted():\n                marker = mlines.CARETRIGHTBASE\n            else:\n                marker = mlines.CARETLEFTBASE\n            caplines.append(mlines.Line2D(leftlo, ylo, ls='None', marker=marker, **eb_cap_style))\n            if capsize > 0:\n                (xup, yup) = xywhere(x, y, xuplims & everymask)\n                caplines.append(mlines.Line2D(xup, yup, marker='|', **eb_cap_style))\n    if yerr is not None:\n        (lower, upper) = extract_err(yerr, y)\n        noylims = ~(lolims | uplims)\n        if noylims.any() or len(noylims) == 0:\n            (xo, _) = xywhere(x, lower, noylims & everymask)\n            (lo, uo) = xywhere(lower, upper, noylims & everymask)\n            barcols.append(self.vlines(xo, lo, uo, **eb_lines_style))\n            if capsize > 0:\n                caplines.append(mlines.Line2D(xo, lo, marker='_', **eb_cap_style))\n                caplines.append(mlines.Line2D(xo, uo, marker='_', **eb_cap_style))\n        if lolims.any():\n            (xo, _) = xywhere(x, lower, lolims & everymask)\n            (lo, uo) = xywhere(y, upper, lolims & everymask)\n            barcols.append(self.vlines(xo, lo, uo, **eb_lines_style))\n            (xup, upperup) = xywhere(x, upper, lolims & everymask)\n            if self.yaxis_inverted():\n                marker = mlines.CARETDOWNBASE\n            else:\n                marker = mlines.CARETUPBASE\n            caplines.append(mlines.Line2D(xup, upperup, ls='None', marker=marker, **eb_cap_style))\n            if capsize > 0:\n                (xlo, ylo) = xywhere(x, y, lolims & everymask)\n                caplines.append(mlines.Line2D(xlo, ylo, marker='_', **eb_cap_style))\n        if uplims.any():\n            (xo, _) = xywhere(x, lower, uplims & everymask)\n            (lo, uo) = xywhere(lower, y, uplims & everymask)\n            barcols.append(self.vlines(xo, lo, uo, **eb_lines_style))\n            (xlo, lowerlo) = xywhere(x, lower, uplims & everymask)\n            if self.yaxis_inverted():\n                marker = mlines.CARETUPBASE\n            else:\n                marker = mlines.CARETDOWNBASE\n            caplines.append(mlines.Line2D(xlo, lowerlo, ls='None', marker=marker, **eb_cap_style))\n            if capsize > 0:\n                (xup, yup) = xywhere(x, y, uplims & everymask)\n                caplines.append(mlines.Line2D(xup, yup, marker='_', **eb_cap_style))\n    for l in caplines:\n        self.add_line(l)\n    self._request_autoscale_view()\n    errorbar_container = ErrorbarContainer((data_line, tuple(caplines), tuple(barcols)), has_xerr=xerr is not None, has_yerr=yerr is not None, label=label)\n    self.containers.append(errorbar_container)\n    return errorbar_container",
                            "@cbook._rename_parameter('3.1', 'manage_xticks', 'manage_ticks')\n@_preprocess_data()\ndef boxplot(self, x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None):\n    \"\"\"\n    Make a box and whisker plot.\n\n    Make a box and whisker plot for each column of ``x`` or each\n    vector in sequence ``x``.  The box extends from the lower to\n    upper quartile values of the data, with a line at the median.\n    The whiskers extend from the box to show the range of the\n    data.  Flier points are those past the end of the whiskers.\n\n    Parameters\n    ----------\n    x : Array or a sequence of vectors.\n        The input data.\n\n    notch : bool, optional (False)\n        If `True`, will produce a notched box plot. Otherwise, a\n        rectangular boxplot is produced. The notches represent the\n        confidence interval (CI) around the median. See the entry\n        for the ``bootstrap`` parameter for information regarding\n        how the locations of the notches are computed.\n\n        .. note::\n\n            In cases where the values of the CI are less than the\n            lower quartile or greater than the upper quartile, the\n            notches will extend beyond the box, giving it a\n            distinctive \"flipped\" appearance. This is expected\n            behavior and consistent with other statistical\n            visualization packages.\n\n    sym : str, optional\n        The default symbol for flier points. Enter an empty string\n        ('') if you don't want to show fliers. If `None`, then the\n        fliers default to 'b+'  If you want more control use the\n        flierprops kwarg.\n\n    vert : bool, optional (True)\n        If `True` (default), makes the boxes vertical. If `False`,\n        everything is drawn horizontally.\n\n    whis : float or (float, float) (default = 1.5)\n        The position of the whiskers.\n\n        If a float, the lower whisker is at the lowest datum above\n        ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum\n        below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and\n        third quartiles.  The default value of ``whis = 1.5`` corresponds\n        to Tukey's original definition of boxplots.\n\n        If a pair of floats, they indicate the percentiles at which to\n        draw the whiskers (e.g., (5, 95)).  In particular, setting this to\n        (0, 100) results in whiskers covering the whole range of the data.\n        \"range\" is a deprecated synonym for (0, 100).\n\n        In the edge case where ``Q1 == Q3``, *whis* is automatically set\n        to (0, 100) (cover the whole range of the data) if *autorange* is\n        True.\n\n        Beyond the whiskers, data are considered outliers and are plotted\n        as individual points.\n\n    bootstrap : int, optional\n        Specifies whether to bootstrap the confidence intervals\n        around the median for notched boxplots. If ``bootstrap`` is\n        None, no bootstrapping is performed, and notches are\n        calculated using a Gaussian-based asymptotic approximation\n        (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\n        Kendall and Stuart, 1967). Otherwise, bootstrap specifies\n        the number of times to bootstrap the median to determine its\n        95% confidence intervals. Values between 1000 and 10000 are\n        recommended.\n\n    usermedians : array-like, optional\n        An array or sequence whose first dimension (or length) is\n        compatible with ``x``. This overrides the medians computed\n        by matplotlib for each element of ``usermedians`` that is not\n        `None`. When an element of ``usermedians`` is None, the median\n        will be computed by matplotlib as normal.\n\n    conf_intervals : array-like, optional\n        Array or sequence whose first dimension (or length) is\n        compatible with ``x`` and whose second dimension is 2. When\n        the an element of ``conf_intervals`` is not None, the\n        notch locations computed by matplotlib are overridden\n        (provided ``notch`` is `True`). When an element of\n        ``conf_intervals`` is `None`, the notches are computed by the\n        method specified by the other kwargs (e.g., ``bootstrap``).\n\n    positions : array-like, optional\n        Sets the positions of the boxes. The ticks and limits are\n        automatically set to match the positions. Defaults to\n        `range(1, N+1)` where N is the number of boxes to be drawn.\n\n    widths : scalar or array-like\n        Sets the width of each box either with a scalar or a\n        sequence. The default is 0.5, or ``0.15*(distance between\n        extreme positions)``, if that is smaller.\n\n    patch_artist : bool, optional (False)\n        If `False` produces boxes with the Line2D artist. Otherwise,\n        boxes and drawn with Patch artists.\n\n    labels : sequence, optional\n        Labels for each dataset. Length must be compatible with\n        dimensions of ``x``.\n\n    manage_ticks : bool, optional (True)\n        If True, the tick locations and labels will be adjusted to match\n        the boxplot positions.\n\n    autorange : bool, optional (False)\n        When `True` and the data are distributed such that the 25th and\n        75th percentiles are equal, ``whis`` is set to (0, 100) such\n        that the whisker ends are at the minimum and maximum of the data.\n\n    meanline : bool, optional (False)\n        If `True` (and ``showmeans`` is `True`), will try to render\n        the mean as a line spanning the full width of the box\n        according to ``meanprops`` (see below). Not recommended if\n        ``shownotches`` is also True. Otherwise, means will be shown\n        as points.\n\n    zorder : scalar, optional (None)\n        Sets the zorder of the boxplot.\n\n    Other Parameters\n    ----------------\n    showcaps : bool, optional (True)\n        Show the caps on the ends of whiskers.\n    showbox : bool, optional (True)\n        Show the central box.\n    showfliers : bool, optional (True)\n        Show the outliers beyond the caps.\n    showmeans : bool, optional (False)\n        Show the arithmetic means.\n    capprops : dict, optional (None)\n        Specifies the style of the caps.\n    boxprops : dict, optional (None)\n        Specifies the style of the box.\n    whiskerprops : dict, optional (None)\n        Specifies the style of the whiskers.\n    flierprops : dict, optional (None)\n        Specifies the style of the fliers.\n    medianprops : dict, optional (None)\n        Specifies the style of the median.\n    meanprops : dict, optional (None)\n        Specifies the style of the mean.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the boxplot to a list\n      of the `.Line2D` instances created. That dictionary has the\n      following keys (assuming vertical boxplots):\n\n      - ``boxes``: the main body of the boxplot showing the\n        quartiles and the median's confidence intervals if\n        enabled.\n\n      - ``medians``: horizontal lines at the median of each box.\n\n      - ``whiskers``: the vertical lines extending to the most\n        extreme, non-outlier data points.\n\n      - ``caps``: the horizontal lines at the ends of the\n        whiskers.\n\n      - ``fliers``: points representing data that extend beyond\n        the whiskers (fliers).\n\n      - ``means``: points or lines representing the means.\n\n    \"\"\"\n    if whis is None:\n        whis = rcParams['boxplot.whiskers']\n    if bootstrap is None:\n        bootstrap = rcParams['boxplot.bootstrap']\n    bxpstats = cbook.boxplot_stats(x, whis=whis, bootstrap=bootstrap, labels=labels, autorange=autorange)\n    if notch is None:\n        notch = rcParams['boxplot.notch']\n    if vert is None:\n        vert = rcParams['boxplot.vertical']\n    if patch_artist is None:\n        patch_artist = rcParams['boxplot.patchartist']\n    if meanline is None:\n        meanline = rcParams['boxplot.meanline']\n    if showmeans is None:\n        showmeans = rcParams['boxplot.showmeans']\n    if showcaps is None:\n        showcaps = rcParams['boxplot.showcaps']\n    if showbox is None:\n        showbox = rcParams['boxplot.showbox']\n    if showfliers is None:\n        showfliers = rcParams['boxplot.showfliers']\n    if boxprops is None:\n        boxprops = {}\n    if whiskerprops is None:\n        whiskerprops = {}\n    if capprops is None:\n        capprops = {}\n    if medianprops is None:\n        medianprops = {}\n    if meanprops is None:\n        meanprops = {}\n    if flierprops is None:\n        flierprops = {}\n    if patch_artist:\n        boxprops['linestyle'] = 'solid'\n        if 'color' in boxprops:\n            boxprops['edgecolor'] = boxprops.pop('color')\n    if sym is not None:\n        if sym == '':\n            flierprops = dict(linestyle='none', marker='', color='none')\n            showfliers = False\n        else:\n            (_, marker, color) = _process_plot_format(sym)\n            if marker is not None:\n                flierprops['marker'] = marker\n            if color is not None:\n                flierprops['color'] = color\n                flierprops['markerfacecolor'] = color\n                flierprops['markeredgecolor'] = color\n    if usermedians is not None:\n        if len(np.ravel(usermedians)) != len(bxpstats) or np.shape(usermedians)[0] != len(bxpstats):\n            raise ValueError('usermedians length not compatible with x')\n        else:\n            for (stats, med) in zip(bxpstats, usermedians):\n                if med is not None:\n                    stats['med'] = med\n    if conf_intervals is not None:\n        if np.shape(conf_intervals)[0] != len(bxpstats):\n            err_mess = 'conf_intervals length not compatible with x'\n            raise ValueError(err_mess)\n        else:\n            for (stats, ci) in zip(bxpstats, conf_intervals):\n                if ci is not None:\n                    if len(ci) != 2:\n                        raise ValueError('each confidence interval must have two values')\n                    else:\n                        if ci[0] is not None:\n                            stats['cilo'] = ci[0]\n                        if ci[1] is not None:\n                            stats['cihi'] = ci[1]\n    artists = self.bxp(bxpstats, positions=positions, widths=widths, vert=vert, patch_artist=patch_artist, shownotches=notch, showmeans=showmeans, showcaps=showcaps, showbox=showbox, boxprops=boxprops, flierprops=flierprops, medianprops=medianprops, meanprops=meanprops, meanline=meanline, showfliers=showfliers, capprops=capprops, whiskerprops=whiskerprops, manage_ticks=manage_ticks, zorder=zorder)\n    return artists",
                            "@cbook._rename_parameter('3.1', 'manage_xticks', 'manage_ticks')\ndef bxp(self, bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None):\n    \"\"\"\n    Drawing function for box and whisker plots.\n\n    Make a box and whisker plot for each column of *x* or each\n    vector in sequence *x*.  The box extends from the lower to\n    upper quartile values of the data, with a line at the median.\n    The whiskers extend from the box to show the range of the\n    data.  Flier points are those past the end of the whiskers.\n\n    Parameters\n    ----------\n    bxpstats : list of dicts\n      A list of dictionaries containing stats for each boxplot.\n      Required keys are:\n\n      - ``med``: The median (scalar float).\n\n      - ``q1``: The first quartile (25th percentile) (scalar\n        float).\n\n      - ``q3``: The third quartile (75th percentile) (scalar\n        float).\n\n      - ``whislo``: Lower bound of the lower whisker (scalar\n        float).\n\n      - ``whishi``: Upper bound of the upper whisker (scalar\n        float).\n\n      Optional keys are:\n\n      - ``mean``: The mean (scalar float). Needed if\n        ``showmeans=True``.\n\n      - ``fliers``: Data beyond the whiskers (sequence of floats).\n        Needed if ``showfliers=True``.\n\n      - ``cilo`` & ``cihi``: Lower and upper confidence intervals\n        about the median. Needed if ``shownotches=True``.\n\n      - ``label``: Name of the dataset (string). If available,\n        this will be used a tick label for the boxplot\n\n    positions : array-like, default = [1, 2, ..., n]\n      Sets the positions of the boxes. The ticks and limits\n      are automatically set to match the positions.\n\n    widths : array-like, default = None\n      Either a scalar or a vector and sets the width of each\n      box. The default is ``0.15*(distance between extreme\n      positions)``, clipped to no less than 0.15 and no more than\n      0.5.\n\n    vert : bool, default = True\n      If `True` (default), makes the boxes vertical.  If `False`,\n      makes horizontal boxes.\n\n    patch_artist : bool, default = False\n      If `False` produces boxes with the `.Line2D` artist.\n      If `True` produces boxes with the `~matplotlib.patches.Patch` artist.\n\n    shownotches : bool, default = False\n      If `False` (default), produces a rectangular box plot.\n      If `True`, will produce a notched box plot\n\n    showmeans : bool, default = False\n      If `True`, will toggle on the rendering of the means\n\n    showcaps  : bool, default = True\n      If `True`, will toggle on the rendering of the caps\n\n    showbox  : bool, default = True\n      If `True`, will toggle on the rendering of the box\n\n    showfliers : bool, default = True\n      If `True`, will toggle on the rendering of the fliers\n\n    boxprops : dict or None (default)\n      If provided, will set the plotting style of the boxes\n\n    whiskerprops : dict or None (default)\n      If provided, will set the plotting style of the whiskers\n\n    capprops : dict or None (default)\n      If provided, will set the plotting style of the caps\n\n    flierprops : dict or None (default)\n      If provided will set the plotting style of the fliers\n\n    medianprops : dict or None (default)\n      If provided, will set the plotting style of the medians\n\n    meanprops : dict or None (default)\n      If provided, will set the plotting style of the means\n\n    meanline : bool, default = False\n      If `True` (and *showmeans* is `True`), will try to render the mean\n      as a line spanning the full width of the box according to\n      *meanprops*. Not recommended if *shownotches* is also True.\n      Otherwise, means will be shown as points.\n\n    manage_ticks : bool, default = True\n      If True, the tick locations and labels will be adjusted to match the\n      boxplot positions.\n\n    zorder : scalar, default = None\n      The zorder of the resulting boxplot.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the boxplot to a list\n      of the `.Line2D` instances created. That dictionary has the\n      following keys (assuming vertical boxplots):\n\n      - ``boxes``: the main body of the boxplot showing the\n        quartiles and the median's confidence intervals if\n        enabled.\n\n      - ``medians``: horizontal lines at the median of each box.\n\n      - ``whiskers``: the vertical lines extending to the most\n        extreme, non-outlier data points.\n\n      - ``caps``: the horizontal lines at the ends of the\n        whiskers.\n\n      - ``fliers``: points representing data that extend beyond\n        the whiskers (fliers).\n\n      - ``means``: points or lines representing the means.\n\n    Examples\n    --------\n    .. plot:: gallery/statistics/bxp.py\n\n    \"\"\"\n    whiskers = []\n    caps = []\n    boxes = []\n    medians = []\n    means = []\n    fliers = []\n    datalabels = []\n    if zorder is None:\n        zorder = mlines.Line2D.zorder\n    zdelta = 0.1\n\n    def line_props_with_rcdefaults(subkey, explicit, zdelta=0):\n        d = {k.split('.')[-1]: v for (k, v) in rcParams.items() if k.startswith(f'boxplot.{subkey}')}\n        d['zorder'] = zorder + zdelta\n        if explicit is not None:\n            d.update(cbook.normalize_kwargs(explicit, mlines.Line2D._alias_map))\n        return d\n    if patch_artist:\n        final_boxprops = dict(linestyle=rcParams['boxplot.boxprops.linestyle'], linewidth=rcParams['boxplot.boxprops.linewidth'], edgecolor=rcParams['boxplot.boxprops.color'], facecolor='white' if rcParams['_internal.classic_mode'] else rcParams['patch.facecolor'], zorder=zorder)\n        if boxprops is not None:\n            final_boxprops.update(cbook.normalize_kwargs(boxprops, mpatches.PathPatch._alias_map))\n    else:\n        final_boxprops = line_props_with_rcdefaults('boxprops', boxprops)\n    final_whiskerprops = line_props_with_rcdefaults('whiskerprops', whiskerprops)\n    final_capprops = line_props_with_rcdefaults('capprops', capprops)\n    final_flierprops = line_props_with_rcdefaults('flierprops', flierprops)\n    final_medianprops = line_props_with_rcdefaults('medianprops', medianprops, zdelta)\n    final_meanprops = line_props_with_rcdefaults('meanprops', meanprops, zdelta)\n    removed_prop = 'marker' if meanline else 'linestyle'\n    if meanprops is None or removed_prop not in meanprops:\n        final_meanprops[removed_prop] = ''\n\n    def to_vc(xs, ys):\n        verts = np.append(np.column_stack([xs, ys]), [(0, 0)], 0)\n        codes = [mpath.Path.MOVETO] + [mpath.Path.LINETO] * (len(verts) - 2) + [mpath.Path.CLOSEPOLY]\n        return (verts, codes)\n\n    def patch_list(xs, ys, **kwargs):\n        (verts, codes) = to_vc(xs, ys)\n        path = mpath.Path(verts, codes)\n        patch = mpatches.PathPatch(path, **kwargs)\n        self.add_artist(patch)\n        return [patch]\n    if vert:\n\n        def doplot(*args, **kwargs):\n            return self.plot(*args, **kwargs)\n\n        def dopatch(xs, ys, **kwargs):\n            return patch_list(xs, ys, **kwargs)\n    else:\n\n        def doplot(*args, **kwargs):\n            shuffled = []\n            for i in range(0, len(args), 2):\n                shuffled.extend([args[i + 1], args[i]])\n            return self.plot(*shuffled, **kwargs)\n\n        def dopatch(xs, ys, **kwargs):\n            (xs, ys) = (ys, xs)\n            return patch_list(xs, ys, **kwargs)\n    N = len(bxpstats)\n    datashape_message = 'List of boxplot statistics and `{0}` values must have same the length'\n    if positions is None:\n        positions = list(range(1, N + 1))\n    elif len(positions) != N:\n        raise ValueError(datashape_message.format('positions'))\n    positions = np.array(positions)\n    if len(positions) > 0 and (not isinstance(positions[0], Number)):\n        raise TypeError('positions should be an iterable of numbers')\n    if widths is None:\n        widths = [np.clip(0.15 * np.ptp(positions), 0.15, 0.5)] * N\n    elif np.isscalar(widths):\n        widths = [widths] * N\n    elif len(widths) != N:\n        raise ValueError(datashape_message.format('widths'))\n    for (pos, width, stats) in zip(positions, widths, bxpstats):\n        datalabels.append(stats.get('label', pos))\n        whisker_x = np.ones(2) * pos\n        whiskerlo_y = np.array([stats['q1'], stats['whislo']])\n        whiskerhi_y = np.array([stats['q3'], stats['whishi']])\n        cap_left = pos - width * 0.25\n        cap_right = pos + width * 0.25\n        cap_x = np.array([cap_left, cap_right])\n        cap_lo = np.ones(2) * stats['whislo']\n        cap_hi = np.ones(2) * stats['whishi']\n        box_left = pos - width * 0.5\n        box_right = pos + width * 0.5\n        med_y = [stats['med'], stats['med']]\n        if shownotches:\n            box_x = [box_left, box_right, box_right, cap_right, box_right, box_right, box_left, box_left, cap_left, box_left, box_left]\n            box_y = [stats['q1'], stats['q1'], stats['cilo'], stats['med'], stats['cihi'], stats['q3'], stats['q3'], stats['cihi'], stats['med'], stats['cilo'], stats['q1']]\n            med_x = cap_x\n        else:\n            box_x = [box_left, box_right, box_right, box_left, box_left]\n            box_y = [stats['q1'], stats['q1'], stats['q3'], stats['q3'], stats['q1']]\n            med_x = [box_left, box_right]\n        if showbox:\n            if patch_artist:\n                boxes.extend(dopatch(box_x, box_y, **final_boxprops))\n            else:\n                boxes.extend(doplot(box_x, box_y, **final_boxprops))\n        whiskers.extend(doplot(whisker_x, whiskerlo_y, **final_whiskerprops))\n        whiskers.extend(doplot(whisker_x, whiskerhi_y, **final_whiskerprops))\n        if showcaps:\n            caps.extend(doplot(cap_x, cap_lo, **final_capprops))\n            caps.extend(doplot(cap_x, cap_hi, **final_capprops))\n        medians.extend(doplot(med_x, med_y, **final_medianprops))\n        if showmeans:\n            if meanline:\n                means.extend(doplot([box_left, box_right], [stats['mean'], stats['mean']], **final_meanprops))\n            else:\n                means.extend(doplot([pos], [stats['mean']], **final_meanprops))\n        if showfliers:\n            flier_x = np.full(len(stats['fliers']), pos, dtype=np.float64)\n            flier_y = stats['fliers']\n            fliers.extend(doplot(flier_x, flier_y, **final_flierprops))\n    if manage_ticks:\n        axis_name = 'x' if vert else 'y'\n        interval = getattr(self.dataLim, f'interval{axis_name}')\n        axis = getattr(self, f'{axis_name}axis')\n        positions = axis.convert_units(positions)\n        interval[:] = (min(interval[0], min(positions) - 0.5), max(interval[1], max(positions) + 0.5))\n        for (median, position) in zip(medians, positions):\n            getattr(median.sticky_edges, axis_name).extend([position - 0.5, position + 0.5])\n        locator = axis.get_major_locator()\n        if not isinstance(axis.get_major_locator(), mticker.FixedLocator):\n            locator = mticker.FixedLocator([])\n            axis.set_major_locator(locator)\n        locator.locs = np.array([*locator.locs, *positions])\n        formatter = axis.get_major_formatter()\n        if not isinstance(axis.get_major_formatter(), mticker.FixedFormatter):\n            formatter = mticker.FixedFormatter([])\n            axis.set_major_formatter(formatter)\n        formatter.seq = [*formatter.seq, *datalabels]\n        self._request_autoscale_view(scalex=self._autoscaleXon, scaley=self._autoscaleYon)\n    return dict(whiskers=whiskers, caps=caps, boxes=boxes, medians=medians, fliers=fliers, means=means)",
                            "@staticmethod\ndef _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n    \"\"\"\n    Helper function to process color related arguments of `.Axes.scatter`.\n\n    Argument precedence for facecolors:\n\n    - c (if not None)\n    - kwargs['facecolors']\n    - kwargs['facecolor']\n    - kwargs['color'] (==kwcolor)\n    - 'b' if in classic mode else the result of ``get_next_color_func()``\n\n    Argument precedence for edgecolors:\n\n    - edgecolors (is an explicit kw argument in scatter())\n    - kwargs['edgecolor']\n    - kwargs['color'] (==kwcolor)\n    - 'face' if not in classic mode else None\n\n    Parameters\n    ----------\n    c : color or sequence or sequence of color or None\n        See argument description of `.Axes.scatter`.\n    edgecolors : color or sequence of color or {'face', 'none'} or None\n        See argument description of `.Axes.scatter`.\n    kwargs : dict\n        Additional kwargs. If these keys exist, we pop and process them:\n        'facecolors', 'facecolor', 'edgecolor', 'color'\n        Note: The dict is modified by this function.\n    xsize : int\n        The size of the x and y arrays passed to `.Axes.scatter`.\n    get_next_color_func : callable\n        A callable that returns a color. This color is used as facecolor\n        if no other color is provided.\n\n        Note, that this is a function rather than a fixed color value to\n        support conditional evaluation of the next color.  As of the\n        current implementation obtaining the next color from the\n        property cycle advances the cycle. This must only happen if we\n        actually use the color, which will only be decided within this\n        method.\n\n    Returns\n    -------\n    c\n        The input *c* if it was not *None*, else a color derived from the\n        other inputs or defaults.\n    colors : array(N, 4) or None\n        The facecolors as RGBA values, or *None* if a colormap is used.\n    edgecolors\n        The edgecolor.\n\n    \"\"\"\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n    kwcolor = kwargs.pop('color', None)\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color' kwarg but not both; they differ but their functionalities overlap.\")\n    if kwcolor is not None:\n        try:\n            mcolors.to_rgba_array(kwcolor)\n        except ValueError:\n            raise ValueError(\"'color' kwarg must be an color or sequence of color specs.  For a sequence of values to be color-mapped, use the 'c' argument instead.\")\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n    if edgecolors is None and (not rcParams['_internal.classic_mode']):\n        edgecolors = rcParams['scatter.edgecolors']\n    c_was_none = c is None\n    if c is None:\n        c = facecolors if facecolors is not None else 'b' if rcParams['_internal.classic_mode'] else get_next_color_func()\n    c_is_string_or_strings = isinstance(c, str) or (isinstance(c, collections.abc.Iterable) and len(c) > 0 and isinstance(cbook.safe_first_element(c), str))\n\n    def invalid_shape_exception(csize, xsize):\n        return ValueError(f\"'c' argument has {csize} elements, which is inconsistent with 'x' and 'y' with size {xsize}.\")\n    c_is_mapped = False\n    valid_shape = True\n    if not c_was_none and kwcolor is None and (not c_is_string_or_strings):\n        try:\n            c = np.asanyarray(c, dtype=float)\n        except ValueError:\n            pass\n        else:\n            if c.size == xsize:\n                c = c.ravel()\n                c_is_mapped = True\n            else:\n                if c.shape in ((3,), (4,)):\n                    _log.warning(\"'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\")\n                valid_shape = False\n    if not c_is_mapped:\n        try:\n            colors = mcolors.to_rgba_array(c)\n        except ValueError:\n            if not valid_shape:\n                raise invalid_shape_exception(c.size, xsize)\n            raise ValueError(f\"'c' argument must be a color, a sequence of colors, or a sequence of numbers, not {c}\")\n        else:\n            if len(colors) not in (0, 1, xsize):\n                raise invalid_shape_exception(len(colors), xsize)\n    else:\n        colors = None\n    return (c, colors, edgecolors)",
                            "@_preprocess_data(replace_names=['x', 'y', 's', 'linewidths', 'edgecolors', 'c', 'facecolor', 'facecolors', 'color'], label_namer='y')\n@cbook._delete_parameter('3.2', 'verts')\ndef scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, plotnonfinite=False, **kwargs):\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\n    Parameters\n    ----------\n    x, y : scalar or array-like, shape (n, )\n        The data positions.\n\n    s : scalar or array-like, shape (n, ), optional\n        The marker size in points**2.\n        Default is ``rcParams['lines.markersize'] ** 2``.\n\n    c : color, sequence, or sequence of colors, optional\n        The marker color. Possible values:\n\n        - A single color format string.\n        - A sequence of colors of length n.\n        - A scalar or sequence of n numbers to be mapped to colors using\n          *cmap* and *norm*.\n        - A 2-D array in which the rows are RGB or RGBA.\n\n        Note that *c* should not be a single numeric RGB or RGBA sequence\n        because that is indistinguishable from an array of values to be\n        colormapped. If you want to specify the same RGB or RGBA value for\n        all points, use a 2-D array with a single row.  Otherwise, value-\n        matching will have precedence in case of a size matching with *x*\n        and *y*.\n\n        Defaults to ``None``. In that case the marker color is determined\n        by the value of ``color``, ``facecolor`` or ``facecolors``. In case\n        those are not specified or ``None``, the marker color is determined\n        by the next color of the ``Axes``' current \"shape and fill\" color\n        cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n\n    marker : `~matplotlib.markers.MarkerStyle`, optional\n        The marker style. *marker* can be either an instance of the class\n        or the text shorthand for a particular marker.\n        Defaults to ``None``, in which case it takes the value of\n        :rc:`scatter.marker` = 'o'.\n        See `~matplotlib.markers` for more information about marker styles.\n\n    cmap : `~matplotlib.colors.Colormap`, optional, default: None\n        A `.Colormap` instance or registered colormap name. *cmap* is only\n        used if *c* is an array of floats. If ``None``, defaults to rc\n        ``image.cmap``.\n\n    norm : `~matplotlib.colors.Normalize`, optional, default: None\n        A `.Normalize` instance is used to scale luminance data to 0, 1.\n        *norm* is only used if *c* is an array of floats. If *None*, use\n        the default `.colors.Normalize`.\n\n    vmin, vmax : scalar, optional, default: None\n        *vmin* and *vmax* are used in conjunction with *norm* to normalize\n        luminance data. If None, the respective min and max of the color\n        array is used. *vmin* and *vmax* are ignored if you pass a *norm*\n        instance.\n\n    alpha : scalar, optional, default: None\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    linewidths : scalar or array-like, optional, default: None\n        The linewidth of the marker edges. Note: The default *edgecolors*\n        is 'face'. You may want to change this as well.\n        If *None*, defaults to :rc:`lines.linewidth`.\n\n    edgecolors : {'face', 'none', *None*} or color or sequence of color, optional.\n        The edge color of the marker. Possible values:\n\n        - 'face': The edge color will always be the same as the face color.\n        - 'none': No patch boundary will be drawn.\n        - A Matplotlib color or sequence of color.\n\n        Defaults to ``None``, in which case it takes the value of\n        :rc:`scatter.edgecolors` = 'face'.\n\n        For non-filled markers, the *edgecolors* kwarg is ignored and\n        forced to 'face' internally.\n\n    plotnonfinite : boolean, optional, default: False\n        Set to plot points with nonfinite *c*, in conjunction with\n        `~matplotlib.colors.Colormap.set_bad`.\n\n    Returns\n    -------\n    paths : `~matplotlib.collections.PathCollection`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.collections.Collection` properties\n\n    See Also\n    --------\n    plot : To plot scatter plots when markers are identical in size and\n        color.\n\n    Notes\n    -----\n    * The `.plot` function will be faster for scatterplots where markers\n      don't vary in size or color.\n\n    * Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n      case all masks will be combined and only unmasked points will be\n      plotted.\n\n    * Fundamentally, scatter works with 1-D arrays; *x*, *y*, *s*, and *c*\n      may be input as N-D arrays, but within scatter they will be\n      flattened. The exception is *c*, which will be flattened only if its\n      size matches the size of *x* and *y*.\n\n    \"\"\"\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    x = np.ma.ravel(x)\n    y = np.ma.ravel(y)\n    if x.size != y.size:\n        raise ValueError('x and y must be the same size')\n    if s is None:\n        s = 20 if rcParams['_internal.classic_mode'] else rcParams['lines.markersize'] ** 2.0\n    s = np.ma.ravel(s)\n    if len(s) not in (1, x.size):\n        raise ValueError('s must be a scalar, or the same size as x and y')\n    (c, colors, edgecolors) = self._parse_scatter_color_args(c, edgecolors, kwargs, x.size, get_next_color_func=self._get_patches_for_fill.get_next_color)\n    if plotnonfinite and colors is None:\n        c = np.ma.masked_invalid(c)\n        (x, y, s, edgecolors, linewidths) = cbook._combine_masks(x, y, s, edgecolors, linewidths)\n    else:\n        (x, y, s, c, colors, edgecolors, linewidths) = cbook._combine_masks(x, y, s, c, colors, edgecolors, linewidths)\n    scales = s\n    if marker is None:\n        marker = rcParams['scatter.marker']\n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n    path = marker_obj.get_path().transformed(marker_obj.get_transform())\n    if not marker_obj.is_filled():\n        edgecolors = 'face'\n        linewidths = rcParams['lines.linewidth']\n    offsets = np.ma.column_stack([x, y])\n    collection = mcoll.PathCollection((path,), scales, facecolors=colors, edgecolors=edgecolors, linewidths=linewidths, offsets=offsets, transOffset=kwargs.pop('transform', self.transData), alpha=alpha)\n    collection.set_transform(mtransforms.IdentityTransform())\n    collection.update(kwargs)\n    if colors is None:\n        collection.set_array(c)\n        collection.set_cmap(cmap)\n        collection.set_norm(norm)\n        if vmin is not None or vmax is not None:\n            collection.set_clim(vmin, vmax)\n        else:\n            collection.autoscale_None()\n    if rcParams['_internal.classic_mode']:\n        if self._xmargin < 0.05 and x.size > 0:\n            self.set_xmargin(0.05)\n        if self._ymargin < 0.05 and x.size > 0:\n            self.set_ymargin(0.05)\n    self.add_collection(collection)\n    self._request_autoscale_view()\n    return collection",
                            "@_preprocess_data(replace_names=['x', 'y'], label_namer='y')\n@docstring.dedent_interpd\ndef hexbin(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=np.mean, mincnt=None, marginals=False, **kwargs):\n    \"\"\"\n    Make a 2D hexagonal binning plot of points *x*, *y*.\n\n    If *C* is *None*, the value of the hexagon is determined by the number\n    of points in the hexagon. Otherwise, *C* specifies values at the\n    coordinate (x[i], y[i]). For each hexagon, these values are reduced\n    using *reduce_C_function*.\n\n    Parameters\n    ----------\n    x, y : array-like\n        The data positions. *x* and *y* must be of the same length.\n\n    C : array-like, optional\n        If given, these values are accumulated in the bins. Otherwise,\n        every point has a value of 1. Must be of the same length as *x*\n        and *y*.\n\n    gridsize : int or (int, int), default: 100\n        If a single int, the number of hexagons in the *x*-direction.\n        The number of hexagons in the *y*-direction is chosen such that\n        the hexagons are approximately regular.\n\n        Alternatively, if a tuple (*nx*, *ny*), the number of hexagons\n        in the *x*-direction and the *y*-direction.\n\n    bins : 'log' or int or sequence, default: *None*\n        Discretization of the hexagon values.\n\n        - If *None*, no binning is applied; the color of each hexagon\n          directly corresponds to its count value.\n        - If 'log', use a logarithmic scale for the color map.\n          Internally, :math:`log_{10}(i+1)` is used to determine the\n          hexagon color. This is equivalent to ``norm=LogNorm()``.\n        - If an integer, divide the counts in the specified number\n          of bins, and color the hexagons accordingly.\n        - If a sequence of values, the values of the lower bound of\n          the bins to be used.\n\n    xscale : {'linear', 'log'}, default: 'linear'\n        Use a linear or log10 scale on the horizontal axis.\n\n    yscale : {'linear', 'log'}, default: 'linear'\n        Use a linear or log10 scale on the vertical axis.\n\n    mincnt : int > 0, default: *None*\n        If not *None*, only display cells with more than *mincnt*\n        number of points in the cell.\n\n    marginals : bool, default: *False*\n        If marginals is *True*, plot the marginal density as\n        colormapped rectangles along the bottom of the x-axis and\n        left of the y-axis.\n\n    extent : float, default: *None*\n        The limits of the bins. The default assigns the limits\n        based on *gridsize*, *x*, *y*, *xscale* and *yscale*.\n\n        If *xscale* or *yscale* is set to 'log', the limits are\n        expected to be the exponent for a power of 10. E.g. for\n        x-limits of 1 and 50 in 'linear' scale and y-limits\n        of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\n        Order of scalars is (left, right, bottom, top).\n\n    Other Parameters\n    ----------------\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        The Colormap instance or registered colormap name used to map\n        the bin values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the bin values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : float, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of the bins in case of the default\n        linear scaling). This is ignored if *norm* is given.\n\n    alpha : float between 0 and 1, optional\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    linewidths : float, default: *None*\n        If *None*, defaults to 1.0.\n\n    edgecolors : {'face', 'none', *None*} or color, default: 'face'\n        The color of the hexagon edges. Possible values are:\n\n        - 'face': Draw the edges in the same color as the fill color.\n        - 'none': No edges are drawn. This can sometimes lead to unsightly\n          unpainted pixels between the hexagons.\n        - *None*: Draw outlines in the default color.\n        - An explicit matplotlib color.\n\n    reduce_C_function : callable, default is `numpy.mean`\n        The function to aggregate *C* within the bins. It is ignored if\n        *C* is not given. This must have the signature::\n\n            def reduce_C_function(C: array) -> float\n\n        Commonly used functions are:\n\n        - `numpy.mean`: average of the points\n        - `numpy.sum`: integral of the point values\n        - `numpy.max`: value taken from the largest point\n\n    **kwargs : `~matplotlib.collections.PolyCollection` properties\n        All other keyword arguments are passed on to `.PolyCollection`:\n\n        %(PolyCollection)s\n\n    Returns\n    -------\n    polycollection : `~matplotlib.collections.PolyCollection`\n        A `.PolyCollection` defining the hexagonal bins.\n\n        - `.PolyCollection.get_offset` contains a Mx2 array containing\n          the x, y positions of the M hexagon centers.\n        - `.PolyCollection.get_array` contains the values of the M\n          hexagons.\n\n        If *marginals* is *True*, horizontal\n        bar and vertical bar (both PolyCollections) will be attached\n        to the return collection as attributes *hbar* and *vbar*.\n\n    \"\"\"\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    (x, y, C) = cbook.delete_masked_points(x, y, C)\n    if np.iterable(gridsize):\n        (nx, ny) = gridsize\n    else:\n        nx = gridsize\n        ny = int(nx / math.sqrt(3))\n    x = np.array(x, float)\n    y = np.array(y, float)\n    if xscale == 'log':\n        if np.any(x <= 0.0):\n            raise ValueError('x contains non-positive values, so can not be log-scaled')\n        x = np.log10(x)\n    if yscale == 'log':\n        if np.any(y <= 0.0):\n            raise ValueError('y contains non-positive values, so can not be log-scaled')\n        y = np.log10(y)\n    if extent is not None:\n        (xmin, xmax, ymin, ymax) = extent\n    else:\n        (xmin, xmax) = (np.min(x), np.max(x)) if len(x) else (0, 1)\n        (ymin, ymax) = (np.min(y), np.max(y)) if len(y) else (0, 1)\n        (xmin, xmax) = mtransforms.nonsingular(xmin, xmax, expander=0.1)\n        (ymin, ymax) = mtransforms.nonsingular(ymin, ymax, expander=0.1)\n    padding = 1e-09 * (xmax - xmin)\n    xmin -= padding\n    xmax += padding\n    sx = (xmax - xmin) / nx\n    sy = (ymax - ymin) / ny\n    if marginals:\n        xorig = x.copy()\n        yorig = y.copy()\n    x = (x - xmin) / sx\n    y = (y - ymin) / sy\n    ix1 = np.round(x).astype(int)\n    iy1 = np.round(y).astype(int)\n    ix2 = np.floor(x).astype(int)\n    iy2 = np.floor(y).astype(int)\n    nx1 = nx + 1\n    ny1 = ny + 1\n    nx2 = nx\n    ny2 = ny\n    n = nx1 * ny1 + nx2 * ny2\n    d1 = (x - ix1) ** 2 + 3.0 * (y - iy1) ** 2\n    d2 = (x - ix2 - 0.5) ** 2 + 3.0 * (y - iy2 - 0.5) ** 2\n    bdist = d1 < d2\n    if C is None:\n        lattice1 = np.zeros((nx1, ny1))\n        lattice2 = np.zeros((nx2, ny2))\n        c1 = (0 <= ix1) & (ix1 < nx1) & (0 <= iy1) & (iy1 < ny1) & bdist\n        c2 = (0 <= ix2) & (ix2 < nx2) & (0 <= iy2) & (iy2 < ny2) & ~bdist\n        np.add.at(lattice1, (ix1[c1], iy1[c1]), 1)\n        np.add.at(lattice2, (ix2[c2], iy2[c2]), 1)\n        if mincnt is not None:\n            lattice1[lattice1 < mincnt] = np.nan\n            lattice2[lattice2 < mincnt] = np.nan\n        accum = np.concatenate([lattice1.ravel(), lattice2.ravel()])\n        good_idxs = ~np.isnan(accum)\n    else:\n        if mincnt is None:\n            mincnt = 0\n        lattice1 = np.empty((nx1, ny1), dtype=object)\n        for i in range(nx1):\n            for j in range(ny1):\n                lattice1[i, j] = []\n        lattice2 = np.empty((nx2, ny2), dtype=object)\n        for i in range(nx2):\n            for j in range(ny2):\n                lattice2[i, j] = []\n        for i in range(len(x)):\n            if bdist[i]:\n                if 0 <= ix1[i] < nx1 and 0 <= iy1[i] < ny1:\n                    lattice1[ix1[i], iy1[i]].append(C[i])\n            elif 0 <= ix2[i] < nx2 and 0 <= iy2[i] < ny2:\n                lattice2[ix2[i], iy2[i]].append(C[i])\n        for i in range(nx1):\n            for j in range(ny1):\n                vals = lattice1[i, j]\n                if len(vals) > mincnt:\n                    lattice1[i, j] = reduce_C_function(vals)\n                else:\n                    lattice1[i, j] = np.nan\n        for i in range(nx2):\n            for j in range(ny2):\n                vals = lattice2[i, j]\n                if len(vals) > mincnt:\n                    lattice2[i, j] = reduce_C_function(vals)\n                else:\n                    lattice2[i, j] = np.nan\n        accum = np.hstack((lattice1.astype(float).ravel(), lattice2.astype(float).ravel()))\n        good_idxs = ~np.isnan(accum)\n    offsets = np.zeros((n, 2), float)\n    offsets[:nx1 * ny1, 0] = np.repeat(np.arange(nx1), ny1)\n    offsets[:nx1 * ny1, 1] = np.tile(np.arange(ny1), nx1)\n    offsets[nx1 * ny1:, 0] = np.repeat(np.arange(nx2) + 0.5, ny2)\n    offsets[nx1 * ny1:, 1] = np.tile(np.arange(ny2), nx2) + 0.5\n    offsets[:, 0] *= sx\n    offsets[:, 1] *= sy\n    offsets[:, 0] += xmin\n    offsets[:, 1] += ymin\n    offsets = offsets[good_idxs, :]\n    accum = accum[good_idxs]\n    polygon = [sx, sy / 3] * np.array([[0.5, -0.5], [0.5, 0.5], [0.0, 1.0], [-0.5, 0.5], [-0.5, -0.5], [0.0, -1.0]])\n    if linewidths is None:\n        linewidths = [1.0]\n    if xscale == 'log' or yscale == 'log':\n        polygons = np.expand_dims(polygon, 0) + np.expand_dims(offsets, 1)\n        if xscale == 'log':\n            polygons[:, :, 0] = 10.0 ** polygons[:, :, 0]\n            xmin = 10.0 ** xmin\n            xmax = 10.0 ** xmax\n            self.set_xscale(xscale)\n        if yscale == 'log':\n            polygons[:, :, 1] = 10.0 ** polygons[:, :, 1]\n            ymin = 10.0 ** ymin\n            ymax = 10.0 ** ymax\n            self.set_yscale(yscale)\n        collection = mcoll.PolyCollection(polygons, edgecolors=edgecolors, linewidths=linewidths)\n    else:\n        collection = mcoll.PolyCollection([polygon], edgecolors=edgecolors, linewidths=linewidths, offsets=offsets, transOffset=mtransforms.IdentityTransform(), offset_position='data')\n    if bins == 'log':\n        if norm is not None:\n            cbook._warn_external(\"Only one of 'bins' and 'norm' arguments can be supplied, ignoring bins={}\".format(bins))\n        else:\n            norm = mcolors.LogNorm()\n        bins = None\n    if isinstance(norm, mcolors.LogNorm):\n        if (accum == 0).any():\n            accum += 1\n    if norm is not None:\n        if norm.vmin is None and norm.vmax is None:\n            norm.autoscale(accum)\n    if bins is not None:\n        if not np.iterable(bins):\n            (minimum, maximum) = (min(accum), max(accum))\n            bins -= 1\n            bins = minimum + (maximum - minimum) * np.arange(bins) / bins\n        bins = np.sort(bins)\n        accum = bins.searchsorted(accum)\n    collection.set_array(accum)\n    collection.set_cmap(cmap)\n    collection.set_norm(norm)\n    collection.set_alpha(alpha)\n    collection.update(kwargs)\n    if vmin is not None or vmax is not None:\n        collection.set_clim(vmin, vmax)\n    else:\n        collection.autoscale_None()\n    corners = ((xmin, ymin), (xmax, ymax))\n    self.update_datalim(corners)\n    self._request_autoscale_view(tight=True)\n    self.add_collection(collection, autolim=False)\n    if not marginals:\n        return collection\n    if C is None:\n        C = np.ones(len(x))\n\n    def coarse_bin(x, y, coarse):\n        ind = coarse.searchsorted(x).clip(0, len(coarse) - 1)\n        mus = np.zeros(len(coarse))\n        for i in range(len(coarse)):\n            yi = y[ind == i]\n            if len(yi) > 0:\n                mu = reduce_C_function(yi)\n            else:\n                mu = np.nan\n            mus[i] = mu\n        return mus\n    coarse = np.linspace(xmin, xmax, gridsize)\n    xcoarse = coarse_bin(xorig, C, coarse)\n    valid = ~np.isnan(xcoarse)\n    (verts, values) = ([], [])\n    for (i, val) in enumerate(xcoarse):\n        thismin = coarse[i]\n        if i < len(coarse) - 1:\n            thismax = coarse[i + 1]\n        else:\n            thismax = thismin + np.diff(coarse)[-1]\n        if not valid[i]:\n            continue\n        verts.append([(thismin, 0), (thismin, 0.05), (thismax, 0.05), (thismax, 0)])\n        values.append(val)\n    values = np.array(values)\n    trans = self.get_xaxis_transform(which='grid')\n    hbar = mcoll.PolyCollection(verts, transform=trans, edgecolors='face')\n    hbar.set_array(values)\n    hbar.set_cmap(cmap)\n    hbar.set_norm(norm)\n    hbar.set_alpha(alpha)\n    hbar.update(kwargs)\n    self.add_collection(hbar, autolim=False)\n    coarse = np.linspace(ymin, ymax, gridsize)\n    ycoarse = coarse_bin(yorig, C, coarse)\n    valid = ~np.isnan(ycoarse)\n    (verts, values) = ([], [])\n    for (i, val) in enumerate(ycoarse):\n        thismin = coarse[i]\n        if i < len(coarse) - 1:\n            thismax = coarse[i + 1]\n        else:\n            thismax = thismin + np.diff(coarse)[-1]\n        if not valid[i]:\n            continue\n        verts.append([(0, thismin), (0.0, thismax), (0.05, thismax), (0.05, thismin)])\n        values.append(val)\n    values = np.array(values)\n    trans = self.get_yaxis_transform(which='grid')\n    vbar = mcoll.PolyCollection(verts, transform=trans, edgecolors='face')\n    vbar.set_array(values)\n    vbar.set_cmap(cmap)\n    vbar.set_norm(norm)\n    vbar.set_alpha(alpha)\n    vbar.update(kwargs)\n    self.add_collection(vbar, autolim=False)\n    collection.hbar = hbar\n    collection.vbar = vbar\n\n    def on_changed(collection):\n        hbar.set_cmap(collection.get_cmap())\n        hbar.set_clim(collection.get_clim())\n        vbar.set_cmap(collection.get_cmap())\n        vbar.set_clim(collection.get_clim())\n    collection.callbacksSM.connect('changed', on_changed)\n    return collection",
                            "@docstring.dedent_interpd\ndef arrow(self, x, y, dx, dy, **kwargs):\n    \"\"\"\n    Add an arrow to the axes.\n\n    This draws an arrow from ``(x, y)`` to ``(x+dx, y+dy)``.\n\n    Parameters\n    ----------\n    x, y : float\n        The x and y coordinates of the arrow base.\n    dx, dy : float\n        The length of the arrow along x and y direction.\n\n    Returns\n    -------\n    arrow : `.FancyArrow`\n        The created `.FancyArrow` object.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Optional kwargs (inherited from `.FancyArrow` patch) control the\n        arrow construction and properties:\n\n    %(FancyArrow)s\n\n    Notes\n    -----\n    The resulting arrow is affected by the axes aspect ratio and limits.\n    This may produce an arrow whose head is not square with its stem. To\n    create an arrow whose head is square with its stem,\n    use :meth:`annotate` for example:\n\n    >>> ax.annotate(\"\", xy=(0.5, 0.5), xytext=(0, 0),\n    ...             arrowprops=dict(arrowstyle=\"->\"))\n\n    \"\"\"\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    dx = self.convert_xunits(dx)\n    dy = self.convert_yunits(dy)\n    a = mpatches.FancyArrow(x, y, dx, dy, **kwargs)\n    self.add_artist(a)\n    return a",
                            "@docstring.copy(mquiver.QuiverKey.__init__)\ndef quiverkey(self, Q, X, Y, U, label, **kw):\n    qk = mquiver.QuiverKey(Q, X, Y, U, label, **kw)\n    self.add_artist(qk)\n    return qk",
                            "def _quiver_units(self, args, kw):\n    if len(args) > 3:\n        (x, y) = args[0:2]\n        self._process_unit_info(xdata=x, ydata=y, kwargs=kw)\n        x = self.convert_xunits(x)\n        y = self.convert_yunits(y)\n        return (x, y) + args[2:]\n    return args",
                            "@_preprocess_data()\ndef quiver(self, *args, **kw):\n    args = self._quiver_units(args, kw)\n    q = mquiver.Quiver(self, *args, **kw)\n    self.add_collection(q, autolim=True)\n    self._request_autoscale_view()\n    return q",
                            "@_preprocess_data()\n@docstring.dedent_interpd\ndef barbs(self, *args, **kw):\n    \"\"\"\n    %(barbs_doc)s\n    \"\"\"\n    args = self._quiver_units(args, kw)\n    b = mquiver.Barbs(self, *args, **kw)\n    self.add_collection(b, autolim=True)\n    self._request_autoscale_view()\n    return b",
                            "def fill(self, *args, data=None, **kwargs):\n    \"\"\"\n    Plot filled polygons.\n\n    Parameters\n    ----------\n    *args : sequence of x, y, [color]\n        Each polygon is defined by the lists of *x* and *y* positions of\n        its nodes, optionally followed by a *color* specifier. See\n        :mod:`matplotlib.colors` for supported color specifiers. The\n        standard color cycle is used for polygons without a color\n        specifier.\n\n        You can plot multiple polygons by providing multiple *x*, *y*,\n        *[color]* groups.\n\n        For example, each of the following is legal::\n\n            ax.fill(x, y)                    # a polygon with default color\n            ax.fill(x, y, \"b\")               # a blue polygon\n            ax.fill(x, y, x2, y2)            # two polygons\n            ax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n\n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*, e.g.::\n\n            ax.fill(\"time\", \"signal\",\n                    data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n\n    Returns\n    -------\n    a list of :class:`~matplotlib.patches.Polygon`\n\n    Other Parameters\n    ----------------\n    **kwargs : :class:`~matplotlib.patches.Polygon` properties\n\n    Notes\n    -----\n    Use :meth:`fill_between` if you would like to fill the region between\n    two curves.\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n    patches = [*self._get_patches_for_fill(*args, data=data, **kwargs)]\n    for poly in patches:\n        self.add_patch(poly)\n    self._request_autoscale_view()\n    return patches",
                            "@_preprocess_data(replace_names=['x', 'y1', 'y2', 'where'])\n@docstring.dedent_interpd\ndef fill_between(self, x, y1, y2=0, where=None, interpolate=False, step=None, **kwargs):\n    \"\"\"\n    Fill the area between two horizontal curves.\n\n    The curves are defined by the points (*x*, *y1*) and (*x*, *y2*). This\n    creates one or multiple polygons describing the filled area.\n\n    You may exclude some horizontal sections from filling using *where*.\n\n    By default, the edges connect the given points directly. Use *step* if\n    the filling should be a step function, i.e. constant in between *x*.\n\n\n    Parameters\n    ----------\n    x : array (length N)\n        The x coordinates of the nodes defining the curves.\n\n    y1 : array (length N) or scalar\n        The y coordinates of the nodes defining the first curve.\n\n    y2 : array (length N) or scalar, optional, default: 0\n        The y coordinates of the nodes defining the second curve.\n\n    where : array of bool (length N), optional, default: None\n        Define *where* to exclude some horizontal regions from being\n        filled. The filled regions are defined by the coordinates\n        ``x[where]``.  More precisely, fill between ``x[i]`` and ``x[i+1]``\n        if ``where[i] and where[i+1]``.  Note that this definition implies\n        that an isolated *True* value between two *False* values in\n        *where* will not result in filling.  Both sides of the *True*\n        position remain unfilled due to the adjacent *False* values.\n\n    interpolate : bool, optional\n        This option is only relevant if *where* is used and the two curves\n        are crossing each other.\n\n        Semantically, *where* is often used for *y1* > *y2* or similar.\n        By default, the nodes of the polygon defining the filled region\n        will only be placed at the positions in the *x* array.  Such a\n        polygon cannot describe the above semantics close to the\n        intersection.  The x-sections containing the intersection are\n        simply clipped.\n\n        Setting *interpolate* to *True* will calculate the actual\n        intersection point and extend the filled region up to this point.\n\n    step : {'pre', 'post', 'mid'}, optional\n        Define *step* if the filling should be a step function,\n        i.e. constant in between *x*. The value determines where the\n        step will occur:\n\n        - 'pre': The y value is continued constantly to the left from\n          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n          value ``y[i]``.\n        - 'post': The y value is continued constantly to the right from\n          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n          value ``y[i]``.\n        - 'mid': Steps occur half-way between the *x* positions.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All other keyword arguments are passed on to `.PolyCollection`.\n        They control the `.Polygon` properties:\n\n        %(PolyCollection)s\n\n    Returns\n    -------\n    `.PolyCollection`\n        A `.PolyCollection` containing the plotted polygons.\n\n    See Also\n    --------\n    fill_betweenx : Fill between two sets of x-values.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n\n    \"\"\"\n    if not rcParams['_internal.classic_mode']:\n        kwargs = cbook.normalize_kwargs(kwargs, mcoll.Collection)\n        if not any((c in kwargs for c in ('color', 'facecolor'))):\n            kwargs['facecolor'] = self._get_patches_for_fill.get_next_color()\n    self._process_unit_info(xdata=x, ydata=y1, kwargs=kwargs)\n    self._process_unit_info(ydata=y2)\n    x = ma.masked_invalid(self.convert_xunits(x))\n    y1 = ma.masked_invalid(self.convert_yunits(y1))\n    y2 = ma.masked_invalid(self.convert_yunits(y2))\n    for (name, array) in [('x', x), ('y1', y1), ('y2', y2)]:\n        if array.ndim > 1:\n            raise ValueError('Input passed into argument \"%r\"' % name + 'is not 1-dimensional.')\n    if where is None:\n        where = True\n    else:\n        where = np.asarray(where, dtype=bool)\n        if where.size != x.size:\n            cbook.warn_deprecated('3.2', message='The parameter where must have the same size as x in fill_between(). This will become an error in future versions of Matplotlib.')\n    where = where & ~functools.reduce(np.logical_or, map(np.ma.getmask, [x, y1, y2]))\n    (x, y1, y2) = np.broadcast_arrays(np.atleast_1d(x), y1, y2)\n    polys = []\n    for (ind0, ind1) in cbook.contiguous_regions(where):\n        xslice = x[ind0:ind1]\n        y1slice = y1[ind0:ind1]\n        y2slice = y2[ind0:ind1]\n        if step is not None:\n            step_func = cbook.STEP_LOOKUP_MAP['steps-' + step]\n            (xslice, y1slice, y2slice) = step_func(xslice, y1slice, y2slice)\n        if not len(xslice):\n            continue\n        N = len(xslice)\n        X = np.zeros((2 * N + 2, 2), float)\n        if interpolate:\n\n            def get_interp_point(ind):\n                im1 = max(ind - 1, 0)\n                x_values = x[im1:ind + 1]\n                diff_values = y1[im1:ind + 1] - y2[im1:ind + 1]\n                y1_values = y1[im1:ind + 1]\n                if len(diff_values) == 2:\n                    if np.ma.is_masked(diff_values[1]):\n                        return (x[im1], y1[im1])\n                    elif np.ma.is_masked(diff_values[0]):\n                        return (x[ind], y1[ind])\n                diff_order = diff_values.argsort()\n                diff_root_x = np.interp(0, diff_values[diff_order], x_values[diff_order])\n                x_order = x_values.argsort()\n                diff_root_y = np.interp(diff_root_x, x_values[x_order], y1_values[x_order])\n                return (diff_root_x, diff_root_y)\n            start = get_interp_point(ind0)\n            end = get_interp_point(ind1)\n        else:\n            start = (xslice[0], y2slice[0])\n            end = (xslice[-1], y2slice[-1])\n        X[0] = start\n        X[N + 1] = end\n        X[1:N + 1, 0] = xslice\n        X[1:N + 1, 1] = y1slice\n        X[N + 2:, 0] = xslice[::-1]\n        X[N + 2:, 1] = y2slice[::-1]\n        polys.append(X)\n    collection = mcoll.PolyCollection(polys, **kwargs)\n    XY1 = np.array([x[where], y1[where]]).T\n    XY2 = np.array([x[where], y2[where]]).T\n    self.dataLim.update_from_data_xy(XY1, self.ignore_existing_data_limits, updatex=True, updatey=True)\n    self.ignore_existing_data_limits = False\n    self.dataLim.update_from_data_xy(XY2, self.ignore_existing_data_limits, updatex=False, updatey=True)\n    self.add_collection(collection, autolim=False)\n    self._request_autoscale_view()\n    return collection",
                            "@_preprocess_data(replace_names=['y', 'x1', 'x2', 'where'])\n@docstring.dedent_interpd\ndef fill_betweenx(self, y, x1, x2=0, where=None, step=None, interpolate=False, **kwargs):\n    \"\"\"\n    Fill the area between two vertical curves.\n\n    The curves are defined by the points (*x1*, *y*) and (*x2*, *y*). This\n    creates one or multiple polygons describing the filled area.\n\n    You may exclude some vertical sections from filling using *where*.\n\n    By default, the edges connect the given points directly. Use *step* if\n    the filling should be a step function, i.e. constant in between *y*.\n\n\n    Parameters\n    ----------\n    y : array (length N)\n        The y coordinates of the nodes defining the curves.\n\n    x1 : array (length N) or scalar\n        The x coordinates of the nodes defining the first curve.\n\n    x2 : array (length N) or scalar, optional, default: 0\n        The x coordinates of the nodes defining the second curve.\n\n    where : array of bool (length N), optional, default: None\n        Define *where* to exclude some vertical regions from being\n        filled. The filled regions are defined by the coordinates\n        ``y[where]``.  More precisely, fill between ``y[i]`` and ``y[i+1]``\n        if ``where[i] and where[i+1]``.  Note that this definition implies\n        that an isolated *True* value between two *False* values in\n        *where* will not result in filling.  Both sides of the *True*\n        position remain unfilled due to the adjacent *False* values.\n\n    interpolate : bool, optional\n        This option is only relevant if *where* is used and the two curves\n        are crossing each other.\n\n        Semantically, *where* is often used for *x1* > *x2* or similar.\n        By default, the nodes of the polygon defining the filled region\n        will only be placed at the positions in the *y* array.  Such a\n        polygon cannot describe the above semantics close to the\n        intersection.  The y-sections containing the intersection are\n        simply clipped.\n\n        Setting *interpolate* to *True* will calculate the actual\n        intersection point and extend the filled region up to this point.\n\n    step : {'pre', 'post', 'mid'}, optional\n        Define *step* if the filling should be a step function,\n        i.e. constant in between *y*. The value determines where the\n        step will occur:\n\n        - 'pre': The y value is continued constantly to the left from\n          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n          value ``y[i]``.\n        - 'post': The y value is continued constantly to the right from\n          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n          value ``y[i]``.\n        - 'mid': Steps occur half-way between the *x* positions.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All other keyword arguments are passed on to `.PolyCollection`.\n        They control the `.Polygon` properties:\n\n        %(PolyCollection)s\n\n    Returns\n    -------\n    `.PolyCollection`\n        A `.PolyCollection` containing the plotted polygons.\n\n    See Also\n    --------\n    fill_between : Fill between two sets of y-values.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n\n    \"\"\"\n    if not rcParams['_internal.classic_mode']:\n        kwargs = cbook.normalize_kwargs(kwargs, mcoll.Collection)\n        if not any((c in kwargs for c in ('color', 'facecolor'))):\n            kwargs['facecolor'] = self._get_patches_for_fill.get_next_color()\n    self._process_unit_info(ydata=y, xdata=x1, kwargs=kwargs)\n    self._process_unit_info(xdata=x2)\n    y = ma.masked_invalid(self.convert_yunits(y))\n    x1 = ma.masked_invalid(self.convert_xunits(x1))\n    x2 = ma.masked_invalid(self.convert_xunits(x2))\n    for (name, array) in [('y', y), ('x1', x1), ('x2', x2)]:\n        if array.ndim > 1:\n            raise ValueError('Input passed into argument \"%r\"' % name + 'is not 1-dimensional.')\n    if where is None:\n        where = True\n    else:\n        where = np.asarray(where, dtype=bool)\n        if where.size != y.size:\n            cbook.warn_deprecated('3.2', message='The parameter where must have the same size as y in fill_between(). This will become an error in future versions of Matplotlib.')\n    where = where & ~functools.reduce(np.logical_or, map(np.ma.getmask, [y, x1, x2]))\n    (y, x1, x2) = np.broadcast_arrays(np.atleast_1d(y), x1, x2)\n    polys = []\n    for (ind0, ind1) in cbook.contiguous_regions(where):\n        yslice = y[ind0:ind1]\n        x1slice = x1[ind0:ind1]\n        x2slice = x2[ind0:ind1]\n        if step is not None:\n            step_func = cbook.STEP_LOOKUP_MAP['steps-' + step]\n            (yslice, x1slice, x2slice) = step_func(yslice, x1slice, x2slice)\n        if not len(yslice):\n            continue\n        N = len(yslice)\n        Y = np.zeros((2 * N + 2, 2), float)\n        if interpolate:\n\n            def get_interp_point(ind):\n                im1 = max(ind - 1, 0)\n                y_values = y[im1:ind + 1]\n                diff_values = x1[im1:ind + 1] - x2[im1:ind + 1]\n                x1_values = x1[im1:ind + 1]\n                if len(diff_values) == 2:\n                    if np.ma.is_masked(diff_values[1]):\n                        return (x1[im1], y[im1])\n                    elif np.ma.is_masked(diff_values[0]):\n                        return (x1[ind], y[ind])\n                diff_order = diff_values.argsort()\n                diff_root_y = np.interp(0, diff_values[diff_order], y_values[diff_order])\n                y_order = y_values.argsort()\n                diff_root_x = np.interp(diff_root_y, y_values[y_order], x1_values[y_order])\n                return (diff_root_x, diff_root_y)\n            start = get_interp_point(ind0)\n            end = get_interp_point(ind1)\n        else:\n            start = (x2slice[0], yslice[0])\n            end = (x2slice[-1], yslice[-1])\n        Y[0] = start\n        Y[N + 1] = end\n        Y[1:N + 1, 0] = x1slice\n        Y[1:N + 1, 1] = yslice\n        Y[N + 2:, 0] = x2slice[::-1]\n        Y[N + 2:, 1] = yslice[::-1]\n        polys.append(Y)\n    collection = mcoll.PolyCollection(polys, **kwargs)\n    X1Y = np.array([x1[where], y[where]]).T\n    X2Y = np.array([x2[where], y[where]]).T\n    self.dataLim.update_from_data_xy(X1Y, self.ignore_existing_data_limits, updatex=True, updatey=True)\n    self.ignore_existing_data_limits = False\n    self.dataLim.update_from_data_xy(X2Y, self.ignore_existing_data_limits, updatex=True, updatey=False)\n    self.add_collection(collection, autolim=False)\n    self._request_autoscale_view()\n    return collection",
                            "@_preprocess_data()\n@cbook._delete_parameter('3.1', 'shape')\n@cbook._delete_parameter('3.1', 'imlim')\ndef imshow(self, X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, shape=None, filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None, **kwargs):\n    \"\"\"\n    Display an image, i.e. data on a 2D regular raster.\n\n    Parameters\n    ----------\n    X : array-like or PIL image\n        The image data. Supported array shapes are:\n\n        - (M, N): an image with scalar data. The data is visualized\n          using a colormap.\n        - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n        - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n          i.e. including transparency.\n\n        The first two dimensions (M, N) define the rows and columns of\n        the image.\n\n        Out-of-range RGB(A) values are clipped.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        The Colormap instance or registered colormap name used to map\n        scalar data to colors. This parameter is ignored for RGB(A) data.\n        Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The `Normalize` instance used to scale scalar data to the [0, 1]\n        range before mapping to colors using *cmap*. By default, a linear\n        scaling mapping the lowest value to 0 and the highest to 1 is used.\n        This parameter is ignored for RGB(A) data.\n\n    aspect : {'equal', 'auto'} or float, optional\n        Controls the aspect ratio of the axes. The aspect is of particular\n        relevance for images since it may distort the image, i.e. pixel\n        will not be square.\n\n        This parameter is a shortcut for explicitly calling\n        `.Axes.set_aspect`. See there for further details.\n\n        - 'equal': Ensures an aspect ratio of 1. Pixels will be square\n          (unless pixel sizes are explicitly made non-square in data\n          coordinates using *extent*).\n        - 'auto': The axes is kept fixed and the aspect is adjusted so\n          that the data fit in the axes. In general, this will result in\n          non-square pixels.\n\n        If not given, use :rc:`image.aspect`.\n\n    interpolation : str, optional\n        The interpolation method used. If *None*, :rc:`image.interpolation`\n        is used.\n\n        Supported values are 'none', 'antialiased', 'nearest', 'bilinear',\n        'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',\n        'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',\n        'sinc', 'lanczos'.\n\n        If *interpolation* is 'none', then no interpolation is performed\n        on the Agg, ps, pdf and svg backends. Other backends will fall back\n        to 'nearest'. Note that most SVG renders perform interpolation at\n        rendering and that the default interpolation method they implement\n        may differ.\n\n        If *interpolation* is the default 'antialiased', then 'nearest'\n        interpolation is used if the image is upsampled by more than a\n        factor of three (i.e. the number of display pixels is at least\n        three times the size of the data array).  If the upsampling rate is\n        smaller than 3, or the image is downsampled, then 'hanning'\n        interpolation is used to act as an anti-aliasing filter, unless the\n        image happens to be upsampled by exactly a factor of two or one.\n\n        See\n        :doc:`/gallery/images_contours_and_fields/interpolation_methods`\n        for an overview of the supported interpolation methods, and\n        :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n        a discussion of image antialiasing.\n\n        Some interpolation methods require an additional radius parameter,\n        which can be set by *filterrad*. Additionally, the antigrain image\n        resize filter is controlled by the parameter *filternorm*.\n\n    alpha : scalar or array-like, optional\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n        If *alpha* is an array, the alpha blending values are applied pixel\n        by pixel, and *alpha* must have the same shape as *X*.\n\n    vmin, vmax : scalar, optional\n        When using scalar data and no explicit *norm*, *vmin* and *vmax*\n        define the data range that the colormap covers. By default,\n        the colormap covers the complete value range of the supplied\n        data. *vmin*, *vmax* are ignored if the *norm* parameter is used.\n\n    origin : {'upper', 'lower'}, optional\n        Place the [0, 0] index of the array in the upper left or lower left\n        corner of the axes. The convention 'upper' is typically used for\n        matrices and images.\n        If not given, :rc:`image.origin` is used, defaulting to 'upper'.\n\n        Note that the vertical axes points upward for 'lower'\n        but downward for 'upper'.\n\n        See the :doc:`/tutorials/intermediate/imshow_extent` tutorial for\n        examples and a more detailed description.\n\n    extent : scalars (left, right, bottom, top), optional\n        The bounding box in data coordinates that the image will fill.\n        The image is stretched individually along x and y to fill the box.\n\n        The default extent is determined by the following conditions.\n        Pixels have unit size in data coordinates. Their centers are on\n        integer coordinates, and their center coordinates range from 0 to\n        columns-1 horizontally and from 0 to rows-1 vertically.\n\n        Note that the direction of the vertical axis and thus the default\n        values for top and bottom depend on *origin*:\n\n        - For ``origin == 'upper'`` the default is\n          ``(-0.5, numcols-0.5, numrows-0.5, -0.5)``.\n        - For ``origin == 'lower'`` the default is\n          ``(-0.5, numcols-0.5, -0.5, numrows-0.5)``.\n\n        See the :doc:`/tutorials/intermediate/imshow_extent` tutorial for\n        examples and a more detailed description.\n\n    filternorm : bool, optional, default: True\n        A parameter for the antigrain image resize filter (see the\n        antigrain documentation).  If *filternorm* is set, the filter\n        normalizes integer values and corrects the rounding errors. It\n        doesn't do anything with the source floating point values, it\n        corrects only integers according to the rule of 1.0 which means\n        that any sum of pixel weights must be equal to 1.0.  So, the\n        filter function must produce a graph of the proper shape.\n\n    filterrad : float > 0, optional, default: 4.0\n        The filter radius for filters that have a radius parameter, i.e.\n        when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\n    resample : bool, optional\n        When *True*, use a full resampling method.  When *False*, only\n        resample when the output image is larger than the input image.\n\n    url : str, optional\n        Set the url of the created `.AxesImage`. See `.Artist.set_url`.\n\n    Returns\n    -------\n    image : `~matplotlib.image.AxesImage`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.artist.Artist` properties\n        These parameters are passed on to the constructor of the\n        `.AxesImage` artist.\n\n    See also\n    --------\n    matshow : Plot a matrix or an array as an image.\n\n    Notes\n    -----\n    Unless *extent* is used, pixel centers will be located at integer\n    coordinates. In other words: the origin will coincide with the center\n    of pixel (0, 0).\n\n    There are two common representations for RGB images with an alpha\n    channel:\n\n    -   Straight (unassociated) alpha: R, G, and B channels represent the\n        color of the pixel, disregarding its opacity.\n    -   Premultiplied (associated) alpha: R, G, and B channels represent\n        the color of the pixel, adjusted for its opacity by multiplication.\n\n    `~matplotlib.pyplot.imshow` expects RGB images adopting the straight\n    (unassociated) alpha representation.\n    \"\"\"\n    if aspect is None:\n        aspect = rcParams['image.aspect']\n    self.set_aspect(aspect)\n    im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent, filternorm=filternorm, filterrad=filterrad, resample=resample, **kwargs)\n    im.set_data(X)\n    im.set_alpha(alpha)\n    if im.get_clip_path() is None:\n        im.set_clip_path(self.patch)\n    if vmin is not None or vmax is not None:\n        im.set_clim(vmin, vmax)\n    else:\n        im.autoscale_None()\n    im.set_url(url)\n    im.set_extent(im.get_extent())\n    self.add_image(im)\n    return im",
                            "@staticmethod\ndef _pcolorargs(funcname, *args, allmatch=False):\n    if len(args) == 1:\n        C = np.asanyarray(args[0])\n        (nrows, ncols) = C.shape\n        if allmatch:\n            (X, Y) = np.meshgrid(np.arange(ncols), np.arange(nrows))\n        else:\n            (X, Y) = np.meshgrid(np.arange(ncols + 1), np.arange(nrows + 1))\n        C = cbook.safe_masked_invalid(C)\n        return (X, Y, C)\n    if len(args) == 3:\n        C = np.asanyarray(args[2])\n        (X, Y) = [cbook.safe_masked_invalid(a) for a in args[:2]]\n        if funcname == 'pcolormesh':\n            if np.ma.is_masked(X) or np.ma.is_masked(Y):\n                raise ValueError('x and y arguments to pcolormesh cannot have non-finite values or be of type numpy.ma.core.MaskedArray with masked values')\n            if isinstance(X, np.ma.core.MaskedArray):\n                X = X.data\n            if isinstance(Y, np.ma.core.MaskedArray):\n                Y = Y.data\n        (nrows, ncols) = C.shape\n    else:\n        raise TypeError('Illegal arguments to %s; see help(%s)' % (funcname, funcname))\n    Nx = X.shape[-1]\n    Ny = Y.shape[0]\n    if X.ndim != 2 or X.shape[0] == 1:\n        x = X.reshape(1, Nx)\n        X = x.repeat(Ny, axis=0)\n    if Y.ndim != 2 or Y.shape[1] == 1:\n        y = Y.reshape(Ny, 1)\n        Y = y.repeat(Nx, axis=1)\n    if X.shape != Y.shape:\n        raise TypeError('Incompatible X, Y inputs to %s; see help(%s)' % (funcname, funcname))\n    if allmatch:\n        if (Nx, Ny) != (ncols, nrows):\n            raise TypeError('Dimensions of C %s are incompatible with X (%d) and/or Y (%d); see help(%s)' % (C.shape, Nx, Ny, funcname))\n    else:\n        if not (ncols in (Nx, Nx - 1) and nrows in (Ny, Ny - 1)):\n            raise TypeError('Dimensions of C %s are incompatible with X (%d) and/or Y (%d); see help(%s)' % (C.shape, Nx, Ny, funcname))\n        C = C[:Ny - 1, :Nx - 1]\n    C = cbook.safe_masked_invalid(C)\n    return (X, Y, C)",
                            "@_preprocess_data()\n@docstring.dedent_interpd\ndef pcolor(self, *args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, **kwargs):\n    \"\"\"\n    Create a pseudocolor plot with a non-regular rectangular grid.\n\n    Call signature::\n\n        pcolor([X, Y,] C, **kwargs)\n\n    *X* and *Y* can be used to specify the corners of the quadrilaterals.\n\n    .. hint::\n\n        ``pcolor()`` can be very slow for large arrays. In most\n        cases you should use the similar but much faster\n        `~.Axes.pcolormesh` instead. See there for a discussion of the\n        differences.\n\n    Parameters\n    ----------\n    C : array-like\n        A scalar 2-D array. The values will be color-mapped.\n\n    X, Y : array-like, optional\n        The coordinates of the quadrilateral corners. The quadrilateral\n        for ``C[i, j]`` has corners at::\n\n            (X[i+1, j], Y[i+1, j])           (X[i+1, j+1], Y[i+1, j+1])\n                                  +---------+\n                                  | C[i, j] |\n                                  +---------+\n                (X[i, j], Y[i, j])           (X[i, j+1], Y[i, j+1])\n\n        Note that the column index corresponds to the\n        x-coordinate, and the row index corresponds to y. For\n        details, see the :ref:`Notes <axes-pcolor-grid-orientation>`\n        section below.\n\n        The dimensions of *X* and *Y* should be one greater than those of\n        *C*. Alternatively, *X*, *Y* and *C* may have equal dimensions, in\n        which case the last row and column of *C* will be ignored.\n\n        If *X* and/or *Y* are 1-D arrays or column vectors they will be\n        expanded as needed into the appropriate 2-D arrays, making a\n        rectangular grid.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        A Colormap instance or registered colormap name. The colormap\n        maps the *C* values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the data values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : scalar, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of *C* in case of the default linear\n        scaling).\n\n    edgecolors : {'none', None, 'face', color, color sequence}, optional\n        The color of the edges. Defaults to 'none'. Possible values:\n\n        - 'none' or '': No edge.\n        - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n          :rc:`patch.force_edgecolor` has to be True for this to work.\n        - 'face': Use the adjacent face color.\n        - A color or sequence of colors will set the edge color.\n\n        The singular form *edgecolor* works as an alias.\n\n    alpha : scalar, optional, default: None\n        The alpha blending value of the face color, between 0 (transparent)\n        and 1 (opaque). Note: The edgecolor is currently not affected by\n        this.\n\n    snap : bool, optional, default: False\n        Whether to snap the mesh to pixel boundaries.\n\n    Returns\n    -------\n    collection : `matplotlib.collections.Collection`\n\n    Other Parameters\n    ----------------\n    antialiaseds : bool, optional, default: False\n        The default *antialiaseds* is False if the default\n        *edgecolors*\\\\ =\"none\" is used.  This eliminates artificial lines\n        at patch boundaries, and works regardless of the value of alpha.\n        If *edgecolors* is not \"none\", then the default *antialiaseds*\n        is taken from :rc:`patch.antialiased`.\n        Stroking the edges may be preferred if *alpha* is 1, but will\n        cause artifacts otherwise.\n\n    **kwargs\n        Additionally, the following arguments are allowed. They are passed\n        along to the `~matplotlib.collections.PolyCollection` constructor:\n\n    %(PolyCollection)s\n\n    See Also\n    --------\n    pcolormesh : for an explanation of the differences between\n        pcolor and pcolormesh.\n    imshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n        faster alternative.\n\n    Notes\n    -----\n    **Masked arrays**\n\n    *X*, *Y* and *C* may be masked arrays. If either ``C[i, j]``, or one\n    of the vertices surrounding ``C[i, j]`` (*X* or *Y* at\n    ``[i, j], [i+1, j], [i, j+1], [i+1, j+1]``) is masked, nothing is\n    plotted.\n\n    .. _axes-pcolor-grid-orientation:\n\n    **Grid orientation**\n\n    The grid orientation follows the standard matrix convention: An array\n    *C* with shape (nrows, ncolumns) is plotted with the column number as\n    *X* and the row number as *Y*.\n\n    **Handling of pcolor() end-cases**\n\n    ``pcolor()`` displays all columns of *C* if *X* and *Y* are not\n    specified, or if *X* and *Y* have one more column than *C*.\n    If *X* and *Y* have the same number of columns as *C* then the last\n    column of *C* is dropped. Similarly for the rows.\n\n    Note: This behavior is different from MATLAB's ``pcolor()``, which\n    always discards the last row and column of *C*.\n    \"\"\"\n    (X, Y, C) = self._pcolorargs('pcolor', *args, allmatch=False)\n    (Ny, Nx) = X.shape\n    self._process_unit_info(xdata=X, ydata=Y, kwargs=kwargs)\n    X = self.convert_xunits(X)\n    Y = self.convert_yunits(Y)\n    C = ma.asarray(C)\n    X = ma.asarray(X)\n    Y = ma.asarray(Y)\n    mask = ma.getmaskarray(X) + ma.getmaskarray(Y)\n    xymask = mask[0:-1, 0:-1] + mask[1:, 1:] + mask[0:-1, 1:] + mask[1:, 0:-1]\n    mask = ma.getmaskarray(C) + xymask\n    unmask = ~mask\n    X1 = ma.filled(X[:-1, :-1])[unmask]\n    Y1 = ma.filled(Y[:-1, :-1])[unmask]\n    X2 = ma.filled(X[1:, :-1])[unmask]\n    Y2 = ma.filled(Y[1:, :-1])[unmask]\n    X3 = ma.filled(X[1:, 1:])[unmask]\n    Y3 = ma.filled(Y[1:, 1:])[unmask]\n    X4 = ma.filled(X[:-1, 1:])[unmask]\n    Y4 = ma.filled(Y[:-1, 1:])[unmask]\n    npoly = len(X1)\n    xy = np.stack([X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1], axis=-1)\n    verts = xy.reshape((npoly, 5, 2))\n    C = ma.filled(C[:Ny - 1, :Nx - 1])[unmask]\n    linewidths = (0.25,)\n    if 'linewidth' in kwargs:\n        kwargs['linewidths'] = kwargs.pop('linewidth')\n    kwargs.setdefault('linewidths', linewidths)\n    if 'edgecolor' in kwargs:\n        kwargs['edgecolors'] = kwargs.pop('edgecolor')\n    ec = kwargs.setdefault('edgecolors', 'none')\n    if 'antialiased' in kwargs:\n        kwargs['antialiaseds'] = kwargs.pop('antialiased')\n    if 'antialiaseds' not in kwargs and cbook._str_lower_equal(ec, 'none'):\n        kwargs['antialiaseds'] = False\n    kwargs.setdefault('snap', False)\n    collection = mcoll.PolyCollection(verts, **kwargs)\n    collection.set_alpha(alpha)\n    collection.set_array(C)\n    collection.set_cmap(cmap)\n    collection.set_norm(norm)\n    collection.set_clim(vmin, vmax)\n    collection.autoscale_None()\n    self.grid(False)\n    x = X.compressed()\n    y = Y.compressed()\n    t = collection._transform\n    if not isinstance(t, mtransforms.Transform) and hasattr(t, '_as_mpl_transform'):\n        t = t._as_mpl_transform(self.axes)\n    if t and any(t.contains_branch_seperately(self.transData)):\n        trans_to_data = t - self.transData\n        pts = np.vstack([x, y]).T.astype(float)\n        transformed_pts = trans_to_data.transform(pts)\n        x = transformed_pts[..., 0]\n        y = transformed_pts[..., 1]\n    self.add_collection(collection, autolim=False)\n    minx = np.min(x)\n    maxx = np.max(x)\n    miny = np.min(y)\n    maxy = np.max(y)\n    collection.sticky_edges.x[:] = [minx, maxx]\n    collection.sticky_edges.y[:] = [miny, maxy]\n    corners = ((minx, miny), (maxx, maxy))\n    self.update_datalim(corners)\n    self._request_autoscale_view()\n    return collection",
                            "@_preprocess_data()\n@docstring.dedent_interpd\ndef pcolormesh(self, *args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, shading='flat', antialiased=False, **kwargs):\n    \"\"\"\n    Create a pseudocolor plot with a non-regular rectangular grid.\n\n    Call signature::\n\n        pcolor([X, Y,] C, **kwargs)\n\n    *X* and *Y* can be used to specify the corners of the quadrilaterals.\n\n    .. note::\n\n       `~Axes.pcolormesh` is similar to `~Axes.pcolor`. It's much faster\n       and preferred in most cases. For a detailed discussion on the\n       differences see :ref:`Differences between pcolor() and pcolormesh()\n       <differences-pcolor-pcolormesh>`.\n\n    Parameters\n    ----------\n    C : array-like\n        A scalar 2-D array. The values will be color-mapped.\n\n    X, Y : array-like, optional\n        The coordinates of the quadrilateral corners. The quadrilateral\n        for ``C[i, j]`` has corners at::\n\n            (X[i+1, j], Y[i+1, j])           (X[i+1, j+1], Y[i+1, j+1])\n                                  +---------+\n                                  | C[i, j] |\n                                  +---------+\n                (X[i, j], Y[i, j])           (X[i, j+1], Y[i, j+1])\n\n        Note that the column index corresponds to the\n        x-coordinate, and the row index corresponds to y. For\n        details, see the :ref:`Notes <axes-pcolormesh-grid-orientation>`\n        section below.\n\n        The dimensions of *X* and *Y* should be one greater than those of\n        *C*. Alternatively, *X*, *Y* and *C* may have equal dimensions, in\n        which case the last row and column of *C* will be ignored.\n\n        If *X* and/or *Y* are 1-D arrays or column vectors they will be\n        expanded as needed into the appropriate 2-D arrays, making a\n        rectangular grid.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        A Colormap instance or registered colormap name. The colormap\n        maps the *C* values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the data values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : scalar, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of *C* in case of the default linear\n        scaling).\n\n    edgecolors : {'none', None, 'face', color, color sequence}, optional\n        The color of the edges. Defaults to 'none'. Possible values:\n\n        - 'none' or '': No edge.\n        - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n          :rc:`patch.force_edgecolor` has to be True for this to work.\n        - 'face': Use the adjacent face color.\n        - A color or sequence of colors will set the edge color.\n\n        The singular form *edgecolor* works as an alias.\n\n    alpha : scalar, optional, default: None\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    shading : {'flat', 'gouraud'}, optional\n        The fill style, Possible values:\n\n        - 'flat': A solid color is used for each quad. The color of the\n          quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n          ``C[i, j]``.\n        - 'gouraud': Each quad will be Gouraud shaded: The color of the\n          corners (i', j') are given by ``C[i',j']``. The color values of\n          the area in between is interpolated from the corner values.\n          When Gouraud shading is used, *edgecolors* is ignored.\n\n    snap : bool, optional, default: False\n        Whether to snap the mesh to pixel boundaries.\n\n    Returns\n    -------\n    mesh : `matplotlib.collections.QuadMesh`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additionally, the following arguments are allowed. They are passed\n        along to the `~matplotlib.collections.QuadMesh` constructor:\n\n    %(QuadMesh)s\n\n    See Also\n    --------\n    pcolor : An alternative implementation with slightly different\n        features. For a detailed discussion on the differences see\n        :ref:`Differences between pcolor() and pcolormesh()\n        <differences-pcolor-pcolormesh>`.\n    imshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n        faster alternative.\n\n    Notes\n    -----\n    **Masked arrays**\n\n    *C* may be a masked array. If ``C[i, j]`` is masked, the corresponding\n    quadrilateral will be transparent. Masking of *X* and *Y* is not\n    supported. Use `~.Axes.pcolor` if you need this functionality.\n\n    .. _axes-pcolormesh-grid-orientation:\n\n    **Grid orientation**\n\n    The grid orientation follows the standard matrix convention: An array\n    *C* with shape (nrows, ncolumns) is plotted with the column number as\n    *X* and the row number as *Y*.\n\n    .. _differences-pcolor-pcolormesh:\n\n    **Differences between pcolor() and pcolormesh()**\n\n    Both methods are used to create a pseudocolor plot of a 2-D array\n    using quadrilaterals.\n\n    The main difference lies in the created object and internal data\n    handling:\n    While `~.Axes.pcolor` returns a `.PolyCollection`, `~.Axes.pcolormesh`\n    returns a `.QuadMesh`. The latter is more specialized for the given\n    purpose and thus is faster. It should almost always be preferred.\n\n    There is also a slight difference in the handling of masked arrays.\n    Both `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays\n    for *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*\n    and *Y*. The reason lies in the internal handling of the masked values.\n    `~.Axes.pcolor` leaves out the respective polygons from the\n    PolyCollection. `~.Axes.pcolormesh` sets the facecolor of the masked\n    elements to transparent. You can see the difference when using\n    edgecolors. While all edges are drawn irrespective of masking in a\n    QuadMesh, the edge between two adjacent masked quadrilaterals in\n    `~.Axes.pcolor` is not drawn as the corresponding polygons do not\n    exist in the PolyCollection.\n\n    Another difference is the support of Gouraud shading in\n    `~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`.\n\n    \"\"\"\n    shading = shading.lower()\n    kwargs.setdefault('edgecolors', 'None')\n    allmatch = shading == 'gouraud'\n    (X, Y, C) = self._pcolorargs('pcolormesh', *args, allmatch=allmatch)\n    (Ny, Nx) = X.shape\n    X = X.ravel()\n    Y = Y.ravel()\n    self._process_unit_info(xdata=X, ydata=Y, kwargs=kwargs)\n    X = self.convert_xunits(X)\n    Y = self.convert_yunits(Y)\n    C = C.ravel()\n    coords = np.column_stack((X, Y)).astype(float, copy=False)\n    collection = mcoll.QuadMesh(Nx - 1, Ny - 1, coords, antialiased=antialiased, shading=shading, **kwargs)\n    collection.set_alpha(alpha)\n    collection.set_array(C)\n    collection.set_cmap(cmap)\n    collection.set_norm(norm)\n    collection.set_clim(vmin, vmax)\n    collection.autoscale_None()\n    self.grid(False)\n    t = collection._transform\n    if not isinstance(t, mtransforms.Transform) and hasattr(t, '_as_mpl_transform'):\n        t = t._as_mpl_transform(self.axes)\n    if t and any(t.contains_branch_seperately(self.transData)):\n        trans_to_data = t - self.transData\n        coords = trans_to_data.transform(coords)\n    self.add_collection(collection, autolim=False)\n    (minx, miny) = np.min(coords, axis=0)\n    (maxx, maxy) = np.max(coords, axis=0)\n    collection.sticky_edges.x[:] = [minx, maxx]\n    collection.sticky_edges.y[:] = [miny, maxy]\n    corners = ((minx, miny), (maxx, maxy))\n    self.update_datalim(corners)\n    self._request_autoscale_view()\n    return collection",
                            "@_preprocess_data()\n@docstring.dedent_interpd\ndef pcolorfast(self, *args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, **kwargs):\n    \"\"\"\n    Create a pseudocolor plot with a non-regular rectangular grid.\n\n    Call signature::\n\n      ax.pcolorfast([X, Y], C, /, **kwargs)\n\n    This method is similar to ~.Axes.pcolor` and `~.Axes.pcolormesh`.\n    It's designed to provide the fastest pcolor-type plotting with the\n    Agg backend. To achieve this, it uses different algorithms internally\n    depending on the complexity of the input grid (regular rectangular,\n    non-regular rectangular or arbitrary quadrilateral).\n\n    .. warning::\n\n       This method is experimental. Compared to `~.Axes.pcolor` or\n       `~.Axes.pcolormesh` it has some limitations:\n\n       - It supports only flat shading (no outlines)\n       - It lacks support for log scaling of the axes.\n       - It does not have a have a pyplot wrapper.\n\n    Parameters\n    ----------\n    C : array-like(M, N)\n        The image data. Supported array shapes are:\n\n        - (M, N): an image with scalar data. The data is visualized\n          using a colormap.\n        - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n        - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n          i.e. including transparency.\n\n        The first two dimensions (M, N) define the rows and columns of\n        the image.\n\n        This parameter can only be passed positionally.\n\n    X, Y : tuple or array-like, default: ``(0, N)``, ``(0, M)``\n        *X* and *Y* are used to specify the coordinates of the\n        quadrilaterals. There are different ways to do this:\n\n        - Use tuples ``X=(xmin, xmax)`` and ``Y=(ymin, ymax)`` to define\n          a *uniform rectangular grid*.\n\n          The tuples define the outer edges of the grid. All individual\n          quadrilaterals will be of the same size. This is the fastest\n          version.\n\n        - Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular\n          grid*.\n\n          In this case *X* and *Y* have to be monotonic 1D arrays of length\n          *N+1* and *M+1*, specifying the x and y boundaries of the cells.\n\n          The speed is intermediate. Note: The grid is checked, and if\n          found to be uniform the fast version is used.\n\n        - Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral\n          grid* (i.e. if the quadrilaterals are not rectangular).\n\n          In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1),\n          specifying the x and y coordinates of the corners of the colored\n          quadrilaterals.\n\n          This is the most general, but the slowest to render.  It may\n          produce faster and more compact output using ps, pdf, and\n          svg backends, however.\n\n        These arguments can only be passed positionally.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        A Colormap instance or registered colormap name. The colormap\n        maps the *C* values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the data values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : scalar, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of *C* in case of the default linear\n        scaling).\n\n    alpha : scalar, optional, default: None\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    snap : bool, optional, default: False\n        Whether to snap the mesh to pixel boundaries.\n\n    Returns\n    -------\n    image : `.AxesImage` or `.PcolorImage` or `.QuadMesh`\n        The return type depends on the type of grid:\n\n        - `.AxesImage` for a regular rectangular grid.\n        - `.PcolorImage` for a non-regular rectangular grid.\n        - `.QuadMesh` for a non-rectangular grid.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n    \"\"\"\n    C = args[-1]\n    (nr, nc) = np.shape(C)[:2]\n    if len(args) == 1:\n        style = 'image'\n        x = [0, nc]\n        y = [0, nr]\n    elif len(args) == 3:\n        (x, y) = args[:2]\n        x = np.asarray(x)\n        y = np.asarray(y)\n        if x.ndim == 1 and y.ndim == 1:\n            if x.size == 2 and y.size == 2:\n                style = 'image'\n            else:\n                dx = np.diff(x)\n                dy = np.diff(y)\n                if np.ptp(dx) < 0.01 * np.abs(dx.mean()) and np.ptp(dy) < 0.01 * np.abs(dy.mean()):\n                    style = 'image'\n                else:\n                    style = 'pcolorimage'\n        elif x.ndim == 2 and y.ndim == 2:\n            style = 'quadmesh'\n        else:\n            raise TypeError('arguments do not match valid signatures')\n    else:\n        raise TypeError('need 1 argument or 3 arguments')\n    if style == 'quadmesh':\n        coords = np.stack([x, y], axis=-1)\n        if np.ndim(C) == 2:\n            qm_kwargs = {'array': np.ma.ravel(C)}\n        elif np.ndim(C) == 3:\n            qm_kwargs = {'color': np.ma.reshape(C, (-1, C.shape[-1]))}\n        else:\n            raise ValueError('C must be 2D or 3D')\n        collection = mcoll.QuadMesh(nc, nr, coords, **qm_kwargs, alpha=alpha, cmap=cmap, norm=norm, antialiased=False, edgecolors='none')\n        self.add_collection(collection, autolim=False)\n        (xl, xr, yb, yt) = (x.min(), x.max(), y.min(), y.max())\n        ret = collection\n    else:\n        extent = (xl, xr, yb, yt) = (x[0], x[-1], y[0], y[-1])\n        if style == 'image':\n            im = mimage.AxesImage(self, cmap, norm, data=C, alpha=alpha, extent=extent, interpolation='nearest', origin='lower', **kwargs)\n        elif style == 'pcolorimage':\n            im = mimage.PcolorImage(self, x, y, C, cmap=cmap, norm=norm, alpha=alpha, extent=extent, **kwargs)\n        self.add_image(im)\n        ret = im\n    if vmin is not None or vmax is not None:\n        ret.set_clim(vmin, vmax)\n    elif np.ndim(C) == 2:\n        ret.autoscale_None()\n    if ret.get_clip_path() is None:\n        ret.set_clip_path(self.patch)\n    ret.sticky_edges.x[:] = [xl, xr]\n    ret.sticky_edges.y[:] = [yb, yt]\n    self.update_datalim(np.array([[xl, yb], [xr, yt]]))\n    self._request_autoscale_view(tight=True)\n    return ret",
                            "@_preprocess_data()\ndef contour(self, *args, **kwargs):\n    kwargs['filled'] = False\n    contours = mcontour.QuadContourSet(self, *args, **kwargs)\n    self._request_autoscale_view()\n    return contours",
                            "@_preprocess_data()\ndef contourf(self, *args, **kwargs):\n    kwargs['filled'] = True\n    contours = mcontour.QuadContourSet(self, *args, **kwargs)\n    self._request_autoscale_view()\n    return contours",
                            "def clabel(self, CS, *args, **kwargs):\n    return CS.clabel(*args, **kwargs)",
                            "@_preprocess_data(replace_names=['x', 'weights'], label_namer='x')\ndef hist(self, x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n\n    Compute and draw the histogram of *x*.  The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data.  See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n\n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset.  Note that\n    the ndarray form is transposed relative to the list form.\n\n    Masked arrays are not supported.\n\n    The *bins*, *range*, *weights*, and *density* parameters behave as in\n    `numpy.histogram`.\n\n    Parameters\n    ----------\n    x : (n,) array or sequence of (n,) arrays\n        Input values, this takes either a single array or a sequence of\n        arrays which are not required to be of the same length.\n\n    bins : int or sequence or str, optional\n        If *bins* is an integer, it defines the number of equal-width bins\n        in the range.\n\n        If *bins* is a sequence, it defines the bin edges, including the\n        left edge of the first bin and the right edge of the last bin;\n        in this case, bins may be unequally spaced.  All but the last\n        (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n            [1, 2, 3, 4]\n\n        then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n        the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n        *includes* 4.\n\n        If *bins* is a string, it is one of the binning strategies\n        supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n        'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\n        The default is :rc:`hist.bins`.\n\n    range : tuple or None, optional\n        The lower and upper range of the bins. Lower and upper outliers\n        are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n        Range has no effect if *bins* is a sequence.\n\n        If *bins* is a sequence or *range* is specified, autoscaling\n        is based on the specified bin range instead of the\n        range of x.\n\n        Default is ``None``\n\n    density : bool, optional\n        If ``True``, the first element of the return tuple will\n        be the counts normalized to form a probability density, i.e.,\n        the area (or integral) under the histogram will sum to 1.\n        This is achieved by dividing the count by the number of\n        observations times the bin width and not dividing by the total\n        number of observations. If *stacked* is also ``True``, the sum of\n        the histograms is normalized to 1.\n\n        Default is ``False``.\n\n    weights : (n, ) array-like or None, optional\n        An array of weights, of the same shape as *x*.  Each value in *x*\n        only contributes its associated weight towards the bin count\n        (instead of 1).  If *normed* or *density* is ``True``,\n        the weights are normalized, so that the integral of the density\n        over the range remains 1.\n\n        Default is ``None``.\n\n        This parameter can be used to draw a histogram of data that has\n        already been binned, e.g. using `np.histogram` (by treating each\n        bin as a single point with a weight equal to its count) ::\n\n            counts, bins = np.histogram(data)\n            plt.hist(bins[:-1], bins, weights=counts)\n\n        (or you may alternatively use `~.bar()`).\n\n    cumulative : bool or -1, optional\n        If ``True``, then a histogram is computed where each bin gives the\n        counts in that bin plus all bins for smaller values. The last bin\n        gives the total number of datapoints.\n\n        If *density* is also ``True`` then the histogram is normalized such\n        that the last bin equals 1.\n\n        If *cumulative* is a number less than 0 (e.g., -1), the direction\n        of accumulation is reversed.  In this case, if *density* is also\n        ``True``, then the histogram is normalized such that the first bin\n        equals 1.\n\n        Default is ``False``\n\n    bottom : array-like, scalar, or None\n        Location of the bottom baseline of each bin.  If a scalar,\n        the base line for each bin is shifted by the same amount.\n        If an array, each bin is shifted independently and the length\n        of bottom must match the number of bins.  If None, defaults to 0.\n\n        Default is ``None``\n\n    histtype : {'bar', 'barstacked', 'step',  'stepfilled'}, optional\n        The type of histogram to draw.\n\n        - 'bar' is a traditional bar-type histogram.  If multiple data\n          are given the bars are arranged side by side.\n        - 'barstacked' is a bar-type histogram where multiple\n          data are stacked on top of each other.\n        - 'step' generates a lineplot that is by default unfilled.\n        - 'stepfilled' generates a lineplot that is by default filled.\n\n        Default is 'bar'\n\n    align : {'left', 'mid', 'right'}, optional\n        Controls how the histogram is plotted.\n\n        - 'left': bars are centered on the left bin edges.\n        - 'mid': bars are centered between the bin edges.\n        - 'right': bars are centered on the right bin edges.\n\n        Default is 'mid'\n\n    orientation : {'horizontal', 'vertical'}, optional\n        If 'horizontal', `~matplotlib.pyplot.barh` will be used for\n        bar-type histograms and the *bottom* kwarg will be the left edges.\n\n    rwidth : scalar or None, optional\n        The relative width of the bars as a fraction of the bin width.  If\n        ``None``, automatically compute the width.\n\n        Ignored if *histtype* is 'step' or 'stepfilled'.\n\n        Default is ``None``\n\n    log : bool, optional\n        If ``True``, the histogram axis will be set to a log scale. If\n        *log* is ``True`` and *x* is a 1D array, empty bins will be\n        filtered out and only the non-empty ``(n, bins, patches)``\n        will be returned.\n\n        Default is ``False``\n\n    color : color or array-like of colors or None, optional\n        Color or sequence of colors, one per dataset.  Default (``None``)\n        uses the standard line color sequence.\n\n        Default is ``None``\n\n    label : str or None, optional\n        String, or sequence of strings to match multiple datasets.  Bar\n        charts yield multiple patches per dataset, but only the first gets\n        the label, so that the legend command will work as expected.\n\n        default is ``None``\n\n    stacked : bool, optional\n        If ``True``, multiple data are stacked on top of each other If\n        ``False`` multiple data are arranged side by side if histtype is\n        'bar' or on top of each other if histtype is 'step'\n\n        Default is ``False``\n\n    Returns\n    -------\n    n : array or list of arrays\n        The values of the histogram bins. See *density* and *weights* for a\n        description of the possible semantics.  If input *x* is an array,\n        then this is an array of length *nbins*. If input is a sequence of\n        arrays ``[data1, data2, ...]``, then this is a list of arrays with\n        the values of the histograms for each of the arrays in the same\n        order.  The dtype of the array *n* (or of its element arrays) will\n        always be float even if no weighting or normalization is used.\n\n    bins : array\n        The edges of the bins. Length nbins + 1 (nbins left edges and right\n        edge of last bin).  Always a single array even when multiple data\n        sets are passed in.\n\n    patches : list or list of lists\n        Silent list of individual patches used to create the histogram\n        or list of such list if multiple input datasets.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Patch` properties\n\n    See also\n    --------\n    hist2d : 2D histograms\n\n    \"\"\"\n    bin_range = range\n    from builtins import range\n    if np.isscalar(x):\n        x = [x]\n    if bins is None:\n        bins = rcParams['hist.bins']\n    cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'], histtype=histtype)\n    cbook._check_in_list(['left', 'mid', 'right'], align=align)\n    cbook._check_in_list(['horizontal', 'vertical'], orientation=orientation)\n    if histtype == 'barstacked' and (not stacked):\n        stacked = True\n    input_empty = np.size(x) == 0\n    x = cbook._reshape_2D(x, 'x')\n    nx = len(x)\n    self._process_unit_info(xdata=x[0], kwargs=kwargs)\n    x = [self.convert_xunits(xi) for xi in x]\n    if bin_range is not None:\n        bin_range = self.convert_xunits(bin_range)\n    if weights is not None:\n        w = cbook._reshape_2D(weights, 'weights')\n    else:\n        w = [None] * nx\n    if len(w) != nx:\n        raise ValueError('weights should have the same shape as x')\n    for (xi, wi) in zip(x, w):\n        if wi is not None and len(wi) != len(xi):\n            raise ValueError('weights should have the same shape as x')\n    if color is None:\n        color = [self._get_lines.get_next_color() for i in range(nx)]\n    else:\n        color = mcolors.to_rgba_array(color)\n        if len(color) != nx:\n            error_message = 'color kwarg must have one color per data set. %d data sets and %d colors were provided' % (nx, len(color))\n            raise ValueError(error_message)\n    hist_kwargs = dict()\n    if bin_range is None:\n        xmin = np.inf\n        xmax = -np.inf\n        for xi in x:\n            if len(xi):\n                xmin = min(xmin, np.nanmin(xi))\n                xmax = max(xmax, np.nanmax(xi))\n        if not np.isnan([xmin, xmax]).any() and (not xmin > xmax):\n            bin_range = (xmin, xmax)\n    if not input_empty and len(x) > 1:\n        if weights is not None:\n            _w = np.concatenate(w)\n        else:\n            _w = None\n        bins = histogram_bin_edges(np.concatenate(x), bins, bin_range, _w)\n    else:\n        hist_kwargs['range'] = bin_range\n    density = bool(density)\n    if density and (not stacked):\n        hist_kwargs['density'] = density\n    tops = []\n    for i in range(nx):\n        (m, bins) = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n        tops.append(m)\n    tops = np.array(tops, float)\n    if stacked:\n        tops = tops.cumsum(axis=0)\n        if density:\n            tops = tops / np.diff(bins) / tops[-1].sum()\n    if cumulative:\n        slc = slice(None)\n        if isinstance(cumulative, Number) and cumulative < 0:\n            slc = slice(None, None, -1)\n        if density:\n            tops = (tops * np.diff(bins))[:, slc].cumsum(axis=1)[:, slc]\n        else:\n            tops = tops[:, slc].cumsum(axis=1)[:, slc]\n    patches = []\n    _saved_autoscalex = self.get_autoscalex_on()\n    _saved_autoscaley = self.get_autoscaley_on()\n    self.set_autoscalex_on(False)\n    self.set_autoscaley_on(False)\n    if histtype.startswith('bar'):\n        totwidth = np.diff(bins)\n        if rwidth is not None:\n            dr = np.clip(rwidth, 0, 1)\n        elif len(tops) > 1 and (not stacked or rcParams['_internal.classic_mode']):\n            dr = 0.8\n        else:\n            dr = 1.0\n        if histtype == 'bar' and (not stacked):\n            width = dr * totwidth / nx\n            dw = width\n            boffset = -0.5 * dr * totwidth * (1 - 1 / nx)\n        elif histtype == 'barstacked' or stacked:\n            width = dr * totwidth\n            (boffset, dw) = (0.0, 0.0)\n        if align == 'mid':\n            boffset += 0.5 * totwidth\n        elif align == 'right':\n            boffset += totwidth\n        if orientation == 'horizontal':\n            _barfunc = self.barh\n            bottom_kwarg = 'left'\n        else:\n            _barfunc = self.bar\n            bottom_kwarg = 'bottom'\n        for (m, c) in zip(tops, color):\n            if bottom is None:\n                bottom = np.zeros(len(m))\n            if stacked:\n                height = m - bottom\n            else:\n                height = m\n            patch = _barfunc(bins[:-1] + boffset, height, width, align='center', log=log, color=c, **{bottom_kwarg: bottom})\n            patches.append(patch)\n            if stacked:\n                bottom[:] = m\n            boffset += dw\n    elif histtype.startswith('step'):\n        x = np.zeros(4 * len(bins) - 3)\n        y = np.zeros(4 * len(bins) - 3)\n        (x[0:2 * len(bins) - 1:2], x[1:2 * len(bins) - 1:2]) = (bins, bins[:-1])\n        x[2 * len(bins) - 1:] = x[1:2 * len(bins) - 1][::-1]\n        if bottom is None:\n            bottom = np.zeros(len(bins) - 1)\n        (y[1:2 * len(bins) - 1:2], y[2:2 * len(bins):2]) = (bottom, bottom)\n        y[2 * len(bins) - 1:] = y[1:2 * len(bins) - 1][::-1]\n        if log:\n            if orientation == 'horizontal':\n                self.set_xscale('log', nonposx='clip')\n            else:\n                self.set_yscale('log', nonposy='clip')\n        if align == 'left':\n            x -= 0.5 * (bins[1] - bins[0])\n        elif align == 'right':\n            x += 0.5 * (bins[1] - bins[0])\n        fill = histtype == 'stepfilled'\n        (xvals, yvals) = ([], [])\n        for m in tops:\n            if stacked:\n                y[0] = y[1]\n                y[2 * len(bins) - 1:] = y[1:2 * len(bins) - 1][::-1]\n            (y[1:2 * len(bins) - 1:2], y[2:2 * len(bins):2]) = (m + bottom, m + bottom)\n            if orientation == 'horizontal':\n                xvals.append(y.copy())\n                yvals.append(x.copy())\n            else:\n                xvals.append(x.copy())\n                yvals.append(y.copy())\n        split = -1 if fill else 2 * len(bins)\n        for (x, y, c) in reversed(list(zip(xvals, yvals, color))):\n            patches.append(self.fill(x[:split], y[:split], closed=True if fill else None, facecolor=c, edgecolor=None if fill else c, fill=fill if fill else None))\n        for patch_list in patches:\n            for patch in patch_list:\n                if orientation == 'vertical':\n                    patch.sticky_edges.y.append(0)\n                elif orientation == 'horizontal':\n                    patch.sticky_edges.x.append(0)\n        patches.reverse()\n    self.set_autoscalex_on(_saved_autoscalex)\n    self.set_autoscaley_on(_saved_autoscaley)\n    self._request_autoscale_view()\n    if label is None:\n        labels = [None]\n    elif isinstance(label, str):\n        labels = [label]\n    elif not np.iterable(label):\n        labels = [str(label)]\n    else:\n        labels = [str(lab) for lab in label]\n    for (patch, lbl) in itertools.zip_longest(patches, labels):\n        if patch:\n            p = patch[0]\n            p.update(kwargs)\n            if lbl is not None:\n                p.set_label(lbl)\n            for p in patch[1:]:\n                p.update(kwargs)\n                p.set_label('_nolegend_')\n    if nx == 1:\n        return (tops[0], bins, cbook.silent_list('Patch', patches[0]))\n    else:\n        return (tops, bins, cbook.silent_list('Lists of Patches', patches))",
                            "@_preprocess_data(replace_names=['x', 'y', 'weights'])\n@cbook._rename_parameter('3.1', 'normed', 'density')\ndef hist2d(self, x, y, bins=10, range=None, density=False, weights=None, cmin=None, cmax=None, **kwargs):\n    \"\"\"\n    Make a 2D histogram plot.\n\n    Parameters\n    ----------\n    x, y : array-like, shape (n, )\n        Input values\n\n    bins : None or int or [int, int] or array-like or [array, array]\n\n        The bin specification:\n\n        - If int, the number of bins for the two dimensions\n          (nx=ny=bins).\n        - If ``[int, int]``, the number of bins in each dimension\n          (nx, ny = bins).\n        - If array-like, the bin edges for the two dimensions\n          (x_edges=y_edges=bins).\n        - If ``[array, array]``, the bin edges in each dimension\n          (x_edges, y_edges = bins).\n\n        The default value is 10.\n\n    range : array-like shape(2, 2), optional, default: None\n        The leftmost and rightmost edges of the bins along each dimension\n        (if not specified explicitly in the bins parameters): ``[[xmin,\n        xmax], [ymin, ymax]]``. All values outside of this range will be\n        considered outliers and not tallied in the histogram.\n\n    density : bool, optional, default: False\n        Normalize histogram.  *normed* is a deprecated synonym for this\n        parameter.\n\n    weights : array-like, shape (n, ), optional, default: None\n        An array of values w_i weighing each sample (x_i, y_i).\n\n    cmin : scalar, optional, default: None\n        All bins that has count less than cmin will not be displayed (set\n        to NaN before passing to imshow) and these count values in the\n        return value count histogram will also be set to nan upon return.\n\n    cmax : scalar, optional, default: None\n        All bins that has count more than cmax will not be displayed (set\n        to NaN before passing to imshow) and these count values in the\n        return value count histogram will also be set to nan upon return.\n\n    Returns\n    -------\n    h : 2D array\n        The bi-dimensional histogram of samples x and y. Values in x are\n        histogrammed along the first dimension and values in y are\n        histogrammed along the second dimension.\n    xedges : 1D array\n        The bin edges along the x axis.\n    yedges : 1D array\n        The bin edges along the y axis.\n    image : `~.matplotlib.collections.QuadMesh`\n\n    Other Parameters\n    ----------------\n    cmap : Colormap or str, optional\n        A `.colors.Colormap` instance.  If not set, use rc settings.\n\n    norm : Normalize, optional\n        A `.colors.Normalize` instance is used to\n        scale luminance data to ``[0, 1]``. If not set, defaults to\n        `.colors.Normalize()`.\n\n    vmin/vmax : None or scalar, optional\n        Arguments passed to the `~.colors.Normalize` instance.\n\n    alpha : ``0 <= scalar <= 1`` or ``None``, optional\n        The alpha blending value.\n\n    See also\n    --------\n    hist : 1D histogram plotting\n\n    Notes\n    -----\n    - Currently ``hist2d`` calculates its own axis limits, and any limits\n      previously set are ignored.\n    - Rendering the histogram with a logarithmic color scale is\n      accomplished by passing a `.colors.LogNorm` instance to the *norm*\n      keyword argument. Likewise, power-law normalization (similar\n      in effect to gamma correction) can be accomplished with\n      `.colors.PowerNorm`.\n    \"\"\"\n    (h, xedges, yedges) = np.histogram2d(x, y, bins=bins, range=range, normed=density, weights=weights)\n    if cmin is not None:\n        h[h < cmin] = None\n    if cmax is not None:\n        h[h > cmax] = None\n    pc = self.pcolormesh(xedges, yedges, h.T, **kwargs)\n    self.set_xlim(xedges[0], xedges[-1])\n    self.set_ylim(yedges[0], yedges[-1])\n    return (h, xedges, yedges, pc)",
                            "@_preprocess_data(replace_names=['x'])\n@docstring.dedent_interpd\ndef psd(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs):\n    \"\"\"\n    Plot the power spectral density.\n\n    The power spectral density :math:`P_{xx}` by Welch's average\n    periodogram method.  The vector *x* is divided into *NFFT* length\n    segments.  Each segment is detrended by function *detrend* and\n    windowed by function *window*.  *noverlap* gives the length of\n    the overlap between segments.  The :math:`|\\\\mathrm{fft}(i)|^2`\n    of each segment :math:`i` are averaged to compute :math:`P_{xx}`,\n    with a scaling to correct for power loss due to windowing.\n\n    If len(*x*) < *NFFT*, it will be zero padded to *NFFT*.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int\n        The number of points of overlap between segments.\n        The default value is 0 (no overlap).\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    return_line : bool\n        Whether to include the line object plotted in the returned values.\n        Default is False.\n\n    Returns\n    -------\n    Pxx : 1-D array\n        The values for the power spectrum `P_{xx}` before scaling\n        (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *Pxx*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n        Only returned if *return_line* is True.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`specgram`\n        :func:`specgram` differs in the default overlap; in not returning\n        the mean of the segment periodograms; in returning the times of the\n        segments; and in plotting a colormap instead of a line.\n\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` plots the magnitude spectrum.\n\n    :func:`csd`\n        :func:`csd` plots the spectral density between two signals.\n\n    Notes\n    -----\n    For plotting, the power is plotted as\n    :math:`10\\\\log_{10}(P_{xx})` for decibels, though *Pxx* itself\n    is returned.\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,\n    John Wiley & Sons (1986)\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n    (pxx, freqs) = mlab.psd(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)\n    freqs += Fc\n    if scale_by_freq in (None, True):\n        psd_units = 'dB/Hz'\n    else:\n        psd_units = 'dB'\n    line = self.plot(freqs, 10 * np.log10(pxx), **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Power Spectral Density (%s)' % psd_units)\n    self.grid(True)\n    (vmin, vmax) = self.viewLim.intervaly\n    intv = vmax - vmin\n    logi = int(np.log10(intv))\n    if logi == 0:\n        logi = 0.1\n    step = 10 * logi\n    ticks = np.arange(math.floor(vmin), math.ceil(vmax) + 1, step)\n    self.set_yticks(ticks)\n    if return_line is None or not return_line:\n        return (pxx, freqs)\n    else:\n        return (pxx, freqs, line)",
                            "@_preprocess_data(replace_names=['x', 'y'], label_namer='y')\n@docstring.dedent_interpd\ndef csd(self, x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs):\n    \"\"\"\n    Plot the cross-spectral density.\n\n    The cross spectral density :math:`P_{xy}` by Welch's average\n    periodogram method.  The vectors *x* and *y* are divided into\n    *NFFT* length segments.  Each segment is detrended by function\n    *detrend* and windowed by function *window*.  *noverlap* gives\n    the length of the overlap between segments.  The product of\n    the direct FFTs of *x* and *y* are averaged over each segment\n    to compute :math:`P_{xy}`, with a scaling to correct for power\n    loss due to windowing.\n\n    If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero\n    padded to *NFFT*.\n\n    Parameters\n    ----------\n    x, y : 1-D arrays or sequences\n        Arrays or sequences containing the data.\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int\n        The number of points of overlap between segments.\n        The default value is 0 (no overlap).\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    return_line : bool\n        Whether to include the line object plotted in the returned values.\n        Default is False.\n\n    Returns\n    -------\n    Pxy : 1-D array\n        The values for the cross spectrum `P_{xy}` before scaling\n        (complex valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *Pxy*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n        Only returned if *return_line* is True.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` is the equivalent to setting y=x.\n\n    Notes\n    -----\n    For plotting, the power is plotted as\n    :math:`10 \\\\log_{10}(P_{xy})` for decibels, though `P_{xy}` itself\n    is returned.\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,\n    John Wiley & Sons (1986)\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n    (pxy, freqs) = mlab.csd(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)\n    freqs += Fc\n    line = self.plot(freqs, 10 * np.log10(np.abs(pxy)), **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Cross Spectrum Magnitude (dB)')\n    self.grid(True)\n    (vmin, vmax) = self.viewLim.intervaly\n    intv = vmax - vmin\n    step = 10 * int(np.log10(intv))\n    ticks = np.arange(math.floor(vmin), math.ceil(vmax) + 1, step)\n    self.set_yticks(ticks)\n    if return_line is None or not return_line:\n        return (pxy, freqs)\n    else:\n        return (pxy, freqs, line)",
                            "@_preprocess_data(replace_names=['x'])\n@docstring.dedent_interpd\ndef magnitude_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, **kwargs):\n    \"\"\"\n    Plot the magnitude spectrum.\n\n    Compute the magnitude spectrum of *x*.  Data is padded to a\n    length of *pad_to* and the windowing function *window* is applied to\n    the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data.\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    scale : {'default', 'linear', 'dB'}\n        The scaling of the values in the *spec*.  'linear' is no scaling.\n        'dB' returns the values in dB scale, i.e., the dB amplitude\n        (20 * log10). 'default' is 'linear'.\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the magnitude spectrum before scaling (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` plots the power spectral density.`.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` plots the angles of the corresponding\n        frequencies.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` plots the phase (unwrapped angle) of the\n        corresponding frequencies.\n\n    :func:`specgram`\n        :func:`specgram` can plot the magnitude spectrum of segments within\n        the signal in a colormap.\n\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n    if scale is None or scale == 'default':\n        scale = 'linear'\n    (spec, freqs) = mlab.magnitude_spectrum(x=x, Fs=Fs, window=window, pad_to=pad_to, sides=sides)\n    freqs += Fc\n    if scale == 'linear':\n        Z = spec\n        yunits = 'energy'\n    elif scale == 'dB':\n        Z = 20.0 * np.log10(spec)\n        yunits = 'dB'\n    else:\n        raise ValueError('Unknown scale %s', scale)\n    lines = self.plot(freqs, Z, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Magnitude (%s)' % yunits)\n    return (spec, freqs, lines[0])",
                            "@_preprocess_data(replace_names=['x'])\n@docstring.dedent_interpd\ndef angle_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs):\n    \"\"\"\n    Plot the angle spectrum.\n\n    Compute the angle spectrum (wrapped phase spectrum) of *x*.\n    Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data.\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the angle spectrum in radians (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`magnitude_spectrum`\n        :func:`angle_spectrum` plots the magnitudes of the corresponding\n        frequencies.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` plots the unwrapped version of this\n        function.\n\n    :func:`specgram`\n        :func:`specgram` can plot the angle spectrum of segments within the\n        signal in a colormap.\n\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n    (spec, freqs) = mlab.angle_spectrum(x=x, Fs=Fs, window=window, pad_to=pad_to, sides=sides)\n    freqs += Fc\n    lines = self.plot(freqs, spec, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Angle (radians)')\n    return (spec, freqs, lines[0])",
                            "@_preprocess_data(replace_names=['x'])\n@docstring.dedent_interpd\ndef phase_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs):\n    \"\"\"\n    Plot the phase spectrum.\n\n    Compute the phase spectrum (unwrapped angle spectrum) of *x*.\n    Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the phase spectrum in radians (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` plots the magnitudes of the\n        corresponding frequencies.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` plots the wrapped version of this function.\n\n    :func:`specgram`\n        :func:`specgram` can plot the phase spectrum of segments within the\n        signal in a colormap.\n\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n    (spec, freqs) = mlab.phase_spectrum(x=x, Fs=Fs, window=window, pad_to=pad_to, sides=sides)\n    freqs += Fc\n    lines = self.plot(freqs, spec, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Phase (radians)')\n    return (spec, freqs, lines[0])",
                            "@_preprocess_data(replace_names=['x', 'y'])\n@docstring.dedent_interpd\ndef cohere(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs):\n    \"\"\"\n    Plot the coherence between *x* and *y*.\n\n    Plot the coherence between *x* and *y*.  Coherence is the\n    normalized cross spectral density:\n\n    .. math::\n\n      C_{xy} = \\\\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\n\n    Parameters\n    ----------\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int\n        The number of points of overlap between blocks.  The\n        default value is 0 (no overlap).\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n\n    Returns\n    -------\n    Cxy : 1-D array\n        The coherence vector.\n\n    freqs : 1-D array\n        The frequencies for the elements in *Cxy*.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,\n    John Wiley & Sons (1986)\n    \"\"\"\n    (cxy, freqs) = mlab.cohere(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, scale_by_freq=scale_by_freq)\n    freqs += Fc\n    self.plot(freqs, cxy, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Coherence')\n    self.grid(True)\n    return (cxy, freqs)",
                            "@_preprocess_data(replace_names=['x'])\n@docstring.dedent_interpd\ndef specgram(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, **kwargs):\n    \"\"\"\n    Plot a spectrogram.\n\n    Compute and plot a spectrogram of data in *x*.  Data are split into\n    *NFFT* length segments and the spectrum of each section is\n    computed.  The windowing function *window* is applied to each\n    segment, and the amount of overlap of each segment is\n    specified with *noverlap*. The spectrogram is plotted as a colormap\n    (using imshow).\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data.\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    mode : {'default', 'psd', 'magnitude', 'angle', 'phase'}\n        What sort of spectrum to use.  Default is 'psd', which takes the\n        power spectral density.  'magnitude' returns the magnitude\n        spectrum.  'angle' returns the phase spectrum without unwrapping.\n        'phase' returns the phase spectrum with unwrapping.\n\n    noverlap : int\n        The number of points of overlap between blocks.  The\n        default value is 128.\n\n    scale : {'default', 'linear', 'dB'}\n        The scaling of the values in the *spec*.  'linear' is no scaling.\n        'dB' returns the values in dB scale.  When *mode* is 'psd',\n        this is dB power (10 * log10).  Otherwise this is dB amplitude\n        (20 * log10). 'default' is 'dB' if *mode* is 'psd' or\n        'magnitude' and 'linear' otherwise.  This must be 'linear'\n        if *mode* is 'angle' or 'phase'.\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    cmap\n        A :class:`matplotlib.colors.Colormap` instance; if *None*, use\n        default determined by rc\n\n    xextent : *None* or (xmin, xmax)\n        The image extent along the x-axis. The default sets *xmin* to the\n        left border of the first bin (*spectrum* column) and *xmax* to the\n        right border of the last bin. Note that for *noverlap>0* the width\n        of the bins is smaller than those of the segments.\n\n    **kwargs\n        Additional keyword arguments are passed on to imshow which makes\n        the specgram image.\n\n    Returns\n    -------\n    spectrum : 2-D array\n        Columns are the periodograms of successive segments.\n\n    freqs : 1-D array\n        The frequencies corresponding to the rows in *spectrum*.\n\n    t : 1-D array\n        The times corresponding to midpoints of segments (i.e., the columns\n        in *spectrum*).\n\n    im : instance of class :class:`~matplotlib.image.AxesImage`\n        The image created by imshow containing the spectrogram\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` differs in the default overlap; in returning the mean\n        of the segment periodograms; in not returning times; and in\n        generating a line plot instead of colormap.\n\n    :func:`magnitude_spectrum`\n        A single spectrum, similar to having a single segment when *mode*\n        is 'magnitude'. Plots a line instead of a colormap.\n\n    :func:`angle_spectrum`\n        A single spectrum, similar to having a single segment when *mode*\n        is 'angle'. Plots a line instead of a colormap.\n\n    :func:`phase_spectrum`\n        A single spectrum, similar to having a single segment when *mode*\n        is 'phase'. Plots a line instead of a colormap.\n\n    Notes\n    -----\n    The parameters *detrend* and *scale_by_freq* do only apply when *mode*\n    is set to 'psd'.\n    \"\"\"\n    if NFFT is None:\n        NFFT = 256\n    if Fc is None:\n        Fc = 0\n    if noverlap is None:\n        noverlap = 128\n    if mode == 'complex':\n        raise ValueError('Cannot plot a complex specgram')\n    if scale is None or scale == 'default':\n        if mode in ['angle', 'phase']:\n            scale = 'linear'\n        else:\n            scale = 'dB'\n    elif mode in ['angle', 'phase'] and scale == 'dB':\n        raise ValueError('Cannot use dB scale with angle or phase mode')\n    (spec, freqs, t) = mlab.specgram(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode=mode)\n    if scale == 'linear':\n        Z = spec\n    elif scale == 'dB':\n        if mode is None or mode == 'default' or mode == 'psd':\n            Z = 10.0 * np.log10(spec)\n        else:\n            Z = 20.0 * np.log10(spec)\n    else:\n        raise ValueError('Unknown scale %s', scale)\n    Z = np.flipud(Z)\n    if xextent is None:\n        pad_xextent = (NFFT - noverlap) / Fs / 2\n        xextent = (np.min(t) - pad_xextent, np.max(t) + pad_xextent)\n    (xmin, xmax) = xextent\n    freqs += Fc\n    extent = (xmin, xmax, freqs[0], freqs[-1])\n    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax, **kwargs)\n    self.axis('auto')\n    return (spec, freqs, t, im)",
                            "@docstring.dedent_interpd\ndef spy(self, Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs):\n    \"\"\"\n    Plot the sparsity pattern of a 2D array.\n\n    This visualizes the non-zero values of the array.\n\n    Two plotting styles are available: image and marker. Both\n    are available for full arrays, but only the marker style\n    works for `scipy.sparse.spmatrix` instances.\n\n    **Image style**\n\n    If *marker* and *markersize* are *None*, `~.Axes.imshow` is used. Any\n    extra remaining keyword arguments are passed to this method.\n\n    **Marker style**\n\n    If *Z* is a `scipy.sparse.spmatrix` or *marker* or *markersize* are\n    *None*, a `.Line2D` object will be returned with the value of marker\n    determining the marker type, and any remaining keyword arguments\n    passed to `~.Axes.plot`.\n\n    Parameters\n    ----------\n    Z : array-like (M, N)\n        The array to be plotted.\n\n    precision : float or 'present', optional, default: 0\n        If *precision* is 0, any non-zero value will be plotted. Otherwise,\n        values of :math:`|Z| > precision` will be plotted.\n\n        For :class:`scipy.sparse.spmatrix` instances, you can also\n        pass 'present'. In this case any value present in the array\n        will be plotted, even if it is identically zero.\n\n    origin : {'upper', 'lower'}, optional\n        Place the [0, 0] index of the array in the upper left or lower left\n        corner of the axes. The convention 'upper' is typically used for\n        matrices and images.\n        If not given, :rc:`image.origin` is used, defaulting to 'upper'.\n\n\n    aspect : {'equal', 'auto', None} or float, optional\n        Controls the aspect ratio of the axes. The aspect is of particular\n        relevance for images since it may distort the image, i.e. pixel\n        will not be square.\n\n        This parameter is a shortcut for explicitly calling\n        `.Axes.set_aspect`. See there for further details.\n\n        - 'equal': Ensures an aspect ratio of 1. Pixels will be square.\n        - 'auto': The axes is kept fixed and the aspect is adjusted so\n          that the data fit in the axes. In general, this will result in\n          non-square pixels.\n        - *None*: Use :rc:`image.aspect`.\n\n        Default: 'equal'\n\n    Returns\n    -------\n    ret : `~matplotlib.image.AxesImage` or `.Line2D`\n        The return type depends on the plotting style (see above).\n\n    Other Parameters\n    ----------------\n    **kwargs\n        The supported additional parameters depend on the plotting style.\n\n        For the image style, you can pass the following additional\n        parameters of `~.Axes.imshow`:\n\n        - *cmap*\n        - *alpha*\n        - *url*\n        - any `.Artist` properties (passed on to the `.AxesImage`)\n\n        For the marker style, you can pass any `.Line2D` property except\n        for *linestyle*:\n\n        %(_Line2D_docstr)s\n    \"\"\"\n    if marker is None and markersize is None and hasattr(Z, 'tocoo'):\n        marker = 's'\n    if marker is None and markersize is None:\n        Z = np.asarray(Z)\n        mask = np.abs(Z) > precision\n        if 'cmap' not in kwargs:\n            kwargs['cmap'] = mcolors.ListedColormap(['w', 'k'], name='binary')\n        if 'interpolation' in kwargs:\n            raise TypeError(\"spy() got an unexpected keyword argument 'interpolation'\")\n        ret = self.imshow(mask, interpolation='nearest', aspect=aspect, origin=origin, **kwargs)\n    else:\n        if hasattr(Z, 'tocoo'):\n            c = Z.tocoo()\n            if precision == 'present':\n                y = c.row\n                x = c.col\n            else:\n                nonzero = np.abs(c.data) > precision\n                y = c.row[nonzero]\n                x = c.col[nonzero]\n        else:\n            Z = np.asarray(Z)\n            nonzero = np.abs(Z) > precision\n            (y, x) = np.nonzero(nonzero)\n        if marker is None:\n            marker = 's'\n        if markersize is None:\n            markersize = 10\n        if 'linestyle' in kwargs:\n            raise TypeError(\"spy() got an unexpected keyword argument 'linestyle'\")\n        marks = mlines.Line2D(x, y, linestyle='None', marker=marker, markersize=markersize, **kwargs)\n        self.add_line(marks)\n        (nr, nc) = Z.shape\n        self.set_xlim(-0.5, nc - 0.5)\n        self.set_ylim(nr - 0.5, -0.5)\n        self.set_aspect(aspect)\n        ret = marks\n    self.title.set_y(1.05)\n    self.xaxis.tick_top()\n    self.xaxis.set_ticks_position('both')\n    self.xaxis.set_major_locator(mticker.MaxNLocator(nbins=9, steps=[1, 2, 5, 10], integer=True))\n    self.yaxis.set_major_locator(mticker.MaxNLocator(nbins=9, steps=[1, 2, 5, 10], integer=True))\n    return ret",
                            "def matshow(self, Z, **kwargs):\n    \"\"\"\n    Plot the values of a 2D matrix or array as color-coded image.\n\n    The matrix will be shown the way it would be printed, with the first\n    row at the top.  Row and column numbering is zero-based.\n\n    Parameters\n    ----------\n    Z : array-like(M, N)\n        The matrix to be displayed.\n\n    Returns\n    -------\n    image : `~matplotlib.image.AxesImage`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.axes.Axes.imshow` arguments\n\n    See Also\n    --------\n    imshow : More general function to plot data on a 2D regular raster.\n\n    Notes\n    -----\n    This is just a convenience function wrapping `.imshow` to set useful\n    defaults for displaying a matrix. In particular:\n\n    - Set ``origin='upper'``.\n    - Set ``interpolation='nearest'``.\n    - Set ``aspect='equal'``.\n    - Ticks are placed to the left and above.\n    - Ticks are formatted to show integer indices.\n\n    \"\"\"\n    Z = np.asanyarray(Z)\n    kw = {'origin': 'upper', 'interpolation': 'nearest', 'aspect': 'equal', **kwargs}\n    im = self.imshow(Z, **kw)\n    self.title.set_y(1.05)\n    self.xaxis.tick_top()\n    self.xaxis.set_ticks_position('both')\n    self.xaxis.set_major_locator(mticker.MaxNLocator(nbins=9, steps=[1, 2, 5, 10], integer=True))\n    self.yaxis.set_major_locator(mticker.MaxNLocator(nbins=9, steps=[1, 2, 5, 10], integer=True))\n    return im",
                            "@_preprocess_data(replace_names=['dataset'])\ndef violinplot(self, dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, quantiles=None, points=100, bw_method=None):\n    \"\"\"\n    Make a violin plot.\n\n    Make a violin plot for each column of *dataset* or each vector in\n    sequence *dataset*.  Each filled area extends to represent the\n    entire data range, with optional lines at the mean, the median,\n    the minimum, the maximum, and user-specified quantiles.\n\n    Parameters\n    ----------\n    dataset : Array or a sequence of vectors.\n      The input data.\n\n    positions : array-like, default = [1, 2, ..., n]\n      Sets the positions of the violins. The ticks and limits are\n      automatically set to match the positions.\n\n    vert : bool, default = True.\n      If true, creates a vertical violin plot.\n      Otherwise, creates a horizontal violin plot.\n\n    widths : array-like, default = 0.5\n      Either a scalar or a vector that sets the maximal width of\n      each violin. The default is 0.5, which uses about half of the\n      available horizontal space.\n\n    showmeans : bool, default = False\n      If `True`, will toggle rendering of the means.\n\n    showextrema : bool, default = True\n      If `True`, will toggle rendering of the extrema.\n\n    showmedians : bool, default = False\n      If `True`, will toggle rendering of the medians.\n\n    quantiles : array-like, default = None\n      If not None, set a list of floats in interval [0, 1] for each violin,\n      which stands for the quantiles that will be rendered for that\n      violin.\n\n    points : scalar, default = 100\n      Defines the number of points to evaluate each of the\n      gaussian kernel density estimations at.\n\n    bw_method : str, scalar or callable, optional\n      The method used to calculate the estimator bandwidth.  This can be\n      'scott', 'silverman', a scalar constant or a callable.  If a\n      scalar, this will be used directly as `kde.factor`.  If a\n      callable, it should take a `GaussianKDE` instance as its only\n      parameter and return a scalar. If None (default), 'scott' is used.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the violinplot to a\n      list of the corresponding collection instances created. The\n      dictionary has the following keys:\n\n      - ``bodies``: A list of the `~.collections.PolyCollection`\n        instances containing the filled area of each violin.\n\n      - ``cmeans``: A `~.collections.LineCollection` instance that marks\n        the mean values of each of the violin's distribution.\n\n      - ``cmins``: A `~.collections.LineCollection` instance that marks\n        the bottom of each violin's distribution.\n\n      - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n        the top of each violin's distribution.\n\n      - ``cbars``: A `~.collections.LineCollection` instance that marks\n        the centers of each violin's distribution.\n\n      - ``cmedians``: A `~.collections.LineCollection` instance that\n        marks the median values of each of the violin's distribution.\n\n      - ``cquantiles``: A `~.collections.LineCollection` instance created\n        to identify the quantile values of each of the violin's\n        distribution.\n\n    \"\"\"\n\n    def _kde_method(X, coords):\n        if np.all(X[0] == X):\n            return (X[0] == coords).astype(float)\n        kde = mlab.GaussianKDE(X, bw_method)\n        return kde.evaluate(coords)\n    vpstats = cbook.violin_stats(dataset, _kde_method, points=points, quantiles=quantiles)\n    return self.violin(vpstats, positions=positions, vert=vert, widths=widths, showmeans=showmeans, showextrema=showextrema, showmedians=showmedians)",
                            "def violin(self, vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False):\n    \"\"\"Drawing function for violin plots.\n\n    Draw a violin plot for each column of *vpstats*. Each filled area\n    extends to represent the entire data range, with optional lines at the\n    mean, the median, the minimum, the maximum, and the quantiles values.\n\n    Parameters\n    ----------\n    vpstats : list of dicts\n      A list of dictionaries containing stats for each violin plot.\n      Required keys are:\n\n      - ``coords``: A list of scalars containing the coordinates that\n        the violin's kernel density estimate were evaluated at.\n\n      - ``vals``: A list of scalars containing the values of the\n        kernel density estimate at each of the coordinates given\n        in *coords*.\n\n      - ``mean``: The mean value for this violin's dataset.\n\n      - ``median``: The median value for this violin's dataset.\n\n      - ``min``: The minimum value for this violin's dataset.\n\n      - ``max``: The maximum value for this violin's dataset.\n\n      Optional keys are:\n\n      - ``quantiles``: A list of scalars containing the quantile values\n        for this violin's dataset.\n\n    positions : array-like, default = [1, 2, ..., n]\n      Sets the positions of the violins. The ticks and limits are\n      automatically set to match the positions.\n\n    vert : bool, default = True.\n      If true, plots the violins vertically.\n      Otherwise, plots the violins horizontally.\n\n    widths : array-like, default = 0.5\n      Either a scalar or a vector that sets the maximal width of\n      each violin. The default is 0.5, which uses about half of the\n      available horizontal space.\n\n    showmeans : bool, default = False\n      If true, will toggle rendering of the means.\n\n    showextrema : bool, default = True\n      If true, will toggle rendering of the extrema.\n\n    showmedians : bool, default = False\n      If true, will toggle rendering of the medians.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the violinplot to a\n      list of the corresponding collection instances created. The\n      dictionary has the following keys:\n\n      - ``bodies``: A list of the `~.collections.PolyCollection`\n        instances containing the filled area of each violin.\n\n      - ``cmeans``: A `~.collections.LineCollection` instance that marks\n        the mean values of each of the violin's distribution.\n\n      - ``cmins``: A `~.collections.LineCollection` instance that marks\n        the bottom of each violin's distribution.\n\n      - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n        the top of each violin's distribution.\n\n      - ``cbars``: A `~.collections.LineCollection` instance that marks\n        the centers of each violin's distribution.\n\n      - ``cmedians``: A `~.collections.LineCollection` instance that\n        marks the median values of each of the violin's distribution.\n\n      - ``cquantiles``: A `~.collections.LineCollection` instance created\n        to identify the quantiles values of each of the violin's\n        distribution.\n\n    \"\"\"\n    means = []\n    mins = []\n    maxes = []\n    medians = []\n    quantiles = np.asarray([])\n    artists = {}\n    N = len(vpstats)\n    datashape_message = 'List of violinplot statistics and `{0}` values must have the same length'\n    if positions is None:\n        positions = range(1, N + 1)\n    elif len(positions) != N:\n        raise ValueError(datashape_message.format('positions'))\n    if np.isscalar(widths):\n        widths = [widths] * N\n    elif len(widths) != N:\n        raise ValueError(datashape_message.format('widths'))\n    pmins = -0.25 * np.array(widths) + positions\n    pmaxes = 0.25 * np.array(widths) + positions\n    if vert:\n        fill = self.fill_betweenx\n        perp_lines = self.hlines\n        par_lines = self.vlines\n    else:\n        fill = self.fill_between\n        perp_lines = self.vlines\n        par_lines = self.hlines\n    if rcParams['_internal.classic_mode']:\n        fillcolor = 'y'\n        edgecolor = 'r'\n    else:\n        fillcolor = edgecolor = self._get_lines.get_next_color()\n    bodies = []\n    for (stats, pos, width) in zip(vpstats, positions, widths):\n        vals = np.array(stats['vals'])\n        vals = 0.5 * width * vals / vals.max()\n        bodies += [fill(stats['coords'], -vals + pos, vals + pos, facecolor=fillcolor, alpha=0.3)]\n        means.append(stats['mean'])\n        mins.append(stats['min'])\n        maxes.append(stats['max'])\n        medians.append(stats['median'])\n        q = stats.get('quantiles')\n        if q is not None:\n            quantiles = np.concatenate((quantiles, q))\n    artists['bodies'] = bodies\n    if showmeans:\n        artists['cmeans'] = perp_lines(means, pmins, pmaxes, colors=edgecolor)\n    if showextrema:\n        artists['cmaxes'] = perp_lines(maxes, pmins, pmaxes, colors=edgecolor)\n        artists['cmins'] = perp_lines(mins, pmins, pmaxes, colors=edgecolor)\n        artists['cbars'] = par_lines(positions, mins, maxes, colors=edgecolor)\n    if showmedians:\n        artists['cmedians'] = perp_lines(medians, pmins, pmaxes, colors=edgecolor)\n    if quantiles.size > 0:\n        ppmins = np.asarray([])\n        ppmaxs = np.asarray([])\n        for (stats, cmin, cmax) in zip(vpstats, pmins, pmaxes):\n            q = stats.get('quantiles')\n            if q is not None:\n                ppmins = np.concatenate((ppmins, [cmin] * np.size(q)))\n                ppmaxs = np.concatenate((ppmaxs, [cmax] * np.size(q)))\n        artists['cquantiles'] = perp_lines(quantiles, ppmins, ppmaxs, colors=edgecolor)\n    return artists",
                            "def get_next_color():\n    return next(color_cycle)",
                            "def doplot(*args, **kwargs):\n    return self.plot(*args, **kwargs)",
                            "def dopatch(xs, ys, **kwargs):\n    return patch_list(xs, ys, **kwargs)",
                            "def doplot(*args, **kwargs):\n    shuffled = []\n    for i in range(0, len(args), 2):\n        shuffled.extend([args[i + 1], args[i]])\n    return self.plot(*shuffled, **kwargs)",
                            "def dopatch(xs, ys, **kwargs):\n    (xs, ys) = (ys, xs)\n    return patch_list(xs, ys, **kwargs)",
                            "def get_interp_point(ind):\n    im1 = max(ind - 1, 0)\n    x_values = x[im1:ind + 1]\n    diff_values = y1[im1:ind + 1] - y2[im1:ind + 1]\n    y1_values = y1[im1:ind + 1]\n    if len(diff_values) == 2:\n        if np.ma.is_masked(diff_values[1]):\n            return (x[im1], y1[im1])\n        elif np.ma.is_masked(diff_values[0]):\n            return (x[ind], y1[ind])\n    diff_order = diff_values.argsort()\n    diff_root_x = np.interp(0, diff_values[diff_order], x_values[diff_order])\n    x_order = x_values.argsort()\n    diff_root_y = np.interp(diff_root_x, x_values[x_order], y1_values[x_order])\n    return (diff_root_x, diff_root_y)",
                            "def get_interp_point(ind):\n    im1 = max(ind - 1, 0)\n    y_values = y[im1:ind + 1]\n    diff_values = x1[im1:ind + 1] - x2[im1:ind + 1]\n    x1_values = x1[im1:ind + 1]\n    if len(diff_values) == 2:\n        if np.ma.is_masked(diff_values[1]):\n            return (x1[im1], y[im1])\n        elif np.ma.is_masked(diff_values[0]):\n            return (x1[ind], y[ind])\n    diff_order = diff_values.argsort()\n    diff_root_y = np.interp(0, diff_values[diff_order], y_values[diff_order])\n    y_order = y_values.argsort()\n    diff_root_x = np.interp(diff_root_y, y_values[y_order], x1_values[y_order])\n    return (diff_root_x, diff_root_y)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "annotate.__doc__ = mtext.Annotation.__init__.__doc__",
                            "quiver.__doc__ = mquiver.Quiver.quiver_doc",
                            "contour.__doc__ = mcontour.QuadContourSet._contour_doc",
                            "contourf.__doc__ = mcontour.QuadContourSet._contour_doc",
                            "clabel.__doc__ = mcontour.ContourSet.clabel.__doc__",
                            "table = mtable.table",
                            "stackplot = _preprocess_data()(mstack.stackplot)",
                            "streamplot = _preprocess_data(replace_names=['x', 'y', 'u', 'v', 'start_points'])(mstream.streamplot)",
                            "tricontour = mtri.tricontour",
                            "tricontourf = mtri.tricontourf",
                            "tripcolor = mtri.tripcolor",
                            "triplot = mtri.triplot"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "aname(self)",
                            "get_title(self, loc='center')",
                            "set_title(self, label, fontdict=None, loc=None, pad=None, **kwargs)",
                            "get_xlabel(self)",
                            "set_xlabel(self, xlabel, fontdict=None, labelpad=None, **kwargs)",
                            "get_ylabel(self)",
                            "set_ylabel(self, ylabel, fontdict=None, labelpad=None, **kwargs)",
                            "get_legend_handles_labels(self, legend_handler_map=None)",
                            "legend(self, *args, **kwargs)",
                            "_remove_legend(self, legend)",
                            "inset_axes(self, bounds, **kwargs)",
                            "indicate_inset(self, bounds, inset_ax=None, **kwargs)",
                            "indicate_inset_zoom(self, inset_ax, **kwargs)",
                            "secondary_xaxis(self, location, **kwargs)",
                            "secondary_yaxis(self, location, **kwargs)",
                            "text(self, x, y, s, fontdict=None, withdash=False, **kwargs)",
                            "annotate(self, s, xy, *args, **kwargs)",
                            "axhline(self, y=0, xmin=0, xmax=1, **kwargs)",
                            "axvline(self, x=0, ymin=0, ymax=1, **kwargs)",
                            "axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs)",
                            "axvspan(self, xmin, xmax, ymin=0, ymax=1, **kwargs)",
                            "hlines(self, y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs)",
                            "vlines(self, x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs)",
                            "eventplot(self, positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', **kwargs)",
                            "plot(self, *args, **kwargs)",
                            "plot_date(self, x, y, fmt='o', tz=None, xdate=True, ydate=False, **kwargs)",
                            "loglog(self, *args, **kwargs)",
                            "semilogx(self, *args, **kwargs)",
                            "semilogy(self, *args, **kwargs)",
                            "acorr(self, x, **kwargs)",
                            "xcorr(self, x, y, normed=True, detrend=mlab.detrend_none, usevlines=True, maxlags=10, **kwargs)",
                            "step(self, x, y, *args, **kwargs)",
                            "_convert_dx(dx, x0, xconv, convert)",
                            "bar(self, x, height, width=0.8, bottom=None, **kwargs)",
                            "barh(self, y, width, height=0.8, left=None, **kwargs)",
                            "broken_barh(self, xranges, yrange, **kwargs)",
                            "stem(self, *args)",
                            "pie(self, x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False)",
                            "errorbar(self, x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, **kwargs)",
                            "boxplot(self, x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None)",
                            "bxp(self, bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None)",
                            "_parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func)",
                            "scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, **kwargs)",
                            "hexbin(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=np.mean, mincnt=None, marginals=False, **kwargs)",
                            "arrow(self, x, y, dx, dy, **kwargs)",
                            "quiverkey(self, Q, X, Y, U, label, **kw)",
                            "_quiver_units(self, args, kw)",
                            "quiver(self, *args, **kw)",
                            "barbs(self, *args, **kw)",
                            "fill(self, *args, **kwargs)",
                            "fill_between(self, x, y1, y2=0, where=None, interpolate=False, step=None, **kwargs)",
                            "fill_betweenx(self, y, x1, x2=0, where=None, step=None, interpolate=False, **kwargs)",
                            "imshow(self, X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, shape=None, filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None, **kwargs)",
                            "_pcolorargs(funcname, *args)",
                            "pcolor(self, *args, **kwargs)",
                            "pcolormesh(self, *args, **kwargs)",
                            "pcolorfast(self, *args, **kwargs)",
                            "contour(self, *args, **kwargs)",
                            "contourf(self, *args, **kwargs)",
                            "clabel(self, CS, *args, **kwargs)",
                            "hist(self, x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, **kwargs)",
                            "hist2d(self, x, y, bins=10, range=None, density=False, weights=None, cmin=None, cmax=None, **kwargs)",
                            "psd(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs)",
                            "csd(self, x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs)",
                            "magnitude_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, **kwargs)",
                            "angle_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs)",
                            "phase_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs)",
                            "cohere(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs)",
                            "specgram(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, **kwargs)",
                            "spy(self, Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs)",
                            "matshow(self, Z, **kwargs)",
                            "violinplot(self, dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, quantiles=None, points=100, bw_method=None)",
                            "violin(self, vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False)",
                            "get_next_color()",
                            "doplot(*args, **kwargs)",
                            "dopatch(xs, ys, **kwargs)",
                            "doplot(*args, **kwargs)",
                            "dopatch(xs, ys, **kwargs)",
                            "get_interp_point(ind)",
                            "get_interp_point(ind)"
                        ],
                        "class_level_variable_names": [
                            "table",
                            "stackplot",
                            "streamplot",
                            "tricontour",
                            "tricontourf",
                            "tripcolor",
                            "triplot"
                        ],
                        "constructor_variable_names": []
                    },
                    "used_imports": [
                        "import itertools",
                        "from numbers import Number",
                        "import numpy as np",
                        "import matplotlib.cbook as cbook",
                        "import matplotlib.colors as mcolors",
                        "from matplotlib import _preprocess_data, rcParams",
                        "from numpy.lib.histograms import histogram_bin_edges",
                        "from builtins import range"
                    ],
                    "variable_values": [
                        [
                            {
                                "bin_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isscalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "[[datetime.datetime(2019, 1, 5, 0, 0), datetime.datetime(2019, 1, 11, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)], [datetime.datetime(2019, 1, 11, 0, 0), datetime.datetime(2019, 2, 5, 0, 0), datetime.datetime(2019, 2, 18, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)]]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bins": {
                                    "variable_value": "[datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histtype": {
                                    "variable_value": "'bar'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "align": {
                                    "variable_value": "'mid'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "orientation": {
                                    "variable_value": "'vertical'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "stacked": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "input_empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._reshape_2D": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines.get_next_color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines": {
                                    "variable_value": "<matplotlib.axes._base._process_plot_var_args object at 0x7f9c1cf11fd0>",
                                    "variable_type": "_process_plot_var_args",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors.to_rgba_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "error_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hist_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histogram_bin_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "density": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumulative": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "slc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_saved_autoscalex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_saved_autoscaley": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "histtype.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x7f9c22056e70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "totwidth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rwidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "boffset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_barfunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.barh": {
                                    "variable_value": "<bound method Axes.barh of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "bottom_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.bar": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "c": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "height": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "patches.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xscale": {
                                    "variable_value": "<bound method _AxesBase.set_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_yscale": {
                                    "variable_value": "<bound method _AxesBase.set_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x7f9c131687c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.fill": {
                                    "variable_value": "<bound method Axes.fill of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "patch_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches.reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_autoscale_view": {
                                    "variable_value": "<bound method _AxesBase._request_autoscale_view of <matplotlib.axes._subplots.AxesSubplot object at 0x7f9c1ceab4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lab": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lbl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.set_label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.silent_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "bin_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isscalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "[[datetime.datetime(2019, 1, 5, 0, 0), datetime.datetime(2019, 1, 11, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)], [datetime.datetime(2019, 1, 11, 0, 0), datetime.datetime(2019, 2, 5, 0, 0), datetime.datetime(2019, 2, 18, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)]]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bins": {
                                    "variable_value": "[datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histtype": {
                                    "variable_value": "'bar'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "align": {
                                    "variable_value": "'mid'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "orientation": {
                                    "variable_value": "'vertical'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "stacked": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "input_empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._reshape_2D": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.is_scalar_or_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines.get_next_color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines": {
                                    "variable_value": "<matplotlib.axes._base._process_plot_var_args object at 0x7fecf7958940>",
                                    "variable_type": "_process_plot_var_args",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors.to_rgba_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "error_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hist_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histogram_bin_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "density": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumulative": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "slc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_saved_autoscalex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_saved_autoscaley": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "histtype.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x7fecfd4a8c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "totwidth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rwidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "boffset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_barfunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.barh": {
                                    "variable_value": "<bound method Axes.barh of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "bottom_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.bar": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "c": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "height": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "patches.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xscale": {
                                    "variable_value": "<bound method _AxesBase.set_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_yscale": {
                                    "variable_value": "<bound method _AxesBase.set_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x7fecec135fc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.fill": {
                                    "variable_value": "<bound method Axes.fill of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "patch_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches.reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_autoscale_view": {
                                    "variable_value": "<bound method _AxesBase._request_autoscale_view of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lab": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lbl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.set_label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.silent_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "bin_range": {
                                    "variable_value": "(737064.0, 737119.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "np.isscalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "[array([737064., 737070., 737091., 737119.]), array([737070., 737095., 737108., 737119.])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bins": {
                                    "variable_value": "array([737060., 737091., 737119.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histtype": {
                                    "variable_value": "'bar'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "align": {
                                    "variable_value": "'mid'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "orientation": {
                                    "variable_value": "'vertical'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "stacked": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "input_empty": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._reshape_2D": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nx": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xi": {
                                    "variable_value": "array([737070., 737095., 737108., 737119.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "cbook.is_scalar_or_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": "[None, None]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "wi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "['b', 'g']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._get_lines.get_next_color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines": {
                                    "variable_value": "<matplotlib.axes._base._process_plot_var_args object at 0x7fecf7958940>",
                                    "variable_type": "_process_plot_var_args",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "mcolors.to_rgba_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "error_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hist_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "xmin": {
                                    "variable_value": "737064.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "737119.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.nanmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_w": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histogram_bin_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "density": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tops": {
                                    "variable_value": "array([[2., 2.],\n       [3., 5.]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2, 2)"
                                },
                                "m": {
                                    "variable_value": "array([3., 5.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.cumsum": {
                                    "variable_value": "<built-in method cumsum of numpy.ndarray object at 0x7fecf78b6f30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumulative": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "slc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches": {
                                    "variable_value": "[<BarContainer object of 2 artists>, <BarContainer object of 2 artists>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "_saved_autoscalex": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.get_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_saved_autoscaley": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.get_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "histtype.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x7fecfd4a8c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "totwidth": {
                                    "variable_value": "array([31., 28.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "rwidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dr": {
                                    "variable_value": "0.8",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": "array([24.8, 22.4])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "dw": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "boffset": {
                                    "variable_value": "array([15.5, 14. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_barfunc": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.barh": {
                                    "variable_value": "<bound method Axes.barh of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "bottom_kwarg": {
                                    "variable_value": "'bottom'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self.bar": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "c": {
                                    "variable_value": "'g'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "bottom": {
                                    "variable_value": "array([3., 5.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "height": {
                                    "variable_value": "array([1., 3.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "patch": {
                                    "variable_value": "<BarContainer object of 2 artists>",
                                    "variable_type": "BarContainer",
                                    "variable_shape": "2"
                                },
                                "log": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "patches.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fecf794d240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xscale": {
                                    "variable_value": "<bound method _AxesBase.set_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_yscale": {
                                    "variable_value": "<bound method _AxesBase.set_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x7fecf793a180>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.fill": {
                                    "variable_value": "<bound method Axes.fill of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "patch_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patches.reverse": {
                                    "variable_value": "<built-in method reverse of list object at 0x7fecf794d240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._request_autoscale_view": {
                                    "variable_value": "<bound method _AxesBase._request_autoscale_view of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "labels": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lab": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lbl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "itertools.zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": "<matplotlib.patches.Rectangle object at 0x7fecf7ba7940>",
                                    "variable_type": "Rectangle",
                                    "variable_shape": null
                                },
                                "p.update": {
                                    "variable_value": "<bound method Artist.update of <matplotlib.patches.Rectangle object at 0x7fecf7ba7940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p.set_label": {
                                    "variable_value": "<bound method Artist.set_label of <matplotlib.patches.Rectangle object at 0x7fecf7ba7940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook.silent_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "bin_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isscalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "[[datetime.datetime(2019, 1, 5, 0, 0), datetime.datetime(2019, 1, 11, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)], [datetime.datetime(2019, 1, 11, 0, 0), datetime.datetime(2019, 2, 5, 0, 0), datetime.datetime(2019, 2, 18, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)]]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bins": {
                                    "variable_value": "[datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histtype": {
                                    "variable_value": "'bar'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "align": {
                                    "variable_value": "'mid'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "orientation": {
                                    "variable_value": "'vertical'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "stacked": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "input_empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._reshape_2D": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.is_scalar_or_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines.get_next_color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines": {
                                    "variable_value": "<matplotlib.axes._base._process_plot_var_args object at 0x7fecf7958940>",
                                    "variable_type": "_process_plot_var_args",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors.to_rgba_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "error_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hist_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histogram_bin_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "density": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumulative": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "slc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_saved_autoscalex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_saved_autoscaley": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "histtype.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x7fecfd4a8c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "totwidth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rwidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "boffset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_barfunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.barh": {
                                    "variable_value": "<bound method Axes.barh of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "bottom_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.bar": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "c": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "height": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "patches.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xscale": {
                                    "variable_value": "<bound method _AxesBase.set_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_yscale": {
                                    "variable_value": "<bound method _AxesBase.set_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x7fecec135fc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.fill": {
                                    "variable_value": "<bound method Axes.fill of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "patch_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches.reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_autoscale_view": {
                                    "variable_value": "<bound method _AxesBase._request_autoscale_view of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lab": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lbl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.set_label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.silent_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "bin_range": {
                                    "variable_value": "(737064.0, 737119.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "np.isscalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "[array([737064., 737070., 737091., 737119.]), array([737070., 737095., 737108., 737119.])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bins": {
                                    "variable_value": "array([737060., 737091., 737119.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histtype": {
                                    "variable_value": "'bar'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "align": {
                                    "variable_value": "'mid'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "orientation": {
                                    "variable_value": "'vertical'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "stacked": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "input_empty": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._reshape_2D": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nx": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xi": {
                                    "variable_value": "array([737070., 737095., 737108., 737119.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "cbook.is_scalar_or_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": "[None, None]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "wi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "['r', 'c']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._get_lines.get_next_color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_lines": {
                                    "variable_value": "<matplotlib.axes._base._process_plot_var_args object at 0x7fecf7958940>",
                                    "variable_type": "_process_plot_var_args",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "mcolors.to_rgba_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mcolors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "error_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hist_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "xmin": {
                                    "variable_value": "737064.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "737119.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.nanmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nanmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_w": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "histogram_bin_edges": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "density": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tops": {
                                    "variable_value": "array([[2., 2.],\n       [1., 3.]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2, 2)"
                                },
                                "m": {
                                    "variable_value": "array([1., 3.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tops.cumsum": {
                                    "variable_value": "<built-in method cumsum of numpy.ndarray object at 0x7fecf338f5d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumulative": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "slc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cumsum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patches": {
                                    "variable_value": "[<BarContainer object of 2 artists>, <BarContainer object of 2 artists>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "_saved_autoscalex": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.get_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_saved_autoscaley": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.get_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.get_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscalex_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscalex_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_autoscaley_on": {
                                    "variable_value": "<bound method _AxesBase.set_autoscaley_on of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "histtype.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x7fecfd4a8c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "totwidth": {
                                    "variable_value": "array([31., 28.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "rwidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dr": {
                                    "variable_value": "0.8",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": "array([12.4, 11.2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "dw": {
                                    "variable_value": "array([12.4, 11.2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "boffset": {
                                    "variable_value": "array([34.1, 30.8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_barfunc": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.barh": {
                                    "variable_value": "<bound method Axes.barh of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "bottom_kwarg": {
                                    "variable_value": "'bottom'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self.bar": {
                                    "variable_value": "<bound method Axes.bar of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "c": {
                                    "variable_value": "'c'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "bottom": {
                                    "variable_value": "array([0., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "height": {
                                    "variable_value": "array([1., 3.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "patch": {
                                    "variable_value": "<BarContainer object of 2 artists>",
                                    "variable_type": "BarContainer",
                                    "variable_shape": "2"
                                },
                                "log": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "patches.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fecf793a380>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xscale": {
                                    "variable_value": "<bound method _AxesBase.set_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.set_yscale": {
                                    "variable_value": "<bound method _AxesBase.set_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x7fecf793a600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.fill": {
                                    "variable_value": "<bound method Axes.fill of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "patch_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.y": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patch.sticky_edges.x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patches.reverse": {
                                    "variable_value": "<built-in method reverse of list object at 0x7fecf793a380>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._request_autoscale_view": {
                                    "variable_value": "<bound method _AxesBase._request_autoscale_view of <matplotlib.axes._subplots.AxesSubplot object at 0x7fecf794aac0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "labels": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lab": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lbl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "itertools.zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": "<matplotlib.patches.Rectangle object at 0x7fecf7bdcf10>",
                                    "variable_type": "Rectangle",
                                    "variable_shape": null
                                },
                                "p.update": {
                                    "variable_value": "<bound method Artist.update of <matplotlib.patches.Rectangle object at 0x7fecf7bdcf10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p.set_label": {
                                    "variable_value": "<bound method Artist.set_label of <matplotlib.patches.Rectangle object at 0x7fecf7bdcf10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook.silent_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _make_inset_locator(bounds, trans, parent):\n    \"\"\"\n    Helper function to locate inset axes, used in\n    `.Axes.inset_axes`.\n\n    A locator gets used in `Axes.set_aspect` to override the default\n    locations...  It is a function that takes an axes object and\n    a renderer and tells `set_aspect` where it is to be placed.\n\n    Here *rect* is a rectangle [l, b, w, h] that specifies the\n    location for the axes in the transform given by *trans* on the\n    *parent*.\n    \"\"\"\n    _bounds = mtransforms.Bbox.from_bounds(*bounds)\n    _trans = trans\n    _parent = parent\n\n    def inset_locator(ax, renderer):\n        bbox = _bounds\n        bb = mtransforms.TransformedBbox(bbox, _trans)\n        tr = _parent.figure.transFigure.inverted()\n        bb = mtransforms.TransformedBbox(bb, tr)\n        return bb\n\n    return inset_locator",
                        "signature": "_make_inset_locator(bounds, trans, parent)"
                    },
                    {
                        "code": "def histogram_bin_edges(arr, bins, range=None, weights=None):\n    # this in True for 1D arrays, and False for None and str\n    if np.ndim(bins) == 1:\n        return bins\n\n    if isinstance(bins, str):\n        # rather than backporting the internals, just do the full\n        # computation.  If this is too slow for users, they can\n        # update numpy, or pick a manual number of bins\n        return np.histogram(arr, bins, range, weights)[1]\n    else:\n        if bins is None:\n            # hard-code numpy's default\n            bins = 10\n        if range is None:\n            range = np.min(arr), np.max(arr)\n\n        return np.linspace(*range, bins + 1)",
                        "signature": "histogram_bin_edges(arr, bins, range=None, weights=None)"
                    },
                    {
                        "code": "def get_next_color():\n    return next(color_cycle)",
                        "signature": "get_next_color()"
                    },
                    {
                        "code": "def doplot(*args, **kwargs):\n    return self.plot(*args, **kwargs)",
                        "signature": "doplot(*args, **kwargs)"
                    },
                    {
                        "code": "def dopatch(xs, ys, **kwargs):\n    return patch_list(xs, ys, **kwargs)",
                        "signature": "dopatch(xs, ys, **kwargs)"
                    },
                    {
                        "code": "def doplot(*args, **kwargs):\n    shuffled = []\n    for i in range(0, len(args), 2):\n        shuffled.extend([args[i + 1], args[i]])\n    return self.plot(*shuffled, **kwargs)",
                        "signature": "doplot(*args, **kwargs)"
                    },
                    {
                        "code": "def dopatch(xs, ys, **kwargs):\n    xs, ys = ys, xs  # flip X, Y\n    return patch_list(xs, ys, **kwargs)",
                        "signature": "dopatch(xs, ys, **kwargs)"
                    },
                    {
                        "code": "def get_interp_point(ind):\n    im1 = max(ind - 1, 0)\n    x_values = x[im1:ind + 1]\n    diff_values = y1[im1:ind + 1] - y2[im1:ind + 1]\n    y1_values = y1[im1:ind + 1]\n\n    if len(diff_values) == 2:\n        if np.ma.is_masked(diff_values[1]):\n            return x[im1], y1[im1]\n        elif np.ma.is_masked(diff_values[0]):\n            return x[ind], y1[ind]\n\n    diff_order = diff_values.argsort()\n    diff_root_x = np.interp(\n        0, diff_values[diff_order], x_values[diff_order])\n    x_order = x_values.argsort()\n    diff_root_y = np.interp(diff_root_x, x_values[x_order],\n                            y1_values[x_order])\n    return diff_root_x, diff_root_y",
                        "signature": "get_interp_point(ind)"
                    },
                    {
                        "code": "def get_interp_point(ind):\n    im1 = max(ind - 1, 0)\n    y_values = y[im1:ind + 1]\n    diff_values = x1[im1:ind + 1] - x2[im1:ind + 1]\n    x1_values = x1[im1:ind + 1]\n\n    if len(diff_values) == 2:\n        if np.ma.is_masked(diff_values[1]):\n            return x1[im1], y[im1]\n        elif np.ma.is_masked(diff_values[0]):\n            return x1[ind], y[ind]\n\n    diff_order = diff_values.argsort()\n    diff_root_y = np.interp(\n        0, diff_values[diff_order], y_values[diff_order])\n    y_order = y_values.argsort()\n    diff_root_x = np.interp(diff_root_y, y_values[y_order],\n                            x1_values[y_order])\n    return diff_root_x, diff_root_y",
                        "signature": "get_interp_point(ind)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Axes:",
                        "functions": [
                            {
                                "code": "@cbook.deprecated(\"3.1\")\n@property\ndef aname(self):\n    return 'Axes'",
                                "signature": "aname(self)"
                            },
                            {
                                "code": "def get_title(self, loc=\"center\"):\n    \"\"\"\n    Get an axes title.\n\n    Get one of the three available axes titles. The available titles\n    are positioned above the axes in the center, flush with the left\n    edge, and flush with the right edge.\n\n    Parameters\n    ----------\n    loc : {'center', 'left', 'right'}, str, optional\n        Which title to get, defaults to 'center'.\n\n    Returns\n    -------\n    title : str\n        The title text string.\n\n    \"\"\"\n    titles = {'left': self._left_title,\n              'center': self.title,\n              'right': self._right_title}\n    title = cbook._check_getitem(titles, loc=loc.lower())\n    return title.get_text()",
                                "signature": "get_title(self, loc='center')"
                            },
                            {
                                "code": "def set_title(self, label, fontdict=None, loc=None, pad=None,\n                **kwargs):\n    \"\"\"\n    Set a title for the axes.\n\n    Set one of the three available axes titles. The available titles\n    are positioned above the axes in the center, flush with the left\n    edge, and flush with the right edge.\n\n    Parameters\n    ----------\n    label : str\n        Text to use for the title\n\n    fontdict : dict\n        A dictionary controlling the appearance of the title text,\n        the default *fontdict* is::\n\n           {'fontsize': rcParams['axes.titlesize'],\n            'fontweight' : rcParams['axes.titleweight'],\n            'color' : rcParams['axes.titlecolor'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    loc : {'center', 'left', 'right'}, str, optional\n        Which title to set.\n        If *None*, defaults to :rc:`axes.titlelocation`.\n\n    pad : float\n        The offset of the title from the top of the axes, in points.\n        If *None*, defaults to :rc:`axes.titlepad`.\n\n    Returns\n    -------\n    text : :class:`~matplotlib.text.Text`\n        The matplotlib text instance representing the title\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.text.Text` properties\n        Other keyword arguments are text properties, see\n        :class:`~matplotlib.text.Text` for a list of valid text\n        properties.\n    \"\"\"\n    if loc is None:\n        loc = rcParams['axes.titlelocation']\n\n    titles = {'left': self._left_title,\n              'center': self.title,\n              'right': self._right_title}\n    title = cbook._check_getitem(titles, loc=loc.lower())\n    default = {\n        'fontsize': rcParams['axes.titlesize'],\n        'fontweight': rcParams['axes.titleweight'],\n        'verticalalignment': 'baseline',\n        'horizontalalignment': loc.lower()}\n    titlecolor = rcParams['axes.titlecolor']\n    if not cbook._str_lower_equal(titlecolor, 'auto'):\n        default[\"color\"] = titlecolor\n    if pad is None:\n        pad = rcParams['axes.titlepad']\n    self._set_title_offset_trans(float(pad))\n    title.set_text(label)\n    title.update(default)\n    if fontdict is not None:\n        title.update(fontdict)\n    title.update(kwargs)\n    return title",
                                "signature": "set_title(self, label, fontdict=None, loc=None, pad=None, **kwargs)"
                            },
                            {
                                "code": "def get_xlabel(self):\n    \"\"\"\n    Get the xlabel text string.\n    \"\"\"\n    label = self.xaxis.get_label()\n    return label.get_text()",
                                "signature": "get_xlabel(self)"
                            },
                            {
                                "code": "def set_xlabel(self, xlabel, fontdict=None, labelpad=None, **kwargs):\n    \"\"\"\n    Set the label for the x-axis.\n\n    Parameters\n    ----------\n    xlabel : str\n        The label text.\n\n    labelpad : scalar, optional, default: None\n        Spacing in points from the axes bounding box including ticks\n        and tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs : `.Text` properties\n        `.Text` properties control the appearance of the label.\n\n    See also\n    --------\n    text : for information on how override and the optional args work\n    \"\"\"\n    if labelpad is not None:\n        self.xaxis.labelpad = labelpad\n    return self.xaxis.set_label_text(xlabel, fontdict, **kwargs)",
                                "signature": "set_xlabel(self, xlabel, fontdict=None, labelpad=None, **kwargs)"
                            },
                            {
                                "code": "def get_ylabel(self):\n    \"\"\"\n    Get the ylabel text string.\n    \"\"\"\n    label = self.yaxis.get_label()\n    return label.get_text()",
                                "signature": "get_ylabel(self)"
                            },
                            {
                                "code": "def set_ylabel(self, ylabel, fontdict=None, labelpad=None, **kwargs):\n    \"\"\"\n    Set the label for the y-axis.\n\n    Parameters\n    ----------\n    ylabel : str\n        The label text.\n\n    labelpad : scalar, optional, default: None\n        Spacing in points from the axes bounding box including ticks\n        and tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs : `.Text` properties\n        `.Text` properties control the appearance of the label.\n\n    See also\n    --------\n    text : for information on how override and the optional args work\n\n    \"\"\"\n    if labelpad is not None:\n        self.yaxis.labelpad = labelpad\n    return self.yaxis.set_label_text(ylabel, fontdict, **kwargs)",
                                "signature": "set_ylabel(self, ylabel, fontdict=None, labelpad=None, **kwargs)"
                            },
                            {
                                "code": "def get_legend_handles_labels(self, legend_handler_map=None):\n    \"\"\"\n    Return handles and labels for legend\n\n    ``ax.legend()`` is equivalent to ::\n\n      h, l = ax.get_legend_handles_labels()\n      ax.legend(h, l)\n\n    \"\"\"\n\n    # pass through to legend.\n    handles, labels = mlegend._get_legend_handles_labels([self],\n            legend_handler_map)\n    return handles, labels",
                                "signature": "get_legend_handles_labels(self, legend_handler_map=None)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef legend(self, *args, **kwargs):\n    \"\"\"\n    Place a legend on the axes.\n\n    Call signatures::\n\n        legend()\n        legend(labels)\n        legend(handles, labels)\n\n    The call signatures correspond to three different ways how to use\n    this method.\n\n    **1. Automatic detection of elements to be shown in the legend**\n\n    The elements to be added to the legend are automatically determined,\n    when you do not pass in any extra arguments.\n\n    In this case, the labels are taken from the artist. You can specify\n    them either at artist creation or by calling the\n    :meth:`~.Artist.set_label` method on the artist::\n\n        line, = ax.plot([1, 2, 3], label='Inline label')\n        ax.legend()\n\n    or::\n\n        line, = ax.plot([1, 2, 3])\n        line.set_label('Label via method')\n        ax.legend()\n\n    Specific lines can be excluded from the automatic legend element\n    selection by defining a label starting with an underscore.\n    This is default for all artists, so calling `Axes.legend` without\n    any arguments and without setting the labels manually will result in\n    no legend being drawn.\n\n\n    **2. Labeling existing plot elements**\n\n    To make a legend for lines which already exist on the axes\n    (via plot for instance), simply call this function with an iterable\n    of strings, one for each legend item. For example::\n\n        ax.plot([1, 2, 3])\n        ax.legend(['A simple line'])\n\n    Note: This way of using is discouraged, because the relation between\n    plot elements and labels is only implicit by their order and can\n    easily be mixed up.\n\n\n    **3. Explicitly defining the elements in the legend**\n\n    For full control of which artists have a legend entry, it is possible\n    to pass an iterable of legend artists followed by an iterable of\n    legend labels respectively::\n\n        legend((line1, line2, line3), ('label1', 'label2', 'label3'))\n\n    Parameters\n    ----------\n    handles : sequence of `.Artist`, optional\n        A list of Artists (lines, patches) to be added to the legend.\n        Use this together with *labels*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n        The length of handles and labels should be the same in this\n        case. If they are not, they are truncated to the smaller length.\n\n    labels : list of str, optional\n        A list of labels to show next to the artists.\n        Use this together with *handles*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n    Other Parameters\n    ----------------\n    %(_legend_kw_doc)s\n\n    Returns\n    -------\n    legend : `~matplotlib.legend.Legend`\n\n    Notes\n    -----\n    Not all kinds of artist are supported by the legend command. See\n    :doc:`/tutorials/intermediate/legend_guide` for details.\n\n    Examples\n    --------\n    .. plot:: gallery/text_labels_and_annotations/legend.py\n    \"\"\"\n    handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n            [self],\n            *args,\n            **kwargs)\n    if len(extra_args):\n        raise TypeError('legend only accepts two non-keyword arguments')\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n    self.legend_._remove_method = self._remove_legend\n    return self.legend_",
                                "signature": "legend(self, *args, **kwargs)"
                            },
                            {
                                "code": "def _remove_legend(self, legend):\n    self.legend_ = None",
                                "signature": "_remove_legend(self, legend)"
                            },
                            {
                                "code": "def inset_axes(self, bounds, *, transform=None, zorder=5,\n        **kwargs):\n    \"\"\"\n    Add a child inset axes to this existing axes.\n\n    Warnings\n    --------\n    This method is experimental as of 3.0, and the API may change.\n\n    Parameters\n    ----------\n    bounds : [x0, y0, width, height]\n        Lower-left corner of inset axes, and its width and height.\n\n    transform : `.Transform`\n        Defaults to `ax.transAxes`, i.e. the units of *rect* are in\n        axes-relative coordinates.\n\n    zorder : number\n        Defaults to 5 (same as `.Axes.legend`).  Adjust higher or lower\n        to change whether it is above or below data plotted on the\n        parent axes.\n\n    **kwargs\n        Other keyword arguments are passed on to the `.Axes` child axes.\n\n    Returns\n    -------\n    ax\n        The created `~.axes.Axes` instance.\n\n    Examples\n    --------\n    This example makes two inset axes, the first is in axes-relative\n    coordinates, and the second in data-coordinates::\n\n        fig, ax = plt.subplots()\n        ax.plot(range(10))\n        axin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\n        axin2 = ax.inset_axes(\n                [5, 7, 2.3, 2.3], transform=ax.transData)\n\n    \"\"\"\n    if transform is None:\n        transform = self.transAxes\n    label = kwargs.pop('label', 'inset_axes')\n\n    # This puts the rectangle into figure-relative coordinates.\n    inset_locator = _make_inset_locator(bounds, transform, self)\n    bb = inset_locator(None, None)\n\n    inset_ax = Axes(self.figure, bb.bounds, zorder=zorder,\n            label=label, **kwargs)\n\n    # this locator lets the axes move if in data coordinates.\n    # it gets called in `ax.apply_aspect() (of all places)\n    inset_ax.set_axes_locator(inset_locator)\n\n    self.add_child_axes(inset_ax)\n\n    return inset_ax",
                                "signature": "inset_axes(self, bounds, **kwargs)"
                            },
                            {
                                "code": "def indicate_inset(self, bounds, inset_ax=None, *, transform=None,\n        facecolor='none', edgecolor='0.5', alpha=0.5,\n        zorder=4.99, **kwargs):\n    \"\"\"\n    Add an inset indicator to the axes.  This is a rectangle on the plot\n    at the position indicated by *bounds* that optionally has lines that\n    connect the rectangle to an inset axes (`.Axes.inset_axes`).\n\n    Warnings\n    --------\n    This method is experimental as of 3.0, and the API may change.\n\n\n    Parameters\n    ----------\n    bounds : [x0, y0, width, height]\n        Lower-left corner of rectangle to be marked, and its width\n        and height.\n\n    inset_ax : `.Axes`\n        An optional inset axes to draw connecting lines to.  Two lines are\n        drawn connecting the indicator box to the inset axes on corners\n        chosen so as to not overlap with the indicator box.\n\n    transform : `.Transform`\n        Transform for the rectangle co-ordinates. Defaults to\n        `ax.transAxes`, i.e. the units of *rect* are in axes-relative\n        coordinates.\n\n    facecolor : Matplotlib color\n        Facecolor of the rectangle (default 'none').\n\n    edgecolor : Matplotlib color\n        Color of the rectangle and color of the connecting lines.  Default\n        is '0.5'.\n\n    alpha : float\n        Transparency of the rectangle and connector lines.  Default is 0.5.\n\n    zorder : float\n        Drawing order of the rectangle and connector lines. Default is 4.99\n        (just below the default level of inset axes).\n\n    **kwargs\n        Other keyword arguments are passed on to the rectangle patch.\n\n    Returns\n    -------\n    rectangle_patch : `.patches.Rectangle`\n         The indicator frame.\n\n    connector_lines : 4-tuple of `.patches.ConnectionPatch`\n        The four connector lines connecting to (lower_left, upper_left,\n        lower_right upper_right) corners of *inset_ax*. Two lines are\n        set with visibility to *False*,  but the user can set the\n        visibility to True if the automatic choice is not deemed correct.\n\n    \"\"\"\n    # to make the axes connectors work, we need to apply the aspect to\n    # the parent axes.\n    self.apply_aspect()\n\n    if transform is None:\n        transform = self.transData\n    label = kwargs.pop('label', 'indicate_inset')\n\n    x, y, width, height = bounds\n    rectangle_patch = mpatches.Rectangle(\n        (x, y), width, height,\n        facecolor=facecolor, edgecolor=edgecolor, alpha=alpha,\n        zorder=zorder,  label=label, transform=transform, **kwargs)\n    self.add_patch(rectangle_patch)\n\n    connects = []\n\n    if inset_ax is not None:\n        # connect the inset_axes to the rectangle\n        for xy_inset_ax in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n            # inset_ax positions are in axes coordinates\n            # The 0, 1 values define the four edges if the inset_ax\n            # lower_left, upper_left, lower_right upper_right.\n            ex, ey = xy_inset_ax\n            if self.xaxis.get_inverted():\n                ex = 1 - ex\n            if self.yaxis.get_inverted():\n                ey = 1 - ey\n            xy_data = x + ex * width, y + ey * height\n            p = mpatches.ConnectionPatch(\n                xyA=xy_inset_ax, coordsA=inset_ax.transAxes,\n                xyB=xy_data, coordsB=self.transData,\n                arrowstyle=\"-\", zorder=zorder,\n                edgecolor=edgecolor, alpha=alpha)\n            connects.append(p)\n            self.add_patch(p)\n\n        # decide which two of the lines to keep visible....\n        pos = inset_ax.get_position()\n        bboxins = pos.transformed(self.figure.transFigure)\n        rectbbox = mtransforms.Bbox.from_bounds(\n            *bounds\n        ).transformed(transform)\n        x0 = rectbbox.x0 < bboxins.x0\n        x1 = rectbbox.x1 < bboxins.x1\n        y0 = rectbbox.y0 < bboxins.y0\n        y1 = rectbbox.y1 < bboxins.y1\n        connects[0].set_visible(x0 ^ y0)\n        connects[1].set_visible(x0 == y1)\n        connects[2].set_visible(x1 == y0)\n        connects[3].set_visible(x1 ^ y1)\n\n    return rectangle_patch, tuple(connects) if connects else None",
                                "signature": "indicate_inset(self, bounds, inset_ax=None, **kwargs)"
                            },
                            {
                                "code": "def indicate_inset_zoom(self, inset_ax, **kwargs):\n    \"\"\"\n    Add an inset indicator rectangle to the axes based on the axis\n    limits for an *inset_ax* and draw connectors between *inset_ax*\n    and the rectangle.\n\n    Warnings\n    --------\n    This method is experimental as of 3.0, and the API may change.\n\n    Parameters\n    ----------\n    inset_ax : `.Axes`\n        Inset axes to draw connecting lines to.  Two lines are\n        drawn connecting the indicator box to the inset axes on corners\n        chosen so as to not overlap with the indicator box.\n\n    **kwargs\n        Other keyword arguments are passed on to `.Axes.indicate_inset`\n\n    Returns\n    -------\n    rectangle_patch : `.Patches.Rectangle`\n         Rectangle artist.\n\n    connector_lines : 4-tuple of `.Patches.ConnectionPatch`\n        Each of four connector lines coming from the rectangle drawn on\n        this axis, in the order lower left, upper left, lower right,\n        upper right.\n        Two are set with visibility to *False*,  but the user can\n        set the visibility to *True* if the automatic choice is not deemed\n        correct.\n    \"\"\"\n\n    xlim = inset_ax.get_xlim()\n    ylim = inset_ax.get_ylim()\n    rect = (xlim[0], ylim[0], xlim[1] - xlim[0], ylim[1] - ylim[0])\n    return self.indicate_inset(rect, inset_ax, **kwargs)",
                                "signature": "indicate_inset_zoom(self, inset_ax, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef secondary_xaxis(self, location, *, functions=None, **kwargs):\n    \"\"\"\n    Add a second x-axis to this axes.\n\n    For example if we want to have a second scale for the data plotted on\n    the xaxis.\n\n    %(_secax_docstring)s\n\n    Examples\n    --------\n    The main axis shows frequency, and the secondary axis shows period.\n\n    .. plot::\n\n        fig, ax = plt.subplots()\n        ax.loglog(range(1, 360, 5), range(1, 360, 5))\n        ax.set_xlabel('frequency [Hz]')\n\n        def invert(x):\n            return 1 / x\n\n        secax = ax.secondary_xaxis('top', functions=(invert, invert))\n        secax.set_xlabel('Period [s]')\n        plt.show()\n    \"\"\"\n    if (location in ['top', 'bottom'] or isinstance(location, Number)):\n        secondary_ax = SecondaryAxis(self, 'x', location, functions,\n                                     **kwargs)\n        self.add_child_axes(secondary_ax)\n        return secondary_ax\n    else:\n        raise ValueError('secondary_xaxis location must be either '\n                         'a float or \"top\"/\"bottom\"')",
                                "signature": "secondary_xaxis(self, location, **kwargs)"
                            },
                            {
                                "code": "def secondary_yaxis(self, location, *, functions=None, **kwargs):\n    \"\"\"\n    Add a second y-axis to this axes.\n\n    For example if we want to have a second scale for the data plotted on\n    the yaxis.\n\n    %(_secax_docstring)s\n\n    Examples\n    --------\n    Add a secondary axes that converts from radians to degrees\n\n    .. plot::\n\n        fig, ax = plt.subplots()\n        ax.plot(range(1, 360, 5), range(1, 360, 5))\n        ax.set_ylabel('degrees')\n        secax = ax.secondary_yaxis('right', functions=(np.deg2rad,\n                                                       np.rad2deg))\n        secax.set_ylabel('radians')\n    \"\"\"\n    if location in ['left', 'right'] or isinstance(location, Number):\n        secondary_ax = SecondaryAxis(self, 'y', location,\n                                     functions, **kwargs)\n        self.add_child_axes(secondary_ax)\n        return secondary_ax\n    else:\n        raise ValueError('secondary_yaxis location must be either '\n                         'a float or \"left\"/\"right\"')",
                                "signature": "secondary_yaxis(self, location, **kwargs)"
                            },
                            {
                                "code": "@cbook._delete_parameter(\"3.1\", \"withdash\")\ndef text(self, x, y, s, fontdict=None, withdash=False, **kwargs):\n    \"\"\"\n    Add text to the axes.\n\n    Add the text *s* to the axes at location *x*, *y* in data coordinates.\n\n    Parameters\n    ----------\n    x, y : scalars\n        The position to place the text. By default, this is in data\n        coordinates. The coordinate system can be changed using the\n        *transform* parameter.\n\n    s : str\n        The text.\n\n    fontdict : dictionary, optional, default: None\n        A dictionary to override the default text properties. If fontdict\n        is None, the defaults are determined by your rc parameters.\n\n    withdash : boolean, optional, default: False\n        Creates a `~matplotlib.text.TextWithDash` instance instead of a\n        `~matplotlib.text.Text` instance.\n\n    Returns\n    -------\n    text : `.Text`\n        The created `.Text` instance.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.text.Text` properties.\n        Other miscellaneous text parameters.\n\n    Examples\n    --------\n    Individual keyword arguments can be used to override any given\n    parameter::\n\n        >>> text(x, y, s, fontsize=12)\n\n    The default transform specifies that text is in data coords,\n    alternatively, you can specify text in axis coords ((0, 0) is\n    lower-left and (1, 1) is upper-right).  The example below places\n    text in the center of the axes::\n\n        >>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',\n        ...      verticalalignment='center', transform=ax.transAxes)\n\n    You can put a rectangular box around the text instance (e.g., to\n    set a background color) by using the keyword *bbox*.  *bbox* is\n    a dictionary of `~matplotlib.patches.Rectangle`\n    properties.  For example::\n\n        >>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))\n    \"\"\"\n    if fontdict is None:\n        fontdict = {}\n\n    effective_kwargs = {\n        'verticalalignment': 'baseline',\n        'horizontalalignment': 'left',\n        'transform': self.transData,\n        'clip_on': False,\n        **fontdict,\n        **kwargs,\n    }\n\n    # At some point if we feel confident that TextWithDash\n    # is robust as a drop-in replacement for Text and that\n    # the performance impact of the heavier-weight class\n    # isn't too significant, it may make sense to eliminate\n    # the withdash kwarg and simply delegate whether there's\n    # a dash to TextWithDash and dashlength.\n\n    if (withdash\n            and withdash is not cbook.deprecation._deprecated_parameter):\n        t = mtext.TextWithDash(x, y, text=s)\n    else:\n        t = mtext.Text(x, y, text=s)\n    t.update(effective_kwargs)\n\n    t.set_clip_path(self.patch)\n    self._add_text(t)\n    return t",
                                "signature": "text(self, x, y, s, fontdict=None, withdash=False, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef annotate(self, s, xy, *args, **kwargs):\n    a = mtext.Annotation(s, xy, *args, **kwargs)\n    a.set_transform(mtransforms.IdentityTransform())\n    if 'clip_on' in kwargs:\n        a.set_clip_path(self.patch)\n    self._add_text(a)\n    return a",
                                "signature": "annotate(self, s, xy, *args, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef axhline(self, y=0, xmin=0, xmax=1, **kwargs):\n    \"\"\"\n    Add a horizontal line across the axis.\n\n    Parameters\n    ----------\n    y : scalar, optional, default: 0\n        y position in data coordinates of the horizontal line.\n\n    xmin : scalar, optional, default: 0\n        Should be between 0 and 1, 0 being the far left of the plot, 1 the\n        far right of the plot.\n\n    xmax : scalar, optional, default: 1\n        Should be between 0 and 1, 0 being the far left of the plot, 1 the\n        far right of the plot.\n\n    Returns\n    -------\n    line : `~matplotlib.lines.Line2D`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Valid keyword arguments are `.Line2D` properties, with the\n        exception of 'transform':\n\n        %(_Line2D_docstr)s\n\n    See also\n    --------\n    hlines : Add horizontal lines in data coordinates.\n    axhspan : Add a horizontal span (rectangle) across the axis.\n\n    Examples\n    --------\n    * draw a thick red hline at 'y' = 0 that spans the xrange::\n\n        >>> axhline(linewidth=4, color='r')\n\n    * draw a default hline at 'y' = 1 that spans the xrange::\n\n        >>> axhline(y=1)\n\n    * draw a default hline at 'y' = .5 that spans the middle half of\n      the xrange::\n\n        >>> axhline(y=.5, xmin=0.25, xmax=0.75)\n    \"\"\"\n    if \"transform\" in kwargs:\n        raise ValueError(\n            \"'transform' is not allowed as a kwarg;\"\n            + \"axhline generates its own transform.\")\n    ymin, ymax = self.get_ybound()\n\n    # We need to strip away the units for comparison with\n    # non-unitized bounds\n    self._process_unit_info(ydata=y, kwargs=kwargs)\n    yy = self.convert_yunits(y)\n    scaley = (yy < ymin) or (yy > ymax)\n\n    trans = self.get_yaxis_transform(which='grid')\n    l = mlines.Line2D([xmin, xmax], [y, y], transform=trans, **kwargs)\n    self.add_line(l)\n    self._request_autoscale_view(scalex=False, scaley=scaley)\n    return l",
                                "signature": "axhline(self, y=0, xmin=0, xmax=1, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef axvline(self, x=0, ymin=0, ymax=1, **kwargs):\n    \"\"\"\n    Add a vertical line across the axes.\n\n    Parameters\n    ----------\n    x : scalar, optional, default: 0\n        x position in data coordinates of the vertical line.\n\n    ymin : scalar, optional, default: 0\n        Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n        top of the plot.\n\n    ymax : scalar, optional, default: 1\n        Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n        top of the plot.\n\n    Returns\n    -------\n    line : `~matplotlib.lines.Line2D`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Valid keyword arguments are `.Line2D` properties, with the\n        exception of 'transform':\n\n        %(_Line2D_docstr)s\n\n    Examples\n    --------\n    * draw a thick red vline at *x* = 0 that spans the yrange::\n\n        >>> axvline(linewidth=4, color='r')\n\n    * draw a default vline at *x* = 1 that spans the yrange::\n\n        >>> axvline(x=1)\n\n    * draw a default vline at *x* = .5 that spans the middle half of\n      the yrange::\n\n        >>> axvline(x=.5, ymin=0.25, ymax=0.75)\n\n    See also\n    --------\n    vlines : Add vertical lines in data coordinates.\n    axvspan : Add a vertical span (rectangle) across the axis.\n    \"\"\"\n\n    if \"transform\" in kwargs:\n        raise ValueError(\n            \"'transform' is not allowed as a kwarg;\"\n            + \"axvline generates its own transform.\")\n    xmin, xmax = self.get_xbound()\n\n    # We need to strip away the units for comparison with\n    # non-unitized bounds\n    self._process_unit_info(xdata=x, kwargs=kwargs)\n    xx = self.convert_xunits(x)\n    scalex = (xx < xmin) or (xx > xmax)\n\n    trans = self.get_xaxis_transform(which='grid')\n    l = mlines.Line2D([x, x], [ymin, ymax], transform=trans, **kwargs)\n    self.add_line(l)\n    self._request_autoscale_view(scalex=scalex, scaley=False)\n    return l",
                                "signature": "axvline(self, x=0, ymin=0, ymax=1, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs):\n    \"\"\"\n    Add a horizontal span (rectangle) across the axis.\n\n    Draw a horizontal span (rectangle) from *ymin* to *ymax*.\n    With the default values of *xmin* = 0 and *xmax* = 1, this\n    always spans the xrange, regardless of the xlim settings, even\n    if you change them, e.g., with the :meth:`set_xlim` command.\n    That is, the horizontal extent is in axes coords: 0=left,\n    0.5=middle, 1.0=right but the *y* location is in data\n    coordinates.\n\n    Parameters\n    ----------\n    ymin : float\n           Lower limit of the horizontal span in data units.\n    ymax : float\n           Upper limit of the horizontal span in data units.\n    xmin : float, optional, default: 0\n           Lower limit of the vertical span in axes (relative\n           0-1) units.\n    xmax : float, optional, default: 1\n           Upper limit of the vertical span in axes (relative\n           0-1) units.\n\n    Returns\n    -------\n    Polygon : `~matplotlib.patches.Polygon`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Polygon` properties.\n\n    %(Polygon)s\n\n    See Also\n    --------\n    axvspan : Add a vertical span across the axes.\n    \"\"\"\n    trans = self.get_yaxis_transform(which='grid')\n\n    # process the unit information\n    self._process_unit_info([xmin, xmax], [ymin, ymax], kwargs=kwargs)\n\n    # first we need to strip away the units\n    xmin, xmax = self.convert_xunits([xmin, xmax])\n    ymin, ymax = self.convert_yunits([ymin, ymax])\n\n    verts = (xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)\n    p = mpatches.Polygon(verts, **kwargs)\n    p.set_transform(trans)\n    self.add_patch(p)\n    self._request_autoscale_view(scalex=False)\n    return p",
                                "signature": "axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs)"
                            },
                            {
                                "code": "def axvspan(self, xmin, xmax, ymin=0, ymax=1, **kwargs):\n    \"\"\"\n    Add a vertical span (rectangle) across the axes.\n\n    Draw a vertical span (rectangle) from *xmin* to *xmax*.  With\n    the default values of *ymin* = 0 and *ymax* = 1. This always\n    spans the yrange, regardless of the ylim settings, even if you\n    change them, e.g., with the :meth:`set_ylim` command.  That is,\n    the vertical extent is in axes coords: 0=bottom, 0.5=middle,\n    1.0=top but the x location is in data coordinates.\n\n    Parameters\n    ----------\n    xmin : scalar\n        Number indicating the first X-axis coordinate of the vertical\n        span rectangle in data units.\n    xmax : scalar\n        Number indicating the second X-axis coordinate of the vertical\n        span rectangle in data units.\n    ymin : scalar, optional\n        Number indicating the first Y-axis coordinate of the vertical\n        span rectangle in relative Y-axis units (0-1). Default to 0.\n    ymax : scalar, optional\n        Number indicating the second Y-axis coordinate of the vertical\n        span rectangle in relative Y-axis units (0-1). Default to 1.\n\n    Returns\n    -------\n    rectangle : `~matplotlib.patches.Polygon`\n        Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Optional parameters are properties of the class `.Polygon`.\n\n    See Also\n    --------\n    axhspan : Add a horizontal span across the axes.\n\n    Examples\n    --------\n    Draw a vertical, green, translucent rectangle from x = 1.25 to\n    x = 1.55 that spans the yrange of the axes.\n\n    >>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)\n\n    \"\"\"\n    trans = self.get_xaxis_transform(which='grid')\n\n    # process the unit information\n    self._process_unit_info([xmin, xmax], [ymin, ymax], kwargs=kwargs)\n\n    # first we need to strip away the units\n    xmin, xmax = self.convert_xunits([xmin, xmax])\n    ymin, ymax = self.convert_yunits([ymin, ymax])\n\n    verts = [(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)]\n    p = mpatches.Polygon(verts, **kwargs)\n    p.set_transform(trans)\n    self.add_patch(p)\n    self._request_autoscale_view(scaley=False)\n    return p",
                                "signature": "axvspan(self, xmin, xmax, ymin=0, ymax=1, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"y\", \"xmin\", \"xmax\", \"colors\"],\n                  label_namer=\"y\")\ndef hlines(self, y, xmin, xmax, colors='k', linestyles='solid',\n           label='', **kwargs):\n    \"\"\"\n    Plot horizontal lines at each *y* from *xmin* to *xmax*.\n\n    Parameters\n    ----------\n    y : scalar or sequence of scalar\n        y-indexes where to plot the lines.\n\n    xmin, xmax : scalar or 1D array-like\n        Respective beginning and end of each line. If scalars are\n        provided, all lines will have same length.\n\n    colors : array-like of colors, optional, default: 'k'\n\n    linestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n    label : str, optional, default: ''\n\n    Returns\n    -------\n    lines : `~matplotlib.collections.LineCollection`\n\n    Other Parameters\n    ----------------\n    **kwargs :  `~matplotlib.collections.LineCollection` properties.\n\n    See also\n    --------\n    vlines : vertical lines\n    axhline: horizontal line across the axes\n    \"\"\"\n\n    # We do the conversion first since not all unitized data is uniform\n    # process the unit information\n    self._process_unit_info([xmin, xmax], y, kwargs=kwargs)\n    y = self.convert_yunits(y)\n    xmin = self.convert_xunits(xmin)\n    xmax = self.convert_xunits(xmax)\n\n    if not np.iterable(y):\n        y = [y]\n    if not np.iterable(xmin):\n        xmin = [xmin]\n    if not np.iterable(xmax):\n        xmax = [xmax]\n\n    y, xmin, xmax = cbook.delete_masked_points(y, xmin, xmax)\n\n    y = np.ravel(y)\n    xmin = np.resize(xmin, y.shape)\n    xmax = np.resize(xmax, y.shape)\n\n    verts = [((thisxmin, thisy), (thisxmax, thisy))\n             for thisxmin, thisxmax, thisy in zip(xmin, xmax, y)]\n    lines = mcoll.LineCollection(verts, colors=colors,\n                                 linestyles=linestyles, label=label)\n    self.add_collection(lines, autolim=False)\n    lines.update(kwargs)\n\n    if len(y) > 0:\n        minx = min(xmin.min(), xmax.min())\n        maxx = max(xmin.max(), xmax.max())\n        miny = y.min()\n        maxy = y.max()\n\n        corners = (minx, miny), (maxx, maxy)\n\n        self.update_datalim(corners)\n        self._request_autoscale_view()\n\n    return lines",
                                "signature": "hlines(self, y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"ymin\", \"ymax\", \"colors\"],\n                  label_namer=\"x\")\ndef vlines(self, x, ymin, ymax, colors='k', linestyles='solid',\n           label='', **kwargs):\n    \"\"\"\n    Plot vertical lines.\n\n    Plot vertical lines at each *x* from *ymin* to *ymax*.\n\n    Parameters\n    ----------\n    x : scalar or 1D array-like\n        x-indexes where to plot the lines.\n\n    ymin, ymax : scalar or 1D array-like\n        Respective beginning and end of each line. If scalars are\n        provided, all lines will have same length.\n\n    colors : array-like of colors, optional, default: 'k'\n\n    linestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n    label : str, optional, default: ''\n\n    Returns\n    -------\n    lines : `~matplotlib.collections.LineCollection`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.collections.LineCollection` properties.\n\n    See also\n    --------\n    hlines : horizontal lines\n    axvline: vertical line across the axes\n    \"\"\"\n\n    self._process_unit_info(xdata=x, ydata=[ymin, ymax], kwargs=kwargs)\n\n    # We do the conversion first since not all unitized data is uniform\n    x = self.convert_xunits(x)\n    ymin = self.convert_yunits(ymin)\n    ymax = self.convert_yunits(ymax)\n\n    if not np.iterable(x):\n        x = [x]\n    if not np.iterable(ymin):\n        ymin = [ymin]\n    if not np.iterable(ymax):\n        ymax = [ymax]\n\n    x, ymin, ymax = cbook.delete_masked_points(x, ymin, ymax)\n\n    x = np.ravel(x)\n    ymin = np.resize(ymin, x.shape)\n    ymax = np.resize(ymax, x.shape)\n\n    verts = [((thisx, thisymin), (thisx, thisymax))\n             for thisx, thisymin, thisymax in zip(x, ymin, ymax)]\n    lines = mcoll.LineCollection(verts, colors=colors,\n                                 linestyles=linestyles, label=label)\n    self.add_collection(lines, autolim=False)\n    lines.update(kwargs)\n\n    if len(x) > 0:\n        minx = x.min()\n        maxx = x.max()\n        miny = min(ymin.min(), ymax.min())\n        maxy = max(ymin.max(), ymax.max())\n\n        corners = (minx, miny), (maxx, maxy)\n        self.update_datalim(corners)\n        self._request_autoscale_view()\n\n    return lines",
                                "signature": "vlines(self, x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"positions\", \"lineoffsets\",\n                                 \"linelengths\", \"linewidths\",\n                                 \"colors\", \"linestyles\"])\n@docstring.dedent_interpd\ndef eventplot(self, positions, orientation='horizontal', lineoffsets=1,\n              linelengths=1, linewidths=None, colors=None,\n              linestyles='solid', **kwargs):\n    \"\"\"\n    Plot identical parallel lines at the given positions.\n\n    *positions* should be a 1D or 2D array-like object, with each row\n    corresponding to a row or column of lines.\n\n    This type of plot is commonly used in neuroscience for representing\n    neural events, where it is usually called a spike raster, dot raster,\n    or raster plot.\n\n    However, it is useful in any situation where you wish to show the\n    timing or position of multiple sets of discrete events, such as the\n    arrival times of people to a business on each day of the month or the\n    date of hurricanes each year of the last century.\n\n    Parameters\n    ----------\n    positions : 1D or 2D array-like object\n        Each value is an event. If *positions* is a 2D array-like, each\n        row corresponds to a row or a column of lines (depending on the\n        *orientation* parameter).\n\n    orientation : {'horizontal', 'vertical'}, optional\n        Controls the direction of the event collections:\n\n            - 'horizontal' : the lines are arranged horizontally in rows,\n              and are vertical.\n            - 'vertical' : the lines are arranged vertically in columns,\n              and are horizontal.\n\n    lineoffsets : scalar or sequence of scalars, optional, default: 1\n        The offset of the center of the lines from the origin, in the\n        direction orthogonal to *orientation*.\n\n    linelengths : scalar or sequence of scalars, optional, default: 1\n        The total height of the lines (i.e. the lines stretches from\n        ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    linewidths : scalar, scalar sequence or None, optional, default: None\n        The line width(s) of the event lines, in points. If it is None,\n        defaults to its rcParams setting.\n\n    colors : color, sequence of colors or None, optional, default: None\n        The color(s) of the event lines. If it is None, defaults to its\n        rcParams setting.\n\n    linestyles : str or tuple or a sequence of such values, optional\n        Default is 'solid'. Valid strings are ['solid', 'dashed',\n        'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples\n        should be of the form::\n\n            (offset, onoffseq),\n\n        where *onoffseq* is an even length tuple of on and off ink\n        in points.\n\n    **kwargs : optional\n        Other keyword arguments are line collection properties.  See\n        :class:`~matplotlib.collections.LineCollection` for a list of\n        the valid properties.\n\n    Returns\n    -------\n    list : A list of :class:`~.collections.EventCollection` objects.\n        Contains the :class:`~.collections.EventCollection` that\n        were added.\n\n    Notes\n    -----\n    For *linelengths*, *linewidths*, *colors*, and *linestyles*, if only\n    a single value is given, that value is applied to all lines.  If an\n    array-like is given, it must have the same length as *positions*, and\n    each value will be applied to the corresponding row of the array.\n\n    Examples\n    --------\n    .. plot:: gallery/lines_bars_and_markers/eventplot_demo.py\n    \"\"\"\n    self._process_unit_info(xdata=positions,\n                            ydata=[lineoffsets, linelengths],\n                            kwargs=kwargs)\n\n    # We do the conversion first since not all unitized data is uniform\n    positions = self.convert_xunits(positions)\n    lineoffsets = self.convert_yunits(lineoffsets)\n    linelengths = self.convert_yunits(linelengths)\n\n    if not np.iterable(positions):\n        positions = [positions]\n    elif any(np.iterable(position) for position in positions):\n        positions = [np.asanyarray(position) for position in positions]\n    else:\n        positions = [np.asanyarray(positions)]\n\n    if len(positions) == 0:\n        return []\n\n    # prevent 'singular' keys from **kwargs dict from overriding the effect\n    # of 'plural' keyword arguments (e.g. 'color' overriding 'colors')\n    colors = cbook.local_over_kwdict(colors, kwargs, 'color')\n    linewidths = cbook.local_over_kwdict(linewidths, kwargs, 'linewidth')\n    linestyles = cbook.local_over_kwdict(linestyles, kwargs, 'linestyle')\n\n    if not np.iterable(lineoffsets):\n        lineoffsets = [lineoffsets]\n    if not np.iterable(linelengths):\n        linelengths = [linelengths]\n    if not np.iterable(linewidths):\n        linewidths = [linewidths]\n    if not np.iterable(colors):\n        colors = [colors]\n    if hasattr(linestyles, 'lower') or not np.iterable(linestyles):\n        linestyles = [linestyles]\n\n    lineoffsets = np.asarray(lineoffsets)\n    linelengths = np.asarray(linelengths)\n    linewidths = np.asarray(linewidths)\n\n    if len(lineoffsets) == 0:\n        lineoffsets = [None]\n    if len(linelengths) == 0:\n        linelengths = [None]\n    if len(linewidths) == 0:\n        lineoffsets = [None]\n    if len(linewidths) == 0:\n        lineoffsets = [None]\n    if len(colors) == 0:\n        colors = [None]\n    try:\n        # Early conversion of the colors into RGBA values to take care\n        # of cases like colors='0.5' or colors='C1'.  (Issue #8193)\n        colors = mcolors.to_rgba_array(colors)\n    except ValueError:\n        # Will fail if any element of *colors* is None. But as long\n        # as len(colors) == 1 or len(positions), the rest of the\n        # code should process *colors* properly.\n        pass\n\n    if len(lineoffsets) == 1 and len(positions) != 1:\n        lineoffsets = np.tile(lineoffsets, len(positions))\n        lineoffsets[0] = 0\n        lineoffsets = np.cumsum(lineoffsets)\n    if len(linelengths) == 1:\n        linelengths = np.tile(linelengths, len(positions))\n    if len(linewidths) == 1:\n        linewidths = np.tile(linewidths, len(positions))\n    if len(colors) == 1:\n        colors = list(colors)\n        colors = colors * len(positions)\n    if len(linestyles) == 1:\n        linestyles = [linestyles] * len(positions)\n\n    if len(lineoffsets) != len(positions):\n        raise ValueError('lineoffsets and positions are unequal sized '\n                         'sequences')\n    if len(linelengths) != len(positions):\n        raise ValueError('linelengths and positions are unequal sized '\n                         'sequences')\n    if len(linewidths) != len(positions):\n        raise ValueError('linewidths and positions are unequal sized '\n                         'sequences')\n    if len(colors) != len(positions):\n        raise ValueError('colors and positions are unequal sized '\n                         'sequences')\n    if len(linestyles) != len(positions):\n        raise ValueError('linestyles and positions are unequal sized '\n                         'sequences')\n\n    colls = []\n    for position, lineoffset, linelength, linewidth, color, linestyle in \\\n        zip(positions, lineoffsets, linelengths, linewidths,\n                       colors, linestyles):\n        coll = mcoll.EventCollection(position,\n                                     orientation=orientation,\n                                     lineoffset=lineoffset,\n                                     linelength=linelength,\n                                     linewidth=linewidth,\n                                     color=color,\n                                     linestyle=linestyle)\n        self.add_collection(coll, autolim=False)\n        coll.update(kwargs)\n        colls.append(coll)\n\n    if len(positions) > 0:\n        # try to get min/max\n        min_max = [(np.min(_p), np.max(_p)) for _p in positions\n                   if len(_p) > 0]\n        # if we have any non-empty positions, try to autoscale\n        if len(min_max) > 0:\n            mins, maxes = zip(*min_max)\n            minpos = np.min(mins)\n            maxpos = np.max(maxes)\n\n            minline = (lineoffsets - linelengths).min()\n            maxline = (lineoffsets + linelengths).max()\n\n            if (orientation is not None and\n                    orientation.lower() == \"vertical\"):\n                corners = (minline, minpos), (maxline, maxpos)\n            else:  # \"horizontal\", None or \"none\" (see EventCollection)\n                corners = (minpos, minline), (maxpos, maxline)\n            self.update_datalim(corners)\n            self._request_autoscale_view()\n\n    return colls",
                                "signature": "eventplot(self, positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef plot(self, *args, scalex=True, scaley=True, data=None, **kwargs):\n    \"\"\"\n    Plot y versus x as lines and/or markers.\n\n    Call signatures::\n\n        plot([x], y, [fmt], *, data=None, **kwargs)\n        plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    The coordinates of the points or line nodes are given by *x*, *y*.\n\n    The optional parameter *fmt* is a convenient way for defining basic\n    formatting like color, marker and linestyle. It's a shortcut string\n    notation described in the *Notes* section below.\n\n    >>> plot(x, y)        # plot x and y using default line style and color\n    >>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n    >>> plot(y)           # plot y using x as index array 0..N-1\n    >>> plot(y, 'r+')     # ditto, but with red plusses\n\n    You can use `.Line2D` properties as keyword arguments for more\n    control on the appearance. Line properties and *fmt* can be mixed.\n    The following two calls yield identical results:\n\n    >>> plot(x, y, 'go--', linewidth=2, markersize=12)\n    >>> plot(x, y, color='green', marker='o', linestyle='dashed',\n    ...      linewidth=2, markersize=12)\n\n    When conflicting with *fmt*, keyword arguments take precedence.\n\n\n    **Plotting labelled data**\n\n    There's a convenient way for plotting objects with labelled data (i.e.\n    data that can be accessed by index ``obj['y']``). Instead of giving\n    the data in *x* and *y*, you can provide the object in the *data*\n    parameter and just give the labels for *x* and *y*::\n\n    >>> plot('xlabel', 'ylabel', data=obj)\n\n    All indexable objects are supported. This could e.g. be a `dict`, a\n    `pandas.DataFame` or a structured numpy array.\n\n\n    **Plotting multiple sets of data**\n\n    There are various ways to plot multiple sets of data.\n\n    - The most straight forward way is just to call `plot` multiple times.\n      Example:\n\n      >>> plot(x1, y1, 'bo')\n      >>> plot(x2, y2, 'go')\n\n    - Alternatively, if your data is already a 2d array, you can pass it\n      directly to *x*, *y*. A separate data set will be drawn for every\n      column.\n\n      Example: an array ``a`` where the first column represents the *x*\n      values and the other columns are the *y* columns::\n\n      >>> plot(a[0], a[1:])\n\n    - The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n      groups::\n\n      >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n\n      In this case, any additional keyword argument applies to all\n      datasets. Also this syntax cannot be combined with the *data*\n      parameter.\n\n    By default, each line is assigned a different style specified by a\n    'style cycle'. The *fmt* and line property parameters are only\n    necessary if you want explicit deviations from these defaults.\n    Alternatively, you can also change the style cycle using\n    :rc:`axes.prop_cycle`.\n\n\n    Parameters\n    ----------\n    x, y : array-like or scalar\n        The horizontal / vertical coordinates of the data points.\n        *x* values are optional and default to `range(len(y))`.\n\n        Commonly, these parameters are 1D arrays.\n\n        They can also be scalars, or two-dimensional (in that case, the\n        columns represent separate data sets).\n\n        These arguments cannot be passed as keywords.\n\n    fmt : str, optional\n        A format string, e.g. 'ro' for red circles. See the *Notes*\n        section for a full description of the format strings.\n\n        Format strings are just an abbreviation for quickly setting\n        basic line properties. All of these and more can also be\n        controlled by keyword arguments.\n\n        This argument cannot be passed as keyword.\n\n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*.\n\n        .. note::\n            Technically there's a slight ambiguity in calls where the\n            second label is a valid *fmt*. `plot('n', 'o', data=obj)`\n            could be `plt(x, y)` or `plt(y, fmt)`. In such cases,\n            the former interpretation is chosen, but a warning is issued.\n            You may suppress the warning by adding an empty format string\n            `plot('n', 'o', '', data=obj)`.\n\n    Other Parameters\n    ----------------\n    scalex, scaley : bool, optional, default: True\n        These parameters determined if the view limits are adapted to\n        the data limits. The values are passed on to `autoscale_view`.\n\n    **kwargs : `.Line2D` properties, optional\n        *kwargs* are used to specify properties like a line label (for\n        auto legends), linewidth, antialiasing, marker face color.\n        Example::\n\n        >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n        >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n\n        If you make multiple lines with one plot command, the kwargs\n        apply to all those lines.\n\n        Here is a list of available `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    See Also\n    --------\n    scatter : XY scatter plot with markers of varying size and/or color (\n        sometimes also called bubble chart).\n\n    Notes\n    -----\n    **Format Strings**\n\n    A format string consists of a part for color, marker and line::\n\n        fmt = '[marker][line][color]'\n\n    Each of them is optional. If not provided, the value from the style\n    cycle is used. Exception: If ``line`` is given, but no ``marker``,\n    the data will be a line without markers.\n\n    Other combinations such as ``[color][marker][line]`` are also\n    supported, but note that their parsing may be ambiguous.\n\n    **Markers**\n\n    =============    ===============================\n    character        description\n    =============    ===============================\n    ``'.'``          point marker\n    ``','``          pixel marker\n    ``'o'``          circle marker\n    ``'v'``          triangle_down marker\n    ``'^'``          triangle_up marker\n    ``'<'``          triangle_left marker\n    ``'>'``          triangle_right marker\n    ``'1'``          tri_down marker\n    ``'2'``          tri_up marker\n    ``'3'``          tri_left marker\n    ``'4'``          tri_right marker\n    ``'s'``          square marker\n    ``'p'``          pentagon marker\n    ``'*'``          star marker\n    ``'h'``          hexagon1 marker\n    ``'H'``          hexagon2 marker\n    ``'+'``          plus marker\n    ``'x'``          x marker\n    ``'D'``          diamond marker\n    ``'d'``          thin_diamond marker\n    ``'|'``          vline marker\n    ``'_'``          hline marker\n    =============    ===============================\n\n    **Line Styles**\n\n    =============    ===============================\n    character        description\n    =============    ===============================\n    ``'-'``          solid line style\n    ``'--'``         dashed line style\n    ``'-.'``         dash-dot line style\n    ``':'``          dotted line style\n    =============    ===============================\n\n    Example format strings::\n\n        'b'    # blue markers with default shape\n        'or'   # red circles\n        '-g'   # green solid line\n        '--'   # dashed line with default color\n        '^k:'  # black triangle_up markers connected by a dotted line\n\n    **Colors**\n\n    The supported color abbreviations are the single letter codes\n\n    =============    ===============================\n    character        color\n    =============    ===============================\n    ``'b'``          blue\n    ``'g'``          green\n    ``'r'``          red\n    ``'c'``          cyan\n    ``'m'``          magenta\n    ``'y'``          yellow\n    ``'k'``          black\n    ``'w'``          white\n    =============    ===============================\n\n    and the ``'CN'`` colors that index into the default property cycle.\n\n    If the color is the only part of the format string, you can\n    additionally use any  `matplotlib.colors` spec, e.g. full names\n    (``'green'``) or hex strings (``'#008000'``).\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n    lines = [*self._get_lines(*args, data=data, **kwargs)]\n    for line in lines:\n        self.add_line(line)\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)\n    return lines",
                                "signature": "plot(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\"], label_namer=\"y\")\n@docstring.dedent_interpd\ndef plot_date(self, x, y, fmt='o', tz=None, xdate=True, ydate=False,\n              **kwargs):\n    \"\"\"\n    Plot data that contains dates.\n\n    Similar to `.plot`, this plots *y* vs. *x* as lines or markers.\n    However, the axis labels are formatted as dates depending on *xdate*\n    and *ydate*.\n\n    Parameters\n    ----------\n    x, y : array-like\n        The coordinates of the data points. If *xdate* or *ydate* is\n        *True*, the respective values *x* or *y* are interpreted as\n        :ref:`Matplotlib dates <date-format>`.\n\n    fmt : str, optional\n        The plot format string. For details, see the corresponding\n        parameter in `.plot`.\n\n    tz : timezone string or `tzinfo` or None\n        The time zone to use in labeling dates. If *None*, defaults to\n        :rc:`timezone`.\n\n    xdate : bool, optional, default: True\n        If *True*, the *x*-axis will be interpreted as Matplotlib dates.\n\n    ydate : bool, optional, default: False\n        If *True*, the *y*-axis will be interpreted as Matplotlib dates.\n\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    matplotlib.dates : Helper functions on dates.\n    matplotlib.dates.date2num : Convert dates to num.\n    matplotlib.dates.num2date : Convert num to dates.\n    matplotlib.dates.drange : Create an equally spaced sequence of dates.\n\n    Notes\n    -----\n    If you are using custom date tickers and formatters, it may be\n    necessary to set the formatters/locators after the call to\n    `.plot_date`. `.plot_date` will set the default tick locator to\n    `.AutoDateLocator` (if the tick locator is not already set to a\n    `.DateLocator` instance) and the default tick formatter to\n    `.AutoDateFormatter` (if the tick formatter is not already set to a\n    `.DateFormatter` instance).\n    \"\"\"\n    if xdate:\n        self.xaxis_date(tz)\n    if ydate:\n        self.yaxis_date(tz)\n\n    ret = self.plot(x, y, fmt, **kwargs)\n\n    self._request_autoscale_view()\n\n    return ret",
                                "signature": "plot_date(self, x, y, fmt='o', tz=None, xdate=True, ydate=False, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef loglog(self, *args, **kwargs):\n    \"\"\"\n    Make a plot with log scaling on both the x and y axis.\n\n    Call signatures::\n\n        loglog([x], y, [fmt], data=None, **kwargs)\n        loglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    This is just a thin wrapper around `.plot` which additionally changes\n    both the x-axis and the y-axis to log scaling. All of the concepts and\n    parameters of plot can be used here as well.\n\n    The additional parameters *basex/y*, *subsx/y* and *nonposx/y* control\n    the x/y-axis properties. They are just forwarded to `.Axes.set_xscale`\n    and `.Axes.set_yscale`.\n\n    Parameters\n    ----------\n    basex, basey : scalar, optional, default 10\n        Base of the x/y logarithm.\n\n    subsx, subsy : sequence, optional\n        The location of the minor x/y ticks. If *None*, reasonable\n        locations are automatically chosen depending on the number of\n        decades in the plot.\n        See `.Axes.set_xscale` / `.Axes.set_yscale` for details.\n\n    nonposx, nonposy : {'mask', 'clip'}, optional, default 'mask'\n        Non-positive values in x or y can be masked as invalid, or clipped\n        to a very small positive number.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All parameters supported by `.plot`.\n    \"\"\"\n    dx = {k: kwargs.pop(k) for k in ['basex', 'subsx', 'nonposx']\n          if k in kwargs}\n    dy = {k: kwargs.pop(k) for k in ['basey', 'subsy', 'nonposy']\n          if k in kwargs}\n\n    self.set_xscale('log', **dx)\n    self.set_yscale('log', **dy)\n\n    l = self.plot(*args, **kwargs)\n    return l",
                                "signature": "loglog(self, *args, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef semilogx(self, *args, **kwargs):\n    \"\"\"\n    Make a plot with log scaling on the x axis.\n\n    Call signatures::\n\n        semilogx([x], y, [fmt], data=None, **kwargs)\n        semilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    This is just a thin wrapper around `.plot` which additionally changes\n    the x-axis to log scaling. All of the concepts and parameters of plot\n    can be used here as well.\n\n    The additional parameters *basex*, *subsx* and *nonposx* control the\n    x-axis properties. They are just forwarded to `.Axes.set_xscale`.\n\n    Parameters\n    ----------\n    basex : scalar, optional, default 10\n        Base of the x logarithm.\n\n    subsx : array-like, optional\n        The location of the minor xticks. If *None*, reasonable locations\n        are automatically chosen depending on the number of decades in the\n        plot. See `.Axes.set_xscale` for details.\n\n    nonposx : {'mask', 'clip'}, optional, default 'mask'\n        Non-positive values in x can be masked as invalid, or clipped to a\n        very small positive number.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All parameters supported by `.plot`.\n    \"\"\"\n    d = {k: kwargs.pop(k) for k in ['basex', 'subsx', 'nonposx']\n         if k in kwargs}\n\n    self.set_xscale('log', **d)\n    l = self.plot(*args, **kwargs)\n    return l",
                                "signature": "semilogx(self, *args, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef semilogy(self, *args, **kwargs):\n    \"\"\"\n    Make a plot with log scaling on the y axis.\n\n    Call signatures::\n\n        semilogy([x], y, [fmt], data=None, **kwargs)\n        semilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n    This is just a thin wrapper around `.plot` which additionally changes\n    the y-axis to log scaling. All of the concepts and parameters of plot\n    can be used here as well.\n\n    The additional parameters *basey*, *subsy* and *nonposy* control the\n    y-axis properties. They are just forwarded to `.Axes.set_yscale`.\n\n    Parameters\n    ----------\n    basey : scalar, optional, default 10\n        Base of the y logarithm.\n\n    subsy : array-like, optional\n        The location of the minor yticks. If *None*, reasonable locations\n        are automatically chosen depending on the number of decades in the\n        plot. See `.Axes.set_yscale` for details.\n\n    nonposy : {'mask', 'clip'}, optional, default 'mask'\n        Non-positive values in y can be masked as invalid, or clipped to a\n        very small positive number.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All parameters supported by `.plot`.\n    \"\"\"\n    d = {k: kwargs.pop(k) for k in ['basey', 'subsy', 'nonposy']\n         if k in kwargs}\n    self.set_yscale('log', **d)\n    l = self.plot(*args, **kwargs)\n\n    return l",
                                "signature": "semilogy(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\"], label_namer=\"x\")\ndef acorr(self, x, **kwargs):\n    \"\"\"\n    Plot the autocorrelation of *x*.\n\n    Parameters\n    ----------\n    x : array-like\n\n    detrend : callable, optional, default: `mlab.detrend_none`\n        *x* is detrended by the *detrend* callable. This must be a\n        function ``x = detrend(x)`` accepting and returning an\n        `numpy.array`. Default is no normalization.\n\n    normed : bool, optional, default: True\n        If ``True``, input vectors are normalised to unit length.\n\n    usevlines : bool, optional, default: True\n        Determines the plot style.\n\n        If ``True``, vertical lines are plotted from 0 to the acorr value\n        using `Axes.vlines`. Additionally, a horizontal line is plotted\n        at y=0 using `Axes.axhline`.\n\n        If ``False``, markers are plotted at the acorr values using\n        `Axes.plot`.\n\n    maxlags : int, optional, default: 10\n        Number of lags to show. If ``None``, will return all\n        ``2 * len(x) - 1`` lags.\n\n    Returns\n    -------\n    lags : array (length ``2*maxlags+1``)\n        The lag vector.\n    c : array  (length ``2*maxlags+1``)\n        The auto correlation vector.\n    line : `.LineCollection` or `.Line2D`\n        `.Artist` added to the axes of the correlation:\n\n        - `.LineCollection` if *usevlines* is True.\n        - `.Line2D` if *usevlines* is False.\n    b : `.Line2D` or None\n        Horizontal line at 0 if *usevlines* is True\n        None *usevlines* is False.\n\n    Other Parameters\n    ----------------\n    linestyle : `.Line2D` property, optional\n        The linestyle for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    marker : str, optional, default: 'o'\n        The marker for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    Notes\n    -----\n    The cross correlation is performed with :func:`numpy.correlate` with\n    ``mode = \"full\"``.\n    \"\"\"\n    return self.xcorr(x, x, **kwargs)",
                                "signature": "acorr(self, x, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\"], label_namer=\"y\")\ndef xcorr(self, x, y, normed=True, detrend=mlab.detrend_none,\n          usevlines=True, maxlags=10, **kwargs):\n    r\"\"\"\n    Plot the cross correlation between *x* and *y*.\n\n    The correlation with lag k is defined as\n    :math:`\\sum_n x[n+k] \\cdot y^*[n]`, where :math:`y^*` is the complex\n    conjugate of :math:`y`.\n\n    Parameters\n    ----------\n    x : array-like of length n\n\n    y : array-like of length n\n\n    detrend : callable, optional, default: `mlab.detrend_none`\n        *x* and *y* are detrended by the *detrend* callable. This must be a\n        function ``x = detrend(x)`` accepting and returning an\n        `numpy.array`. Default is no normalization.\n\n    normed : bool, optional, default: True\n        If ``True``, input vectors are normalised to unit length.\n\n    usevlines : bool, optional, default: True\n        Determines the plot style.\n\n        If ``True``, vertical lines are plotted from 0 to the xcorr value\n        using `Axes.vlines`. Additionally, a horizontal line is plotted\n        at y=0 using `Axes.axhline`.\n\n        If ``False``, markers are plotted at the xcorr values using\n        `Axes.plot`.\n\n    maxlags : int, optional, default: 10\n        Number of lags to show. If None, will return all ``2 * len(x) - 1``\n        lags.\n\n    Returns\n    -------\n    lags : array (length ``2*maxlags+1``)\n        The lag vector.\n    c : array  (length ``2*maxlags+1``)\n        The auto correlation vector.\n    line : `.LineCollection` or `.Line2D`\n        `.Artist` added to the axes of the correlation:\n\n        - `.LineCollection` if *usevlines* is True.\n        - `.Line2D` if *usevlines* is False.\n    b : `.Line2D` or None\n        Horizontal line at 0 if *usevlines* is True\n        None *usevlines* is False.\n\n    Other Parameters\n    ----------------\n    linestyle : `.Line2D` property, optional\n        The linestyle for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    marker : str, optional, default: 'o'\n        The marker for plotting the data points.\n        Only used if *usevlines* is ``False``.\n\n    Notes\n    -----\n    The cross correlation is performed with :func:`numpy.correlate` with\n    ``mode = \"full\"``.\n    \"\"\"\n    Nx = len(x)\n    if Nx != len(y):\n        raise ValueError('x and y must be equal length')\n\n    x = detrend(np.asarray(x))\n    y = detrend(np.asarray(y))\n\n    correls = np.correlate(x, y, mode=\"full\")\n\n    if normed:\n        correls /= np.sqrt(np.dot(x, x) * np.dot(y, y))\n\n    if maxlags is None:\n        maxlags = Nx - 1\n\n    if maxlags >= Nx or maxlags < 1:\n        raise ValueError('maxlags must be None or strictly '\n                         'positive < %d' % Nx)\n\n    lags = np.arange(-maxlags, maxlags + 1)\n    correls = correls[Nx - 1 - maxlags:Nx + maxlags]\n\n    if usevlines:\n        a = self.vlines(lags, [0], correls, **kwargs)\n        # Make label empty so only vertical lines get a legend entry\n        kwargs.pop('label', '')\n        b = self.axhline(**kwargs)\n    else:\n        kwargs.setdefault('marker', 'o')\n        kwargs.setdefault('linestyle', 'None')\n        a, = self.plot(lags, correls, **kwargs)\n        b = None\n    return lags, correls, a, b",
                                "signature": "xcorr(self, x, y, normed=True, detrend=mlab.detrend_none, usevlines=True, maxlags=10, **kwargs)"
                            },
                            {
                                "code": "def step(self, x, y, *args, where='pre', data=None, **kwargs):\n    \"\"\"\n    Make a step plot.\n\n    Call signatures::\n\n        step(x, y, [fmt], *, data=None, where='pre', **kwargs)\n        step(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n\n    This is just a thin wrapper around `.plot` which changes some\n    formatting options. Most of the concepts and parameters of plot can be\n    used here as well.\n\n    Parameters\n    ----------\n    x : array-like\n        1-D sequence of x positions. It is assumed, but not checked, that\n        it is uniformly increasing.\n\n    y : array-like\n        1-D sequence of y levels.\n\n    fmt : str, optional\n        A format string, e.g. 'g' for a green line. See `.plot` for a more\n        detailed description.\n\n        Note: While full format strings are accepted, it is recommended to\n        only specify the color. Line styles are currently ignored (use\n        the keyword argument *linestyle* instead). Markers are accepted\n        and plotted on the given positions, however, this is a rarely\n        needed feature for step plots.\n\n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*.\n\n    where : {'pre', 'post', 'mid'}, optional, default 'pre'\n        Define where the steps should be placed:\n\n        - 'pre': The y value is continued constantly to the left from\n          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n          value ``y[i]``.\n        - 'post': The y value is continued constantly to the right from\n          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n          value ``y[i]``.\n        - 'mid': Steps occur half-way between the *x* positions.\n\n    Returns\n    -------\n    lines\n        A list of `.Line2D` objects representing the plotted data.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additional parameters are the same as those for `.plot`.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n    \"\"\"\n    cbook._check_in_list(('pre', 'post', 'mid'), where=where)\n    kwargs['drawstyle'] = 'steps-' + where\n    return self.plot(x, y, *args, data=data, **kwargs)",
                                "signature": "step(self, x, y, *args, **kwargs)"
                            },
                            {
                                "code": "@staticmethod\ndef _convert_dx(dx, x0, xconv, convert):\n    \"\"\"\n    Small helper to do logic of width conversion flexibly.\n\n    *dx* and *x0* have units, but *xconv* has already been converted\n    to unitless (and is an ndarray).  This allows the *dx* to have units\n    that are different from *x0*, but are still accepted by the\n    ``__add__`` operator of *x0*.\n    \"\"\"\n\n    # x should be an array...\n    assert type(xconv) is np.ndarray\n\n    if xconv.size == 0:\n        # xconv has already been converted, but maybe empty...\n        return convert(dx)\n\n    try:\n        # attempt to add the width to x0; this works for\n        # datetime+timedelta, for instance\n\n        # only use the first element of x and x0.  This saves\n        # having to be sure addition works across the whole\n        # vector.  This is particularly an issue if\n        # x0 and dx are lists so x0 + dx just concatenates the lists.\n        # We can't just cast x0 and dx to numpy arrays because that\n        # removes the units from unit packages like `pint` that\n        # wrap numpy arrays.\n        try:\n            x0 = cbook.safe_first_element(x0)\n        except (TypeError, IndexError, KeyError):\n            x0 = x0\n\n        try:\n            x = cbook.safe_first_element(xconv)\n        except (TypeError, IndexError, KeyError):\n            x = xconv\n\n        delist = False\n        if not np.iterable(dx):\n            dx = [dx]\n            delist = True\n        dx = [convert(x0 + ddx) - x for ddx in dx]\n        if delist:\n            dx = dx[0]\n    except (ValueError, TypeError, AttributeError):\n        # if the above fails (for any reason) just fallback to what\n        # we do by default and convert dx by itself.\n        dx = convert(dx)\n    return dx",
                                "signature": "_convert_dx(dx, x0, xconv, convert)"
                            },
                            {
                                "code": "@_preprocess_data()\n@docstring.dedent_interpd\ndef bar(self, x, height, width=0.8, bottom=None, *, align=\"center\",\n        **kwargs):\n    r\"\"\"\n    Make a bar plot.\n\n    The bars are positioned at *x* with the given *align*\\ment. Their\n    dimensions are given by *width* and *height*. The vertical baseline\n    is *bottom* (default 0).\n\n    Each of *x*, *height*, *width*, and *bottom* may either be a scalar\n    applying to all bars, or it may be a sequence of length N providing a\n    separate value for each bar.\n\n    Parameters\n    ----------\n    x : sequence of scalars\n        The x coordinates of the bars. See also *align* for the\n        alignment of the bars to the coordinates.\n\n    height : scalar or sequence of scalars\n        The height(s) of the bars.\n\n    width : scalar or array-like, optional\n        The width(s) of the bars (default: 0.8).\n\n    bottom : scalar or array-like, optional\n        The y coordinate(s) of the bars bases (default: 0).\n\n    align : {'center', 'edge'}, optional, default: 'center'\n        Alignment of the bars to the *x* coordinates:\n\n        - 'center': Center the base on the *x* positions.\n        - 'edge': Align the left edges of the bars with the *x* positions.\n\n        To align the bars on the right edge pass a negative *width* and\n        ``align='edge'``.\n\n    Returns\n    -------\n    container : `.BarContainer`\n        Container with all the bars and optionally errorbars.\n\n    Other Parameters\n    ----------------\n    color : scalar or array-like, optional\n        The colors of the bar faces.\n\n    edgecolor : scalar or array-like, optional\n        The colors of the bar edges.\n\n    linewidth : scalar or array-like, optional\n        Width of the bar edge(s). If 0, don't draw edges.\n\n    tick_label : str or array-like, optional\n        The tick labels of the bars.\n        Default: None (Use default numeric labels.)\n\n    xerr, yerr : scalar or array-like of shape(N,) or shape(2, N), optional\n        If not *None*, add horizontal / vertical errorbars to the bar tips.\n        The values are +/- sizes relative to the data:\n\n        - scalar: symmetric +/- values for all bars\n        - shape(N,): symmetric +/- values for each bar\n        - shape(2, N): Separate - and + values for each bar. First row\n          contains the lower errors, the second row contains the upper\n          errors.\n        - *None*: No errorbar. (Default)\n\n        See :doc:`/gallery/statistics/errorbar_features`\n        for an example on the usage of ``xerr`` and ``yerr``.\n\n    ecolor : scalar or array-like, optional, default: 'black'\n        The line color of the errorbars.\n\n    capsize : scalar, optional\n       The length of the error bar caps in points.\n       Default: None, which will take the value from\n       :rc:`errorbar.capsize`.\n\n    error_kw : dict, optional\n        Dictionary of kwargs to be passed to the `~.Axes.errorbar`\n        method. Values of *ecolor* or *capsize* defined here take\n        precedence over the independent kwargs.\n\n    log : bool, optional, default: False\n        If *True*, set the y-axis to be log scale.\n\n    orientation : {'vertical',  'horizontal'}, optional\n        *This is for internal use only.* Please use `barh` for\n        horizontal bar plots. Default: 'vertical'.\n\n    See also\n    --------\n    barh: Plot a horizontal bar plot.\n\n    Notes\n    -----\n    The optional arguments *color*, *edgecolor*, *linewidth*,\n    *xerr*, and *yerr* can be either scalars or sequences of\n    length equal to the number of bars.  This enables you to use\n    bar as the basis for stacked bar charts, or candlestick plots.\n    Detail: *xerr* and *yerr* are passed directly to\n    :meth:`errorbar`, so they can also have shape 2xN for\n    independent specification of lower and upper errors.\n\n    Other optional kwargs:\n\n    %(Rectangle)s\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mpatches.Patch)\n    color = kwargs.pop('color', None)\n    if color is None:\n        color = self._get_patches_for_fill.get_next_color()\n    edgecolor = kwargs.pop('edgecolor', None)\n    linewidth = kwargs.pop('linewidth', None)\n\n    # Because xerr and yerr will be passed to errorbar, most dimension\n    # checking and processing will be left to the errorbar method.\n    xerr = kwargs.pop('xerr', None)\n    yerr = kwargs.pop('yerr', None)\n    error_kw = kwargs.pop('error_kw', {})\n    ezorder = error_kw.pop('zorder', None)\n    if ezorder is None:\n        ezorder = kwargs.get('zorder', None)\n        if ezorder is not None:\n            # If using the bar zorder, increment slightly to make sure\n            # errorbars are drawn on top of bars\n            ezorder += 0.01\n    error_kw.setdefault('zorder', ezorder)\n    ecolor = kwargs.pop('ecolor', 'k')\n    capsize = kwargs.pop('capsize', rcParams[\"errorbar.capsize\"])\n    error_kw.setdefault('ecolor', ecolor)\n    error_kw.setdefault('capsize', capsize)\n\n    orientation = kwargs.pop('orientation', 'vertical')\n    cbook._check_in_list(['vertical', 'horizontal'],\n                         orientation=orientation)\n    log = kwargs.pop('log', False)\n    label = kwargs.pop('label', '')\n    tick_labels = kwargs.pop('tick_label', None)\n\n    y = bottom  # Matches barh call signature.\n    if orientation == 'vertical':\n        if y is None:\n            y = 0\n    elif orientation == 'horizontal':\n        if x is None:\n            x = 0\n\n    if orientation == 'vertical':\n        self._process_unit_info(xdata=x, ydata=height, kwargs=kwargs)\n        if log:\n            self.set_yscale('log', nonposy='clip')\n    elif orientation == 'horizontal':\n        self._process_unit_info(xdata=width, ydata=y, kwargs=kwargs)\n        if log:\n            self.set_xscale('log', nonposx='clip')\n\n    # lets do some conversions now since some types cannot be\n    # subtracted uniformly\n    if self.xaxis is not None:\n        x0 = x\n        x = np.asarray(self.convert_xunits(x))\n        width = self._convert_dx(width, x0, x, self.convert_xunits)\n        if xerr is not None:\n            xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n    if self.yaxis is not None:\n        y0 = y\n        y = np.asarray(self.convert_yunits(y))\n        height = self._convert_dx(height, y0, y, self.convert_yunits)\n        if yerr is not None:\n            yerr = self._convert_dx(yerr, y0, y, self.convert_yunits)\n\n    x, height, width, y, linewidth = np.broadcast_arrays(\n        # Make args iterable too.\n        np.atleast_1d(x), height, width, y, linewidth)\n\n    # Now that units have been converted, set the tick locations.\n    if orientation == 'vertical':\n        tick_label_axis = self.xaxis\n        tick_label_position = x\n    elif orientation == 'horizontal':\n        tick_label_axis = self.yaxis\n        tick_label_position = y\n\n    linewidth = itertools.cycle(np.atleast_1d(linewidth))\n    color = itertools.chain(itertools.cycle(mcolors.to_rgba_array(color)),\n                            # Fallback if color == \"none\".\n                            itertools.repeat('none'))\n    if edgecolor is None:\n        edgecolor = itertools.repeat(None)\n    else:\n        edgecolor = itertools.chain(\n            itertools.cycle(mcolors.to_rgba_array(edgecolor)),\n            # Fallback if edgecolor == \"none\".\n            itertools.repeat('none'))\n\n    # We will now resolve the alignment and really have\n    # left, bottom, width, height vectors\n    cbook._check_in_list(['center', 'edge'], align=align)\n    if align == 'center':\n        if orientation == 'vertical':\n            try:\n                left = x - width / 2\n            except TypeError as e:\n                raise TypeError(f'the dtypes of parameters x ({x.dtype}) '\n                                f'and width ({width.dtype}) '\n                                f'are incompatible') from e\n            bottom = y\n        elif orientation == 'horizontal':\n            try:\n                bottom = y - height / 2\n            except TypeError as e:\n                raise TypeError(f'the dtypes of parameters y ({y.dtype}) '\n                                f'and height ({height.dtype}) '\n                                f'are incompatible') from e\n            left = x\n    elif align == 'edge':\n        left = x\n        bottom = y\n\n    patches = []\n    args = zip(left, bottom, width, height, color, edgecolor, linewidth)\n    for l, b, w, h, c, e, lw in args:\n        r = mpatches.Rectangle(\n            xy=(l, b), width=w, height=h,\n            facecolor=c,\n            edgecolor=e,\n            linewidth=lw,\n            label='_nolegend_',\n            )\n        r.update(kwargs)\n        r.get_path()._interpolation_steps = 100\n        if orientation == 'vertical':\n            r.sticky_edges.y.append(b)\n        elif orientation == 'horizontal':\n            r.sticky_edges.x.append(l)\n        self.add_patch(r)\n        patches.append(r)\n\n    if xerr is not None or yerr is not None:\n        if orientation == 'vertical':\n            # using list comps rather than arrays to preserve unit info\n            ex = [l + 0.5 * w for l, w in zip(left, width)]\n            ey = [b + h for b, h in zip(bottom, height)]\n\n        elif orientation == 'horizontal':\n            # using list comps rather than arrays to preserve unit info\n            ex = [l + w for l, w in zip(left, width)]\n            ey = [b + 0.5 * h for b, h in zip(bottom, height)]\n\n        error_kw.setdefault(\"label\", '_nolegend_')\n\n        errorbar = self.errorbar(ex, ey,\n                                 yerr=yerr, xerr=xerr,\n                                 fmt='none', **error_kw)\n    else:\n        errorbar = None\n\n    self._request_autoscale_view()\n\n    bar_container = BarContainer(patches, errorbar, label=label)\n    self.add_container(bar_container)\n\n    if tick_labels is not None:\n        tick_labels = np.broadcast_to(tick_labels, len(patches))\n        tick_label_axis.set_ticks(tick_label_position)\n        tick_label_axis.set_ticklabels(tick_labels)\n\n    return bar_container",
                                "signature": "bar(self, x, height, width=0.8, bottom=None, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef barh(self, y, width, height=0.8, left=None, *, align=\"center\",\n         **kwargs):\n    r\"\"\"\n    Make a horizontal bar plot.\n\n    The bars are positioned at *y* with the given *align*\\ment. Their\n    dimensions are given by *width* and *height*. The horizontal baseline\n    is *left* (default 0).\n\n    Each of *y*, *width*, *height*, and *left* may either be a scalar\n    applying to all bars, or it may be a sequence of length N providing a\n    separate value for each bar.\n\n    Parameters\n    ----------\n    y : scalar or array-like\n        The y coordinates of the bars. See also *align* for the\n        alignment of the bars to the coordinates.\n\n    width : scalar or array-like\n        The width(s) of the bars.\n\n    height : sequence of scalars, optional, default: 0.8\n        The heights of the bars.\n\n    left : sequence of scalars\n        The x coordinates of the left sides of the bars (default: 0).\n\n    align : {'center', 'edge'}, optional, default: 'center'\n        Alignment of the base to the *y* coordinates*:\n\n        - 'center': Center the bars on the *y* positions.\n        - 'edge': Align the bottom edges of the bars with the *y*\n          positions.\n\n        To align the bars on the top edge pass a negative *height* and\n        ``align='edge'``.\n\n    Returns\n    -------\n    container : `.BarContainer`\n        Container with all the bars and optionally errorbars.\n\n    Other Parameters\n    ----------------\n    color : scalar or array-like, optional\n        The colors of the bar faces.\n\n    edgecolor : scalar or array-like, optional\n        The colors of the bar edges.\n\n    linewidth : scalar or array-like, optional\n        Width of the bar edge(s). If 0, don't draw edges.\n\n    tick_label : str or array-like, optional\n        The tick labels of the bars.\n        Default: None (Use default numeric labels.)\n\n    xerr, yerr : scalar or array-like of shape(N,) or shape(2, N), optional\n        If not ``None``, add horizontal / vertical errorbars to the\n        bar tips. The values are +/- sizes relative to the data:\n\n        - scalar: symmetric +/- values for all bars\n        - shape(N,): symmetric +/- values for each bar\n        - shape(2, N): Separate - and + values for each bar. First row\n          contains the lower errors, the second row contains the upper\n          errors.\n        - *None*: No errorbar. (default)\n\n        See :doc:`/gallery/statistics/errorbar_features`\n        for an example on the usage of ``xerr`` and ``yerr``.\n\n    ecolor : scalar or array-like, optional, default: 'black'\n        The line color of the errorbars.\n\n    capsize : scalar, optional\n       The length of the error bar caps in points.\n       Default: None, which will take the value from\n       :rc:`errorbar.capsize`.\n\n    error_kw : dict, optional\n        Dictionary of kwargs to be passed to the `~.Axes.errorbar`\n        method. Values of *ecolor* or *capsize* defined here take\n        precedence over the independent kwargs.\n\n    log : bool, optional, default: False\n        If ``True``, set the x-axis to be log scale.\n\n    See also\n    --------\n    bar: Plot a vertical bar plot.\n\n    Notes\n    -----\n    The optional arguments *color*, *edgecolor*, *linewidth*,\n    *xerr*, and *yerr* can be either scalars or sequences of\n    length equal to the number of bars.  This enables you to use\n    bar as the basis for stacked bar charts, or candlestick plots.\n    Detail: *xerr* and *yerr* are passed directly to\n    :meth:`errorbar`, so they can also have shape 2xN for\n    independent specification of lower and upper errors.\n\n    Other optional kwargs:\n\n    %(Rectangle)s\n    \"\"\"\n    kwargs.setdefault('orientation', 'horizontal')\n    patches = self.bar(x=left, height=height, width=width, bottom=y,\n                       align=align, **kwargs)\n    return patches",
                                "signature": "barh(self, y, width, height=0.8, left=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\n@docstring.dedent_interpd\ndef broken_barh(self, xranges, yrange, **kwargs):\n    \"\"\"\n    Plot a horizontal sequence of rectangles.\n\n    A rectangle is drawn for each element of *xranges*. All rectangles\n    have the same vertical position and size defined by *yrange*.\n\n    This is a convenience function for instantiating a\n    `.BrokenBarHCollection`, adding it to the axes and autoscaling the\n    view.\n\n    Parameters\n    ----------\n    xranges : sequence of tuples (*xmin*, *xwidth*)\n        The x-positions and extends of the rectangles. For each tuple\n        (*xmin*, *xwidth*) a rectangle is drawn from *xmin* to *xmin* +\n        *xwidth*.\n    yrange : (*ymin*, *yheight*)\n        The y-position and extend for all the rectangles.\n\n    Other Parameters\n    ----------------\n    **kwargs : :class:`.BrokenBarHCollection` properties\n\n        Each *kwarg* can be either a single argument applying to all\n        rectangles, e.g.::\n\n            facecolors='black'\n\n        or a sequence of arguments over which is cycled, e.g.::\n\n            facecolors=('black', 'blue')\n\n        would create interleaving black and blue rectangles.\n\n        Supported keywords:\n\n        %(BrokenBarHCollection)s\n\n    Returns\n    -------\n    collection : A :class:`~.collections.BrokenBarHCollection`\n    \"\"\"\n    # process the unit information\n    if len(xranges):\n        xdata = cbook.safe_first_element(xranges)\n    else:\n        xdata = None\n    if len(yrange):\n        ydata = cbook.safe_first_element(yrange)\n    else:\n        ydata = None\n    self._process_unit_info(xdata=xdata,\n                            ydata=ydata,\n                            kwargs=kwargs)\n    xranges_conv = []\n    for xr in xranges:\n        if len(xr) != 2:\n            raise ValueError('each range in xrange must be a sequence '\n                             'with two elements (i.e. an Nx2 array)')\n        # convert the absolute values, not the x and dx...\n        x_conv = np.asarray(self.convert_xunits(xr[0]))\n        x1 = self._convert_dx(xr[1], xr[0], x_conv, self.convert_xunits)\n        xranges_conv.append((x_conv, x1))\n\n    yrange_conv = self.convert_yunits(yrange)\n\n    col = mcoll.BrokenBarHCollection(xranges_conv, yrange_conv, **kwargs)\n    self.add_collection(col, autolim=True)\n    self._request_autoscale_view()\n\n    return col",
                                "signature": "broken_barh(self, xranges, yrange, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\ndef stem(self, *args, linefmt=None, markerfmt=None, basefmt=None, bottom=0,\n         label=None, use_line_collection=False):\n    \"\"\"\n    Create a stem plot.\n\n    A stem plot plots vertical lines at each *x* location from the baseline\n    to *y*, and places a marker there.\n\n    Call signature::\n\n      stem([x,] y, linefmt=None, markerfmt=None, basefmt=None)\n\n    The x-positions are optional. The formats may be provided either as\n    positional or as keyword-arguments.\n\n    Parameters\n    ----------\n    x : array-like, optional\n        The x-positions of the stems. Default: (0, 1, ..., len(y) - 1).\n\n    y : array-like\n        The y-values of the stem heads.\n\n    linefmt : str, optional\n        A string defining the properties of the vertical lines. Usually,\n        this will be a color or a color and a linestyle:\n\n        =========  =============\n        Character  Line Style\n        =========  =============\n        ``'-'``    solid line\n        ``'--'``   dashed line\n        ``'-.'``   dash-dot line\n        ``':'``    dotted line\n        =========  =============\n\n        Default: 'C0-', i.e. solid line with the first color of the color\n        cycle.\n\n        Note: While it is technically possible to specify valid formats\n        other than color or color and linestyle (e.g. 'rx' or '-.'), this\n        is beyond the intention of the method and will most likely not\n        result in a reasonable reasonable plot.\n\n    markerfmt : str, optional\n        A string defining the properties of the markers at the stem heads.\n        Default: 'C0o', i.e. filled circles with the first color of the\n        color cycle.\n\n    basefmt : str, optional\n        A format string defining the properties of the baseline.\n\n        Default: 'C3-' ('C2-' in classic mode).\n\n    bottom : float, optional, default: 0\n        The y-position of the baseline.\n\n    label : str, optional, default: None\n        The label to use for the stems in legends.\n\n    use_line_collection : bool, optional, default: False\n        If ``True``, store and plot the stem lines as a\n        `~.collections.LineCollection` instead of individual lines. This\n        significantly increases performance, and will become the default\n        option in Matplotlib 3.3. If ``False``, defaults to the old\n        behavior of using a list of `.Line2D` objects.\n\n\n    Returns\n    -------\n    container : :class:`~matplotlib.container.StemContainer`\n        The container may be treated like a tuple\n        (*markerline*, *stemlines*, *baseline*)\n\n\n    Notes\n    -----\n    .. seealso::\n        The MATLAB function\n        `stem <http://www.mathworks.com/help/techdoc/ref/stem.html>`_\n        which inspired this method.\n\n    \"\"\"\n    if not 1 <= len(args) <= 5:\n        raise TypeError('stem expected between 1 and 5 positional '\n                        'arguments, got {}'.format(args))\n\n    if len(args) == 1:\n        y, = args\n        x = np.arange(len(y))\n        args = ()\n    else:\n        x, y, *args = args\n\n    self._process_unit_info(xdata=x, ydata=y)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n\n    # defaults for formats\n    if linefmt is None:\n        try:\n            # fallback to positional argument\n            linefmt = args[0]\n        except IndexError:\n            linecolor = 'C0'\n            linemarker = 'None'\n            linestyle = '-'\n        else:\n            linestyle, linemarker, linecolor = \\\n                _process_plot_format(linefmt)\n    else:\n        linestyle, linemarker, linecolor = _process_plot_format(linefmt)\n\n    if markerfmt is None:\n        try:\n            # fallback to positional argument\n            markerfmt = args[1]\n        except IndexError:\n            markercolor = 'C0'\n            markermarker = 'o'\n            markerstyle = 'None'\n        else:\n            markerstyle, markermarker, markercolor = \\\n                _process_plot_format(markerfmt)\n    else:\n        markerstyle, markermarker, markercolor = \\\n            _process_plot_format(markerfmt)\n\n    if basefmt is None:\n        try:\n            # fallback to positional argument\n            basefmt = args[2]\n        except IndexError:\n            if rcParams['_internal.classic_mode']:\n                basecolor = 'C2'\n            else:\n                basecolor = 'C3'\n            basemarker = 'None'\n            basestyle = '-'\n        else:\n            basestyle, basemarker, basecolor = \\\n                _process_plot_format(basefmt)\n    else:\n        basestyle, basemarker, basecolor = _process_plot_format(basefmt)\n\n    # New behaviour in 3.1 is to use a LineCollection for the stemlines\n    if use_line_collection:\n        stemlines = [((xi, bottom), (xi, yi)) for xi, yi in zip(x, y)]\n        if linestyle is None:\n            linestyle = rcParams['lines.linestyle']\n        stemlines = mcoll.LineCollection(stemlines, linestyles=linestyle,\n                                         colors=linecolor,\n                                         label='_nolegend_')\n        self.add_collection(stemlines)\n    # Old behaviour is to plot each of the lines individually\n    else:\n        cbook._warn_external(\n            'In Matplotlib 3.3 individual lines on a stem plot will be '\n            'added as a LineCollection instead of individual lines. '\n            'This significantly improves the performance of a stem plot. '\n            'To remove this warning and switch to the new behaviour, '\n            'set the \"use_line_collection\" keyword argument to True.')\n        stemlines = []\n        for xi, yi in zip(x, y):\n            l, = self.plot([xi, xi], [bottom, yi],\n                           color=linecolor, linestyle=linestyle,\n                           marker=linemarker, label=\"_nolegend_\")\n            stemlines.append(l)\n\n    markerline, = self.plot(x, y, color=markercolor, linestyle=markerstyle,\n                            marker=markermarker, label=\"_nolegend_\")\n\n    baseline, = self.plot([np.min(x), np.max(x)], [bottom, bottom],\n                          color=basecolor, linestyle=basestyle,\n                          marker=basemarker, label=\"_nolegend_\")\n\n    stem_container = StemContainer((markerline, stemlines, baseline),\n                                   label=label)\n    self.add_container(stem_container)\n    return stem_container",
                                "signature": "stem(self, *args)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"explode\", \"labels\", \"colors\"])\ndef pie(self, x, explode=None, labels=None, colors=None,\n        autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1,\n        startangle=None, radius=None, counterclock=True,\n        wedgeprops=None, textprops=None, center=(0, 0),\n        frame=False, rotatelabels=False):\n    \"\"\"\n    Plot a pie chart.\n\n    Make a pie chart of array *x*.  The fractional area of each wedge is\n    given by ``x/sum(x)``.  If ``sum(x) < 1``, then the values of *x* give\n    the fractional area directly and the array will not be normalized. The\n    resulting pie will have an empty wedge of size ``1 - sum(x)``.\n\n    The wedges are plotted counterclockwise, by default starting from the\n    x-axis.\n\n    Parameters\n    ----------\n    x : array-like\n        The wedge sizes.\n\n    explode : array-like, optional, default: None\n        If not *None*, is a ``len(x)`` array which specifies the fraction\n        of the radius with which to offset each wedge.\n\n    labels : list, optional, default: None\n        A sequence of strings providing the labels for each wedge\n\n    colors : array-like, optional, default: None\n        A sequence of matplotlib color args through which the pie chart\n        will cycle.  If *None*, will use the colors in the currently\n        active cycle.\n\n    autopct : None (default), str, or function, optional\n        If not *None*, is a string or function used to label the wedges\n        with their numeric value.  The label will be placed inside the\n        wedge.  If it is a format string, the label will be ``fmt%pct``.\n        If it is a function, it will be called.\n\n    pctdistance : float, optional, default: 0.6\n        The ratio between the center of each pie slice and the start of\n        the text generated by *autopct*.  Ignored if *autopct* is *None*.\n\n    shadow : bool, optional, default: False\n        Draw a shadow beneath the pie.\n\n    labeldistance : float or None, optional, default: 1.1\n        The radial distance at which the pie labels are drawn.\n        If set to ``None``, label are not drawn, but are stored for use in\n        ``legend()``\n\n    startangle : float, optional, default: None\n        If not *None*, rotates the start of the pie chart by *angle*\n        degrees counterclockwise from the x-axis.\n\n    radius : float, optional, default: None\n        The radius of the pie, if *radius* is *None* it will be set to 1.\n\n    counterclock : bool, optional, default: True\n        Specify fractions direction, clockwise or counterclockwise.\n\n    wedgeprops : dict, optional, default: None\n        Dict of arguments passed to the wedge objects making the pie.\n        For example, you can pass in ``wedgeprops = {'linewidth': 3}``\n        to set the width of the wedge border lines equal to 3.\n        For more details, look at the doc/arguments of the wedge object.\n        By default ``clip_on=False``.\n\n    textprops : dict, optional, default: None\n        Dict of arguments to pass to the text objects.\n\n    center :  list of float, optional, default: (0, 0)\n        Center position of the chart. Takes value (0, 0) or is a sequence\n        of 2 scalars.\n\n    frame : bool, optional, default: False\n        Plot axes frame with the chart if true.\n\n    rotatelabels : bool, optional, default: False\n        Rotate each label to the angle of the corresponding slice if true.\n\n    Returns\n    -------\n    patches : list\n        A sequence of :class:`matplotlib.patches.Wedge` instances\n\n    texts : list\n        A list of the label :class:`matplotlib.text.Text` instances.\n\n    autotexts : list\n        A list of :class:`~matplotlib.text.Text` instances for the numeric\n        labels. This will only be returned if the parameter *autopct* is\n        not *None*.\n\n    Notes\n    -----\n    The pie chart will probably look best if the figure and axes are\n    square, or the Axes aspect is equal.\n    This method sets the aspect ratio of the axis to \"equal\".\n    The axes aspect ratio can be controlled with `Axes.set_aspect`.\n    \"\"\"\n    self.set_aspect('equal')\n    # The use of float32 is \"historical\", but can't be changed without\n    # regenerating the test baselines.\n    x = np.asarray(x, np.float32)\n    if x.ndim != 1 and x.squeeze().ndim <= 1:\n        cbook.warn_deprecated(\n            \"3.1\", message=\"Non-1D inputs to pie() are currently \"\n            \"squeeze()d, but this behavior is deprecated since %(since)s \"\n            \"and will be removed %(removal)s; pass a 1D array instead.\")\n        x = np.atleast_1d(x.squeeze())\n\n    sx = x.sum()\n    if sx > 1:\n        x = x / sx\n\n    if labels is None:\n        labels = [''] * len(x)\n    if explode is None:\n        explode = [0] * len(x)\n    if len(x) != len(labels):\n        raise ValueError(\"'label' must be of length 'x'\")\n    if len(x) != len(explode):\n        raise ValueError(\"'explode' must be of length 'x'\")\n    if colors is None:\n        get_next_color = self._get_patches_for_fill.get_next_color\n    else:\n        color_cycle = itertools.cycle(colors)\n\n        def get_next_color():\n            return next(color_cycle)\n\n    if radius is None:\n        radius = 1\n\n    # Starting theta1 is the start fraction of the circle\n    if startangle is None:\n        theta1 = 0\n    else:\n        theta1 = startangle / 360.0\n\n    # set default values in wedge_prop\n    if wedgeprops is None:\n        wedgeprops = {}\n    wedgeprops.setdefault('clip_on', False)\n\n    if textprops is None:\n        textprops = {}\n    textprops.setdefault('clip_on', False)\n\n    texts = []\n    slices = []\n    autotexts = []\n\n    for frac, label, expl in zip(x, labels, explode):\n        x, y = center\n        theta2 = (theta1 + frac) if counterclock else (theta1 - frac)\n        thetam = 2 * np.pi * 0.5 * (theta1 + theta2)\n        x += expl * math.cos(thetam)\n        y += expl * math.sin(thetam)\n\n        w = mpatches.Wedge((x, y), radius, 360. * min(theta1, theta2),\n                           360. * max(theta1, theta2),\n                           facecolor=get_next_color(),\n                           **wedgeprops)\n        slices.append(w)\n        self.add_patch(w)\n        w.set_label(label)\n\n        if shadow:\n            # make sure to add a shadow after the call to\n            # add_patch so the figure and transform props will be\n            # set\n            shad = mpatches.Shadow(w, -0.02, -0.02)\n            shad.set_zorder(0.9 * w.get_zorder())\n            shad.set_label('_nolegend_')\n            self.add_patch(shad)\n\n        if labeldistance is not None:\n            xt = x + labeldistance * radius * math.cos(thetam)\n            yt = y + labeldistance * radius * math.sin(thetam)\n            label_alignment_h = 'left' if xt > 0 else 'right'\n            label_alignment_v = 'center'\n            label_rotation = 'horizontal'\n            if rotatelabels:\n                label_alignment_v = 'bottom' if yt > 0 else 'top'\n                label_rotation = (np.rad2deg(thetam)\n                                  + (0 if xt > 0 else 180))\n            props = dict(horizontalalignment=label_alignment_h,\n                         verticalalignment=label_alignment_v,\n                         rotation=label_rotation,\n                         size=rcParams['xtick.labelsize'])\n            props.update(textprops)\n\n            t = self.text(xt, yt, label, **props)\n\n            texts.append(t)\n\n        if autopct is not None:\n            xt = x + pctdistance * radius * math.cos(thetam)\n            yt = y + pctdistance * radius * math.sin(thetam)\n            if isinstance(autopct, str):\n                s = autopct % (100. * frac)\n            elif callable(autopct):\n                s = autopct(100. * frac)\n            else:\n                raise TypeError(\n                    'autopct must be callable or a format string')\n\n            props = dict(horizontalalignment='center',\n                         verticalalignment='center')\n            props.update(textprops)\n            t = self.text(xt, yt, s, **props)\n\n            autotexts.append(t)\n\n        theta1 = theta2\n\n    if not frame:\n        self.set_frame_on(False)\n\n        self.set_xlim((-1.25 + center[0],\n                       1.25 + center[0]))\n        self.set_ylim((-1.25 + center[1],\n                       1.25 + center[1]))\n        self.set_xticks([])\n        self.set_yticks([])\n\n    if autopct is None:\n        return slices, texts\n    else:\n        return slices, texts, autotexts",
                                "signature": "pie(self, x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\", \"xerr\", \"yerr\"],\n                  label_namer=\"y\")\n@docstring.dedent_interpd\ndef errorbar(self, x, y, yerr=None, xerr=None,\n             fmt='', ecolor=None, elinewidth=None, capsize=None,\n             barsabove=False, lolims=False, uplims=False,\n             xlolims=False, xuplims=False, errorevery=1, capthick=None,\n             **kwargs):\n    \"\"\"\n    Plot y versus x as lines and/or markers with attached errorbars.\n\n    *x*, *y* define the data locations, *xerr*, *yerr* define the errorbar\n    sizes. By default, this draws the data markers/lines as well the\n    errorbars. Use fmt='none' to draw errorbars without any data markers.\n\n    Parameters\n    ----------\n    x, y : scalar or array-like\n        The data positions.\n\n    xerr, yerr : scalar or array-like, shape(N,) or shape(2, N), optional\n        The errorbar sizes:\n\n        - scalar: Symmetric +/- values for all data points.\n        - shape(N,): Symmetric +/-values for each data point.\n        - shape(2, N): Separate - and + values for each bar. First row\n          contains the lower errors, the second row contains the upper\n          errors.\n        - *None*: No errorbar.\n\n        Note that all error arrays should have *positive* values.\n\n        See :doc:`/gallery/statistics/errorbar_features`\n        for an example on the usage of ``xerr`` and ``yerr``.\n\n    fmt : str, optional, default: ''\n        The format for the data points / data lines. See `.plot` for\n        details.\n\n        Use 'none' (case insensitive) to plot errorbars without any data\n        markers.\n\n    ecolor : color, optional, default: None\n        The color of the errorbar lines.  If None, use the color of the\n        line connecting the markers.\n\n    elinewidth : scalar, optional, default: None\n        The linewidth of the errorbar lines. If None, the linewidth of\n        the current style is used.\n\n    capsize : scalar, optional, default: None\n        The length of the error bar caps in points. If None, it will take\n        the value from :rc:`errorbar.capsize`.\n\n    capthick : scalar, optional, default: None\n        An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).\n        This setting is a more sensible name for the property that\n        controls the thickness of the error bar cap in points. For\n        backwards compatibility, if *mew* or *markeredgewidth* are given,\n        then they will over-ride *capthick*. This may change in future\n        releases.\n\n    barsabove : bool, optional, default: False\n        If True, will plot the errorbars above the plot\n        symbols. Default is below.\n\n    lolims, uplims, xlolims, xuplims : bool, optional, default: False\n        These arguments can be used to indicate that a value gives only\n        upper/lower limits. In that case a caret symbol is used to\n        indicate this. *lims*-arguments may be of the same type as *xerr*\n        and *yerr*.  To use limits with inverted axes, :meth:`set_xlim`\n        or :meth:`set_ylim` must be called before :meth:`errorbar`.\n\n    errorevery : int or (int, int), optional, default: 1\n        draws error bars on a subset of the data. *errorevery* =N draws\n        error bars on the points (x[::N], y[::N]).\n        *errorevery* =(start, N) draws error bars on the points\n        (x[start::N], y[start::N]). e.g. errorevery=(6, 3)\n        adds error bars to the data at (x[6], x[9], x[12], x[15], ...).\n        Used to avoid overlapping error bars when two series share x-axis\n        values.\n\n    Returns\n    -------\n    container : :class:`~.container.ErrorbarContainer`\n        The container contains:\n\n        - plotline: `.Line2D` instance of x, y plot markers and/or line.\n        - caplines: A tuple of `.Line2D` instances of the error bar caps.\n        - barlinecols: A tuple of\n          :class:`~matplotlib.collections.LineCollection` with the\n          horizontal and vertical error ranges.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All other keyword arguments are passed on to the plot\n        command for the markers. For example, this code makes big red\n        squares with thick green edges::\n\n            x, y, yerr = rand(3, 10)\n            errorbar(x, y, yerr, marker='s', mfc='red',\n                     mec='green', ms=20, mew=4)\n\n        where *mfc*, *mec*, *ms* and *mew* are aliases for the longer\n        property names, *markerfacecolor*, *markeredgecolor*, *markersize*\n        and *markeredgewidth*.\n\n        Valid kwargs for the marker properties are `.Lines2D` properties:\n\n        %(_Line2D_docstr)s\n    \"\"\"\n    kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n    # anything that comes in as 'None', drop so the default thing\n    # happens down stream\n    kwargs = {k: v for k, v in kwargs.items() if v is not None}\n    kwargs.setdefault('zorder', 2)\n\n    try:\n        offset, errorevery = errorevery\n    except TypeError:\n        offset = 0\n\n    if errorevery < 1 or int(errorevery) != errorevery:\n        raise ValueError(\n            'errorevery must be positive integer or tuple of integers')\n    if int(offset) != offset:\n        raise ValueError(\"errorevery's starting index must be an integer\")\n\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n\n    plot_line = (fmt.lower() != 'none')\n    label = kwargs.pop(\"label\", None)\n\n    if fmt == '':\n        fmt_style_kwargs = {}\n    else:\n        fmt_style_kwargs = {k: v for k, v in\n                            zip(('linestyle', 'marker', 'color'),\n                                _process_plot_format(fmt))\n                            if v is not None}\n    if fmt == 'none':\n        # Remove alpha=0 color that _process_plot_format returns\n        fmt_style_kwargs.pop('color')\n\n    if ('color' in kwargs or 'color' in fmt_style_kwargs or\n            ecolor is not None):\n        base_style = {}\n        if 'color' in kwargs:\n            base_style['color'] = kwargs.pop('color')\n    else:\n        base_style = next(self._get_lines.prop_cycler)\n\n    base_style['label'] = '_nolegend_'\n    base_style.update(fmt_style_kwargs)\n    if 'color' not in base_style:\n        base_style['color'] = 'C0'\n    if ecolor is None:\n        ecolor = base_style['color']\n    # make sure all the args are iterable; use lists not arrays to\n    # preserve units\n    if not np.iterable(x):\n        x = [x]\n\n    if not np.iterable(y):\n        y = [y]\n\n    if xerr is not None:\n        if not np.iterable(xerr):\n            xerr = [xerr] * len(x)\n\n    if yerr is not None:\n        if not np.iterable(yerr):\n            yerr = [yerr] * len(y)\n\n    # make the style dict for the 'normal' plot line\n    plot_line_style = {\n        **base_style,\n        **kwargs,\n        'zorder': (kwargs['zorder'] - .1 if barsabove else\n                   kwargs['zorder'] + .1),\n    }\n\n    # make the style dict for the line collections (the bars)\n    eb_lines_style = dict(base_style)\n    eb_lines_style.pop('marker', None)\n    eb_lines_style.pop('linestyle', None)\n    eb_lines_style['color'] = ecolor\n\n    if elinewidth:\n        eb_lines_style['linewidth'] = elinewidth\n    elif 'linewidth' in kwargs:\n        eb_lines_style['linewidth'] = kwargs['linewidth']\n\n    for key in ('transform', 'alpha', 'zorder', 'rasterized'):\n        if key in kwargs:\n            eb_lines_style[key] = kwargs[key]\n\n    # set up cap style dictionary\n    eb_cap_style = dict(base_style)\n    # eject any marker information from format string\n    eb_cap_style.pop('marker', None)\n    eb_lines_style.pop('markerfacecolor', None)\n    eb_lines_style.pop('markeredgewidth', None)\n    eb_lines_style.pop('markeredgecolor', None)\n    eb_cap_style.pop('ls', None)\n    eb_cap_style['linestyle'] = 'none'\n    if capsize is None:\n        capsize = rcParams[\"errorbar.capsize\"]\n    if capsize > 0:\n        eb_cap_style['markersize'] = 2. * capsize\n    if capthick is not None:\n        eb_cap_style['markeredgewidth'] = capthick\n\n    # For backwards-compat, allow explicit setting of\n    # 'markeredgewidth' to over-ride capthick.\n    for key in ('markeredgewidth', 'transform', 'alpha',\n                'zorder', 'rasterized'):\n        if key in kwargs:\n            eb_cap_style[key] = kwargs[key]\n    eb_cap_style['color'] = ecolor\n\n    data_line = None\n    if plot_line:\n        data_line = mlines.Line2D(x, y, **plot_line_style)\n        self.add_line(data_line)\n\n    barcols = []\n    caplines = []\n\n    # arrays fine here, they are booleans and hence not units\n    lolims = np.broadcast_to(lolims, len(x)).astype(bool)\n    uplims = np.broadcast_to(uplims, len(x)).astype(bool)\n    xlolims = np.broadcast_to(xlolims, len(x)).astype(bool)\n    xuplims = np.broadcast_to(xuplims, len(x)).astype(bool)\n\n    everymask = np.zeros(len(x), bool)\n    everymask[offset::errorevery] = True\n\n    def xywhere(xs, ys, mask):\n        \"\"\"\n        return xs[mask], ys[mask] where mask is True but xs and\n        ys are not arrays\n        \"\"\"\n        assert len(xs) == len(ys)\n        assert len(xs) == len(mask)\n        xs = [thisx for thisx, b in zip(xs, mask) if b]\n        ys = [thisy for thisy, b in zip(ys, mask) if b]\n        return xs, ys\n\n    def extract_err(err, data):\n        \"\"\"\n        Private function to parse *err* and subtract/add it to *data*.\n\n        Both *err* and *data* are already iterables at this point.\n        \"\"\"\n        try:  # Asymmetric error: pair of 1D iterables.\n            a, b = err\n            iter(a)\n            iter(b)\n        except (TypeError, ValueError):\n            a = b = err  # Symmetric error: 1D iterable.\n        # This could just be `np.ndim(a) > 1 and np.ndim(b) > 1`, except\n        # for the (undocumented, but tested) support for (n, 1) arrays.\n        a_sh = np.shape(a)\n        b_sh = np.shape(b)\n        if (len(a_sh) > 2 or (len(a_sh) == 2 and a_sh[1] != 1)\n                or len(b_sh) > 2 or (len(b_sh) == 2 and b_sh[1] != 1)):\n            raise ValueError(\n                \"err must be a scalar or a 1D or (2, n) array-like\")\n        if len(a_sh) == 2 or len(b_sh) == 2:\n            cbook.warn_deprecated(\n                \"3.1\", message=\"Support for passing a (n, 1)-shaped error \"\n                \"array to errorbar() is deprecated since Matplotlib \"\n                \"%(since)s and will be removed %(removal)s; pass a 1D \"\n                \"array instead.\")\n        # Using list comprehensions rather than arrays to preserve units.\n        for e in [a, b]:\n            if len(data) != len(e):\n                raise ValueError(\n                    f\"The lengths of the data ({len(data)}) and the \"\n                    f\"error {len(e)} do not match\")\n        low = [v - e for v, e in zip(data, a)]\n        high = [v + e for v, e in zip(data, b)]\n        return low, high\n\n    if xerr is not None:\n        left, right = extract_err(xerr, x)\n        # select points without upper/lower limits in x and\n        # draw normal errorbars for these points\n        noxlims = ~(xlolims | xuplims)\n        if noxlims.any() or len(noxlims) == 0:\n            yo, _ = xywhere(y, right, noxlims & everymask)\n            lo, ro = xywhere(left, right, noxlims & everymask)\n            barcols.append(self.hlines(yo, lo, ro, **eb_lines_style))\n            if capsize > 0:\n                caplines.append(mlines.Line2D(lo, yo, marker='|',\n                                              **eb_cap_style))\n                caplines.append(mlines.Line2D(ro, yo, marker='|',\n                                              **eb_cap_style))\n\n        if xlolims.any():\n            yo, _ = xywhere(y, right, xlolims & everymask)\n            lo, ro = xywhere(x, right, xlolims & everymask)\n            barcols.append(self.hlines(yo, lo, ro, **eb_lines_style))\n            rightup, yup = xywhere(right, y, xlolims & everymask)\n            if self.xaxis_inverted():\n                marker = mlines.CARETLEFTBASE\n            else:\n                marker = mlines.CARETRIGHTBASE\n            caplines.append(\n                mlines.Line2D(rightup, yup, ls='None', marker=marker,\n                              **eb_cap_style))\n            if capsize > 0:\n                xlo, ylo = xywhere(x, y, xlolims & everymask)\n                caplines.append(mlines.Line2D(xlo, ylo, marker='|',\n                                              **eb_cap_style))\n\n        if xuplims.any():\n            yo, _ = xywhere(y, right, xuplims & everymask)\n            lo, ro = xywhere(left, x, xuplims & everymask)\n            barcols.append(self.hlines(yo, lo, ro, **eb_lines_style))\n            leftlo, ylo = xywhere(left, y, xuplims & everymask)\n            if self.xaxis_inverted():\n                marker = mlines.CARETRIGHTBASE\n            else:\n                marker = mlines.CARETLEFTBASE\n            caplines.append(\n                mlines.Line2D(leftlo, ylo, ls='None', marker=marker,\n                              **eb_cap_style))\n            if capsize > 0:\n                xup, yup = xywhere(x, y, xuplims & everymask)\n                caplines.append(mlines.Line2D(xup, yup, marker='|',\n                                              **eb_cap_style))\n\n    if yerr is not None:\n        lower, upper = extract_err(yerr, y)\n        # select points without upper/lower limits in y and\n        # draw normal errorbars for these points\n        noylims = ~(lolims | uplims)\n        if noylims.any() or len(noylims) == 0:\n            xo, _ = xywhere(x, lower, noylims & everymask)\n            lo, uo = xywhere(lower, upper, noylims & everymask)\n            barcols.append(self.vlines(xo, lo, uo, **eb_lines_style))\n            if capsize > 0:\n                caplines.append(mlines.Line2D(xo, lo, marker='_',\n                                              **eb_cap_style))\n                caplines.append(mlines.Line2D(xo, uo, marker='_',\n                                              **eb_cap_style))\n\n        if lolims.any():\n            xo, _ = xywhere(x, lower, lolims & everymask)\n            lo, uo = xywhere(y, upper, lolims & everymask)\n            barcols.append(self.vlines(xo, lo, uo, **eb_lines_style))\n            xup, upperup = xywhere(x, upper, lolims & everymask)\n            if self.yaxis_inverted():\n                marker = mlines.CARETDOWNBASE\n            else:\n                marker = mlines.CARETUPBASE\n            caplines.append(\n                mlines.Line2D(xup, upperup, ls='None', marker=marker,\n                              **eb_cap_style))\n            if capsize > 0:\n                xlo, ylo = xywhere(x, y, lolims & everymask)\n                caplines.append(mlines.Line2D(xlo, ylo, marker='_',\n                                              **eb_cap_style))\n\n        if uplims.any():\n            xo, _ = xywhere(x, lower, uplims & everymask)\n            lo, uo = xywhere(lower, y, uplims & everymask)\n            barcols.append(self.vlines(xo, lo, uo, **eb_lines_style))\n            xlo, lowerlo = xywhere(x, lower, uplims & everymask)\n            if self.yaxis_inverted():\n                marker = mlines.CARETUPBASE\n            else:\n                marker = mlines.CARETDOWNBASE\n            caplines.append(\n                mlines.Line2D(xlo, lowerlo, ls='None', marker=marker,\n                              **eb_cap_style))\n            if capsize > 0:\n                xup, yup = xywhere(x, y, uplims & everymask)\n                caplines.append(mlines.Line2D(xup, yup, marker='_',\n                                              **eb_cap_style))\n    for l in caplines:\n        self.add_line(l)\n\n    self._request_autoscale_view()\n    errorbar_container = ErrorbarContainer((data_line, tuple(caplines),\n                                            tuple(barcols)),\n                                           has_xerr=(xerr is not None),\n                                           has_yerr=(yerr is not None),\n                                           label=label)\n    self.containers.append(errorbar_container)\n\n    return errorbar_container  # (l0, caplines, barcols)",
                                "signature": "errorbar(self, x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, **kwargs)"
                            },
                            {
                                "code": "@cbook._rename_parameter(\"3.1\", \"manage_xticks\", \"manage_ticks\")\n@_preprocess_data()\ndef boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n            positions=None, widths=None, patch_artist=None,\n            bootstrap=None, usermedians=None, conf_intervals=None,\n            meanline=None, showmeans=None, showcaps=None,\n            showbox=None, showfliers=None, boxprops=None,\n            labels=None, flierprops=None, medianprops=None,\n            meanprops=None, capprops=None, whiskerprops=None,\n            manage_ticks=True, autorange=False, zorder=None):\n    \"\"\"\n    Make a box and whisker plot.\n\n    Make a box and whisker plot for each column of ``x`` or each\n    vector in sequence ``x``.  The box extends from the lower to\n    upper quartile values of the data, with a line at the median.\n    The whiskers extend from the box to show the range of the\n    data.  Flier points are those past the end of the whiskers.\n\n    Parameters\n    ----------\n    x : Array or a sequence of vectors.\n        The input data.\n\n    notch : bool, optional (False)\n        If `True`, will produce a notched box plot. Otherwise, a\n        rectangular boxplot is produced. The notches represent the\n        confidence interval (CI) around the median. See the entry\n        for the ``bootstrap`` parameter for information regarding\n        how the locations of the notches are computed.\n\n        .. note::\n\n            In cases where the values of the CI are less than the\n            lower quartile or greater than the upper quartile, the\n            notches will extend beyond the box, giving it a\n            distinctive \"flipped\" appearance. This is expected\n            behavior and consistent with other statistical\n            visualization packages.\n\n    sym : str, optional\n        The default symbol for flier points. Enter an empty string\n        ('') if you don't want to show fliers. If `None`, then the\n        fliers default to 'b+'  If you want more control use the\n        flierprops kwarg.\n\n    vert : bool, optional (True)\n        If `True` (default), makes the boxes vertical. If `False`,\n        everything is drawn horizontally.\n\n    whis : float or (float, float) (default = 1.5)\n        The position of the whiskers.\n\n        If a float, the lower whisker is at the lowest datum above\n        ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum\n        below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and\n        third quartiles.  The default value of ``whis = 1.5`` corresponds\n        to Tukey's original definition of boxplots.\n\n        If a pair of floats, they indicate the percentiles at which to\n        draw the whiskers (e.g., (5, 95)).  In particular, setting this to\n        (0, 100) results in whiskers covering the whole range of the data.\n        \"range\" is a deprecated synonym for (0, 100).\n\n        In the edge case where ``Q1 == Q3``, *whis* is automatically set\n        to (0, 100) (cover the whole range of the data) if *autorange* is\n        True.\n\n        Beyond the whiskers, data are considered outliers and are plotted\n        as individual points.\n\n    bootstrap : int, optional\n        Specifies whether to bootstrap the confidence intervals\n        around the median for notched boxplots. If ``bootstrap`` is\n        None, no bootstrapping is performed, and notches are\n        calculated using a Gaussian-based asymptotic approximation\n        (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\n        Kendall and Stuart, 1967). Otherwise, bootstrap specifies\n        the number of times to bootstrap the median to determine its\n        95% confidence intervals. Values between 1000 and 10000 are\n        recommended.\n\n    usermedians : array-like, optional\n        An array or sequence whose first dimension (or length) is\n        compatible with ``x``. This overrides the medians computed\n        by matplotlib for each element of ``usermedians`` that is not\n        `None`. When an element of ``usermedians`` is None, the median\n        will be computed by matplotlib as normal.\n\n    conf_intervals : array-like, optional\n        Array or sequence whose first dimension (or length) is\n        compatible with ``x`` and whose second dimension is 2. When\n        the an element of ``conf_intervals`` is not None, the\n        notch locations computed by matplotlib are overridden\n        (provided ``notch`` is `True`). When an element of\n        ``conf_intervals`` is `None`, the notches are computed by the\n        method specified by the other kwargs (e.g., ``bootstrap``).\n\n    positions : array-like, optional\n        Sets the positions of the boxes. The ticks and limits are\n        automatically set to match the positions. Defaults to\n        `range(1, N+1)` where N is the number of boxes to be drawn.\n\n    widths : scalar or array-like\n        Sets the width of each box either with a scalar or a\n        sequence. The default is 0.5, or ``0.15*(distance between\n        extreme positions)``, if that is smaller.\n\n    patch_artist : bool, optional (False)\n        If `False` produces boxes with the Line2D artist. Otherwise,\n        boxes and drawn with Patch artists.\n\n    labels : sequence, optional\n        Labels for each dataset. Length must be compatible with\n        dimensions of ``x``.\n\n    manage_ticks : bool, optional (True)\n        If True, the tick locations and labels will be adjusted to match\n        the boxplot positions.\n\n    autorange : bool, optional (False)\n        When `True` and the data are distributed such that the 25th and\n        75th percentiles are equal, ``whis`` is set to (0, 100) such\n        that the whisker ends are at the minimum and maximum of the data.\n\n    meanline : bool, optional (False)\n        If `True` (and ``showmeans`` is `True`), will try to render\n        the mean as a line spanning the full width of the box\n        according to ``meanprops`` (see below). Not recommended if\n        ``shownotches`` is also True. Otherwise, means will be shown\n        as points.\n\n    zorder : scalar, optional (None)\n        Sets the zorder of the boxplot.\n\n    Other Parameters\n    ----------------\n    showcaps : bool, optional (True)\n        Show the caps on the ends of whiskers.\n    showbox : bool, optional (True)\n        Show the central box.\n    showfliers : bool, optional (True)\n        Show the outliers beyond the caps.\n    showmeans : bool, optional (False)\n        Show the arithmetic means.\n    capprops : dict, optional (None)\n        Specifies the style of the caps.\n    boxprops : dict, optional (None)\n        Specifies the style of the box.\n    whiskerprops : dict, optional (None)\n        Specifies the style of the whiskers.\n    flierprops : dict, optional (None)\n        Specifies the style of the fliers.\n    medianprops : dict, optional (None)\n        Specifies the style of the median.\n    meanprops : dict, optional (None)\n        Specifies the style of the mean.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the boxplot to a list\n      of the `.Line2D` instances created. That dictionary has the\n      following keys (assuming vertical boxplots):\n\n      - ``boxes``: the main body of the boxplot showing the\n        quartiles and the median's confidence intervals if\n        enabled.\n\n      - ``medians``: horizontal lines at the median of each box.\n\n      - ``whiskers``: the vertical lines extending to the most\n        extreme, non-outlier data points.\n\n      - ``caps``: the horizontal lines at the ends of the\n        whiskers.\n\n      - ``fliers``: points representing data that extend beyond\n        the whiskers (fliers).\n\n      - ``means``: points or lines representing the means.\n\n    \"\"\"\n\n    # Missing arguments default to rcParams.\n    if whis is None:\n        whis = rcParams['boxplot.whiskers']\n    if bootstrap is None:\n        bootstrap = rcParams['boxplot.bootstrap']\n\n    bxpstats = cbook.boxplot_stats(x, whis=whis, bootstrap=bootstrap,\n                                   labels=labels, autorange=autorange)\n    if notch is None:\n        notch = rcParams['boxplot.notch']\n    if vert is None:\n        vert = rcParams['boxplot.vertical']\n    if patch_artist is None:\n        patch_artist = rcParams['boxplot.patchartist']\n    if meanline is None:\n        meanline = rcParams['boxplot.meanline']\n    if showmeans is None:\n        showmeans = rcParams['boxplot.showmeans']\n    if showcaps is None:\n        showcaps = rcParams['boxplot.showcaps']\n    if showbox is None:\n        showbox = rcParams['boxplot.showbox']\n    if showfliers is None:\n        showfliers = rcParams['boxplot.showfliers']\n\n    if boxprops is None:\n        boxprops = {}\n    if whiskerprops is None:\n        whiskerprops = {}\n    if capprops is None:\n        capprops = {}\n    if medianprops is None:\n        medianprops = {}\n    if meanprops is None:\n        meanprops = {}\n    if flierprops is None:\n        flierprops = {}\n\n    if patch_artist:\n        boxprops['linestyle'] = 'solid'  # Not consistent with bxp.\n        if 'color' in boxprops:\n            boxprops['edgecolor'] = boxprops.pop('color')\n\n    # if non-default sym value, put it into the flier dictionary\n    # the logic for providing the default symbol ('b+') now lives\n    # in bxp in the initial value of final_flierprops\n    # handle all of the *sym* related logic here so we only have to pass\n    # on the flierprops dict.\n    if sym is not None:\n        # no-flier case, which should really be done with\n        # 'showfliers=False' but none-the-less deal with it to keep back\n        # compatibility\n        if sym == '':\n            # blow away existing dict and make one for invisible markers\n            flierprops = dict(linestyle='none', marker='', color='none')\n            # turn the fliers off just to be safe\n            showfliers = False\n        # now process the symbol string\n        else:\n            # process the symbol string\n            # discarded linestyle\n            _, marker, color = _process_plot_format(sym)\n            # if we have a marker, use it\n            if marker is not None:\n                flierprops['marker'] = marker\n            # if we have a color, use it\n            if color is not None:\n                # assume that if color is passed in the user want\n                # filled symbol, if the users want more control use\n                # flierprops\n                flierprops['color'] = color\n                flierprops['markerfacecolor'] = color\n                flierprops['markeredgecolor'] = color\n\n    # replace medians if necessary:\n    if usermedians is not None:\n        if (len(np.ravel(usermedians)) != len(bxpstats) or\n                np.shape(usermedians)[0] != len(bxpstats)):\n            raise ValueError('usermedians length not compatible with x')\n        else:\n            # reassign medians as necessary\n            for stats, med in zip(bxpstats, usermedians):\n                if med is not None:\n                    stats['med'] = med\n\n    if conf_intervals is not None:\n        if np.shape(conf_intervals)[0] != len(bxpstats):\n            err_mess = 'conf_intervals length not compatible with x'\n            raise ValueError(err_mess)\n        else:\n            for stats, ci in zip(bxpstats, conf_intervals):\n                if ci is not None:\n                    if len(ci) != 2:\n                        raise ValueError('each confidence interval must '\n                                         'have two values')\n                    else:\n                        if ci[0] is not None:\n                            stats['cilo'] = ci[0]\n                        if ci[1] is not None:\n                            stats['cihi'] = ci[1]\n\n    artists = self.bxp(bxpstats, positions=positions, widths=widths,\n                       vert=vert, patch_artist=patch_artist,\n                       shownotches=notch, showmeans=showmeans,\n                       showcaps=showcaps, showbox=showbox,\n                       boxprops=boxprops, flierprops=flierprops,\n                       medianprops=medianprops, meanprops=meanprops,\n                       meanline=meanline, showfliers=showfliers,\n                       capprops=capprops, whiskerprops=whiskerprops,\n                       manage_ticks=manage_ticks, zorder=zorder)\n    return artists",
                                "signature": "boxplot(self, x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None)"
                            },
                            {
                                "code": "@cbook._rename_parameter(\"3.1\", \"manage_xticks\", \"manage_ticks\")\ndef bxp(self, bxpstats, positions=None, widths=None, vert=True,\n        patch_artist=False, shownotches=False, showmeans=False,\n        showcaps=True, showbox=True, showfliers=True,\n        boxprops=None, whiskerprops=None, flierprops=None,\n        medianprops=None, capprops=None, meanprops=None,\n        meanline=False, manage_ticks=True, zorder=None):\n    \"\"\"\n    Drawing function for box and whisker plots.\n\n    Make a box and whisker plot for each column of *x* or each\n    vector in sequence *x*.  The box extends from the lower to\n    upper quartile values of the data, with a line at the median.\n    The whiskers extend from the box to show the range of the\n    data.  Flier points are those past the end of the whiskers.\n\n    Parameters\n    ----------\n    bxpstats : list of dicts\n      A list of dictionaries containing stats for each boxplot.\n      Required keys are:\n\n      - ``med``: The median (scalar float).\n\n      - ``q1``: The first quartile (25th percentile) (scalar\n        float).\n\n      - ``q3``: The third quartile (75th percentile) (scalar\n        float).\n\n      - ``whislo``: Lower bound of the lower whisker (scalar\n        float).\n\n      - ``whishi``: Upper bound of the upper whisker (scalar\n        float).\n\n      Optional keys are:\n\n      - ``mean``: The mean (scalar float). Needed if\n        ``showmeans=True``.\n\n      - ``fliers``: Data beyond the whiskers (sequence of floats).\n        Needed if ``showfliers=True``.\n\n      - ``cilo`` & ``cihi``: Lower and upper confidence intervals\n        about the median. Needed if ``shownotches=True``.\n\n      - ``label``: Name of the dataset (string). If available,\n        this will be used a tick label for the boxplot\n\n    positions : array-like, default = [1, 2, ..., n]\n      Sets the positions of the boxes. The ticks and limits\n      are automatically set to match the positions.\n\n    widths : array-like, default = None\n      Either a scalar or a vector and sets the width of each\n      box. The default is ``0.15*(distance between extreme\n      positions)``, clipped to no less than 0.15 and no more than\n      0.5.\n\n    vert : bool, default = True\n      If `True` (default), makes the boxes vertical.  If `False`,\n      makes horizontal boxes.\n\n    patch_artist : bool, default = False\n      If `False` produces boxes with the `.Line2D` artist.\n      If `True` produces boxes with the `~matplotlib.patches.Patch` artist.\n\n    shownotches : bool, default = False\n      If `False` (default), produces a rectangular box plot.\n      If `True`, will produce a notched box plot\n\n    showmeans : bool, default = False\n      If `True`, will toggle on the rendering of the means\n\n    showcaps  : bool, default = True\n      If `True`, will toggle on the rendering of the caps\n\n    showbox  : bool, default = True\n      If `True`, will toggle on the rendering of the box\n\n    showfliers : bool, default = True\n      If `True`, will toggle on the rendering of the fliers\n\n    boxprops : dict or None (default)\n      If provided, will set the plotting style of the boxes\n\n    whiskerprops : dict or None (default)\n      If provided, will set the plotting style of the whiskers\n\n    capprops : dict or None (default)\n      If provided, will set the plotting style of the caps\n\n    flierprops : dict or None (default)\n      If provided will set the plotting style of the fliers\n\n    medianprops : dict or None (default)\n      If provided, will set the plotting style of the medians\n\n    meanprops : dict or None (default)\n      If provided, will set the plotting style of the means\n\n    meanline : bool, default = False\n      If `True` (and *showmeans* is `True`), will try to render the mean\n      as a line spanning the full width of the box according to\n      *meanprops*. Not recommended if *shownotches* is also True.\n      Otherwise, means will be shown as points.\n\n    manage_ticks : bool, default = True\n      If True, the tick locations and labels will be adjusted to match the\n      boxplot positions.\n\n    zorder : scalar, default = None\n      The zorder of the resulting boxplot.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the boxplot to a list\n      of the `.Line2D` instances created. That dictionary has the\n      following keys (assuming vertical boxplots):\n\n      - ``boxes``: the main body of the boxplot showing the\n        quartiles and the median's confidence intervals if\n        enabled.\n\n      - ``medians``: horizontal lines at the median of each box.\n\n      - ``whiskers``: the vertical lines extending to the most\n        extreme, non-outlier data points.\n\n      - ``caps``: the horizontal lines at the ends of the\n        whiskers.\n\n      - ``fliers``: points representing data that extend beyond\n        the whiskers (fliers).\n\n      - ``means``: points or lines representing the means.\n\n    Examples\n    --------\n    .. plot:: gallery/statistics/bxp.py\n\n    \"\"\"\n    # lists of artists to be output\n    whiskers = []\n    caps = []\n    boxes = []\n    medians = []\n    means = []\n    fliers = []\n\n    # empty list of xticklabels\n    datalabels = []\n\n    # Use default zorder if none specified\n    if zorder is None:\n        zorder = mlines.Line2D.zorder\n\n    zdelta = 0.1\n\n    def line_props_with_rcdefaults(subkey, explicit, zdelta=0):\n        d = {k.split('.')[-1]: v for k, v in rcParams.items()\n             if k.startswith(f'boxplot.{subkey}')}\n        d['zorder'] = zorder + zdelta\n        if explicit is not None:\n            d.update(\n                cbook.normalize_kwargs(explicit, mlines.Line2D._alias_map))\n        return d\n\n    # box properties\n    if patch_artist:\n        final_boxprops = dict(\n            linestyle=rcParams['boxplot.boxprops.linestyle'],\n            linewidth=rcParams['boxplot.boxprops.linewidth'],\n            edgecolor=rcParams['boxplot.boxprops.color'],\n            facecolor=('white' if rcParams['_internal.classic_mode'] else\n                       rcParams['patch.facecolor']),\n            zorder=zorder,\n        )\n        if boxprops is not None:\n            final_boxprops.update(\n                cbook.normalize_kwargs(\n                    boxprops, mpatches.PathPatch._alias_map))\n    else:\n        final_boxprops = line_props_with_rcdefaults('boxprops', boxprops)\n    final_whiskerprops = line_props_with_rcdefaults(\n        'whiskerprops', whiskerprops)\n    final_capprops = line_props_with_rcdefaults(\n        'capprops', capprops)\n    final_flierprops = line_props_with_rcdefaults(\n        'flierprops', flierprops)\n    final_medianprops = line_props_with_rcdefaults(\n        'medianprops', medianprops, zdelta)\n    final_meanprops = line_props_with_rcdefaults(\n        'meanprops', meanprops, zdelta)\n    removed_prop = 'marker' if meanline else 'linestyle'\n    # Only remove the property if it's not set explicitly as a parameter.\n    if meanprops is None or removed_prop not in meanprops:\n        final_meanprops[removed_prop] = ''\n\n    def to_vc(xs, ys):\n        # convert arguments to verts and codes, append (0, 0) (ignored).\n        verts = np.append(np.column_stack([xs, ys]), [(0, 0)], 0)\n        codes = ([mpath.Path.MOVETO]\n                 + [mpath.Path.LINETO] * (len(verts) - 2)\n                 + [mpath.Path.CLOSEPOLY])\n        return verts, codes\n\n    def patch_list(xs, ys, **kwargs):\n        verts, codes = to_vc(xs, ys)\n        path = mpath.Path(verts, codes)\n        patch = mpatches.PathPatch(path, **kwargs)\n        self.add_artist(patch)\n        return [patch]\n\n    # vertical or horizontal plot?\n    if vert:\n        def doplot(*args, **kwargs):\n            return self.plot(*args, **kwargs)\n\n        def dopatch(xs, ys, **kwargs):\n            return patch_list(xs, ys, **kwargs)\n\n    else:\n        def doplot(*args, **kwargs):\n            shuffled = []\n            for i in range(0, len(args), 2):\n                shuffled.extend([args[i + 1], args[i]])\n            return self.plot(*shuffled, **kwargs)\n\n        def dopatch(xs, ys, **kwargs):\n            xs, ys = ys, xs  # flip X, Y\n            return patch_list(xs, ys, **kwargs)\n\n    # input validation\n    N = len(bxpstats)\n    datashape_message = (\"List of boxplot statistics and `{0}` \"\n                         \"values must have same the length\")\n    # check position\n    if positions is None:\n        positions = list(range(1, N + 1))\n    elif len(positions) != N:\n        raise ValueError(datashape_message.format(\"positions\"))\n\n    positions = np.array(positions)\n    if len(positions) > 0 and not isinstance(positions[0], Number):\n        raise TypeError(\"positions should be an iterable of numbers\")\n\n    # width\n    if widths is None:\n        widths = [np.clip(0.15 * np.ptp(positions), 0.15, 0.5)] * N\n    elif np.isscalar(widths):\n        widths = [widths] * N\n    elif len(widths) != N:\n        raise ValueError(datashape_message.format(\"widths\"))\n\n    for pos, width, stats in zip(positions, widths, bxpstats):\n        # try to find a new label\n        datalabels.append(stats.get('label', pos))\n\n        # whisker coords\n        whisker_x = np.ones(2) * pos\n        whiskerlo_y = np.array([stats['q1'], stats['whislo']])\n        whiskerhi_y = np.array([stats['q3'], stats['whishi']])\n\n        # cap coords\n        cap_left = pos - width * 0.25\n        cap_right = pos + width * 0.25\n        cap_x = np.array([cap_left, cap_right])\n        cap_lo = np.ones(2) * stats['whislo']\n        cap_hi = np.ones(2) * stats['whishi']\n\n        # box and median coords\n        box_left = pos - width * 0.5\n        box_right = pos + width * 0.5\n        med_y = [stats['med'], stats['med']]\n\n        # notched boxes\n        if shownotches:\n            box_x = [box_left, box_right, box_right, cap_right, box_right,\n                     box_right, box_left, box_left, cap_left, box_left,\n                     box_left]\n            box_y = [stats['q1'], stats['q1'], stats['cilo'],\n                     stats['med'], stats['cihi'], stats['q3'],\n                     stats['q3'], stats['cihi'], stats['med'],\n                     stats['cilo'], stats['q1']]\n            med_x = cap_x\n\n        # plain boxes\n        else:\n            box_x = [box_left, box_right, box_right, box_left, box_left]\n            box_y = [stats['q1'], stats['q1'], stats['q3'], stats['q3'],\n                     stats['q1']]\n            med_x = [box_left, box_right]\n\n        # maybe draw the box:\n        if showbox:\n            if patch_artist:\n                boxes.extend(dopatch(box_x, box_y, **final_boxprops))\n            else:\n                boxes.extend(doplot(box_x, box_y, **final_boxprops))\n\n        # draw the whiskers\n        whiskers.extend(doplot(\n            whisker_x, whiskerlo_y, **final_whiskerprops\n        ))\n        whiskers.extend(doplot(\n            whisker_x, whiskerhi_y, **final_whiskerprops\n        ))\n\n        # maybe draw the caps:\n        if showcaps:\n            caps.extend(doplot(cap_x, cap_lo, **final_capprops))\n            caps.extend(doplot(cap_x, cap_hi, **final_capprops))\n\n        # draw the medians\n        medians.extend(doplot(med_x, med_y, **final_medianprops))\n\n        # maybe draw the means\n        if showmeans:\n            if meanline:\n                means.extend(doplot(\n                    [box_left, box_right], [stats['mean'], stats['mean']],\n                    **final_meanprops\n                ))\n            else:\n                means.extend(doplot(\n                    [pos], [stats['mean']], **final_meanprops\n                ))\n\n        # maybe draw the fliers\n        if showfliers:\n            # fliers coords\n            flier_x = np.full(len(stats['fliers']), pos, dtype=np.float64)\n            flier_y = stats['fliers']\n\n            fliers.extend(doplot(\n                flier_x, flier_y, **final_flierprops\n            ))\n\n    if manage_ticks:\n        axis_name = \"x\" if vert else \"y\"\n        interval = getattr(self.dataLim, f\"interval{axis_name}\")\n        axis = getattr(self, f\"{axis_name}axis\")\n        positions = axis.convert_units(positions)\n        # The 0.5 additional padding ensures reasonable-looking boxes\n        # even when drawing a single box.  We set the sticky edge to\n        # prevent margins expansion, in order to match old behavior (back\n        # when separate calls to boxplot() would completely reset the axis\n        # limits regardless of what was drawn before).  The sticky edges\n        # are attached to the median lines, as they are always present.\n        interval[:] = (min(interval[0], min(positions) - .5),\n                       max(interval[1], max(positions) + .5))\n        for median, position in zip(medians, positions):\n            getattr(median.sticky_edges, axis_name).extend(\n                [position - .5, position + .5])\n        # Modified from Axis.set_ticks and Axis.set_ticklabels.\n        locator = axis.get_major_locator()\n        if not isinstance(axis.get_major_locator(),\n                          mticker.FixedLocator):\n            locator = mticker.FixedLocator([])\n            axis.set_major_locator(locator)\n        locator.locs = np.array([*locator.locs, *positions])\n        formatter = axis.get_major_formatter()\n        if not isinstance(axis.get_major_formatter(),\n                          mticker.FixedFormatter):\n            formatter = mticker.FixedFormatter([])\n            axis.set_major_formatter(formatter)\n        formatter.seq = [*formatter.seq, *datalabels]\n\n        self._request_autoscale_view(\n            scalex=self._autoscaleXon, scaley=self._autoscaleYon)\n\n    return dict(whiskers=whiskers, caps=caps, boxes=boxes,\n                medians=medians, fliers=fliers, means=means)",
                                "signature": "bxp(self, bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None)"
                            },
                            {
                                "code": "@staticmethod\ndef _parse_scatter_color_args(c, edgecolors, kwargs, xsize,\n                              get_next_color_func):\n    \"\"\"\n    Helper function to process color related arguments of `.Axes.scatter`.\n\n    Argument precedence for facecolors:\n\n    - c (if not None)\n    - kwargs['facecolors']\n    - kwargs['facecolor']\n    - kwargs['color'] (==kwcolor)\n    - 'b' if in classic mode else the result of ``get_next_color_func()``\n\n    Argument precedence for edgecolors:\n\n    - edgecolors (is an explicit kw argument in scatter())\n    - kwargs['edgecolor']\n    - kwargs['color'] (==kwcolor)\n    - 'face' if not in classic mode else None\n\n    Parameters\n    ----------\n    c : color or sequence or sequence of color or None\n        See argument description of `.Axes.scatter`.\n    edgecolors : color or sequence of color or {'face', 'none'} or None\n        See argument description of `.Axes.scatter`.\n    kwargs : dict\n        Additional kwargs. If these keys exist, we pop and process them:\n        'facecolors', 'facecolor', 'edgecolor', 'color'\n        Note: The dict is modified by this function.\n    xsize : int\n        The size of the x and y arrays passed to `.Axes.scatter`.\n    get_next_color_func : callable\n        A callable that returns a color. This color is used as facecolor\n        if no other color is provided.\n\n        Note, that this is a function rather than a fixed color value to\n        support conditional evaluation of the next color.  As of the\n        current implementation obtaining the next color from the\n        property cycle advances the cycle. This must only happen if we\n        actually use the color, which will only be decided within this\n        method.\n\n    Returns\n    -------\n    c\n        The input *c* if it was not *None*, else a color derived from the\n        other inputs or defaults.\n    colors : array(N, 4) or None\n        The facecolors as RGBA values, or *None* if a colormap is used.\n    edgecolors\n        The edgecolor.\n\n    \"\"\"\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n\n    kwcolor = kwargs.pop('color', None)\n\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color'\"\n                         \" kwarg but not both; they differ but\"\n                         \" their functionalities overlap.\")\n\n    if kwcolor is not None:\n        try:\n            mcolors.to_rgba_array(kwcolor)\n        except ValueError:\n            raise ValueError(\n                \"'color' kwarg must be an color or sequence of color \"\n                \"specs.  For a sequence of values to be color-mapped, use \"\n                \"the 'c' argument instead.\")\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n\n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']\n\n    c_was_none = c is None\n    if c is None:\n        c = (facecolors if facecolors is not None\n             else \"b\" if rcParams['_internal.classic_mode']\n             else get_next_color_func())\n    c_is_string_or_strings = (\n        isinstance(c, str)\n        or (isinstance(c, collections.abc.Iterable) and len(c) > 0\n            and isinstance(cbook.safe_first_element(c), str)))\n\n    def invalid_shape_exception(csize, xsize):\n        return ValueError(\n            f\"'c' argument has {csize} elements, which is inconsistent \"\n            f\"with 'x' and 'y' with size {xsize}.\")\n\n    c_is_mapped = False  # Unless proven otherwise below.\n    valid_shape = True  # Unless proven otherwise below.\n    if not c_was_none and kwcolor is None and not c_is_string_or_strings:\n        try:  # First, does 'c' look suitable for value-mapping?\n            c = np.asanyarray(c, dtype=float)\n        except ValueError:\n            pass  # Failed to convert to float array; must be color specs.\n        else:\n            # If c can be either mapped values or a RGB(A) color, prefer\n            # the former if shapes match, the latter otherwise.\n            if c.size == xsize:\n                c = c.ravel()\n                c_is_mapped = True\n            else:  # Wrong size; it must not be intended for mapping.\n                if c.shape in ((3,), (4,)):\n                    _log.warning(\n                        \"'c' argument looks like a single numeric RGB or \"\n                        \"RGBA sequence, which should be avoided as value-\"\n                        \"mapping will have precedence in case its length \"\n                        \"matches with 'x' & 'y'.  Please use a 2-D array \"\n                        \"with a single row if you really want to specify \"\n                        \"the same RGB or RGBA value for all points.\")\n                valid_shape = False\n    if not c_is_mapped:\n        try:  # Is 'c' acceptable as PathCollection facecolors?\n            colors = mcolors.to_rgba_array(c)\n        except ValueError:\n            if not valid_shape:\n                raise invalid_shape_exception(c.size, xsize)\n            # Both the mapping *and* the RGBA conversion failed: pretty\n            # severe failure => one may appreciate a verbose feedback.\n            raise ValueError(\n                f\"'c' argument must be a color, a sequence of colors, or \"\n                f\"a sequence of numbers, not {c}\")\n        else:\n            if len(colors) not in (0, 1, xsize):\n                # NB: remember that a single color is also acceptable.\n                # Besides *colors* will be an empty array if c == 'none'.\n                raise invalid_shape_exception(len(colors), xsize)\n    else:\n        colors = None  # use cmap, norm after collection is created\n    return c, colors, edgecolors",
                                "signature": "_parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func)"
                            },
                            {
                                "code": "    @_preprocess_data(replace_names=[\"x\", \"y\", \"s\", \"linewidths\",\n                                     \"edgecolors\", \"c\", \"facecolor\",\n                                     \"facecolors\", \"color\"],\n                      label_namer=\"y\")\n    @cbook._delete_parameter(\"3.2\", \"verts\")\n    def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                vmin=None, vmax=None, alpha=None, linewidths=None,\n                verts=None, edgecolors=None, *, plotnonfinite=False,\n                **kwargs):\n        \"\"\"\n        A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\n        Parameters\n        ----------\n        x, y : scalar or array-like, shape (n, )\n            The data positions.\n\n        s : scalar or array-like, shape (n, ), optional\n            The marker size in points**2.\n            Default is ``rcParams['lines.markersize'] ** 2``.\n\n        c : color, sequence, or sequence of colors, optional\n            The marker color. Possible values:\n\n            - A single color format string.\n            - A sequence of colors of length n.\n            - A scalar or sequence of n numbers to be mapped to colors using\n              *cmap* and *norm*.\n            - A 2-D array in which the rows are RGB or RGBA.\n\n            Note that *c* should not be a single numeric RGB or RGBA sequence\n            because that is indistinguishable from an array of values to be\n            colormapped. If you want to specify the same RGB or RGBA value for\n            all points, use a 2-D array with a single row.  Otherwise, value-\n            matching will have precedence in case of a size matching with *x*\n            and *y*.\n\n            Defaults to ``None``. In that case the marker color is determined\n            by the value of ``color``, ``facecolor`` or ``facecolors``. In case\n            those are not specified or ``None``, the marker color is determined\n            by the next color of the ``Axes``' current \"shape and fill\" color\n            cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n\n        marker : `~matplotlib.markers.MarkerStyle`, optional\n            The marker style. *marker* can be either an instance of the class\n            or the text shorthand for a particular marker.\n            Defaults to ``None``, in which case it takes the value of\n            :rc:`scatter.marker` = 'o'.\n            See `~matplotlib.markers` for more information about marker styles.\n\n        cmap : `~matplotlib.colors.Colormap`, optional, default: None\n            A `.Colormap` instance or registered colormap name. *cmap* is only\n            used if *c* is an array of floats. If ``None``, defaults to rc\n            ``image.cmap``.\n\n        norm : `~matplotlib.colors.Normalize`, optional, default: None\n            A `.Normalize` instance is used to scale luminance data to 0, 1.\n            *norm* is only used if *c* is an array of floats. If *None*, use\n            the default `.colors.Normalize`.\n\n        vmin, vmax : scalar, optional, default: None\n            *vmin* and *vmax* are used in conjunction with *norm* to normalize\n            luminance data. If None, the respective min and max of the color\n            array is used. *vmin* and *vmax* are ignored if you pass a *norm*\n            instance.\n\n        alpha : scalar, optional, default: None\n            The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n        linewidths : scalar or array-like, optional, default: None\n            The linewidth of the marker edges. Note: The default *edgecolors*\n            is 'face'. You may want to change this as well.\n            If *None*, defaults to :rc:`lines.linewidth`.\n\n        edgecolors : {'face', 'none', *None*} or color or sequence of color, \\\noptional.\n            The edge color of the marker. Possible values:\n\n            - 'face': The edge color will always be the same as the face color.\n            - 'none': No patch boundary will be drawn.\n            - A Matplotlib color or sequence of color.\n\n            Defaults to ``None``, in which case it takes the value of\n            :rc:`scatter.edgecolors` = 'face'.\n\n            For non-filled markers, the *edgecolors* kwarg is ignored and\n            forced to 'face' internally.\n\n        plotnonfinite : boolean, optional, default: False\n            Set to plot points with nonfinite *c*, in conjunction with\n            `~matplotlib.colors.Colormap.set_bad`.\n\n        Returns\n        -------\n        paths : `~matplotlib.collections.PathCollection`\n\n        Other Parameters\n        ----------------\n        **kwargs : `~matplotlib.collections.Collection` properties\n\n        See Also\n        --------\n        plot : To plot scatter plots when markers are identical in size and\n            color.\n\n        Notes\n        -----\n        * The `.plot` function will be faster for scatterplots where markers\n          don't vary in size or color.\n\n        * Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n          case all masks will be combined and only unmasked points will be\n          plotted.\n\n        * Fundamentally, scatter works with 1-D arrays; *x*, *y*, *s*, and *c*\n          may be input as N-D arrays, but within scatter they will be\n          flattened. The exception is *c*, which will be flattened only if its\n          size matches the size of *x* and *y*.\n\n        \"\"\"\n        # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n\n        self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n        x = self.convert_xunits(x)\n        y = self.convert_yunits(y)\n\n        # np.ma.ravel yields an ndarray, not a masked array,\n        # unless its argument is a masked array.\n        x = np.ma.ravel(x)\n        y = np.ma.ravel(y)\n        if x.size != y.size:\n            raise ValueError(\"x and y must be the same size\")\n\n        if s is None:\n            s = (20 if rcParams['_internal.classic_mode'] else\n                 rcParams['lines.markersize'] ** 2.0)\n        s = np.ma.ravel(s)\n        if len(s) not in (1, x.size):\n            raise ValueError(\"s must be a scalar, or the same size as x and y\")\n\n        c, colors, edgecolors = \\\n            self._parse_scatter_color_args(\n                c, edgecolors, kwargs, x.size,\n                get_next_color_func=self._get_patches_for_fill.get_next_color)\n\n        if plotnonfinite and colors is None:\n            c = np.ma.masked_invalid(c)\n            x, y, s, edgecolors, linewidths = \\\n                cbook._combine_masks(x, y, s, edgecolors, linewidths)\n        else:\n            x, y, s, c, colors, edgecolors, linewidths = \\\n                cbook._combine_masks(\n                    x, y, s, c, colors, edgecolors, linewidths)\n\n        scales = s   # Renamed for readability below.\n\n        # load default marker from rcParams\n        if marker is None:\n            marker = rcParams['scatter.marker']\n\n        if isinstance(marker, mmarkers.MarkerStyle):\n            marker_obj = marker\n        else:\n            marker_obj = mmarkers.MarkerStyle(marker)\n\n        path = marker_obj.get_path().transformed(\n            marker_obj.get_transform())\n        if not marker_obj.is_filled():\n            edgecolors = 'face'\n            linewidths = rcParams['lines.linewidth']\n\n        offsets = np.ma.column_stack([x, y])\n\n        collection = mcoll.PathCollection(\n                (path,), scales,\n                facecolors=colors,\n                edgecolors=edgecolors,\n                linewidths=linewidths,\n                offsets=offsets,\n                transOffset=kwargs.pop('transform', self.transData),\n                alpha=alpha\n                )\n        collection.set_transform(mtransforms.IdentityTransform())\n        collection.update(kwargs)\n\n        if colors is None:\n            collection.set_array(c)\n            collection.set_cmap(cmap)\n            collection.set_norm(norm)\n\n            if vmin is not None or vmax is not None:\n                collection.set_clim(vmin, vmax)\n            else:\n                collection.autoscale_None()\n\n        # Classic mode only:\n        # ensure there are margins to allow for the\n        # finite size of the symbols.  In v2.x, margins\n        # are present by default, so we disable this\n        # scatter-specific override.\n        if rcParams['_internal.classic_mode']:\n            if self._xmargin < 0.05 and x.size > 0:\n                self.set_xmargin(0.05)\n            if self._ymargin < 0.05 and x.size > 0:\n                self.set_ymargin(0.05)\n\n        self.add_collection(collection)\n        self._request_autoscale_view()\n\n        return collection",
                                "signature": "scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\"], label_namer=\"y\")\n@docstring.dedent_interpd\ndef hexbin(self, x, y, C=None, gridsize=100, bins=None,\n           xscale='linear', yscale='linear', extent=None,\n           cmap=None, norm=None, vmin=None, vmax=None,\n           alpha=None, linewidths=None, edgecolors='face',\n           reduce_C_function=np.mean, mincnt=None, marginals=False,\n           **kwargs):\n    \"\"\"\n    Make a 2D hexagonal binning plot of points *x*, *y*.\n\n    If *C* is *None*, the value of the hexagon is determined by the number\n    of points in the hexagon. Otherwise, *C* specifies values at the\n    coordinate (x[i], y[i]). For each hexagon, these values are reduced\n    using *reduce_C_function*.\n\n    Parameters\n    ----------\n    x, y : array-like\n        The data positions. *x* and *y* must be of the same length.\n\n    C : array-like, optional\n        If given, these values are accumulated in the bins. Otherwise,\n        every point has a value of 1. Must be of the same length as *x*\n        and *y*.\n\n    gridsize : int or (int, int), default: 100\n        If a single int, the number of hexagons in the *x*-direction.\n        The number of hexagons in the *y*-direction is chosen such that\n        the hexagons are approximately regular.\n\n        Alternatively, if a tuple (*nx*, *ny*), the number of hexagons\n        in the *x*-direction and the *y*-direction.\n\n    bins : 'log' or int or sequence, default: *None*\n        Discretization of the hexagon values.\n\n        - If *None*, no binning is applied; the color of each hexagon\n          directly corresponds to its count value.\n        - If 'log', use a logarithmic scale for the color map.\n          Internally, :math:`log_{10}(i+1)` is used to determine the\n          hexagon color. This is equivalent to ``norm=LogNorm()``.\n        - If an integer, divide the counts in the specified number\n          of bins, and color the hexagons accordingly.\n        - If a sequence of values, the values of the lower bound of\n          the bins to be used.\n\n    xscale : {'linear', 'log'}, default: 'linear'\n        Use a linear or log10 scale on the horizontal axis.\n\n    yscale : {'linear', 'log'}, default: 'linear'\n        Use a linear or log10 scale on the vertical axis.\n\n    mincnt : int > 0, default: *None*\n        If not *None*, only display cells with more than *mincnt*\n        number of points in the cell.\n\n    marginals : bool, default: *False*\n        If marginals is *True*, plot the marginal density as\n        colormapped rectangles along the bottom of the x-axis and\n        left of the y-axis.\n\n    extent : float, default: *None*\n        The limits of the bins. The default assigns the limits\n        based on *gridsize*, *x*, *y*, *xscale* and *yscale*.\n\n        If *xscale* or *yscale* is set to 'log', the limits are\n        expected to be the exponent for a power of 10. E.g. for\n        x-limits of 1 and 50 in 'linear' scale and y-limits\n        of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\n        Order of scalars is (left, right, bottom, top).\n\n    Other Parameters\n    ----------------\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        The Colormap instance or registered colormap name used to map\n        the bin values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the bin values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : float, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of the bins in case of the default\n        linear scaling). This is ignored if *norm* is given.\n\n    alpha : float between 0 and 1, optional\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    linewidths : float, default: *None*\n        If *None*, defaults to 1.0.\n\n    edgecolors : {'face', 'none', *None*} or color, default: 'face'\n        The color of the hexagon edges. Possible values are:\n\n        - 'face': Draw the edges in the same color as the fill color.\n        - 'none': No edges are drawn. This can sometimes lead to unsightly\n          unpainted pixels between the hexagons.\n        - *None*: Draw outlines in the default color.\n        - An explicit matplotlib color.\n\n    reduce_C_function : callable, default is `numpy.mean`\n        The function to aggregate *C* within the bins. It is ignored if\n        *C* is not given. This must have the signature::\n\n            def reduce_C_function(C: array) -> float\n\n        Commonly used functions are:\n\n        - `numpy.mean`: average of the points\n        - `numpy.sum`: integral of the point values\n        - `numpy.max`: value taken from the largest point\n\n    **kwargs : `~matplotlib.collections.PolyCollection` properties\n        All other keyword arguments are passed on to `.PolyCollection`:\n\n        %(PolyCollection)s\n\n    Returns\n    -------\n    polycollection : `~matplotlib.collections.PolyCollection`\n        A `.PolyCollection` defining the hexagonal bins.\n\n        - `.PolyCollection.get_offset` contains a Mx2 array containing\n          the x, y positions of the M hexagon centers.\n        - `.PolyCollection.get_array` contains the values of the M\n          hexagons.\n\n        If *marginals* is *True*, horizontal\n        bar and vertical bar (both PolyCollections) will be attached\n        to the return collection as attributes *hbar* and *vbar*.\n\n    \"\"\"\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n\n    x, y, C = cbook.delete_masked_points(x, y, C)\n\n    # Set the size of the hexagon grid\n    if np.iterable(gridsize):\n        nx, ny = gridsize\n    else:\n        nx = gridsize\n        ny = int(nx / math.sqrt(3))\n    # Count the number of data in each hexagon\n    x = np.array(x, float)\n    y = np.array(y, float)\n    if xscale == 'log':\n        if np.any(x <= 0.0):\n            raise ValueError(\"x contains non-positive values, so can not\"\n                             \" be log-scaled\")\n        x = np.log10(x)\n    if yscale == 'log':\n        if np.any(y <= 0.0):\n            raise ValueError(\"y contains non-positive values, so can not\"\n                             \" be log-scaled\")\n        y = np.log10(y)\n    if extent is not None:\n        xmin, xmax, ymin, ymax = extent\n    else:\n        xmin, xmax = (np.min(x), np.max(x)) if len(x) else (0, 1)\n        ymin, ymax = (np.min(y), np.max(y)) if len(y) else (0, 1)\n\n        # to avoid issues with singular data, expand the min/max pairs\n        xmin, xmax = mtransforms.nonsingular(xmin, xmax, expander=0.1)\n        ymin, ymax = mtransforms.nonsingular(ymin, ymax, expander=0.1)\n\n    # In the x-direction, the hexagons exactly cover the region from\n    # xmin to xmax. Need some padding to avoid roundoff errors.\n    padding = 1.e-9 * (xmax - xmin)\n    xmin -= padding\n    xmax += padding\n    sx = (xmax - xmin) / nx\n    sy = (ymax - ymin) / ny\n\n    if marginals:\n        xorig = x.copy()\n        yorig = y.copy()\n\n    x = (x - xmin) / sx\n    y = (y - ymin) / sy\n    ix1 = np.round(x).astype(int)\n    iy1 = np.round(y).astype(int)\n    ix2 = np.floor(x).astype(int)\n    iy2 = np.floor(y).astype(int)\n\n    nx1 = nx + 1\n    ny1 = ny + 1\n    nx2 = nx\n    ny2 = ny\n    n = nx1 * ny1 + nx2 * ny2\n\n    d1 = (x - ix1) ** 2 + 3.0 * (y - iy1) ** 2\n    d2 = (x - ix2 - 0.5) ** 2 + 3.0 * (y - iy2 - 0.5) ** 2\n    bdist = (d1 < d2)\n    if C is None:\n        lattice1 = np.zeros((nx1, ny1))\n        lattice2 = np.zeros((nx2, ny2))\n        c1 = (0 <= ix1) & (ix1 < nx1) & (0 <= iy1) & (iy1 < ny1) & bdist\n        c2 = (0 <= ix2) & (ix2 < nx2) & (0 <= iy2) & (iy2 < ny2) & ~bdist\n        np.add.at(lattice1, (ix1[c1], iy1[c1]), 1)\n        np.add.at(lattice2, (ix2[c2], iy2[c2]), 1)\n        if mincnt is not None:\n            lattice1[lattice1 < mincnt] = np.nan\n            lattice2[lattice2 < mincnt] = np.nan\n        accum = np.concatenate([lattice1.ravel(), lattice2.ravel()])\n        good_idxs = ~np.isnan(accum)\n\n    else:\n        if mincnt is None:\n            mincnt = 0\n\n        # create accumulation arrays\n        lattice1 = np.empty((nx1, ny1), dtype=object)\n        for i in range(nx1):\n            for j in range(ny1):\n                lattice1[i, j] = []\n        lattice2 = np.empty((nx2, ny2), dtype=object)\n        for i in range(nx2):\n            for j in range(ny2):\n                lattice2[i, j] = []\n\n        for i in range(len(x)):\n            if bdist[i]:\n                if 0 <= ix1[i] < nx1 and 0 <= iy1[i] < ny1:\n                    lattice1[ix1[i], iy1[i]].append(C[i])\n            else:\n                if 0 <= ix2[i] < nx2 and 0 <= iy2[i] < ny2:\n                    lattice2[ix2[i], iy2[i]].append(C[i])\n\n        for i in range(nx1):\n            for j in range(ny1):\n                vals = lattice1[i, j]\n                if len(vals) > mincnt:\n                    lattice1[i, j] = reduce_C_function(vals)\n                else:\n                    lattice1[i, j] = np.nan\n        for i in range(nx2):\n            for j in range(ny2):\n                vals = lattice2[i, j]\n                if len(vals) > mincnt:\n                    lattice2[i, j] = reduce_C_function(vals)\n                else:\n                    lattice2[i, j] = np.nan\n\n        accum = np.hstack((lattice1.astype(float).ravel(),\n                           lattice2.astype(float).ravel()))\n        good_idxs = ~np.isnan(accum)\n\n    offsets = np.zeros((n, 2), float)\n    offsets[:nx1 * ny1, 0] = np.repeat(np.arange(nx1), ny1)\n    offsets[:nx1 * ny1, 1] = np.tile(np.arange(ny1), nx1)\n    offsets[nx1 * ny1:, 0] = np.repeat(np.arange(nx2) + 0.5, ny2)\n    offsets[nx1 * ny1:, 1] = np.tile(np.arange(ny2), nx2) + 0.5\n    offsets[:, 0] *= sx\n    offsets[:, 1] *= sy\n    offsets[:, 0] += xmin\n    offsets[:, 1] += ymin\n    # remove accumulation bins with no data\n    offsets = offsets[good_idxs, :]\n    accum = accum[good_idxs]\n\n    polygon = [sx, sy / 3] * np.array(\n        [[.5, -.5], [.5, .5], [0., 1.], [-.5, .5], [-.5, -.5], [0., -1.]])\n\n    if linewidths is None:\n        linewidths = [1.0]\n\n    if xscale == 'log' or yscale == 'log':\n        polygons = np.expand_dims(polygon, 0) + np.expand_dims(offsets, 1)\n        if xscale == 'log':\n            polygons[:, :, 0] = 10.0 ** polygons[:, :, 0]\n            xmin = 10.0 ** xmin\n            xmax = 10.0 ** xmax\n            self.set_xscale(xscale)\n        if yscale == 'log':\n            polygons[:, :, 1] = 10.0 ** polygons[:, :, 1]\n            ymin = 10.0 ** ymin\n            ymax = 10.0 ** ymax\n            self.set_yscale(yscale)\n        collection = mcoll.PolyCollection(\n            polygons,\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            )\n    else:\n        collection = mcoll.PolyCollection(\n            [polygon],\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            offsets=offsets,\n            transOffset=mtransforms.IdentityTransform(),\n            offset_position=\"data\"\n            )\n\n    # Set normalizer if bins is 'log'\n    if bins == 'log':\n        if norm is not None:\n            cbook._warn_external(\"Only one of 'bins' and 'norm' \"\n                                 \"arguments can be supplied, ignoring \"\n                                 \"bins={}\".format(bins))\n        else:\n            norm = mcolors.LogNorm()\n        bins = None\n\n    if isinstance(norm, mcolors.LogNorm):\n        if (accum == 0).any():\n            # make sure we have no zeros\n            accum += 1\n\n    # autoscale the norm with curren accum values if it hasn't\n    # been set\n    if norm is not None:\n        if norm.vmin is None and norm.vmax is None:\n            norm.autoscale(accum)\n\n    if bins is not None:\n        if not np.iterable(bins):\n            minimum, maximum = min(accum), max(accum)\n            bins -= 1  # one less edge than bins\n            bins = minimum + (maximum - minimum) * np.arange(bins) / bins\n        bins = np.sort(bins)\n        accum = bins.searchsorted(accum)\n\n    collection.set_array(accum)\n    collection.set_cmap(cmap)\n    collection.set_norm(norm)\n    collection.set_alpha(alpha)\n    collection.update(kwargs)\n\n    if vmin is not None or vmax is not None:\n        collection.set_clim(vmin, vmax)\n    else:\n        collection.autoscale_None()\n\n    corners = ((xmin, ymin), (xmax, ymax))\n    self.update_datalim(corners)\n    self._request_autoscale_view(tight=True)\n\n    # add the collection last\n    self.add_collection(collection, autolim=False)\n    if not marginals:\n        return collection\n\n    if C is None:\n        C = np.ones(len(x))\n\n    def coarse_bin(x, y, coarse):\n        ind = coarse.searchsorted(x).clip(0, len(coarse) - 1)\n        mus = np.zeros(len(coarse))\n        for i in range(len(coarse)):\n            yi = y[ind == i]\n            if len(yi) > 0:\n                mu = reduce_C_function(yi)\n            else:\n                mu = np.nan\n            mus[i] = mu\n        return mus\n\n    coarse = np.linspace(xmin, xmax, gridsize)\n\n    xcoarse = coarse_bin(xorig, C, coarse)\n    valid = ~np.isnan(xcoarse)\n    verts, values = [], []\n    for i, val in enumerate(xcoarse):\n        thismin = coarse[i]\n        if i < len(coarse) - 1:\n            thismax = coarse[i + 1]\n        else:\n            thismax = thismin + np.diff(coarse)[-1]\n\n        if not valid[i]:\n            continue\n\n        verts.append([(thismin, 0),\n                      (thismin, 0.05),\n                      (thismax, 0.05),\n                      (thismax, 0)])\n        values.append(val)\n\n    values = np.array(values)\n    trans = self.get_xaxis_transform(which='grid')\n\n    hbar = mcoll.PolyCollection(verts, transform=trans, edgecolors='face')\n\n    hbar.set_array(values)\n    hbar.set_cmap(cmap)\n    hbar.set_norm(norm)\n    hbar.set_alpha(alpha)\n    hbar.update(kwargs)\n    self.add_collection(hbar, autolim=False)\n\n    coarse = np.linspace(ymin, ymax, gridsize)\n    ycoarse = coarse_bin(yorig, C, coarse)\n    valid = ~np.isnan(ycoarse)\n    verts, values = [], []\n    for i, val in enumerate(ycoarse):\n        thismin = coarse[i]\n        if i < len(coarse) - 1:\n            thismax = coarse[i + 1]\n        else:\n            thismax = thismin + np.diff(coarse)[-1]\n        if not valid[i]:\n            continue\n        verts.append([(0, thismin), (0.0, thismax),\n                      (0.05, thismax), (0.05, thismin)])\n        values.append(val)\n\n    values = np.array(values)\n\n    trans = self.get_yaxis_transform(which='grid')\n\n    vbar = mcoll.PolyCollection(verts, transform=trans, edgecolors='face')\n    vbar.set_array(values)\n    vbar.set_cmap(cmap)\n    vbar.set_norm(norm)\n    vbar.set_alpha(alpha)\n    vbar.update(kwargs)\n    self.add_collection(vbar, autolim=False)\n\n    collection.hbar = hbar\n    collection.vbar = vbar\n\n    def on_changed(collection):\n        hbar.set_cmap(collection.get_cmap())\n        hbar.set_clim(collection.get_clim())\n        vbar.set_cmap(collection.get_cmap())\n        vbar.set_clim(collection.get_clim())\n\n    collection.callbacksSM.connect('changed', on_changed)\n\n    return collection",
                                "signature": "hexbin(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=np.mean, mincnt=None, marginals=False, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef arrow(self, x, y, dx, dy, **kwargs):\n    \"\"\"\n    Add an arrow to the axes.\n\n    This draws an arrow from ``(x, y)`` to ``(x+dx, y+dy)``.\n\n    Parameters\n    ----------\n    x, y : float\n        The x and y coordinates of the arrow base.\n    dx, dy : float\n        The length of the arrow along x and y direction.\n\n    Returns\n    -------\n    arrow : `.FancyArrow`\n        The created `.FancyArrow` object.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Optional kwargs (inherited from `.FancyArrow` patch) control the\n        arrow construction and properties:\n\n    %(FancyArrow)s\n\n    Notes\n    -----\n    The resulting arrow is affected by the axes aspect ratio and limits.\n    This may produce an arrow whose head is not square with its stem. To\n    create an arrow whose head is square with its stem,\n    use :meth:`annotate` for example:\n\n    >>> ax.annotate(\"\", xy=(0.5, 0.5), xytext=(0, 0),\n    ...             arrowprops=dict(arrowstyle=\"->\"))\n\n    \"\"\"\n    # Strip away units for the underlying patch since units\n    # do not make sense to most patch-like code\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    dx = self.convert_xunits(dx)\n    dy = self.convert_yunits(dy)\n\n    a = mpatches.FancyArrow(x, y, dx, dy, **kwargs)\n    self.add_artist(a)\n    return a",
                                "signature": "arrow(self, x, y, dx, dy, **kwargs)"
                            },
                            {
                                "code": "@docstring.copy(mquiver.QuiverKey.__init__)\ndef quiverkey(self, Q, X, Y, U, label, **kw):\n    qk = mquiver.QuiverKey(Q, X, Y, U, label, **kw)\n    self.add_artist(qk)\n    return qk",
                                "signature": "quiverkey(self, Q, X, Y, U, label, **kw)"
                            },
                            {
                                "code": "def _quiver_units(self, args, kw):\n    if len(args) > 3:\n        x, y = args[0:2]\n        self._process_unit_info(xdata=x, ydata=y, kwargs=kw)\n        x = self.convert_xunits(x)\n        y = self.convert_yunits(y)\n        return (x, y) + args[2:]\n    return args",
                                "signature": "_quiver_units(self, args, kw)"
                            },
                            {
                                "code": "@_preprocess_data()\ndef quiver(self, *args, **kw):\n    # Make sure units are handled for x and y values\n    args = self._quiver_units(args, kw)\n\n    q = mquiver.Quiver(self, *args, **kw)\n\n    self.add_collection(q, autolim=True)\n    self._request_autoscale_view()\n    return q",
                                "signature": "quiver(self, *args, **kw)"
                            },
                            {
                                "code": "@_preprocess_data()\n@docstring.dedent_interpd\ndef barbs(self, *args, **kw):\n    \"\"\"\n    %(barbs_doc)s\n    \"\"\"\n    # Make sure units are handled for x and y values\n    args = self._quiver_units(args, kw)\n\n    b = mquiver.Barbs(self, *args, **kw)\n    self.add_collection(b, autolim=True)\n    self._request_autoscale_view()\n    return b",
                                "signature": "barbs(self, *args, **kw)"
                            },
                            {
                                "code": "def fill(self, *args, data=None, **kwargs):\n    \"\"\"\n    Plot filled polygons.\n\n    Parameters\n    ----------\n    *args : sequence of x, y, [color]\n        Each polygon is defined by the lists of *x* and *y* positions of\n        its nodes, optionally followed by a *color* specifier. See\n        :mod:`matplotlib.colors` for supported color specifiers. The\n        standard color cycle is used for polygons without a color\n        specifier.\n\n        You can plot multiple polygons by providing multiple *x*, *y*,\n        *[color]* groups.\n\n        For example, each of the following is legal::\n\n            ax.fill(x, y)                    # a polygon with default color\n            ax.fill(x, y, \"b\")               # a blue polygon\n            ax.fill(x, y, x2, y2)            # two polygons\n            ax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n\n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*, e.g.::\n\n            ax.fill(\"time\", \"signal\",\n                    data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n\n    Returns\n    -------\n    a list of :class:`~matplotlib.patches.Polygon`\n\n    Other Parameters\n    ----------------\n    **kwargs : :class:`~matplotlib.patches.Polygon` properties\n\n    Notes\n    -----\n    Use :meth:`fill_between` if you would like to fill the region between\n    two curves.\n    \"\"\"\n    # For compatibility(!), get aliases from Line2D rather than Patch.\n    kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n    # _get_patches_for_fill returns a generator, convert it to a list.\n    patches = [*self._get_patches_for_fill(*args, data=data, **kwargs)]\n    for poly in patches:\n        self.add_patch(poly)\n    self._request_autoscale_view()\n    return patches",
                                "signature": "fill(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y1\", \"y2\", \"where\"])\n@docstring.dedent_interpd\ndef fill_between(self, x, y1, y2=0, where=None, interpolate=False,\n                 step=None, **kwargs):\n    \"\"\"\n    Fill the area between two horizontal curves.\n\n    The curves are defined by the points (*x*, *y1*) and (*x*, *y2*). This\n    creates one or multiple polygons describing the filled area.\n\n    You may exclude some horizontal sections from filling using *where*.\n\n    By default, the edges connect the given points directly. Use *step* if\n    the filling should be a step function, i.e. constant in between *x*.\n\n\n    Parameters\n    ----------\n    x : array (length N)\n        The x coordinates of the nodes defining the curves.\n\n    y1 : array (length N) or scalar\n        The y coordinates of the nodes defining the first curve.\n\n    y2 : array (length N) or scalar, optional, default: 0\n        The y coordinates of the nodes defining the second curve.\n\n    where : array of bool (length N), optional, default: None\n        Define *where* to exclude some horizontal regions from being\n        filled. The filled regions are defined by the coordinates\n        ``x[where]``.  More precisely, fill between ``x[i]`` and ``x[i+1]``\n        if ``where[i] and where[i+1]``.  Note that this definition implies\n        that an isolated *True* value between two *False* values in\n        *where* will not result in filling.  Both sides of the *True*\n        position remain unfilled due to the adjacent *False* values.\n\n    interpolate : bool, optional\n        This option is only relevant if *where* is used and the two curves\n        are crossing each other.\n\n        Semantically, *where* is often used for *y1* > *y2* or similar.\n        By default, the nodes of the polygon defining the filled region\n        will only be placed at the positions in the *x* array.  Such a\n        polygon cannot describe the above semantics close to the\n        intersection.  The x-sections containing the intersection are\n        simply clipped.\n\n        Setting *interpolate* to *True* will calculate the actual\n        intersection point and extend the filled region up to this point.\n\n    step : {'pre', 'post', 'mid'}, optional\n        Define *step* if the filling should be a step function,\n        i.e. constant in between *x*. The value determines where the\n        step will occur:\n\n        - 'pre': The y value is continued constantly to the left from\n          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n          value ``y[i]``.\n        - 'post': The y value is continued constantly to the right from\n          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n          value ``y[i]``.\n        - 'mid': Steps occur half-way between the *x* positions.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All other keyword arguments are passed on to `.PolyCollection`.\n        They control the `.Polygon` properties:\n\n        %(PolyCollection)s\n\n    Returns\n    -------\n    `.PolyCollection`\n        A `.PolyCollection` containing the plotted polygons.\n\n    See Also\n    --------\n    fill_betweenx : Fill between two sets of x-values.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n\n    \"\"\"\n    if not rcParams['_internal.classic_mode']:\n        kwargs = cbook.normalize_kwargs(kwargs, mcoll.Collection)\n        if not any(c in kwargs for c in ('color', 'facecolor')):\n            kwargs['facecolor'] = \\\n                self._get_patches_for_fill.get_next_color()\n\n    # Handle united data, such as dates\n    self._process_unit_info(xdata=x, ydata=y1, kwargs=kwargs)\n    self._process_unit_info(ydata=y2)\n\n    # Convert the arrays so we can work with them\n    x = ma.masked_invalid(self.convert_xunits(x))\n    y1 = ma.masked_invalid(self.convert_yunits(y1))\n    y2 = ma.masked_invalid(self.convert_yunits(y2))\n\n    for name, array in [('x', x), ('y1', y1), ('y2', y2)]:\n        if array.ndim > 1:\n            raise ValueError('Input passed into argument \"%r\"' % name +\n                             'is not 1-dimensional.')\n\n    if where is None:\n        where = True\n    else:\n        where = np.asarray(where, dtype=bool)\n        if where.size != x.size:\n            cbook.warn_deprecated(\n                \"3.2\",\n                message=\"The parameter where must have the same size as x \"\n                        \"in fill_between(). This will become an error in \"\n                        \"future versions of Matplotlib.\")\n    where = where & ~functools.reduce(np.logical_or,\n                                      map(np.ma.getmask, [x, y1, y2]))\n\n    x, y1, y2 = np.broadcast_arrays(np.atleast_1d(x), y1, y2)\n\n    polys = []\n    for ind0, ind1 in cbook.contiguous_regions(where):\n        xslice = x[ind0:ind1]\n        y1slice = y1[ind0:ind1]\n        y2slice = y2[ind0:ind1]\n        if step is not None:\n            step_func = cbook.STEP_LOOKUP_MAP[\"steps-\" + step]\n            xslice, y1slice, y2slice = step_func(xslice, y1slice, y2slice)\n\n        if not len(xslice):\n            continue\n\n        N = len(xslice)\n        X = np.zeros((2 * N + 2, 2), float)\n\n        if interpolate:\n            def get_interp_point(ind):\n                im1 = max(ind - 1, 0)\n                x_values = x[im1:ind + 1]\n                diff_values = y1[im1:ind + 1] - y2[im1:ind + 1]\n                y1_values = y1[im1:ind + 1]\n\n                if len(diff_values) == 2:\n                    if np.ma.is_masked(diff_values[1]):\n                        return x[im1], y1[im1]\n                    elif np.ma.is_masked(diff_values[0]):\n                        return x[ind], y1[ind]\n\n                diff_order = diff_values.argsort()\n                diff_root_x = np.interp(\n                    0, diff_values[diff_order], x_values[diff_order])\n                x_order = x_values.argsort()\n                diff_root_y = np.interp(diff_root_x, x_values[x_order],\n                                        y1_values[x_order])\n                return diff_root_x, diff_root_y\n\n            start = get_interp_point(ind0)\n            end = get_interp_point(ind1)\n        else:\n            # the purpose of the next two lines is for when y2 is a\n            # scalar like 0 and we want the fill to go all the way\n            # down to 0 even if none of the y1 sample points do\n            start = xslice[0], y2slice[0]\n            end = xslice[-1], y2slice[-1]\n\n        X[0] = start\n        X[N + 1] = end\n\n        X[1:N + 1, 0] = xslice\n        X[1:N + 1, 1] = y1slice\n        X[N + 2:, 0] = xslice[::-1]\n        X[N + 2:, 1] = y2slice[::-1]\n\n        polys.append(X)\n\n    collection = mcoll.PolyCollection(polys, **kwargs)\n\n    # now update the datalim and autoscale\n    XY1 = np.array([x[where], y1[where]]).T\n    XY2 = np.array([x[where], y2[where]]).T\n    self.dataLim.update_from_data_xy(XY1, self.ignore_existing_data_limits,\n                                     updatex=True, updatey=True)\n    self.ignore_existing_data_limits = False\n    self.dataLim.update_from_data_xy(XY2, self.ignore_existing_data_limits,\n                                     updatex=False, updatey=True)\n    self.add_collection(collection, autolim=False)\n    self._request_autoscale_view()\n    return collection",
                                "signature": "fill_between(self, x, y1, y2=0, where=None, interpolate=False, step=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"y\", \"x1\", \"x2\", \"where\"])\n@docstring.dedent_interpd\ndef fill_betweenx(self, y, x1, x2=0, where=None,\n                  step=None, interpolate=False, **kwargs):\n    \"\"\"\n    Fill the area between two vertical curves.\n\n    The curves are defined by the points (*x1*, *y*) and (*x2*, *y*). This\n    creates one or multiple polygons describing the filled area.\n\n    You may exclude some vertical sections from filling using *where*.\n\n    By default, the edges connect the given points directly. Use *step* if\n    the filling should be a step function, i.e. constant in between *y*.\n\n\n    Parameters\n    ----------\n    y : array (length N)\n        The y coordinates of the nodes defining the curves.\n\n    x1 : array (length N) or scalar\n        The x coordinates of the nodes defining the first curve.\n\n    x2 : array (length N) or scalar, optional, default: 0\n        The x coordinates of the nodes defining the second curve.\n\n    where : array of bool (length N), optional, default: None\n        Define *where* to exclude some vertical regions from being\n        filled. The filled regions are defined by the coordinates\n        ``y[where]``.  More precisely, fill between ``y[i]`` and ``y[i+1]``\n        if ``where[i] and where[i+1]``.  Note that this definition implies\n        that an isolated *True* value between two *False* values in\n        *where* will not result in filling.  Both sides of the *True*\n        position remain unfilled due to the adjacent *False* values.\n\n    interpolate : bool, optional\n        This option is only relevant if *where* is used and the two curves\n        are crossing each other.\n\n        Semantically, *where* is often used for *x1* > *x2* or similar.\n        By default, the nodes of the polygon defining the filled region\n        will only be placed at the positions in the *y* array.  Such a\n        polygon cannot describe the above semantics close to the\n        intersection.  The y-sections containing the intersection are\n        simply clipped.\n\n        Setting *interpolate* to *True* will calculate the actual\n        intersection point and extend the filled region up to this point.\n\n    step : {'pre', 'post', 'mid'}, optional\n        Define *step* if the filling should be a step function,\n        i.e. constant in between *y*. The value determines where the\n        step will occur:\n\n        - 'pre': The y value is continued constantly to the left from\n          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n          value ``y[i]``.\n        - 'post': The y value is continued constantly to the right from\n          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n          value ``y[i]``.\n        - 'mid': Steps occur half-way between the *x* positions.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        All other keyword arguments are passed on to `.PolyCollection`.\n        They control the `.Polygon` properties:\n\n        %(PolyCollection)s\n\n    Returns\n    -------\n    `.PolyCollection`\n        A `.PolyCollection` containing the plotted polygons.\n\n    See Also\n    --------\n    fill_between : Fill between two sets of y-values.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n\n    \"\"\"\n    if not rcParams['_internal.classic_mode']:\n        kwargs = cbook.normalize_kwargs(kwargs, mcoll.Collection)\n        if not any(c in kwargs for c in ('color', 'facecolor')):\n            kwargs['facecolor'] = \\\n                self._get_patches_for_fill.get_next_color()\n\n    # Handle united data, such as dates\n    self._process_unit_info(ydata=y, xdata=x1, kwargs=kwargs)\n    self._process_unit_info(xdata=x2)\n\n    # Convert the arrays so we can work with them\n    y = ma.masked_invalid(self.convert_yunits(y))\n    x1 = ma.masked_invalid(self.convert_xunits(x1))\n    x2 = ma.masked_invalid(self.convert_xunits(x2))\n\n    for name, array in [('y', y), ('x1', x1), ('x2', x2)]:\n        if array.ndim > 1:\n            raise ValueError('Input passed into argument \"%r\"' % name +\n                             'is not 1-dimensional.')\n\n    if where is None:\n        where = True\n    else:\n        where = np.asarray(where, dtype=bool)\n        if where.size != y.size:\n            cbook.warn_deprecated(\n                \"3.2\",\n                message=\"The parameter where must have the same size as y \"\n                        \"in fill_between(). This will become an error in \"\n                        \"future versions of Matplotlib.\")\n    where = where & ~functools.reduce(np.logical_or,\n                                      map(np.ma.getmask, [y, x1, x2]))\n\n    y, x1, x2 = np.broadcast_arrays(np.atleast_1d(y), x1, x2)\n\n    polys = []\n    for ind0, ind1 in cbook.contiguous_regions(where):\n        yslice = y[ind0:ind1]\n        x1slice = x1[ind0:ind1]\n        x2slice = x2[ind0:ind1]\n        if step is not None:\n            step_func = cbook.STEP_LOOKUP_MAP[\"steps-\" + step]\n            yslice, x1slice, x2slice = step_func(yslice, x1slice, x2slice)\n\n        if not len(yslice):\n            continue\n\n        N = len(yslice)\n        Y = np.zeros((2 * N + 2, 2), float)\n        if interpolate:\n            def get_interp_point(ind):\n                im1 = max(ind - 1, 0)\n                y_values = y[im1:ind + 1]\n                diff_values = x1[im1:ind + 1] - x2[im1:ind + 1]\n                x1_values = x1[im1:ind + 1]\n\n                if len(diff_values) == 2:\n                    if np.ma.is_masked(diff_values[1]):\n                        return x1[im1], y[im1]\n                    elif np.ma.is_masked(diff_values[0]):\n                        return x1[ind], y[ind]\n\n                diff_order = diff_values.argsort()\n                diff_root_y = np.interp(\n                    0, diff_values[diff_order], y_values[diff_order])\n                y_order = y_values.argsort()\n                diff_root_x = np.interp(diff_root_y, y_values[y_order],\n                                        x1_values[y_order])\n                return diff_root_x, diff_root_y\n\n            start = get_interp_point(ind0)\n            end = get_interp_point(ind1)\n        else:\n            # the purpose of the next two lines is for when x2 is a\n            # scalar like 0 and we want the fill to go all the way\n            # down to 0 even if none of the x1 sample points do\n            start = x2slice[0], yslice[0]\n            end = x2slice[-1], yslice[-1]\n\n        Y[0] = start\n        Y[N + 1] = end\n\n        Y[1:N + 1, 0] = x1slice\n        Y[1:N + 1, 1] = yslice\n        Y[N + 2:, 0] = x2slice[::-1]\n        Y[N + 2:, 1] = yslice[::-1]\n\n        polys.append(Y)\n\n    collection = mcoll.PolyCollection(polys, **kwargs)\n\n    # now update the datalim and autoscale\n    X1Y = np.array([x1[where], y[where]]).T\n    X2Y = np.array([x2[where], y[where]]).T\n    self.dataLim.update_from_data_xy(X1Y, self.ignore_existing_data_limits,\n                                     updatex=True, updatey=True)\n    self.ignore_existing_data_limits = False\n    self.dataLim.update_from_data_xy(X2Y, self.ignore_existing_data_limits,\n                                     updatex=True, updatey=False)\n    self.add_collection(collection, autolim=False)\n    self._request_autoscale_view()\n    return collection",
                                "signature": "fill_betweenx(self, y, x1, x2=0, where=None, step=None, interpolate=False, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\n@cbook._delete_parameter(\"3.1\", \"shape\")\n@cbook._delete_parameter(\"3.1\", \"imlim\")\ndef imshow(self, X, cmap=None, norm=None, aspect=None,\n           interpolation=None, alpha=None, vmin=None, vmax=None,\n           origin=None, extent=None, shape=None, filternorm=1,\n           filterrad=4.0, imlim=None, resample=None, url=None, **kwargs):\n    \"\"\"\n    Display an image, i.e. data on a 2D regular raster.\n\n    Parameters\n    ----------\n    X : array-like or PIL image\n        The image data. Supported array shapes are:\n\n        - (M, N): an image with scalar data. The data is visualized\n          using a colormap.\n        - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n        - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n          i.e. including transparency.\n\n        The first two dimensions (M, N) define the rows and columns of\n        the image.\n\n        Out-of-range RGB(A) values are clipped.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        The Colormap instance or registered colormap name used to map\n        scalar data to colors. This parameter is ignored for RGB(A) data.\n        Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The `Normalize` instance used to scale scalar data to the [0, 1]\n        range before mapping to colors using *cmap*. By default, a linear\n        scaling mapping the lowest value to 0 and the highest to 1 is used.\n        This parameter is ignored for RGB(A) data.\n\n    aspect : {'equal', 'auto'} or float, optional\n        Controls the aspect ratio of the axes. The aspect is of particular\n        relevance for images since it may distort the image, i.e. pixel\n        will not be square.\n\n        This parameter is a shortcut for explicitly calling\n        `.Axes.set_aspect`. See there for further details.\n\n        - 'equal': Ensures an aspect ratio of 1. Pixels will be square\n          (unless pixel sizes are explicitly made non-square in data\n          coordinates using *extent*).\n        - 'auto': The axes is kept fixed and the aspect is adjusted so\n          that the data fit in the axes. In general, this will result in\n          non-square pixels.\n\n        If not given, use :rc:`image.aspect`.\n\n    interpolation : str, optional\n        The interpolation method used. If *None*, :rc:`image.interpolation`\n        is used.\n\n        Supported values are 'none', 'antialiased', 'nearest', 'bilinear',\n        'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',\n        'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',\n        'sinc', 'lanczos'.\n\n        If *interpolation* is 'none', then no interpolation is performed\n        on the Agg, ps, pdf and svg backends. Other backends will fall back\n        to 'nearest'. Note that most SVG renders perform interpolation at\n        rendering and that the default interpolation method they implement\n        may differ.\n\n        If *interpolation* is the default 'antialiased', then 'nearest'\n        interpolation is used if the image is upsampled by more than a\n        factor of three (i.e. the number of display pixels is at least\n        three times the size of the data array).  If the upsampling rate is\n        smaller than 3, or the image is downsampled, then 'hanning'\n        interpolation is used to act as an anti-aliasing filter, unless the\n        image happens to be upsampled by exactly a factor of two or one.\n\n        See\n        :doc:`/gallery/images_contours_and_fields/interpolation_methods`\n        for an overview of the supported interpolation methods, and\n        :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n        a discussion of image antialiasing.\n\n        Some interpolation methods require an additional radius parameter,\n        which can be set by *filterrad*. Additionally, the antigrain image\n        resize filter is controlled by the parameter *filternorm*.\n\n    alpha : scalar or array-like, optional\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n        If *alpha* is an array, the alpha blending values are applied pixel\n        by pixel, and *alpha* must have the same shape as *X*.\n\n    vmin, vmax : scalar, optional\n        When using scalar data and no explicit *norm*, *vmin* and *vmax*\n        define the data range that the colormap covers. By default,\n        the colormap covers the complete value range of the supplied\n        data. *vmin*, *vmax* are ignored if the *norm* parameter is used.\n\n    origin : {'upper', 'lower'}, optional\n        Place the [0, 0] index of the array in the upper left or lower left\n        corner of the axes. The convention 'upper' is typically used for\n        matrices and images.\n        If not given, :rc:`image.origin` is used, defaulting to 'upper'.\n\n        Note that the vertical axes points upward for 'lower'\n        but downward for 'upper'.\n\n        See the :doc:`/tutorials/intermediate/imshow_extent` tutorial for\n        examples and a more detailed description.\n\n    extent : scalars (left, right, bottom, top), optional\n        The bounding box in data coordinates that the image will fill.\n        The image is stretched individually along x and y to fill the box.\n\n        The default extent is determined by the following conditions.\n        Pixels have unit size in data coordinates. Their centers are on\n        integer coordinates, and their center coordinates range from 0 to\n        columns-1 horizontally and from 0 to rows-1 vertically.\n\n        Note that the direction of the vertical axis and thus the default\n        values for top and bottom depend on *origin*:\n\n        - For ``origin == 'upper'`` the default is\n          ``(-0.5, numcols-0.5, numrows-0.5, -0.5)``.\n        - For ``origin == 'lower'`` the default is\n          ``(-0.5, numcols-0.5, -0.5, numrows-0.5)``.\n\n        See the :doc:`/tutorials/intermediate/imshow_extent` tutorial for\n        examples and a more detailed description.\n\n    filternorm : bool, optional, default: True\n        A parameter for the antigrain image resize filter (see the\n        antigrain documentation).  If *filternorm* is set, the filter\n        normalizes integer values and corrects the rounding errors. It\n        doesn't do anything with the source floating point values, it\n        corrects only integers according to the rule of 1.0 which means\n        that any sum of pixel weights must be equal to 1.0.  So, the\n        filter function must produce a graph of the proper shape.\n\n    filterrad : float > 0, optional, default: 4.0\n        The filter radius for filters that have a radius parameter, i.e.\n        when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\n    resample : bool, optional\n        When *True*, use a full resampling method.  When *False*, only\n        resample when the output image is larger than the input image.\n\n    url : str, optional\n        Set the url of the created `.AxesImage`. See `.Artist.set_url`.\n\n    Returns\n    -------\n    image : `~matplotlib.image.AxesImage`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.artist.Artist` properties\n        These parameters are passed on to the constructor of the\n        `.AxesImage` artist.\n\n    See also\n    --------\n    matshow : Plot a matrix or an array as an image.\n\n    Notes\n    -----\n    Unless *extent* is used, pixel centers will be located at integer\n    coordinates. In other words: the origin will coincide with the center\n    of pixel (0, 0).\n\n    There are two common representations for RGB images with an alpha\n    channel:\n\n    -   Straight (unassociated) alpha: R, G, and B channels represent the\n        color of the pixel, disregarding its opacity.\n    -   Premultiplied (associated) alpha: R, G, and B channels represent\n        the color of the pixel, adjusted for its opacity by multiplication.\n\n    `~matplotlib.pyplot.imshow` expects RGB images adopting the straight\n    (unassociated) alpha representation.\n    \"\"\"\n    if aspect is None:\n        aspect = rcParams['image.aspect']\n    self.set_aspect(aspect)\n    im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,\n                          filternorm=filternorm, filterrad=filterrad,\n                          resample=resample, **kwargs)\n\n    im.set_data(X)\n    im.set_alpha(alpha)\n    if im.get_clip_path() is None:\n        # image does not already have clipping set, clip to axes patch\n        im.set_clip_path(self.patch)\n    if vmin is not None or vmax is not None:\n        im.set_clim(vmin, vmax)\n    else:\n        im.autoscale_None()\n    im.set_url(url)\n\n    # update ax.dataLim, and, if autoscaling, set viewLim\n    # to tightly fit the image, regardless of dataLim.\n    im.set_extent(im.get_extent())\n\n    self.add_image(im)\n    return im",
                                "signature": "imshow(self, X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, shape=None, filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None, **kwargs)"
                            },
                            {
                                "code": "@staticmethod\ndef _pcolorargs(funcname, *args, allmatch=False):\n    # If allmatch is True, then the incoming X, Y, C must have matching\n    # dimensions, taking into account that X and Y can be 1-D rather than\n    # 2-D.  This perfect match is required for Gouraud shading.  For flat\n    # shading, X and Y specify boundaries, so we need one more boundary\n    # than color in each direction.  For convenience, and consistent with\n    # Matlab, we discard the last row and/or column of C if necessary to\n    # meet this condition.  This is done if allmatch is False.\n\n    if len(args) == 1:\n        C = np.asanyarray(args[0])\n        nrows, ncols = C.shape\n        if allmatch:\n            X, Y = np.meshgrid(np.arange(ncols), np.arange(nrows))\n        else:\n            X, Y = np.meshgrid(np.arange(ncols + 1), np.arange(nrows + 1))\n        C = cbook.safe_masked_invalid(C)\n        return X, Y, C\n\n    if len(args) == 3:\n        # Check x and y for bad data...\n        C = np.asanyarray(args[2])\n        X, Y = [cbook.safe_masked_invalid(a) for a in args[:2]]\n        if funcname == 'pcolormesh':\n            if np.ma.is_masked(X) or np.ma.is_masked(Y):\n                raise ValueError(\n                    'x and y arguments to pcolormesh cannot have '\n                    'non-finite values or be of type '\n                    'numpy.ma.core.MaskedArray with masked values')\n            # safe_masked_invalid() returns an ndarray for dtypes other\n            # than floating point.\n            if isinstance(X, np.ma.core.MaskedArray):\n                X = X.data  # strip mask as downstream doesn't like it...\n            if isinstance(Y, np.ma.core.MaskedArray):\n                Y = Y.data\n        nrows, ncols = C.shape\n    else:\n        raise TypeError(\n            'Illegal arguments to %s; see help(%s)' % (funcname, funcname))\n\n    Nx = X.shape[-1]\n    Ny = Y.shape[0]\n    if X.ndim != 2 or X.shape[0] == 1:\n        x = X.reshape(1, Nx)\n        X = x.repeat(Ny, axis=0)\n    if Y.ndim != 2 or Y.shape[1] == 1:\n        y = Y.reshape(Ny, 1)\n        Y = y.repeat(Nx, axis=1)\n    if X.shape != Y.shape:\n        raise TypeError(\n            'Incompatible X, Y inputs to %s; see help(%s)' % (\n            funcname, funcname))\n    if allmatch:\n        if (Nx, Ny) != (ncols, nrows):\n            raise TypeError('Dimensions of C %s are incompatible with'\n                            ' X (%d) and/or Y (%d); see help(%s)' % (\n                                C.shape, Nx, Ny, funcname))\n    else:\n        if not (ncols in (Nx, Nx - 1) and nrows in (Ny, Ny - 1)):\n            raise TypeError('Dimensions of C %s are incompatible with'\n                            ' X (%d) and/or Y (%d); see help(%s)' % (\n                                C.shape, Nx, Ny, funcname))\n        C = C[:Ny - 1, :Nx - 1]\n    C = cbook.safe_masked_invalid(C)\n    return X, Y, C",
                                "signature": "_pcolorargs(funcname, *args)"
                            },
                            {
                                "code": "@_preprocess_data()\n@docstring.dedent_interpd\ndef pcolor(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n           vmax=None, **kwargs):\n    r\"\"\"\n    Create a pseudocolor plot with a non-regular rectangular grid.\n\n    Call signature::\n\n        pcolor([X, Y,] C, **kwargs)\n\n    *X* and *Y* can be used to specify the corners of the quadrilaterals.\n\n    .. hint::\n\n        ``pcolor()`` can be very slow for large arrays. In most\n        cases you should use the similar but much faster\n        `~.Axes.pcolormesh` instead. See there for a discussion of the\n        differences.\n\n    Parameters\n    ----------\n    C : array-like\n        A scalar 2-D array. The values will be color-mapped.\n\n    X, Y : array-like, optional\n        The coordinates of the quadrilateral corners. The quadrilateral\n        for ``C[i, j]`` has corners at::\n\n            (X[i+1, j], Y[i+1, j])           (X[i+1, j+1], Y[i+1, j+1])\n                                  +---------+\n                                  | C[i, j] |\n                                  +---------+\n                (X[i, j], Y[i, j])           (X[i, j+1], Y[i, j+1])\n\n        Note that the column index corresponds to the\n        x-coordinate, and the row index corresponds to y. For\n        details, see the :ref:`Notes <axes-pcolor-grid-orientation>`\n        section below.\n\n        The dimensions of *X* and *Y* should be one greater than those of\n        *C*. Alternatively, *X*, *Y* and *C* may have equal dimensions, in\n        which case the last row and column of *C* will be ignored.\n\n        If *X* and/or *Y* are 1-D arrays or column vectors they will be\n        expanded as needed into the appropriate 2-D arrays, making a\n        rectangular grid.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        A Colormap instance or registered colormap name. The colormap\n        maps the *C* values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the data values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : scalar, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of *C* in case of the default linear\n        scaling).\n\n    edgecolors : {'none', None, 'face', color, color sequence}, optional\n        The color of the edges. Defaults to 'none'. Possible values:\n\n        - 'none' or '': No edge.\n        - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n          :rc:`patch.force_edgecolor` has to be True for this to work.\n        - 'face': Use the adjacent face color.\n        - A color or sequence of colors will set the edge color.\n\n        The singular form *edgecolor* works as an alias.\n\n    alpha : scalar, optional, default: None\n        The alpha blending value of the face color, between 0 (transparent)\n        and 1 (opaque). Note: The edgecolor is currently not affected by\n        this.\n\n    snap : bool, optional, default: False\n        Whether to snap the mesh to pixel boundaries.\n\n    Returns\n    -------\n    collection : `matplotlib.collections.Collection`\n\n    Other Parameters\n    ----------------\n    antialiaseds : bool, optional, default: False\n        The default *antialiaseds* is False if the default\n        *edgecolors*\\ =\"none\" is used.  This eliminates artificial lines\n        at patch boundaries, and works regardless of the value of alpha.\n        If *edgecolors* is not \"none\", then the default *antialiaseds*\n        is taken from :rc:`patch.antialiased`.\n        Stroking the edges may be preferred if *alpha* is 1, but will\n        cause artifacts otherwise.\n\n    **kwargs\n        Additionally, the following arguments are allowed. They are passed\n        along to the `~matplotlib.collections.PolyCollection` constructor:\n\n    %(PolyCollection)s\n\n    See Also\n    --------\n    pcolormesh : for an explanation of the differences between\n        pcolor and pcolormesh.\n    imshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n        faster alternative.\n\n    Notes\n    -----\n    **Masked arrays**\n\n    *X*, *Y* and *C* may be masked arrays. If either ``C[i, j]``, or one\n    of the vertices surrounding ``C[i, j]`` (*X* or *Y* at\n    ``[i, j], [i+1, j], [i, j+1], [i+1, j+1]``) is masked, nothing is\n    plotted.\n\n    .. _axes-pcolor-grid-orientation:\n\n    **Grid orientation**\n\n    The grid orientation follows the standard matrix convention: An array\n    *C* with shape (nrows, ncolumns) is plotted with the column number as\n    *X* and the row number as *Y*.\n\n    **Handling of pcolor() end-cases**\n\n    ``pcolor()`` displays all columns of *C* if *X* and *Y* are not\n    specified, or if *X* and *Y* have one more column than *C*.\n    If *X* and *Y* have the same number of columns as *C* then the last\n    column of *C* is dropped. Similarly for the rows.\n\n    Note: This behavior is different from MATLAB's ``pcolor()``, which\n    always discards the last row and column of *C*.\n    \"\"\"\n    X, Y, C = self._pcolorargs('pcolor', *args, allmatch=False)\n    Ny, Nx = X.shape\n\n    # unit conversion allows e.g. datetime objects as axis values\n    self._process_unit_info(xdata=X, ydata=Y, kwargs=kwargs)\n    X = self.convert_xunits(X)\n    Y = self.convert_yunits(Y)\n\n    # convert to MA, if necessary.\n    C = ma.asarray(C)\n    X = ma.asarray(X)\n    Y = ma.asarray(Y)\n\n    mask = ma.getmaskarray(X) + ma.getmaskarray(Y)\n    xymask = (mask[0:-1, 0:-1] + mask[1:, 1:] +\n              mask[0:-1, 1:] + mask[1:, 0:-1])\n    # don't plot if C or any of the surrounding vertices are masked.\n    mask = ma.getmaskarray(C) + xymask\n\n    unmask = ~mask\n    X1 = ma.filled(X[:-1, :-1])[unmask]\n    Y1 = ma.filled(Y[:-1, :-1])[unmask]\n    X2 = ma.filled(X[1:, :-1])[unmask]\n    Y2 = ma.filled(Y[1:, :-1])[unmask]\n    X3 = ma.filled(X[1:, 1:])[unmask]\n    Y3 = ma.filled(Y[1:, 1:])[unmask]\n    X4 = ma.filled(X[:-1, 1:])[unmask]\n    Y4 = ma.filled(Y[:-1, 1:])[unmask]\n    npoly = len(X1)\n\n    xy = np.stack([X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1], axis=-1)\n    verts = xy.reshape((npoly, 5, 2))\n\n    C = ma.filled(C[:Ny - 1, :Nx - 1])[unmask]\n\n    linewidths = (0.25,)\n    if 'linewidth' in kwargs:\n        kwargs['linewidths'] = kwargs.pop('linewidth')\n    kwargs.setdefault('linewidths', linewidths)\n\n    if 'edgecolor' in kwargs:\n        kwargs['edgecolors'] = kwargs.pop('edgecolor')\n    ec = kwargs.setdefault('edgecolors', 'none')\n\n    # aa setting will default via collections to patch.antialiased\n    # unless the boundary is not stroked, in which case the\n    # default will be False; with unstroked boundaries, aa\n    # makes artifacts that are often disturbing.\n    if 'antialiased' in kwargs:\n        kwargs['antialiaseds'] = kwargs.pop('antialiased')\n    if 'antialiaseds' not in kwargs and cbook._str_lower_equal(ec, \"none\"):\n        kwargs['antialiaseds'] = False\n\n    kwargs.setdefault('snap', False)\n\n    collection = mcoll.PolyCollection(verts, **kwargs)\n\n    collection.set_alpha(alpha)\n    collection.set_array(C)\n    collection.set_cmap(cmap)\n    collection.set_norm(norm)\n    collection.set_clim(vmin, vmax)\n    collection.autoscale_None()\n    self.grid(False)\n\n    x = X.compressed()\n    y = Y.compressed()\n\n    # Transform from native to data coordinates?\n    t = collection._transform\n    if (not isinstance(t, mtransforms.Transform) and\n        hasattr(t, '_as_mpl_transform')):\n        t = t._as_mpl_transform(self.axes)\n\n    if t and any(t.contains_branch_seperately(self.transData)):\n        trans_to_data = t - self.transData\n        pts = np.vstack([x, y]).T.astype(float)\n        transformed_pts = trans_to_data.transform(pts)\n        x = transformed_pts[..., 0]\n        y = transformed_pts[..., 1]\n\n    self.add_collection(collection, autolim=False)\n\n    minx = np.min(x)\n    maxx = np.max(x)\n    miny = np.min(y)\n    maxy = np.max(y)\n    collection.sticky_edges.x[:] = [minx, maxx]\n    collection.sticky_edges.y[:] = [miny, maxy]\n    corners = (minx, miny), (maxx, maxy)\n    self.update_datalim(corners)\n    self._request_autoscale_view()\n    return collection",
                                "signature": "pcolor(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\n@docstring.dedent_interpd\ndef pcolormesh(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n               vmax=None, shading='flat', antialiased=False, **kwargs):\n    \"\"\"\n    Create a pseudocolor plot with a non-regular rectangular grid.\n\n    Call signature::\n\n        pcolor([X, Y,] C, **kwargs)\n\n    *X* and *Y* can be used to specify the corners of the quadrilaterals.\n\n    .. note::\n\n       `~Axes.pcolormesh` is similar to `~Axes.pcolor`. It's much faster\n       and preferred in most cases. For a detailed discussion on the\n       differences see :ref:`Differences between pcolor() and pcolormesh()\n       <differences-pcolor-pcolormesh>`.\n\n    Parameters\n    ----------\n    C : array-like\n        A scalar 2-D array. The values will be color-mapped.\n\n    X, Y : array-like, optional\n        The coordinates of the quadrilateral corners. The quadrilateral\n        for ``C[i, j]`` has corners at::\n\n            (X[i+1, j], Y[i+1, j])           (X[i+1, j+1], Y[i+1, j+1])\n                                  +---------+\n                                  | C[i, j] |\n                                  +---------+\n                (X[i, j], Y[i, j])           (X[i, j+1], Y[i, j+1])\n\n        Note that the column index corresponds to the\n        x-coordinate, and the row index corresponds to y. For\n        details, see the :ref:`Notes <axes-pcolormesh-grid-orientation>`\n        section below.\n\n        The dimensions of *X* and *Y* should be one greater than those of\n        *C*. Alternatively, *X*, *Y* and *C* may have equal dimensions, in\n        which case the last row and column of *C* will be ignored.\n\n        If *X* and/or *Y* are 1-D arrays or column vectors they will be\n        expanded as needed into the appropriate 2-D arrays, making a\n        rectangular grid.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        A Colormap instance or registered colormap name. The colormap\n        maps the *C* values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the data values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : scalar, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of *C* in case of the default linear\n        scaling).\n\n    edgecolors : {'none', None, 'face', color, color sequence}, optional\n        The color of the edges. Defaults to 'none'. Possible values:\n\n        - 'none' or '': No edge.\n        - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n          :rc:`patch.force_edgecolor` has to be True for this to work.\n        - 'face': Use the adjacent face color.\n        - A color or sequence of colors will set the edge color.\n\n        The singular form *edgecolor* works as an alias.\n\n    alpha : scalar, optional, default: None\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    shading : {'flat', 'gouraud'}, optional\n        The fill style, Possible values:\n\n        - 'flat': A solid color is used for each quad. The color of the\n          quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n          ``C[i, j]``.\n        - 'gouraud': Each quad will be Gouraud shaded: The color of the\n          corners (i', j') are given by ``C[i',j']``. The color values of\n          the area in between is interpolated from the corner values.\n          When Gouraud shading is used, *edgecolors* is ignored.\n\n    snap : bool, optional, default: False\n        Whether to snap the mesh to pixel boundaries.\n\n    Returns\n    -------\n    mesh : `matplotlib.collections.QuadMesh`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additionally, the following arguments are allowed. They are passed\n        along to the `~matplotlib.collections.QuadMesh` constructor:\n\n    %(QuadMesh)s\n\n    See Also\n    --------\n    pcolor : An alternative implementation with slightly different\n        features. For a detailed discussion on the differences see\n        :ref:`Differences between pcolor() and pcolormesh()\n        <differences-pcolor-pcolormesh>`.\n    imshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n        faster alternative.\n\n    Notes\n    -----\n    **Masked arrays**\n\n    *C* may be a masked array. If ``C[i, j]`` is masked, the corresponding\n    quadrilateral will be transparent. Masking of *X* and *Y* is not\n    supported. Use `~.Axes.pcolor` if you need this functionality.\n\n    .. _axes-pcolormesh-grid-orientation:\n\n    **Grid orientation**\n\n    The grid orientation follows the standard matrix convention: An array\n    *C* with shape (nrows, ncolumns) is plotted with the column number as\n    *X* and the row number as *Y*.\n\n    .. _differences-pcolor-pcolormesh:\n\n    **Differences between pcolor() and pcolormesh()**\n\n    Both methods are used to create a pseudocolor plot of a 2-D array\n    using quadrilaterals.\n\n    The main difference lies in the created object and internal data\n    handling:\n    While `~.Axes.pcolor` returns a `.PolyCollection`, `~.Axes.pcolormesh`\n    returns a `.QuadMesh`. The latter is more specialized for the given\n    purpose and thus is faster. It should almost always be preferred.\n\n    There is also a slight difference in the handling of masked arrays.\n    Both `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays\n    for *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*\n    and *Y*. The reason lies in the internal handling of the masked values.\n    `~.Axes.pcolor` leaves out the respective polygons from the\n    PolyCollection. `~.Axes.pcolormesh` sets the facecolor of the masked\n    elements to transparent. You can see the difference when using\n    edgecolors. While all edges are drawn irrespective of masking in a\n    QuadMesh, the edge between two adjacent masked quadrilaterals in\n    `~.Axes.pcolor` is not drawn as the corresponding polygons do not\n    exist in the PolyCollection.\n\n    Another difference is the support of Gouraud shading in\n    `~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`.\n\n    \"\"\"\n    shading = shading.lower()\n    kwargs.setdefault('edgecolors', 'None')\n\n    allmatch = (shading == 'gouraud')\n\n    X, Y, C = self._pcolorargs('pcolormesh', *args, allmatch=allmatch)\n    Ny, Nx = X.shape\n    X = X.ravel()\n    Y = Y.ravel()\n    # unit conversion allows e.g. datetime objects as axis values\n    self._process_unit_info(xdata=X, ydata=Y, kwargs=kwargs)\n    X = self.convert_xunits(X)\n    Y = self.convert_yunits(Y)\n\n    # convert to one dimensional arrays\n    C = C.ravel()\n    coords = np.column_stack((X, Y)).astype(float, copy=False)\n    collection = mcoll.QuadMesh(Nx - 1, Ny - 1, coords,\n                                antialiased=antialiased, shading=shading,\n                                **kwargs)\n    collection.set_alpha(alpha)\n    collection.set_array(C)\n    collection.set_cmap(cmap)\n    collection.set_norm(norm)\n    collection.set_clim(vmin, vmax)\n    collection.autoscale_None()\n\n    self.grid(False)\n\n    # Transform from native to data coordinates?\n    t = collection._transform\n    if (not isinstance(t, mtransforms.Transform) and\n        hasattr(t, '_as_mpl_transform')):\n        t = t._as_mpl_transform(self.axes)\n\n    if t and any(t.contains_branch_seperately(self.transData)):\n        trans_to_data = t - self.transData\n        coords = trans_to_data.transform(coords)\n\n    self.add_collection(collection, autolim=False)\n\n    minx, miny = np.min(coords, axis=0)\n    maxx, maxy = np.max(coords, axis=0)\n    collection.sticky_edges.x[:] = [minx, maxx]\n    collection.sticky_edges.y[:] = [miny, maxy]\n    corners = (minx, miny), (maxx, maxy)\n    self.update_datalim(corners)\n    self._request_autoscale_view()\n    return collection",
                                "signature": "pcolormesh(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\n@docstring.dedent_interpd\ndef pcolorfast(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n               vmax=None, **kwargs):\n    \"\"\"\n    Create a pseudocolor plot with a non-regular rectangular grid.\n\n    Call signature::\n\n      ax.pcolorfast([X, Y], C, /, **kwargs)\n\n    This method is similar to ~.Axes.pcolor` and `~.Axes.pcolormesh`.\n    It's designed to provide the fastest pcolor-type plotting with the\n    Agg backend. To achieve this, it uses different algorithms internally\n    depending on the complexity of the input grid (regular rectangular,\n    non-regular rectangular or arbitrary quadrilateral).\n\n    .. warning::\n\n       This method is experimental. Compared to `~.Axes.pcolor` or\n       `~.Axes.pcolormesh` it has some limitations:\n\n       - It supports only flat shading (no outlines)\n       - It lacks support for log scaling of the axes.\n       - It does not have a have a pyplot wrapper.\n\n    Parameters\n    ----------\n    C : array-like(M, N)\n        The image data. Supported array shapes are:\n\n        - (M, N): an image with scalar data. The data is visualized\n          using a colormap.\n        - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n        - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n          i.e. including transparency.\n\n        The first two dimensions (M, N) define the rows and columns of\n        the image.\n\n        This parameter can only be passed positionally.\n\n    X, Y : tuple or array-like, default: ``(0, N)``, ``(0, M)``\n        *X* and *Y* are used to specify the coordinates of the\n        quadrilaterals. There are different ways to do this:\n\n        - Use tuples ``X=(xmin, xmax)`` and ``Y=(ymin, ymax)`` to define\n          a *uniform rectangular grid*.\n\n          The tuples define the outer edges of the grid. All individual\n          quadrilaterals will be of the same size. This is the fastest\n          version.\n\n        - Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular\n          grid*.\n\n          In this case *X* and *Y* have to be monotonic 1D arrays of length\n          *N+1* and *M+1*, specifying the x and y boundaries of the cells.\n\n          The speed is intermediate. Note: The grid is checked, and if\n          found to be uniform the fast version is used.\n\n        - Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral\n          grid* (i.e. if the quadrilaterals are not rectangular).\n\n          In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1),\n          specifying the x and y coordinates of the corners of the colored\n          quadrilaterals.\n\n          This is the most general, but the slowest to render.  It may\n          produce faster and more compact output using ps, pdf, and\n          svg backends, however.\n\n        These arguments can only be passed positionally.\n\n    cmap : str or `~matplotlib.colors.Colormap`, optional\n        A Colormap instance or registered colormap name. The colormap\n        maps the *C* values to colors. Defaults to :rc:`image.cmap`.\n\n    norm : `~matplotlib.colors.Normalize`, optional\n        The Normalize instance scales the data values to the canonical\n        colormap range [0, 1] for mapping to colors. By default, the data\n        range is mapped to the colorbar range using linear scaling.\n\n    vmin, vmax : scalar, optional, default: None\n        The colorbar range. If *None*, suitable min/max values are\n        automatically chosen by the `~.Normalize` instance (defaults to\n        the respective min/max values of *C* in case of the default linear\n        scaling).\n\n    alpha : scalar, optional, default: None\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    snap : bool, optional, default: False\n        Whether to snap the mesh to pixel boundaries.\n\n    Returns\n    -------\n    image : `.AxesImage` or `.PcolorImage` or `.QuadMesh`\n        The return type depends on the type of grid:\n\n        - `.AxesImage` for a regular rectangular grid.\n        - `.PcolorImage` for a non-regular rectangular grid.\n        - `.QuadMesh` for a non-rectangular grid.\n\n    Notes\n    -----\n    .. [notes section required to get data note injection right]\n    \"\"\"\n\n    C = args[-1]\n    nr, nc = np.shape(C)[:2]\n    if len(args) == 1:\n        style = \"image\"\n        x = [0, nc]\n        y = [0, nr]\n    elif len(args) == 3:\n        x, y = args[:2]\n        x = np.asarray(x)\n        y = np.asarray(y)\n        if x.ndim == 1 and y.ndim == 1:\n            if x.size == 2 and y.size == 2:\n                style = \"image\"\n            else:\n                dx = np.diff(x)\n                dy = np.diff(y)\n                if (np.ptp(dx) < 0.01 * np.abs(dx.mean()) and\n                    np.ptp(dy) < 0.01 * np.abs(dy.mean())):\n                    style = \"image\"\n                else:\n                    style = \"pcolorimage\"\n        elif x.ndim == 2 and y.ndim == 2:\n            style = \"quadmesh\"\n        else:\n            raise TypeError(\"arguments do not match valid signatures\")\n    else:\n        raise TypeError(\"need 1 argument or 3 arguments\")\n\n    if style == \"quadmesh\":\n        # data point in each cell is value at lower left corner\n        coords = np.stack([x, y], axis=-1)\n        if np.ndim(C) == 2:\n            qm_kwargs = {\"array\": np.ma.ravel(C)}\n        elif np.ndim(C) == 3:\n            qm_kwargs = {\"color\": np.ma.reshape(C, (-1, C.shape[-1]))}\n        else:\n            raise ValueError(\"C must be 2D or 3D\")\n        collection = mcoll.QuadMesh(\n            nc, nr, coords, **qm_kwargs,\n            alpha=alpha, cmap=cmap, norm=norm,\n            antialiased=False, edgecolors=\"none\")\n        self.add_collection(collection, autolim=False)\n        xl, xr, yb, yt = x.min(), x.max(), y.min(), y.max()\n        ret = collection\n\n    else:  # It's one of the two image styles.\n        extent = xl, xr, yb, yt = x[0], x[-1], y[0], y[-1]\n        if style == \"image\":\n            im = mimage.AxesImage(\n                self, cmap, norm,\n                data=C, alpha=alpha, extent=extent,\n                interpolation='nearest', origin='lower',\n                **kwargs)\n        elif style == \"pcolorimage\":\n            im = mimage.PcolorImage(\n                self, x, y, C,\n                cmap=cmap, norm=norm, alpha=alpha, extent=extent,\n                **kwargs)\n        self.add_image(im)\n        ret = im\n\n    if vmin is not None or vmax is not None:\n        ret.set_clim(vmin, vmax)\n    elif np.ndim(C) == 2:  # C.ndim == 3 is RGB(A) so doesn't need scaling.\n        ret.autoscale_None()\n    if ret.get_clip_path() is None:\n        # image does not already have clipping set, clip to axes patch\n        ret.set_clip_path(self.patch)\n\n    ret.sticky_edges.x[:] = [xl, xr]\n    ret.sticky_edges.y[:] = [yb, yt]\n    self.update_datalim(np.array([[xl, yb], [xr, yt]]))\n    self._request_autoscale_view(tight=True)\n    return ret",
                                "signature": "pcolorfast(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\ndef contour(self, *args, **kwargs):\n    kwargs['filled'] = False\n    contours = mcontour.QuadContourSet(self, *args, **kwargs)\n    self._request_autoscale_view()\n    return contours",
                                "signature": "contour(self, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data()\ndef contourf(self, *args, **kwargs):\n    kwargs['filled'] = True\n    contours = mcontour.QuadContourSet(self, *args, **kwargs)\n    self._request_autoscale_view()\n    return contours",
                                "signature": "contourf(self, *args, **kwargs)"
                            },
                            {
                                "code": "def clabel(self, CS, *args, **kwargs):\n    return CS.clabel(*args, **kwargs)",
                                "signature": "clabel(self, CS, *args, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", 'weights'], label_namer=\"x\")\ndef hist(self, x, bins=None, range=None, density=False, weights=None,\n         cumulative=False, bottom=None, histtype='bar', align='mid',\n         orientation='vertical', rwidth=None, log=False,\n         color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n\n    Compute and draw the histogram of *x*.  The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data.  See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n\n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset.  Note that\n    the ndarray form is transposed relative to the list form.\n\n    Masked arrays are not supported.\n\n    The *bins*, *range*, *weights*, and *density* parameters behave as in\n    `numpy.histogram`.\n\n    Parameters\n    ----------\n    x : (n,) array or sequence of (n,) arrays\n        Input values, this takes either a single array or a sequence of\n        arrays which are not required to be of the same length.\n\n    bins : int or sequence or str, optional\n        If *bins* is an integer, it defines the number of equal-width bins\n        in the range.\n\n        If *bins* is a sequence, it defines the bin edges, including the\n        left edge of the first bin and the right edge of the last bin;\n        in this case, bins may be unequally spaced.  All but the last\n        (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n            [1, 2, 3, 4]\n\n        then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n        the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n        *includes* 4.\n\n        If *bins* is a string, it is one of the binning strategies\n        supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n        'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\n        The default is :rc:`hist.bins`.\n\n    range : tuple or None, optional\n        The lower and upper range of the bins. Lower and upper outliers\n        are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n        Range has no effect if *bins* is a sequence.\n\n        If *bins* is a sequence or *range* is specified, autoscaling\n        is based on the specified bin range instead of the\n        range of x.\n\n        Default is ``None``\n\n    density : bool, optional\n        If ``True``, the first element of the return tuple will\n        be the counts normalized to form a probability density, i.e.,\n        the area (or integral) under the histogram will sum to 1.\n        This is achieved by dividing the count by the number of\n        observations times the bin width and not dividing by the total\n        number of observations. If *stacked* is also ``True``, the sum of\n        the histograms is normalized to 1.\n\n        Default is ``False``.\n\n    weights : (n, ) array-like or None, optional\n        An array of weights, of the same shape as *x*.  Each value in *x*\n        only contributes its associated weight towards the bin count\n        (instead of 1).  If *normed* or *density* is ``True``,\n        the weights are normalized, so that the integral of the density\n        over the range remains 1.\n\n        Default is ``None``.\n\n        This parameter can be used to draw a histogram of data that has\n        already been binned, e.g. using `np.histogram` (by treating each\n        bin as a single point with a weight equal to its count) ::\n\n            counts, bins = np.histogram(data)\n            plt.hist(bins[:-1], bins, weights=counts)\n\n        (or you may alternatively use `~.bar()`).\n\n    cumulative : bool or -1, optional\n        If ``True``, then a histogram is computed where each bin gives the\n        counts in that bin plus all bins for smaller values. The last bin\n        gives the total number of datapoints.\n\n        If *density* is also ``True`` then the histogram is normalized such\n        that the last bin equals 1.\n\n        If *cumulative* is a number less than 0 (e.g., -1), the direction\n        of accumulation is reversed.  In this case, if *density* is also\n        ``True``, then the histogram is normalized such that the first bin\n        equals 1.\n\n        Default is ``False``\n\n    bottom : array-like, scalar, or None\n        Location of the bottom baseline of each bin.  If a scalar,\n        the base line for each bin is shifted by the same amount.\n        If an array, each bin is shifted independently and the length\n        of bottom must match the number of bins.  If None, defaults to 0.\n\n        Default is ``None``\n\n    histtype : {'bar', 'barstacked', 'step',  'stepfilled'}, optional\n        The type of histogram to draw.\n\n        - 'bar' is a traditional bar-type histogram.  If multiple data\n          are given the bars are arranged side by side.\n        - 'barstacked' is a bar-type histogram where multiple\n          data are stacked on top of each other.\n        - 'step' generates a lineplot that is by default unfilled.\n        - 'stepfilled' generates a lineplot that is by default filled.\n\n        Default is 'bar'\n\n    align : {'left', 'mid', 'right'}, optional\n        Controls how the histogram is plotted.\n\n        - 'left': bars are centered on the left bin edges.\n        - 'mid': bars are centered between the bin edges.\n        - 'right': bars are centered on the right bin edges.\n\n        Default is 'mid'\n\n    orientation : {'horizontal', 'vertical'}, optional\n        If 'horizontal', `~matplotlib.pyplot.barh` will be used for\n        bar-type histograms and the *bottom* kwarg will be the left edges.\n\n    rwidth : scalar or None, optional\n        The relative width of the bars as a fraction of the bin width.  If\n        ``None``, automatically compute the width.\n\n        Ignored if *histtype* is 'step' or 'stepfilled'.\n\n        Default is ``None``\n\n    log : bool, optional\n        If ``True``, the histogram axis will be set to a log scale. If\n        *log* is ``True`` and *x* is a 1D array, empty bins will be\n        filtered out and only the non-empty ``(n, bins, patches)``\n        will be returned.\n\n        Default is ``False``\n\n    color : color or array-like of colors or None, optional\n        Color or sequence of colors, one per dataset.  Default (``None``)\n        uses the standard line color sequence.\n\n        Default is ``None``\n\n    label : str or None, optional\n        String, or sequence of strings to match multiple datasets.  Bar\n        charts yield multiple patches per dataset, but only the first gets\n        the label, so that the legend command will work as expected.\n\n        default is ``None``\n\n    stacked : bool, optional\n        If ``True``, multiple data are stacked on top of each other If\n        ``False`` multiple data are arranged side by side if histtype is\n        'bar' or on top of each other if histtype is 'step'\n\n        Default is ``False``\n\n    Returns\n    -------\n    n : array or list of arrays\n        The values of the histogram bins. See *density* and *weights* for a\n        description of the possible semantics.  If input *x* is an array,\n        then this is an array of length *nbins*. If input is a sequence of\n        arrays ``[data1, data2, ...]``, then this is a list of arrays with\n        the values of the histograms for each of the arrays in the same\n        order.  The dtype of the array *n* (or of its element arrays) will\n        always be float even if no weighting or normalization is used.\n\n    bins : array\n        The edges of the bins. Length nbins + 1 (nbins left edges and right\n        edge of last bin).  Always a single array even when multiple data\n        sets are passed in.\n\n    patches : list or list of lists\n        Silent list of individual patches used to create the histogram\n        or list of such list if multiple input datasets.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Patch` properties\n\n    See also\n    --------\n    hist2d : 2D histograms\n\n    \"\"\"\n    # Avoid shadowing the builtin.\n    bin_range = range\n    from builtins import range\n\n    if np.isscalar(x):\n        x = [x]\n\n    if bins is None:\n        bins = rcParams['hist.bins']\n\n    # Validate string inputs here to avoid cluttering subsequent code.\n    cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'],\n                         histtype=histtype)\n    cbook._check_in_list(['left', 'mid', 'right'], align=align)\n    cbook._check_in_list(['horizontal', 'vertical'],\n                         orientation=orientation)\n\n    if histtype == 'barstacked' and not stacked:\n        stacked = True\n\n    # basic input validation\n    input_empty = np.size(x) == 0\n    # Massage 'x' for processing.\n    x = cbook._reshape_2D(x, 'x')\n    nx = len(x)  # number of datasets\n\n    # Process unit information\n    # Unit conversion is done individually on each dataset\n    self._process_unit_info(xdata=x[0], kwargs=kwargs)\n    x = [self.convert_xunits(xi) for xi in x]\n\n    if bin_range is not None:\n        bin_range = self.convert_xunits(bin_range)\n\n    # We need to do to 'weights' what was done to 'x'\n    if weights is not None:\n        w = cbook._reshape_2D(weights, 'weights')\n    else:\n        w = [None] * nx\n\n    if len(w) != nx:\n        raise ValueError('weights should have the same shape as x')\n\n    for xi, wi in zip(x, w):\n        if wi is not None and len(wi) != len(xi):\n            raise ValueError(\n                'weights should have the same shape as x')\n\n    if color is None:\n        color = [self._get_lines.get_next_color() for i in range(nx)]\n    else:\n        color = mcolors.to_rgba_array(color)\n        if len(color) != nx:\n            error_message = (\n                \"color kwarg must have one color per data set. %d data \"\n                \"sets and %d colors were provided\" % (nx, len(color)))\n            raise ValueError(error_message)\n\n    hist_kwargs = dict()\n\n    # if the bin_range is not given, compute without nan numpy\n    # does not do this for us when guessing the range (but will\n    # happily ignore nans when computing the histogram).\n    if bin_range is None:\n        xmin = np.inf\n        xmax = -np.inf\n        for xi in x:\n            if len(xi):\n                # python's min/max ignore nan,\n                # np.minnan returns nan for all nan input\n                xmin = min(xmin, np.nanmin(xi))\n                xmax = max(xmax, np.nanmax(xi))\n        # make sure we have seen at least one non-nan and finite\n        # value before we reset the bin range\n        if not np.isnan([xmin, xmax]).any() and not (xmin > xmax):\n            bin_range = (xmin, xmax)\n\n    # If bins are not specified either explicitly or via range,\n    # we need to figure out the range required for all datasets,\n    # and supply that to np.histogram.\n    if not input_empty and len(x) > 1:\n        if weights is not None:\n            _w = np.concatenate(w)\n        else:\n            _w = None\n\n        bins = histogram_bin_edges(np.concatenate(x),\n                                   bins, bin_range, _w)\n    else:\n        hist_kwargs['range'] = bin_range\n\n    density = bool(density)\n    if density and not stacked:\n        hist_kwargs['density'] = density\n\n    # List to store all the top coordinates of the histograms\n    tops = []  # Will have shape (n_datasets, n_bins).\n    # Loop through datasets\n    for i in range(nx):\n        # this will automatically overwrite bins,\n        # so that each histogram uses the same bins\n        m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n        tops.append(m)\n    tops = np.array(tops, float)  # causes problems later if it's an int\n    if stacked:\n        tops = tops.cumsum(axis=0)\n        # If a stacked density plot, normalize so the area of all the\n        # stacked histograms together is 1\n        if density:\n            tops = (tops / np.diff(bins)) / tops[-1].sum()\n    if cumulative:\n        slc = slice(None)\n        if isinstance(cumulative, Number) and cumulative < 0:\n            slc = slice(None, None, -1)\n        if density:\n            tops = (tops * np.diff(bins))[:, slc].cumsum(axis=1)[:, slc]\n        else:\n            tops = tops[:, slc].cumsum(axis=1)[:, slc]\n\n    patches = []\n\n    # Save autoscale state for later restoration; turn autoscaling\n    # off so we can do it all a single time at the end, instead\n    # of having it done by bar or fill and then having to be redone.\n    _saved_autoscalex = self.get_autoscalex_on()\n    _saved_autoscaley = self.get_autoscaley_on()\n    self.set_autoscalex_on(False)\n    self.set_autoscaley_on(False)\n\n    if histtype.startswith('bar'):\n\n        totwidth = np.diff(bins)\n\n        if rwidth is not None:\n            dr = np.clip(rwidth, 0, 1)\n        elif (len(tops) > 1 and\n              ((not stacked) or rcParams['_internal.classic_mode'])):\n            dr = 0.8\n        else:\n            dr = 1.0\n\n        if histtype == 'bar' and not stacked:\n            width = dr * totwidth / nx\n            dw = width\n            boffset = -0.5 * dr * totwidth * (1 - 1 / nx)\n        elif histtype == 'barstacked' or stacked:\n            width = dr * totwidth\n            boffset, dw = 0.0, 0.0\n\n        if align == 'mid':\n            boffset += 0.5 * totwidth\n        elif align == 'right':\n            boffset += totwidth\n\n        if orientation == 'horizontal':\n            _barfunc = self.barh\n            bottom_kwarg = 'left'\n        else:  # orientation == 'vertical'\n            _barfunc = self.bar\n            bottom_kwarg = 'bottom'\n\n        for m, c in zip(tops, color):\n            if bottom is None:\n                bottom = np.zeros(len(m))\n            if stacked:\n                height = m - bottom\n            else:\n                height = m\n            patch = _barfunc(bins[:-1]+boffset, height, width,\n                             align='center', log=log,\n                             color=c, **{bottom_kwarg: bottom})\n            patches.append(patch)\n            if stacked:\n                bottom[:] = m\n            boffset += dw\n\n    elif histtype.startswith('step'):\n        # these define the perimeter of the polygon\n        x = np.zeros(4 * len(bins) - 3)\n        y = np.zeros(4 * len(bins) - 3)\n\n        x[0:2*len(bins)-1:2], x[1:2*len(bins)-1:2] = bins, bins[:-1]\n        x[2*len(bins)-1:] = x[1:2*len(bins)-1][::-1]\n\n        if bottom is None:\n            bottom = np.zeros(len(bins) - 1)\n\n        y[1:2*len(bins)-1:2], y[2:2*len(bins):2] = bottom, bottom\n        y[2*len(bins)-1:] = y[1:2*len(bins)-1][::-1]\n\n        if log:\n            if orientation == 'horizontal':\n                self.set_xscale('log', nonposx='clip')\n            else:  # orientation == 'vertical'\n                self.set_yscale('log', nonposy='clip')\n\n        if align == 'left':\n            x -= 0.5*(bins[1]-bins[0])\n        elif align == 'right':\n            x += 0.5*(bins[1]-bins[0])\n\n        # If fill kwarg is set, it will be passed to the patch collection,\n        # overriding this\n        fill = (histtype == 'stepfilled')\n\n        xvals, yvals = [], []\n        for m in tops:\n            if stacked:\n                # starting point for drawing polygon\n                y[0] = y[1]\n                # top of the previous polygon becomes the bottom\n                y[2*len(bins)-1:] = y[1:2*len(bins)-1][::-1]\n            # set the top of this polygon\n            y[1:2*len(bins)-1:2], y[2:2*len(bins):2] = (m + bottom,\n                                                        m + bottom)\n            if orientation == 'horizontal':\n                xvals.append(y.copy())\n                yvals.append(x.copy())\n            else:\n                xvals.append(x.copy())\n                yvals.append(y.copy())\n\n        # stepfill is closed, step is not\n        split = -1 if fill else 2 * len(bins)\n        # add patches in reverse order so that when stacking,\n        # items lower in the stack are plotted on top of\n        # items higher in the stack\n        for x, y, c in reversed(list(zip(xvals, yvals, color))):\n            patches.append(self.fill(\n                x[:split], y[:split],\n                closed=True if fill else None,\n                facecolor=c,\n                edgecolor=None if fill else c,\n                fill=fill if fill else None))\n        for patch_list in patches:\n            for patch in patch_list:\n                if orientation == 'vertical':\n                    patch.sticky_edges.y.append(0)\n                elif orientation == 'horizontal':\n                    patch.sticky_edges.x.append(0)\n\n        # we return patches, so put it back in the expected order\n        patches.reverse()\n\n    self.set_autoscalex_on(_saved_autoscalex)\n    self.set_autoscaley_on(_saved_autoscaley)\n    self._request_autoscale_view()\n\n    if label is None:\n        labels = [None]\n    elif isinstance(label, str):\n        labels = [label]\n    elif not np.iterable(label):\n        labels = [str(label)]\n    else:\n        labels = [str(lab) for lab in label]\n\n    for patch, lbl in itertools.zip_longest(patches, labels):\n        if patch:\n            p = patch[0]\n            p.update(kwargs)\n            if lbl is not None:\n                p.set_label(lbl)\n\n            for p in patch[1:]:\n                p.update(kwargs)\n                p.set_label('_nolegend_')\n\n    if nx == 1:\n        return tops[0], bins, cbook.silent_list('Patch', patches[0])\n    else:\n        return tops, bins, cbook.silent_list('Lists of Patches', patches)",
                                "signature": "hist(self, x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\", \"weights\"])\n@cbook._rename_parameter(\"3.1\", \"normed\", \"density\")\ndef hist2d(self, x, y, bins=10, range=None, density=False, weights=None,\n           cmin=None, cmax=None, **kwargs):\n    \"\"\"\n    Make a 2D histogram plot.\n\n    Parameters\n    ----------\n    x, y : array-like, shape (n, )\n        Input values\n\n    bins : None or int or [int, int] or array-like or [array, array]\n\n        The bin specification:\n\n        - If int, the number of bins for the two dimensions\n          (nx=ny=bins).\n        - If ``[int, int]``, the number of bins in each dimension\n          (nx, ny = bins).\n        - If array-like, the bin edges for the two dimensions\n          (x_edges=y_edges=bins).\n        - If ``[array, array]``, the bin edges in each dimension\n          (x_edges, y_edges = bins).\n\n        The default value is 10.\n\n    range : array-like shape(2, 2), optional, default: None\n        The leftmost and rightmost edges of the bins along each dimension\n        (if not specified explicitly in the bins parameters): ``[[xmin,\n        xmax], [ymin, ymax]]``. All values outside of this range will be\n        considered outliers and not tallied in the histogram.\n\n    density : bool, optional, default: False\n        Normalize histogram.  *normed* is a deprecated synonym for this\n        parameter.\n\n    weights : array-like, shape (n, ), optional, default: None\n        An array of values w_i weighing each sample (x_i, y_i).\n\n    cmin : scalar, optional, default: None\n        All bins that has count less than cmin will not be displayed (set\n        to NaN before passing to imshow) and these count values in the\n        return value count histogram will also be set to nan upon return.\n\n    cmax : scalar, optional, default: None\n        All bins that has count more than cmax will not be displayed (set\n        to NaN before passing to imshow) and these count values in the\n        return value count histogram will also be set to nan upon return.\n\n    Returns\n    -------\n    h : 2D array\n        The bi-dimensional histogram of samples x and y. Values in x are\n        histogrammed along the first dimension and values in y are\n        histogrammed along the second dimension.\n    xedges : 1D array\n        The bin edges along the x axis.\n    yedges : 1D array\n        The bin edges along the y axis.\n    image : `~.matplotlib.collections.QuadMesh`\n\n    Other Parameters\n    ----------------\n    cmap : Colormap or str, optional\n        A `.colors.Colormap` instance.  If not set, use rc settings.\n\n    norm : Normalize, optional\n        A `.colors.Normalize` instance is used to\n        scale luminance data to ``[0, 1]``. If not set, defaults to\n        `.colors.Normalize()`.\n\n    vmin/vmax : None or scalar, optional\n        Arguments passed to the `~.colors.Normalize` instance.\n\n    alpha : ``0 <= scalar <= 1`` or ``None``, optional\n        The alpha blending value.\n\n    See also\n    --------\n    hist : 1D histogram plotting\n\n    Notes\n    -----\n    - Currently ``hist2d`` calculates its own axis limits, and any limits\n      previously set are ignored.\n    - Rendering the histogram with a logarithmic color scale is\n      accomplished by passing a `.colors.LogNorm` instance to the *norm*\n      keyword argument. Likewise, power-law normalization (similar\n      in effect to gamma correction) can be accomplished with\n      `.colors.PowerNorm`.\n    \"\"\"\n\n    h, xedges, yedges = np.histogram2d(x, y, bins=bins, range=range,\n                                       normed=density, weights=weights)\n\n    if cmin is not None:\n        h[h < cmin] = None\n    if cmax is not None:\n        h[h > cmax] = None\n\n    pc = self.pcolormesh(xedges, yedges, h.T, **kwargs)\n    self.set_xlim(xedges[0], xedges[-1])\n    self.set_ylim(yedges[0], yedges[-1])\n\n    return h, xedges, yedges, pc",
                                "signature": "hist2d(self, x, y, bins=10, range=None, density=False, weights=None, cmin=None, cmax=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\"])\n@docstring.dedent_interpd\ndef psd(self, x, NFFT=None, Fs=None, Fc=None, detrend=None,\n        window=None, noverlap=None, pad_to=None,\n        sides=None, scale_by_freq=None, return_line=None, **kwargs):\n    r\"\"\"\n    Plot the power spectral density.\n\n    The power spectral density :math:`P_{xx}` by Welch's average\n    periodogram method.  The vector *x* is divided into *NFFT* length\n    segments.  Each segment is detrended by function *detrend* and\n    windowed by function *window*.  *noverlap* gives the length of\n    the overlap between segments.  The :math:`|\\mathrm{fft}(i)|^2`\n    of each segment :math:`i` are averaged to compute :math:`P_{xx}`,\n    with a scaling to correct for power loss due to windowing.\n\n    If len(*x*) < *NFFT*, it will be zero padded to *NFFT*.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int\n        The number of points of overlap between segments.\n        The default value is 0 (no overlap).\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    return_line : bool\n        Whether to include the line object plotted in the returned values.\n        Default is False.\n\n    Returns\n    -------\n    Pxx : 1-D array\n        The values for the power spectrum `P_{xx}` before scaling\n        (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *Pxx*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n        Only returned if *return_line* is True.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`specgram`\n        :func:`specgram` differs in the default overlap; in not returning\n        the mean of the segment periodograms; in returning the times of the\n        segments; and in plotting a colormap instead of a line.\n\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` plots the magnitude spectrum.\n\n    :func:`csd`\n        :func:`csd` plots the spectral density between two signals.\n\n    Notes\n    -----\n    For plotting, the power is plotted as\n    :math:`10\\log_{10}(P_{xx})` for decibels, though *Pxx* itself\n    is returned.\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,\n    John Wiley & Sons (1986)\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n\n    pxx, freqs = mlab.psd(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend,\n                          window=window, noverlap=noverlap, pad_to=pad_to,\n                          sides=sides, scale_by_freq=scale_by_freq)\n    freqs += Fc\n\n    if scale_by_freq in (None, True):\n        psd_units = 'dB/Hz'\n    else:\n        psd_units = 'dB'\n\n    line = self.plot(freqs, 10 * np.log10(pxx), **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Power Spectral Density (%s)' % psd_units)\n    self.grid(True)\n    vmin, vmax = self.viewLim.intervaly\n    intv = vmax - vmin\n    logi = int(np.log10(intv))\n    if logi == 0:\n        logi = .1\n    step = 10 * logi\n    ticks = np.arange(math.floor(vmin), math.ceil(vmax) + 1, step)\n    self.set_yticks(ticks)\n\n    if return_line is None or not return_line:\n        return pxx, freqs\n    else:\n        return pxx, freqs, line",
                                "signature": "psd(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\"], label_namer=\"y\")\n@docstring.dedent_interpd\ndef csd(self, x, y, NFFT=None, Fs=None, Fc=None, detrend=None,\n        window=None, noverlap=None, pad_to=None,\n        sides=None, scale_by_freq=None, return_line=None, **kwargs):\n    r\"\"\"\n    Plot the cross-spectral density.\n\n    The cross spectral density :math:`P_{xy}` by Welch's average\n    periodogram method.  The vectors *x* and *y* are divided into\n    *NFFT* length segments.  Each segment is detrended by function\n    *detrend* and windowed by function *window*.  *noverlap* gives\n    the length of the overlap between segments.  The product of\n    the direct FFTs of *x* and *y* are averaged over each segment\n    to compute :math:`P_{xy}`, with a scaling to correct for power\n    loss due to windowing.\n\n    If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero\n    padded to *NFFT*.\n\n    Parameters\n    ----------\n    x, y : 1-D arrays or sequences\n        Arrays or sequences containing the data.\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int\n        The number of points of overlap between segments.\n        The default value is 0 (no overlap).\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    return_line : bool\n        Whether to include the line object plotted in the returned values.\n        Default is False.\n\n    Returns\n    -------\n    Pxy : 1-D array\n        The values for the cross spectrum `P_{xy}` before scaling\n        (complex valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *Pxy*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n        Only returned if *return_line* is True.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` is the equivalent to setting y=x.\n\n    Notes\n    -----\n    For plotting, the power is plotted as\n    :math:`10 \\log_{10}(P_{xy})` for decibels, though `P_{xy}` itself\n    is returned.\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,\n    John Wiley & Sons (1986)\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n\n    pxy, freqs = mlab.csd(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend,\n                          window=window, noverlap=noverlap, pad_to=pad_to,\n                          sides=sides, scale_by_freq=scale_by_freq)\n    # pxy is complex\n    freqs += Fc\n\n    line = self.plot(freqs, 10 * np.log10(np.abs(pxy)), **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Cross Spectrum Magnitude (dB)')\n    self.grid(True)\n    vmin, vmax = self.viewLim.intervaly\n\n    intv = vmax - vmin\n    step = 10 * int(np.log10(intv))\n\n    ticks = np.arange(math.floor(vmin), math.ceil(vmax) + 1, step)\n    self.set_yticks(ticks)\n\n    if return_line is None or not return_line:\n        return pxy, freqs\n    else:\n        return pxy, freqs, line",
                                "signature": "csd(self, x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\"])\n@docstring.dedent_interpd\ndef magnitude_spectrum(self, x, Fs=None, Fc=None, window=None,\n                       pad_to=None, sides=None, scale=None,\n                       **kwargs):\n    \"\"\"\n    Plot the magnitude spectrum.\n\n    Compute the magnitude spectrum of *x*.  Data is padded to a\n    length of *pad_to* and the windowing function *window* is applied to\n    the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data.\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    scale : {'default', 'linear', 'dB'}\n        The scaling of the values in the *spec*.  'linear' is no scaling.\n        'dB' returns the values in dB scale, i.e., the dB amplitude\n        (20 * log10). 'default' is 'linear'.\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the magnitude spectrum before scaling (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` plots the power spectral density.`.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` plots the angles of the corresponding\n        frequencies.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` plots the phase (unwrapped angle) of the\n        corresponding frequencies.\n\n    :func:`specgram`\n        :func:`specgram` can plot the magnitude spectrum of segments within\n        the signal in a colormap.\n\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n\n    if scale is None or scale == 'default':\n        scale = 'linear'\n\n    spec, freqs = mlab.magnitude_spectrum(x=x, Fs=Fs, window=window,\n                                          pad_to=pad_to, sides=sides)\n    freqs += Fc\n\n    if scale == 'linear':\n        Z = spec\n        yunits = 'energy'\n    elif scale == 'dB':\n        Z = 20. * np.log10(spec)\n        yunits = 'dB'\n    else:\n        raise ValueError('Unknown scale %s', scale)\n\n    lines = self.plot(freqs, Z, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Magnitude (%s)' % yunits)\n\n    return spec, freqs, lines[0]",
                                "signature": "magnitude_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\"])\n@docstring.dedent_interpd\ndef angle_spectrum(self, x, Fs=None, Fc=None, window=None,\n                   pad_to=None, sides=None, **kwargs):\n    \"\"\"\n    Plot the angle spectrum.\n\n    Compute the angle spectrum (wrapped phase spectrum) of *x*.\n    Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data.\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the angle spectrum in radians (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`magnitude_spectrum`\n        :func:`angle_spectrum` plots the magnitudes of the corresponding\n        frequencies.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` plots the unwrapped version of this\n        function.\n\n    :func:`specgram`\n        :func:`specgram` can plot the angle spectrum of segments within the\n        signal in a colormap.\n\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n\n    spec, freqs = mlab.angle_spectrum(x=x, Fs=Fs, window=window,\n                                      pad_to=pad_to, sides=sides)\n    freqs += Fc\n\n    lines = self.plot(freqs, spec, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Angle (radians)')\n\n    return spec, freqs, lines[0]",
                                "signature": "angle_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\"])\n@docstring.dedent_interpd\ndef phase_spectrum(self, x, Fs=None, Fc=None, window=None,\n                   pad_to=None, sides=None, **kwargs):\n    \"\"\"\n    Plot the phase spectrum.\n\n    Compute the phase spectrum (unwrapped angle spectrum) of *x*.\n    Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the phase spectrum in radians (real valued).\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*.\n\n    line : `~matplotlib.lines.Line2D`\n        The line created by this function.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    See Also\n    --------\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` plots the magnitudes of the\n        corresponding frequencies.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` plots the wrapped version of this function.\n\n    :func:`specgram`\n        :func:`specgram` can plot the phase spectrum of segments within the\n        signal in a colormap.\n\n    \"\"\"\n    if Fc is None:\n        Fc = 0\n\n    spec, freqs = mlab.phase_spectrum(x=x, Fs=Fs, window=window,\n                                      pad_to=pad_to, sides=sides)\n    freqs += Fc\n\n    lines = self.plot(freqs, spec, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Phase (radians)')\n\n    return spec, freqs, lines[0]",
                                "signature": "phase_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\", \"y\"])\n@docstring.dedent_interpd\ndef cohere(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n           window=mlab.window_hanning, noverlap=0, pad_to=None,\n           sides='default', scale_by_freq=None, **kwargs):\n    r\"\"\"\n    Plot the coherence between *x* and *y*.\n\n    Plot the coherence between *x* and *y*.  Coherence is the\n    normalized cross spectral density:\n\n    .. math::\n\n      C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\n\n    Parameters\n    ----------\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int\n        The number of points of overlap between blocks.  The\n        default value is 0 (no overlap).\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n\n    Returns\n    -------\n    Cxy : 1-D array\n        The coherence vector.\n\n    freqs : 1-D array\n        The frequencies for the elements in *Cxy*.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments control the `.Line2D` properties:\n\n        %(_Line2D_docstr)s\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,\n    John Wiley & Sons (1986)\n    \"\"\"\n    cxy, freqs = mlab.cohere(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend,\n                             window=window, noverlap=noverlap,\n                             scale_by_freq=scale_by_freq)\n    freqs += Fc\n\n    self.plot(freqs, cxy, **kwargs)\n    self.set_xlabel('Frequency')\n    self.set_ylabel('Coherence')\n    self.grid(True)\n\n    return cxy, freqs",
                                "signature": "cohere(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"x\"])\n@docstring.dedent_interpd\ndef specgram(self, x, NFFT=None, Fs=None, Fc=None, detrend=None,\n             window=None, noverlap=None,\n             cmap=None, xextent=None, pad_to=None, sides=None,\n             scale_by_freq=None, mode=None, scale=None,\n             vmin=None, vmax=None, **kwargs):\n    \"\"\"\n    Plot a spectrogram.\n\n    Compute and plot a spectrogram of data in *x*.  Data are split into\n    *NFFT* length segments and the spectrum of each section is\n    computed.  The windowing function *window* is applied to each\n    segment, and the amount of overlap of each segment is\n    specified with *noverlap*. The spectrogram is plotted as a colormap\n    (using imshow).\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data.\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    mode : {'default', 'psd', 'magnitude', 'angle', 'phase'}\n        What sort of spectrum to use.  Default is 'psd', which takes the\n        power spectral density.  'magnitude' returns the magnitude\n        spectrum.  'angle' returns the phase spectrum without unwrapping.\n        'phase' returns the phase spectrum with unwrapping.\n\n    noverlap : int\n        The number of points of overlap between blocks.  The\n        default value is 128.\n\n    scale : {'default', 'linear', 'dB'}\n        The scaling of the values in the *spec*.  'linear' is no scaling.\n        'dB' returns the values in dB scale.  When *mode* is 'psd',\n        this is dB power (10 * log10).  Otherwise this is dB amplitude\n        (20 * log10). 'default' is 'dB' if *mode* is 'psd' or\n        'magnitude' and 'linear' otherwise.  This must be 'linear'\n        if *mode* is 'angle' or 'phase'.\n\n    Fc : int\n        The center frequency of *x* (defaults to 0), which offsets\n        the x extents of the plot to reflect the frequency range used\n        when a signal is acquired and then filtered and downsampled to\n        baseband.\n\n    cmap\n        A :class:`matplotlib.colors.Colormap` instance; if *None*, use\n        default determined by rc\n\n    xextent : *None* or (xmin, xmax)\n        The image extent along the x-axis. The default sets *xmin* to the\n        left border of the first bin (*spectrum* column) and *xmax* to the\n        right border of the last bin. Note that for *noverlap>0* the width\n        of the bins is smaller than those of the segments.\n\n    **kwargs\n        Additional keyword arguments are passed on to imshow which makes\n        the specgram image.\n\n    Returns\n    -------\n    spectrum : 2-D array\n        Columns are the periodograms of successive segments.\n\n    freqs : 1-D array\n        The frequencies corresponding to the rows in *spectrum*.\n\n    t : 1-D array\n        The times corresponding to midpoints of segments (i.e., the columns\n        in *spectrum*).\n\n    im : instance of class :class:`~matplotlib.image.AxesImage`\n        The image created by imshow containing the spectrogram\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` differs in the default overlap; in returning the mean\n        of the segment periodograms; in not returning times; and in\n        generating a line plot instead of colormap.\n\n    :func:`magnitude_spectrum`\n        A single spectrum, similar to having a single segment when *mode*\n        is 'magnitude'. Plots a line instead of a colormap.\n\n    :func:`angle_spectrum`\n        A single spectrum, similar to having a single segment when *mode*\n        is 'angle'. Plots a line instead of a colormap.\n\n    :func:`phase_spectrum`\n        A single spectrum, similar to having a single segment when *mode*\n        is 'phase'. Plots a line instead of a colormap.\n\n    Notes\n    -----\n    The parameters *detrend* and *scale_by_freq* do only apply when *mode*\n    is set to 'psd'.\n    \"\"\"\n    if NFFT is None:\n        NFFT = 256  # same default as in mlab.specgram()\n    if Fc is None:\n        Fc = 0  # same default as in mlab._spectral_helper()\n    if noverlap is None:\n        noverlap = 128  # same default as in mlab.specgram()\n\n    if mode == 'complex':\n        raise ValueError('Cannot plot a complex specgram')\n\n    if scale is None or scale == 'default':\n        if mode in ['angle', 'phase']:\n            scale = 'linear'\n        else:\n            scale = 'dB'\n    elif mode in ['angle', 'phase'] and scale == 'dB':\n        raise ValueError('Cannot use dB scale with angle or phase mode')\n\n    spec, freqs, t = mlab.specgram(x=x, NFFT=NFFT, Fs=Fs,\n                                   detrend=detrend, window=window,\n                                   noverlap=noverlap, pad_to=pad_to,\n                                   sides=sides,\n                                   scale_by_freq=scale_by_freq,\n                                   mode=mode)\n\n    if scale == 'linear':\n        Z = spec\n    elif scale == 'dB':\n        if mode is None or mode == 'default' or mode == 'psd':\n            Z = 10. * np.log10(spec)\n        else:\n            Z = 20. * np.log10(spec)\n    else:\n        raise ValueError('Unknown scale %s', scale)\n\n    Z = np.flipud(Z)\n\n    if xextent is None:\n        # padding is needed for first and last segment:\n        pad_xextent = (NFFT-noverlap) / Fs / 2\n        xextent = np.min(t) - pad_xextent, np.max(t) + pad_xextent\n    xmin, xmax = xextent\n    freqs += Fc\n    extent = xmin, xmax, freqs[0], freqs[-1]\n    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax,\n                     **kwargs)\n    self.axis('auto')\n\n    return spec, freqs, t, im",
                                "signature": "specgram(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, **kwargs)"
                            },
                            {
                                "code": "@docstring.dedent_interpd\ndef spy(self, Z, precision=0, marker=None, markersize=None,\n        aspect='equal', origin=\"upper\", **kwargs):\n    \"\"\"\n    Plot the sparsity pattern of a 2D array.\n\n    This visualizes the non-zero values of the array.\n\n    Two plotting styles are available: image and marker. Both\n    are available for full arrays, but only the marker style\n    works for `scipy.sparse.spmatrix` instances.\n\n    **Image style**\n\n    If *marker* and *markersize* are *None*, `~.Axes.imshow` is used. Any\n    extra remaining keyword arguments are passed to this method.\n\n    **Marker style**\n\n    If *Z* is a `scipy.sparse.spmatrix` or *marker* or *markersize* are\n    *None*, a `.Line2D` object will be returned with the value of marker\n    determining the marker type, and any remaining keyword arguments\n    passed to `~.Axes.plot`.\n\n    Parameters\n    ----------\n    Z : array-like (M, N)\n        The array to be plotted.\n\n    precision : float or 'present', optional, default: 0\n        If *precision* is 0, any non-zero value will be plotted. Otherwise,\n        values of :math:`|Z| > precision` will be plotted.\n\n        For :class:`scipy.sparse.spmatrix` instances, you can also\n        pass 'present'. In this case any value present in the array\n        will be plotted, even if it is identically zero.\n\n    origin : {'upper', 'lower'}, optional\n        Place the [0, 0] index of the array in the upper left or lower left\n        corner of the axes. The convention 'upper' is typically used for\n        matrices and images.\n        If not given, :rc:`image.origin` is used, defaulting to 'upper'.\n\n\n    aspect : {'equal', 'auto', None} or float, optional\n        Controls the aspect ratio of the axes. The aspect is of particular\n        relevance for images since it may distort the image, i.e. pixel\n        will not be square.\n\n        This parameter is a shortcut for explicitly calling\n        `.Axes.set_aspect`. See there for further details.\n\n        - 'equal': Ensures an aspect ratio of 1. Pixels will be square.\n        - 'auto': The axes is kept fixed and the aspect is adjusted so\n          that the data fit in the axes. In general, this will result in\n          non-square pixels.\n        - *None*: Use :rc:`image.aspect`.\n\n        Default: 'equal'\n\n    Returns\n    -------\n    ret : `~matplotlib.image.AxesImage` or `.Line2D`\n        The return type depends on the plotting style (see above).\n\n    Other Parameters\n    ----------------\n    **kwargs\n        The supported additional parameters depend on the plotting style.\n\n        For the image style, you can pass the following additional\n        parameters of `~.Axes.imshow`:\n\n        - *cmap*\n        - *alpha*\n        - *url*\n        - any `.Artist` properties (passed on to the `.AxesImage`)\n\n        For the marker style, you can pass any `.Line2D` property except\n        for *linestyle*:\n\n        %(_Line2D_docstr)s\n    \"\"\"\n    if marker is None and markersize is None and hasattr(Z, 'tocoo'):\n        marker = 's'\n    if marker is None and markersize is None:\n        Z = np.asarray(Z)\n        mask = np.abs(Z) > precision\n\n        if 'cmap' not in kwargs:\n            kwargs['cmap'] = mcolors.ListedColormap(['w', 'k'],\n                                                    name='binary')\n        if 'interpolation' in kwargs:\n            raise TypeError(\n                \"spy() got an unexpected keyword argument 'interpolation'\")\n        ret = self.imshow(mask, interpolation='nearest', aspect=aspect,\n                          origin=origin, **kwargs)\n    else:\n        if hasattr(Z, 'tocoo'):\n            c = Z.tocoo()\n            if precision == 'present':\n                y = c.row\n                x = c.col\n            else:\n                nonzero = np.abs(c.data) > precision\n                y = c.row[nonzero]\n                x = c.col[nonzero]\n        else:\n            Z = np.asarray(Z)\n            nonzero = np.abs(Z) > precision\n            y, x = np.nonzero(nonzero)\n        if marker is None:\n            marker = 's'\n        if markersize is None:\n            markersize = 10\n        if 'linestyle' in kwargs:\n            raise TypeError(\n                \"spy() got an unexpected keyword argument 'linestyle'\")\n        marks = mlines.Line2D(x, y, linestyle='None',\n                     marker=marker, markersize=markersize, **kwargs)\n        self.add_line(marks)\n        nr, nc = Z.shape\n        self.set_xlim(-0.5, nc - 0.5)\n        self.set_ylim(nr - 0.5, -0.5)\n        self.set_aspect(aspect)\n        ret = marks\n    self.title.set_y(1.05)\n    self.xaxis.tick_top()\n    self.xaxis.set_ticks_position('both')\n    self.xaxis.set_major_locator(mticker.MaxNLocator(nbins=9,\n                                             steps=[1, 2, 5, 10],\n                                             integer=True))\n    self.yaxis.set_major_locator(mticker.MaxNLocator(nbins=9,\n                                             steps=[1, 2, 5, 10],\n                                             integer=True))\n    return ret",
                                "signature": "spy(self, Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs)"
                            },
                            {
                                "code": "def matshow(self, Z, **kwargs):\n    \"\"\"\n    Plot the values of a 2D matrix or array as color-coded image.\n\n    The matrix will be shown the way it would be printed, with the first\n    row at the top.  Row and column numbering is zero-based.\n\n    Parameters\n    ----------\n    Z : array-like(M, N)\n        The matrix to be displayed.\n\n    Returns\n    -------\n    image : `~matplotlib.image.AxesImage`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.axes.Axes.imshow` arguments\n\n    See Also\n    --------\n    imshow : More general function to plot data on a 2D regular raster.\n\n    Notes\n    -----\n    This is just a convenience function wrapping `.imshow` to set useful\n    defaults for displaying a matrix. In particular:\n\n    - Set ``origin='upper'``.\n    - Set ``interpolation='nearest'``.\n    - Set ``aspect='equal'``.\n    - Ticks are placed to the left and above.\n    - Ticks are formatted to show integer indices.\n\n    \"\"\"\n    Z = np.asanyarray(Z)\n    kw = {'origin': 'upper',\n          'interpolation': 'nearest',\n          'aspect': 'equal',          # (already the imshow default)\n          **kwargs}\n    im = self.imshow(Z, **kw)\n    self.title.set_y(1.05)\n    self.xaxis.tick_top()\n    self.xaxis.set_ticks_position('both')\n    self.xaxis.set_major_locator(mticker.MaxNLocator(nbins=9,\n                                             steps=[1, 2, 5, 10],\n                                             integer=True))\n    self.yaxis.set_major_locator(mticker.MaxNLocator(nbins=9,\n                                             steps=[1, 2, 5, 10],\n                                             integer=True))\n    return im",
                                "signature": "matshow(self, Z, **kwargs)"
                            },
                            {
                                "code": "@_preprocess_data(replace_names=[\"dataset\"])\ndef violinplot(self, dataset, positions=None, vert=True, widths=0.5,\n               showmeans=False, showextrema=True, showmedians=False,\n               quantiles=None, points=100, bw_method=None):\n    \"\"\"\n    Make a violin plot.\n\n    Make a violin plot for each column of *dataset* or each vector in\n    sequence *dataset*.  Each filled area extends to represent the\n    entire data range, with optional lines at the mean, the median,\n    the minimum, the maximum, and user-specified quantiles.\n\n    Parameters\n    ----------\n    dataset : Array or a sequence of vectors.\n      The input data.\n\n    positions : array-like, default = [1, 2, ..., n]\n      Sets the positions of the violins. The ticks and limits are\n      automatically set to match the positions.\n\n    vert : bool, default = True.\n      If true, creates a vertical violin plot.\n      Otherwise, creates a horizontal violin plot.\n\n    widths : array-like, default = 0.5\n      Either a scalar or a vector that sets the maximal width of\n      each violin. The default is 0.5, which uses about half of the\n      available horizontal space.\n\n    showmeans : bool, default = False\n      If `True`, will toggle rendering of the means.\n\n    showextrema : bool, default = True\n      If `True`, will toggle rendering of the extrema.\n\n    showmedians : bool, default = False\n      If `True`, will toggle rendering of the medians.\n\n    quantiles : array-like, default = None\n      If not None, set a list of floats in interval [0, 1] for each violin,\n      which stands for the quantiles that will be rendered for that\n      violin.\n\n    points : scalar, default = 100\n      Defines the number of points to evaluate each of the\n      gaussian kernel density estimations at.\n\n    bw_method : str, scalar or callable, optional\n      The method used to calculate the estimator bandwidth.  This can be\n      'scott', 'silverman', a scalar constant or a callable.  If a\n      scalar, this will be used directly as `kde.factor`.  If a\n      callable, it should take a `GaussianKDE` instance as its only\n      parameter and return a scalar. If None (default), 'scott' is used.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the violinplot to a\n      list of the corresponding collection instances created. The\n      dictionary has the following keys:\n\n      - ``bodies``: A list of the `~.collections.PolyCollection`\n        instances containing the filled area of each violin.\n\n      - ``cmeans``: A `~.collections.LineCollection` instance that marks\n        the mean values of each of the violin's distribution.\n\n      - ``cmins``: A `~.collections.LineCollection` instance that marks\n        the bottom of each violin's distribution.\n\n      - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n        the top of each violin's distribution.\n\n      - ``cbars``: A `~.collections.LineCollection` instance that marks\n        the centers of each violin's distribution.\n\n      - ``cmedians``: A `~.collections.LineCollection` instance that\n        marks the median values of each of the violin's distribution.\n\n      - ``cquantiles``: A `~.collections.LineCollection` instance created\n        to identify the quantile values of each of the violin's\n        distribution.\n\n    \"\"\"\n\n    def _kde_method(X, coords):\n        # fallback gracefully if the vector contains only one value\n        if np.all(X[0] == X):\n            return (X[0] == coords).astype(float)\n        kde = mlab.GaussianKDE(X, bw_method)\n        return kde.evaluate(coords)\n\n    vpstats = cbook.violin_stats(dataset, _kde_method, points=points,\n                                 quantiles=quantiles)\n    return self.violin(vpstats, positions=positions, vert=vert,\n                       widths=widths, showmeans=showmeans,\n                       showextrema=showextrema, showmedians=showmedians)",
                                "signature": "violinplot(self, dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, quantiles=None, points=100, bw_method=None)"
                            },
                            {
                                "code": "def violin(self, vpstats, positions=None, vert=True, widths=0.5,\n           showmeans=False, showextrema=True, showmedians=False):\n    \"\"\"Drawing function for violin plots.\n\n    Draw a violin plot for each column of *vpstats*. Each filled area\n    extends to represent the entire data range, with optional lines at the\n    mean, the median, the minimum, the maximum, and the quantiles values.\n\n    Parameters\n    ----------\n    vpstats : list of dicts\n      A list of dictionaries containing stats for each violin plot.\n      Required keys are:\n\n      - ``coords``: A list of scalars containing the coordinates that\n        the violin's kernel density estimate were evaluated at.\n\n      - ``vals``: A list of scalars containing the values of the\n        kernel density estimate at each of the coordinates given\n        in *coords*.\n\n      - ``mean``: The mean value for this violin's dataset.\n\n      - ``median``: The median value for this violin's dataset.\n\n      - ``min``: The minimum value for this violin's dataset.\n\n      - ``max``: The maximum value for this violin's dataset.\n\n      Optional keys are:\n\n      - ``quantiles``: A list of scalars containing the quantile values\n        for this violin's dataset.\n\n    positions : array-like, default = [1, 2, ..., n]\n      Sets the positions of the violins. The ticks and limits are\n      automatically set to match the positions.\n\n    vert : bool, default = True.\n      If true, plots the violins vertically.\n      Otherwise, plots the violins horizontally.\n\n    widths : array-like, default = 0.5\n      Either a scalar or a vector that sets the maximal width of\n      each violin. The default is 0.5, which uses about half of the\n      available horizontal space.\n\n    showmeans : bool, default = False\n      If true, will toggle rendering of the means.\n\n    showextrema : bool, default = True\n      If true, will toggle rendering of the extrema.\n\n    showmedians : bool, default = False\n      If true, will toggle rendering of the medians.\n\n    Returns\n    -------\n    result : dict\n      A dictionary mapping each component of the violinplot to a\n      list of the corresponding collection instances created. The\n      dictionary has the following keys:\n\n      - ``bodies``: A list of the `~.collections.PolyCollection`\n        instances containing the filled area of each violin.\n\n      - ``cmeans``: A `~.collections.LineCollection` instance that marks\n        the mean values of each of the violin's distribution.\n\n      - ``cmins``: A `~.collections.LineCollection` instance that marks\n        the bottom of each violin's distribution.\n\n      - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n        the top of each violin's distribution.\n\n      - ``cbars``: A `~.collections.LineCollection` instance that marks\n        the centers of each violin's distribution.\n\n      - ``cmedians``: A `~.collections.LineCollection` instance that\n        marks the median values of each of the violin's distribution.\n\n      - ``cquantiles``: A `~.collections.LineCollection` instance created\n        to identify the quantiles values of each of the violin's\n        distribution.\n\n    \"\"\"\n\n    # Statistical quantities to be plotted on the violins\n    means = []\n    mins = []\n    maxes = []\n    medians = []\n    quantiles = np.asarray([])\n\n    # Collections to be returned\n    artists = {}\n\n    N = len(vpstats)\n    datashape_message = (\"List of violinplot statistics and `{0}` \"\n                         \"values must have the same length\")\n\n    # Validate positions\n    if positions is None:\n        positions = range(1, N + 1)\n    elif len(positions) != N:\n        raise ValueError(datashape_message.format(\"positions\"))\n\n    # Validate widths\n    if np.isscalar(widths):\n        widths = [widths] * N\n    elif len(widths) != N:\n        raise ValueError(datashape_message.format(\"widths\"))\n\n    # Calculate ranges for statistics lines\n    pmins = -0.25 * np.array(widths) + positions\n    pmaxes = 0.25 * np.array(widths) + positions\n\n    # Check whether we are rendering vertically or horizontally\n    if vert:\n        fill = self.fill_betweenx\n        perp_lines = self.hlines\n        par_lines = self.vlines\n    else:\n        fill = self.fill_between\n        perp_lines = self.vlines\n        par_lines = self.hlines\n\n    if rcParams['_internal.classic_mode']:\n        fillcolor = 'y'\n        edgecolor = 'r'\n    else:\n        fillcolor = edgecolor = self._get_lines.get_next_color()\n\n    # Render violins\n    bodies = []\n    for stats, pos, width in zip(vpstats, positions, widths):\n        # The 0.5 factor reflects the fact that we plot from v-p to\n        # v+p\n        vals = np.array(stats['vals'])\n        vals = 0.5 * width * vals / vals.max()\n        bodies += [fill(stats['coords'],\n                        -vals + pos,\n                        vals + pos,\n                        facecolor=fillcolor,\n                        alpha=0.3)]\n        means.append(stats['mean'])\n        mins.append(stats['min'])\n        maxes.append(stats['max'])\n        medians.append(stats['median'])\n        q = stats.get('quantiles')\n        if q is not None:\n            # If exist key quantiles, assume it's a list of floats\n            quantiles = np.concatenate((quantiles, q))\n    artists['bodies'] = bodies\n\n    # Render means\n    if showmeans:\n        artists['cmeans'] = perp_lines(means, pmins, pmaxes,\n                                       colors=edgecolor)\n\n    # Render extrema\n    if showextrema:\n        artists['cmaxes'] = perp_lines(maxes, pmins, pmaxes,\n                                       colors=edgecolor)\n        artists['cmins'] = perp_lines(mins, pmins, pmaxes,\n                                      colors=edgecolor)\n        artists['cbars'] = par_lines(positions, mins, maxes,\n                                     colors=edgecolor)\n\n    # Render medians\n    if showmedians:\n        artists['cmedians'] = perp_lines(medians,\n                                         pmins,\n                                         pmaxes,\n                                         colors=edgecolor)\n\n    # Render quantile values\n    if quantiles.size > 0:\n        # Recalculate ranges for statistics lines for quantiles.\n        # ppmins are the left end of quantiles lines\n        ppmins = np.asarray([])\n        # pmaxes are the right end of quantiles lines\n        ppmaxs = np.asarray([])\n        for stats, cmin, cmax in zip(vpstats, pmins, pmaxes):\n            q = stats.get('quantiles')\n            if q is not None:\n                ppmins = np.concatenate((ppmins, [cmin] * np.size(q)))\n                ppmaxs = np.concatenate((ppmaxs, [cmax] * np.size(q)))\n        # Start rendering\n        artists['cquantiles'] = perp_lines(quantiles, ppmins, ppmaxs,\n                                             colors=edgecolor)\n\n    return artists",
                                "signature": "violin(self, vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    40
                ],
                "np.ndim": [
                    6272,
                    6274,
                    44,
                    6304
                ],
                "np": [
                    4608,
                    6657,
                    4610,
                    7225,
                    7682,
                    4613,
                    5637,
                    4615,
                    5640,
                    7683,
                    4618,
                    5642,
                    4622,
                    4623,
                    5648,
                    6673,
                    5651,
                    6676,
                    6720,
                    7700,
                    6721,
                    7704,
                    5658,
                    7705,
                    5660,
                    7706,
                    5150,
                    4643,
                    4644,
                    4645,
                    4646,
                    5157,
                    5158,
                    5160,
                    44,
                    6705,
                    4658,
                    51,
                    2611,
                    4659,
                    4662,
                    4663,
                    5175,
                    57,
                    4665,
                    59,
                    4666,
                    1085,
                    4667,
                    1087,
                    4668,
                    1089,
                    5185,
                    4675,
                    5187,
                    5915,
                    1094,
                    1095,
                    1096,
                    4679,
                    5191,
                    2123,
                    5194,
                    5916,
                    6727,
                    7769,
                    4698,
                    4705,
                    6242,
                    4707,
                    5220,
                    4709,
                    5221,
                    2151,
                    4711,
                    4712,
                    4713,
                    4714,
                    4715,
                    6249,
                    6250,
                    3695,
                    3696,
                    4209,
                    6255,
                    6256,
                    4724,
                    6257,
                    6258,
                    3705,
                    4731,
                    6271,
                    3200,
                    6272,
                    6273,
                    3203,
                    6274,
                    6275,
                    3207,
                    6794,
                    1163,
                    3211,
                    1165,
                    1167,
                    1172,
                    1173,
                    1174,
                    2713,
                    6304,
                    6312,
                    4779,
                    4782,
                    4783,
                    7874,
                    3270,
                    3271,
                    3272,
                    3273,
                    4807,
                    3275,
                    4811,
                    4817,
                    4821,
                    4824,
                    5339,
                    4831,
                    5346,
                    5347,
                    5860,
                    5349,
                    3303,
                    3304,
                    4842,
                    2796,
                    5364,
                    4854,
                    4856,
                    6908,
                    5373,
                    4863,
                    5375,
                    5379,
                    4870,
                    5382,
                    1289,
                    1291,
                    1292,
                    1294,
                    5906,
                    2327,
                    4376,
                    1305,
                    4377,
                    1307,
                    5913,
                    1309,
                    2333,
                    1311,
                    4384,
                    1313,
                    2338,
                    5408,
                    1316,
                    1317,
                    1318,
                    2340,
                    5409,
                    7977,
                    4394,
                    5914,
                    2350,
                    7993,
                    1341,
                    1343,
                    7999,
                    1345,
                    8000,
                    1347,
                    4419,
                    8023,
                    2910,
                    3934,
                    2916,
                    8037,
                    1387,
                    7020,
                    1392,
                    1393,
                    4465,
                    7026,
                    7030,
                    2430,
                    8065,
                    8067,
                    8071,
                    3976,
                    8072,
                    3982,
                    3983,
                    6546,
                    2963,
                    7575,
                    3993,
                    3994,
                    3995,
                    7577,
                    7581,
                    4000,
                    4001,
                    4002,
                    6563,
                    7586,
                    2992,
                    6606,
                    6607,
                    6097,
                    6612,
                    6613,
                    7126,
                    6616,
                    2013,
                    2014,
                    7133,
                    2016,
                    4065,
                    6624,
                    2019,
                    6628,
                    7135,
                    6122,
                    6123,
                    2028,
                    6643,
                    6645,
                    4601,
                    6651,
                    4094,
                    4607
                ],
                "bins": [
                    6657,
                    6673,
                    6549,
                    4758,
                    6550,
                    4762,
                    6811,
                    4765,
                    6813,
                    4778,
                    4779,
                    44,
                    45,
                    4781,
                    47,
                    4782,
                    4783,
                    4784,
                    51,
                    53,
                    6710,
                    55,
                    59,
                    6720,
                    6721,
                    6723,
                    6724,
                    6727,
                    6729,
                    6730,
                    6739,
                    6741,
                    6753,
                    6755,
                    6628,
                    6629,
                    6765,
                    6643,
                    6651,
                    6908
                ],
                "isinstance": [
                    4096,
                    6112,
                    4196,
                    4197,
                    678,
                    647,
                    4198,
                    3977,
                    6792,
                    5900,
                    47,
                    4767,
                    5658,
                    4408,
                    4090,
                    5660,
                    6654,
                    3007
                ],
                "str": [
                    4196,
                    4198,
                    6792,
                    6795,
                    6797,
                    47,
                    3007
                ],
                "np.histogram": [
                    51,
                    6643
                ],
                "arr": [
                    57,
                    51
                ],
                "range": [
                    3972,
                    6543,
                    51,
                    7988,
                    56,
                    57,
                    59,
                    6591,
                    4676,
                    4677,
                    4680,
                    4681,
                    4684,
                    4812,
                    4692,
                    4693,
                    4699,
                    4700,
                    6640,
                    3958,
                    6908
                ],
                "weights": [
                    6577,
                    6578,
                    51,
                    6909,
                    6623
                ],
                "np.min": [
                    7586,
                    6122,
                    1387,
                    2796,
                    4622,
                    4623,
                    1392,
                    5913,
                    57,
                    5915
                ],
                "np.max": [
                    7586,
                    1387,
                    2796,
                    6123,
                    4622,
                    4623,
                    1393,
                    57,
                    5914,
                    5916
                ],
                "np.linspace": [
                    59,
                    4821,
                    4854
                ],
                "_log": [
                    4220,
                    62
                ],
                "logging.getLogger": [
                    62
                ],
                "logging": [
                    62
                ],
                "__name__": [
                    62
                ],
                "_bounds": [
                    83,
                    78
                ],
                "mtransforms.Bbox.from_bounds": [
                    78,
                    567
                ],
                "mtransforms.Bbox": [
                    78,
                    567
                ],
                "mtransforms": [
                    6112,
                    777,
                    5900,
                    78,
                    4430,
                    4753,
                    4626,
                    4627,
                    84,
                    86,
                    567
                ],
                "bounds": [
                    568,
                    535,
                    78,
                    455
                ],
                "_trans": [
                    84,
                    79
                ],
                "trans": [
                    962,
                    1026,
                    4872,
                    4874,
                    4843,
                    973,
                    1037,
                    847,
                    848,
                    79,
                    4845,
                    916,
                    917
                ],
                "_parent": [
                    80,
                    85
                ],
                "parent": [
                    80
                ],
                "bbox": [
                    83,
                    84
                ],
                "bb": [
                    456,
                    458,
                    84,
                    86,
                    87
                ],
                "mtransforms.TransformedBbox": [
                    84,
                    86
                ],
                "tr": [
                    85,
                    86
                ],
                "_parent.figure.transFigure.inverted": [
                    85
                ],
                "_parent.figure.transFigure": [
                    85
                ],
                "_parent.figure": [
                    85
                ],
                "inset_locator": [
                    456,
                    89,
                    463,
                    455
                ],
                "_AxesBase": [
                    96
                ],
                "cbook.deprecated": [
                    117
                ],
                "cbook": [
                    764,
                    5128,
                    5643,
                    144,
                    5649,
                    1170,
                    3731,
                    1301,
                    1302,
                    1303,
                    4760,
                    6553,
                    6555,
                    4252,
                    6556,
                    6811,
                    6813,
                    5152,
                    6816,
                    2595,
                    6565,
                    2599,
                    3625,
                    5034,
                    5163,
                    4396,
                    5421,
                    5422,
                    687,
                    4399,
                    5168,
                    6578,
                    3898,
                    2107,
                    2364,
                    5690,
                    1092,
                    197,
                    5317,
                    7879,
                    3913,
                    204,
                    3151,
                    2780,
                    2141,
                    5341,
                    2912,
                    2146,
                    2274,
                    4198,
                    5352,
                    3435,
                    1644,
                    5357,
                    3310,
                    117,
                    4598,
                    5880,
                    2300
                ],
                "property": [
                    118
                ],
                "titles": [
                    144,
                    197,
                    194,
                    141
                ],
                "self._left_title": [
                    194,
                    141
                ],
                "self": [
                    4102,
                    4103,
                    2109,
                    6282,
                    141,
                    142,
                    143,
                    6290,
                    6296,
                    6299,
                    6308,
                    6312,
                    6313,
                    6319,
                    6320,
                    6327,
                    6328,
                    194,
                    195,
                    196,
                    208,
                    220,
                    2277,
                    246,
                    247,
                    253,
                    2315,
                    2317,
                    2319,
                    2321,
                    4370,
                    4371,
                    4372,
                    2325,
                    2327,
                    280,
                    281,
                    2328,
                    2330,
                    2331,
                    2333,
                    2334,
                    2336,
                    4389,
                    295,
                    2344,
                    4391,
                    2347,
                    4427,
                    4449,
                    2402,
                    4450,
                    4451,
                    4452,
                    4454,
                    4455,
                    2418,
                    2424,
                    2427,
                    395,
                    400,
                    401,
                    402,
                    405,
                    6570,
                    6571,
                    6574,
                    6591,
                    451,
                    455,
                    458,
                    465,
                    2544,
                    4596,
                    6666,
                    6667,
                    6668,
                    6669,
                    529,
                    532,
                    540,
                    551,
                    553,
                    2602,
                    6697,
                    6700,
                    558,
                    562,
                    2611,
                    2612,
                    566,
                    2615,
                    2618,
                    2619,
                    6734,
                    6736,
                    618,
                    6770,
                    4736,
                    6786,
                    6787,
                    6788,
                    4741,
                    648,
                    650,
                    2718,
                    2719,
                    2720,
                    679,
                    681,
                    4798,
                    4799,
                    4802,
                    2777,
                    2788,
                    2793,
                    4843,
                    2796,
                    750,
                    2802,
                    4852,
                    770,
                    771,
                    6916,
                    6917,
                    6918,
                    4872,
                    779,
                    780,
                    4880,
                    839,
                    4935,
                    4936,
                    4937,
                    843,
                    844,
                    4938,
                    4941,
                    847,
                    849,
                    850,
                    4947,
                    4954,
                    2907,
                    4955,
                    4956,
                    4964,
                    4966,
                    4968,
                    4969,
                    7020,
                    7021,
                    7022,
                    7023,
                    7024,
                    2931,
                    4981,
                    4983,
                    4984,
                    4985,
                    7031,
                    908,
                    912,
                    913,
                    916,
                    918,
                    919,
                    2972,
                    2982,
                    5036,
                    5038,
                    5039,
                    3000,
                    962,
                    965,
                    968,
                    969,
                    3018,
                    974,
                    975,
                    3025,
                    3027,
                    3029,
                    7126,
                    3031,
                    3032,
                    7127,
                    7128,
                    7129,
                    7130,
                    7136,
                    1026,
                    1029,
                    1032,
                    1033,
                    5131,
                    1038,
                    1039,
                    5134,
                    5135,
                    5138,
                    5139,
                    5140,
                    1080,
                    1081,
                    1082,
                    1083,
                    7230,
                    7231,
                    7232,
                    1102,
                    1113,
                    1114,
                    3168,
                    5222,
                    5224,
                    5225,
                    5227,
                    5228,
                    3190,
                    1156,
                    7302,
                    1159,
                    1160,
                    1161,
                    7303,
                    7304,
                    1180,
                    1190,
                    1191,
                    3264,
                    5320,
                    5323,
                    5324,
                    7373,
                    7374,
                    5327,
                    5328,
                    5329,
                    7375,
                    1280,
                    1285,
                    1286,
                    1287,
                    3333,
                    7436,
                    7437,
                    7438,
                    3343,
                    7439,
                    3345,
                    3360,
                    3362,
                    5410,
                    5412,
                    5413,
                    5415,
                    5416,
                    3382,
                    3392,
                    3394,
                    3409,
                    3411,
                    3423,
                    3425,
                    1381,
                    3431,
                    1403,
                    1404,
                    7590,
                    7592,
                    5603,
                    5604,
                    5612,
                    5623,
                    7691,
                    7716,
                    7718,
                    7719,
                    7720,
                    7722,
                    7723,
                    7724,
                    7725,
                    7728,
                    7774,
                    7775,
                    7776,
                    7777,
                    7778,
                    7781,
                    1645,
                    1647,
                    1648,
                    3720,
                    1715,
                    1717,
                    1719,
                    1721,
                    5830,
                    7881,
                    5834,
                    5835,
                    5836,
                    1774,
                    1775,
                    1777,
                    5893,
                    5902,
                    5904,
                    5905,
                    5911,
                    5920,
                    5921,
                    1825,
                    1826,
                    8004,
                    8005,
                    8006,
                    8008,
                    8009,
                    8010,
                    8016,
                    1873,
                    1874,
                    3944,
                    3950,
                    3960,
                    1939,
                    6086,
                    6091,
                    6092,
                    6093,
                    6108,
                    6114,
                    6116,
                    6117,
                    6120,
                    4074,
                    4075,
                    6127,
                    2032,
                    6128,
                    2035,
                    2039
                ],
                "self.title": [
                    7722,
                    195,
                    142,
                    7775
                ],
                "self._right_title": [
                    196,
                    143
                ],
                "title": [
                    197,
                    144,
                    145,
                    210,
                    209,
                    212,
                    213,
                    214
                ],
                "cbook._check_getitem": [
                    144,
                    197
                ],
                "loc.lower": [
                    144,
                    202,
                    197
                ],
                "loc": [
                    192,
                    197,
                    202,
                    144,
                    191
                ],
                "title.get_text": [
                    145
                ],
                "rcParams": [
                    5127,
                    6550,
                    6678,
                    4382,
                    4383,
                    3621,
                    3623,
                    3628,
                    3630,
                    3247,
                    3632,
                    3634,
                    3636,
                    2997,
                    3638,
                    3893,
                    3640,
                    4406,
                    3642,
                    192,
                    3904,
                    3905,
                    3906,
                    3907,
                    2757,
                    3908,
                    199,
                    200,
                    4417,
                    5316,
                    203,
                    8012,
                    207,
                    2773,
                    4187,
                    4188,
                    4448,
                    4193,
                    5602,
                    2295
                ],
                "default": [
                    210,
                    205,
                    198
                ],
                "titlecolor": [
                    203,
                    204,
                    205
                ],
                "cbook._str_lower_equal": [
                    5880,
                    204
                ],
                "pad": [
                    208,
                    206,
                    207
                ],
                "self._set_title_offset_trans": [
                    208
                ],
                "float": [
                    4608,
                    4707,
                    4708,
                    7875,
                    4711,
                    208,
                    4209,
                    5906,
                    6097,
                    5364,
                    6645,
                    5175,
                    4607
                ],
                "title.set_text": [
                    209
                ],
                "label": [
                    6790,
                    6792,
                    6793,
                    6794,
                    6795,
                    6797,
                    2960,
                    533,
                    1179,
                    539,
                    2973,
                    3000,
                    452,
                    459,
                    1101,
                    209,
                    4946,
                    220,
                    221,
                    3171,
                    3430,
                    2801,
                    2426,
                    253,
                    254,
                    2303
                ],
                "title.update": [
                    210,
                    212,
                    213
                ],
                "fontdict": [
                    744,
                    745,
                    752,
                    211,
                    212,
                    247,
                    281
                ],
                "kwargs": [
                    1029,
                    7685,
                    7686,
                    5128,
                    5129,
                    5130,
                    7688,
                    1036,
                    7692,
                    5134,
                    533,
                    539,
                    7711,
                    7715,
                    2604,
                    1080,
                    2617,
                    2108,
                    2109,
                    7230,
                    4163,
                    4164,
                    4165,
                    4167,
                    1103,
                    3151,
                    3154,
                    3155,
                    7773,
                    3168,
                    5217,
                    3171,
                    618,
                    1644,
                    1645,
                    3184,
                    3187,
                    3188,
                    1156,
                    7302,
                    649,
                    3217,
                    3218,
                    3219,
                    6802,
                    6293,
                    6807,
                    6298,
                    1181,
                    3230,
                    3231,
                    3234,
                    3235,
                    680,
                    6318,
                    6319,
                    4790,
                    1719,
                    6326,
                    3257,
                    3258,
                    6327,
                    6333,
                    5317,
                    5318,
                    5319,
                    5834,
                    5323,
                    7373,
                    213,
                    2274,
                    2275,
                    2278,
                    2279,
                    1769,
                    1770,
                    2283,
                    2284,
                    2285,
                    1771,
                    1772,
                    2288,
                    753,
                    1777,
                    4851,
                    5867,
                    5868,
                    2294,
                    2295,
                    247,
                    5872,
                    5878,
                    2299,
                    5879,
                    5880,
                    2302,
                    2303,
                    2304,
                    5881,
                    1282,
                    5883,
                    5885,
                    6916,
                    776,
                    778,
                    2315,
                    7436,
                    2319,
                    4879,
                    4370,
                    1301,
                    1302,
                    1303,
                    281,
                    5405,
                    1822,
                    1823,
                    1826,
                    4390,
                    835,
                    5866,
                    843,
                    4427,
                    4940,
                    1871,
                    848,
                    1872,
                    1874,
                    4431,
                    2396,
                    5870,
                    5871,
                    1382,
                    3943,
                    7020,
                    3950,
                    3953,
                    3960,
                    3964,
                    904,
                    394,
                    397,
                    400,
                    912,
                    1939,
                    917,
                    7591,
                    5034,
                    6570,
                    5036,
                    6082,
                    452,
                    965,
                    459,
                    972,
                    6091,
                    6100,
                    7126,
                    5606,
                    2543,
                    2032,
                    2545,
                    2034,
                    2035,
                    4596,
                    2037,
                    2038,
                    2039
                ],
                "self.xaxis.get_label": [
                    220
                ],
                "self.xaxis": [
                    7776,
                    7777,
                    7778,
                    551,
                    2344,
                    7723,
                    7724,
                    7725,
                    2325,
                    246,
                    247,
                    220
                ],
                "label.get_text": [
                    221,
                    254
                ],
                "labelpad": [
                    280,
                    245,
                    246,
                    279
                ],
                "self.xaxis.labelpad": [
                    246
                ],
                "self.xaxis.set_label_text": [
                    247
                ],
                "xlabel": [
                    247
                ],
                "self.yaxis.get_label": [
                    253
                ],
                "self.yaxis": [
                    7781,
                    553,
                    2347,
                    7728,
                    280,
                    281,
                    2331,
                    253
                ],
                "self.yaxis.labelpad": [
                    280
                ],
                "self.yaxis.set_label_text": [
                    281
                ],
                "ylabel": [
                    281
                ],
                "handles": [
                    400,
                    297,
                    394,
                    295
                ],
                "labels": [
                    295,
                    6791,
                    297,
                    394,
                    2922,
                    2923,
                    3626,
                    2926,
                    6793,
                    400,
                    2960,
                    6795,
                    6797,
                    6799
                ],
                "mlegend._get_legend_handles_labels": [
                    295
                ],
                "mlegend": [
                    400,
                    394,
                    295
                ],
                "legend_handler_map": [
                    296
                ],
                "extra_args": [
                    394,
                    398
                ],
                "mlegend._parse_legend_args": [
                    394
                ],
                "args": [
                    5636,
                    5637,
                    776,
                    396,
                    5646,
                    5648,
                    5649,
                    2707,
                    2709,
                    2711,
                    2712,
                    2714,
                    2716,
                    1826,
                    2726,
                    5036,
                    6319,
                    2740,
                    6327,
                    2109,
                    6333,
                    2755,
                    5830,
                    6086,
                    1874,
                    2387,
                    2388,
                    4952,
                    4953,
                    4957,
                    4958,
                    6241,
                    6243,
                    4964,
                    4966,
                    6247,
                    6248,
                    1645,
                    3950,
                    4983,
                    1777,
                    4981,
                    3958,
                    3959
                ],
                "len": [
                    5636,
                    4622,
                    4623,
                    5646,
                    6677,
                    2594,
                    2598,
                    2607,
                    6705,
                    5171,
                    5174,
                    5184,
                    6720,
                    6721,
                    6723,
                    6724,
                    6727,
                    6729,
                    6730,
                    4684,
                    1105,
                    4695,
                    4702,
                    6753,
                    6243,
                    6755,
                    4197,
                    6247,
                    6765,
                    3695,
                    3696,
                    3705,
                    3711,
                    3208,
                    3212,
                    4240,
                    2707,
                    4243,
                    2711,
                    2713,
                    1183,
                    3270,
                    3271,
                    3272,
                    3273,
                    4807,
                    3275,
                    4810,
                    4811,
                    4812,
                    4814,
                    3283,
                    3284,
                    4828,
                    5858,
                    3305,
                    3306,
                    3309,
                    5360,
                    5363,
                    3317,
                    3319,
                    3320,
                    4860,
                    5372,
                    3330,
                    1296,
                    4385,
                    1320,
                    1322,
                    1324,
                    1326,
                    7982,
                    1328,
                    3379,
                    7989,
                    7995,
                    1340,
                    1341,
                    1344,
                    1345,
                    1346,
                    1347,
                    1348,
                    1350,
                    1351,
                    1352,
                    1354,
                    1357,
                    1360,
                    1363,
                    1366,
                    4952,
                    3936,
                    1385,
                    2923,
                    1388,
                    2925,
                    1390,
                    2926,
                    2928,
                    3958,
                    2430,
                    3967,
                    3973,
                    3977,
                    398,
                    3985,
                    6566,
                    6582,
                    6586,
                    6594,
                    6597,
                    6609,
                    2009,
                    2010,
                    6622,
                    4065
                ],
                "TypeError": [
                    7689,
                    3978,
                    399,
                    2708,
                    5664,
                    7712,
                    5676,
                    5681,
                    5686,
                    2369,
                    2370,
                    3012,
                    2377,
                    2378,
                    3159,
                    2142,
                    2147,
                    3299,
                    2157,
                    6265,
                    6267
                ],
                "self.legend_": [
                    400,
                    401,
                    402,
                    405
                ],
                "mlegend.Legend": [
                    400
                ],
                "self.legend_._remove_method": [
                    401
                ],
                "self._remove_legend": [
                    401
                ],
                "docstring.dedent_interpd": [
                    1412,
                    2436,
                    774,
                    6923,
                    7309,
                    785,
                    7444,
                    922,
                    4895,
                    5925,
                    1830,
                    299,
                    7596,
                    1198,
                    5043,
                    1726,
                    5694,
                    7237,
                    7380,
                    853,
                    3041,
                    7144,
                    620,
                    4460,
                    4975,
                    5232,
                    1652,
                    1781,
                    2164,
                    2549,
                    6132,
                    7039
                ],
                "docstring": [
                    1412,
                    2436,
                    774,
                    6923,
                    7309,
                    785,
                    7444,
                    922,
                    4895,
                    5925,
                    1830,
                    299,
                    7596,
                    1198,
                    5043,
                    1726,
                    5694,
                    7237,
                    4944,
                    7380,
                    853,
                    3041,
                    7144,
                    620,
                    4460,
                    4975,
                    5232,
                    1652,
                    1781,
                    2164,
                    2549,
                    6132,
                    7039
                ],
                "transform": [
                    450,
                    451,
                    455,
                    531,
                    532,
                    569,
                    539
                ],
                "self.transAxes": [
                    451
                ],
                "kwargs.pop": [
                    2304,
                    5879,
                    533,
                    1822,
                    4163,
                    452,
                    4164,
                    4165,
                    4167,
                    4427,
                    1871,
                    2275,
                    3171,
                    2278,
                    2279,
                    1769,
                    1771,
                    2283,
                    2284,
                    2285,
                    5867,
                    5871,
                    2034,
                    3188,
                    2294,
                    2295,
                    2299,
                    2302,
                    2303
                ],
                "_make_inset_locator": [
                    455
                ],
                "inset_ax": [
                    544,
                    615,
                    616,
                    458,
                    618,
                    557,
                    463,
                    465,
                    467,
                    565
                ],
                "Axes": [
                    458
                ],
                "self.figure": [
                    458,
                    566
                ],
                "bb.bounds": [
                    458
                ],
                "zorder": [
                    3909,
                    458,
                    3887,
                    3728,
                    559,
                    3888,
                    3895,
                    539
                ],
                "inset_ax.set_axes_locator": [
                    463
                ],
                "self.add_child_axes": [
                    465,
                    650,
                    681
                ],
                "self.apply_aspect": [
                    529
                ],
                "self.transData": [
                    6116,
                    6117,
                    4427,
                    558,
                    750,
                    5904,
                    5905,
                    532
                ],
                "x": [
                    4610,
                    4613,
                    4622,
                    5134,
                    5138,
                    7698,
                    5142,
                    535,
                    7702,
                    537,
                    7706,
                    4638,
                    5151,
                    4641,
                    7714,
                    4643,
                    4645,
                    5158,
                    5670,
                    5160,
                    3625,
                    5671,
                    555,
                    5164,
                    4654,
                    4655,
                    7217,
                    5180,
                    2109,
                    6720,
                    5186,
                    6723,
                    5188,
                    6724,
                    4684,
                    6739,
                    6741,
                    3168,
                    2146,
                    2148,
                    5220,
                    5221,
                    6245,
                    6248,
                    6249,
                    2154,
                    6251,
                    6252,
                    6759,
                    6761,
                    6255,
                    6769,
                    6771,
                    6262,
                    6271,
                    3200,
                    3201,
                    7298,
                    1156,
                    1159,
                    3208,
                    1163,
                    1164,
                    6283,
                    6287,
                    1170,
                    1172,
                    1173,
                    1174,
                    6296,
                    1177,
                    2713,
                    2716,
                    2718,
                    1183,
                    1184,
                    1185,
                    2719,
                    1719,
                    3263,
                    3270,
                    3271,
                    3272,
                    3273,
                    4807,
                    3275,
                    4810,
                    7369,
                    2771,
                    2787,
                    2793,
                    2796,
                    6908,
                    765,
                    3326,
                    767,
                    2311,
                    2312,
                    5895,
                    7431,
                    2315,
                    3342,
                    4370,
                    4371,
                    5906,
                    5908,
                    2326,
                    2327,
                    2328,
                    3353,
                    2330,
                    4376,
                    4378,
                    5913,
                    5914,
                    3359,
                    4385,
                    2338,
                    2340,
                    4390,
                    2345,
                    3370,
                    4395,
                    4396,
                    4398,
                    4400,
                    3380,
                    3390,
                    2368,
                    3393,
                    2370,
                    4419,
                    4935,
                    3402,
                    4940,
                    2381,
                    2383,
                    3407,
                    3410,
                    4953,
                    4954,
                    3419,
                    4955,
                    4957,
                    2910,
                    2911,
                    4449,
                    7010,
                    4451,
                    2916,
                    2918,
                    2920,
                    2923,
                    2925,
                    2926,
                    2928,
                    7564,
                    912,
                    913,
                    2960,
                    1939,
                    2961,
                    917,
                    2964,
                    2967,
                    6546,
                    6547,
                    6563,
                    6565,
                    6566,
                    2985,
                    6570,
                    6571,
                    6585,
                    3005,
                    6608,
                    7120,
                    2009,
                    2013,
                    6622,
                    2016,
                    2019,
                    6628,
                    6643,
                    4596,
                    4598,
                    4607
                ],
                "y": [
                    4608,
                    4615,
                    4618,
                    4623,
                    7697,
                    7701,
                    535,
                    537,
                    7706,
                    4639,
                    4642,
                    7714,
                    4644,
                    4646,
                    5673,
                    5674,
                    555,
                    4654,
                    4655,
                    1080,
                    1081,
                    1085,
                    1086,
                    2109,
                    5915,
                    6721,
                    1092,
                    5916,
                    1094,
                    1095,
                    1096,
                    6729,
                    6730,
                    1099,
                    1105,
                    1108,
                    1109,
                    6751,
                    3168,
                    6753,
                    6755,
                    6246,
                    6758,
                    6248,
                    6250,
                    6251,
                    6252,
                    6762,
                    6256,
                    6769,
                    6771,
                    6262,
                    6271,
                    3203,
                    3204,
                    6283,
                    3212,
                    6287,
                    2712,
                    2713,
                    6296,
                    2716,
                    2718,
                    2720,
                    1719,
                    3263,
                    5323,
                    4813,
                    5327,
                    2771,
                    5331,
                    5340,
                    2787,
                    5347,
                    5349,
                    2793,
                    5353,
                    5368,
                    6908,
                    765,
                    5374,
                    767,
                    5376,
                    2306,
                    3331,
                    2308,
                    2309,
                    7431,
                    5896,
                    3341,
                    2319,
                    3344,
                    4370,
                    5906,
                    4372,
                    5909,
                    4377,
                    4378,
                    3353,
                    2332,
                    2333,
                    2334,
                    3358,
                    2336,
                    3361,
                    2338,
                    5408,
                    2340,
                    5409,
                    3370,
                    4395,
                    2348,
                    4396,
                    4398,
                    3375,
                    4400,
                    3391,
                    4419,
                    2373,
                    2376,
                    4936,
                    2378,
                    843,
                    844,
                    3402,
                    4940,
                    848,
                    2384,
                    3408,
                    4953,
                    4954,
                    3419,
                    4956,
                    4957,
                    2961,
                    2965,
                    2967,
                    2986,
                    3006,
                    7120,
                    2010,
                    2014,
                    2016,
                    2019,
                    2544,
                    4596,
                    4598
                ],
                "width": [
                    2319,
                    3988,
                    535,
                    2328,
                    537,
                    6684,
                    6685,
                    3998,
                    3999,
                    6688,
                    2338,
                    2340,
                    4005,
                    4006,
                    555,
                    6710,
                    2368,
                    2371,
                    2387,
                    8020,
                    8024,
                    2408,
                    2413,
                    2544
                ],
                "height": [
                    2338,
                    2340,
                    2376,
                    2409,
                    2315,
                    555,
                    2379,
                    2414,
                    2544,
                    2387,
                    6707,
                    6709,
                    6710,
                    535,
                    537,
                    2334
                ],
                "rectangle_patch": [
                    536,
                    579,
                    540
                ],
                "mpatches.Rectangle": [
                    536,
                    2389
                ],
                "mpatches": [
                    2274,
                    2979,
                    3943,
                    3914,
                    972,
                    556,
                    1036,
                    4940,
                    2389,
                    2967,
                    536
                ],
                "facecolor": [
                    538
                ],
                "edgecolor": [
                    2278,
                    8043,
                    8075,
                    8014,
                    560,
                    8016,
                    2354,
                    2355,
                    2387,
                    2357,
                    2358,
                    8048,
                    8050,
                    8052,
                    538,
                    8059
                ],
                "alpha": [
                    6280,
                    5609,
                    4428,
                    4878,
                    560,
                    4850,
                    6291,
                    4789,
                    6101,
                    6297,
                    538,
                    5887
                ],
                "self.add_patch": [
                    2402,
                    2982,
                    2972,
                    974,
                    1038,
                    5038,
                    562,
                    540
                ],
                "connects": [
                    576,
                    577,
                    579,
                    542,
                    561,
                    574,
                    575
                ],
                "xy_inset_ax": [
                    546,
                    557,
                    550
                ],
                "ex": [
                    550,
                    552,
                    2408,
                    555,
                    2413,
                    2418
                ],
                "ey": [
                    550,
                    2409,
                    554,
                    555,
                    2414,
                    2418
                ],
                "self.xaxis.get_inverted": [
                    551
                ],
                "self.yaxis.get_inverted": [
                    553
                ],
                "xy_data": [
                    555,
                    558
                ],
                "p": [
                    6807,
                    6808,
                    972,
                    556,
                    973,
                    974,
                    976,
                    561,
                    562,
                    1036,
                    1037,
                    1038,
                    1040,
                    6801,
                    6802,
                    6804,
                    6806
                ],
                "mpatches.ConnectionPatch": [
                    556
                ],
                "inset_ax.transAxes": [
                    557
                ],
                "connects.append": [
                    561
                ],
                "pos": [
                    4065,
                    8027,
                    4005,
                    4006,
                    3988,
                    565,
                    3990,
                    566,
                    8020,
                    3993,
                    8026,
                    4059,
                    3998,
                    3999
                ],
                "inset_ax.get_position": [
                    565
                ],
                "bboxins": [
                    566,
                    570,
                    571,
                    572,
                    573
                ],
                "pos.transformed": [
                    566
                ],
                "self.figure.transFigure": [
                    566
                ],
                "rectbbox": [
                    567,
                    570,
                    571,
                    572,
                    573
                ],
                "transformed": [
                    4413,
                    567
                ],
                "x0": [
                    2154,
                    2330,
                    575,
                    2326,
                    2328,
                    570,
                    2141,
                    574,
                    2143
                ],
                "rectbbox.x0": [
                    570
                ],
                "bboxins.x0": [
                    570
                ],
                "x1": [
                    576,
                    577,
                    5376,
                    5347,
                    5408,
                    5349,
                    5354,
                    5323,
                    5328,
                    5331,
                    2612,
                    2613,
                    5369,
                    5370,
                    571,
                    5374
                ],
                "rectbbox.x1": [
                    571
                ],
                "bboxins.x1": [
                    571
                ],
                "y0": [
                    576,
                    2336,
                    2332,
                    572,
                    574,
                    2334
                ],
                "rectbbox.y0": [
                    572
                ],
                "bboxins.y0": [
                    572
                ],
                "y1": [
                    577,
                    5186,
                    5188,
                    5220,
                    5158,
                    5160,
                    5165,
                    5134,
                    5139,
                    5181,
                    5142,
                    573,
                    5182,
                    575
                ],
                "rectbbox.y1": [
                    573
                ],
                "bboxins.y1": [
                    573
                ],
                "set_visible": [
                    576,
                    577,
                    574,
                    575
                ],
                "tuple": [
                    3427,
                    3426,
                    579
                ],
                "xlim": [
                    617,
                    615
                ],
                "inset_ax.get_xlim": [
                    615
                ],
                "ylim": [
                    616,
                    617
                ],
                "inset_ax.get_ylim": [
                    616
                ],
                "rect": [
                    617,
                    618
                ],
                "self.indicate_inset": [
                    618
                ],
                "location": [
                    648,
                    679,
                    678,
                    647
                ],
                "Number": [
                    3977,
                    6654,
                    678,
                    647
                ],
                "secondary_ax": [
                    679,
                    648,
                    681,
                    650,
                    651,
                    682
                ],
                "SecondaryAxis": [
                    648,
                    679
                ],
                "functions": [
                    648,
                    680
                ],
                "ValueError": [
                    3712,
                    7554,
                    4611,
                    6277,
                    3974,
                    4231,
                    4616,
                    905,
                    7562,
                    4236,
                    653,
                    3986,
                    5652,
                    5144,
                    4379,
                    7579,
                    4386,
                    684,
                    2608,
                    1334,
                    6583,
                    7990,
                    6587,
                    7228,
                    7996,
                    836,
                    6598,
                    4170,
                    1355,
                    1358,
                    1361,
                    4177,
                    4178,
                    1364,
                    5333,
                    1367,
                    3163,
                    2011,
                    3166,
                    3299,
                    2025,
                    4201,
                    3307,
                    2157,
                    2927,
                    2929,
                    3697,
                    4210,
                    3318,
                    3707
                ],
                "effective_kwargs": [
                    768,
                    747
                ],
                "withdash": [
                    763,
                    764
                ],
                "cbook.deprecation._deprecated_parameter": [
                    764
                ],
                "cbook.deprecation": [
                    764
                ],
                "t": [
                    768,
                    770,
                    771,
                    772,
                    5899,
                    5900,
                    5901,
                    5902,
                    7564,
                    5904,
                    5905,
                    7586,
                    7594,
                    3000,
                    3002,
                    3018,
                    3020,
                    6111,
                    6112,
                    6113,
                    6114,
                    6116,
                    6117,
                    765,
                    767
                ],
                "mtext.TextWithDash": [
                    765
                ],
                "mtext": [
                    776,
                    765,
                    782,
                    767
                ],
                "s": [
                    3008,
                    4384,
                    3010,
                    4385,
                    776,
                    3018,
                    4395,
                    4396,
                    4398,
                    4400,
                    4402,
                    4381,
                    765,
                    4382,
                    767
                ],
                "mtext.Text": [
                    767
                ],
                "t.update": [
                    768
                ],
                "t.set_clip_path": [
                    770
                ],
                "self.patch": [
                    6308,
                    770,
                    779,
                    5612
                ],
                "self._add_text": [
                    771,
                    780
                ],
                "cbook._delete_parameter": [
                    4252,
                    5421,
                    5422,
                    687
                ],
                "a": [
                    3296,
                    3297,
                    3300,
                    3321,
                    3303,
                    776,
                    777,
                    779,
                    780,
                    781,
                    4940,
                    4941,
                    2032,
                    4942,
                    5649,
                    3316,
                    2039,
                    2041
                ],
                "mtext.Annotation": [
                    776,
                    782
                ],
                "xy": [
                    776,
                    5860,
                    5861
                ],
                "a.set_transform": [
                    777
                ],
                "mtransforms.IdentityTransform": [
                    777,
                    4753,
                    4430
                ],
                "a.set_clip_path": [
                    779
                ],
                "annotate.__doc__": [
                    782
                ],
                "annotate": [
                    782
                ],
                "mtext.Annotation.__init__.__doc__": [
                    782
                ],
                "mtext.Annotation.__init__": [
                    782
                ],
                "ymin": [
                    4739,
                    1156,
                    1029,
                    1160,
                    1033,
                    1035,
                    4620,
                    1165,
                    1166,
                    4623,
                    1170,
                    4627,
                    917,
                    1173,
                    1177,
                    4635,
                    1186,
                    1187,
                    4642,
                    4797,
                    965,
                    839,
                    969,
                    971,
                    845,
                    4719,
                    4854
                ],
                "ymax": [
                    1156,
                    1029,
                    4740,
                    1033,
                    1161,
                    1035,
                    4620,
                    1167,
                    1168,
                    4623,
                    1170,
                    4627,
                    917,
                    1174,
                    1177,
                    4635,
                    1186,
                    1187,
                    4797,
                    965,
                    839,
                    969,
                    971,
                    845,
                    4854
                ],
                "self.get_ybound": [
                    839
                ],
                "self._process_unit_info": [
                    1280,
                    1156,
                    1029,
                    2315,
                    5134,
                    2319,
                    912,
                    5135,
                    4370,
                    2718,
                    2602,
                    6570,
                    1080,
                    965,
                    5834,
                    843,
                    5323,
                    5324,
                    6091,
                    4954,
                    3168,
                    4596
                ],
                "yy": [
                    844,
                    845
                ],
                "self.convert_yunits": [
                    1286,
                    1287,
                    1160,
                    1033,
                    1161,
                    5139,
                    4372,
                    5140,
                    2333,
                    2334,
                    2336,
                    2720,
                    2615,
                    1081,
                    4936,
                    969,
                    4938,
                    844,
                    5836,
                    6093,
                    5327,
                    4956
                ],
                "scaley": [
                    1648,
                    850,
                    845
                ],
                "self.get_yaxis_transform": [
                    4872,
                    962,
                    847
                ],
                "l": [
                    917,
                    918,
                    920,
                    1826,
                    1827,
                    848,
                    849,
                    1874,
                    851,
                    1876,
                    2388,
                    2390,
                    3422,
                    3423,
                    2401,
                    2788,
                    2791,
                    2408,
                    2413,
                    1777,
                    1778
                ],
                "mlines.Line2D": [
                    3335,
                    3337,
                    917,
                    3350,
                    3354,
                    7714,
                    3367,
                    5034,
                    3371,
                    3888,
                    3384,
                    3386,
                    3898,
                    3263,
                    3399,
                    3403,
                    3151,
                    848,
                    3416,
                    3420,
                    1644
                ],
                "mlines": [
                    3335,
                    3337,
                    3346,
                    3348,
                    917,
                    3350,
                    3354,
                    7714,
                    3363,
                    3365,
                    3367,
                    5034,
                    3371,
                    3888,
                    3384,
                    3386,
                    3898,
                    3263,
                    3395,
                    3397,
                    3399,
                    3403,
                    3151,
                    848,
                    3412,
                    3414,
                    3416,
                    3420,
                    1644
                ],
                "xmin": [
                    1029,
                    1032,
                    1035,
                    908,
                    4620,
                    4622,
                    914,
                    4626,
                    4631,
                    4632,
                    4634,
                    4641,
                    7587,
                    7589,
                    1080,
                    1082,
                    4797,
                    1087,
                    1088,
                    1092,
                    965,
                    1095,
                    968,
                    971,
                    1099,
                    6606,
                    848,
                    1106,
                    1107,
                    6612,
                    4821,
                    6616,
                    6617,
                    4718,
                    4734
                ],
                "xmax": [
                    1029,
                    1032,
                    1035,
                    908,
                    4620,
                    4622,
                    914,
                    4626,
                    4631,
                    4633,
                    4634,
                    7587,
                    7589,
                    1080,
                    1083,
                    4797,
                    1089,
                    1090,
                    1092,
                    965,
                    968,
                    1096,
                    971,
                    1099,
                    6607,
                    848,
                    1106,
                    1107,
                    4821,
                    6613,
                    6616,
                    6617,
                    4735
                ],
                "self.add_line": [
                    3264,
                    7716,
                    1647,
                    849,
                    918,
                    3423
                ],
                "self._request_autoscale_view": [
                    6788,
                    4102,
                    1039,
                    919,
                    5921,
                    1191,
                    5416,
                    6313,
                    5039,
                    6320,
                    6328,
                    1721,
                    2619,
                    4799,
                    975,
                    850,
                    1114,
                    3425,
                    4455,
                    4969,
                    5228,
                    1648,
                    6128,
                    2424,
                    4985,
                    1404
                ],
                "self.get_xbound": [
                    908
                ],
                "xx": [
                    913,
                    914
                ],
                "self.convert_xunits": [
                    1285,
                    1159,
                    1032,
                    913,
                    5138,
                    4371,
                    2327,
                    2328,
                    2330,
                    2719,
                    6571,
                    6574,
                    2611,
                    2612,
                    1082,
                    1083,
                    4935,
                    968,
                    4937,
                    5835,
                    6092,
                    5328,
                    5329,
                    4955
                ],
                "scalex": [
                    1648,
                    914,
                    919
                ],
                "self.get_xaxis_transform": [
                    1026,
                    4843,
                    916
                ],
                "verts": [
                    4866,
                    4874,
                    1035,
                    1036,
                    1176,
                    1178,
                    1098,
                    971,
                    972,
                    1100,
                    4825,
                    3934,
                    3936,
                    3938,
                    4836,
                    3941,
                    3942,
                    5861,
                    4845,
                    4857,
                    5885
                ],
                "mpatches.Polygon": [
                    972,
                    1036
                ],
                "p.set_transform": [
                    1037,
                    973
                ],
                "np.iterable": [
                    3200,
                    3203,
                    3207,
                    1289,
                    6794,
                    1163,
                    1291,
                    1165,
                    3211,
                    1167,
                    1305,
                    1307,
                    1309,
                    1311,
                    1313,
                    4779,
                    1085,
                    1087,
                    1089,
                    2151,
                    4601
                ],
                "cbook.delete_masked_points": [
                    1170,
                    1092,
                    4598
                ],
                "np.ravel": [
                    1172,
                    1094,
                    3695
                ],
                "np.resize": [
                    1096,
                    1173,
                    1174,
                    1095
                ],
                "y.shape": [
                    1096,
                    1095
                ],
                "thisxmin": [
                    1098,
                    1099
                ],
                "thisy": [
                    1098,
                    1099,
                    3286
                ],
                "thisxmax": [
                    1098,
                    1099
                ],
                "zip": [
                    8068,
                    2960,
                    3988,
                    1177,
                    6703,
                    6585,
                    1099,
                    2387,
                    2771,
                    3285,
                    3286,
                    8020,
                    1372,
                    2787,
                    2408,
                    2409,
                    3177,
                    2413,
                    2414,
                    1391,
                    6769,
                    3700,
                    4085,
                    3321,
                    3322,
                    3709
                ],
                "lines": [
                    7234,
                    7302,
                    1193,
                    7306,
                    1100,
                    1645,
                    1102,
                    1103,
                    1646,
                    1180,
                    1649,
                    7373,
                    7377,
                    1178,
                    1116,
                    1181,
                    7230
                ],
                "mcoll.LineCollection": [
                    1178,
                    1100,
                    2774
                ],
                "mcoll": [
                    5217,
                    4421,
                    4742,
                    5317,
                    5128,
                    5885,
                    4874,
                    6278,
                    1100,
                    4748,
                    4845,
                    6098,
                    2774,
                    2617,
                    1178,
                    5405,
                    1374
                ],
                "colors": [
                    4230,
                    4240,
                    4243,
                    1301,
                    4245,
                    4246,
                    1178,
                    1311,
                    1312,
                    4388,
                    4393,
                    4398,
                    1328,
                    1329,
                    4400,
                    1333,
                    1348,
                    1349,
                    1350,
                    4423,
                    1100,
                    4433,
                    1363,
                    1373,
                    2930,
                    2933
                ],
                "linestyles": [
                    1313,
                    1314,
                    1351,
                    1352,
                    1101,
                    1366,
                    1303,
                    1179,
                    1373
                ],
                "self.add_collection": [
                    4802,
                    1381,
                    4454,
                    5415,
                    4968,
                    6120,
                    6282,
                    5227,
                    1102,
                    4880,
                    4852,
                    5911,
                    4984,
                    2777,
                    2618,
                    1180
                ],
                "lines.update": [
                    1181,
                    1103
                ],
                "minx": [
                    1184,
                    1189,
                    6122,
                    6124,
                    6126,
                    1106,
                    1111,
                    5913,
                    5917,
                    5919
                ],
                "min": [
                    1186,
                    4780,
                    1106,
                    1395,
                    4083,
                    6612,
                    2967
                ],
                "xmin.min": [
                    1106
                ],
                "xmax.min": [
                    1106
                ],
                "maxx": [
                    1185,
                    1189,
                    6123,
                    6124,
                    6126,
                    1107,
                    1111,
                    5914,
                    5917,
                    5919
                ],
                "max": [
                    1187,
                    4780,
                    1107,
                    4084,
                    1396,
                    6613,
                    5367,
                    2968,
                    5179
                ],
                "xmin.max": [
                    1107
                ],
                "xmax.max": [
                    1107
                ],
                "miny": [
                    1186,
                    1189,
                    6122,
                    6125,
                    6126,
                    1108,
                    1111,
                    5915,
                    5918,
                    5919
                ],
                "y.min": [
                    6283,
                    1108
                ],
                "maxy": [
                    1187,
                    1189,
                    6123,
                    6125,
                    6126,
                    1109,
                    1111,
                    5916,
                    5918,
                    5919
                ],
                "y.max": [
                    6283,
                    1109
                ],
                "corners": [
                    5920,
                    1189,
                    1190,
                    6126,
                    6127,
                    1111,
                    1400,
                    1113,
                    1402,
                    1403,
                    4797,
                    4798,
                    5919
                ],
                "self.update_datalim": [
                    5920,
                    1190,
                    6312,
                    6127,
                    1113,
                    1403,
                    4798
                ],
                "_preprocess_data": [
                    6922,
                    7308,
                    1042,
                    7443,
                    8084,
                    1941,
                    8086,
                    4248,
                    6815,
                    5924,
                    1195,
                    5420,
                    6316,
                    5042,
                    6324,
                    5693,
                    2623,
                    6338,
                    7236,
                    7379,
                    1878,
                    1118,
                    3039,
                    4961,
                    7143,
                    7786,
                    4459,
                    3436,
                    4974,
                    5231,
                    1651,
                    2163,
                    2548,
                    2805,
                    6131,
                    7038
                ],
                "x.shape": [
                    1173,
                    1174
                ],
                "thisx": [
                    1176,
                    1177,
                    3285
                ],
                "thisymin": [
                    1176,
                    1177
                ],
                "thisymax": [
                    1176,
                    1177
                ],
                "x.min": [
                    1184,
                    6283
                ],
                "x.max": [
                    1185,
                    6283
                ],
                "ymin.min": [
                    1186
                ],
                "ymax.min": [
                    1186
                ],
                "ymin.max": [
                    1187
                ],
                "ymax.max": [
                    1187
                ],
                "positions": [
                    1280,
                    3971,
                    3972,
                    1285,
                    3973,
                    3720,
                    1289,
                    1290,
                    1291,
                    1292,
                    3976,
                    1294,
                    3977,
                    1296,
                    3982,
                    3988,
                    7987,
                    7988,
                    7989,
                    1340,
                    1341,
                    7999,
                    8000,
                    1345,
                    1347,
                    1350,
                    1352,
                    7881,
                    1354,
                    1357,
                    1360,
                    1363,
                    8020,
                    1366,
                    1372,
                    1385,
                    1387,
                    4076,
                    4083,
                    4084,
                    4085,
                    8051,
                    4094
                ],
                "lineoffsets": [
                    1281,
                    1316,
                    1286,
                    1320,
                    1321,
                    1354,
                    1325,
                    1327,
                    1395,
                    1396,
                    1372,
                    1305,
                    1306,
                    1340,
                    1341,
                    1342,
                    1343
                ],
                "linelengths": [
                    1344,
                    1281,
                    1345,
                    1317,
                    1287,
                    1322,
                    1323,
                    1357,
                    1395,
                    1396,
                    1372,
                    1307,
                    1308
                ],
                "any": [
                    4768,
                    6116,
                    5318,
                    5129,
                    1291,
                    5904,
                    6616
                ],
                "position": [
                    1291,
                    1292,
                    4085,
                    4087,
                    1371,
                    1374
                ],
                "np.asanyarray": [
                    5637,
                    1292,
                    1294,
                    5648,
                    4209,
                    7769
                ],
                "cbook.local_over_kwdict": [
                    1301,
                    1302,
                    1303
                ],
                "linewidths": [
                    4745,
                    4751,
                    1302,
                    1309,
                    1310,
                    1318,
                    4395,
                    1324,
                    4396,
                    1326,
                    4398,
                    4400,
                    4417,
                    1346,
                    1347,
                    4425,
                    1360,
                    1372,
                    5865,
                    5868,
                    4727,
                    4728
                ],
                "hasattr": [
                    1313,
                    6113,
                    5901,
                    7694,
                    7679
                ],
                "np.asarray": [
                    8065,
                    7682,
                    8067,
                    1316,
                    1317,
                    1318,
                    6249,
                    6250,
                    7977,
                    2910,
                    2611,
                    2327,
                    7704,
                    5150,
                    2333,
                    5339,
                    2013,
                    2014
                ],
                "mcolors.to_rgba_array": [
                    6593,
                    4230,
                    2351,
                    4176,
                    1333,
                    2358
                ],
                "mcolors": [
                    6593,
                    4230,
                    7686,
                    2351,
                    4176,
                    1333,
                    2358,
                    4764,
                    4767
                ],
                "np.tile": [
                    1345,
                    1347,
                    4713,
                    4715,
                    1341
                ],
                "np.cumsum": [
                    1343
                ],
                "list": [
                    6769,
                    3972,
                    1349
                ],
                "colls": [
                    1370,
                    1406,
                    1383
                ],
                "lineoffset": [
                    1376,
                    1371
                ],
                "linelength": [
                    1377,
                    1371
                ],
                "linewidth": [
                    1378,
                    2338,
                    2340,
                    2279,
                    2350,
                    2387,
                    1371
                ],
                "color": [
                    2351,
                    6703,
                    6590,
                    6591,
                    6593,
                    6594,
                    6597,
                    2387,
                    1371,
                    3680,
                    1379,
                    2276,
                    2277,
                    2275,
                    3685,
                    3689,
                    3690,
                    3691,
                    6769
                ],
                "linestyle": [
                    1380,
                    2789,
                    2730,
                    2732,
                    2735,
                    2772,
                    2773,
                    2774,
                    1371
                ],
                "coll": [
                    1382,
                    1381,
                    1374,
                    1383
                ],
                "mcoll.EventCollection": [
                    1374
                ],
                "orientation": [
                    2307,
                    2310,
                    2314,
                    2318,
                    6557,
                    2343,
                    6696,
                    2346,
                    2366,
                    2374,
                    6733,
                    2398,
                    1375,
                    2400,
                    6757,
                    2406,
                    2411,
                    1398,
                    1399,
                    6778,
                    2299,
                    6780,
                    2301
                ],
                "coll.update": [
                    1382
                ],
                "colls.append": [
                    1383
                ],
                "min_max": [
                    1387,
                    1390,
                    1391
                ],
                "_p": [
                    1387,
                    1388
                ],
                "mins": [
                    7974,
                    1391,
                    1392,
                    8049,
                    8051,
                    8031
                ],
                "maxes": [
                    8032,
                    7975,
                    8047,
                    1391,
                    1393,
                    8051
                ],
                "minpos": [
                    1392,
                    1402,
                    1400
                ],
                "maxpos": [
                    1400,
                    1393,
                    1402
                ],
                "minline": [
                    1400,
                    1402,
                    1395
                ],
                "maxline": [
                    1400,
                    1402,
                    1396
                ],
                "orientation.lower": [
                    1399
                ],
                "cbook.normalize_kwargs": [
                    2274,
                    5317,
                    5128,
                    3913,
                    5034,
                    1644,
                    3151,
                    3898
                ],
                "self._get_lines": [
                    8016,
                    1645,
                    3190,
                    6591
                ],
                "data": [
                    5036,
                    1645,
                    3317,
                    3319,
                    3321,
                    3322,
                    2109
                ],
                "line": [
                    7141,
                    7020,
                    1646,
                    1647,
                    7126,
                    7036
                ],
                "xdate": [
                    1714
                ],
                "self.xaxis_date": [
                    1715
                ],
                "tz": [
                    1715,
                    1717
                ],
                "ydate": [
                    1716
                ],
                "self.yaxis_date": [
                    1717
                ],
                "ret": [
                    6305,
                    6306,
                    6308,
                    6310,
                    6311,
                    7721,
                    6314,
                    7691,
                    6284,
                    7731,
                    1719,
                    1723,
                    6300,
                    6303
                ],
                "self.plot": [
                    1826,
                    2788,
                    7302,
                    1719,
                    2793,
                    2796,
                    7020,
                    3950,
                    7373,
                    7436,
                    1777,
                    1874,
                    7126,
                    2039,
                    3960,
                    2109,
                    7230
                ],
                "fmt": [
                    3170,
                    3173,
                    3178,
                    3180,
                    1719
                ],
                "dx": [
                    2151,
                    2152,
                    1769,
                    2154,
                    4937,
                    2156,
                    4940,
                    1774,
                    2127,
                    2160,
                    2161,
                    6255,
                    6257
                ],
                "k": [
                    3176,
                    1769,
                    1770,
                    1771,
                    1772,
                    1871,
                    1872,
                    3154,
                    3893,
                    3894,
                    1822,
                    1823
                ],
                "dy": [
                    4938,
                    1771,
                    4940,
                    1775,
                    6256,
                    6258
                ],
                "self.set_xscale": [
                    4736,
                    1825,
                    6734,
                    1774,
                    2321
                ],
                "self.set_yscale": [
                    4741,
                    2317,
                    1775,
                    6736,
                    1873
                ],
                "d": [
                    1825,
                    1871,
                    1873,
                    3893,
                    3895,
                    3897,
                    3899,
                    1822
                ],
                "self.xcorr": [
                    1939
                ],
                "mlab.detrend_none": [
                    7381,
                    1942
                ],
                "mlab": [
                    7010,
                    7298,
                    7876,
                    7431,
                    7369,
                    7564,
                    7120,
                    7217,
                    7381,
                    1942,
                    7382
                ],
                "Nx": [
                    5667,
                    2022,
                    5670,
                    2024,
                    5831,
                    2026,
                    5674,
                    5863,
                    2029,
                    6087,
                    5689,
                    5680,
                    6098,
                    5683,
                    5685,
                    5688,
                    2009,
                    2010
                ],
                "detrend": [
                    7010,
                    7431,
                    7565,
                    7120,
                    2013,
                    2014
                ],
                "correls": [
                    2016,
                    2019,
                    2029,
                    2032,
                    2039,
                    2041
                ],
                "np.correlate": [
                    2016
                ],
                "normed": [
                    2018
                ],
                "np.sqrt": [
                    2019
                ],
                "np.dot": [
                    2019
                ],
                "maxlags": [
                    2021,
                    2022,
                    2024,
                    2028,
                    2029
                ],
                "lags": [
                    2032,
                    2041,
                    2028,
                    2039
                ],
                "np.arange": [
                    4712,
                    4713,
                    4714,
                    4715,
                    2028,
                    5640,
                    4782,
                    5642,
                    7030,
                    2713,
                    7135
                ],
                "usevlines": [
                    2031
                ],
                "self.vlines": [
                    3392,
                    8006,
                    8009,
                    2032,
                    3409,
                    3382
                ],
                "b": [
                    2388,
                    3285,
                    2390,
                    3286,
                    2399,
                    3296,
                    3298,
                    3300,
                    3304,
                    2409,
                    2414,
                    2035,
                    3316,
                    4984,
                    4983,
                    2040,
                    2041,
                    3322,
                    4986
                ],
                "self.axhline": [
                    2035
                ],
                "kwargs.setdefault": [
                    6082,
                    5868,
                    2543,
                    5872,
                    3155,
                    2037,
                    2038,
                    5883
                ],
                "cbook._check_in_list": [
                    6556,
                    2107,
                    2364,
                    6553,
                    6555,
                    2300
                ],
                "where": [
                    5408,
                    5409,
                    5346,
                    5220,
                    5157,
                    5221,
                    5352,
                    2107,
                    5163,
                    5148,
                    5339,
                    5340,
                    5336,
                    5337,
                    5147,
                    2108,
                    5150,
                    5151
                ],
                "type": [
                    2123
                ],
                "xconv": [
                    2146,
                    2123,
                    2148,
                    2125
                ],
                "np.ndarray": [
                    2123
                ],
                "xconv.size": [
                    2125
                ],
                "convert": [
                    2160,
                    2154,
                    2127
                ],
                "cbook.safe_first_element": [
                    2146,
                    2595,
                    4198,
                    2599,
                    2141
                ],
                "IndexError": [
                    2147,
                    2756,
                    2727,
                    2741,
                    2142
                ],
                "KeyError": [
                    2147,
                    2142
                ],
                "delist": [
                    2153,
                    2155,
                    2150
                ],
                "ddx": [
                    2154
                ],
                "AttributeError": [
                    2157
                ],
                "staticmethod": [
                    5626,
                    4108,
                    2111
                ],
                "mpatches.Patch": [
                    2274
                ],
                "self._get_patches_for_fill.get_next_color": [
                    2277,
                    4391,
                    5320,
                    5131,
                    2931
                ],
                "self._get_patches_for_fill": [
                    2277,
                    4391,
                    5320,
                    5131,
                    5036,
                    2931
                ],
                "xerr": [
                    3428,
                    2405,
                    3206,
                    3207,
                    3208,
                    2283,
                    2419,
                    2329,
                    2330,
                    3325,
                    3326
                ],
                "yerr": [
                    2336,
                    2405,
                    3429,
                    3210,
                    3211,
                    2284,
                    3212,
                    3374,
                    3375,
                    2419,
                    2335
                ],
                "error_kw": [
                    2285,
                    2286,
                    2416,
                    2420,
                    2293,
                    2296,
                    2297
                ],
                "ezorder": [
                    2286,
                    2287,
                    2288,
                    2289,
                    2292,
                    2293
                ],
                "error_kw.pop": [
                    2286
                ],
                "kwargs.get": [
                    2288
                ],
                "error_kw.setdefault": [
                    2296,
                    2297,
                    2416,
                    2293
                ],
                "ecolor": [
                    3185,
                    2294,
                    2296,
                    3226,
                    3259,
                    3196,
                    3197
                ],
                "capsize": [
                    3334,
                    3369,
                    3401,
                    3246,
                    3247,
                    3248,
                    3249,
                    2295,
                    3352,
                    2297,
                    3418,
                    3383
                ],
                "log": [
                    6732,
                    2316,
                    2320,
                    6711,
                    2302
                ],
                "tick_labels": [
                    2304,
                    2432,
                    2429,
                    2430
                ],
                "bottom": [
                    2306,
                    6704,
                    6705,
                    6707,
                    6712,
                    6715,
                    2373,
                    6726,
                    6727,
                    2376,
                    6729,
                    2384,
                    2387,
                    2771,
                    6755,
                    2788,
                    6756,
                    2409,
                    2796,
                    2414
                ],
                "self._convert_dx": [
                    2336,
                    2612,
                    2328,
                    2330,
                    2334
                ],
                "np.broadcast_arrays": [
                    5160,
                    2338,
                    5349
                ],
                "np.atleast_1d": [
                    2916,
                    2340,
                    5349,
                    5160,
                    2350
                ],
                "tick_label_axis": [
                    2344,
                    2347,
                    2432,
                    2431
                ],
                "tick_label_position": [
                    2345,
                    2348,
                    2431
                ],
                "itertools.cycle": [
                    2358,
                    2933,
                    2350,
                    2351
                ],
                "itertools": [
                    2350,
                    2351,
                    6799,
                    2353,
                    2355,
                    2357,
                    2358,
                    2933,
                    2360
                ],
                "itertools.chain": [
                    2357,
                    2351
                ],
                "itertools.repeat": [
                    2360,
                    2353,
                    2355
                ],
                "align": [
                    6691,
                    6693,
                    2382,
                    2545,
                    6738,
                    6740,
                    6555,
                    2364,
                    2365
                ],
                "left": [
                    2368,
                    3361,
                    3332,
                    2408,
                    2381,
                    2413,
                    2383,
                    2544,
                    2387,
                    3326,
                    3359
                ],
                "x.dtype": [
                    2370
                ],
                "width.dtype": [
                    2371
                ],
                "e": [
                    3320,
                    2372,
                    2380,
                    3316,
                    2388,
                    3317,
                    2392,
                    3321,
                    3322
                ],
                "y.dtype": [
                    2378
                ],
                "height.dtype": [
                    2379
                ],
                "patches": [
                    6784,
                    2403,
                    6661,
                    5036,
                    5037,
                    6799,
                    2544,
                    5040,
                    2386,
                    2546,
                    6770,
                    6776,
                    6713,
                    2426,
                    6811,
                    6813,
                    2430
                ],
                "w": [
                    6624,
                    2979,
                    2980,
                    2408,
                    2413,
                    6578,
                    6643,
                    2388,
                    6580,
                    2390,
                    2967,
                    6582,
                    6585,
                    2971,
                    2972,
                    2973
                ],
                "h": [
                    6912,
                    6914,
                    6916,
                    6920,
                    2409,
                    2414,
                    2388,
                    2390,
                    6908
                ],
                "c": [
                    4230,
                    4233,
                    5129,
                    4238,
                    7695,
                    7697,
                    7698,
                    7700,
                    7701,
                    4246,
                    7702,
                    4388,
                    4390,
                    4394,
                    4398,
                    6703,
                    4400,
                    6712,
                    5318,
                    4169,
                    4434,
                    2388,
                    2391,
                    4190,
                    4191,
                    4192,
                    4196,
                    4197,
                    4198,
                    4209,
                    6769,
                    6773,
                    6774,
                    4215,
                    4216,
                    4219
                ],
                "lw": [
                    2393,
                    2388
                ],
                "r": [
                    2401,
                    2402,
                    2403,
                    2389,
                    2396,
                    2397,
                    2399
                ],
                "r.update": [
                    2396
                ],
                "_interpolation_steps": [
                    2397
                ],
                "r.get_path": [
                    2397
                ],
                "r.sticky_edges.y.append": [
                    2399
                ],
                "r.sticky_edges.y": [
                    2399
                ],
                "r.sticky_edges": [
                    2401,
                    2399
                ],
                "r.sticky_edges.x.append": [
                    2401
                ],
                "r.sticky_edges.x": [
                    2401
                ],
                "patches.append": [
                    6713,
                    6770,
                    2403
                ],
                "errorbar": [
                    2426,
                    2418,
                    2422
                ],
                "self.errorbar": [
                    2418
                ],
                "bar_container": [
                    2426,
                    2427,
                    2434
                ],
                "BarContainer": [
                    2426
                ],
                "self.add_container": [
                    2802,
                    2427
                ],
                "np.broadcast_to": [
                    3270,
                    3271,
                    3272,
                    3273,
                    2430
                ],
                "tick_label_axis.set_ticks": [
                    2431
                ],
                "tick_label_axis.set_ticklabels": [
                    2432
                ],
                "self.bar": [
                    2544,
                    6700
                ],
                "xranges": [
                    2594,
                    2595,
                    2606
                ],
                "xdata": [
                    2602,
                    2595,
                    2597
                ],
                "yrange": [
                    2615,
                    2598,
                    2599
                ],
                "ydata": [
                    2601,
                    2603,
                    2599
                ],
                "xranges_conv": [
                    2617,
                    2613,
                    2605
                ],
                "xr": [
                    6310,
                    6312,
                    6283,
                    2606,
                    2607,
                    6287,
                    2611,
                    2612
                ],
                "x_conv": [
                    2611,
                    2612,
                    2613
                ],
                "xranges_conv.append": [
                    2613
                ],
                "yrange_conv": [
                    2617,
                    2615
                ],
                "col": [
                    2617,
                    2618,
                    2621
                ],
                "mcoll.BrokenBarHCollection": [
                    2617
                ],
                "format": [
                    4760,
                    2708
                ],
                "linefmt": [
                    2723,
                    2733,
                    2726,
                    2735
                ],
                "linecolor": [
                    2789,
                    2728,
                    2732,
                    2735,
                    2775
                ],
                "linemarker": [
                    2729,
                    2732,
                    2790,
                    2735
                ],
                "_process_plot_format": [
                    3680,
                    3178,
                    2765,
                    2733,
                    2735,
                    2767,
                    2747,
                    2750
                ],
                "markerfmt": [
                    2737,
                    2747,
                    2740,
                    2750
                ],
                "markercolor": [
                    2793,
                    2746,
                    2749,
                    2742
                ],
                "markermarker": [
                    2746,
                    2794,
                    2749,
                    2743
                ],
                "markerstyle": [
                    2744,
                    2793,
                    2746,
                    2749
                ],
                "basefmt": [
                    2752,
                    2755,
                    2765,
                    2767
                ],
                "basecolor": [
                    2758,
                    2760,
                    2764,
                    2797,
                    2767
                ],
                "basemarker": [
                    2761,
                    2764,
                    2798,
                    2767
                ],
                "basestyle": [
                    2762,
                    2764,
                    2797,
                    2767
                ],
                "use_line_collection": [
                    2770
                ],
                "stemlines": [
                    2786,
                    2791,
                    2800,
                    2771,
                    2774,
                    2777
                ],
                "xi": [
                    2787,
                    2788,
                    6571,
                    6608,
                    6609,
                    2771,
                    6612,
                    6613,
                    6585,
                    6586
                ],
                "yi": [
                    2787,
                    2788,
                    4813,
                    4814,
                    4815,
                    2771
                ],
                "cbook._warn_external": [
                    4760,
                    2780
                ],
                "stemlines.append": [
                    2791
                ],
                "markerline": [
                    2800,
                    2793
                ],
                "baseline": [
                    2800,
                    2796
                ],
                "stem_container": [
                    2800,
                    2802,
                    2803
                ],
                "StemContainer": [
                    2800
                ],
                "self.set_aspect": [
                    7720,
                    2907,
                    5603
                ],
                "np.float32": [
                    2910
                ],
                "x.ndim": [
                    6251,
                    6262,
                    2911
                ],
                "ndim": [
                    2911
                ],
                "x.squeeze": [
                    2916,
                    2911
                ],
                "cbook.warn_deprecated": [
                    2912,
                    5152,
                    5341,
                    3310
                ],
                "sx": [
                    4641,
                    2918,
                    2919,
                    2920,
                    4716,
                    4724,
                    4634
                ],
                "x.sum": [
                    2918
                ],
                "explode": [
                    2928,
                    2960,
                    2924,
                    2925
                ],
                "get_next_color": [
                    2969,
                    2931
                ],
                "color_cycle": [
                    2936,
                    2933
                ],
                "next": [
                    2936,
                    3190
                ],
                "radius": [
                    2985,
                    2986,
                    2967,
                    2938,
                    2939,
                    3005,
                    3006
                ],
                "startangle": [
                    2945,
                    2942
                ],
                "theta1": [
                    2945,
                    3022,
                    2962,
                    2963,
                    2967,
                    2968,
                    2943
                ],
                "wedgeprops": [
                    2970,
                    2948,
                    2949,
                    2950
                ],
                "wedgeprops.setdefault": [
                    2950
                ],
                "textprops": [
                    2952,
                    2953,
                    2954,
                    3017,
                    2998
                ],
                "textprops.setdefault": [
                    2954
                ],
                "texts": [
                    3002,
                    3035,
                    2956,
                    3037
                ],
                "slices": [
                    3037,
                    2971,
                    2957,
                    3035
                ],
                "autotexts": [
                    3020,
                    3037,
                    2958
                ],
                "frac": [
                    2960,
                    3010,
                    2962,
                    3008
                ],
                "expl": [
                    2960,
                    2964,
                    2965
                ],
                "center": [
                    2961,
                    3027,
                    3028,
                    3029,
                    3030
                ],
                "theta2": [
                    3022,
                    2962,
                    2963,
                    2967,
                    2968
                ],
                "counterclock": [
                    2962
                ],
                "thetam": [
                    2985,
                    2986,
                    2992,
                    2963,
                    2964,
                    2965,
                    3005,
                    3006
                ],
                "np.pi": [
                    2963
                ],
                "math.cos": [
                    2985,
                    2964,
                    3005
                ],
                "math": [
                    4605,
                    2985,
                    2986,
                    2964,
                    2965,
                    7030,
                    3005,
                    3006,
                    7135
                ],
                "math.sin": [
                    2986,
                    2965,
                    3006
                ],
                "mpatches.Wedge": [
                    2967
                ],
                "slices.append": [
                    2971
                ],
                "w.set_label": [
                    2973
                ],
                "shadow": [
                    2975
                ],
                "shad": [
                    2979,
                    2980,
                    2981,
                    2982
                ],
                "mpatches.Shadow": [
                    2979
                ],
                "shad.set_zorder": [
                    2980
                ],
                "w.get_zorder": [
                    2980
                ],
                "shad.set_label": [
                    2981
                ],
                "labeldistance": [
                    2984,
                    2985,
                    2986
                ],
                "xt": [
                    2985,
                    3018,
                    2987,
                    2993,
                    3000,
                    3005
                ],
                "yt": [
                    6311,
                    6312,
                    3018,
                    2986,
                    6283,
                    2991,
                    6287,
                    3000,
                    3006
                ],
                "label_alignment_h": [
                    2994,
                    2987
                ],
                "label_alignment_v": [
                    2995,
                    2988,
                    2991
                ],
                "label_rotation": [
                    2992,
                    2996,
                    2989
                ],
                "rotatelabels": [
                    2990
                ],
                "np.rad2deg": [
                    2992
                ],
                "props": [
                    3015,
                    3017,
                    3018,
                    2994,
                    2998,
                    3000
                ],
                "dict": [
                    3238,
                    3015,
                    6600,
                    4105,
                    2994,
                    3223,
                    3673,
                    3903
                ],
                "props.update": [
                    3017,
                    2998
                ],
                "self.text": [
                    3000,
                    3018
                ],
                "texts.append": [
                    3002
                ],
                "autopct": [
                    3008,
                    3009,
                    3010,
                    3034,
                    3004,
                    3007
                ],
                "pctdistance": [
                    3005,
                    3006
                ],
                "callable": [
                    3009
                ],
                "autotexts.append": [
                    3020
                ],
                "frame": [
                    3024
                ],
                "self.set_frame_on": [
                    3025
                ],
                "self.set_xlim": [
                    3027,
                    6917,
                    7718
                ],
                "self.set_ylim": [
                    3029,
                    6918,
                    7719
                ],
                "self.set_xticks": [
                    3031
                ],
                "self.set_yticks": [
                    3032,
                    7136,
                    7031
                ],
                "v": [
                    3176,
                    3179,
                    3154,
                    3893,
                    3321,
                    3322
                ],
                "kwargs.items": [
                    3154
                ],
                "offset": [
                    3160,
                    3276,
                    3165,
                    3158
                ],
                "errorevery": [
                    3162,
                    3276,
                    3158
                ],
                "int": [
                    4643,
                    4644,
                    4645,
                    4646,
                    7133,
                    7026,
                    3165,
                    3162,
                    4605
                ],
                "plot_line": [
                    3170,
                    3262
                ],
                "fmt.lower": [
                    3170
                ],
                "fmt_style_kwargs": [
                    3174,
                    3176,
                    3182,
                    3184,
                    3193
                ],
                "fmt_style_kwargs.pop": [
                    3182
                ],
                "base_style": [
                    3238,
                    3216,
                    3186,
                    3188,
                    3190,
                    3223,
                    3192,
                    3193,
                    3194,
                    3195,
                    3197
                ],
                "self._get_lines.prop_cycler": [
                    3190
                ],
                "base_style.update": [
                    3193
                ],
                "plot_line_style": [
                    3263,
                    3215
                ],
                "barsabove": [
                    3218
                ],
                "eb_lines_style": [
                    3360,
                    3392,
                    3235,
                    3333,
                    3241,
                    3242,
                    3243,
                    3343,
                    3409,
                    3382,
                    3223,
                    3224,
                    3225,
                    3226,
                    3229,
                    3231
                ],
                "eb_lines_style.pop": [
                    3241,
                    3242,
                    3243,
                    3224,
                    3225
                ],
                "elinewidth": [
                    3228,
                    3229
                ],
                "key": [
                    3233,
                    3234,
                    3235,
                    3255,
                    3257,
                    3258
                ],
                "eb_cap_style": [
                    3336,
                    3338,
                    3351,
                    3355,
                    3238,
                    3240,
                    3368,
                    3244,
                    3245,
                    3372,
                    3249,
                    3251,
                    3385,
                    3258,
                    3387,
                    3259,
                    3400,
                    3404,
                    3417,
                    3421
                ],
                "eb_cap_style.pop": [
                    3240,
                    3244
                ],
                "capthick": [
                    3250,
                    3251
                ],
                "data_line": [
                    3264,
                    3426,
                    3261,
                    3263
                ],
                "barcols": [
                    3360,
                    3392,
                    3266,
                    3427,
                    3333,
                    3343,
                    3409,
                    3382
                ],
                "caplines": [
                    3426,
                    3267,
                    3366,
                    3335,
                    3398,
                    3337,
                    3371,
                    3386,
                    3403,
                    3349,
                    3415,
                    3384,
                    3354,
                    3420,
                    3422
                ],
                "lolims": [
                    3393,
                    3270,
                    3402,
                    3378,
                    3389,
                    3390,
                    3391
                ],
                "astype": [
                    4643,
                    4644,
                    4645,
                    3270,
                    3271,
                    3272,
                    3273,
                    4646,
                    7875,
                    6097
                ],
                "bool": [
                    3270,
                    3271,
                    3272,
                    3273,
                    6633,
                    3275,
                    5339,
                    5150
                ],
                "uplims": [
                    3271,
                    3406,
                    3407,
                    3408,
                    3378,
                    3410,
                    3419
                ],
                "xlolims": [
                    3329,
                    3272,
                    3340,
                    3341,
                    3342,
                    3344,
                    3353
                ],
                "xuplims": [
                    3329,
                    3361,
                    3273,
                    3370,
                    3357,
                    3358,
                    3359
                ],
                "everymask": [
                    3331,
                    3332,
                    3341,
                    3342,
                    3344,
                    3353,
                    3358,
                    3359,
                    3361,
                    3370,
                    3380,
                    3381,
                    3390,
                    3391,
                    3393,
                    3402,
                    3275,
                    3276,
                    3407,
                    3408,
                    3410,
                    3419
                ],
                "np.zeros": [
                    6720,
                    6721,
                    4711,
                    6727,
                    3275,
                    4811,
                    6705,
                    4658,
                    4659,
                    5364,
                    5175
                ],
                "xs": [
                    3941,
                    3953,
                    3283,
                    3284,
                    3285,
                    3287,
                    3963,
                    3964,
                    3934
                ],
                "ys": [
                    3941,
                    3953,
                    3283,
                    3286,
                    3287,
                    3963,
                    3964,
                    3934
                ],
                "mask": [
                    7683,
                    5847,
                    7691,
                    5843,
                    5844,
                    3284,
                    3285,
                    3286,
                    5845,
                    5849
                ],
                "err": [
                    3296,
                    3300
                ],
                "iter": [
                    3297,
                    3298
                ],
                "a_sh": [
                    3305,
                    3309,
                    3303
                ],
                "np.shape": [
                    6242,
                    3303,
                    3304,
                    3696,
                    3705
                ],
                "b_sh": [
                    3304,
                    3306,
                    3309
                ],
                "low": [
                    3321,
                    3323
                ],
                "high": [
                    3322,
                    3323
                ],
                "right": [
                    3331,
                    3332,
                    3341,
                    3342,
                    3344,
                    3326,
                    3358
                ],
                "extract_err": [
                    3326,
                    3375
                ],
                "noxlims": [
                    3329,
                    3330,
                    3331,
                    3332
                ],
                "noxlims.any": [
                    3330
                ],
                "yo": [
                    3360,
                    3331,
                    3333,
                    3335,
                    3337,
                    3341,
                    3343,
                    3358
                ],
                "_": [
                    3680,
                    3331,
                    3341,
                    3407,
                    3380,
                    3390,
                    3358
                ],
                "xywhere": [
                    3331,
                    3332,
                    3341,
                    3342,
                    3344,
                    3353,
                    3358,
                    3359,
                    3361,
                    3370,
                    3380,
                    3381,
                    3390,
                    3391,
                    3393,
                    3402,
                    3407,
                    3408,
                    3410,
                    3419
                ],
                "lo": [
                    3360,
                    3392,
                    3332,
                    3333,
                    3391,
                    3335,
                    3342,
                    3343,
                    3408,
                    3409,
                    3381,
                    3382,
                    3384,
                    3359
                ],
                "ro": [
                    3360,
                    3332,
                    3333,
                    3337,
                    3342,
                    3343,
                    3359
                ],
                "barcols.append": [
                    3360,
                    3392,
                    3333,
                    3343,
                    3409,
                    3382
                ],
                "self.hlines": [
                    3360,
                    8005,
                    3333,
                    8010,
                    3343
                ],
                "caplines.append": [
                    3366,
                    3335,
                    3398,
                    3337,
                    3371,
                    3386,
                    3403,
                    3349,
                    3415,
                    3384,
                    3354,
                    3420
                ],
                "xlolims.any": [
                    3340
                ],
                "rightup": [
                    3344,
                    3350
                ],
                "yup": [
                    3370,
                    3371,
                    3344,
                    3350,
                    3419,
                    3420
                ],
                "self.xaxis_inverted": [
                    3345,
                    3362
                ],
                "marker": [
                    7680,
                    7681,
                    3346,
                    3348,
                    3350,
                    7707,
                    7708,
                    3363,
                    7715,
                    3365,
                    3367,
                    4405,
                    4406,
                    4408,
                    4409,
                    4411,
                    3395,
                    3397,
                    3399,
                    3412,
                    3414,
                    3416,
                    3680,
                    3682,
                    3683,
                    7679
                ],
                "mlines.CARETLEFTBASE": [
                    3346,
                    3365
                ],
                "mlines.CARETRIGHTBASE": [
                    3363,
                    3348
                ],
                "xlo": [
                    3402,
                    3403,
                    3410,
                    3416,
                    3353,
                    3354
                ],
                "ylo": [
                    3361,
                    3367,
                    3402,
                    3403,
                    3353,
                    3354
                ],
                "xuplims.any": [
                    3357
                ],
                "leftlo": [
                    3361,
                    3367
                ],
                "xup": [
                    3393,
                    3399,
                    3370,
                    3371,
                    3419,
                    3420
                ],
                "lower": [
                    3407,
                    3375,
                    3408,
                    3410,
                    3380,
                    3381,
                    3390
                ],
                "upper": [
                    3393,
                    3391,
                    3381,
                    3375
                ],
                "noylims": [
                    3378,
                    3379,
                    3380,
                    3381
                ],
                "noylims.any": [
                    3379
                ],
                "xo": [
                    3392,
                    3407,
                    3409,
                    3380,
                    3382,
                    3384,
                    3386,
                    3390
                ],
                "uo": [
                    3392,
                    3408,
                    3409,
                    3381,
                    3382,
                    3386,
                    3391
                ],
                "lolims.any": [
                    3389
                ],
                "upperup": [
                    3393,
                    3399
                ],
                "self.yaxis_inverted": [
                    3394,
                    3411
                ],
                "mlines.CARETDOWNBASE": [
                    3395,
                    3414
                ],
                "mlines.CARETUPBASE": [
                    3412,
                    3397
                ],
                "uplims.any": [
                    3406
                ],
                "lowerlo": [
                    3416,
                    3410
                ],
                "errorbar_container": [
                    3433,
                    3426,
                    3431
                ],
                "ErrorbarContainer": [
                    3426
                ],
                "self.containers.append": [
                    3431
                ],
                "self.containers": [
                    3431
                ],
                "whis": [
                    3625,
                    3620,
                    3621
                ],
                "bootstrap": [
                    3625,
                    3622,
                    3623
                ],
                "bxpstats": [
                    3720,
                    3625,
                    3695,
                    3696,
                    3700,
                    3988,
                    3705,
                    3709,
                    3967
                ],
                "cbook.boxplot_stats": [
                    3625
                ],
                "autorange": [
                    3626
                ],
                "notch": [
                    3722,
                    3627,
                    3628
                ],
                "vert": [
                    8003,
                    3721,
                    4073,
                    7881,
                    3948,
                    3629,
                    3630
                ],
                "patch_artist": [
                    3657,
                    3721,
                    3631,
                    3632,
                    4029,
                    3902
                ],
                "meanline": [
                    3726,
                    3633,
                    3634,
                    4052,
                    3927
                ],
                "showmeans": [
                    8041,
                    7882,
                    3722,
                    3635,
                    3636,
                    4051
                ],
                "showcaps": [
                    4043,
                    3723,
                    3637,
                    3638
                ],
                "showbox": [
                    3640,
                    3723,
                    4028,
                    3639
                ],
                "showfliers": [
                    3726,
                    3641,
                    3642,
                    3675,
                    4063
                ],
                "boxprops": [
                    3911,
                    3658,
                    3659,
                    3660,
                    3724,
                    3914,
                    3916,
                    3644,
                    3645
                ],
                "whiskerprops": [
                    3727,
                    3918,
                    3646,
                    3647
                ],
                "capprops": [
                    3648,
                    3649,
                    3920,
                    3727
                ],
                "medianprops": [
                    3650,
                    3651,
                    3924,
                    3725
                ],
                "meanprops": [
                    3652,
                    3653,
                    3725,
                    3926,
                    3929
                ],
                "flierprops": [
                    3683,
                    3654,
                    3655,
                    3689,
                    3690,
                    3691,
                    3724,
                    3922,
                    3673
                ],
                "boxprops.pop": [
                    3660
                ],
                "sym": [
                    3680,
                    3667,
                    3671
                ],
                "usermedians": [
                    3696,
                    3700,
                    3694,
                    3695
                ],
                "stats": [
                    3716,
                    8068,
                    3718,
                    8069,
                    3988,
                    3990,
                    3994,
                    3995,
                    4001,
                    4002,
                    4007,
                    4014,
                    4015,
                    4016,
                    4017,
                    4023,
                    4024,
                    8020,
                    4054,
                    8023,
                    8025,
                    4059,
                    8030,
                    8031,
                    8032,
                    4065,
                    4066,
                    8033,
                    8034,
                    3700,
                    3702,
                    3709
                ],
                "med": [
                    3700,
                    3701,
                    3702
                ],
                "conf_intervals": [
                    3704,
                    3705,
                    3709
                ],
                "err_mess": [
                    3706,
                    3707
                ],
                "ci": [
                    3715,
                    3716,
                    3717,
                    3718,
                    3709,
                    3710,
                    3711
                ],
                "artists": [
                    8038,
                    3720,
                    8042,
                    8074,
                    7980,
                    8077,
                    8047,
                    3729,
                    8049,
                    8051,
                    8056
                ],
                "self.bxp": [
                    3720
                ],
                "widths": [
                    8000,
                    3720,
                    7882,
                    3981,
                    3982,
                    3983,
                    3984,
                    3985,
                    3988,
                    8020,
                    7993,
                    7994,
                    7995,
                    7999
                ],
                "manage_ticks": [
                    3728,
                    4072
                ],
                "cbook._rename_parameter": [
                    6816,
                    3435,
                    3731
                ],
                "whiskers": [
                    4105,
                    4035,
                    3876,
                    4038
                ],
                "caps": [
                    4045,
                    4105,
                    4044,
                    3877
                ],
                "boxes": [
                    4032,
                    4105,
                    4030,
                    3878
                ],
                "medians": [
                    8033,
                    3879,
                    7976,
                    4106,
                    4048,
                    4085,
                    8056
                ],
                "means": [
                    7973,
                    3880,
                    4106,
                    8042,
                    4053,
                    4058,
                    8030
                ],
                "fliers": [
                    3881,
                    4106,
                    4068
                ],
                "datalabels": [
                    3884,
                    4100,
                    3990
                ],
                "mlines.Line2D.zorder": [
                    3888
                ],
                "zdelta": [
                    3890,
                    3924,
                    3926,
                    3895
                ],
                "k.split": [
                    3893
                ],
                "rcParams.items": [
                    3893
                ],
                "k.startswith": [
                    3894
                ],
                "subkey": [
                    3894
                ],
                "explicit": [
                    3896,
                    3898
                ],
                "d.update": [
                    3897
                ],
                "mlines.Line2D._alias_map": [
                    3898
                ],
                "final_boxprops": [
                    4032,
                    3912,
                    3916,
                    4030,
                    3903
                ],
                "final_boxprops.update": [
                    3912
                ],
                "mpatches.PathPatch._alias_map": [
                    3914
                ],
                "mpatches.PathPatch": [
                    3914,
                    3943
                ],
                "line_props_with_rcdefaults": [
                    3916,
                    3917,
                    3919,
                    3921,
                    3923,
                    3925
                ],
                "final_whiskerprops": [
                    4036,
                    3917,
                    4039
                ],
                "final_capprops": [
                    4044,
                    4045,
                    3919
                ],
                "final_flierprops": [
                    3921,
                    4069
                ],
                "final_medianprops": [
                    4048,
                    3923
                ],
                "final_meanprops": [
                    3930,
                    4059,
                    3925,
                    4055
                ],
                "removed_prop": [
                    3929,
                    3930,
                    3927
                ],
                "np.append": [
                    3934
                ],
                "np.column_stack": [
                    6097,
                    3934
                ],
                "codes": [
                    3938,
                    3941,
                    3942,
                    3935
                ],
                "mpath.Path.MOVETO": [
                    3935
                ],
                "mpath.Path": [
                    3936,
                    3937,
                    3942,
                    3935
                ],
                "mpath": [
                    3936,
                    3937,
                    3942,
                    3935
                ],
                "mpath.Path.LINETO": [
                    3936
                ],
                "mpath.Path.CLOSEPOLY": [
                    3937
                ],
                "to_vc": [
                    3941
                ],
                "path": [
                    4422,
                    4413,
                    3942,
                    3943
                ],
                "patch": [
                    3943,
                    3944,
                    3945,
                    6799,
                    6800,
                    6777,
                    6801,
                    6710,
                    6806,
                    6713,
                    6779,
                    6781
                ],
                "self.add_artist": [
                    3944,
                    4947,
                    4941
                ],
                "patch_list": [
                    6776,
                    3953,
                    3964,
                    6777
                ],
                "shuffled": [
                    3960,
                    3957,
                    3959
                ],
                "i": [
                    4864,
                    6591,
                    4676,
                    4678,
                    4680,
                    4682,
                    4684,
                    4685,
                    4686,
                    4687,
                    4812,
                    4689,
                    4690,
                    4813,
                    4692,
                    4818,
                    4694,
                    4696,
                    4698,
                    4699,
                    4826,
                    4701,
                    4827,
                    4703,
                    4828,
                    4705,
                    4829,
                    4833,
                    6640,
                    6643,
                    3958,
                    3959,
                    4858,
                    4859,
                    4860,
                    4861
                ],
                "shuffled.extend": [
                    3959
                ],
                "N": [
                    3972,
                    3973,
                    3982,
                    3984,
                    3985,
                    5396,
                    5398,
                    5399,
                    5400,
                    5401,
                    7982,
                    7988,
                    7989,
                    5174,
                    5175,
                    7994,
                    7995,
                    5208,
                    5210,
                    5211,
                    5212,
                    5213,
                    5363,
                    5364,
                    3967
                ],
                "datashape_message": [
                    3968,
                    3974,
                    7983,
                    3986,
                    7990,
                    7996
                ],
                "datashape_message.format": [
                    7990,
                    3986,
                    7996,
                    3974
                ],
                "np.array": [
                    4608,
                    4870,
                    3976,
                    3994,
                    3995,
                    4000,
                    5408,
                    5409,
                    6312,
                    7999,
                    8000,
                    8023,
                    5220,
                    5221,
                    4842,
                    4724,
                    6645,
                    4094,
                    4607
                ],
                "np.clip": [
                    6676,
                    3982
                ],
                "np.ptp": [
                    6257,
                    6258,
                    3982
                ],
                "np.isscalar": [
                    7993,
                    6546,
                    3983
                ],
                "datalabels.append": [
                    3990
                ],
                "stats.get": [
                    8034,
                    8069,
                    3990
                ],
                "whisker_x": [
                    3993,
                    4036,
                    4039
                ],
                "np.ones": [
                    3993,
                    4002,
                    4001,
                    4807
                ],
                "whiskerlo_y": [
                    3994,
                    4036
                ],
                "whiskerhi_y": [
                    3995,
                    4039
                ],
                "cap_left": [
                    4000,
                    4012,
                    3998
                ],
                "cap_right": [
                    4000,
                    4011,
                    3999
                ],
                "cap_x": [
                    4000,
                    4018,
                    4044,
                    4045
                ],
                "cap_lo": [
                    4001,
                    4044
                ],
                "cap_hi": [
                    4002,
                    4045
                ],
                "box_left": [
                    4005,
                    4011,
                    4012,
                    4013,
                    4022,
                    4054,
                    4025
                ],
                "box_right": [
                    4006,
                    4011,
                    4012,
                    4022,
                    4054,
                    4025
                ],
                "med_y": [
                    4048,
                    4007
                ],
                "shownotches": [
                    4010
                ],
                "box_x": [
                    4032,
                    4011,
                    4030,
                    4022
                ],
                "box_y": [
                    4032,
                    4030,
                    4014,
                    4023
                ],
                "med_x": [
                    4048,
                    4025,
                    4018
                ],
                "boxes.extend": [
                    4032,
                    4030
                ],
                "dopatch": [
                    4030
                ],
                "doplot": [
                    4032,
                    4035,
                    4068,
                    4038,
                    4044,
                    4045,
                    4048,
                    4053,
                    4058
                ],
                "whiskers.extend": [
                    4035,
                    4038
                ],
                "caps.extend": [
                    4044,
                    4045
                ],
                "medians.extend": [
                    4048
                ],
                "means.extend": [
                    4058,
                    4053
                ],
                "flier_x": [
                    4065,
                    4069
                ],
                "np.full": [
                    4065
                ],
                "np.float64": [
                    4065
                ],
                "flier_y": [
                    4066,
                    4069
                ],
                "fliers.extend": [
                    4068
                ],
                "axis_name": [
                    4073,
                    4074,
                    4075,
                    4086
                ],
                "interval": [
                    4074,
                    4083,
                    4084
                ],
                "getattr": [
                    4074,
                    4075,
                    4086
                ],
                "self.dataLim": [
                    5410,
                    5413,
                    5222,
                    5225,
                    4074
                ],
                "axis": [
                    4096,
                    4099,
                    4075,
                    4076,
                    4089,
                    4090,
                    4093,
                    4095
                ],
                "axis.convert_units": [
                    4076
                ],
                "median": [
                    4085,
                    4086
                ],
                "extend": [
                    4086
                ],
                "median.sticky_edges": [
                    4086
                ],
                "locator": [
                    4089,
                    4092,
                    4093,
                    4094
                ],
                "axis.get_major_locator": [
                    4089,
                    4090
                ],
                "mticker.FixedLocator": [
                    4091,
                    4092
                ],
                "mticker": [
                    4097,
                    4098,
                    7778,
                    7781,
                    7725,
                    7728,
                    4091,
                    4092
                ],
                "axis.set_major_locator": [
                    4093
                ],
                "locator.locs": [
                    4094
                ],
                "formatter": [
                    4098,
                    4099,
                    4100,
                    4095
                ],
                "axis.get_major_formatter": [
                    4096,
                    4095
                ],
                "mticker.FixedFormatter": [
                    4097,
                    4098
                ],
                "axis.set_major_formatter": [
                    4099
                ],
                "formatter.seq": [
                    4100
                ],
                "self._autoscaleXon": [
                    4103
                ],
                "self._autoscaleYon": [
                    4103
                ],
                "facecolors": [
                    4192,
                    4163,
                    4164,
                    4184,
                    4185
                ],
                "edgecolors": [
                    4416,
                    4388,
                    4165,
                    4390,
                    4424,
                    4744,
                    4395,
                    4396,
                    4398,
                    4750,
                    4400,
                    4182,
                    4183,
                    4246,
                    4187,
                    4188
                ],
                "kwcolor": [
                    4167,
                    4169,
                    4174,
                    4207,
                    4176,
                    4183,
                    4185
                ],
                "c_was_none": [
                    4190,
                    4207
                ],
                "get_next_color_func": [
                    4194
                ],
                "c_is_string_or_strings": [
                    4195,
                    4207
                ],
                "collections.abc.Iterable": [
                    4197
                ],
                "collections.abc": [
                    4197
                ],
                "collections": [
                    4197
                ],
                "csize": [
                    4202
                ],
                "xsize": [
                    4233,
                    4203,
                    4240,
                    4243,
                    4215
                ],
                "c_is_mapped": [
                    4217,
                    4228,
                    4205
                ],
                "valid_shape": [
                    4232,
                    4227,
                    4206
                ],
                "c.size": [
                    4233,
                    4215
                ],
                "c.ravel": [
                    4216
                ],
                "c.shape": [
                    4219
                ],
                "_log.warning": [
                    4220
                ],
                "invalid_shape_exception": [
                    4233,
                    4243
                ],
                "np.ma.ravel": [
                    4376,
                    4377,
                    4384,
                    6273
                ],
                "np.ma": [
                    4384,
                    5185,
                    6273,
                    4419,
                    5187,
                    5347,
                    5158,
                    6275,
                    4394,
                    5651,
                    4376,
                    4377,
                    5658,
                    5660,
                    5373,
                    5375
                ],
                "x.size": [
                    4385,
                    4449,
                    4451,
                    4390,
                    6252,
                    4378,
                    5151
                ],
                "y.size": [
                    6252,
                    4378,
                    5340
                ],
                "self._parse_scatter_color_args": [
                    4389
                ],
                "plotnonfinite": [
                    4393
                ],
                "np.ma.masked_invalid": [
                    4394
                ],
                "cbook._combine_masks": [
                    4396,
                    4399
                ],
                "scales": [
                    4402,
                    4422
                ],
                "mmarkers.MarkerStyle": [
                    4408,
                    4411
                ],
                "mmarkers": [
                    4408,
                    4411
                ],
                "marker_obj": [
                    4409,
                    4411,
                    4413,
                    4414,
                    4415
                ],
                "marker_obj.get_path": [
                    4413
                ],
                "marker_obj.get_transform": [
                    4414
                ],
                "marker_obj.is_filled": [
                    4415
                ],
                "offsets": [
                    4419,
                    4711,
                    4712,
                    4713,
                    4426,
                    4714,
                    4715,
                    4716,
                    4717,
                    4718,
                    4719,
                    4721,
                    4752,
                    4731
                ],
                "np.ma.column_stack": [
                    4419
                ],
                "collection": [
                    5888,
                    5889,
                    5890,
                    5891,
                    5892,
                    4742,
                    6278,
                    6282,
                    5899,
                    4748,
                    6284,
                    4882,
                    4883,
                    4886,
                    4887,
                    4888,
                    4889,
                    5911,
                    4891,
                    4893,
                    5405,
                    5917,
                    5918,
                    5922,
                    5415,
                    5417,
                    4786,
                    4787,
                    4788,
                    4789,
                    4790,
                    4793,
                    4795,
                    4802,
                    4804,
                    4421,
                    4430,
                    4431,
                    4434,
                    4435,
                    4436,
                    6098,
                    6101,
                    4439,
                    6102,
                    4441,
                    6103,
                    6104,
                    6105,
                    6106,
                    6111,
                    5217,
                    4454,
                    6120,
                    4457,
                    5227,
                    6124,
                    5229,
                    6125,
                    6129,
                    5885,
                    5887
                ],
                "mcoll.PathCollection": [
                    4421
                ],
                "collection.set_transform": [
                    4430
                ],
                "collection.update": [
                    4790,
                    4431
                ],
                "collection.set_array": [
                    4786,
                    5888,
                    4434,
                    6102
                ],
                "collection.set_cmap": [
                    5889,
                    4435,
                    4787,
                    6103
                ],
                "cmap": [
                    5889,
                    5604,
                    7590,
                    6280,
                    4876,
                    4848,
                    6290,
                    4435,
                    4787,
                    6103,
                    6297
                ],
                "collection.set_norm": [
                    6104,
                    4788,
                    5890,
                    4436
                ],
                "norm": [
                    5890,
                    5604,
                    4774,
                    4775,
                    4776,
                    6280,
                    4877,
                    4849,
                    6290,
                    4436,
                    4788,
                    4759,
                    6104,
                    6297,
                    4764,
                    4767
                ],
                "vmin": [
                    7130,
                    5891,
                    7590,
                    7135,
                    7132,
                    5613,
                    5614,
                    7024,
                    7025,
                    4438,
                    4439,
                    4792,
                    4793,
                    7030,
                    6105,
                    6302,
                    6303
                ],
                "vmax": [
                    7130,
                    5891,
                    7590,
                    7135,
                    7132,
                    5613,
                    5614,
                    7024,
                    7025,
                    4438,
                    4439,
                    4792,
                    4793,
                    7030,
                    6105,
                    6302,
                    6303
                ],
                "collection.set_clim": [
                    4793,
                    5891,
                    6105,
                    4439
                ],
                "collection.autoscale_None": [
                    4441,
                    6106,
                    4795,
                    5892
                ],
                "self._xmargin": [
                    4449
                ],
                "self.set_xmargin": [
                    4450
                ],
                "self._ymargin": [
                    4451
                ],
                "self.set_ymargin": [
                    4452
                ],
                "np.mean": [
                    4465
                ],
                "C": [
                    5888,
                    6272,
                    6273,
                    6274,
                    6275,
                    5637,
                    5638,
                    5643,
                    5644,
                    5648,
                    6291,
                    6296,
                    5662,
                    6304,
                    4657,
                    5683,
                    5688,
                    5689,
                    5690,
                    5691,
                    4806,
                    4807,
                    5830,
                    6086,
                    4687,
                    5839,
                    6096,
                    4690,
                    6102,
                    4823,
                    5847,
                    6241,
                    6242,
                    5863,
                    4598,
                    4855
                ],
                "gridsize": [
                    4821,
                    4854,
                    4601,
                    4602,
                    4604
                ],
                "nx": [
                    6594,
                    6597,
                    6566,
                    4648,
                    4650,
                    6640,
                    4634,
                    6580,
                    6582,
                    6810,
                    6684,
                    4602,
                    4604,
                    4605,
                    6686,
                    6591
                ],
                "ny": [
                    4649,
                    4651,
                    4602,
                    4635,
                    4605
                ],
                "math.sqrt": [
                    4605
                ],
                "xscale": [
                    4736,
                    4609,
                    4730,
                    4732
                ],
                "np.any": [
                    4610,
                    4615
                ],
                "np.log10": [
                    4613,
                    4618,
                    7577,
                    7020,
                    7026,
                    7126,
                    7575,
                    7225,
                    7133
                ],
                "yscale": [
                    4737,
                    4730,
                    4741,
                    4614
                ],
                "extent": [
                    5604,
                    7589,
                    7590,
                    4619,
                    4620,
                    6287,
                    6291,
                    6297
                ],
                "mtransforms.nonsingular": [
                    4626,
                    4627
                ],
                "padding": [
                    4632,
                    4633,
                    4631
                ],
                "sy": [
                    4642,
                    4635,
                    4724,
                    4717
                ],
                "marginals": [
                    4803,
                    4637
                ],
                "xorig": [
                    4638,
                    4823
                ],
                "x.copy": [
                    6761,
                    4638,
                    6759
                ],
                "yorig": [
                    4855,
                    4639
                ],
                "y.copy": [
                    6762,
                    6758,
                    4639
                ],
                "ix1": [
                    4643,
                    4686,
                    4654,
                    4687,
                    4660,
                    4662
                ],
                "np.round": [
                    4643,
                    4644
                ],
                "iy1": [
                    4644,
                    4686,
                    4654,
                    4687,
                    4660,
                    4662
                ],
                "ix2": [
                    4645,
                    4655,
                    4689,
                    4690,
                    4661,
                    4663
                ],
                "np.floor": [
                    4645,
                    4646
                ],
                "iy2": [
                    4646,
                    4655,
                    4689,
                    4690,
                    4661,
                    4663
                ],
                "nx1": [
                    4675,
                    4676,
                    4648,
                    4712,
                    4713,
                    4714,
                    4652,
                    4715,
                    4686,
                    4658,
                    4660,
                    4692
                ],
                "ny1": [
                    4675,
                    4677,
                    4712,
                    4649,
                    4713,
                    4714,
                    4652,
                    4715,
                    4686,
                    4658,
                    4660,
                    4693
                ],
                "nx2": [
                    4679,
                    4680,
                    4650,
                    4714,
                    4652,
                    4715,
                    4689,
                    4659,
                    4661,
                    4699
                ],
                "ny2": [
                    4679,
                    4681,
                    4714,
                    4651,
                    4652,
                    4715,
                    4689,
                    4659,
                    4661,
                    4700
                ],
                "n": [
                    4652,
                    4711
                ],
                "d1": [
                    4656,
                    4654
                ],
                "d2": [
                    4656,
                    4655
                ],
                "bdist": [
                    4656,
                    4685,
                    4660,
                    4661
                ],
                "lattice1": [
                    4675,
                    4707,
                    4678,
                    4687,
                    4658,
                    4662,
                    4694,
                    4696,
                    4665,
                    4698,
                    4667
                ],
                "lattice2": [
                    4705,
                    4708,
                    4679,
                    4682,
                    4690,
                    4659,
                    4663,
                    4666,
                    4667,
                    4701,
                    4703
                ],
                "c1": [
                    4660,
                    4662
                ],
                "c2": [
                    4661,
                    4663
                ],
                "np.add.at": [
                    4662,
                    4663
                ],
                "np.add": [
                    4662,
                    4663
                ],
                "mincnt": [
                    4672,
                    4695,
                    4664,
                    4665,
                    4666,
                    4702,
                    4671
                ],
                "np.nan": [
                    4705,
                    4817,
                    4698,
                    4665,
                    4666
                ],
                "accum": [
                    4768,
                    4770,
                    4707,
                    4709,
                    4776,
                    4780,
                    4784,
                    4722,
                    4786,
                    4667,
                    4668
                ],
                "np.concatenate": [
                    6624,
                    6628,
                    8037,
                    8071,
                    8072,
                    4667
                ],
                "lattice1.ravel": [
                    4667
                ],
                "lattice2.ravel": [
                    4667
                ],
                "good_idxs": [
                    4721,
                    4722,
                    4668,
                    4709
                ],
                "np.isnan": [
                    4709,
                    6616,
                    4856,
                    4824,
                    4668
                ],
                "np.empty": [
                    4675,
                    4679
                ],
                "object": [
                    4675,
                    4679
                ],
                "j": [
                    4705,
                    4677,
                    4678,
                    4681,
                    4682,
                    4693,
                    4694,
                    4696,
                    4698,
                    4700,
                    4701,
                    4703
                ],
                "append": [
                    4690,
                    4687
                ],
                "vals": [
                    8023,
                    8024,
                    4694,
                    4695,
                    4696,
                    8026,
                    8027,
                    4701,
                    4702,
                    4703
                ],
                "reduce_C_function": [
                    4696,
                    4815,
                    4703
                ],
                "np.hstack": [
                    4707
                ],
                "ravel": [
                    4707,
                    4708
                ],
                "lattice1.astype": [
                    4707
                ],
                "lattice2.astype": [
                    4708
                ],
                "np.repeat": [
                    4712,
                    4714
                ],
                "polygon": [
                    4731,
                    4724,
                    4749
                ],
                "polygons": [
                    4738,
                    4731,
                    4733,
                    4743
                ],
                "np.expand_dims": [
                    4731
                ],
                "mcoll.PolyCollection": [
                    5217,
                    4742,
                    5885,
                    4874,
                    4748,
                    4845,
                    5405
                ],
                "mcolors.LogNorm": [
                    4764,
                    4767
                ],
                "norm.vmin": [
                    4775
                ],
                "norm.vmax": [
                    4775
                ],
                "norm.autoscale": [
                    4776
                ],
                "minimum": [
                    4780,
                    4782
                ],
                "maximum": [
                    4780,
                    4782
                ],
                "np.sort": [
                    4783
                ],
                "bins.searchsorted": [
                    4784
                ],
                "collection.set_alpha": [
                    6101,
                    4789,
                    5887
                ],
                "ind": [
                    5376,
                    5188,
                    4810,
                    4813,
                    5367,
                    5368,
                    5369,
                    5370,
                    5179,
                    5180,
                    5181,
                    5182
                ],
                "clip": [
                    4810
                ],
                "coarse.searchsorted": [
                    4810
                ],
                "coarse": [
                    4859,
                    4860,
                    4861,
                    4810,
                    4811,
                    4812,
                    4855,
                    4863,
                    4821,
                    4854,
                    4823,
                    4827,
                    4828,
                    4829,
                    4831
                ],
                "mus": [
                    4818,
                    4811,
                    4819
                ],
                "mu": [
                    4817,
                    4818,
                    4815
                ],
                "xcoarse": [
                    4824,
                    4826,
                    4823
                ],
                "coarse_bin": [
                    4855,
                    4823
                ],
                "valid": [
                    4824,
                    4833,
                    4864,
                    4856
                ],
                "values": [
                    4868,
                    4870,
                    4840,
                    4842,
                    4875,
                    4847,
                    4857,
                    4825
                ],
                "val": [
                    4840,
                    4826,
                    4868,
                    4858
                ],
                "enumerate": [
                    4826,
                    4858
                ],
                "thismin": [
                    4866,
                    4867,
                    4836,
                    4837,
                    4863,
                    4859,
                    4827,
                    4831
                ],
                "thismax": [
                    4866,
                    4867,
                    4838,
                    4839,
                    4829,
                    4863,
                    4861,
                    4831
                ],
                "np.diff": [
                    6657,
                    6255,
                    6256,
                    6673,
                    4831,
                    6651,
                    4863
                ],
                "verts.append": [
                    4866,
                    4836
                ],
                "values.append": [
                    4840,
                    4868
                ],
                "hbar": [
                    4845,
                    4847,
                    4848,
                    4849,
                    4850,
                    4851,
                    4852,
                    4882,
                    4886,
                    4887
                ],
                "hbar.set_array": [
                    4847
                ],
                "hbar.set_cmap": [
                    4848,
                    4886
                ],
                "hbar.set_norm": [
                    4849
                ],
                "hbar.set_alpha": [
                    4850
                ],
                "hbar.update": [
                    4851
                ],
                "ycoarse": [
                    4856,
                    4858,
                    4855
                ],
                "vbar": [
                    4874,
                    4875,
                    4876,
                    4877,
                    4878,
                    4879,
                    4880,
                    4883,
                    4888,
                    4889
                ],
                "vbar.set_array": [
                    4875
                ],
                "vbar.set_cmap": [
                    4888,
                    4876
                ],
                "vbar.set_norm": [
                    4877
                ],
                "vbar.set_alpha": [
                    4878
                ],
                "vbar.update": [
                    4879
                ],
                "collection.hbar": [
                    4882
                ],
                "collection.vbar": [
                    4883
                ],
                "collection.get_cmap": [
                    4888,
                    4886
                ],
                "hbar.set_clim": [
                    4887
                ],
                "collection.get_clim": [
                    4889,
                    4887
                ],
                "vbar.set_clim": [
                    4889
                ],
                "collection.callbacksSM.connect": [
                    4891
                ],
                "collection.callbacksSM": [
                    4891
                ],
                "on_changed": [
                    4891
                ],
                "mpatches.FancyArrow": [
                    4940
                ],
                "qk": [
                    4946,
                    4947,
                    4948
                ],
                "mquiver.QuiverKey": [
                    4944,
                    4946
                ],
                "mquiver": [
                    4966,
                    4971,
                    4944,
                    4946,
                    4983
                ],
                "Q": [
                    4946
                ],
                "X": [
                    5895,
                    5640,
                    5642,
                    5644,
                    5649,
                    5651,
                    5658,
                    5659,
                    5667,
                    5669,
                    5670,
                    5671,
                    5675,
                    5175,
                    5691,
                    7874,
                    7875,
                    7876,
                    5830,
                    5831,
                    6086,
                    6087,
                    5834,
                    5835,
                    6088,
                    6091,
                    6092,
                    5840,
                    6097,
                    4946,
                    5843,
                    5207,
                    5208,
                    5210,
                    5211,
                    5212,
                    5213,
                    5850,
                    5215,
                    5852,
                    5854,
                    5856,
                    5608
                ],
                "Y": [
                    5640,
                    5896,
                    5642,
                    5644,
                    5649,
                    5395,
                    5396,
                    5651,
                    5398,
                    5399,
                    5400,
                    5401,
                    5403,
                    5660,
                    5661,
                    5668,
                    5672,
                    5673,
                    5674,
                    5675,
                    5691,
                    5830,
                    6086,
                    6089,
                    5834,
                    6091,
                    5836,
                    6093,
                    5841,
                    4946,
                    5843,
                    6097,
                    5851,
                    5853,
                    5855,
                    5857,
                    5364
                ],
                "U": [
                    4946
                ],
                "kw": [
                    4964,
                    4966,
                    4946,
                    4981,
                    7770,
                    4983,
                    4954,
                    7774
                ],
                "docstring.copy": [
                    4944
                ],
                "mquiver.QuiverKey.__init__": [
                    4944
                ],
                "self._quiver_units": [
                    4964,
                    4981
                ],
                "q": [
                    8034,
                    8035,
                    8037,
                    4966,
                    8069,
                    4968,
                    8070,
                    4970,
                    8071,
                    8072
                ],
                "mquiver.Quiver": [
                    4971,
                    4966
                ],
                "quiver.__doc__": [
                    4971
                ],
                "quiver": [
                    4971
                ],
                "mquiver.Quiver.quiver_doc": [
                    4971
                ],
                "mquiver.Barbs": [
                    4983
                ],
                "poly": [
                    5037,
                    5038
                ],
                "mcoll.Collection": [
                    5128,
                    5317
                ],
                "y2": [
                    5221,
                    5158,
                    5160,
                    5166,
                    5135,
                    5140,
                    5142,
                    5181
                ],
                "ma.masked_invalid": [
                    5327,
                    5328,
                    5329,
                    5138,
                    5139,
                    5140
                ],
                "ma": [
                    5138,
                    5139,
                    5140,
                    5327,
                    5328,
                    5329,
                    5839,
                    5840,
                    5841,
                    5843,
                    5847,
                    5850,
                    5851,
                    5852,
                    5853,
                    5854,
                    5855,
                    5856,
                    5857,
                    5863
                ],
                "name": [
                    5144,
                    5331,
                    5333,
                    5142
                ],
                "array": [
                    5331,
                    5332,
                    5142,
                    5143
                ],
                "array.ndim": [
                    5332,
                    5143
                ],
                "where.size": [
                    5340,
                    5151
                ],
                "functools.reduce": [
                    5346,
                    5157
                ],
                "functools": [
                    5346,
                    5157
                ],
                "np.logical_or": [
                    5346,
                    5157
                ],
                "map": [
                    5347,
                    5158
                ],
                "np.ma.getmask": [
                    5347,
                    5158
                ],
                "polys": [
                    5217,
                    5351,
                    5162,
                    5403,
                    5405,
                    5215
                ],
                "ind0": [
                    5352,
                    5353,
                    5354,
                    5163,
                    5164,
                    5165,
                    5198,
                    5166,
                    5355,
                    5386
                ],
                "ind1": [
                    5352,
                    5353,
                    5354,
                    5163,
                    5164,
                    5165,
                    5166,
                    5199,
                    5355,
                    5387
                ],
                "cbook.contiguous_regions": [
                    5352,
                    5163
                ],
                "xslice": [
                    5164,
                    5169,
                    5171,
                    5204,
                    5205,
                    5174,
                    5210,
                    5212
                ],
                "y1slice": [
                    5169,
                    5211,
                    5165
                ],
                "y2slice": [
                    5166,
                    5169,
                    5204,
                    5205,
                    5213
                ],
                "step": [
                    5356,
                    5357,
                    5167,
                    5168,
                    7029,
                    7030,
                    7133,
                    7135
                ],
                "step_func": [
                    5168,
                    5169,
                    5357,
                    5358
                ],
                "cbook.STEP_LOOKUP_MAP": [
                    5168,
                    5357
                ],
                "interpolate": [
                    5177,
                    5365
                ],
                "im1": [
                    5186,
                    5374,
                    5367,
                    5368,
                    5369,
                    5370,
                    5179,
                    5180,
                    5181,
                    5182
                ],
                "x_values": [
                    5192,
                    5193,
                    5194,
                    5180
                ],
                "diff_values": [
                    5184,
                    5185,
                    5378,
                    5187,
                    5373,
                    5380,
                    5190,
                    5192,
                    5369,
                    5372,
                    5181,
                    5375
                ],
                "y1_values": [
                    5195,
                    5182
                ],
                "np.ma.is_masked": [
                    5185,
                    5187,
                    5651,
                    5373,
                    5375
                ],
                "diff_order": [
                    5192,
                    5378,
                    5380,
                    5190
                ],
                "diff_values.argsort": [
                    5378,
                    5190
                ],
                "diff_root_x": [
                    5382,
                    5191,
                    5384,
                    5194,
                    5196
                ],
                "np.interp": [
                    5194,
                    5379,
                    5382,
                    5191
                ],
                "x_order": [
                    5193,
                    5194,
                    5195
                ],
                "x_values.argsort": [
                    5193
                ],
                "diff_root_y": [
                    5379,
                    5382,
                    5384,
                    5194,
                    5196
                ],
                "start": [
                    5386,
                    5198,
                    5392,
                    5395,
                    5204,
                    5207
                ],
                "get_interp_point": [
                    5386,
                    5387,
                    5198,
                    5199
                ],
                "end": [
                    5387,
                    5199,
                    5393,
                    5396,
                    5205,
                    5208
                ],
                "polys.append": [
                    5403,
                    5215
                ],
                "XY1": [
                    5220,
                    5222
                ],
                "T": [
                    5408,
                    5409,
                    5220,
                    5221,
                    5906
                ],
                "XY2": [
                    5225,
                    5221
                ],
                "self.dataLim.update_from_data_xy": [
                    5225,
                    5410,
                    5413,
                    5222
                ],
                "self.ignore_existing_data_limits": [
                    5410,
                    5412,
                    5413,
                    5222,
                    5224,
                    5225
                ],
                "x2": [
                    5409,
                    5347,
                    5349,
                    5355,
                    5324,
                    5329,
                    5331,
                    5369
                ],
                "yslice": [
                    5353,
                    5358,
                    5360,
                    5392,
                    5393,
                    5363,
                    5399,
                    5401
                ],
                "x1slice": [
                    5354,
                    5358,
                    5398
                ],
                "x2slice": [
                    5355,
                    5358,
                    5392,
                    5393,
                    5400
                ],
                "y_values": [
                    5368,
                    5380,
                    5381,
                    5382
                ],
                "x1_values": [
                    5370,
                    5383
                ],
                "y_order": [
                    5381,
                    5382,
                    5383
                ],
                "y_values.argsort": [
                    5381
                ],
                "X1Y": [
                    5408,
                    5410
                ],
                "X2Y": [
                    5409,
                    5413
                ],
                "aspect": [
                    5601,
                    5602,
                    5603,
                    7720,
                    7691
                ],
                "im": [
                    6289,
                    6295,
                    6299,
                    6300,
                    7590,
                    7594,
                    7774,
                    5604,
                    5608,
                    5609,
                    5610,
                    7784,
                    5612,
                    5614,
                    5616,
                    5617,
                    5621,
                    5623,
                    5624
                ],
                "mimage.AxesImage": [
                    6289,
                    5604
                ],
                "mimage": [
                    6289,
                    5604,
                    6295
                ],
                "interpolation": [
                    5604
                ],
                "origin": [
                    5604,
                    7692
                ],
                "filternorm": [
                    5605
                ],
                "filterrad": [
                    5605
                ],
                "resample": [
                    5606
                ],
                "im.set_data": [
                    5608
                ],
                "im.set_alpha": [
                    5609
                ],
                "im.get_clip_path": [
                    5610
                ],
                "im.set_clip_path": [
                    5612
                ],
                "im.set_clim": [
                    5614
                ],
                "im.autoscale_None": [
                    5616
                ],
                "im.set_url": [
                    5617
                ],
                "url": [
                    5617
                ],
                "im.set_extent": [
                    5621
                ],
                "im.get_extent": [
                    5621
                ],
                "self.add_image": [
                    6299,
                    5623
                ],
                "nrows": [
                    5638,
                    5640,
                    5642,
                    5680,
                    5685,
                    5662
                ],
                "ncols": [
                    5638,
                    5640,
                    5642,
                    5680,
                    5685,
                    5662
                ],
                "C.shape": [
                    6275,
                    5638,
                    5683,
                    5688,
                    5662
                ],
                "allmatch": [
                    6084,
                    5679,
                    6086,
                    5639
                ],
                "np.meshgrid": [
                    5640,
                    5642
                ],
                "cbook.safe_masked_invalid": [
                    5649,
                    5690,
                    5643
                ],
                "funcname": [
                    5665,
                    5678,
                    5650,
                    5683,
                    5688
                ],
                "np.ma.core.MaskedArray": [
                    5658,
                    5660
                ],
                "np.ma.core": [
                    5658,
                    5660
                ],
                "X.data": [
                    5659
                ],
                "Y.data": [
                    5661
                ],
                "X.shape": [
                    5667,
                    5669,
                    6087,
                    5831,
                    5675
                ],
                "Ny": [
                    5668,
                    5671,
                    5831,
                    5673,
                    5863,
                    6087,
                    5680,
                    6098,
                    5683,
                    5685,
                    5688,
                    5689
                ],
                "Y.shape": [
                    5672,
                    5675,
                    5668
                ],
                "X.ndim": [
                    5669
                ],
                "X.reshape": [
                    5670
                ],
                "x.repeat": [
                    5671
                ],
                "Y.ndim": [
                    5672
                ],
                "Y.reshape": [
                    5673
                ],
                "y.repeat": [
                    5674
                ],
                "self._pcolorargs": [
                    6086,
                    5830
                ],
                "ma.asarray": [
                    5840,
                    5841,
                    5839
                ],
                "ma.getmaskarray": [
                    5843,
                    5847
                ],
                "xymask": [
                    5844,
                    5847
                ],
                "unmask": [
                    5856,
                    5857,
                    5863,
                    5849,
                    5850,
                    5851,
                    5852,
                    5853,
                    5854,
                    5855
                ],
                "X1": [
                    5858,
                    5850,
                    5860
                ],
                "ma.filled": [
                    5856,
                    5857,
                    5863,
                    5850,
                    5851,
                    5852,
                    5853,
                    5854,
                    5855
                ],
                "Y1": [
                    5851,
                    5860
                ],
                "X2": [
                    5860,
                    5852
                ],
                "Y2": [
                    5860,
                    5853
                ],
                "X3": [
                    5860,
                    5854
                ],
                "Y3": [
                    5860,
                    5855
                ],
                "X4": [
                    5856,
                    5860
                ],
                "Y4": [
                    5857,
                    5860
                ],
                "npoly": [
                    5858,
                    5861
                ],
                "np.stack": [
                    5860,
                    6271
                ],
                "xy.reshape": [
                    5861
                ],
                "ec": [
                    5872,
                    5880
                ],
                "self.grid": [
                    5893,
                    7439,
                    7023,
                    7129,
                    6108
                ],
                "X.compressed": [
                    5895
                ],
                "Y.compressed": [
                    5896
                ],
                "collection._transform": [
                    5899,
                    6111
                ],
                "mtransforms.Transform": [
                    6112,
                    5900
                ],
                "t._as_mpl_transform": [
                    6114,
                    5902
                ],
                "self.axes": [
                    6114,
                    5902
                ],
                "t.contains_branch_seperately": [
                    5904,
                    6116
                ],
                "trans_to_data": [
                    5905,
                    5907,
                    6117,
                    6118
                ],
                "pts": [
                    5906,
                    5907
                ],
                "T.astype": [
                    5906
                ],
                "np.vstack": [
                    5906
                ],
                "transformed_pts": [
                    5907,
                    5908,
                    5909
                ],
                "trans_to_data.transform": [
                    5907,
                    6118
                ],
                "collection.sticky_edges.x": [
                    6124,
                    5917
                ],
                "collection.sticky_edges": [
                    6125,
                    6124,
                    5917,
                    5918
                ],
                "collection.sticky_edges.y": [
                    6125,
                    5918
                ],
                "shading": [
                    6081,
                    6099,
                    6084
                ],
                "shading.lower": [
                    6081
                ],
                "X.ravel": [
                    6088
                ],
                "Y.ravel": [
                    6089
                ],
                "C.ravel": [
                    6096
                ],
                "coords": [
                    7875,
                    7877,
                    6118,
                    6279,
                    6122,
                    6123,
                    6097,
                    6098,
                    6271
                ],
                "mcoll.QuadMesh": [
                    6098,
                    6278
                ],
                "antialiased": [
                    6099
                ],
                "nr": [
                    6242,
                    7717,
                    6246,
                    7719,
                    6279
                ],
                "nc": [
                    6242,
                    7717,
                    6245,
                    7718,
                    6279
                ],
                "style": [
                    6244,
                    6253,
                    6288,
                    6259,
                    6261,
                    6294,
                    6263,
                    6269
                ],
                "y.ndim": [
                    6251,
                    6262
                ],
                "np.abs": [
                    7683,
                    6257,
                    6258,
                    7700,
                    7126,
                    7705
                ],
                "dx.mean": [
                    6257
                ],
                "dy.mean": [
                    6258
                ],
                "qm_kwargs": [
                    6273,
                    6275,
                    6279
                ],
                "np.ma.reshape": [
                    6275
                ],
                "xl": [
                    6312,
                    6283,
                    6310,
                    6287
                ],
                "yb": [
                    6312,
                    6311,
                    6283,
                    6287
                ],
                "mimage.PcolorImage": [
                    6295
                ],
                "ret.set_clim": [
                    6303
                ],
                "ret.autoscale_None": [
                    6305
                ],
                "ret.get_clip_path": [
                    6306
                ],
                "ret.set_clip_path": [
                    6308
                ],
                "ret.sticky_edges.x": [
                    6310
                ],
                "ret.sticky_edges": [
                    6310,
                    6311
                ],
                "ret.sticky_edges.y": [
                    6311
                ],
                "contours": [
                    6321,
                    6329,
                    6327,
                    6319
                ],
                "mcontour.QuadContourSet": [
                    6330,
                    6327,
                    6322,
                    6319
                ],
                "mcontour": [
                    6319,
                    6322,
                    6327,
                    6330,
                    6334
                ],
                "contour.__doc__": [
                    6322
                ],
                "contour": [
                    6322
                ],
                "mcontour.QuadContourSet._contour_doc": [
                    6330,
                    6322
                ],
                "contourf.__doc__": [
                    6330
                ],
                "contourf": [
                    6330
                ],
                "CS.clabel": [
                    6333
                ],
                "CS": [
                    6333
                ],
                "clabel.__doc__": [
                    6334
                ],
                "clabel": [
                    6334
                ],
                "mcontour.ContourSet.clabel.__doc__": [
                    6334
                ],
                "mcontour.ContourSet.clabel": [
                    6334
                ],
                "mcontour.ContourSet": [
                    6334
                ],
                "bin_range": [
                    6629,
                    6631,
                    6605,
                    6573,
                    6574,
                    6543,
                    6617
                ],
                "histtype": [
                    6559,
                    6671,
                    6745,
                    6554,
                    6683,
                    6718,
                    6687
                ],
                "stacked": [
                    6560,
                    6634,
                    6687,
                    6706,
                    6678,
                    6646,
                    6714,
                    6683,
                    6749,
                    6559
                ],
                "input_empty": [
                    6563,
                    6622
                ],
                "np.size": [
                    8072,
                    6563,
                    8071
                ],
                "cbook._reshape_2D": [
                    6578,
                    6565
                ],
                "wi": [
                    6585,
                    6586
                ],
                "self._get_lines.get_next_color": [
                    8016,
                    6591
                ],
                "error_message": [
                    6595,
                    6598
                ],
                "hist_kwargs": [
                    6600,
                    6643,
                    6635,
                    6631
                ],
                "np.inf": [
                    6606,
                    6607
                ],
                "np.nanmin": [
                    6612
                ],
                "np.nanmax": [
                    6613
                ],
                "_w": [
                    6624,
                    6626,
                    6629
                ],
                "histogram_bin_edges": [
                    6628
                ],
                "density": [
                    6656,
                    6633,
                    6634,
                    6635,
                    6650,
                    6909
                ],
                "tops": [
                    6657,
                    6659,
                    6638,
                    6703,
                    6811,
                    6644,
                    6645,
                    6677,
                    6647,
                    6651,
                    6748,
                    6813
                ],
                "m": [
                    6755,
                    6756,
                    6703,
                    6705,
                    6643,
                    6644,
                    6707,
                    6709,
                    6715,
                    6748
                ],
                "tops.append": [
                    6644
                ],
                "tops.cumsum": [
                    6647
                ],
                "sum": [
                    6651
                ],
                "cumulative": [
                    6652,
                    6654
                ],
                "slc": [
                    6657,
                    6659,
                    6653,
                    6655
                ],
                "slice": [
                    6653,
                    6655
                ],
                "cumsum": [
                    6657,
                    6659
                ],
                "_saved_autoscalex": [
                    6666,
                    6786
                ],
                "self.get_autoscalex_on": [
                    6666
                ],
                "_saved_autoscaley": [
                    6667,
                    6787
                ],
                "self.get_autoscaley_on": [
                    6667
                ],
                "self.set_autoscalex_on": [
                    6786,
                    6668
                ],
                "self.set_autoscaley_on": [
                    6787,
                    6669
                ],
                "histtype.startswith": [
                    6718,
                    6671
                ],
                "totwidth": [
                    6688,
                    6692,
                    6694,
                    6673,
                    6684,
                    6686
                ],
                "rwidth": [
                    6675,
                    6676
                ],
                "dr": [
                    6688,
                    6676,
                    6679,
                    6681,
                    6684,
                    6686
                ],
                "dw": [
                    6689,
                    6716,
                    6685
                ],
                "boffset": [
                    6689,
                    6692,
                    6694,
                    6710,
                    6716,
                    6686
                ],
                "_barfunc": [
                    6697,
                    6700,
                    6710
                ],
                "self.barh": [
                    6697
                ],
                "bottom_kwarg": [
                    6712,
                    6698,
                    6701
                ],
                "fill": [
                    8004,
                    8008,
                    6765,
                    6772,
                    6774,
                    6775,
                    8025,
                    6745
                ],
                "xvals": [
                    6761,
                    6747,
                    6769,
                    6758
                ],
                "yvals": [
                    6769,
                    6762,
                    6747,
                    6759
                ],
                "xvals.append": [
                    6761,
                    6758
                ],
                "yvals.append": [
                    6762,
                    6759
                ],
                "split": [
                    6771,
                    6765
                ],
                "reversed": [
                    6769
                ],
                "self.fill": [
                    6770
                ],
                "patch.sticky_edges.y.append": [
                    6779
                ],
                "patch.sticky_edges.y": [
                    6779
                ],
                "patch.sticky_edges": [
                    6779,
                    6781
                ],
                "patch.sticky_edges.x.append": [
                    6781
                ],
                "patch.sticky_edges.x": [
                    6781
                ],
                "patches.reverse": [
                    6784
                ],
                "lab": [
                    6797
                ],
                "lbl": [
                    6803,
                    6804,
                    6799
                ],
                "itertools.zip_longest": [
                    6799
                ],
                "p.update": [
                    6802,
                    6807
                ],
                "p.set_label": [
                    6808,
                    6804
                ],
                "cbook.silent_list": [
                    6811,
                    6813
                ],
                "xedges": [
                    6920,
                    6917,
                    6908,
                    6916
                ],
                "yedges": [
                    6920,
                    6908,
                    6916,
                    6918
                ],
                "np.histogram2d": [
                    6908
                ],
                "cmin": [
                    6912,
                    8071,
                    8068,
                    6911
                ],
                "cmax": [
                    8072,
                    6913,
                    6914,
                    8068
                ],
                "pc": [
                    6920,
                    6916
                ],
                "self.pcolormesh": [
                    6916
                ],
                "h.T": [
                    6916
                ],
                "Fc": [
                    7296,
                    7300,
                    7434,
                    7588,
                    7211,
                    7212,
                    7219,
                    7366,
                    7367,
                    7371,
                    7117,
                    7118,
                    7124,
                    7007,
                    7008,
                    7013,
                    7548,
                    7549,
                    7295
                ],
                "pxx": [
                    7036,
                    7010,
                    7020,
                    7034
                ],
                "freqs": [
                    7298,
                    7300,
                    7302,
                    7431,
                    7306,
                    7434,
                    7436,
                    7564,
                    7441,
                    7588,
                    7589,
                    7594,
                    7217,
                    7219,
                    7230,
                    7234,
                    7369,
                    7371,
                    7373,
                    7120,
                    7377,
                    7124,
                    7126,
                    7010,
                    7139,
                    7013,
                    7141,
                    7020,
                    7034,
                    7036
                ],
                "mlab.psd": [
                    7010
                ],
                "NFFT": [
                    7585,
                    7010,
                    7431,
                    7564,
                    7120,
                    7546,
                    7547
                ],
                "Fs": [
                    7585,
                    7010,
                    7298,
                    7431,
                    7369,
                    7564,
                    7120,
                    7217
                ],
                "window": [
                    7298,
                    7011,
                    7432,
                    7369,
                    7565,
                    7121,
                    7217
                ],
                "noverlap": [
                    7585,
                    7011,
                    7432,
                    7566,
                    7121,
                    7550,
                    7551
                ],
                "pad_to": [
                    7011,
                    7299,
                    7370,
                    7566,
                    7121,
                    7218
                ],
                "sides": [
                    7299,
                    7012,
                    7370,
                    7567,
                    7122,
                    7218
                ],
                "scale_by_freq": [
                    7012,
                    7015,
                    7433,
                    7568,
                    7122
                ],
                "psd_units": [
                    7016,
                    7018,
                    7022
                ],
                "self.set_xlabel": [
                    7303,
                    7021,
                    7374,
                    7437,
                    7127,
                    7231
                ],
                "self.set_ylabel": [
                    7232,
                    7304,
                    7022,
                    7375,
                    7438,
                    7128
                ],
                "self.viewLim.intervaly": [
                    7024,
                    7130
                ],
                "self.viewLim": [
                    7024,
                    7130
                ],
                "intv": [
                    7025,
                    7026,
                    7132,
                    7133
                ],
                "logi": [
                    7026,
                    7027,
                    7028,
                    7029
                ],
                "ticks": [
                    7136,
                    7135,
                    7030,
                    7031
                ],
                "math.floor": [
                    7030,
                    7135
                ],
                "math.ceil": [
                    7030,
                    7135
                ],
                "return_line": [
                    7033,
                    7138
                ],
                "pxy": [
                    7120,
                    7139,
                    7141,
                    7126
                ],
                "mlab.csd": [
                    7120
                ],
                "scale": [
                    7556,
                    7558,
                    7560,
                    7561,
                    7214,
                    7215,
                    7571,
                    7221,
                    7573,
                    7224,
                    7579,
                    7228
                ],
                "spec": [
                    7234,
                    7298,
                    7302,
                    7369,
                    7306,
                    7577,
                    7564,
                    7373,
                    7594,
                    7217,
                    7377,
                    7572,
                    7222,
                    7575,
                    7225
                ],
                "mlab.magnitude_spectrum": [
                    7217
                ],
                "Z": [
                    7682,
                    7683,
                    7717,
                    7590,
                    7774,
                    7577,
                    7694,
                    7695,
                    7705,
                    7769,
                    7572,
                    7222,
                    7575,
                    7704,
                    7225,
                    7581,
                    7230,
                    7679
                ],
                "yunits": [
                    7232,
                    7226,
                    7223
                ],
                "mlab.angle_spectrum": [
                    7298
                ],
                "mlab.phase_spectrum": [
                    7369
                ],
                "mlab.window_hanning": [
                    7382
                ],
                "cxy": [
                    7441,
                    7436,
                    7431
                ],
                "mlab.cohere": [
                    7431
                ],
                "mode": [
                    7553,
                    7557,
                    7561,
                    7569,
                    7574
                ],
                "mlab.specgram": [
                    7564
                ],
                "np.flipud": [
                    7581
                ],
                "xextent": [
                    7586,
                    7587,
                    7583
                ],
                "pad_xextent": [
                    7585,
                    7586
                ],
                "self.imshow": [
                    7774,
                    7691,
                    7590
                ],
                "self.axis": [
                    7592
                ],
                "markersize": [
                    7681,
                    7715,
                    7709,
                    7710,
                    7679
                ],
                "precision": [
                    7696,
                    7705,
                    7683,
                    7700
                ],
                "mcolors.ListedColormap": [
                    7686
                ],
                "Z.tocoo": [
                    7695
                ],
                "c.row": [
                    7697,
                    7701
                ],
                "c.col": [
                    7698,
                    7702
                ],
                "nonzero": [
                    7700,
                    7701,
                    7702,
                    7705,
                    7706
                ],
                "c.data": [
                    7700
                ],
                "np.nonzero": [
                    7706
                ],
                "marks": [
                    7721,
                    7714,
                    7716
                ],
                "Z.shape": [
                    7717
                ],
                "self.title.set_y": [
                    7722,
                    7775
                ],
                "self.xaxis.tick_top": [
                    7776,
                    7723
                ],
                "self.xaxis.set_ticks_position": [
                    7777,
                    7724
                ],
                "self.xaxis.set_major_locator": [
                    7778,
                    7725
                ],
                "mticker.MaxNLocator": [
                    7728,
                    7781,
                    7778,
                    7725
                ],
                "self.yaxis.set_major_locator": [
                    7728,
                    7781
                ],
                "np.all": [
                    7874
                ],
                "kde": [
                    7876,
                    7877
                ],
                "mlab.GaussianKDE": [
                    7876
                ],
                "bw_method": [
                    7876
                ],
                "kde.evaluate": [
                    7877
                ],
                "vpstats": [
                    8068,
                    7879,
                    7881,
                    7982,
                    8020
                ],
                "cbook.violin_stats": [
                    7879
                ],
                "dataset": [
                    7879
                ],
                "_kde_method": [
                    7879
                ],
                "points": [
                    7879
                ],
                "quantiles": [
                    8037,
                    7880,
                    7977,
                    8074,
                    8062
                ],
                "self.violin": [
                    7881
                ],
                "showextrema": [
                    7883,
                    8046
                ],
                "showmedians": [
                    7883,
                    8055
                ],
                "pmins": [
                    8068,
                    8042,
                    8047,
                    8049,
                    8057,
                    7999
                ],
                "pmaxes": [
                    8000,
                    8068,
                    8042,
                    8047,
                    8049,
                    8058
                ],
                "self.fill_betweenx": [
                    8004
                ],
                "perp_lines": [
                    8005,
                    8009,
                    8042,
                    8074,
                    8047,
                    8049,
                    8056
                ],
                "par_lines": [
                    8010,
                    8051,
                    8006
                ],
                "self.fill_between": [
                    8008
                ],
                "fillcolor": [
                    8016,
                    8028,
                    8013
                ],
                "bodies": [
                    8025,
                    8019,
                    8038
                ],
                "vals.max": [
                    8024
                ],
                "means.append": [
                    8030
                ],
                "mins.append": [
                    8031
                ],
                "maxes.append": [
                    8032
                ],
                "medians.append": [
                    8033
                ],
                "quantiles.size": [
                    8062
                ],
                "ppmins": [
                    8065,
                    8074,
                    8071
                ],
                "ppmaxs": [
                    8072,
                    8074,
                    8067
                ],
                "table": [
                    8081
                ],
                "mtable.table": [
                    8081
                ],
                "mtable": [
                    8081
                ],
                "stackplot": [
                    8084
                ],
                "mstack.stackplot": [
                    8084
                ],
                "mstack": [
                    8084
                ],
                "streamplot": [
                    8086
                ],
                "mstream.streamplot": [
                    8087
                ],
                "mstream": [
                    8087
                ],
                "tricontour": [
                    8089
                ],
                "mtri.tricontour": [
                    8089
                ],
                "mtri": [
                    8089,
                    8090,
                    8091,
                    8092
                ],
                "tricontourf": [
                    8090
                ],
                "mtri.tricontourf": [
                    8090
                ],
                "tripcolor": [
                    8091
                ],
                "mtri.tripcolor": [
                    8091
                ],
                "triplot": [
                    8092
                ],
                "mtri.triplot": [
                    8092
                ]
            },
            "filtered_variables_in_file": {
                "np.ndim": [
                    6272,
                    6274,
                    44,
                    6304
                ],
                "np": [
                    4608,
                    6657,
                    4610,
                    7225,
                    7682,
                    4613,
                    5637,
                    4615,
                    5640,
                    7683,
                    4618,
                    5642,
                    4622,
                    4623,
                    5648,
                    6673,
                    5651,
                    6676,
                    6720,
                    7700,
                    6721,
                    7704,
                    5658,
                    7705,
                    5660,
                    7706,
                    5150,
                    4643,
                    4644,
                    4645,
                    4646,
                    5157,
                    5158,
                    5160,
                    44,
                    6705,
                    4658,
                    51,
                    2611,
                    4659,
                    4662,
                    4663,
                    5175,
                    57,
                    4665,
                    59,
                    4666,
                    1085,
                    4667,
                    1087,
                    4668,
                    1089,
                    5185,
                    4675,
                    5187,
                    5915,
                    1094,
                    1095,
                    1096,
                    4679,
                    5191,
                    2123,
                    5194,
                    5916,
                    6727,
                    7769,
                    4698,
                    4705,
                    6242,
                    4707,
                    5220,
                    4709,
                    5221,
                    2151,
                    4711,
                    4712,
                    4713,
                    4714,
                    4715,
                    6249,
                    6250,
                    3695,
                    3696,
                    4209,
                    6255,
                    6256,
                    4724,
                    6257,
                    6258,
                    3705,
                    4731,
                    6271,
                    3200,
                    6272,
                    6273,
                    3203,
                    6274,
                    6275,
                    3207,
                    6794,
                    1163,
                    3211,
                    1165,
                    1167,
                    1172,
                    1173,
                    1174,
                    2713,
                    6304,
                    6312,
                    4779,
                    4782,
                    4783,
                    7874,
                    3270,
                    3271,
                    3272,
                    3273,
                    4807,
                    3275,
                    4811,
                    4817,
                    4821,
                    4824,
                    5339,
                    4831,
                    5346,
                    5347,
                    5860,
                    5349,
                    3303,
                    3304,
                    4842,
                    2796,
                    5364,
                    4854,
                    4856,
                    6908,
                    5373,
                    4863,
                    5375,
                    5379,
                    4870,
                    5382,
                    1289,
                    1291,
                    1292,
                    1294,
                    5906,
                    2327,
                    4376,
                    1305,
                    4377,
                    1307,
                    5913,
                    1309,
                    2333,
                    1311,
                    4384,
                    1313,
                    2338,
                    5408,
                    1316,
                    1317,
                    1318,
                    2340,
                    5409,
                    7977,
                    4394,
                    5914,
                    2350,
                    7993,
                    1341,
                    1343,
                    7999,
                    1345,
                    8000,
                    1347,
                    4419,
                    8023,
                    2910,
                    3934,
                    2916,
                    8037,
                    1387,
                    7020,
                    1392,
                    1393,
                    4465,
                    7026,
                    7030,
                    2430,
                    8065,
                    8067,
                    8071,
                    3976,
                    8072,
                    3982,
                    3983,
                    6546,
                    2963,
                    7575,
                    3993,
                    3994,
                    3995,
                    7577,
                    7581,
                    4000,
                    4001,
                    4002,
                    6563,
                    7586,
                    2992,
                    6606,
                    6607,
                    6097,
                    6612,
                    6613,
                    7126,
                    6616,
                    2013,
                    2014,
                    7133,
                    2016,
                    4065,
                    6624,
                    2019,
                    6628,
                    7135,
                    6122,
                    6123,
                    2028,
                    6643,
                    6645,
                    4601,
                    6651,
                    4094,
                    4607
                ],
                "bins": [
                    6657,
                    6673,
                    6549,
                    4758,
                    6550,
                    4762,
                    6811,
                    4765,
                    6813,
                    4778,
                    4779,
                    44,
                    45,
                    4781,
                    47,
                    4782,
                    4783,
                    4784,
                    51,
                    53,
                    6710,
                    55,
                    59,
                    6720,
                    6721,
                    6723,
                    6724,
                    6727,
                    6729,
                    6730,
                    6739,
                    6741,
                    6753,
                    6755,
                    6628,
                    6629,
                    6765,
                    6643,
                    6651,
                    6908
                ],
                "np.histogram": [
                    51,
                    6643
                ],
                "arr": [
                    57,
                    51
                ],
                "weights": [
                    6577,
                    6578,
                    51,
                    6909,
                    6623
                ],
                "np.min": [
                    7586,
                    6122,
                    1387,
                    2796,
                    4622,
                    4623,
                    1392,
                    5913,
                    57,
                    5915
                ],
                "np.max": [
                    7586,
                    1387,
                    2796,
                    6123,
                    4622,
                    4623,
                    1393,
                    57,
                    5914,
                    5916
                ],
                "np.linspace": [
                    59,
                    4821,
                    4854
                ],
                "_log": [
                    4220,
                    62
                ],
                "logging.getLogger": [
                    62
                ],
                "logging": [
                    62
                ],
                "_bounds": [
                    83,
                    78
                ],
                "mtransforms.Bbox.from_bounds": [
                    78,
                    567
                ],
                "mtransforms.Bbox": [
                    78,
                    567
                ],
                "mtransforms": [
                    6112,
                    777,
                    5900,
                    78,
                    4430,
                    4753,
                    4626,
                    4627,
                    84,
                    86,
                    567
                ],
                "bounds": [
                    568,
                    535,
                    78,
                    455
                ],
                "_trans": [
                    84,
                    79
                ],
                "trans": [
                    962,
                    1026,
                    4872,
                    4874,
                    4843,
                    973,
                    1037,
                    847,
                    848,
                    79,
                    4845,
                    916,
                    917
                ],
                "_parent": [
                    80,
                    85
                ],
                "parent": [
                    80
                ],
                "bbox": [
                    83,
                    84
                ],
                "bb": [
                    456,
                    458,
                    84,
                    86,
                    87
                ],
                "mtransforms.TransformedBbox": [
                    84,
                    86
                ],
                "tr": [
                    85,
                    86
                ],
                "_parent.figure.transFigure.inverted": [
                    85
                ],
                "_parent.figure.transFigure": [
                    85
                ],
                "_parent.figure": [
                    85
                ],
                "inset_locator": [
                    456,
                    89,
                    463,
                    455
                ],
                "_AxesBase": [
                    96
                ],
                "cbook.deprecated": [
                    117
                ],
                "cbook": [
                    764,
                    5128,
                    5643,
                    144,
                    5649,
                    1170,
                    3731,
                    1301,
                    1302,
                    1303,
                    4760,
                    6553,
                    6555,
                    4252,
                    6556,
                    6811,
                    6813,
                    5152,
                    6816,
                    2595,
                    6565,
                    2599,
                    3625,
                    5034,
                    5163,
                    4396,
                    5421,
                    5422,
                    687,
                    4399,
                    5168,
                    6578,
                    3898,
                    2107,
                    2364,
                    5690,
                    1092,
                    197,
                    5317,
                    7879,
                    3913,
                    204,
                    3151,
                    2780,
                    2141,
                    5341,
                    2912,
                    2146,
                    2274,
                    4198,
                    5352,
                    3435,
                    1644,
                    5357,
                    3310,
                    117,
                    4598,
                    5880,
                    2300
                ],
                "titles": [
                    144,
                    197,
                    194,
                    141
                ],
                "self._left_title": [
                    194,
                    141
                ],
                "self": [
                    4102,
                    4103,
                    2109,
                    6282,
                    141,
                    142,
                    143,
                    6290,
                    6296,
                    6299,
                    6308,
                    6312,
                    6313,
                    6319,
                    6320,
                    6327,
                    6328,
                    194,
                    195,
                    196,
                    208,
                    220,
                    2277,
                    246,
                    247,
                    253,
                    2315,
                    2317,
                    2319,
                    2321,
                    4370,
                    4371,
                    4372,
                    2325,
                    2327,
                    280,
                    281,
                    2328,
                    2330,
                    2331,
                    2333,
                    2334,
                    2336,
                    4389,
                    295,
                    2344,
                    4391,
                    2347,
                    4427,
                    4449,
                    2402,
                    4450,
                    4451,
                    4452,
                    4454,
                    4455,
                    2418,
                    2424,
                    2427,
                    395,
                    400,
                    401,
                    402,
                    405,
                    6570,
                    6571,
                    6574,
                    6591,
                    451,
                    455,
                    458,
                    465,
                    2544,
                    4596,
                    6666,
                    6667,
                    6668,
                    6669,
                    529,
                    532,
                    540,
                    551,
                    553,
                    2602,
                    6697,
                    6700,
                    558,
                    562,
                    2611,
                    2612,
                    566,
                    2615,
                    2618,
                    2619,
                    6734,
                    6736,
                    618,
                    6770,
                    4736,
                    6786,
                    6787,
                    6788,
                    4741,
                    648,
                    650,
                    2718,
                    2719,
                    2720,
                    679,
                    681,
                    4798,
                    4799,
                    4802,
                    2777,
                    2788,
                    2793,
                    4843,
                    2796,
                    750,
                    2802,
                    4852,
                    770,
                    771,
                    6916,
                    6917,
                    6918,
                    4872,
                    779,
                    780,
                    4880,
                    839,
                    4935,
                    4936,
                    4937,
                    843,
                    844,
                    4938,
                    4941,
                    847,
                    849,
                    850,
                    4947,
                    4954,
                    2907,
                    4955,
                    4956,
                    4964,
                    4966,
                    4968,
                    4969,
                    7020,
                    7021,
                    7022,
                    7023,
                    7024,
                    2931,
                    4981,
                    4983,
                    4984,
                    4985,
                    7031,
                    908,
                    912,
                    913,
                    916,
                    918,
                    919,
                    2972,
                    2982,
                    5036,
                    5038,
                    5039,
                    3000,
                    962,
                    965,
                    968,
                    969,
                    3018,
                    974,
                    975,
                    3025,
                    3027,
                    3029,
                    7126,
                    3031,
                    3032,
                    7127,
                    7128,
                    7129,
                    7130,
                    7136,
                    1026,
                    1029,
                    1032,
                    1033,
                    5131,
                    1038,
                    1039,
                    5134,
                    5135,
                    5138,
                    5139,
                    5140,
                    1080,
                    1081,
                    1082,
                    1083,
                    7230,
                    7231,
                    7232,
                    1102,
                    1113,
                    1114,
                    3168,
                    5222,
                    5224,
                    5225,
                    5227,
                    5228,
                    3190,
                    1156,
                    7302,
                    1159,
                    1160,
                    1161,
                    7303,
                    7304,
                    1180,
                    1190,
                    1191,
                    3264,
                    5320,
                    5323,
                    5324,
                    7373,
                    7374,
                    5327,
                    5328,
                    5329,
                    7375,
                    1280,
                    1285,
                    1286,
                    1287,
                    3333,
                    7436,
                    7437,
                    7438,
                    3343,
                    7439,
                    3345,
                    3360,
                    3362,
                    5410,
                    5412,
                    5413,
                    5415,
                    5416,
                    3382,
                    3392,
                    3394,
                    3409,
                    3411,
                    3423,
                    3425,
                    1381,
                    3431,
                    1403,
                    1404,
                    7590,
                    7592,
                    5603,
                    5604,
                    5612,
                    5623,
                    7691,
                    7716,
                    7718,
                    7719,
                    7720,
                    7722,
                    7723,
                    7724,
                    7725,
                    7728,
                    7774,
                    7775,
                    7776,
                    7777,
                    7778,
                    7781,
                    1645,
                    1647,
                    1648,
                    3720,
                    1715,
                    1717,
                    1719,
                    1721,
                    5830,
                    7881,
                    5834,
                    5835,
                    5836,
                    1774,
                    1775,
                    1777,
                    5893,
                    5902,
                    5904,
                    5905,
                    5911,
                    5920,
                    5921,
                    1825,
                    1826,
                    8004,
                    8005,
                    8006,
                    8008,
                    8009,
                    8010,
                    8016,
                    1873,
                    1874,
                    3944,
                    3950,
                    3960,
                    1939,
                    6086,
                    6091,
                    6092,
                    6093,
                    6108,
                    6114,
                    6116,
                    6117,
                    6120,
                    4074,
                    4075,
                    6127,
                    2032,
                    6128,
                    2035,
                    2039
                ],
                "self.title": [
                    7722,
                    195,
                    142,
                    7775
                ],
                "self._right_title": [
                    196,
                    143
                ],
                "title": [
                    197,
                    144,
                    145,
                    210,
                    209,
                    212,
                    213,
                    214
                ],
                "cbook._check_getitem": [
                    144,
                    197
                ],
                "loc.lower": [
                    144,
                    202,
                    197
                ],
                "loc": [
                    192,
                    197,
                    202,
                    144,
                    191
                ],
                "title.get_text": [
                    145
                ],
                "rcParams": [
                    5127,
                    6550,
                    6678,
                    4382,
                    4383,
                    3621,
                    3623,
                    3628,
                    3630,
                    3247,
                    3632,
                    3634,
                    3636,
                    2997,
                    3638,
                    3893,
                    3640,
                    4406,
                    3642,
                    192,
                    3904,
                    3905,
                    3906,
                    3907,
                    2757,
                    3908,
                    199,
                    200,
                    4417,
                    5316,
                    203,
                    8012,
                    207,
                    2773,
                    4187,
                    4188,
                    4448,
                    4193,
                    5602,
                    2295
                ],
                "default": [
                    210,
                    205,
                    198
                ],
                "titlecolor": [
                    203,
                    204,
                    205
                ],
                "cbook._str_lower_equal": [
                    5880,
                    204
                ],
                "pad": [
                    208,
                    206,
                    207
                ],
                "self._set_title_offset_trans": [
                    208
                ],
                "title.set_text": [
                    209
                ],
                "label": [
                    6790,
                    6792,
                    6793,
                    6794,
                    6795,
                    6797,
                    2960,
                    533,
                    1179,
                    539,
                    2973,
                    3000,
                    452,
                    459,
                    1101,
                    209,
                    4946,
                    220,
                    221,
                    3171,
                    3430,
                    2801,
                    2426,
                    253,
                    254,
                    2303
                ],
                "title.update": [
                    210,
                    212,
                    213
                ],
                "fontdict": [
                    744,
                    745,
                    752,
                    211,
                    212,
                    247,
                    281
                ],
                "kwargs": [
                    1029,
                    7685,
                    7686,
                    5128,
                    5129,
                    5130,
                    7688,
                    1036,
                    7692,
                    5134,
                    533,
                    539,
                    7711,
                    7715,
                    2604,
                    1080,
                    2617,
                    2108,
                    2109,
                    7230,
                    4163,
                    4164,
                    4165,
                    4167,
                    1103,
                    3151,
                    3154,
                    3155,
                    7773,
                    3168,
                    5217,
                    3171,
                    618,
                    1644,
                    1645,
                    3184,
                    3187,
                    3188,
                    1156,
                    7302,
                    649,
                    3217,
                    3218,
                    3219,
                    6802,
                    6293,
                    6807,
                    6298,
                    1181,
                    3230,
                    3231,
                    3234,
                    3235,
                    680,
                    6318,
                    6319,
                    4790,
                    1719,
                    6326,
                    3257,
                    3258,
                    6327,
                    6333,
                    5317,
                    5318,
                    5319,
                    5834,
                    5323,
                    7373,
                    213,
                    2274,
                    2275,
                    2278,
                    2279,
                    1769,
                    1770,
                    2283,
                    2284,
                    2285,
                    1771,
                    1772,
                    2288,
                    753,
                    1777,
                    4851,
                    5867,
                    5868,
                    2294,
                    2295,
                    247,
                    5872,
                    5878,
                    2299,
                    5879,
                    5880,
                    2302,
                    2303,
                    2304,
                    5881,
                    1282,
                    5883,
                    5885,
                    6916,
                    776,
                    778,
                    2315,
                    7436,
                    2319,
                    4879,
                    4370,
                    1301,
                    1302,
                    1303,
                    281,
                    5405,
                    1822,
                    1823,
                    1826,
                    4390,
                    835,
                    5866,
                    843,
                    4427,
                    4940,
                    1871,
                    848,
                    1872,
                    1874,
                    4431,
                    2396,
                    5870,
                    5871,
                    1382,
                    3943,
                    7020,
                    3950,
                    3953,
                    3960,
                    3964,
                    904,
                    394,
                    397,
                    400,
                    912,
                    1939,
                    917,
                    7591,
                    5034,
                    6570,
                    5036,
                    6082,
                    452,
                    965,
                    459,
                    972,
                    6091,
                    6100,
                    7126,
                    5606,
                    2543,
                    2032,
                    2545,
                    2034,
                    2035,
                    4596,
                    2037,
                    2038,
                    2039
                ],
                "self.xaxis.get_label": [
                    220
                ],
                "self.xaxis": [
                    7776,
                    7777,
                    7778,
                    551,
                    2344,
                    7723,
                    7724,
                    7725,
                    2325,
                    246,
                    247,
                    220
                ],
                "label.get_text": [
                    221,
                    254
                ],
                "labelpad": [
                    280,
                    245,
                    246,
                    279
                ],
                "self.xaxis.labelpad": [
                    246
                ],
                "self.xaxis.set_label_text": [
                    247
                ],
                "xlabel": [
                    247
                ],
                "self.yaxis.get_label": [
                    253
                ],
                "self.yaxis": [
                    7781,
                    553,
                    2347,
                    7728,
                    280,
                    281,
                    2331,
                    253
                ],
                "self.yaxis.labelpad": [
                    280
                ],
                "self.yaxis.set_label_text": [
                    281
                ],
                "ylabel": [
                    281
                ],
                "handles": [
                    400,
                    297,
                    394,
                    295
                ],
                "labels": [
                    295,
                    6791,
                    297,
                    394,
                    2922,
                    2923,
                    3626,
                    2926,
                    6793,
                    400,
                    2960,
                    6795,
                    6797,
                    6799
                ],
                "mlegend._get_legend_handles_labels": [
                    295
                ],
                "mlegend": [
                    400,
                    394,
                    295
                ],
                "legend_handler_map": [
                    296
                ],
                "extra_args": [
                    394,
                    398
                ],
                "mlegend._parse_legend_args": [
                    394
                ],
                "args": [
                    5636,
                    5637,
                    776,
                    396,
                    5646,
                    5648,
                    5649,
                    2707,
                    2709,
                    2711,
                    2712,
                    2714,
                    2716,
                    1826,
                    2726,
                    5036,
                    6319,
                    2740,
                    6327,
                    2109,
                    6333,
                    2755,
                    5830,
                    6086,
                    1874,
                    2387,
                    2388,
                    4952,
                    4953,
                    4957,
                    4958,
                    6241,
                    6243,
                    4964,
                    4966,
                    6247,
                    6248,
                    1645,
                    3950,
                    4983,
                    1777,
                    4981,
                    3958,
                    3959
                ],
                "self.legend_": [
                    400,
                    401,
                    402,
                    405
                ],
                "mlegend.Legend": [
                    400
                ],
                "self.legend_._remove_method": [
                    401
                ],
                "self._remove_legend": [
                    401
                ],
                "docstring.dedent_interpd": [
                    1412,
                    2436,
                    774,
                    6923,
                    7309,
                    785,
                    7444,
                    922,
                    4895,
                    5925,
                    1830,
                    299,
                    7596,
                    1198,
                    5043,
                    1726,
                    5694,
                    7237,
                    7380,
                    853,
                    3041,
                    7144,
                    620,
                    4460,
                    4975,
                    5232,
                    1652,
                    1781,
                    2164,
                    2549,
                    6132,
                    7039
                ],
                "docstring": [
                    1412,
                    2436,
                    774,
                    6923,
                    7309,
                    785,
                    7444,
                    922,
                    4895,
                    5925,
                    1830,
                    299,
                    7596,
                    1198,
                    5043,
                    1726,
                    5694,
                    7237,
                    4944,
                    7380,
                    853,
                    3041,
                    7144,
                    620,
                    4460,
                    4975,
                    5232,
                    1652,
                    1781,
                    2164,
                    2549,
                    6132,
                    7039
                ],
                "transform": [
                    450,
                    451,
                    455,
                    531,
                    532,
                    569,
                    539
                ],
                "self.transAxes": [
                    451
                ],
                "kwargs.pop": [
                    2304,
                    5879,
                    533,
                    1822,
                    4163,
                    452,
                    4164,
                    4165,
                    4167,
                    4427,
                    1871,
                    2275,
                    3171,
                    2278,
                    2279,
                    1769,
                    1771,
                    2283,
                    2284,
                    2285,
                    5867,
                    5871,
                    2034,
                    3188,
                    2294,
                    2295,
                    2299,
                    2302,
                    2303
                ],
                "_make_inset_locator": [
                    455
                ],
                "inset_ax": [
                    544,
                    615,
                    616,
                    458,
                    618,
                    557,
                    463,
                    465,
                    467,
                    565
                ],
                "Axes": [
                    458
                ],
                "self.figure": [
                    458,
                    566
                ],
                "bb.bounds": [
                    458
                ],
                "zorder": [
                    3909,
                    458,
                    3887,
                    3728,
                    559,
                    3888,
                    3895,
                    539
                ],
                "inset_ax.set_axes_locator": [
                    463
                ],
                "self.add_child_axes": [
                    465,
                    650,
                    681
                ],
                "self.apply_aspect": [
                    529
                ],
                "self.transData": [
                    6116,
                    6117,
                    4427,
                    558,
                    750,
                    5904,
                    5905,
                    532
                ],
                "x": [
                    4610,
                    4613,
                    4622,
                    5134,
                    5138,
                    7698,
                    5142,
                    535,
                    7702,
                    537,
                    7706,
                    4638,
                    5151,
                    4641,
                    7714,
                    4643,
                    4645,
                    5158,
                    5670,
                    5160,
                    3625,
                    5671,
                    555,
                    5164,
                    4654,
                    4655,
                    7217,
                    5180,
                    2109,
                    6720,
                    5186,
                    6723,
                    5188,
                    6724,
                    4684,
                    6739,
                    6741,
                    3168,
                    2146,
                    2148,
                    5220,
                    5221,
                    6245,
                    6248,
                    6249,
                    2154,
                    6251,
                    6252,
                    6759,
                    6761,
                    6255,
                    6769,
                    6771,
                    6262,
                    6271,
                    3200,
                    3201,
                    7298,
                    1156,
                    1159,
                    3208,
                    1163,
                    1164,
                    6283,
                    6287,
                    1170,
                    1172,
                    1173,
                    1174,
                    6296,
                    1177,
                    2713,
                    2716,
                    2718,
                    1183,
                    1184,
                    1185,
                    2719,
                    1719,
                    3263,
                    3270,
                    3271,
                    3272,
                    3273,
                    4807,
                    3275,
                    4810,
                    7369,
                    2771,
                    2787,
                    2793,
                    2796,
                    6908,
                    765,
                    3326,
                    767,
                    2311,
                    2312,
                    5895,
                    7431,
                    2315,
                    3342,
                    4370,
                    4371,
                    5906,
                    5908,
                    2326,
                    2327,
                    2328,
                    3353,
                    2330,
                    4376,
                    4378,
                    5913,
                    5914,
                    3359,
                    4385,
                    2338,
                    2340,
                    4390,
                    2345,
                    3370,
                    4395,
                    4396,
                    4398,
                    4400,
                    3380,
                    3390,
                    2368,
                    3393,
                    2370,
                    4419,
                    4935,
                    3402,
                    4940,
                    2381,
                    2383,
                    3407,
                    3410,
                    4953,
                    4954,
                    3419,
                    4955,
                    4957,
                    2910,
                    2911,
                    4449,
                    7010,
                    4451,
                    2916,
                    2918,
                    2920,
                    2923,
                    2925,
                    2926,
                    2928,
                    7564,
                    912,
                    913,
                    2960,
                    1939,
                    2961,
                    917,
                    2964,
                    2967,
                    6546,
                    6547,
                    6563,
                    6565,
                    6566,
                    2985,
                    6570,
                    6571,
                    6585,
                    3005,
                    6608,
                    7120,
                    2009,
                    2013,
                    6622,
                    2016,
                    2019,
                    6628,
                    6643,
                    4596,
                    4598,
                    4607
                ],
                "y": [
                    4608,
                    4615,
                    4618,
                    4623,
                    7697,
                    7701,
                    535,
                    537,
                    7706,
                    4639,
                    4642,
                    7714,
                    4644,
                    4646,
                    5673,
                    5674,
                    555,
                    4654,
                    4655,
                    1080,
                    1081,
                    1085,
                    1086,
                    2109,
                    5915,
                    6721,
                    1092,
                    5916,
                    1094,
                    1095,
                    1096,
                    6729,
                    6730,
                    1099,
                    1105,
                    1108,
                    1109,
                    6751,
                    3168,
                    6753,
                    6755,
                    6246,
                    6758,
                    6248,
                    6250,
                    6251,
                    6252,
                    6762,
                    6256,
                    6769,
                    6771,
                    6262,
                    6271,
                    3203,
                    3204,
                    6283,
                    3212,
                    6287,
                    2712,
                    2713,
                    6296,
                    2716,
                    2718,
                    2720,
                    1719,
                    3263,
                    5323,
                    4813,
                    5327,
                    2771,
                    5331,
                    5340,
                    2787,
                    5347,
                    5349,
                    2793,
                    5353,
                    5368,
                    6908,
                    765,
                    5374,
                    767,
                    5376,
                    2306,
                    3331,
                    2308,
                    2309,
                    7431,
                    5896,
                    3341,
                    2319,
                    3344,
                    4370,
                    5906,
                    4372,
                    5909,
                    4377,
                    4378,
                    3353,
                    2332,
                    2333,
                    2334,
                    3358,
                    2336,
                    3361,
                    2338,
                    5408,
                    2340,
                    5409,
                    3370,
                    4395,
                    2348,
                    4396,
                    4398,
                    3375,
                    4400,
                    3391,
                    4419,
                    2373,
                    2376,
                    4936,
                    2378,
                    843,
                    844,
                    3402,
                    4940,
                    848,
                    2384,
                    3408,
                    4953,
                    4954,
                    3419,
                    4956,
                    4957,
                    2961,
                    2965,
                    2967,
                    2986,
                    3006,
                    7120,
                    2010,
                    2014,
                    2016,
                    2019,
                    2544,
                    4596,
                    4598
                ],
                "width": [
                    2319,
                    3988,
                    535,
                    2328,
                    537,
                    6684,
                    6685,
                    3998,
                    3999,
                    6688,
                    2338,
                    2340,
                    4005,
                    4006,
                    555,
                    6710,
                    2368,
                    2371,
                    2387,
                    8020,
                    8024,
                    2408,
                    2413,
                    2544
                ],
                "height": [
                    2338,
                    2340,
                    2376,
                    2409,
                    2315,
                    555,
                    2379,
                    2414,
                    2544,
                    2387,
                    6707,
                    6709,
                    6710,
                    535,
                    537,
                    2334
                ],
                "rectangle_patch": [
                    536,
                    579,
                    540
                ],
                "mpatches.Rectangle": [
                    536,
                    2389
                ],
                "mpatches": [
                    2274,
                    2979,
                    3943,
                    3914,
                    972,
                    556,
                    1036,
                    4940,
                    2389,
                    2967,
                    536
                ],
                "facecolor": [
                    538
                ],
                "edgecolor": [
                    2278,
                    8043,
                    8075,
                    8014,
                    560,
                    8016,
                    2354,
                    2355,
                    2387,
                    2357,
                    2358,
                    8048,
                    8050,
                    8052,
                    538,
                    8059
                ],
                "alpha": [
                    6280,
                    5609,
                    4428,
                    4878,
                    560,
                    4850,
                    6291,
                    4789,
                    6101,
                    6297,
                    538,
                    5887
                ],
                "self.add_patch": [
                    2402,
                    2982,
                    2972,
                    974,
                    1038,
                    5038,
                    562,
                    540
                ],
                "connects": [
                    576,
                    577,
                    579,
                    542,
                    561,
                    574,
                    575
                ],
                "xy_inset_ax": [
                    546,
                    557,
                    550
                ],
                "ex": [
                    550,
                    552,
                    2408,
                    555,
                    2413,
                    2418
                ],
                "ey": [
                    550,
                    2409,
                    554,
                    555,
                    2414,
                    2418
                ],
                "self.xaxis.get_inverted": [
                    551
                ],
                "self.yaxis.get_inverted": [
                    553
                ],
                "xy_data": [
                    555,
                    558
                ],
                "p": [
                    6807,
                    6808,
                    972,
                    556,
                    973,
                    974,
                    976,
                    561,
                    562,
                    1036,
                    1037,
                    1038,
                    1040,
                    6801,
                    6802,
                    6804,
                    6806
                ],
                "mpatches.ConnectionPatch": [
                    556
                ],
                "inset_ax.transAxes": [
                    557
                ],
                "connects.append": [
                    561
                ],
                "pos": [
                    4065,
                    8027,
                    4005,
                    4006,
                    3988,
                    565,
                    3990,
                    566,
                    8020,
                    3993,
                    8026,
                    4059,
                    3998,
                    3999
                ],
                "inset_ax.get_position": [
                    565
                ],
                "bboxins": [
                    566,
                    570,
                    571,
                    572,
                    573
                ],
                "pos.transformed": [
                    566
                ],
                "self.figure.transFigure": [
                    566
                ],
                "rectbbox": [
                    567,
                    570,
                    571,
                    572,
                    573
                ],
                "transformed": [
                    4413,
                    567
                ],
                "x0": [
                    2154,
                    2330,
                    575,
                    2326,
                    2328,
                    570,
                    2141,
                    574,
                    2143
                ],
                "rectbbox.x0": [
                    570
                ],
                "bboxins.x0": [
                    570
                ],
                "x1": [
                    576,
                    577,
                    5376,
                    5347,
                    5408,
                    5349,
                    5354,
                    5323,
                    5328,
                    5331,
                    2612,
                    2613,
                    5369,
                    5370,
                    571,
                    5374
                ],
                "rectbbox.x1": [
                    571
                ],
                "bboxins.x1": [
                    571
                ],
                "y0": [
                    576,
                    2336,
                    2332,
                    572,
                    574,
                    2334
                ],
                "rectbbox.y0": [
                    572
                ],
                "bboxins.y0": [
                    572
                ],
                "y1": [
                    577,
                    5186,
                    5188,
                    5220,
                    5158,
                    5160,
                    5165,
                    5134,
                    5139,
                    5181,
                    5142,
                    573,
                    5182,
                    575
                ],
                "rectbbox.y1": [
                    573
                ],
                "bboxins.y1": [
                    573
                ],
                "set_visible": [
                    576,
                    577,
                    574,
                    575
                ],
                "xlim": [
                    617,
                    615
                ],
                "inset_ax.get_xlim": [
                    615
                ],
                "ylim": [
                    616,
                    617
                ],
                "inset_ax.get_ylim": [
                    616
                ],
                "rect": [
                    617,
                    618
                ],
                "self.indicate_inset": [
                    618
                ],
                "location": [
                    648,
                    679,
                    678,
                    647
                ],
                "Number": [
                    3977,
                    6654,
                    678,
                    647
                ],
                "secondary_ax": [
                    679,
                    648,
                    681,
                    650,
                    651,
                    682
                ],
                "SecondaryAxis": [
                    648,
                    679
                ],
                "functions": [
                    648,
                    680
                ],
                "effective_kwargs": [
                    768,
                    747
                ],
                "withdash": [
                    763,
                    764
                ],
                "cbook.deprecation._deprecated_parameter": [
                    764
                ],
                "cbook.deprecation": [
                    764
                ],
                "t": [
                    768,
                    770,
                    771,
                    772,
                    5899,
                    5900,
                    5901,
                    5902,
                    7564,
                    5904,
                    5905,
                    7586,
                    7594,
                    3000,
                    3002,
                    3018,
                    3020,
                    6111,
                    6112,
                    6113,
                    6114,
                    6116,
                    6117,
                    765,
                    767
                ],
                "mtext.TextWithDash": [
                    765
                ],
                "mtext": [
                    776,
                    765,
                    782,
                    767
                ],
                "s": [
                    3008,
                    4384,
                    3010,
                    4385,
                    776,
                    3018,
                    4395,
                    4396,
                    4398,
                    4400,
                    4402,
                    4381,
                    765,
                    4382,
                    767
                ],
                "mtext.Text": [
                    767
                ],
                "t.update": [
                    768
                ],
                "t.set_clip_path": [
                    770
                ],
                "self.patch": [
                    6308,
                    770,
                    779,
                    5612
                ],
                "self._add_text": [
                    771,
                    780
                ],
                "cbook._delete_parameter": [
                    4252,
                    5421,
                    5422,
                    687
                ],
                "a": [
                    3296,
                    3297,
                    3300,
                    3321,
                    3303,
                    776,
                    777,
                    779,
                    780,
                    781,
                    4940,
                    4941,
                    2032,
                    4942,
                    5649,
                    3316,
                    2039,
                    2041
                ],
                "mtext.Annotation": [
                    776,
                    782
                ],
                "xy": [
                    776,
                    5860,
                    5861
                ],
                "a.set_transform": [
                    777
                ],
                "mtransforms.IdentityTransform": [
                    777,
                    4753,
                    4430
                ],
                "a.set_clip_path": [
                    779
                ],
                "annotate.__doc__": [
                    782
                ],
                "annotate": [
                    782
                ],
                "mtext.Annotation.__init__.__doc__": [
                    782
                ],
                "mtext.Annotation.__init__": [
                    782
                ],
                "ymin": [
                    4739,
                    1156,
                    1029,
                    1160,
                    1033,
                    1035,
                    4620,
                    1165,
                    1166,
                    4623,
                    1170,
                    4627,
                    917,
                    1173,
                    1177,
                    4635,
                    1186,
                    1187,
                    4642,
                    4797,
                    965,
                    839,
                    969,
                    971,
                    845,
                    4719,
                    4854
                ],
                "ymax": [
                    1156,
                    1029,
                    4740,
                    1033,
                    1161,
                    1035,
                    4620,
                    1167,
                    1168,
                    4623,
                    1170,
                    4627,
                    917,
                    1174,
                    1177,
                    4635,
                    1186,
                    1187,
                    4797,
                    965,
                    839,
                    969,
                    971,
                    845,
                    4854
                ],
                "self.get_ybound": [
                    839
                ],
                "self._process_unit_info": [
                    1280,
                    1156,
                    1029,
                    2315,
                    5134,
                    2319,
                    912,
                    5135,
                    4370,
                    2718,
                    2602,
                    6570,
                    1080,
                    965,
                    5834,
                    843,
                    5323,
                    5324,
                    6091,
                    4954,
                    3168,
                    4596
                ],
                "yy": [
                    844,
                    845
                ],
                "self.convert_yunits": [
                    1286,
                    1287,
                    1160,
                    1033,
                    1161,
                    5139,
                    4372,
                    5140,
                    2333,
                    2334,
                    2336,
                    2720,
                    2615,
                    1081,
                    4936,
                    969,
                    4938,
                    844,
                    5836,
                    6093,
                    5327,
                    4956
                ],
                "scaley": [
                    1648,
                    850,
                    845
                ],
                "self.get_yaxis_transform": [
                    4872,
                    962,
                    847
                ],
                "l": [
                    917,
                    918,
                    920,
                    1826,
                    1827,
                    848,
                    849,
                    1874,
                    851,
                    1876,
                    2388,
                    2390,
                    3422,
                    3423,
                    2401,
                    2788,
                    2791,
                    2408,
                    2413,
                    1777,
                    1778
                ],
                "mlines.Line2D": [
                    3335,
                    3337,
                    917,
                    3350,
                    3354,
                    7714,
                    3367,
                    5034,
                    3371,
                    3888,
                    3384,
                    3386,
                    3898,
                    3263,
                    3399,
                    3403,
                    3151,
                    848,
                    3416,
                    3420,
                    1644
                ],
                "mlines": [
                    3335,
                    3337,
                    3346,
                    3348,
                    917,
                    3350,
                    3354,
                    7714,
                    3363,
                    3365,
                    3367,
                    5034,
                    3371,
                    3888,
                    3384,
                    3386,
                    3898,
                    3263,
                    3395,
                    3397,
                    3399,
                    3403,
                    3151,
                    848,
                    3412,
                    3414,
                    3416,
                    3420,
                    1644
                ],
                "xmin": [
                    1029,
                    1032,
                    1035,
                    908,
                    4620,
                    4622,
                    914,
                    4626,
                    4631,
                    4632,
                    4634,
                    4641,
                    7587,
                    7589,
                    1080,
                    1082,
                    4797,
                    1087,
                    1088,
                    1092,
                    965,
                    1095,
                    968,
                    971,
                    1099,
                    6606,
                    848,
                    1106,
                    1107,
                    6612,
                    4821,
                    6616,
                    6617,
                    4718,
                    4734
                ],
                "xmax": [
                    1029,
                    1032,
                    1035,
                    908,
                    4620,
                    4622,
                    914,
                    4626,
                    4631,
                    4633,
                    4634,
                    7587,
                    7589,
                    1080,
                    1083,
                    4797,
                    1089,
                    1090,
                    1092,
                    965,
                    968,
                    1096,
                    971,
                    1099,
                    6607,
                    848,
                    1106,
                    1107,
                    4821,
                    6613,
                    6616,
                    6617,
                    4735
                ],
                "self.add_line": [
                    3264,
                    7716,
                    1647,
                    849,
                    918,
                    3423
                ],
                "self._request_autoscale_view": [
                    6788,
                    4102,
                    1039,
                    919,
                    5921,
                    1191,
                    5416,
                    6313,
                    5039,
                    6320,
                    6328,
                    1721,
                    2619,
                    4799,
                    975,
                    850,
                    1114,
                    3425,
                    4455,
                    4969,
                    5228,
                    1648,
                    6128,
                    2424,
                    4985,
                    1404
                ],
                "self.get_xbound": [
                    908
                ],
                "xx": [
                    913,
                    914
                ],
                "self.convert_xunits": [
                    1285,
                    1159,
                    1032,
                    913,
                    5138,
                    4371,
                    2327,
                    2328,
                    2330,
                    2719,
                    6571,
                    6574,
                    2611,
                    2612,
                    1082,
                    1083,
                    4935,
                    968,
                    4937,
                    5835,
                    6092,
                    5328,
                    5329,
                    4955
                ],
                "scalex": [
                    1648,
                    914,
                    919
                ],
                "self.get_xaxis_transform": [
                    1026,
                    4843,
                    916
                ],
                "verts": [
                    4866,
                    4874,
                    1035,
                    1036,
                    1176,
                    1178,
                    1098,
                    971,
                    972,
                    1100,
                    4825,
                    3934,
                    3936,
                    3938,
                    4836,
                    3941,
                    3942,
                    5861,
                    4845,
                    4857,
                    5885
                ],
                "mpatches.Polygon": [
                    972,
                    1036
                ],
                "p.set_transform": [
                    1037,
                    973
                ],
                "np.iterable": [
                    3200,
                    3203,
                    3207,
                    1289,
                    6794,
                    1163,
                    1291,
                    1165,
                    3211,
                    1167,
                    1305,
                    1307,
                    1309,
                    1311,
                    1313,
                    4779,
                    1085,
                    1087,
                    1089,
                    2151,
                    4601
                ],
                "cbook.delete_masked_points": [
                    1170,
                    1092,
                    4598
                ],
                "np.ravel": [
                    1172,
                    1094,
                    3695
                ],
                "np.resize": [
                    1096,
                    1173,
                    1174,
                    1095
                ],
                "y.shape": [
                    1096,
                    1095
                ],
                "thisxmin": [
                    1098,
                    1099
                ],
                "thisy": [
                    1098,
                    1099,
                    3286
                ],
                "thisxmax": [
                    1098,
                    1099
                ],
                "lines": [
                    7234,
                    7302,
                    1193,
                    7306,
                    1100,
                    1645,
                    1102,
                    1103,
                    1646,
                    1180,
                    1649,
                    7373,
                    7377,
                    1178,
                    1116,
                    1181,
                    7230
                ],
                "mcoll.LineCollection": [
                    1178,
                    1100,
                    2774
                ],
                "mcoll": [
                    5217,
                    4421,
                    4742,
                    5317,
                    5128,
                    5885,
                    4874,
                    6278,
                    1100,
                    4748,
                    4845,
                    6098,
                    2774,
                    2617,
                    1178,
                    5405,
                    1374
                ],
                "colors": [
                    4230,
                    4240,
                    4243,
                    1301,
                    4245,
                    4246,
                    1178,
                    1311,
                    1312,
                    4388,
                    4393,
                    4398,
                    1328,
                    1329,
                    4400,
                    1333,
                    1348,
                    1349,
                    1350,
                    4423,
                    1100,
                    4433,
                    1363,
                    1373,
                    2930,
                    2933
                ],
                "linestyles": [
                    1313,
                    1314,
                    1351,
                    1352,
                    1101,
                    1366,
                    1303,
                    1179,
                    1373
                ],
                "self.add_collection": [
                    4802,
                    1381,
                    4454,
                    5415,
                    4968,
                    6120,
                    6282,
                    5227,
                    1102,
                    4880,
                    4852,
                    5911,
                    4984,
                    2777,
                    2618,
                    1180
                ],
                "lines.update": [
                    1181,
                    1103
                ],
                "minx": [
                    1184,
                    1189,
                    6122,
                    6124,
                    6126,
                    1106,
                    1111,
                    5913,
                    5917,
                    5919
                ],
                "xmin.min": [
                    1106
                ],
                "xmax.min": [
                    1106
                ],
                "maxx": [
                    1185,
                    1189,
                    6123,
                    6124,
                    6126,
                    1107,
                    1111,
                    5914,
                    5917,
                    5919
                ],
                "xmin.max": [
                    1107
                ],
                "xmax.max": [
                    1107
                ],
                "miny": [
                    1186,
                    1189,
                    6122,
                    6125,
                    6126,
                    1108,
                    1111,
                    5915,
                    5918,
                    5919
                ],
                "y.min": [
                    6283,
                    1108
                ],
                "maxy": [
                    1187,
                    1189,
                    6123,
                    6125,
                    6126,
                    1109,
                    1111,
                    5916,
                    5918,
                    5919
                ],
                "y.max": [
                    6283,
                    1109
                ],
                "corners": [
                    5920,
                    1189,
                    1190,
                    6126,
                    6127,
                    1111,
                    1400,
                    1113,
                    1402,
                    1403,
                    4797,
                    4798,
                    5919
                ],
                "self.update_datalim": [
                    5920,
                    1190,
                    6312,
                    6127,
                    1113,
                    1403,
                    4798
                ],
                "_preprocess_data": [
                    6922,
                    7308,
                    1042,
                    7443,
                    8084,
                    1941,
                    8086,
                    4248,
                    6815,
                    5924,
                    1195,
                    5420,
                    6316,
                    5042,
                    6324,
                    5693,
                    2623,
                    6338,
                    7236,
                    7379,
                    1878,
                    1118,
                    3039,
                    4961,
                    7143,
                    7786,
                    4459,
                    3436,
                    4974,
                    5231,
                    1651,
                    2163,
                    2548,
                    2805,
                    6131,
                    7038
                ],
                "x.shape": [
                    1173,
                    1174
                ],
                "thisx": [
                    1176,
                    1177,
                    3285
                ],
                "thisymin": [
                    1176,
                    1177
                ],
                "thisymax": [
                    1176,
                    1177
                ],
                "x.min": [
                    1184,
                    6283
                ],
                "x.max": [
                    1185,
                    6283
                ],
                "ymin.min": [
                    1186
                ],
                "ymax.min": [
                    1186
                ],
                "ymin.max": [
                    1187
                ],
                "ymax.max": [
                    1187
                ],
                "positions": [
                    1280,
                    3971,
                    3972,
                    1285,
                    3973,
                    3720,
                    1289,
                    1290,
                    1291,
                    1292,
                    3976,
                    1294,
                    3977,
                    1296,
                    3982,
                    3988,
                    7987,
                    7988,
                    7989,
                    1340,
                    1341,
                    7999,
                    8000,
                    1345,
                    1347,
                    1350,
                    1352,
                    7881,
                    1354,
                    1357,
                    1360,
                    1363,
                    8020,
                    1366,
                    1372,
                    1385,
                    1387,
                    4076,
                    4083,
                    4084,
                    4085,
                    8051,
                    4094
                ],
                "lineoffsets": [
                    1281,
                    1316,
                    1286,
                    1320,
                    1321,
                    1354,
                    1325,
                    1327,
                    1395,
                    1396,
                    1372,
                    1305,
                    1306,
                    1340,
                    1341,
                    1342,
                    1343
                ],
                "linelengths": [
                    1344,
                    1281,
                    1345,
                    1317,
                    1287,
                    1322,
                    1323,
                    1357,
                    1395,
                    1396,
                    1372,
                    1307,
                    1308
                ],
                "position": [
                    1291,
                    1292,
                    4085,
                    4087,
                    1371,
                    1374
                ],
                "np.asanyarray": [
                    5637,
                    1292,
                    1294,
                    5648,
                    4209,
                    7769
                ],
                "cbook.local_over_kwdict": [
                    1301,
                    1302,
                    1303
                ],
                "linewidths": [
                    4745,
                    4751,
                    1302,
                    1309,
                    1310,
                    1318,
                    4395,
                    1324,
                    4396,
                    1326,
                    4398,
                    4400,
                    4417,
                    1346,
                    1347,
                    4425,
                    1360,
                    1372,
                    5865,
                    5868,
                    4727,
                    4728
                ],
                "np.asarray": [
                    8065,
                    7682,
                    8067,
                    1316,
                    1317,
                    1318,
                    6249,
                    6250,
                    7977,
                    2910,
                    2611,
                    2327,
                    7704,
                    5150,
                    2333,
                    5339,
                    2013,
                    2014
                ],
                "mcolors.to_rgba_array": [
                    6593,
                    4230,
                    2351,
                    4176,
                    1333,
                    2358
                ],
                "mcolors": [
                    6593,
                    4230,
                    7686,
                    2351,
                    4176,
                    1333,
                    2358,
                    4764,
                    4767
                ],
                "np.tile": [
                    1345,
                    1347,
                    4713,
                    4715,
                    1341
                ],
                "np.cumsum": [
                    1343
                ],
                "colls": [
                    1370,
                    1406,
                    1383
                ],
                "lineoffset": [
                    1376,
                    1371
                ],
                "linelength": [
                    1377,
                    1371
                ],
                "linewidth": [
                    1378,
                    2338,
                    2340,
                    2279,
                    2350,
                    2387,
                    1371
                ],
                "color": [
                    2351,
                    6703,
                    6590,
                    6591,
                    6593,
                    6594,
                    6597,
                    2387,
                    1371,
                    3680,
                    1379,
                    2276,
                    2277,
                    2275,
                    3685,
                    3689,
                    3690,
                    3691,
                    6769
                ],
                "linestyle": [
                    1380,
                    2789,
                    2730,
                    2732,
                    2735,
                    2772,
                    2773,
                    2774,
                    1371
                ],
                "coll": [
                    1382,
                    1381,
                    1374,
                    1383
                ],
                "mcoll.EventCollection": [
                    1374
                ],
                "orientation": [
                    2307,
                    2310,
                    2314,
                    2318,
                    6557,
                    2343,
                    6696,
                    2346,
                    2366,
                    2374,
                    6733,
                    2398,
                    1375,
                    2400,
                    6757,
                    2406,
                    2411,
                    1398,
                    1399,
                    6778,
                    2299,
                    6780,
                    2301
                ],
                "coll.update": [
                    1382
                ],
                "colls.append": [
                    1383
                ],
                "min_max": [
                    1387,
                    1390,
                    1391
                ],
                "_p": [
                    1387,
                    1388
                ],
                "mins": [
                    7974,
                    1391,
                    1392,
                    8049,
                    8051,
                    8031
                ],
                "maxes": [
                    8032,
                    7975,
                    8047,
                    1391,
                    1393,
                    8051
                ],
                "minpos": [
                    1392,
                    1402,
                    1400
                ],
                "maxpos": [
                    1400,
                    1393,
                    1402
                ],
                "minline": [
                    1400,
                    1402,
                    1395
                ],
                "maxline": [
                    1400,
                    1402,
                    1396
                ],
                "orientation.lower": [
                    1399
                ],
                "cbook.normalize_kwargs": [
                    2274,
                    5317,
                    5128,
                    3913,
                    5034,
                    1644,
                    3151,
                    3898
                ],
                "self._get_lines": [
                    8016,
                    1645,
                    3190,
                    6591
                ],
                "data": [
                    5036,
                    1645,
                    3317,
                    3319,
                    3321,
                    3322,
                    2109
                ],
                "line": [
                    7141,
                    7020,
                    1646,
                    1647,
                    7126,
                    7036
                ],
                "xdate": [
                    1714
                ],
                "self.xaxis_date": [
                    1715
                ],
                "tz": [
                    1715,
                    1717
                ],
                "ydate": [
                    1716
                ],
                "self.yaxis_date": [
                    1717
                ],
                "ret": [
                    6305,
                    6306,
                    6308,
                    6310,
                    6311,
                    7721,
                    6314,
                    7691,
                    6284,
                    7731,
                    1719,
                    1723,
                    6300,
                    6303
                ],
                "self.plot": [
                    1826,
                    2788,
                    7302,
                    1719,
                    2793,
                    2796,
                    7020,
                    3950,
                    7373,
                    7436,
                    1777,
                    1874,
                    7126,
                    2039,
                    3960,
                    2109,
                    7230
                ],
                "fmt": [
                    3170,
                    3173,
                    3178,
                    3180,
                    1719
                ],
                "dx": [
                    2151,
                    2152,
                    1769,
                    2154,
                    4937,
                    2156,
                    4940,
                    1774,
                    2127,
                    2160,
                    2161,
                    6255,
                    6257
                ],
                "k": [
                    3176,
                    1769,
                    1770,
                    1771,
                    1772,
                    1871,
                    1872,
                    3154,
                    3893,
                    3894,
                    1822,
                    1823
                ],
                "dy": [
                    4938,
                    1771,
                    4940,
                    1775,
                    6256,
                    6258
                ],
                "self.set_xscale": [
                    4736,
                    1825,
                    6734,
                    1774,
                    2321
                ],
                "self.set_yscale": [
                    4741,
                    2317,
                    1775,
                    6736,
                    1873
                ],
                "d": [
                    1825,
                    1871,
                    1873,
                    3893,
                    3895,
                    3897,
                    3899,
                    1822
                ],
                "self.xcorr": [
                    1939
                ],
                "mlab.detrend_none": [
                    7381,
                    1942
                ],
                "mlab": [
                    7010,
                    7298,
                    7876,
                    7431,
                    7369,
                    7564,
                    7120,
                    7217,
                    7381,
                    1942,
                    7382
                ],
                "Nx": [
                    5667,
                    2022,
                    5670,
                    2024,
                    5831,
                    2026,
                    5674,
                    5863,
                    2029,
                    6087,
                    5689,
                    5680,
                    6098,
                    5683,
                    5685,
                    5688,
                    2009,
                    2010
                ],
                "detrend": [
                    7010,
                    7431,
                    7565,
                    7120,
                    2013,
                    2014
                ],
                "correls": [
                    2016,
                    2019,
                    2029,
                    2032,
                    2039,
                    2041
                ],
                "np.correlate": [
                    2016
                ],
                "normed": [
                    2018
                ],
                "np.sqrt": [
                    2019
                ],
                "np.dot": [
                    2019
                ],
                "maxlags": [
                    2021,
                    2022,
                    2024,
                    2028,
                    2029
                ],
                "lags": [
                    2032,
                    2041,
                    2028,
                    2039
                ],
                "np.arange": [
                    4712,
                    4713,
                    4714,
                    4715,
                    2028,
                    5640,
                    4782,
                    5642,
                    7030,
                    2713,
                    7135
                ],
                "usevlines": [
                    2031
                ],
                "self.vlines": [
                    3392,
                    8006,
                    8009,
                    2032,
                    3409,
                    3382
                ],
                "b": [
                    2388,
                    3285,
                    2390,
                    3286,
                    2399,
                    3296,
                    3298,
                    3300,
                    3304,
                    2409,
                    2414,
                    2035,
                    3316,
                    4984,
                    4983,
                    2040,
                    2041,
                    3322,
                    4986
                ],
                "self.axhline": [
                    2035
                ],
                "kwargs.setdefault": [
                    6082,
                    5868,
                    2543,
                    5872,
                    3155,
                    2037,
                    2038,
                    5883
                ],
                "cbook._check_in_list": [
                    6556,
                    2107,
                    2364,
                    6553,
                    6555,
                    2300
                ],
                "where": [
                    5408,
                    5409,
                    5346,
                    5220,
                    5157,
                    5221,
                    5352,
                    2107,
                    5163,
                    5148,
                    5339,
                    5340,
                    5336,
                    5337,
                    5147,
                    2108,
                    5150,
                    5151
                ],
                "xconv": [
                    2146,
                    2123,
                    2148,
                    2125
                ],
                "np.ndarray": [
                    2123
                ],
                "xconv.size": [
                    2125
                ],
                "convert": [
                    2160,
                    2154,
                    2127
                ],
                "cbook.safe_first_element": [
                    2146,
                    2595,
                    4198,
                    2599,
                    2141
                ],
                "delist": [
                    2153,
                    2155,
                    2150
                ],
                "ddx": [
                    2154
                ],
                "mpatches.Patch": [
                    2274
                ],
                "self._get_patches_for_fill.get_next_color": [
                    2277,
                    4391,
                    5320,
                    5131,
                    2931
                ],
                "self._get_patches_for_fill": [
                    2277,
                    4391,
                    5320,
                    5131,
                    5036,
                    2931
                ],
                "xerr": [
                    3428,
                    2405,
                    3206,
                    3207,
                    3208,
                    2283,
                    2419,
                    2329,
                    2330,
                    3325,
                    3326
                ],
                "yerr": [
                    2336,
                    2405,
                    3429,
                    3210,
                    3211,
                    2284,
                    3212,
                    3374,
                    3375,
                    2419,
                    2335
                ],
                "error_kw": [
                    2285,
                    2286,
                    2416,
                    2420,
                    2293,
                    2296,
                    2297
                ],
                "ezorder": [
                    2286,
                    2287,
                    2288,
                    2289,
                    2292,
                    2293
                ],
                "error_kw.pop": [
                    2286
                ],
                "kwargs.get": [
                    2288
                ],
                "error_kw.setdefault": [
                    2296,
                    2297,
                    2416,
                    2293
                ],
                "ecolor": [
                    3185,
                    2294,
                    2296,
                    3226,
                    3259,
                    3196,
                    3197
                ],
                "capsize": [
                    3334,
                    3369,
                    3401,
                    3246,
                    3247,
                    3248,
                    3249,
                    2295,
                    3352,
                    2297,
                    3418,
                    3383
                ],
                "log": [
                    6732,
                    2316,
                    2320,
                    6711,
                    2302
                ],
                "tick_labels": [
                    2304,
                    2432,
                    2429,
                    2430
                ],
                "bottom": [
                    2306,
                    6704,
                    6705,
                    6707,
                    6712,
                    6715,
                    2373,
                    6726,
                    6727,
                    2376,
                    6729,
                    2384,
                    2387,
                    2771,
                    6755,
                    2788,
                    6756,
                    2409,
                    2796,
                    2414
                ],
                "self._convert_dx": [
                    2336,
                    2612,
                    2328,
                    2330,
                    2334
                ],
                "np.broadcast_arrays": [
                    5160,
                    2338,
                    5349
                ],
                "np.atleast_1d": [
                    2916,
                    2340,
                    5349,
                    5160,
                    2350
                ],
                "tick_label_axis": [
                    2344,
                    2347,
                    2432,
                    2431
                ],
                "tick_label_position": [
                    2345,
                    2348,
                    2431
                ],
                "itertools.cycle": [
                    2358,
                    2933,
                    2350,
                    2351
                ],
                "itertools": [
                    2350,
                    2351,
                    6799,
                    2353,
                    2355,
                    2357,
                    2358,
                    2933,
                    2360
                ],
                "itertools.chain": [
                    2357,
                    2351
                ],
                "itertools.repeat": [
                    2360,
                    2353,
                    2355
                ],
                "align": [
                    6691,
                    6693,
                    2382,
                    2545,
                    6738,
                    6740,
                    6555,
                    2364,
                    2365
                ],
                "left": [
                    2368,
                    3361,
                    3332,
                    2408,
                    2381,
                    2413,
                    2383,
                    2544,
                    2387,
                    3326,
                    3359
                ],
                "x.dtype": [
                    2370
                ],
                "width.dtype": [
                    2371
                ],
                "e": [
                    3320,
                    2372,
                    2380,
                    3316,
                    2388,
                    3317,
                    2392,
                    3321,
                    3322
                ],
                "y.dtype": [
                    2378
                ],
                "height.dtype": [
                    2379
                ],
                "patches": [
                    6784,
                    2403,
                    6661,
                    5036,
                    5037,
                    6799,
                    2544,
                    5040,
                    2386,
                    2546,
                    6770,
                    6776,
                    6713,
                    2426,
                    6811,
                    6813,
                    2430
                ],
                "w": [
                    6624,
                    2979,
                    2980,
                    2408,
                    2413,
                    6578,
                    6643,
                    2388,
                    6580,
                    2390,
                    2967,
                    6582,
                    6585,
                    2971,
                    2972,
                    2973
                ],
                "h": [
                    6912,
                    6914,
                    6916,
                    6920,
                    2409,
                    2414,
                    2388,
                    2390,
                    6908
                ],
                "c": [
                    4230,
                    4233,
                    5129,
                    4238,
                    7695,
                    7697,
                    7698,
                    7700,
                    7701,
                    4246,
                    7702,
                    4388,
                    4390,
                    4394,
                    4398,
                    6703,
                    4400,
                    6712,
                    5318,
                    4169,
                    4434,
                    2388,
                    2391,
                    4190,
                    4191,
                    4192,
                    4196,
                    4197,
                    4198,
                    4209,
                    6769,
                    6773,
                    6774,
                    4215,
                    4216,
                    4219
                ],
                "lw": [
                    2393,
                    2388
                ],
                "r": [
                    2401,
                    2402,
                    2403,
                    2389,
                    2396,
                    2397,
                    2399
                ],
                "r.update": [
                    2396
                ],
                "_interpolation_steps": [
                    2397
                ],
                "r.get_path": [
                    2397
                ],
                "r.sticky_edges.y.append": [
                    2399
                ],
                "r.sticky_edges.y": [
                    2399
                ],
                "r.sticky_edges": [
                    2401,
                    2399
                ],
                "r.sticky_edges.x.append": [
                    2401
                ],
                "r.sticky_edges.x": [
                    2401
                ],
                "patches.append": [
                    6713,
                    6770,
                    2403
                ],
                "errorbar": [
                    2426,
                    2418,
                    2422
                ],
                "self.errorbar": [
                    2418
                ],
                "bar_container": [
                    2426,
                    2427,
                    2434
                ],
                "BarContainer": [
                    2426
                ],
                "self.add_container": [
                    2802,
                    2427
                ],
                "np.broadcast_to": [
                    3270,
                    3271,
                    3272,
                    3273,
                    2430
                ],
                "tick_label_axis.set_ticks": [
                    2431
                ],
                "tick_label_axis.set_ticklabels": [
                    2432
                ],
                "self.bar": [
                    2544,
                    6700
                ],
                "xranges": [
                    2594,
                    2595,
                    2606
                ],
                "xdata": [
                    2602,
                    2595,
                    2597
                ],
                "yrange": [
                    2615,
                    2598,
                    2599
                ],
                "ydata": [
                    2601,
                    2603,
                    2599
                ],
                "xranges_conv": [
                    2617,
                    2613,
                    2605
                ],
                "xr": [
                    6310,
                    6312,
                    6283,
                    2606,
                    2607,
                    6287,
                    2611,
                    2612
                ],
                "x_conv": [
                    2611,
                    2612,
                    2613
                ],
                "xranges_conv.append": [
                    2613
                ],
                "yrange_conv": [
                    2617,
                    2615
                ],
                "col": [
                    2617,
                    2618,
                    2621
                ],
                "mcoll.BrokenBarHCollection": [
                    2617
                ],
                "linefmt": [
                    2723,
                    2733,
                    2726,
                    2735
                ],
                "linecolor": [
                    2789,
                    2728,
                    2732,
                    2735,
                    2775
                ],
                "linemarker": [
                    2729,
                    2732,
                    2790,
                    2735
                ],
                "_process_plot_format": [
                    3680,
                    3178,
                    2765,
                    2733,
                    2735,
                    2767,
                    2747,
                    2750
                ],
                "markerfmt": [
                    2737,
                    2747,
                    2740,
                    2750
                ],
                "markercolor": [
                    2793,
                    2746,
                    2749,
                    2742
                ],
                "markermarker": [
                    2746,
                    2794,
                    2749,
                    2743
                ],
                "markerstyle": [
                    2744,
                    2793,
                    2746,
                    2749
                ],
                "basefmt": [
                    2752,
                    2755,
                    2765,
                    2767
                ],
                "basecolor": [
                    2758,
                    2760,
                    2764,
                    2797,
                    2767
                ],
                "basemarker": [
                    2761,
                    2764,
                    2798,
                    2767
                ],
                "basestyle": [
                    2762,
                    2764,
                    2797,
                    2767
                ],
                "use_line_collection": [
                    2770
                ],
                "stemlines": [
                    2786,
                    2791,
                    2800,
                    2771,
                    2774,
                    2777
                ],
                "xi": [
                    2787,
                    2788,
                    6571,
                    6608,
                    6609,
                    2771,
                    6612,
                    6613,
                    6585,
                    6586
                ],
                "yi": [
                    2787,
                    2788,
                    4813,
                    4814,
                    4815,
                    2771
                ],
                "cbook._warn_external": [
                    4760,
                    2780
                ],
                "stemlines.append": [
                    2791
                ],
                "markerline": [
                    2800,
                    2793
                ],
                "baseline": [
                    2800,
                    2796
                ],
                "stem_container": [
                    2800,
                    2802,
                    2803
                ],
                "StemContainer": [
                    2800
                ],
                "self.set_aspect": [
                    7720,
                    2907,
                    5603
                ],
                "np.float32": [
                    2910
                ],
                "x.ndim": [
                    6251,
                    6262,
                    2911
                ],
                "ndim": [
                    2911
                ],
                "x.squeeze": [
                    2916,
                    2911
                ],
                "cbook.warn_deprecated": [
                    2912,
                    5152,
                    5341,
                    3310
                ],
                "sx": [
                    4641,
                    2918,
                    2919,
                    2920,
                    4716,
                    4724,
                    4634
                ],
                "x.sum": [
                    2918
                ],
                "explode": [
                    2928,
                    2960,
                    2924,
                    2925
                ],
                "get_next_color": [
                    2969,
                    2931
                ],
                "color_cycle": [
                    2936,
                    2933
                ],
                "radius": [
                    2985,
                    2986,
                    2967,
                    2938,
                    2939,
                    3005,
                    3006
                ],
                "startangle": [
                    2945,
                    2942
                ],
                "theta1": [
                    2945,
                    3022,
                    2962,
                    2963,
                    2967,
                    2968,
                    2943
                ],
                "wedgeprops": [
                    2970,
                    2948,
                    2949,
                    2950
                ],
                "wedgeprops.setdefault": [
                    2950
                ],
                "textprops": [
                    2952,
                    2953,
                    2954,
                    3017,
                    2998
                ],
                "textprops.setdefault": [
                    2954
                ],
                "texts": [
                    3002,
                    3035,
                    2956,
                    3037
                ],
                "slices": [
                    3037,
                    2971,
                    2957,
                    3035
                ],
                "autotexts": [
                    3020,
                    3037,
                    2958
                ],
                "frac": [
                    2960,
                    3010,
                    2962,
                    3008
                ],
                "expl": [
                    2960,
                    2964,
                    2965
                ],
                "center": [
                    2961,
                    3027,
                    3028,
                    3029,
                    3030
                ],
                "theta2": [
                    3022,
                    2962,
                    2963,
                    2967,
                    2968
                ],
                "counterclock": [
                    2962
                ],
                "thetam": [
                    2985,
                    2986,
                    2992,
                    2963,
                    2964,
                    2965,
                    3005,
                    3006
                ],
                "np.pi": [
                    2963
                ],
                "math.cos": [
                    2985,
                    2964,
                    3005
                ],
                "math": [
                    4605,
                    2985,
                    2986,
                    2964,
                    2965,
                    7030,
                    3005,
                    3006,
                    7135
                ],
                "math.sin": [
                    2986,
                    2965,
                    3006
                ],
                "mpatches.Wedge": [
                    2967
                ],
                "slices.append": [
                    2971
                ],
                "w.set_label": [
                    2973
                ],
                "shadow": [
                    2975
                ],
                "shad": [
                    2979,
                    2980,
                    2981,
                    2982
                ],
                "mpatches.Shadow": [
                    2979
                ],
                "shad.set_zorder": [
                    2980
                ],
                "w.get_zorder": [
                    2980
                ],
                "shad.set_label": [
                    2981
                ],
                "labeldistance": [
                    2984,
                    2985,
                    2986
                ],
                "xt": [
                    2985,
                    3018,
                    2987,
                    2993,
                    3000,
                    3005
                ],
                "yt": [
                    6311,
                    6312,
                    3018,
                    2986,
                    6283,
                    2991,
                    6287,
                    3000,
                    3006
                ],
                "label_alignment_h": [
                    2994,
                    2987
                ],
                "label_alignment_v": [
                    2995,
                    2988,
                    2991
                ],
                "label_rotation": [
                    2992,
                    2996,
                    2989
                ],
                "rotatelabels": [
                    2990
                ],
                "np.rad2deg": [
                    2992
                ],
                "props": [
                    3015,
                    3017,
                    3018,
                    2994,
                    2998,
                    3000
                ],
                "props.update": [
                    3017,
                    2998
                ],
                "self.text": [
                    3000,
                    3018
                ],
                "texts.append": [
                    3002
                ],
                "autopct": [
                    3008,
                    3009,
                    3010,
                    3034,
                    3004,
                    3007
                ],
                "pctdistance": [
                    3005,
                    3006
                ],
                "autotexts.append": [
                    3020
                ],
                "frame": [
                    3024
                ],
                "self.set_frame_on": [
                    3025
                ],
                "self.set_xlim": [
                    3027,
                    6917,
                    7718
                ],
                "self.set_ylim": [
                    3029,
                    6918,
                    7719
                ],
                "self.set_xticks": [
                    3031
                ],
                "self.set_yticks": [
                    3032,
                    7136,
                    7031
                ],
                "v": [
                    3176,
                    3179,
                    3154,
                    3893,
                    3321,
                    3322
                ],
                "kwargs.items": [
                    3154
                ],
                "offset": [
                    3160,
                    3276,
                    3165,
                    3158
                ],
                "errorevery": [
                    3162,
                    3276,
                    3158
                ],
                "plot_line": [
                    3170,
                    3262
                ],
                "fmt.lower": [
                    3170
                ],
                "fmt_style_kwargs": [
                    3174,
                    3176,
                    3182,
                    3184,
                    3193
                ],
                "fmt_style_kwargs.pop": [
                    3182
                ],
                "base_style": [
                    3238,
                    3216,
                    3186,
                    3188,
                    3190,
                    3223,
                    3192,
                    3193,
                    3194,
                    3195,
                    3197
                ],
                "self._get_lines.prop_cycler": [
                    3190
                ],
                "base_style.update": [
                    3193
                ],
                "plot_line_style": [
                    3263,
                    3215
                ],
                "barsabove": [
                    3218
                ],
                "eb_lines_style": [
                    3360,
                    3392,
                    3235,
                    3333,
                    3241,
                    3242,
                    3243,
                    3343,
                    3409,
                    3382,
                    3223,
                    3224,
                    3225,
                    3226,
                    3229,
                    3231
                ],
                "eb_lines_style.pop": [
                    3241,
                    3242,
                    3243,
                    3224,
                    3225
                ],
                "elinewidth": [
                    3228,
                    3229
                ],
                "key": [
                    3233,
                    3234,
                    3235,
                    3255,
                    3257,
                    3258
                ],
                "eb_cap_style": [
                    3336,
                    3338,
                    3351,
                    3355,
                    3238,
                    3240,
                    3368,
                    3244,
                    3245,
                    3372,
                    3249,
                    3251,
                    3385,
                    3258,
                    3387,
                    3259,
                    3400,
                    3404,
                    3417,
                    3421
                ],
                "eb_cap_style.pop": [
                    3240,
                    3244
                ],
                "capthick": [
                    3250,
                    3251
                ],
                "data_line": [
                    3264,
                    3426,
                    3261,
                    3263
                ],
                "barcols": [
                    3360,
                    3392,
                    3266,
                    3427,
                    3333,
                    3343,
                    3409,
                    3382
                ],
                "caplines": [
                    3426,
                    3267,
                    3366,
                    3335,
                    3398,
                    3337,
                    3371,
                    3386,
                    3403,
                    3349,
                    3415,
                    3384,
                    3354,
                    3420,
                    3422
                ],
                "lolims": [
                    3393,
                    3270,
                    3402,
                    3378,
                    3389,
                    3390,
                    3391
                ],
                "astype": [
                    4643,
                    4644,
                    4645,
                    3270,
                    3271,
                    3272,
                    3273,
                    4646,
                    7875,
                    6097
                ],
                "uplims": [
                    3271,
                    3406,
                    3407,
                    3408,
                    3378,
                    3410,
                    3419
                ],
                "xlolims": [
                    3329,
                    3272,
                    3340,
                    3341,
                    3342,
                    3344,
                    3353
                ],
                "xuplims": [
                    3329,
                    3361,
                    3273,
                    3370,
                    3357,
                    3358,
                    3359
                ],
                "everymask": [
                    3331,
                    3332,
                    3341,
                    3342,
                    3344,
                    3353,
                    3358,
                    3359,
                    3361,
                    3370,
                    3380,
                    3381,
                    3390,
                    3391,
                    3393,
                    3402,
                    3275,
                    3276,
                    3407,
                    3408,
                    3410,
                    3419
                ],
                "np.zeros": [
                    6720,
                    6721,
                    4711,
                    6727,
                    3275,
                    4811,
                    6705,
                    4658,
                    4659,
                    5364,
                    5175
                ],
                "xs": [
                    3941,
                    3953,
                    3283,
                    3284,
                    3285,
                    3287,
                    3963,
                    3964,
                    3934
                ],
                "ys": [
                    3941,
                    3953,
                    3283,
                    3286,
                    3287,
                    3963,
                    3964,
                    3934
                ],
                "mask": [
                    7683,
                    5847,
                    7691,
                    5843,
                    5844,
                    3284,
                    3285,
                    3286,
                    5845,
                    5849
                ],
                "err": [
                    3296,
                    3300
                ],
                "a_sh": [
                    3305,
                    3309,
                    3303
                ],
                "np.shape": [
                    6242,
                    3303,
                    3304,
                    3696,
                    3705
                ],
                "b_sh": [
                    3304,
                    3306,
                    3309
                ],
                "low": [
                    3321,
                    3323
                ],
                "high": [
                    3322,
                    3323
                ],
                "right": [
                    3331,
                    3332,
                    3341,
                    3342,
                    3344,
                    3326,
                    3358
                ],
                "extract_err": [
                    3326,
                    3375
                ],
                "noxlims": [
                    3329,
                    3330,
                    3331,
                    3332
                ],
                "noxlims.any": [
                    3330
                ],
                "yo": [
                    3360,
                    3331,
                    3333,
                    3335,
                    3337,
                    3341,
                    3343,
                    3358
                ],
                "_": [
                    3680,
                    3331,
                    3341,
                    3407,
                    3380,
                    3390,
                    3358
                ],
                "xywhere": [
                    3331,
                    3332,
                    3341,
                    3342,
                    3344,
                    3353,
                    3358,
                    3359,
                    3361,
                    3370,
                    3380,
                    3381,
                    3390,
                    3391,
                    3393,
                    3402,
                    3407,
                    3408,
                    3410,
                    3419
                ],
                "lo": [
                    3360,
                    3392,
                    3332,
                    3333,
                    3391,
                    3335,
                    3342,
                    3343,
                    3408,
                    3409,
                    3381,
                    3382,
                    3384,
                    3359
                ],
                "ro": [
                    3360,
                    3332,
                    3333,
                    3337,
                    3342,
                    3343,
                    3359
                ],
                "barcols.append": [
                    3360,
                    3392,
                    3333,
                    3343,
                    3409,
                    3382
                ],
                "self.hlines": [
                    3360,
                    8005,
                    3333,
                    8010,
                    3343
                ],
                "caplines.append": [
                    3366,
                    3335,
                    3398,
                    3337,
                    3371,
                    3386,
                    3403,
                    3349,
                    3415,
                    3384,
                    3354,
                    3420
                ],
                "xlolims.any": [
                    3340
                ],
                "rightup": [
                    3344,
                    3350
                ],
                "yup": [
                    3370,
                    3371,
                    3344,
                    3350,
                    3419,
                    3420
                ],
                "self.xaxis_inverted": [
                    3345,
                    3362
                ],
                "marker": [
                    7680,
                    7681,
                    3346,
                    3348,
                    3350,
                    7707,
                    7708,
                    3363,
                    7715,
                    3365,
                    3367,
                    4405,
                    4406,
                    4408,
                    4409,
                    4411,
                    3395,
                    3397,
                    3399,
                    3412,
                    3414,
                    3416,
                    3680,
                    3682,
                    3683,
                    7679
                ],
                "mlines.CARETLEFTBASE": [
                    3346,
                    3365
                ],
                "mlines.CARETRIGHTBASE": [
                    3363,
                    3348
                ],
                "xlo": [
                    3402,
                    3403,
                    3410,
                    3416,
                    3353,
                    3354
                ],
                "ylo": [
                    3361,
                    3367,
                    3402,
                    3403,
                    3353,
                    3354
                ],
                "xuplims.any": [
                    3357
                ],
                "leftlo": [
                    3361,
                    3367
                ],
                "xup": [
                    3393,
                    3399,
                    3370,
                    3371,
                    3419,
                    3420
                ],
                "lower": [
                    3407,
                    3375,
                    3408,
                    3410,
                    3380,
                    3381,
                    3390
                ],
                "upper": [
                    3393,
                    3391,
                    3381,
                    3375
                ],
                "noylims": [
                    3378,
                    3379,
                    3380,
                    3381
                ],
                "noylims.any": [
                    3379
                ],
                "xo": [
                    3392,
                    3407,
                    3409,
                    3380,
                    3382,
                    3384,
                    3386,
                    3390
                ],
                "uo": [
                    3392,
                    3408,
                    3409,
                    3381,
                    3382,
                    3386,
                    3391
                ],
                "lolims.any": [
                    3389
                ],
                "upperup": [
                    3393,
                    3399
                ],
                "self.yaxis_inverted": [
                    3394,
                    3411
                ],
                "mlines.CARETDOWNBASE": [
                    3395,
                    3414
                ],
                "mlines.CARETUPBASE": [
                    3412,
                    3397
                ],
                "uplims.any": [
                    3406
                ],
                "lowerlo": [
                    3416,
                    3410
                ],
                "errorbar_container": [
                    3433,
                    3426,
                    3431
                ],
                "ErrorbarContainer": [
                    3426
                ],
                "self.containers.append": [
                    3431
                ],
                "self.containers": [
                    3431
                ],
                "whis": [
                    3625,
                    3620,
                    3621
                ],
                "bootstrap": [
                    3625,
                    3622,
                    3623
                ],
                "bxpstats": [
                    3720,
                    3625,
                    3695,
                    3696,
                    3700,
                    3988,
                    3705,
                    3709,
                    3967
                ],
                "cbook.boxplot_stats": [
                    3625
                ],
                "autorange": [
                    3626
                ],
                "notch": [
                    3722,
                    3627,
                    3628
                ],
                "vert": [
                    8003,
                    3721,
                    4073,
                    7881,
                    3948,
                    3629,
                    3630
                ],
                "patch_artist": [
                    3657,
                    3721,
                    3631,
                    3632,
                    4029,
                    3902
                ],
                "meanline": [
                    3726,
                    3633,
                    3634,
                    4052,
                    3927
                ],
                "showmeans": [
                    8041,
                    7882,
                    3722,
                    3635,
                    3636,
                    4051
                ],
                "showcaps": [
                    4043,
                    3723,
                    3637,
                    3638
                ],
                "showbox": [
                    3640,
                    3723,
                    4028,
                    3639
                ],
                "showfliers": [
                    3726,
                    3641,
                    3642,
                    3675,
                    4063
                ],
                "boxprops": [
                    3911,
                    3658,
                    3659,
                    3660,
                    3724,
                    3914,
                    3916,
                    3644,
                    3645
                ],
                "whiskerprops": [
                    3727,
                    3918,
                    3646,
                    3647
                ],
                "capprops": [
                    3648,
                    3649,
                    3920,
                    3727
                ],
                "medianprops": [
                    3650,
                    3651,
                    3924,
                    3725
                ],
                "meanprops": [
                    3652,
                    3653,
                    3725,
                    3926,
                    3929
                ],
                "flierprops": [
                    3683,
                    3654,
                    3655,
                    3689,
                    3690,
                    3691,
                    3724,
                    3922,
                    3673
                ],
                "boxprops.pop": [
                    3660
                ],
                "sym": [
                    3680,
                    3667,
                    3671
                ],
                "usermedians": [
                    3696,
                    3700,
                    3694,
                    3695
                ],
                "stats": [
                    3716,
                    8068,
                    3718,
                    8069,
                    3988,
                    3990,
                    3994,
                    3995,
                    4001,
                    4002,
                    4007,
                    4014,
                    4015,
                    4016,
                    4017,
                    4023,
                    4024,
                    8020,
                    4054,
                    8023,
                    8025,
                    4059,
                    8030,
                    8031,
                    8032,
                    4065,
                    4066,
                    8033,
                    8034,
                    3700,
                    3702,
                    3709
                ],
                "med": [
                    3700,
                    3701,
                    3702
                ],
                "conf_intervals": [
                    3704,
                    3705,
                    3709
                ],
                "err_mess": [
                    3706,
                    3707
                ],
                "ci": [
                    3715,
                    3716,
                    3717,
                    3718,
                    3709,
                    3710,
                    3711
                ],
                "artists": [
                    8038,
                    3720,
                    8042,
                    8074,
                    7980,
                    8077,
                    8047,
                    3729,
                    8049,
                    8051,
                    8056
                ],
                "self.bxp": [
                    3720
                ],
                "widths": [
                    8000,
                    3720,
                    7882,
                    3981,
                    3982,
                    3983,
                    3984,
                    3985,
                    3988,
                    8020,
                    7993,
                    7994,
                    7995,
                    7999
                ],
                "manage_ticks": [
                    3728,
                    4072
                ],
                "cbook._rename_parameter": [
                    6816,
                    3435,
                    3731
                ],
                "whiskers": [
                    4105,
                    4035,
                    3876,
                    4038
                ],
                "caps": [
                    4045,
                    4105,
                    4044,
                    3877
                ],
                "boxes": [
                    4032,
                    4105,
                    4030,
                    3878
                ],
                "medians": [
                    8033,
                    3879,
                    7976,
                    4106,
                    4048,
                    4085,
                    8056
                ],
                "means": [
                    7973,
                    3880,
                    4106,
                    8042,
                    4053,
                    4058,
                    8030
                ],
                "fliers": [
                    3881,
                    4106,
                    4068
                ],
                "datalabels": [
                    3884,
                    4100,
                    3990
                ],
                "mlines.Line2D.zorder": [
                    3888
                ],
                "zdelta": [
                    3890,
                    3924,
                    3926,
                    3895
                ],
                "k.split": [
                    3893
                ],
                "rcParams.items": [
                    3893
                ],
                "k.startswith": [
                    3894
                ],
                "subkey": [
                    3894
                ],
                "explicit": [
                    3896,
                    3898
                ],
                "d.update": [
                    3897
                ],
                "mlines.Line2D._alias_map": [
                    3898
                ],
                "final_boxprops": [
                    4032,
                    3912,
                    3916,
                    4030,
                    3903
                ],
                "final_boxprops.update": [
                    3912
                ],
                "mpatches.PathPatch._alias_map": [
                    3914
                ],
                "mpatches.PathPatch": [
                    3914,
                    3943
                ],
                "line_props_with_rcdefaults": [
                    3916,
                    3917,
                    3919,
                    3921,
                    3923,
                    3925
                ],
                "final_whiskerprops": [
                    4036,
                    3917,
                    4039
                ],
                "final_capprops": [
                    4044,
                    4045,
                    3919
                ],
                "final_flierprops": [
                    3921,
                    4069
                ],
                "final_medianprops": [
                    4048,
                    3923
                ],
                "final_meanprops": [
                    3930,
                    4059,
                    3925,
                    4055
                ],
                "removed_prop": [
                    3929,
                    3930,
                    3927
                ],
                "np.append": [
                    3934
                ],
                "np.column_stack": [
                    6097,
                    3934
                ],
                "codes": [
                    3938,
                    3941,
                    3942,
                    3935
                ],
                "mpath.Path.MOVETO": [
                    3935
                ],
                "mpath.Path": [
                    3936,
                    3937,
                    3942,
                    3935
                ],
                "mpath": [
                    3936,
                    3937,
                    3942,
                    3935
                ],
                "mpath.Path.LINETO": [
                    3936
                ],
                "mpath.Path.CLOSEPOLY": [
                    3937
                ],
                "to_vc": [
                    3941
                ],
                "path": [
                    4422,
                    4413,
                    3942,
                    3943
                ],
                "patch": [
                    3943,
                    3944,
                    3945,
                    6799,
                    6800,
                    6777,
                    6801,
                    6710,
                    6806,
                    6713,
                    6779,
                    6781
                ],
                "self.add_artist": [
                    3944,
                    4947,
                    4941
                ],
                "patch_list": [
                    6776,
                    3953,
                    3964,
                    6777
                ],
                "shuffled": [
                    3960,
                    3957,
                    3959
                ],
                "i": [
                    4864,
                    6591,
                    4676,
                    4678,
                    4680,
                    4682,
                    4684,
                    4685,
                    4686,
                    4687,
                    4812,
                    4689,
                    4690,
                    4813,
                    4692,
                    4818,
                    4694,
                    4696,
                    4698,
                    4699,
                    4826,
                    4701,
                    4827,
                    4703,
                    4828,
                    4705,
                    4829,
                    4833,
                    6640,
                    6643,
                    3958,
                    3959,
                    4858,
                    4859,
                    4860,
                    4861
                ],
                "shuffled.extend": [
                    3959
                ],
                "N": [
                    3972,
                    3973,
                    3982,
                    3984,
                    3985,
                    5396,
                    5398,
                    5399,
                    5400,
                    5401,
                    7982,
                    7988,
                    7989,
                    5174,
                    5175,
                    7994,
                    7995,
                    5208,
                    5210,
                    5211,
                    5212,
                    5213,
                    5363,
                    5364,
                    3967
                ],
                "datashape_message": [
                    3968,
                    3974,
                    7983,
                    3986,
                    7990,
                    7996
                ],
                "datashape_message.format": [
                    7990,
                    3986,
                    7996,
                    3974
                ],
                "np.array": [
                    4608,
                    4870,
                    3976,
                    3994,
                    3995,
                    4000,
                    5408,
                    5409,
                    6312,
                    7999,
                    8000,
                    8023,
                    5220,
                    5221,
                    4842,
                    4724,
                    6645,
                    4094,
                    4607
                ],
                "np.clip": [
                    6676,
                    3982
                ],
                "np.ptp": [
                    6257,
                    6258,
                    3982
                ],
                "np.isscalar": [
                    7993,
                    6546,
                    3983
                ],
                "datalabels.append": [
                    3990
                ],
                "stats.get": [
                    8034,
                    8069,
                    3990
                ],
                "whisker_x": [
                    3993,
                    4036,
                    4039
                ],
                "np.ones": [
                    3993,
                    4002,
                    4001,
                    4807
                ],
                "whiskerlo_y": [
                    3994,
                    4036
                ],
                "whiskerhi_y": [
                    3995,
                    4039
                ],
                "cap_left": [
                    4000,
                    4012,
                    3998
                ],
                "cap_right": [
                    4000,
                    4011,
                    3999
                ],
                "cap_x": [
                    4000,
                    4018,
                    4044,
                    4045
                ],
                "cap_lo": [
                    4001,
                    4044
                ],
                "cap_hi": [
                    4002,
                    4045
                ],
                "box_left": [
                    4005,
                    4011,
                    4012,
                    4013,
                    4022,
                    4054,
                    4025
                ],
                "box_right": [
                    4006,
                    4011,
                    4012,
                    4022,
                    4054,
                    4025
                ],
                "med_y": [
                    4048,
                    4007
                ],
                "shownotches": [
                    4010
                ],
                "box_x": [
                    4032,
                    4011,
                    4030,
                    4022
                ],
                "box_y": [
                    4032,
                    4030,
                    4014,
                    4023
                ],
                "med_x": [
                    4048,
                    4025,
                    4018
                ],
                "boxes.extend": [
                    4032,
                    4030
                ],
                "dopatch": [
                    4030
                ],
                "doplot": [
                    4032,
                    4035,
                    4068,
                    4038,
                    4044,
                    4045,
                    4048,
                    4053,
                    4058
                ],
                "whiskers.extend": [
                    4035,
                    4038
                ],
                "caps.extend": [
                    4044,
                    4045
                ],
                "medians.extend": [
                    4048
                ],
                "means.extend": [
                    4058,
                    4053
                ],
                "flier_x": [
                    4065,
                    4069
                ],
                "np.full": [
                    4065
                ],
                "np.float64": [
                    4065
                ],
                "flier_y": [
                    4066,
                    4069
                ],
                "fliers.extend": [
                    4068
                ],
                "axis_name": [
                    4073,
                    4074,
                    4075,
                    4086
                ],
                "interval": [
                    4074,
                    4083,
                    4084
                ],
                "self.dataLim": [
                    5410,
                    5413,
                    5222,
                    5225,
                    4074
                ],
                "axis": [
                    4096,
                    4099,
                    4075,
                    4076,
                    4089,
                    4090,
                    4093,
                    4095
                ],
                "axis.convert_units": [
                    4076
                ],
                "median": [
                    4085,
                    4086
                ],
                "extend": [
                    4086
                ],
                "median.sticky_edges": [
                    4086
                ],
                "locator": [
                    4089,
                    4092,
                    4093,
                    4094
                ],
                "axis.get_major_locator": [
                    4089,
                    4090
                ],
                "mticker.FixedLocator": [
                    4091,
                    4092
                ],
                "mticker": [
                    4097,
                    4098,
                    7778,
                    7781,
                    7725,
                    7728,
                    4091,
                    4092
                ],
                "axis.set_major_locator": [
                    4093
                ],
                "locator.locs": [
                    4094
                ],
                "formatter": [
                    4098,
                    4099,
                    4100,
                    4095
                ],
                "axis.get_major_formatter": [
                    4096,
                    4095
                ],
                "mticker.FixedFormatter": [
                    4097,
                    4098
                ],
                "axis.set_major_formatter": [
                    4099
                ],
                "formatter.seq": [
                    4100
                ],
                "self._autoscaleXon": [
                    4103
                ],
                "self._autoscaleYon": [
                    4103
                ],
                "facecolors": [
                    4192,
                    4163,
                    4164,
                    4184,
                    4185
                ],
                "edgecolors": [
                    4416,
                    4388,
                    4165,
                    4390,
                    4424,
                    4744,
                    4395,
                    4396,
                    4398,
                    4750,
                    4400,
                    4182,
                    4183,
                    4246,
                    4187,
                    4188
                ],
                "kwcolor": [
                    4167,
                    4169,
                    4174,
                    4207,
                    4176,
                    4183,
                    4185
                ],
                "c_was_none": [
                    4190,
                    4207
                ],
                "get_next_color_func": [
                    4194
                ],
                "c_is_string_or_strings": [
                    4195,
                    4207
                ],
                "collections.abc.Iterable": [
                    4197
                ],
                "collections.abc": [
                    4197
                ],
                "collections": [
                    4197
                ],
                "csize": [
                    4202
                ],
                "xsize": [
                    4233,
                    4203,
                    4240,
                    4243,
                    4215
                ],
                "c_is_mapped": [
                    4217,
                    4228,
                    4205
                ],
                "valid_shape": [
                    4232,
                    4227,
                    4206
                ],
                "c.size": [
                    4233,
                    4215
                ],
                "c.ravel": [
                    4216
                ],
                "c.shape": [
                    4219
                ],
                "_log.warning": [
                    4220
                ],
                "invalid_shape_exception": [
                    4233,
                    4243
                ],
                "np.ma.ravel": [
                    4376,
                    4377,
                    4384,
                    6273
                ],
                "np.ma": [
                    4384,
                    5185,
                    6273,
                    4419,
                    5187,
                    5347,
                    5158,
                    6275,
                    4394,
                    5651,
                    4376,
                    4377,
                    5658,
                    5660,
                    5373,
                    5375
                ],
                "x.size": [
                    4385,
                    4449,
                    4451,
                    4390,
                    6252,
                    4378,
                    5151
                ],
                "y.size": [
                    6252,
                    4378,
                    5340
                ],
                "self._parse_scatter_color_args": [
                    4389
                ],
                "plotnonfinite": [
                    4393
                ],
                "np.ma.masked_invalid": [
                    4394
                ],
                "cbook._combine_masks": [
                    4396,
                    4399
                ],
                "scales": [
                    4402,
                    4422
                ],
                "mmarkers.MarkerStyle": [
                    4408,
                    4411
                ],
                "mmarkers": [
                    4408,
                    4411
                ],
                "marker_obj": [
                    4409,
                    4411,
                    4413,
                    4414,
                    4415
                ],
                "marker_obj.get_path": [
                    4413
                ],
                "marker_obj.get_transform": [
                    4414
                ],
                "marker_obj.is_filled": [
                    4415
                ],
                "offsets": [
                    4419,
                    4711,
                    4712,
                    4713,
                    4426,
                    4714,
                    4715,
                    4716,
                    4717,
                    4718,
                    4719,
                    4721,
                    4752,
                    4731
                ],
                "np.ma.column_stack": [
                    4419
                ],
                "collection": [
                    5888,
                    5889,
                    5890,
                    5891,
                    5892,
                    4742,
                    6278,
                    6282,
                    5899,
                    4748,
                    6284,
                    4882,
                    4883,
                    4886,
                    4887,
                    4888,
                    4889,
                    5911,
                    4891,
                    4893,
                    5405,
                    5917,
                    5918,
                    5922,
                    5415,
                    5417,
                    4786,
                    4787,
                    4788,
                    4789,
                    4790,
                    4793,
                    4795,
                    4802,
                    4804,
                    4421,
                    4430,
                    4431,
                    4434,
                    4435,
                    4436,
                    6098,
                    6101,
                    4439,
                    6102,
                    4441,
                    6103,
                    6104,
                    6105,
                    6106,
                    6111,
                    5217,
                    4454,
                    6120,
                    4457,
                    5227,
                    6124,
                    5229,
                    6125,
                    6129,
                    5885,
                    5887
                ],
                "mcoll.PathCollection": [
                    4421
                ],
                "collection.set_transform": [
                    4430
                ],
                "collection.update": [
                    4790,
                    4431
                ],
                "collection.set_array": [
                    4786,
                    5888,
                    4434,
                    6102
                ],
                "collection.set_cmap": [
                    5889,
                    4435,
                    4787,
                    6103
                ],
                "cmap": [
                    5889,
                    5604,
                    7590,
                    6280,
                    4876,
                    4848,
                    6290,
                    4435,
                    4787,
                    6103,
                    6297
                ],
                "collection.set_norm": [
                    6104,
                    4788,
                    5890,
                    4436
                ],
                "norm": [
                    5890,
                    5604,
                    4774,
                    4775,
                    4776,
                    6280,
                    4877,
                    4849,
                    6290,
                    4436,
                    4788,
                    4759,
                    6104,
                    6297,
                    4764,
                    4767
                ],
                "vmin": [
                    7130,
                    5891,
                    7590,
                    7135,
                    7132,
                    5613,
                    5614,
                    7024,
                    7025,
                    4438,
                    4439,
                    4792,
                    4793,
                    7030,
                    6105,
                    6302,
                    6303
                ],
                "vmax": [
                    7130,
                    5891,
                    7590,
                    7135,
                    7132,
                    5613,
                    5614,
                    7024,
                    7025,
                    4438,
                    4439,
                    4792,
                    4793,
                    7030,
                    6105,
                    6302,
                    6303
                ],
                "collection.set_clim": [
                    4793,
                    5891,
                    6105,
                    4439
                ],
                "collection.autoscale_None": [
                    4441,
                    6106,
                    4795,
                    5892
                ],
                "self._xmargin": [
                    4449
                ],
                "self.set_xmargin": [
                    4450
                ],
                "self._ymargin": [
                    4451
                ],
                "self.set_ymargin": [
                    4452
                ],
                "np.mean": [
                    4465
                ],
                "C": [
                    5888,
                    6272,
                    6273,
                    6274,
                    6275,
                    5637,
                    5638,
                    5643,
                    5644,
                    5648,
                    6291,
                    6296,
                    5662,
                    6304,
                    4657,
                    5683,
                    5688,
                    5689,
                    5690,
                    5691,
                    4806,
                    4807,
                    5830,
                    6086,
                    4687,
                    5839,
                    6096,
                    4690,
                    6102,
                    4823,
                    5847,
                    6241,
                    6242,
                    5863,
                    4598,
                    4855
                ],
                "gridsize": [
                    4821,
                    4854,
                    4601,
                    4602,
                    4604
                ],
                "nx": [
                    6594,
                    6597,
                    6566,
                    4648,
                    4650,
                    6640,
                    4634,
                    6580,
                    6582,
                    6810,
                    6684,
                    4602,
                    4604,
                    4605,
                    6686,
                    6591
                ],
                "ny": [
                    4649,
                    4651,
                    4602,
                    4635,
                    4605
                ],
                "math.sqrt": [
                    4605
                ],
                "xscale": [
                    4736,
                    4609,
                    4730,
                    4732
                ],
                "np.any": [
                    4610,
                    4615
                ],
                "np.log10": [
                    4613,
                    4618,
                    7577,
                    7020,
                    7026,
                    7126,
                    7575,
                    7225,
                    7133
                ],
                "yscale": [
                    4737,
                    4730,
                    4741,
                    4614
                ],
                "extent": [
                    5604,
                    7589,
                    7590,
                    4619,
                    4620,
                    6287,
                    6291,
                    6297
                ],
                "mtransforms.nonsingular": [
                    4626,
                    4627
                ],
                "padding": [
                    4632,
                    4633,
                    4631
                ],
                "sy": [
                    4642,
                    4635,
                    4724,
                    4717
                ],
                "marginals": [
                    4803,
                    4637
                ],
                "xorig": [
                    4638,
                    4823
                ],
                "x.copy": [
                    6761,
                    4638,
                    6759
                ],
                "yorig": [
                    4855,
                    4639
                ],
                "y.copy": [
                    6762,
                    6758,
                    4639
                ],
                "ix1": [
                    4643,
                    4686,
                    4654,
                    4687,
                    4660,
                    4662
                ],
                "np.round": [
                    4643,
                    4644
                ],
                "iy1": [
                    4644,
                    4686,
                    4654,
                    4687,
                    4660,
                    4662
                ],
                "ix2": [
                    4645,
                    4655,
                    4689,
                    4690,
                    4661,
                    4663
                ],
                "np.floor": [
                    4645,
                    4646
                ],
                "iy2": [
                    4646,
                    4655,
                    4689,
                    4690,
                    4661,
                    4663
                ],
                "nx1": [
                    4675,
                    4676,
                    4648,
                    4712,
                    4713,
                    4714,
                    4652,
                    4715,
                    4686,
                    4658,
                    4660,
                    4692
                ],
                "ny1": [
                    4675,
                    4677,
                    4712,
                    4649,
                    4713,
                    4714,
                    4652,
                    4715,
                    4686,
                    4658,
                    4660,
                    4693
                ],
                "nx2": [
                    4679,
                    4680,
                    4650,
                    4714,
                    4652,
                    4715,
                    4689,
                    4659,
                    4661,
                    4699
                ],
                "ny2": [
                    4679,
                    4681,
                    4714,
                    4651,
                    4652,
                    4715,
                    4689,
                    4659,
                    4661,
                    4700
                ],
                "n": [
                    4652,
                    4711
                ],
                "d1": [
                    4656,
                    4654
                ],
                "d2": [
                    4656,
                    4655
                ],
                "bdist": [
                    4656,
                    4685,
                    4660,
                    4661
                ],
                "lattice1": [
                    4675,
                    4707,
                    4678,
                    4687,
                    4658,
                    4662,
                    4694,
                    4696,
                    4665,
                    4698,
                    4667
                ],
                "lattice2": [
                    4705,
                    4708,
                    4679,
                    4682,
                    4690,
                    4659,
                    4663,
                    4666,
                    4667,
                    4701,
                    4703
                ],
                "c1": [
                    4660,
                    4662
                ],
                "c2": [
                    4661,
                    4663
                ],
                "np.add.at": [
                    4662,
                    4663
                ],
                "np.add": [
                    4662,
                    4663
                ],
                "mincnt": [
                    4672,
                    4695,
                    4664,
                    4665,
                    4666,
                    4702,
                    4671
                ],
                "np.nan": [
                    4705,
                    4817,
                    4698,
                    4665,
                    4666
                ],
                "accum": [
                    4768,
                    4770,
                    4707,
                    4709,
                    4776,
                    4780,
                    4784,
                    4722,
                    4786,
                    4667,
                    4668
                ],
                "np.concatenate": [
                    6624,
                    6628,
                    8037,
                    8071,
                    8072,
                    4667
                ],
                "lattice1.ravel": [
                    4667
                ],
                "lattice2.ravel": [
                    4667
                ],
                "good_idxs": [
                    4721,
                    4722,
                    4668,
                    4709
                ],
                "np.isnan": [
                    4709,
                    6616,
                    4856,
                    4824,
                    4668
                ],
                "np.empty": [
                    4675,
                    4679
                ],
                "j": [
                    4705,
                    4677,
                    4678,
                    4681,
                    4682,
                    4693,
                    4694,
                    4696,
                    4698,
                    4700,
                    4701,
                    4703
                ],
                "append": [
                    4690,
                    4687
                ],
                "vals": [
                    8023,
                    8024,
                    4694,
                    4695,
                    4696,
                    8026,
                    8027,
                    4701,
                    4702,
                    4703
                ],
                "reduce_C_function": [
                    4696,
                    4815,
                    4703
                ],
                "np.hstack": [
                    4707
                ],
                "ravel": [
                    4707,
                    4708
                ],
                "lattice1.astype": [
                    4707
                ],
                "lattice2.astype": [
                    4708
                ],
                "np.repeat": [
                    4712,
                    4714
                ],
                "polygon": [
                    4731,
                    4724,
                    4749
                ],
                "polygons": [
                    4738,
                    4731,
                    4733,
                    4743
                ],
                "np.expand_dims": [
                    4731
                ],
                "mcoll.PolyCollection": [
                    5217,
                    4742,
                    5885,
                    4874,
                    4748,
                    4845,
                    5405
                ],
                "mcolors.LogNorm": [
                    4764,
                    4767
                ],
                "norm.vmin": [
                    4775
                ],
                "norm.vmax": [
                    4775
                ],
                "norm.autoscale": [
                    4776
                ],
                "minimum": [
                    4780,
                    4782
                ],
                "maximum": [
                    4780,
                    4782
                ],
                "np.sort": [
                    4783
                ],
                "bins.searchsorted": [
                    4784
                ],
                "collection.set_alpha": [
                    6101,
                    4789,
                    5887
                ],
                "ind": [
                    5376,
                    5188,
                    4810,
                    4813,
                    5367,
                    5368,
                    5369,
                    5370,
                    5179,
                    5180,
                    5181,
                    5182
                ],
                "clip": [
                    4810
                ],
                "coarse.searchsorted": [
                    4810
                ],
                "coarse": [
                    4859,
                    4860,
                    4861,
                    4810,
                    4811,
                    4812,
                    4855,
                    4863,
                    4821,
                    4854,
                    4823,
                    4827,
                    4828,
                    4829,
                    4831
                ],
                "mus": [
                    4818,
                    4811,
                    4819
                ],
                "mu": [
                    4817,
                    4818,
                    4815
                ],
                "xcoarse": [
                    4824,
                    4826,
                    4823
                ],
                "coarse_bin": [
                    4855,
                    4823
                ],
                "valid": [
                    4824,
                    4833,
                    4864,
                    4856
                ],
                "values": [
                    4868,
                    4870,
                    4840,
                    4842,
                    4875,
                    4847,
                    4857,
                    4825
                ],
                "val": [
                    4840,
                    4826,
                    4868,
                    4858
                ],
                "thismin": [
                    4866,
                    4867,
                    4836,
                    4837,
                    4863,
                    4859,
                    4827,
                    4831
                ],
                "thismax": [
                    4866,
                    4867,
                    4838,
                    4839,
                    4829,
                    4863,
                    4861,
                    4831
                ],
                "np.diff": [
                    6657,
                    6255,
                    6256,
                    6673,
                    4831,
                    6651,
                    4863
                ],
                "verts.append": [
                    4866,
                    4836
                ],
                "values.append": [
                    4840,
                    4868
                ],
                "hbar": [
                    4845,
                    4847,
                    4848,
                    4849,
                    4850,
                    4851,
                    4852,
                    4882,
                    4886,
                    4887
                ],
                "hbar.set_array": [
                    4847
                ],
                "hbar.set_cmap": [
                    4848,
                    4886
                ],
                "hbar.set_norm": [
                    4849
                ],
                "hbar.set_alpha": [
                    4850
                ],
                "hbar.update": [
                    4851
                ],
                "ycoarse": [
                    4856,
                    4858,
                    4855
                ],
                "vbar": [
                    4874,
                    4875,
                    4876,
                    4877,
                    4878,
                    4879,
                    4880,
                    4883,
                    4888,
                    4889
                ],
                "vbar.set_array": [
                    4875
                ],
                "vbar.set_cmap": [
                    4888,
                    4876
                ],
                "vbar.set_norm": [
                    4877
                ],
                "vbar.set_alpha": [
                    4878
                ],
                "vbar.update": [
                    4879
                ],
                "collection.hbar": [
                    4882
                ],
                "collection.vbar": [
                    4883
                ],
                "collection.get_cmap": [
                    4888,
                    4886
                ],
                "hbar.set_clim": [
                    4887
                ],
                "collection.get_clim": [
                    4889,
                    4887
                ],
                "vbar.set_clim": [
                    4889
                ],
                "collection.callbacksSM.connect": [
                    4891
                ],
                "collection.callbacksSM": [
                    4891
                ],
                "on_changed": [
                    4891
                ],
                "mpatches.FancyArrow": [
                    4940
                ],
                "qk": [
                    4946,
                    4947,
                    4948
                ],
                "mquiver.QuiverKey": [
                    4944,
                    4946
                ],
                "mquiver": [
                    4966,
                    4971,
                    4944,
                    4946,
                    4983
                ],
                "Q": [
                    4946
                ],
                "X": [
                    5895,
                    5640,
                    5642,
                    5644,
                    5649,
                    5651,
                    5658,
                    5659,
                    5667,
                    5669,
                    5670,
                    5671,
                    5675,
                    5175,
                    5691,
                    7874,
                    7875,
                    7876,
                    5830,
                    5831,
                    6086,
                    6087,
                    5834,
                    5835,
                    6088,
                    6091,
                    6092,
                    5840,
                    6097,
                    4946,
                    5843,
                    5207,
                    5208,
                    5210,
                    5211,
                    5212,
                    5213,
                    5850,
                    5215,
                    5852,
                    5854,
                    5856,
                    5608
                ],
                "Y": [
                    5640,
                    5896,
                    5642,
                    5644,
                    5649,
                    5395,
                    5396,
                    5651,
                    5398,
                    5399,
                    5400,
                    5401,
                    5403,
                    5660,
                    5661,
                    5668,
                    5672,
                    5673,
                    5674,
                    5675,
                    5691,
                    5830,
                    6086,
                    6089,
                    5834,
                    6091,
                    5836,
                    6093,
                    5841,
                    4946,
                    5843,
                    6097,
                    5851,
                    5853,
                    5855,
                    5857,
                    5364
                ],
                "U": [
                    4946
                ],
                "kw": [
                    4964,
                    4966,
                    4946,
                    4981,
                    7770,
                    4983,
                    4954,
                    7774
                ],
                "docstring.copy": [
                    4944
                ],
                "mquiver.QuiverKey.__init__": [
                    4944
                ],
                "self._quiver_units": [
                    4964,
                    4981
                ],
                "q": [
                    8034,
                    8035,
                    8037,
                    4966,
                    8069,
                    4968,
                    8070,
                    4970,
                    8071,
                    8072
                ],
                "mquiver.Quiver": [
                    4971,
                    4966
                ],
                "quiver.__doc__": [
                    4971
                ],
                "quiver": [
                    4971
                ],
                "mquiver.Quiver.quiver_doc": [
                    4971
                ],
                "mquiver.Barbs": [
                    4983
                ],
                "poly": [
                    5037,
                    5038
                ],
                "mcoll.Collection": [
                    5128,
                    5317
                ],
                "y2": [
                    5221,
                    5158,
                    5160,
                    5166,
                    5135,
                    5140,
                    5142,
                    5181
                ],
                "ma.masked_invalid": [
                    5327,
                    5328,
                    5329,
                    5138,
                    5139,
                    5140
                ],
                "ma": [
                    5138,
                    5139,
                    5140,
                    5327,
                    5328,
                    5329,
                    5839,
                    5840,
                    5841,
                    5843,
                    5847,
                    5850,
                    5851,
                    5852,
                    5853,
                    5854,
                    5855,
                    5856,
                    5857,
                    5863
                ],
                "name": [
                    5144,
                    5331,
                    5333,
                    5142
                ],
                "array": [
                    5331,
                    5332,
                    5142,
                    5143
                ],
                "array.ndim": [
                    5332,
                    5143
                ],
                "where.size": [
                    5340,
                    5151
                ],
                "functools.reduce": [
                    5346,
                    5157
                ],
                "functools": [
                    5346,
                    5157
                ],
                "np.logical_or": [
                    5346,
                    5157
                ],
                "np.ma.getmask": [
                    5347,
                    5158
                ],
                "polys": [
                    5217,
                    5351,
                    5162,
                    5403,
                    5405,
                    5215
                ],
                "ind0": [
                    5352,
                    5353,
                    5354,
                    5163,
                    5164,
                    5165,
                    5198,
                    5166,
                    5355,
                    5386
                ],
                "ind1": [
                    5352,
                    5353,
                    5354,
                    5163,
                    5164,
                    5165,
                    5166,
                    5199,
                    5355,
                    5387
                ],
                "cbook.contiguous_regions": [
                    5352,
                    5163
                ],
                "xslice": [
                    5164,
                    5169,
                    5171,
                    5204,
                    5205,
                    5174,
                    5210,
                    5212
                ],
                "y1slice": [
                    5169,
                    5211,
                    5165
                ],
                "y2slice": [
                    5166,
                    5169,
                    5204,
                    5205,
                    5213
                ],
                "step": [
                    5356,
                    5357,
                    5167,
                    5168,
                    7029,
                    7030,
                    7133,
                    7135
                ],
                "step_func": [
                    5168,
                    5169,
                    5357,
                    5358
                ],
                "cbook.STEP_LOOKUP_MAP": [
                    5168,
                    5357
                ],
                "interpolate": [
                    5177,
                    5365
                ],
                "im1": [
                    5186,
                    5374,
                    5367,
                    5368,
                    5369,
                    5370,
                    5179,
                    5180,
                    5181,
                    5182
                ],
                "x_values": [
                    5192,
                    5193,
                    5194,
                    5180
                ],
                "diff_values": [
                    5184,
                    5185,
                    5378,
                    5187,
                    5373,
                    5380,
                    5190,
                    5192,
                    5369,
                    5372,
                    5181,
                    5375
                ],
                "y1_values": [
                    5195,
                    5182
                ],
                "np.ma.is_masked": [
                    5185,
                    5187,
                    5651,
                    5373,
                    5375
                ],
                "diff_order": [
                    5192,
                    5378,
                    5380,
                    5190
                ],
                "diff_values.argsort": [
                    5378,
                    5190
                ],
                "diff_root_x": [
                    5382,
                    5191,
                    5384,
                    5194,
                    5196
                ],
                "np.interp": [
                    5194,
                    5379,
                    5382,
                    5191
                ],
                "x_order": [
                    5193,
                    5194,
                    5195
                ],
                "x_values.argsort": [
                    5193
                ],
                "diff_root_y": [
                    5379,
                    5382,
                    5384,
                    5194,
                    5196
                ],
                "start": [
                    5386,
                    5198,
                    5392,
                    5395,
                    5204,
                    5207
                ],
                "get_interp_point": [
                    5386,
                    5387,
                    5198,
                    5199
                ],
                "end": [
                    5387,
                    5199,
                    5393,
                    5396,
                    5205,
                    5208
                ],
                "polys.append": [
                    5403,
                    5215
                ],
                "XY1": [
                    5220,
                    5222
                ],
                "T": [
                    5408,
                    5409,
                    5220,
                    5221,
                    5906
                ],
                "XY2": [
                    5225,
                    5221
                ],
                "self.dataLim.update_from_data_xy": [
                    5225,
                    5410,
                    5413,
                    5222
                ],
                "self.ignore_existing_data_limits": [
                    5410,
                    5412,
                    5413,
                    5222,
                    5224,
                    5225
                ],
                "x2": [
                    5409,
                    5347,
                    5349,
                    5355,
                    5324,
                    5329,
                    5331,
                    5369
                ],
                "yslice": [
                    5353,
                    5358,
                    5360,
                    5392,
                    5393,
                    5363,
                    5399,
                    5401
                ],
                "x1slice": [
                    5354,
                    5358,
                    5398
                ],
                "x2slice": [
                    5355,
                    5358,
                    5392,
                    5393,
                    5400
                ],
                "y_values": [
                    5368,
                    5380,
                    5381,
                    5382
                ],
                "x1_values": [
                    5370,
                    5383
                ],
                "y_order": [
                    5381,
                    5382,
                    5383
                ],
                "y_values.argsort": [
                    5381
                ],
                "X1Y": [
                    5408,
                    5410
                ],
                "X2Y": [
                    5409,
                    5413
                ],
                "aspect": [
                    5601,
                    5602,
                    5603,
                    7720,
                    7691
                ],
                "im": [
                    6289,
                    6295,
                    6299,
                    6300,
                    7590,
                    7594,
                    7774,
                    5604,
                    5608,
                    5609,
                    5610,
                    7784,
                    5612,
                    5614,
                    5616,
                    5617,
                    5621,
                    5623,
                    5624
                ],
                "mimage.AxesImage": [
                    6289,
                    5604
                ],
                "mimage": [
                    6289,
                    5604,
                    6295
                ],
                "interpolation": [
                    5604
                ],
                "origin": [
                    5604,
                    7692
                ],
                "filternorm": [
                    5605
                ],
                "filterrad": [
                    5605
                ],
                "resample": [
                    5606
                ],
                "im.set_data": [
                    5608
                ],
                "im.set_alpha": [
                    5609
                ],
                "im.get_clip_path": [
                    5610
                ],
                "im.set_clip_path": [
                    5612
                ],
                "im.set_clim": [
                    5614
                ],
                "im.autoscale_None": [
                    5616
                ],
                "im.set_url": [
                    5617
                ],
                "url": [
                    5617
                ],
                "im.set_extent": [
                    5621
                ],
                "im.get_extent": [
                    5621
                ],
                "self.add_image": [
                    6299,
                    5623
                ],
                "nrows": [
                    5638,
                    5640,
                    5642,
                    5680,
                    5685,
                    5662
                ],
                "ncols": [
                    5638,
                    5640,
                    5642,
                    5680,
                    5685,
                    5662
                ],
                "C.shape": [
                    6275,
                    5638,
                    5683,
                    5688,
                    5662
                ],
                "allmatch": [
                    6084,
                    5679,
                    6086,
                    5639
                ],
                "np.meshgrid": [
                    5640,
                    5642
                ],
                "cbook.safe_masked_invalid": [
                    5649,
                    5690,
                    5643
                ],
                "funcname": [
                    5665,
                    5678,
                    5650,
                    5683,
                    5688
                ],
                "np.ma.core.MaskedArray": [
                    5658,
                    5660
                ],
                "np.ma.core": [
                    5658,
                    5660
                ],
                "X.data": [
                    5659
                ],
                "Y.data": [
                    5661
                ],
                "X.shape": [
                    5667,
                    5669,
                    6087,
                    5831,
                    5675
                ],
                "Ny": [
                    5668,
                    5671,
                    5831,
                    5673,
                    5863,
                    6087,
                    5680,
                    6098,
                    5683,
                    5685,
                    5688,
                    5689
                ],
                "Y.shape": [
                    5672,
                    5675,
                    5668
                ],
                "X.ndim": [
                    5669
                ],
                "X.reshape": [
                    5670
                ],
                "x.repeat": [
                    5671
                ],
                "Y.ndim": [
                    5672
                ],
                "Y.reshape": [
                    5673
                ],
                "y.repeat": [
                    5674
                ],
                "self._pcolorargs": [
                    6086,
                    5830
                ],
                "ma.asarray": [
                    5840,
                    5841,
                    5839
                ],
                "ma.getmaskarray": [
                    5843,
                    5847
                ],
                "xymask": [
                    5844,
                    5847
                ],
                "unmask": [
                    5856,
                    5857,
                    5863,
                    5849,
                    5850,
                    5851,
                    5852,
                    5853,
                    5854,
                    5855
                ],
                "X1": [
                    5858,
                    5850,
                    5860
                ],
                "ma.filled": [
                    5856,
                    5857,
                    5863,
                    5850,
                    5851,
                    5852,
                    5853,
                    5854,
                    5855
                ],
                "Y1": [
                    5851,
                    5860
                ],
                "X2": [
                    5860,
                    5852
                ],
                "Y2": [
                    5860,
                    5853
                ],
                "X3": [
                    5860,
                    5854
                ],
                "Y3": [
                    5860,
                    5855
                ],
                "X4": [
                    5856,
                    5860
                ],
                "Y4": [
                    5857,
                    5860
                ],
                "npoly": [
                    5858,
                    5861
                ],
                "np.stack": [
                    5860,
                    6271
                ],
                "xy.reshape": [
                    5861
                ],
                "ec": [
                    5872,
                    5880
                ],
                "self.grid": [
                    5893,
                    7439,
                    7023,
                    7129,
                    6108
                ],
                "X.compressed": [
                    5895
                ],
                "Y.compressed": [
                    5896
                ],
                "collection._transform": [
                    5899,
                    6111
                ],
                "mtransforms.Transform": [
                    6112,
                    5900
                ],
                "t._as_mpl_transform": [
                    6114,
                    5902
                ],
                "self.axes": [
                    6114,
                    5902
                ],
                "t.contains_branch_seperately": [
                    5904,
                    6116
                ],
                "trans_to_data": [
                    5905,
                    5907,
                    6117,
                    6118
                ],
                "pts": [
                    5906,
                    5907
                ],
                "T.astype": [
                    5906
                ],
                "np.vstack": [
                    5906
                ],
                "transformed_pts": [
                    5907,
                    5908,
                    5909
                ],
                "trans_to_data.transform": [
                    5907,
                    6118
                ],
                "collection.sticky_edges.x": [
                    6124,
                    5917
                ],
                "collection.sticky_edges": [
                    6125,
                    6124,
                    5917,
                    5918
                ],
                "collection.sticky_edges.y": [
                    6125,
                    5918
                ],
                "shading": [
                    6081,
                    6099,
                    6084
                ],
                "shading.lower": [
                    6081
                ],
                "X.ravel": [
                    6088
                ],
                "Y.ravel": [
                    6089
                ],
                "C.ravel": [
                    6096
                ],
                "coords": [
                    7875,
                    7877,
                    6118,
                    6279,
                    6122,
                    6123,
                    6097,
                    6098,
                    6271
                ],
                "mcoll.QuadMesh": [
                    6098,
                    6278
                ],
                "antialiased": [
                    6099
                ],
                "nr": [
                    6242,
                    7717,
                    6246,
                    7719,
                    6279
                ],
                "nc": [
                    6242,
                    7717,
                    6245,
                    7718,
                    6279
                ],
                "style": [
                    6244,
                    6253,
                    6288,
                    6259,
                    6261,
                    6294,
                    6263,
                    6269
                ],
                "y.ndim": [
                    6251,
                    6262
                ],
                "np.abs": [
                    7683,
                    6257,
                    6258,
                    7700,
                    7126,
                    7705
                ],
                "dx.mean": [
                    6257
                ],
                "dy.mean": [
                    6258
                ],
                "qm_kwargs": [
                    6273,
                    6275,
                    6279
                ],
                "np.ma.reshape": [
                    6275
                ],
                "xl": [
                    6312,
                    6283,
                    6310,
                    6287
                ],
                "yb": [
                    6312,
                    6311,
                    6283,
                    6287
                ],
                "mimage.PcolorImage": [
                    6295
                ],
                "ret.set_clim": [
                    6303
                ],
                "ret.autoscale_None": [
                    6305
                ],
                "ret.get_clip_path": [
                    6306
                ],
                "ret.set_clip_path": [
                    6308
                ],
                "ret.sticky_edges.x": [
                    6310
                ],
                "ret.sticky_edges": [
                    6310,
                    6311
                ],
                "ret.sticky_edges.y": [
                    6311
                ],
                "contours": [
                    6321,
                    6329,
                    6327,
                    6319
                ],
                "mcontour.QuadContourSet": [
                    6330,
                    6327,
                    6322,
                    6319
                ],
                "mcontour": [
                    6319,
                    6322,
                    6327,
                    6330,
                    6334
                ],
                "contour.__doc__": [
                    6322
                ],
                "contour": [
                    6322
                ],
                "mcontour.QuadContourSet._contour_doc": [
                    6330,
                    6322
                ],
                "contourf.__doc__": [
                    6330
                ],
                "contourf": [
                    6330
                ],
                "CS.clabel": [
                    6333
                ],
                "CS": [
                    6333
                ],
                "clabel.__doc__": [
                    6334
                ],
                "clabel": [
                    6334
                ],
                "mcontour.ContourSet.clabel.__doc__": [
                    6334
                ],
                "mcontour.ContourSet.clabel": [
                    6334
                ],
                "mcontour.ContourSet": [
                    6334
                ],
                "bin_range": [
                    6629,
                    6631,
                    6605,
                    6573,
                    6574,
                    6543,
                    6617
                ],
                "histtype": [
                    6559,
                    6671,
                    6745,
                    6554,
                    6683,
                    6718,
                    6687
                ],
                "stacked": [
                    6560,
                    6634,
                    6687,
                    6706,
                    6678,
                    6646,
                    6714,
                    6683,
                    6749,
                    6559
                ],
                "input_empty": [
                    6563,
                    6622
                ],
                "np.size": [
                    8072,
                    6563,
                    8071
                ],
                "cbook._reshape_2D": [
                    6578,
                    6565
                ],
                "wi": [
                    6585,
                    6586
                ],
                "self._get_lines.get_next_color": [
                    8016,
                    6591
                ],
                "error_message": [
                    6595,
                    6598
                ],
                "hist_kwargs": [
                    6600,
                    6643,
                    6635,
                    6631
                ],
                "np.inf": [
                    6606,
                    6607
                ],
                "np.nanmin": [
                    6612
                ],
                "np.nanmax": [
                    6613
                ],
                "_w": [
                    6624,
                    6626,
                    6629
                ],
                "histogram_bin_edges": [
                    6628
                ],
                "density": [
                    6656,
                    6633,
                    6634,
                    6635,
                    6650,
                    6909
                ],
                "tops": [
                    6657,
                    6659,
                    6638,
                    6703,
                    6811,
                    6644,
                    6645,
                    6677,
                    6647,
                    6651,
                    6748,
                    6813
                ],
                "m": [
                    6755,
                    6756,
                    6703,
                    6705,
                    6643,
                    6644,
                    6707,
                    6709,
                    6715,
                    6748
                ],
                "tops.append": [
                    6644
                ],
                "tops.cumsum": [
                    6647
                ],
                "cumulative": [
                    6652,
                    6654
                ],
                "slc": [
                    6657,
                    6659,
                    6653,
                    6655
                ],
                "cumsum": [
                    6657,
                    6659
                ],
                "_saved_autoscalex": [
                    6666,
                    6786
                ],
                "self.get_autoscalex_on": [
                    6666
                ],
                "_saved_autoscaley": [
                    6667,
                    6787
                ],
                "self.get_autoscaley_on": [
                    6667
                ],
                "self.set_autoscalex_on": [
                    6786,
                    6668
                ],
                "self.set_autoscaley_on": [
                    6787,
                    6669
                ],
                "histtype.startswith": [
                    6718,
                    6671
                ],
                "totwidth": [
                    6688,
                    6692,
                    6694,
                    6673,
                    6684,
                    6686
                ],
                "rwidth": [
                    6675,
                    6676
                ],
                "dr": [
                    6688,
                    6676,
                    6679,
                    6681,
                    6684,
                    6686
                ],
                "dw": [
                    6689,
                    6716,
                    6685
                ],
                "boffset": [
                    6689,
                    6692,
                    6694,
                    6710,
                    6716,
                    6686
                ],
                "_barfunc": [
                    6697,
                    6700,
                    6710
                ],
                "self.barh": [
                    6697
                ],
                "bottom_kwarg": [
                    6712,
                    6698,
                    6701
                ],
                "fill": [
                    8004,
                    8008,
                    6765,
                    6772,
                    6774,
                    6775,
                    8025,
                    6745
                ],
                "xvals": [
                    6761,
                    6747,
                    6769,
                    6758
                ],
                "yvals": [
                    6769,
                    6762,
                    6747,
                    6759
                ],
                "xvals.append": [
                    6761,
                    6758
                ],
                "yvals.append": [
                    6762,
                    6759
                ],
                "split": [
                    6771,
                    6765
                ],
                "self.fill": [
                    6770
                ],
                "patch.sticky_edges.y.append": [
                    6779
                ],
                "patch.sticky_edges.y": [
                    6779
                ],
                "patch.sticky_edges": [
                    6779,
                    6781
                ],
                "patch.sticky_edges.x.append": [
                    6781
                ],
                "patch.sticky_edges.x": [
                    6781
                ],
                "patches.reverse": [
                    6784
                ],
                "lab": [
                    6797
                ],
                "lbl": [
                    6803,
                    6804,
                    6799
                ],
                "itertools.zip_longest": [
                    6799
                ],
                "p.update": [
                    6802,
                    6807
                ],
                "p.set_label": [
                    6808,
                    6804
                ],
                "cbook.silent_list": [
                    6811,
                    6813
                ],
                "xedges": [
                    6920,
                    6917,
                    6908,
                    6916
                ],
                "yedges": [
                    6920,
                    6908,
                    6916,
                    6918
                ],
                "np.histogram2d": [
                    6908
                ],
                "cmin": [
                    6912,
                    8071,
                    8068,
                    6911
                ],
                "cmax": [
                    8072,
                    6913,
                    6914,
                    8068
                ],
                "pc": [
                    6920,
                    6916
                ],
                "self.pcolormesh": [
                    6916
                ],
                "h.T": [
                    6916
                ],
                "Fc": [
                    7296,
                    7300,
                    7434,
                    7588,
                    7211,
                    7212,
                    7219,
                    7366,
                    7367,
                    7371,
                    7117,
                    7118,
                    7124,
                    7007,
                    7008,
                    7013,
                    7548,
                    7549,
                    7295
                ],
                "pxx": [
                    7036,
                    7010,
                    7020,
                    7034
                ],
                "freqs": [
                    7298,
                    7300,
                    7302,
                    7431,
                    7306,
                    7434,
                    7436,
                    7564,
                    7441,
                    7588,
                    7589,
                    7594,
                    7217,
                    7219,
                    7230,
                    7234,
                    7369,
                    7371,
                    7373,
                    7120,
                    7377,
                    7124,
                    7126,
                    7010,
                    7139,
                    7013,
                    7141,
                    7020,
                    7034,
                    7036
                ],
                "mlab.psd": [
                    7010
                ],
                "NFFT": [
                    7585,
                    7010,
                    7431,
                    7564,
                    7120,
                    7546,
                    7547
                ],
                "Fs": [
                    7585,
                    7010,
                    7298,
                    7431,
                    7369,
                    7564,
                    7120,
                    7217
                ],
                "window": [
                    7298,
                    7011,
                    7432,
                    7369,
                    7565,
                    7121,
                    7217
                ],
                "noverlap": [
                    7585,
                    7011,
                    7432,
                    7566,
                    7121,
                    7550,
                    7551
                ],
                "pad_to": [
                    7011,
                    7299,
                    7370,
                    7566,
                    7121,
                    7218
                ],
                "sides": [
                    7299,
                    7012,
                    7370,
                    7567,
                    7122,
                    7218
                ],
                "scale_by_freq": [
                    7012,
                    7015,
                    7433,
                    7568,
                    7122
                ],
                "psd_units": [
                    7016,
                    7018,
                    7022
                ],
                "self.set_xlabel": [
                    7303,
                    7021,
                    7374,
                    7437,
                    7127,
                    7231
                ],
                "self.set_ylabel": [
                    7232,
                    7304,
                    7022,
                    7375,
                    7438,
                    7128
                ],
                "self.viewLim.intervaly": [
                    7024,
                    7130
                ],
                "self.viewLim": [
                    7024,
                    7130
                ],
                "intv": [
                    7025,
                    7026,
                    7132,
                    7133
                ],
                "logi": [
                    7026,
                    7027,
                    7028,
                    7029
                ],
                "ticks": [
                    7136,
                    7135,
                    7030,
                    7031
                ],
                "math.floor": [
                    7030,
                    7135
                ],
                "math.ceil": [
                    7030,
                    7135
                ],
                "return_line": [
                    7033,
                    7138
                ],
                "pxy": [
                    7120,
                    7139,
                    7141,
                    7126
                ],
                "mlab.csd": [
                    7120
                ],
                "scale": [
                    7556,
                    7558,
                    7560,
                    7561,
                    7214,
                    7215,
                    7571,
                    7221,
                    7573,
                    7224,
                    7579,
                    7228
                ],
                "spec": [
                    7234,
                    7298,
                    7302,
                    7369,
                    7306,
                    7577,
                    7564,
                    7373,
                    7594,
                    7217,
                    7377,
                    7572,
                    7222,
                    7575,
                    7225
                ],
                "mlab.magnitude_spectrum": [
                    7217
                ],
                "Z": [
                    7682,
                    7683,
                    7717,
                    7590,
                    7774,
                    7577,
                    7694,
                    7695,
                    7705,
                    7769,
                    7572,
                    7222,
                    7575,
                    7704,
                    7225,
                    7581,
                    7230,
                    7679
                ],
                "yunits": [
                    7232,
                    7226,
                    7223
                ],
                "mlab.angle_spectrum": [
                    7298
                ],
                "mlab.phase_spectrum": [
                    7369
                ],
                "mlab.window_hanning": [
                    7382
                ],
                "cxy": [
                    7441,
                    7436,
                    7431
                ],
                "mlab.cohere": [
                    7431
                ],
                "mode": [
                    7553,
                    7557,
                    7561,
                    7569,
                    7574
                ],
                "mlab.specgram": [
                    7564
                ],
                "np.flipud": [
                    7581
                ],
                "xextent": [
                    7586,
                    7587,
                    7583
                ],
                "pad_xextent": [
                    7585,
                    7586
                ],
                "self.imshow": [
                    7774,
                    7691,
                    7590
                ],
                "self.axis": [
                    7592
                ],
                "markersize": [
                    7681,
                    7715,
                    7709,
                    7710,
                    7679
                ],
                "precision": [
                    7696,
                    7705,
                    7683,
                    7700
                ],
                "mcolors.ListedColormap": [
                    7686
                ],
                "Z.tocoo": [
                    7695
                ],
                "c.row": [
                    7697,
                    7701
                ],
                "c.col": [
                    7698,
                    7702
                ],
                "nonzero": [
                    7700,
                    7701,
                    7702,
                    7705,
                    7706
                ],
                "c.data": [
                    7700
                ],
                "np.nonzero": [
                    7706
                ],
                "marks": [
                    7721,
                    7714,
                    7716
                ],
                "Z.shape": [
                    7717
                ],
                "self.title.set_y": [
                    7722,
                    7775
                ],
                "self.xaxis.tick_top": [
                    7776,
                    7723
                ],
                "self.xaxis.set_ticks_position": [
                    7777,
                    7724
                ],
                "self.xaxis.set_major_locator": [
                    7778,
                    7725
                ],
                "mticker.MaxNLocator": [
                    7728,
                    7781,
                    7778,
                    7725
                ],
                "self.yaxis.set_major_locator": [
                    7728,
                    7781
                ],
                "np.all": [
                    7874
                ],
                "kde": [
                    7876,
                    7877
                ],
                "mlab.GaussianKDE": [
                    7876
                ],
                "bw_method": [
                    7876
                ],
                "kde.evaluate": [
                    7877
                ],
                "vpstats": [
                    8068,
                    7879,
                    7881,
                    7982,
                    8020
                ],
                "cbook.violin_stats": [
                    7879
                ],
                "dataset": [
                    7879
                ],
                "_kde_method": [
                    7879
                ],
                "points": [
                    7879
                ],
                "quantiles": [
                    8037,
                    7880,
                    7977,
                    8074,
                    8062
                ],
                "self.violin": [
                    7881
                ],
                "showextrema": [
                    7883,
                    8046
                ],
                "showmedians": [
                    7883,
                    8055
                ],
                "pmins": [
                    8068,
                    8042,
                    8047,
                    8049,
                    8057,
                    7999
                ],
                "pmaxes": [
                    8000,
                    8068,
                    8042,
                    8047,
                    8049,
                    8058
                ],
                "self.fill_betweenx": [
                    8004
                ],
                "perp_lines": [
                    8005,
                    8009,
                    8042,
                    8074,
                    8047,
                    8049,
                    8056
                ],
                "par_lines": [
                    8010,
                    8051,
                    8006
                ],
                "self.fill_between": [
                    8008
                ],
                "fillcolor": [
                    8016,
                    8028,
                    8013
                ],
                "bodies": [
                    8025,
                    8019,
                    8038
                ],
                "vals.max": [
                    8024
                ],
                "means.append": [
                    8030
                ],
                "mins.append": [
                    8031
                ],
                "maxes.append": [
                    8032
                ],
                "medians.append": [
                    8033
                ],
                "quantiles.size": [
                    8062
                ],
                "ppmins": [
                    8065,
                    8074,
                    8071
                ],
                "ppmaxs": [
                    8072,
                    8074,
                    8067
                ],
                "table": [
                    8081
                ],
                "mtable.table": [
                    8081
                ],
                "mtable": [
                    8081
                ],
                "stackplot": [
                    8084
                ],
                "mstack.stackplot": [
                    8084
                ],
                "mstack": [
                    8084
                ],
                "streamplot": [
                    8086
                ],
                "mstream.streamplot": [
                    8087
                ],
                "mstream": [
                    8087
                ],
                "tricontour": [
                    8089
                ],
                "mtri.tricontour": [
                    8089
                ],
                "mtri": [
                    8089,
                    8090,
                    8091,
                    8092
                ],
                "tricontourf": [
                    8090
                ],
                "mtri.tricontourf": [
                    8090
                ],
                "tripcolor": [
                    8091
                ],
                "mtri.tripcolor": [
                    8091
                ],
                "triplot": [
                    8092
                ],
                "mtri.triplot": [
                    8092
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/matplotlib_22/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_hist_datetime_datasets_bins",
                "test_function_code": "@pytest.mark.parametrize(\"bins_preprocess\",\n                         [mpl.dates.date2num,\n                          lambda bins: bins,\n                          lambda bins: np.asarray(bins).astype('datetime64')],\n                         ids=['date2num', 'datetime.datetime',\n                              'np.datetime64'])\ndef test_hist_datetime_datasets_bins(bins_preprocess):\n    data = [[datetime.datetime(2019, 1, 5), datetime.datetime(2019, 1, 11),\n             datetime.datetime(2019, 2, 1), datetime.datetime(2019, 3, 1)],\n            [datetime.datetime(2019, 1, 11), datetime.datetime(2019, 2, 5),\n             datetime.datetime(2019, 2, 18), datetime.datetime(2019, 3, 1)]]\n\n    date_edges = [datetime.datetime(2019, 1, 1), datetime.datetime(2019, 2, 1),\n                  datetime.datetime(2019, 3, 1)]\n\n    fig, ax = plt.subplots()\n    _, bins, _ = ax.hist(data, bins=bins_preprocess(date_edges), stacked=True)\n    np.testing.assert_allclose(bins, mpl.dates.date2num(date_edges))\n\n    _, bins, _ = ax.hist(data, bins=bins_preprocess(date_edges), stacked=False)\n    np.testing.assert_allclose(bins, mpl.dates.date2num(date_edges))",
                "test_error": "TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'",
                "full_test_error": "bins_preprocess = <function <lambda> at 0x7f3af0b9d940>\n\n    @pytest.mark.parametrize(\"bins_preprocess\",\n                             [mpl.dates.date2num,\n                              lambda bins: bins,\n                              lambda bins: np.asarray(bins).astype('datetime64')],\n                             ids=['date2num', 'datetime.datetime',\n                                  'np.datetime64'])\n    def test_hist_datetime_datasets_bins(bins_preprocess):\n        data = [[datetime.datetime(2019, 1, 5), datetime.datetime(2019, 1, 11),\n                 datetime.datetime(2019, 2, 1), datetime.datetime(2019, 3, 1)],\n                [datetime.datetime(2019, 1, 11), datetime.datetime(2019, 2, 5),\n                 datetime.datetime(2019, 2, 18), datetime.datetime(2019, 3, 1)]]\n    \n        date_edges = [datetime.datetime(2019, 1, 1), datetime.datetime(2019, 2, 1),\n                      datetime.datetime(2019, 3, 1)]\n    \n        fig, ax = plt.subplots()\n>       _, bins, _ = ax.hist(data, bins=bins_preprocess(date_edges), stacked=True)\n\nlib/matplotlib/tests/test_axes.py:1773: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/matplotlib/__init__.py:1538: in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\nlib/matplotlib/axes/_axes.py:6643: in hist\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n<__array_function__ internals>:200: in histogram\n    ???\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:866: in histogram\n    cum_n += _search_sorted_inclusive(sa, bin_edges)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array([737064., 737070., 737091., 737119.])\nv = array([datetime.datetime(2019, 1, 1, 0, 0),\n       datetime.datetime(2019, 2, 1, 0, 0),\n       datetime.datetime(2019, 3, 1, 0, 0)], dtype=object)\n\n    def _search_sorted_inclusive(a, v):\n        \"\"\"\n        Like `searchsorted`, but where the last item in `v` is placed on the right.\n    \n        In the context of a histogram, this makes the last bin edge inclusive\n        \"\"\"\n        return np.concatenate((\n>           a.searchsorted(v[:-1], 'left'),\n            a.searchsorted(v[-1:], 'right')\n        ))\nE       TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'\n\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:461: TypeError",
                "traceback": "lib/matplotlib/__init__.py:1538: in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\nlib/matplotlib/axes/_axes.py:6643: in hist\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n<__array_function__ internals>:200: in histogram\n    ???\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:866: in histogram\n    cum_n += _search_sorted_inclusive(sa, bin_edges)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array([737064., 737070., 737091., 737119.])\nv = array([datetime.datetime(2019, 1, 1, 0, 0),\n       datetime.datetime(2019, 2, 1, 0, 0),\n       datetime.datetime(2019, 3, 1, 0, 0)], dtype=object)\n\n    def _search_sorted_inclusive(a, v):\n        \"\"\"\n        Like `searchsorted`, but where the last item in `v` is placed on the right.\n    \n        In the context of a histogram, this makes the last bin edge inclusive\n        \"\"\"\n        return np.concatenate((\n>           a.searchsorted(v[:-1], 'left'),\n            a.searchsorted(v[-1:], 'right')\n        ))\nE       TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'\n\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:461: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins_preprocess', [mpl.dates.date2num, lambda bins: bins, lambda bins: np.asarray(bins).astype('datetime64')], ids=['date2num', 'datetime.datetime', 'np.datetime64'])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/matplotlib_22/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_hist_datetime_datasets_bins",
                "test_function_code": "@pytest.mark.parametrize(\"bins_preprocess\",\n                         [mpl.dates.date2num,\n                          lambda bins: bins,\n                          lambda bins: np.asarray(bins).astype('datetime64')],\n                         ids=['date2num', 'datetime.datetime',\n                              'np.datetime64'])\ndef test_hist_datetime_datasets_bins(bins_preprocess):\n    data = [[datetime.datetime(2019, 1, 5), datetime.datetime(2019, 1, 11),\n             datetime.datetime(2019, 2, 1), datetime.datetime(2019, 3, 1)],\n            [datetime.datetime(2019, 1, 11), datetime.datetime(2019, 2, 5),\n             datetime.datetime(2019, 2, 18), datetime.datetime(2019, 3, 1)]]\n\n    date_edges = [datetime.datetime(2019, 1, 1), datetime.datetime(2019, 2, 1),\n                  datetime.datetime(2019, 3, 1)]\n\n    fig, ax = plt.subplots()\n    _, bins, _ = ax.hist(data, bins=bins_preprocess(date_edges), stacked=True)\n    np.testing.assert_allclose(bins, mpl.dates.date2num(date_edges))\n\n    _, bins, _ = ax.hist(data, bins=bins_preprocess(date_edges), stacked=False)\n    np.testing.assert_allclose(bins, mpl.dates.date2num(date_edges))",
                "test_error": "TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'",
                "full_test_error": "bins_preprocess = <function <lambda> at 0x7f3af0b9d9d0>\n\n    @pytest.mark.parametrize(\"bins_preprocess\",\n                             [mpl.dates.date2num,\n                              lambda bins: bins,\n                              lambda bins: np.asarray(bins).astype('datetime64')],\n                             ids=['date2num', 'datetime.datetime',\n                                  'np.datetime64'])\n    def test_hist_datetime_datasets_bins(bins_preprocess):\n        data = [[datetime.datetime(2019, 1, 5), datetime.datetime(2019, 1, 11),\n                 datetime.datetime(2019, 2, 1), datetime.datetime(2019, 3, 1)],\n                [datetime.datetime(2019, 1, 11), datetime.datetime(2019, 2, 5),\n                 datetime.datetime(2019, 2, 18), datetime.datetime(2019, 3, 1)]]\n    \n        date_edges = [datetime.datetime(2019, 1, 1), datetime.datetime(2019, 2, 1),\n                      datetime.datetime(2019, 3, 1)]\n    \n        fig, ax = plt.subplots()\n>       _, bins, _ = ax.hist(data, bins=bins_preprocess(date_edges), stacked=True)\n\nlib/matplotlib/tests/test_axes.py:1773: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/matplotlib/__init__.py:1538: in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\nlib/matplotlib/axes/_axes.py:6643: in hist\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n<__array_function__ internals>:200: in histogram\n    ???\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:866: in histogram\n    cum_n += _search_sorted_inclusive(sa, bin_edges)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array([737064., 737070., 737091., 737119.])\nv = array(['2019-01-01T00:00:00.000000', '2019-02-01T00:00:00.000000',\n       '2019-03-01T00:00:00.000000'], dtype='datetime64[us]')\n\n    def _search_sorted_inclusive(a, v):\n        \"\"\"\n        Like `searchsorted`, but where the last item in `v` is placed on the right.\n    \n        In the context of a histogram, this makes the last bin edge inclusive\n        \"\"\"\n        return np.concatenate((\n>           a.searchsorted(v[:-1], 'left'),\n            a.searchsorted(v[-1:], 'right')\n        ))\nE       TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'\n\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:461: TypeError",
                "traceback": "lib/matplotlib/__init__.py:1538: in inner\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\nlib/matplotlib/axes/_axes.py:6643: in hist\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n<__array_function__ internals>:200: in histogram\n    ???\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:866: in histogram\n    cum_n += _search_sorted_inclusive(sa, bin_edges)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array([737064., 737070., 737091., 737119.])\nv = array(['2019-01-01T00:00:00.000000', '2019-02-01T00:00:00.000000',\n       '2019-03-01T00:00:00.000000'], dtype='datetime64[us]')\n\n    def _search_sorted_inclusive(a, v):\n        \"\"\"\n        Like `searchsorted`, but where the last item in `v` is placed on the right.\n    \n        In the context of a histogram, this makes the last bin edge inclusive\n        \"\"\"\n        return np.concatenate((\n>           a.searchsorted(v[:-1], 'left'),\n            a.searchsorted(v[-1:], 'right')\n        ))\nE       TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'\n\n../../envs/matplotlib_22/lib/python3.8/site-packages/numpy/lib/histograms.py:461: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins_preprocess', [mpl.dates.date2num, lambda bins: bins, lambda bins: np.asarray(bins).astype('datetime64')], ids=['date2num', 'datetime.datetime', 'np.datetime64'])"
                ]
            }
        ]
    }
}