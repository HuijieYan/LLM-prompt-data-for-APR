{
    "1.1.1": "def set_xlim(self, left=None, right=None, emit=True, auto=False,\n             *, xmin=None, xmax=None):\n    \n    if right is None and np.iterable(left):\n        left, right = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n\n    if left is None or right is None:\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n\n    if self.get_xscale() == 'log':\n        if left <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive left xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive right xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(\n            f\"Attempting to set identical left == right == {left} results \"\n            f\"in singular transformations; automatically expanding.\")\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        # Call all of the other x-axes that are shared with this one\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return left, right\n",
    "1.1.2": "Set the x-axis view limits.\n\n.. ACCEPTS: (left: float, right: float)\n\nParameters\n----------\nleft : scalar, optional\n    The left xlim in data coordinates. Passing *None* leaves the\n    limit unchanged.\n\n    The left and right xlims may be passed as the tuple\n    (*left*, *right*) as the first positional argument (or as\n    the *left* keyword argument).\n\nright : scalar, optional\n    The right xlim in data coordinates. Passing *None* leaves the\n    limit unchanged.\n\nemit : bool, optional\n    Whether to notify observers of limit change (default: True).\n\nauto : bool or None, optional\n    Whether to turn on autoscaling of the x-axis. True turns on,\n    False turns off (default action), None leaves unchanged.\n\nxmin, xmax : scalar, optional\n    They are equivalent to left and right respectively,\n    and it is an error to pass both *xmin* and *left* or\n    *xmax* and *right*.\n\nReturns\n-------\nleft, right : (float, float)\n    The new x-axis limits in data coordinates.\n\nSee Also\n--------\nget_xlim\nset_xbound, get_xbound\ninvert_xaxis, xaxis_inverted\n\nNotes\n-----\nThe *left* value may be greater than the *right* value, in which\ncase the x-axis values will decrease from left to right.\n\nExamples\n--------\n>>> set_xlim(left, right)\n>>> set_xlim((left, right))\n>>> left, right = set_xlim(left, right)\n\nOne limit may be left unchanged.\n\n>>> set_xlim(right=right_lim)\n\nLimits may be passed in reverse order to flip the direction of\nthe x-axis. For example, suppose *x* represents the number of\nyears before present. The x-axis limits might be set like the\nfollowing so 5000 years ago is on the left of the plot and the\npresent is on the right.\n\n>>> set_xlim(5000, 0)",
    "1.2.1": "class _AxesBase(martist.Artist)",
    "1.2.2": null,
    "1.2.3": [
        "viewLim(self)",
        "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
        "get_xlim(self)",
        "_validate_converted_limits(self, limit, convert)",
        "set_xlim(self, left=None, right=None, emit=True, auto=False)",
        "get_xscale(self)"
    ],
    "1.3.1": "lib/matplotlib/axes/_base.py",
    "1.3.2": [
        "viewLim(self)",
        "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
        "get_xlim(self)",
        "_validate_converted_limits(self, limit, convert)",
        "set_xlim(self, left=None, right=None, emit=True, auto=False)",
        "get_xscale(self)"
    ],
    "1.4.1": [
        "def test_log_scales_invalid():\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_xscale('log')\n    with pytest.warns(UserWarning, match='Attempted to set non-positive'):\n        ax.set_xlim(-1, 10)"
    ],
    "1.4.2": [
        "lib/matplotlib/tests/test_axes.py"
    ],
    "2.1.1": [
        [
            "E               UnboundLocalError: local variable 'old_left' referenced before assignment"
        ]
    ],
    "2.1.2": [
        [
            "def test_log_scales_invalid():\n        fig = plt.figure()\n        ax = fig.add_subplot(1, 1, 1)\n        ax.set_xscale('log')\n        with pytest.warns(UserWarning, match='Attempted to set non-positive'):\n>           ax.set_xlim(-1, 10)\n\nlib/matplotlib/tests/test_axes.py:2149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <matplotlib.axes._subplots.AxesSubplot object at 0x7f02f62dc6a0>\nleft = -1, right = 10, emit = True, auto = False\n\n    def set_xlim(self, left=None, right=None, emit=True, auto=False,\n                 *, xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n    \n        .. ACCEPTS: (left: float, right: float)\n    \n        Parameters\n        ----------\n        left : scalar, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n    \n            The left and right xlims may be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n    \n        right : scalar, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n    \n        emit : bool, optional\n            Whether to notify observers of limit change (default: True).\n    \n        auto : bool or None, optional\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off (default action), None leaves unchanged.\n    \n        xmin, xmax : scalar, optional\n            They are equivalent to left and right respectively,\n            and it is an error to pass both *xmin* and *left* or\n            *xmax* and *right*.\n    \n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n    \n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n    \n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n    \n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n    \n        One limit may be left unchanged.\n    \n        >>> set_xlim(right=right_lim)\n    \n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n    \n        >>> set_xlim(5000, 0)\n    \n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError('Cannot pass both `xmin` and `left`')\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError('Cannot pass both `xmax` and `right`')\n            right = xmax\n    \n        self._process_unit_info(xdata=(left, right))\n        left = self._validate_converted_limits(left, self.convert_xunits)\n        right = self._validate_converted_limits(right, self.convert_xunits)\n    \n        if left is None or right is None:\n            # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n            # so only grab the limits if we really need them.\n            old_left, old_right = self.get_xlim()\n            if left is None:\n                left = old_left\n            if right is None:\n                right = old_right\n    \n        if self.get_xscale() == 'log':\n            if left <= 0:\n                cbook._warn_external(\n                    'Attempted to set non-positive left xlim on a '\n                    'log-scaled axis.\\n'\n                    'Invalid limit will be ignored.')\n>               left = old_left",
            "\nlib/matplotlib/axes/_base.py:3258: UnboundLocalError"
        ]
    ],
    "2.1.3": [
        [
            {
                "right": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "left": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "self._viewLim": {
                    "value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "auto": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "emit": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.viewLim": {
                    "value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "self.figure": {
                    "value": "<Figure size 640x480 with 0 Axes>",
                    "shape": null,
                    "omitted": false
                },
                "self.stale": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "self._autoscaleXon": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "other.figure": {
                    "value": "<Figure size 640x480 with 0 Axes>",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "right": "int",
                "left": "int",
                "self._viewLim": "Bbox",
                "auto": "bool",
                "emit": "bool",
                "self.viewLim": "Bbox",
                "self.figure": "Figure",
                "self.stale": "bool"
            },
            {
                "self._autoscaleXon": "bool",
                "other.figure": "Figure"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "right": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "left": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "self._viewLim": {
                    "value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "auto": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "emit": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.viewLim": {
                    "value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "self.figure": {
                    "value": "<Figure size 640x480 with 0 Axes>",
                    "shape": null,
                    "omitted": false
                },
                "self.stale": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "self._autoscaleXon": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "other.figure": {
                    "value": "<Figure size 640x480 with 0 Axes>",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "right": {
                    "value": "10",
                    "shape": null,
                    "omitted": false
                },
                "left": {
                    "value": "-1",
                    "shape": null,
                    "omitted": false
                },
                "self._viewLim": {
                    "value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "auto": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self._autoscaleXon": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "emit": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.viewLim": {
                    "value": "Bbox([[1e-300, 0.0], [1.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "self.figure": {
                    "value": "<Figure size 640x480 with 1 Axes>",
                    "shape": null,
                    "omitted": false
                },
                "self.stale": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "left": {
                    "value": "1e-300",
                    "shape": "()",
                    "omitted": false
                },
                "old_left": {
                    "value": "1e-300",
                    "shape": "()",
                    "omitted": false
                },
                "old_right": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "self._viewLim": {
                    "value": "Bbox([[1e-300, 0.0], [10.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "self._autoscaleXon": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.viewLim": {
                    "value": "Bbox([[1e-300, 0.0], [10.0, 1.0]])",
                    "shape": null,
                    "omitted": false
                },
                "other.figure": {
                    "value": "<Figure size 640x480 with 1 Axes>",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "right": "int",
                "left": "int",
                "self._viewLim": "Bbox",
                "auto": "bool",
                "emit": "bool",
                "self.viewLim": "Bbox",
                "self.figure": "Figure",
                "self.stale": "bool"
            },
            {
                "self._autoscaleXon": "bool",
                "other.figure": "Figure"
            }
        ],
        [
            {
                "right": "int",
                "left": "int",
                "self._viewLim": "Bbox",
                "auto": "bool",
                "self._autoscaleXon": "bool",
                "emit": "bool",
                "self.viewLim": "Bbox",
                "self.figure": "Figure",
                "self.stale": "bool"
            },
            {
                "left": "float64",
                "old_left": "float64",
                "old_right": "float64",
                "self._viewLim": "Bbox",
                "self._autoscaleXon": "bool",
                "self.viewLim": "Bbox",
                "other.figure": "Figure"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null,
    "used_imports": "import numpy as np\nfrom matplotlib import cbook, rcParams"
}