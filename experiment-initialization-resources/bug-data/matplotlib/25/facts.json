{
    "1.1.1": "def __init__(self,\n             positions,     # Cannot be None.\n             orientation=None,\n             lineoffset=0,\n             linelength=1,\n             linewidth=None,\n             color=None,\n             linestyle='solid',\n             antialiased=None,\n             **kwargs\n             ):\n    \n\n    segment = (lineoffset + linelength / 2.,\n               lineoffset - linelength / 2.)\n    if positions is None or len(positions) == 0:\n        segments = []\n    elif hasattr(positions, 'ndim') and positions.ndim > 1:\n        raise ValueError('positions cannot be an array with more than '\n                         'one dimension.')\n    elif (orientation is None or orientation.lower() == 'none' or\n          orientation.lower() == 'horizontal'):\n        positions.sort()\n        segments = [[(coord1, coord2) for coord2 in segment] for\n                    coord1 in positions]\n        self._is_horizontal = True\n    elif orientation.lower() == 'vertical':\n        positions.sort()\n        segments = [[(coord2, coord1) for coord2 in segment] for\n                    coord1 in positions]\n        self._is_horizontal = False\n    else:\n        cbook._check_in_list(['horizontal', 'vertical'],\n                             orientation=orientation)\n\n    LineCollection.__init__(self,\n                            segments,\n                            linewidths=linewidth,\n                            colors=color,\n                            antialiaseds=antialiased,\n                            linestyles=linestyle,\n                            **kwargs)\n\n    self._linelength = linelength\n    self._lineoffset = lineoffset\n",
    "1.1.2": "Parameters\n----------\npositions : 1D array-like object\n    Each value is an event.\n\norientation : {None, 'horizontal', 'vertical'}, optional\n    The orientation of the **collection** (the event bars are along\n    the orthogonal direction). Defaults to 'horizontal' if not\n    specified or None.\n\nlineoffset : scalar, optional, default: 0\n    The offset of the center of the markers from the origin, in the\n    direction orthogonal to *orientation*.\n\nlinelength : scalar, optional, default: 1\n    The total height of the marker (i.e. the marker stretches from\n    ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\nlinewidth : scalar or None, optional, default: None\n    If it is None, defaults to its rcParams setting, in sequence form.\n\ncolor : color, sequence of colors or None, optional, default: None\n    If it is None, defaults to its rcParams setting, in sequence form.\n\nlinestyle : str or tuple, optional, default: 'solid'\n    Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n    '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n        (offset, onoffseq),\n\n    where *onoffseq* is an even length tuple of on and off ink\n    in points.\n\nantialiased : {None, 1, 2}, optional\n    If it is None, defaults to its rcParams setting, in sequence form.\n\n**kwargs : optional\n    Other keyword arguments are line collection properties.  See\n    :class:`~matplotlib.collections.LineCollection` for a list of\n    the valid properties.\n\nExamples\n--------\n\n.. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py",
    "1.2.1": "class EventCollection(LineCollection)",
    "1.2.2": "A collection of discrete events.\n\nThe events are given by a 1-dimensional array, usually the position of\nsomething along an axis, such as time or length.  They do not have an\namplitude and are displayed as vertical or horizontal parallel bars.",
    "1.2.3": [
        "__init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs)"
    ],
    "1.3.1": "lib/matplotlib/collections.py",
    "1.3.2": [
        "__init__(self, edgecolors=None, facecolors=None, linewidths=None, linestyles='solid', capstyle=None, joinstyle=None, antialiaseds=None, offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5.0, hatch=None, urls=None, offset_position='screen', zorder=1, **kwargs)",
        "__init__(self, paths, sizes=None, **kwargs)",
        "__init__(self, verts, sizes=None, closed=True, **kwargs)",
        "__init__(self, xranges, yrange, **kwargs)",
        "__init__(self, numsides, rotation=0, sizes=(1,), **kwargs)",
        "__init__(self, segments, linewidths=None, colors=None, antialiaseds=None, linestyles='solid', offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5, zorder=2, facecolors='none', **kwargs)",
        "__init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs)",
        "__init__(self, sizes, **kwargs)",
        "__init__(self, widths, heights, angles, units='points', **kwargs)",
        "__init__(self, patches, match_original=False, **kwargs)",
        "__init__(self, triangulation, **kwargs)",
        "__init__(self, meshWidth, meshHeight, coordinates, antialiased=True, shading='flat', **kwargs)"
    ],
    "1.4.1": [
        "def test_EventCollection_nosort():\n    # Check that EventCollection doesn't modify input in place\n    arr = np.array([3, 2, 1, 10])\n    coll = EventCollection(arr)\n    np.testing.assert_array_equal(arr, np.array([3, 2, 1, 10]))"
    ],
    "1.4.2": [
        "lib/matplotlib/tests/test_collections.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: \nE           Arrays are not equal\nE           \nE           Mismatched elements: 2 / 4 (50%)\nE           Max absolute difference: 2\nE           Max relative difference: 2.\nE            x: array([ 1,  2,  3, 10])\nE            y: array([ 3,  2,  1, 10])"
        ]
    ],
    "2.1.2": [
        [
            "def test_EventCollection_nosort():\n        # Check that EventCollection doesn't modify input in place\n        arr = np.array([3, 2, 1, 10])\n        coll = EventCollection(arr)\n>       np.testing.assert_array_equal(arr, np.array([3, 2, 1, 10]))\n\nlib/matplotlib/tests/test_collections.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<built-in function eq>, array([ 1,  2,  3, 10]), array([ 3,  2,  1, 10]))\nkwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)",
            "\n/usr/local/lib/python3.8/contextlib.py:75: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "lineoffset": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "linelength": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "positions": {
                    "value": "array([ 3,  2,  1, 10])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "positions.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "linestyle": {
                    "value": "'solid'",
                    "shape": "5",
                    "omitted": false
                },
                "kwargs": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "segment": {
                    "value": "(0.5, -0.5)",
                    "shape": "2",
                    "omitted": false
                },
                "positions": {
                    "value": "array([ 1,  2,  3, 10])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "segments": {
                    "value": "[[(1, 0.5), (1, -0.5)], [(2, 0.5), (2, -0.5)], [(3, 0.5), (3, -0.5)], [(10, 0.5), (10, -0.5)]]",
                    "shape": "4",
                    "omitted": false
                },
                "self._is_horizontal": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self._linelength": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "self._lineoffset": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "lineoffset": "int",
                "linelength": "int",
                "positions": "ndarray",
                "positions.ndim": "int",
                "linestyle": "str",
                "kwargs": "dict"
            },
            {
                "segment": "tuple",
                "positions": "ndarray",
                "segments": "list",
                "self._is_horizontal": "bool",
                "self._linelength": "int",
                "self._lineoffset": "int"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "positions": {
                    "value": "array([ 3,  2,  1, 10])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "lineoffset": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "linelength": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "positions.size": {
                    "value": "4",
                    "shape": null,
                    "omitted": false
                },
                "positions.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "linestyle": {
                    "value": "'solid'",
                    "shape": "5",
                    "omitted": false
                },
                "kwargs": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "positions": {
                    "value": "array([ 1,  2,  3, 10])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "segment": {
                    "value": "(0.5, -0.5)",
                    "shape": "2",
                    "omitted": false
                },
                "segments": {
                    "value": "[[(1, 0.5), (1, -0.5)], [(2, 0.5), (2, -0.5)], [(3, 0.5), (3, -0.5)], [(10, 0.5), (10, -0.5)]]",
                    "shape": "4",
                    "omitted": false
                },
                "self._is_horizontal": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self._linelength": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "self._lineoffset": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "positions": "ndarray",
                "lineoffset": "int",
                "linelength": "int",
                "positions.size": "int",
                "positions.ndim": "int",
                "linestyle": "str",
                "kwargs": "dict"
            },
            {
                "positions": "ndarray",
                "segment": "tuple",
                "segments": "list",
                "self._is_horizontal": "bool",
                "self._linelength": "int",
                "self._lineoffset": "int"
            }
        ]
    ],
    "3.1.1": [
        "eventplot sorts np.array positions, but not list positions\n"
    ],
    "3.1.2": [
        "Bug report\nBug summary\n\nWhen using eventplot, the data is sorted in-place if it's passed as a numpy array. If the data is passed as a list, this doesn't happen.\n\nCode for reproduction\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n# This sorts the data\nsample_data = np.array([3, 2, 1, 10])\nplt.eventplot(sample_data)\nprint(sample_data)\n\n# This does not sort the data\nsample_data = [3, 2, 1, 10]\nplt.eventplot(sample_data)\nprint(sample_data)\nActual outcome\n\n[ 1  2  3 10]\n[3, 2, 1, 10]\n\nExpected outcome\nFor consistency, it would be good if the outcome was always sorted, or always untouched. My preference would be that the data remains unsorted.\n\nMatplotlib version\n\nOperating system: Ubuntu 16.04.4\nMatplotlib version: 3.0.2\nMatplotlib backend (print(matplotlib.get_backend())): module://ipykernel.pylab.backend_inline\nPython version: 3.7.2\nJupyter version (if applicable): jupyterlab version 0.35.4\nOther libraries: numpy version 1.16.2\nAll libraries were installed using conda.\n"
    ],
    "used_imports": "from . import _path, artist, cbook, cm, colors as mcolors, docstring, lines as mlines, path as mpath, transforms"
}