{
    "1.1.1": "def apply_aspect(self, position=None):\n    \n    if position is None:\n        position = self.get_position(original=True)\n\n    aspect = self.get_aspect()\n\n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n\n    if aspect == 'equal':\n        aspect = 1\n\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                               \"twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n\n    # self._adjustable == 'datalim'\n\n    # reset active to original in case it had been changed by prior use\n    # of 'box'\n    self._set_position(position, which='active')\n\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    xmin, xmax = map(x_trf.transform, self.get_xbound())\n    ymin, ymax = map(y_trf.transform, self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n\n    l, b, w, h = position.bounds\n    box_aspect = fig_aspect * (h / w)\n    data_ratio = box_aspect / aspect\n\n    y_expander = data_ratio * xsize / ysize - 1\n    # If y_expander > 0, the dy/dx viewLim ratio needs to increase\n    if abs(y_expander) < 0.005:\n        return\n\n    dL = self.dataLim\n    x0, x1 = map(x_trf.inverted().transform, dL.intervalx)\n    y0, y1 = map(y_trf.inverted().transform, dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    # Setting these targets to, e.g., 0.05*xr does not seem to help.\n    xm = 0\n    ym = 0\n\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    # Not sure whether we need this check:\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both \"\n                           \"axes are shared\")\n\n    # If y is shared, then we are only allowed to change x, etc.\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = ((Ymarg > 0 and y_expander < 0) or\n                    (Xmarg < 0 and y_expander > 0))\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy  # (Ymarg > xmarg)\n\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(*map(y_trf.inverted().transform, (y0, y1)))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(*map(x_trf.inverted().transform, (x0, x1)))\n",
    "1.1.2": "Adjust the Axes for a specified data aspect ratio.\n\nDepending on `.get_adjustable` this will modify either the Axes box\n(position) or the view limits. In the former case, `.get_anchor`\nwill affect the position.\n\nNotes\n-----\nThis is called automatically when each Axes is drawn.  You may need\nto call it yourself if you need to update the Axes position and/or\nview limits before the Figure is drawn.\n\nSee Also\n--------\nmatplotlib.axes.Axes.set_aspect\n    for a description of aspect ratio handling.\nmatplotlib.axes.Axes.set_adjustable\n    defining the parameter to adjust in order to meet the required\n    aspect.\nmatplotlib.axes.Axes.set_anchor\n    defining the position in case of extra space.",
    "1.2.1": "lib/matplotlib/axes/_base.py",
    "1.2.2": null,
    "1.3.1": "class _AxesBase(martist.Artist)",
    "1.3.2": null,
    "1.4.1": [
        "get_position(self, original=False)",
        "_set_position(self, pos, which='both')",
        "get_aspect(self)",
        "get_anchor(self)",
        "get_data_ratio(self)",
        "get_xbound(self)",
        "set_xbound(self, lower=None, upper=None)",
        "get_ybound(self)",
        "set_ybound(self, lower=None, upper=None)"
    ],
    "1.4.2": null,
    "1.5.1": [
        "def test_aspect_nonlinear_adjustable_datalim():\n    fig = plt.figure(figsize=(10, 10))  # Square.\n\n    ax = fig.add_axes([.1, .1, .8, .8])  # Square.\n    ax.plot([.4, .6], [.4, .6])  # Set minpos to keep logit happy.\n    ax.set(xscale=\"log\", xlim=(1, 100),\n           yscale=\"logit\", ylim=(1 / 101, 1 / 11),\n           aspect=1, adjustable=\"datalim\")\n    ax.margins(0)\n    ax.apply_aspect()\n    # Currently the autoscaler chooses to reduce the x-limits by half a decade\n    # on each end, but this may change later.\n    assert ax.get_xlim() == pytest.approx([1*10**(1/2), 100/10**(1/2)])\n    assert ax.get_ylim() == (1 / 101, 1 / 11)"
    ],
    "1.5.2": [
        "lib/matplotlib/tests/test_axes.py"
    ],
    "2.1.1": [
        [
            "E       assert (1.0, 100.0) == approx([3.1622776601683795 \u00b1 3.2e-06, 31.622776601683793 \u00b1 3.2e-05])\nE         comparison failed. Mismatched elements: 2 / 2:\nE         Max absolute difference: 68.3772233983162\nE         Max relative difference: 2.1622776601683795\nE         Index | Obtained | Expected                    \nE         0     | 1.0      | 3.1622776601683795 \u00b1 3.2e-06\nE         1     | 100.0    | 31.622776601683793 \u00b1 3.2e-05"
        ]
    ],
    "2.1.2": [
        [
            "def test_aspect_nonlinear_adjustable_datalim():\n        fig = plt.figure(figsize=(10, 10))  # Square.\n    \n        ax = fig.add_axes([.1, .1, .8, .8])  # Square.\n        ax.plot([.4, .6], [.4, .6])  # Set minpos to keep logit happy.\n        ax.set(xscale=\"log\", xlim=(1, 100),\n               yscale=\"logit\", ylim=(1 / 101, 1 / 11),\n               aspect=1, adjustable=\"datalim\")\n        ax.margins(0)\n        ax.apply_aspect()\n        # Currently the autoscaler chooses to reduce the x-limits by half a decade\n        # on each end, but this may change later.\n>       assert ax.get_xlim() == pytest.approx([1*10**(1/2), 100/10**(1/2)])",
            "\nlib/matplotlib/tests/test_axes.py:6564: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "self._adjustable": {
                    "value": "'datalim'",
                    "shape": "7",
                    "omitted": false
                },
                "self.dataLim": {
                    "value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "position": {
                    "value": "Bbox([[0.1, 0.1], [0.9, 0.9]])",
                    "shape": null,
                    "omitted": false
                },
                "aspect": {
                    "value": "1.0",
                    "shape": null,
                    "omitted": false
                },
                "fig_width": {
                    "value": "10.0",
                    "shape": "()",
                    "omitted": false
                },
                "fig_height": {
                    "value": "10.0",
                    "shape": "()",
                    "omitted": false
                },
                "fig_aspect": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "box_aspect": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "xmin": {
                    "value": "0.0",
                    "shape": "()",
                    "omitted": false
                },
                "xmax": {
                    "value": "2.0",
                    "shape": "()",
                    "omitted": false
                },
                "ymin": {
                    "value": "-2.0",
                    "shape": "()",
                    "omitted": false
                },
                "ymax": {
                    "value": "-1.0",
                    "shape": "()",
                    "omitted": false
                },
                "xsize": {
                    "value": "2.0",
                    "shape": "()",
                    "omitted": false
                },
                "ysize": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "l": {
                    "value": "0.1",
                    "shape": "()",
                    "omitted": false
                },
                "b": {
                    "value": "0.1",
                    "shape": "()",
                    "omitted": false
                },
                "w": {
                    "value": "0.8",
                    "shape": "()",
                    "omitted": false
                },
                "h": {
                    "value": "0.8",
                    "shape": "()",
                    "omitted": false
                },
                "position.bounds": {
                    "value": "(0.1, 0.1, 0.8, 0.8)",
                    "shape": "4",
                    "omitted": false
                },
                "data_ratio": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "y_expander": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "dL": {
                    "value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                    "shape": null,
                    "omitted": false
                },
                "x0": {
                    "value": "2.51188643150958",
                    "shape": "()",
                    "omitted": false
                },
                "x1": {
                    "value": "3.9810717055349722",
                    "shape": "()",
                    "omitted": false
                },
                "dL.intervalx": {
                    "value": "array([0.4, 0.6])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "y0": {
                    "value": "-2.5",
                    "shape": "()",
                    "omitted": false
                },
                "y1": {
                    "value": "-0.5",
                    "shape": "()",
                    "omitted": false
                },
                "dL.intervaly": {
                    "value": "array([0.4, 0.6])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "xr": {
                    "value": "1.5426445377266618",
                    "shape": "()",
                    "omitted": false
                },
                "yr": {
                    "value": "0.0881866020395845",
                    "shape": "()",
                    "omitted": false
                },
                "xmarg": {
                    "value": "0.45735546227333823",
                    "shape": "()",
                    "omitted": false
                },
                "ymarg": {
                    "value": "0.9118133979604155",
                    "shape": "()",
                    "omitted": false
                },
                "Ysize": {
                    "value": "2.0",
                    "shape": "()",
                    "omitted": false
                },
                "Xsize": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "Xmarg": {
                    "value": "-0.5426445377266618",
                    "shape": "()",
                    "omitted": false
                },
                "Ymarg": {
                    "value": "1.9118133979604155",
                    "shape": "()",
                    "omitted": false
                },
                "xm": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ym": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "shared_x": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "shared_y": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "adjust_y": {
                    "value": "True",
                    "shape": "()",
                    "omitted": false
                },
                "adjy": {
                    "value": "True",
                    "shape": "()",
                    "omitted": false
                },
                "yc": {
                    "value": "-1.5",
                    "shape": "()",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "self._adjustable": "str",
                "self.dataLim": "Bbox"
            },
            {
                "position": "Bbox",
                "aspect": "float",
                "fig_width": "float64",
                "fig_height": "float64",
                "fig_aspect": "float64",
                "box_aspect": "float64",
                "xmin": "float64",
                "xmax": "float64",
                "ymin": "float64",
                "ymax": "float64",
                "xsize": "float64",
                "ysize": "float64",
                "l": "float64",
                "b": "float64",
                "w": "float64",
                "h": "float64",
                "position.bounds": "tuple",
                "data_ratio": "float64",
                "y_expander": "float64",
                "dL": "Bbox",
                "x0": "float64",
                "x1": "float64",
                "dL.intervalx": "ndarray",
                "y0": "float64",
                "y1": "float64",
                "dL.intervaly": "ndarray",
                "xr": "float64",
                "yr": "float64",
                "xmarg": "float64",
                "ymarg": "float64",
                "Ysize": "float64",
                "Xsize": "float64",
                "Xmarg": "float64",
                "Ymarg": "float64",
                "xm": "int",
                "ym": "int",
                "shared_x": "bool",
                "shared_y": "bool",
                "adjust_y": "bool_",
                "adjy": "bool_",
                "yc": "float64"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "self._adjustable": {
                    "value": "'datalim'",
                    "shape": "7",
                    "omitted": false
                },
                "self.dataLim": {
                    "value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "position": {
                    "value": "Bbox([[0.1, 0.1], [0.9, 0.9]])",
                    "shape": null,
                    "omitted": false
                },
                "aspect": {
                    "value": "1.0",
                    "shape": null,
                    "omitted": false
                },
                "fig_width": {
                    "value": "10.0",
                    "shape": "()",
                    "omitted": false
                },
                "fig_height": {
                    "value": "10.0",
                    "shape": "()",
                    "omitted": false
                },
                "fig_aspect": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "box_aspect": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "xmin": {
                    "value": "0.0",
                    "shape": "()",
                    "omitted": false
                },
                "xmax": {
                    "value": "2.0",
                    "shape": "()",
                    "omitted": false
                },
                "ymin": {
                    "value": "-2.0",
                    "shape": "()",
                    "omitted": false
                },
                "ymax": {
                    "value": "-1.0",
                    "shape": "()",
                    "omitted": false
                },
                "xsize": {
                    "value": "2.0",
                    "shape": "()",
                    "omitted": false
                },
                "ysize": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "l": {
                    "value": "0.1",
                    "shape": "()",
                    "omitted": false
                },
                "b": {
                    "value": "0.1",
                    "shape": "()",
                    "omitted": false
                },
                "w": {
                    "value": "0.8",
                    "shape": "()",
                    "omitted": false
                },
                "h": {
                    "value": "0.8",
                    "shape": "()",
                    "omitted": false
                },
                "position.bounds": {
                    "value": "(0.1, 0.1, 0.8, 0.8)",
                    "shape": "4",
                    "omitted": false
                },
                "data_ratio": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "y_expander": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "dL": {
                    "value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                    "shape": null,
                    "omitted": false
                },
                "x0": {
                    "value": "0.5",
                    "shape": "()",
                    "omitted": false
                },
                "x1": {
                    "value": "1.5",
                    "shape": "()",
                    "omitted": false
                },
                "dL.intervalx": {
                    "value": "array([0.4, 0.6])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "y0": {
                    "value": "-0.17609125905568118",
                    "shape": "()",
                    "omitted": false
                },
                "y1": {
                    "value": "0.17609125905568115",
                    "shape": "()",
                    "omitted": false
                },
                "dL.intervaly": {
                    "value": "array([0.4, 0.6])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "xr": {
                    "value": "0.1848958220084653",
                    "shape": "()",
                    "omitted": false
                },
                "yr": {
                    "value": "0.3697916440169305",
                    "shape": "()",
                    "omitted": false
                },
                "xmarg": {
                    "value": "1.8151041779915347",
                    "shape": "()",
                    "omitted": false
                },
                "ymarg": {
                    "value": "0.6302083559830696",
                    "shape": "()",
                    "omitted": false
                },
                "Ysize": {
                    "value": "2.0",
                    "shape": "()",
                    "omitted": false
                },
                "Xsize": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "Xmarg": {
                    "value": "0.8151041779915347",
                    "shape": "()",
                    "omitted": false
                },
                "Ymarg": {
                    "value": "1.6302083559830696",
                    "shape": "()",
                    "omitted": false
                },
                "xm": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ym": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "shared_x": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "shared_y": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "adjust_y": {
                    "value": "False",
                    "shape": "()",
                    "omitted": false
                },
                "adjy": {
                    "value": "False",
                    "shape": "()",
                    "omitted": false
                },
                "xc": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "self._adjustable": "str",
                "self.dataLim": "Bbox"
            },
            {
                "position": "Bbox",
                "aspect": "float",
                "fig_width": "float64",
                "fig_height": "float64",
                "fig_aspect": "float64",
                "box_aspect": "float64",
                "xmin": "float64",
                "xmax": "float64",
                "ymin": "float64",
                "ymax": "float64",
                "xsize": "float64",
                "ysize": "float64",
                "l": "float64",
                "b": "float64",
                "w": "float64",
                "h": "float64",
                "position.bounds": "tuple",
                "data_ratio": "float64",
                "y_expander": "float64",
                "dL": "Bbox",
                "x0": "float64",
                "x1": "float64",
                "dL.intervalx": "ndarray",
                "y0": "float64",
                "y1": "float64",
                "dL.intervaly": "ndarray",
                "xr": "float64",
                "yr": "float64",
                "xmarg": "float64",
                "ymarg": "float64",
                "Ysize": "float64",
                "Xsize": "float64",
                "Xmarg": "float64",
                "Ymarg": "float64",
                "xm": "int",
                "ym": "int",
                "shared_x": "bool",
                "shared_y": "bool",
                "adjust_y": "bool_",
                "adjy": "bool_",
                "xc": "float64"
            }
        ]
    ],
    "3.1.1": [
        "Changed axis selection when zooming datalim-adjustable fixed-aspect axes\n"
    ],
    "3.1.2": [
        "x_trf goes from rawdata-space to scaled-space, so it's what should get\napplied to datalims, not x_trf.inverted(). So\n\n        x0, x1 = map(x_trf.inverted().transform, dL.intervalx)\n        y0, y1 = map(y_trf.inverted().transform, dL.intervaly)\nfrom 87c742b should have been\n\n        x0, x1 = map(x_trf.transform, dL.intervalx)\n        y0, y1 = map(y_trf.transform, dL.intervaly)\nEdit: This is getting fixed in #14990, what remains is possibly a revisit of the choice of axis to resize, described below.\n\nHowever, fixing that triggered a failure for\ntest_aspect_nonlinear_adjustable_datalim\nwhich had been added in that commit, and fixing that unraveled more\nissues.\n\nThe basic question is, when aspect is set and adjustable=\"datalim\",\nshould we change the x limits or the y limits to get the correct aspect?\nThe old code used some complex conditions, which I actually haven't\nmanaged to fully understand, to either expand or shrink one of the\naxises. Instead, just choose to always expand (rather than shrink) one\nof the axises, which will avoid sending artists out-of-bounds. (The\nsole exception is in care of shared axes, which we do not touch as\nexplained in the comment.)\n\nThis patch caused a change in the autolimiting of\ntest_axes.py::test_pie_frame_grid which was buggy anyways, I forced the\nold behavior by setting x/ylims manually (after checking that the\ndefault is to expand the limits).\n\nCloses #14898.\n"
    ]
}