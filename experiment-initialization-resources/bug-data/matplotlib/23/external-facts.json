{
    "matplotlib:23": {
        "github_issue_title": [
            "Changed axis selection when zooming datalim-adjustable fixed-aspect axes\n"
        ],
        "github_issue_description": [
            "x_trf goes from rawdata-space to scaled-space, so it's what should get\napplied to datalims, not x_trf.inverted(). So\n\n        x0, x1 = map(x_trf.inverted().transform, dL.intervalx)\n        y0, y1 = map(y_trf.inverted().transform, dL.intervaly)\nfrom 87c742b should have been\n\n        x0, x1 = map(x_trf.transform, dL.intervalx)\n        y0, y1 = map(y_trf.transform, dL.intervaly)\nEdit: This is getting fixed in #14990, what remains is possibly a revisit of the choice of axis to resize, described below.\n\nHowever, fixing that triggered a failure for\ntest_aspect_nonlinear_adjustable_datalim\nwhich had been added in that commit, and fixing that unraveled more\nissues.\n\nThe basic question is, when aspect is set and adjustable=\"datalim\",\nshould we change the x limits or the y limits to get the correct aspect?\nThe old code used some complex conditions, which I actually haven't\nmanaged to fully understand, to either expand or shrink one of the\naxises. Instead, just choose to always expand (rather than shrink) one\nof the axises, which will avoid sending artists out-of-bounds. (The\nsole exception is in care of shared axes, which we do not touch as\nexplained in the comment.)\n\nThis patch caused a change in the autolimiting of\ntest_axes.py::test_pie_frame_grid which was buggy anyways, I forced the\nold behavior by setting x/ylims manually (after checking that the\ndefault is to expand the limits).\n\nCloses #14898.\n"
        ]
    }
}