{
    "matplotlib:23": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/matplotlib_23/lib/matplotlib/axes/_base.py": {
            "buggy_functions": [
                {
                    "function_name": "apply_aspect",
                    "function_code": "def apply_aspect(self, position=None):\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n\n    Depending on `.get_adjustable` this will modify either the Axes box\n    (position) or the view limits. In the former case, `.get_anchor`\n    will affect the position.\n\n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n\n    aspect = self.get_aspect()\n\n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n\n    if aspect == 'equal':\n        aspect = 1\n\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                               \"twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n\n    # self._adjustable == 'datalim'\n\n    # reset active to original in case it had been changed by prior use\n    # of 'box'\n    self._set_position(position, which='active')\n\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    xmin, xmax = map(x_trf.transform, self.get_xbound())\n    ymin, ymax = map(y_trf.transform, self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n\n    l, b, w, h = position.bounds\n    box_aspect = fig_aspect * (h / w)\n    data_ratio = box_aspect / aspect\n\n    y_expander = data_ratio * xsize / ysize - 1\n    # If y_expander > 0, the dy/dx viewLim ratio needs to increase\n    if abs(y_expander) < 0.005:\n        return\n\n    dL = self.dataLim\n    x0, x1 = map(x_trf.inverted().transform, dL.intervalx)\n    y0, y1 = map(y_trf.inverted().transform, dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    # Setting these targets to, e.g., 0.05*xr does not seem to help.\n    xm = 0\n    ym = 0\n\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    # Not sure whether we need this check:\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both \"\n                           \"axes are shared\")\n\n    # If y is shared, then we are only allowed to change x, etc.\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = ((Ymarg > 0 and y_expander < 0) or\n                    (Xmarg < 0 and y_expander > 0))\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy  # (Ymarg > xmarg)\n\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(*map(y_trf.inverted().transform, (y0, y1)))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(*map(x_trf.inverted().transform, (x0, x1)))\n",
                    "decorators": [],
                    "docstring": "Adjust the Axes for a specified data aspect ratio.\n\nDepending on `.get_adjustable` this will modify either the Axes box\n(position) or the view limits. In the former case, `.get_anchor`\nwill affect the position.\n\nNotes\n-----\nThis is called automatically when each Axes is drawn.  You may need\nto call it yourself if you need to update the Axes position and/or\nview limits before the Figure is drawn.\n\nSee Also\n--------\nmatplotlib.axes.Axes.set_aspect\n    for a description of aspect ratio handling.\nmatplotlib.axes.Axes.set_adjustable\n    defining the parameter to adjust in order to meet the required\n    aspect.\nmatplotlib.axes.Axes.set_anchor\n    defining the position in case of extra space.",
                    "start_line": 1438,
                    "end_line": 1552,
                    "variables": {
                        "position": [
                            1482,
                            1491,
                            1462,
                            1463,
                            1500,
                            1468
                        ],
                        "self.get_position": [
                            1463
                        ],
                        "self": [
                            1474,
                            1495,
                            1477,
                            1478,
                            1509,
                            1481,
                            1547,
                            1484,
                            1552,
                            1491,
                            1493,
                            1494,
                            1463,
                            1496,
                            1465,
                            1525,
                            1526,
                            1468
                        ],
                        "aspect": [
                            1472,
                            1481,
                            1465,
                            1467,
                            1502,
                            1471
                        ],
                        "self.get_aspect": [
                            1465
                        ],
                        "self._set_position": [
                            1484,
                            1468,
                            1491
                        ],
                        "fig_width": [
                            1474,
                            1475
                        ],
                        "fig_height": [
                            1474,
                            1475
                        ],
                        "get_size_inches": [
                            1474
                        ],
                        "self.get_figure": [
                            1474
                        ],
                        "fig_aspect": [
                            1475,
                            1501,
                            1483
                        ],
                        "self._adjustable": [
                            1477
                        ],
                        "self._twinned_axes": [
                            1478
                        ],
                        "RuntimeError": [
                            1529,
                            1479
                        ],
                        "box_aspect": [
                            1481,
                            1483,
                            1501,
                            1502
                        ],
                        "self.get_data_ratio": [
                            1481
                        ],
                        "pb": [
                            1482,
                            1483,
                            1484
                        ],
                        "position.frozen": [
                            1482
                        ],
                        "pb1": [
                            1483,
                            1484
                        ],
                        "pb.shrunk_to_aspect": [
                            1483
                        ],
                        "pb1.anchored": [
                            1484
                        ],
                        "self.get_anchor": [
                            1484
                        ],
                        "x_trf": [
                            1552,
                            1493,
                            1510,
                            1495
                        ],
                        "self.xaxis.get_transform": [
                            1493
                        ],
                        "self.xaxis": [
                            1493
                        ],
                        "y_trf": [
                            1496,
                            1547,
                            1494,
                            1511
                        ],
                        "self.yaxis.get_transform": [
                            1494
                        ],
                        "self.yaxis": [
                            1494
                        ],
                        "xmin": [
                            1497,
                            1549,
                            1495
                        ],
                        "xmax": [
                            1497,
                            1549,
                            1495
                        ],
                        "map": [
                            1510,
                            1511,
                            1547,
                            1552,
                            1495,
                            1496
                        ],
                        "x_trf.transform": [
                            1495
                        ],
                        "self.get_xbound": [
                            1495
                        ],
                        "ymin": [
                            1496,
                            1544,
                            1498
                        ],
                        "ymax": [
                            1496,
                            1544,
                            1498
                        ],
                        "y_trf.transform": [
                            1496
                        ],
                        "self.get_ybound": [
                            1496
                        ],
                        "xsize": [
                            1504,
                            1497,
                            1515,
                            1517
                        ],
                        "max": [
                            1497,
                            1498
                        ],
                        "abs": [
                            1497,
                            1498,
                            1506
                        ],
                        "ysize": [
                            1504,
                            1498,
                            1516,
                            1518
                        ],
                        "l": [
                            1500
                        ],
                        "b": [
                            1500
                        ],
                        "w": [
                            1500,
                            1501
                        ],
                        "h": [
                            1500,
                            1501
                        ],
                        "position.bounds": [
                            1500
                        ],
                        "data_ratio": [
                            1504,
                            1518,
                            1517,
                            1502
                        ],
                        "y_expander": [
                            1504,
                            1537,
                            1506,
                            1538,
                            1540
                        ],
                        "dL": [
                            1509,
                            1510,
                            1511
                        ],
                        "self.dataLim": [
                            1509
                        ],
                        "x0": [
                            1512,
                            1552,
                            1510,
                            1550
                        ],
                        "x1": [
                            1512,
                            1552,
                            1510,
                            1551
                        ],
                        "transform": [
                            1552,
                            1547,
                            1510,
                            1511
                        ],
                        "x_trf.inverted": [
                            1552,
                            1510
                        ],
                        "dL.intervalx": [
                            1510
                        ],
                        "y0": [
                            1513,
                            1547,
                            1545,
                            1511
                        ],
                        "y1": [
                            1513,
                            1546,
                            1547,
                            1511
                        ],
                        "y_trf.inverted": [
                            1547,
                            1511
                        ],
                        "dL.intervaly": [
                            1511
                        ],
                        "xr": [
                            1512,
                            1515,
                            1519
                        ],
                        "yr": [
                            1520,
                            1513,
                            1516
                        ],
                        "xmarg": [
                            1536,
                            1515
                        ],
                        "ymarg": [
                            1536,
                            1516
                        ],
                        "Ysize": [
                            1520,
                            1545,
                            1546,
                            1517
                        ],
                        "Xsize": [
                            1551,
                            1550,
                            1518,
                            1519
                        ],
                        "Xmarg": [
                            1538,
                            1519
                        ],
                        "Ymarg": [
                            1520,
                            1537
                        ],
                        "xm": [
                            1536,
                            1522
                        ],
                        "ym": [
                            1536,
                            1523
                        ],
                        "shared_x": [
                            1528,
                            1541,
                            1525
                        ],
                        "self._shared_x_axes": [
                            1525
                        ],
                        "shared_y": [
                            1528,
                            1533,
                            1526
                        ],
                        "self._shared_y_axes": [
                            1526
                        ],
                        "adjust_y": [
                            1541,
                            1534,
                            1543
                        ],
                        "adjy": [
                            1537,
                            1540,
                            1541
                        ],
                        "yc": [
                            1544,
                            1545,
                            1546
                        ],
                        "self.set_ybound": [
                            1547
                        ],
                        "xc": [
                            1549,
                            1550,
                            1551
                        ],
                        "self.set_xbound": [
                            1552
                        ]
                    },
                    "filtered_variables": {
                        "position": [
                            1482,
                            1491,
                            1462,
                            1463,
                            1500,
                            1468
                        ],
                        "self.get_position": [
                            1463
                        ],
                        "self": [
                            1474,
                            1495,
                            1477,
                            1478,
                            1509,
                            1481,
                            1547,
                            1484,
                            1552,
                            1491,
                            1493,
                            1494,
                            1463,
                            1496,
                            1465,
                            1525,
                            1526,
                            1468
                        ],
                        "aspect": [
                            1472,
                            1481,
                            1465,
                            1467,
                            1502,
                            1471
                        ],
                        "self.get_aspect": [
                            1465
                        ],
                        "self._set_position": [
                            1484,
                            1468,
                            1491
                        ],
                        "fig_width": [
                            1474,
                            1475
                        ],
                        "fig_height": [
                            1474,
                            1475
                        ],
                        "get_size_inches": [
                            1474
                        ],
                        "self.get_figure": [
                            1474
                        ],
                        "fig_aspect": [
                            1475,
                            1501,
                            1483
                        ],
                        "self._adjustable": [
                            1477
                        ],
                        "self._twinned_axes": [
                            1478
                        ],
                        "box_aspect": [
                            1481,
                            1483,
                            1501,
                            1502
                        ],
                        "self.get_data_ratio": [
                            1481
                        ],
                        "pb": [
                            1482,
                            1483,
                            1484
                        ],
                        "position.frozen": [
                            1482
                        ],
                        "pb1": [
                            1483,
                            1484
                        ],
                        "pb.shrunk_to_aspect": [
                            1483
                        ],
                        "pb1.anchored": [
                            1484
                        ],
                        "self.get_anchor": [
                            1484
                        ],
                        "x_trf": [
                            1552,
                            1493,
                            1510,
                            1495
                        ],
                        "self.xaxis.get_transform": [
                            1493
                        ],
                        "self.xaxis": [
                            1493
                        ],
                        "y_trf": [
                            1496,
                            1547,
                            1494,
                            1511
                        ],
                        "self.yaxis.get_transform": [
                            1494
                        ],
                        "self.yaxis": [
                            1494
                        ],
                        "xmin": [
                            1497,
                            1549,
                            1495
                        ],
                        "xmax": [
                            1497,
                            1549,
                            1495
                        ],
                        "x_trf.transform": [
                            1495
                        ],
                        "self.get_xbound": [
                            1495
                        ],
                        "ymin": [
                            1496,
                            1544,
                            1498
                        ],
                        "ymax": [
                            1496,
                            1544,
                            1498
                        ],
                        "y_trf.transform": [
                            1496
                        ],
                        "self.get_ybound": [
                            1496
                        ],
                        "xsize": [
                            1504,
                            1497,
                            1515,
                            1517
                        ],
                        "ysize": [
                            1504,
                            1498,
                            1516,
                            1518
                        ],
                        "l": [
                            1500
                        ],
                        "b": [
                            1500
                        ],
                        "w": [
                            1500,
                            1501
                        ],
                        "h": [
                            1500,
                            1501
                        ],
                        "position.bounds": [
                            1500
                        ],
                        "data_ratio": [
                            1504,
                            1518,
                            1517,
                            1502
                        ],
                        "y_expander": [
                            1504,
                            1537,
                            1506,
                            1538,
                            1540
                        ],
                        "dL": [
                            1509,
                            1510,
                            1511
                        ],
                        "self.dataLim": [
                            1509
                        ],
                        "x0": [
                            1512,
                            1552,
                            1510,
                            1550
                        ],
                        "x1": [
                            1512,
                            1552,
                            1510,
                            1551
                        ],
                        "transform": [
                            1552,
                            1547,
                            1510,
                            1511
                        ],
                        "x_trf.inverted": [
                            1552,
                            1510
                        ],
                        "dL.intervalx": [
                            1510
                        ],
                        "y0": [
                            1513,
                            1547,
                            1545,
                            1511
                        ],
                        "y1": [
                            1513,
                            1546,
                            1547,
                            1511
                        ],
                        "y_trf.inverted": [
                            1547,
                            1511
                        ],
                        "dL.intervaly": [
                            1511
                        ],
                        "xr": [
                            1512,
                            1515,
                            1519
                        ],
                        "yr": [
                            1520,
                            1513,
                            1516
                        ],
                        "xmarg": [
                            1536,
                            1515
                        ],
                        "ymarg": [
                            1536,
                            1516
                        ],
                        "Ysize": [
                            1520,
                            1545,
                            1546,
                            1517
                        ],
                        "Xsize": [
                            1551,
                            1550,
                            1518,
                            1519
                        ],
                        "Xmarg": [
                            1538,
                            1519
                        ],
                        "Ymarg": [
                            1520,
                            1537
                        ],
                        "xm": [
                            1536,
                            1522
                        ],
                        "ym": [
                            1536,
                            1523
                        ],
                        "shared_x": [
                            1528,
                            1541,
                            1525
                        ],
                        "self._shared_x_axes": [
                            1525
                        ],
                        "shared_y": [
                            1528,
                            1533,
                            1526
                        ],
                        "self._shared_y_axes": [
                            1526
                        ],
                        "adjust_y": [
                            1541,
                            1534,
                            1543
                        ],
                        "adjy": [
                            1537,
                            1540,
                            1541
                        ],
                        "yc": [
                            1544,
                            1545,
                            1546
                        ],
                        "self.set_ybound": [
                            1547
                        ],
                        "xc": [
                            1549,
                            1550,
                            1551
                        ],
                        "self.set_xbound": [
                            1552
                        ]
                    },
                    "diff_line_number": 1510,
                    "class_data": {
                        "signature": "class _AxesBase(martist.Artist)",
                        "docstring": null,
                        "constructor_docstring": "Build an axes in a figure.\n\nParameters\n----------\nfig : `~matplotlib.figure.Figure`\n    The axes is build in the `.Figure` *fig*.\n\nrect : [left, bottom, width, height]\n    The axes is build in the rectangle *rect*. *rect* is in\n    `.Figure` coordinates.\n\nsharex, sharey : `~.axes.Axes`, optional\n    The x or y `~.matplotlib.axis` is shared with the x or\n    y axis in the input `~.axes.Axes`.\n\nframeon : bool, optional\n    True means that the axes frame is visible.\n\n**kwargs\n    Other optional keyword arguments:\n\n    %(Axes)s\n\nReturns\n-------\naxes : `~.axes.Axes`\n    The new `~.axes.Axes` object.",
                        "functions": [
                            "def __str__(self):\n    return '{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})'.format(type(self).__name__, self._position.bounds)",
                            "def __init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, **kwargs):\n    \"\"\"\n    Build an axes in a figure.\n\n    Parameters\n    ----------\n    fig : `~matplotlib.figure.Figure`\n        The axes is build in the `.Figure` *fig*.\n\n    rect : [left, bottom, width, height]\n        The axes is build in the rectangle *rect*. *rect* is in\n        `.Figure` coordinates.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        The x or y `~.matplotlib.axis` is shared with the x or\n        y axis in the input `~.axes.Axes`.\n\n    frameon : bool, optional\n        True means that the axes frame is visible.\n\n    **kwargs\n        Other optional keyword arguments:\n\n        %(Axes)s\n\n    Returns\n    -------\n    axes : `~.axes.Axes`\n        The new `~.axes.Axes` object.\n    \"\"\"\n    martist.Artist.__init__(self)\n    if isinstance(rect, mtransforms.Bbox):\n        self._position = rect\n    else:\n        self._position = mtransforms.Bbox.from_bounds(*rect)\n    if self._position.width < 0 or self._position.height < 0:\n        raise ValueError('Width and height specified must be non-negative')\n    self._originalPosition = self._position.frozen()\n    self.axes = self\n    self._aspect = 'auto'\n    self._adjustable = 'box'\n    self._anchor = 'C'\n    self._stale_viewlim_x = False\n    self._stale_viewlim_y = False\n    self._sharex = sharex\n    self._sharey = sharey\n    if sharex is not None:\n        self._shared_x_axes.join(self, sharex)\n    if sharey is not None:\n        self._shared_y_axes.join(self, sharey)\n    self.set_label(label)\n    self.set_figure(fig)\n    self.set_axes_locator(kwargs.get('axes_locator', None))\n    self.spines = self._gen_axes_spines()\n    self._init_axis()\n    if facecolor is None:\n        facecolor = rcParams['axes.facecolor']\n    self._facecolor = facecolor\n    self._frameon = frameon\n    self.set_axisbelow(rcParams['axes.axisbelow'])\n    self._rasterization_zorder = None\n    self.cla()\n    self.fmt_xdata = None\n    self.fmt_ydata = None\n    self.set_navigate(True)\n    self.set_navigate_mode(None)\n    if xscale:\n        self.set_xscale(xscale)\n    if yscale:\n        self.set_yscale(yscale)\n    self.update(kwargs)\n    if self.xaxis is not None:\n        self._xcid = self.xaxis.callbacks.connect('units finalize', lambda : self._on_units_changed(scalex=True))\n    if self.yaxis is not None:\n        self._ycid = self.yaxis.callbacks.connect('units finalize', lambda : self._on_units_changed(scaley=True))\n    self.tick_params(top=rcParams['xtick.top'] and rcParams['xtick.minor.top'], bottom=rcParams['xtick.bottom'] and rcParams['xtick.minor.bottom'], labeltop=rcParams['xtick.labeltop'] and rcParams['xtick.minor.top'], labelbottom=rcParams['xtick.labelbottom'] and rcParams['xtick.minor.bottom'], left=rcParams['ytick.left'] and rcParams['ytick.minor.left'], right=rcParams['ytick.right'] and rcParams['ytick.minor.right'], labelleft=rcParams['ytick.labelleft'] and rcParams['ytick.minor.left'], labelright=rcParams['ytick.labelright'] and rcParams['ytick.minor.right'], which='minor')\n    self.tick_params(top=rcParams['xtick.top'] and rcParams['xtick.major.top'], bottom=rcParams['xtick.bottom'] and rcParams['xtick.major.bottom'], labeltop=rcParams['xtick.labeltop'] and rcParams['xtick.major.top'], labelbottom=rcParams['xtick.labelbottom'] and rcParams['xtick.major.bottom'], left=rcParams['ytick.left'] and rcParams['ytick.major.left'], right=rcParams['ytick.right'] and rcParams['ytick.major.right'], labelleft=rcParams['ytick.labelleft'] and rcParams['ytick.major.left'], labelright=rcParams['ytick.labelright'] and rcParams['ytick.major.right'], which='major')\n    self._layoutbox = None\n    self._poslayoutbox = None",
                            "def __getstate__(self):\n    state = super().__getstate__()\n    for key in ['_layoutbox', '_poslayoutbox']:\n        state[key] = None\n    for grouper_name in ['_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        grouper = getattr(self, grouper_name)\n        state[grouper_name] = grouper.get_siblings(self) if self in grouper else None\n    return state",
                            "def __setstate__(self, state):\n    for grouper_name in ['_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        siblings = state.pop(grouper_name)\n        if siblings:\n            getattr(self, grouper_name).join(*siblings)\n    self.__dict__ = state\n    self._stale = True",
                            "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the axes bounding box in display space; *args* and *kwargs*\n    are empty.\n\n    This bounding box does not include the spines, ticks, ticklables,\n    or other labels.  For a bounding box including these elements use\n    `~matplotlib.axes.Axes.get_tightbbox`.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_tightbbox\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.get_window_extent\n\n    \"\"\"\n    return self.bbox",
                            "def _init_axis(self):\n    \"\"\"move this out of __init__ because non-separable axes don't use it\"\"\"\n    self.xaxis = maxis.XAxis(self)\n    self.spines['bottom'].register_axis(self.xaxis)\n    self.spines['top'].register_axis(self.xaxis)\n    self.yaxis = maxis.YAxis(self)\n    self.spines['left'].register_axis(self.yaxis)\n    self.spines['right'].register_axis(self.yaxis)\n    self._update_transScale()",
                            "def set_figure(self, fig):\n    \"\"\"\n    Set the `.Figure` for this `.Axes`.\n\n    Parameters\n    ----------\n    fig : `.Figure`\n    \"\"\"\n    martist.Artist.set_figure(self, fig)\n    self.bbox = mtransforms.TransformedBbox(self._position, fig.transFigure)\n    self.dataLim = mtransforms.Bbox.null()\n    self._viewLim = mtransforms.Bbox.unit()\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self._set_lim_and_transforms()",
                            "def _unstale_viewLim(self):\n    scalex = any((ax._stale_viewlim_x for ax in self._shared_x_axes.get_siblings(self)))\n    scaley = any((ax._stale_viewlim_y for ax in self._shared_y_axes.get_siblings(self)))\n    if scalex or scaley:\n        for ax in self._shared_x_axes.get_siblings(self):\n            ax._stale_viewlim_x = False\n        for ax in self._shared_y_axes.get_siblings(self):\n            ax._stale_viewlim_y = False\n        self.autoscale_view(scalex=scalex, scaley=scaley)",
                            "@property\ndef viewLim(self):\n    self._unstale_viewLim()\n    return self._viewLim",
                            "def _request_autoscale_view(self, tight=None, scalex=True, scaley=True):\n    if tight is not None:\n        self._tight = tight\n    if scalex:\n        self._stale_viewlim_x = True\n    if scaley:\n        self._stale_viewlim_y = True",
                            "def _set_lim_and_transforms(self):\n    \"\"\"\n    Set the *_xaxis_transform*, *_yaxis_transform*, *transScale*,\n    *transData*, *transLimits* and *transAxes* transformations.\n\n    .. note::\n\n        This method is primarily used by rectilinear projections of the\n        `~matplotlib.axes.Axes` class, and is meant to be overridden by\n        new kinds of projection axes that need different transformations\n        and limits. (See `~matplotlib.projections.polar.PolarAxes` for an\n        example.)\n    \"\"\"\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self.transLimits = mtransforms.BboxTransformFrom(mtransforms.TransformedBbox(self._viewLim, self.transScale))\n    self.transData = self.transScale + (self.transLimits + self.transAxes)\n    self._xaxis_transform = mtransforms.blended_transform_factory(self.transData, self.transAxes)\n    self._yaxis_transform = mtransforms.blended_transform_factory(self.transAxes, self.transData)",
                            "def get_xaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing x-axis labels, ticks\n    and gridlines.  The x-direction is in data coordinates and the\n    y-direction is in axis coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._xaxis_transform\n    elif which == 'tick1':\n        return self.spines['bottom'].get_spine_transform()\n    elif which == 'tick2':\n        return self.spines['top'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                            "def get_xaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing x-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in data coordinates and the y-direction is in\n        axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams['xtick.alignment']\n    return (self.get_xaxis_transform(which='tick1') + mtransforms.ScaledTranslation(0, -1 * pad_points / 72, self.figure.dpi_scale_trans), 'top', labels_align)",
                            "def get_xaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondary x-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in data coordinates and the y-direction\n        is in axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams['xtick.alignment']\n    return (self.get_xaxis_transform(which='tick2') + mtransforms.ScaledTranslation(0, pad_points / 72, self.figure.dpi_scale_trans), 'bottom', labels_align)",
                            "def get_yaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing y-axis labels, ticks\n    and gridlines.  The x-direction is in axis coordinates and the\n    y-direction is in data coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._yaxis_transform\n    elif which == 'tick1':\n        return self.spines['left'].get_spine_transform()\n    elif which == 'tick2':\n        return self.spines['right'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                            "def get_yaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing y-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in axis coordinates and the y-direction is in\n        data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams['ytick.alignment']\n    return (self.get_yaxis_transform(which='tick1') + mtransforms.ScaledTranslation(-1 * pad_points / 72, 0, self.figure.dpi_scale_trans), labels_align, 'right')",
                            "def get_yaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondart y-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in axis coordinates and the y-direction\n        is in data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams['ytick.alignment']\n    return (self.get_yaxis_transform(which='tick2') + mtransforms.ScaledTranslation(pad_points / 72, 0, self.figure.dpi_scale_trans), labels_align, 'left')",
                            "def _update_transScale(self):\n    self.transScale.set(mtransforms.blended_transform_factory(self.xaxis.get_transform(), self.yaxis.get_transform()))\n    for line in getattr(self, 'lines', []):\n        try:\n            line._transformed_path.invalidate()\n        except AttributeError:\n            pass",
                            "def get_position(self, original=False):\n    \"\"\"\n    Get a copy of the axes rectangle as a `.Bbox`.\n\n    Parameters\n    ----------\n    original : bool\n        If ``True``, return the original position. Otherwise return the\n        active position. For an explanation of the positions see\n        `.set_position`.\n\n    Returns\n    -------\n    pos : `.Bbox`\n\n    \"\"\"\n    if original:\n        return self._originalPosition.frozen()\n    else:\n        locator = self.get_axes_locator()\n        if not locator:\n            self.apply_aspect()\n        return self._position.frozen()",
                            "def set_position(self, pos, which='both'):\n    \"\"\"\n    Set the axes position.\n\n    Axes have two position attributes. The 'original' position is the\n    position allocated for the Axes. The 'active' position is the\n    position the Axes is actually drawn at. These positions are usually\n    the same unless a fixed aspect is set to the Axes. See `.set_aspect`\n    for details.\n\n    Parameters\n    ----------\n    pos : [left, bottom, width, height] or `~matplotlib.transforms.Bbox`\n        The new position of the in `.Figure` coordinates.\n\n    which : {'both', 'active', 'original'}, optional\n        Determines which position variables to change.\n\n    \"\"\"\n    self._set_position(pos, which=which)\n    self._layoutbox = None\n    self._poslayoutbox = None",
                            "def _set_position(self, pos, which='both'):\n    \"\"\"\n    private version of set_position.  Call this internally\n    to get the same functionality of `get_position`, but not\n    to take the axis out of the constrained_layout\n    hierarchy.\n    \"\"\"\n    if not isinstance(pos, mtransforms.BboxBase):\n        pos = mtransforms.Bbox.from_bounds(*pos)\n    for ax in self._twinned_axes.get_siblings(self):\n        if which in ('both', 'active'):\n            ax._position.set(pos)\n        if which in ('both', 'original'):\n            ax._originalPosition.set(pos)\n    self.stale = True",
                            "def reset_position(self):\n    \"\"\"\n    Reset the active position to the original position.\n\n    This resets the a possible position change due to aspect constraints.\n    For an explanation of the positions see `.set_position`.\n    \"\"\"\n    for ax in self._twinned_axes.get_siblings(self):\n        pos = ax.get_position(original=True)\n        ax.set_position(pos, which='active')",
                            "def set_axes_locator(self, locator):\n    \"\"\"\n    Set the axes locator.\n\n    Parameters\n    ----------\n    locator : Callable[[Axes, Renderer], Bbox]\n    \"\"\"\n    self._axes_locator = locator\n    self.stale = True",
                            "def get_axes_locator(self):\n    \"\"\"\n    Return the axes_locator.\n    \"\"\"\n    return self._axes_locator",
                            "def _set_artist_props(self, a):\n    \"\"\"set the boilerplate props for artists added to axes\"\"\"\n    a.set_figure(self.figure)\n    if not a.is_transform_set():\n        a.set_transform(self.transData)\n    a.axes = self\n    if a.mouseover:\n        self._mouseover_set.add(a)",
                            "def _gen_axes_patch(self):\n    \"\"\"\n    Returns\n    -------\n    Patch\n        The patch used to draw the background of the axes.  It is also used\n        as the clipping path for any data elements on the axes.\n\n        In the standard axes, this is a rectangle, but in other projections\n        it may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)",
                            "def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'):\n    \"\"\"\n    Returns\n    -------\n    dict\n        Mapping of spine names to `Line2D` or `Patch` instances that are\n        used to draw axes spines.\n\n        In the standard axes, spines are single line segments, but in other\n        projections they may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return OrderedDict(((side, mspines.Spine.linear_spine(self, side)) for side in ['left', 'right', 'bottom', 'top']))",
                            "def cla(self):\n    \"\"\"Clear the current axes.\"\"\"\n    if hasattr(self, 'patch'):\n        patch_visible = self.patch.get_visible()\n    else:\n        patch_visible = True\n    xaxis_visible = self.xaxis.get_visible()\n    yaxis_visible = self.yaxis.get_visible()\n    self.xaxis.cla()\n    self.yaxis.cla()\n    for (name, spine) in self.spines.items():\n        spine.cla()\n    self.ignore_existing_data_limits = True\n    self.callbacks = cbook.CallbackRegistry()\n    if self._sharex is not None:\n        self.xaxis.major = self._sharex.xaxis.major\n        self.xaxis.minor = self._sharex.xaxis.minor\n        (x0, x1) = self._sharex.get_xlim()\n        self.set_xlim(x0, x1, emit=False, auto=self._sharex.get_autoscalex_on())\n        self.xaxis._scale = self._sharex.xaxis._scale\n    else:\n        self.xaxis._set_scale('linear')\n        try:\n            self.set_xlim(0, 1)\n        except TypeError:\n            pass\n    if self._sharey is not None:\n        self.yaxis.major = self._sharey.yaxis.major\n        self.yaxis.minor = self._sharey.yaxis.minor\n        (y0, y1) = self._sharey.get_ylim()\n        self.set_ylim(y0, y1, emit=False, auto=self._sharey.get_autoscaley_on())\n        self.yaxis._scale = self._sharey.yaxis._scale\n    else:\n        self.yaxis._set_scale('linear')\n        try:\n            self.set_ylim(0, 1)\n        except TypeError:\n            pass\n    if rcParams['xtick.minor.visible']:\n        self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if rcParams['ytick.minor.visible']:\n        self.yaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if self._sharex is None:\n        self._autoscaleXon = True\n    if self._sharey is None:\n        self._autoscaleYon = True\n    self._xmargin = rcParams['axes.xmargin']\n    self._ymargin = rcParams['axes.ymargin']\n    self._tight = None\n    self._use_sticky_edges = True\n    self._update_transScale()\n    self._get_lines = _process_plot_var_args(self)\n    self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n    self._gridOn = rcParams['axes.grid']\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.tables = []\n    self.artists = []\n    self.images = []\n    self._mouseover_set = _OrderedSet()\n    self.child_axes = []\n    self._current_image = None\n    self.legend_ = None\n    self.collections = []\n    self.containers = []\n    self.grid(False)\n    self.grid(self._gridOn, which=rcParams['axes.grid.which'], axis=rcParams['axes.grid.axis'])\n    props = font_manager.FontProperties(size=rcParams['axes.titlesize'], weight=rcParams['axes.titleweight'])\n    self.title = mtext.Text(x=0.5, y=1.0, text='', fontproperties=props, verticalalignment='baseline', horizontalalignment='center')\n    self._left_title = mtext.Text(x=0.0, y=1.0, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='left')\n    self._right_title = mtext.Text(x=1.0, y=1.0, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='right')\n    title_offset_points = rcParams['axes.titlepad']\n    self._set_title_offset_trans(title_offset_points)\n    self._autotitlepos = None\n    for _title in (self.title, self._left_title, self._right_title):\n        self._set_artist_props(_title)\n    self.patch = self._gen_axes_patch()\n    self.patch.set_figure(self.figure)\n    self.patch.set_facecolor(self._facecolor)\n    self.patch.set_edgecolor('None')\n    self.patch.set_linewidth(0)\n    self.patch.set_transform(self.transAxes)\n    self.set_axis_on()\n    self.xaxis.set_clip_path(self.patch)\n    self.yaxis.set_clip_path(self.patch)\n    self._shared_x_axes.clean()\n    self._shared_y_axes.clean()\n    if self._sharex:\n        self.xaxis.set_visible(xaxis_visible)\n        self.patch.set_visible(patch_visible)\n    if self._sharey:\n        self.yaxis.set_visible(yaxis_visible)\n        self.patch.set_visible(patch_visible)\n    self.stale = True",
                            "def clear(self):\n    \"\"\"Clear the axes.\"\"\"\n    self.cla()",
                            "def get_facecolor(self):\n    \"\"\"Get the facecolor of the Axes.\"\"\"\n    return self.patch.get_facecolor()",
                            "def set_facecolor(self, color):\n    \"\"\"\n    Set the facecolor of the Axes.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self._facecolor = color\n    self.stale = True\n    return self.patch.set_facecolor(color)",
                            "def _set_title_offset_trans(self, title_offset_points):\n    \"\"\"\n    Set the offset for the title either from rcParams['axes.titlepad']\n    or from set_title kwarg ``pad``.\n    \"\"\"\n    self.titleOffsetTrans = mtransforms.ScaledTranslation(0.0, title_offset_points / 72, self.figure.dpi_scale_trans)\n    for _title in (self.title, self._left_title, self._right_title):\n        _title.set_transform(self.transAxes + self.titleOffsetTrans)\n        _title.set_clip_box(None)",
                            "def set_prop_cycle(self, *args, **kwargs):\n    \"\"\"\n    Set the property cycle of the Axes.\n\n    The property cycle controls the style properties such as color,\n    marker and linestyle of future plot commands. The style properties\n    of data already added to the Axes are not modified.\n\n    Call signatures::\n\n      set_prop_cycle(cycler)\n      set_prop_cycle(label=values[, label2=values2[, ...]])\n      set_prop_cycle(label, values)\n\n    Form 1 sets given `~cycler.Cycler` object.\n\n    Form 2 creates a `~cycler.Cycler` which cycles over one or more\n    properties simultaneously and set it as the property cycle of the\n    axes. If multiple properties are given, their value lists must have\n    the same length. This is just a shortcut for explicitly creating a\n    cycler and passing it to the function, i.e. it's short for\n    ``set_prop_cycle(cycler(label=values label2=values2, ...))``.\n\n    Form 3 creates a `~cycler.Cycler` for a single property and set it\n    as the property cycle of the axes. This form exists for compatibility\n    with the original `cycler.cycler` interface. Its use is discouraged\n    in favor of the kwarg form, i.e. ``set_prop_cycle(label=values)``.\n\n    Parameters\n    ----------\n    cycler : Cycler\n        Set the given Cycler. *None* resets to the cycle defined by the\n        current style.\n\n    label : str\n        The property key. Must be a valid `.Artist` property.\n        For example, 'color' or 'linestyle'. Aliases are allowed,\n        such as 'c' for 'color' and 'lw' for 'linewidth'.\n\n    values : iterable\n        Finite-length iterable of the property values. These values\n        are validated and will raise a ValueError if invalid.\n\n    Examples\n    --------\n    Setting the property cycle for a single property:\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n\n    Setting the property cycle for simultaneously cycling over multiple\n    properties (e.g. red circle, green plus, blue cross):\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n    ...                   marker=['o', '+', 'x'])\n\n    See Also\n    --------\n    matplotlib.rcsetup.cycler\n        Convenience function for creating validated cyclers for properties.\n    cycler.cycler\n        The original function for creating unvalidated cyclers.\n\n    \"\"\"\n    if args and kwargs:\n        raise TypeError('Cannot supply both positional and keyword arguments to this method.')\n    if len(args) == 1 and args[0] is None:\n        prop_cycle = None\n    else:\n        prop_cycle = cycler(*args, **kwargs)\n    self._get_lines.set_prop_cycle(prop_cycle)\n    self._get_patches_for_fill.set_prop_cycle(prop_cycle)",
                            "def get_aspect(self):\n    return self._aspect",
                            "def set_aspect(self, aspect, adjustable=None, anchor=None, share=False):\n    \"\"\"\n    Set the aspect of the axis scaling, i.e. the ratio of y-unit to x-unit.\n\n    Parameters\n    ----------\n    aspect : {'auto', 'equal'} or num\n        Possible values:\n\n        ========   ================================================\n        value      description\n        ========   ================================================\n        'auto'     automatic; fill the position rectangle with data\n        'equal'    same scaling from data to plot units for x and y\n         num       a circle will be stretched such that the height\n                   is num times the width. aspect=1 is the same as\n                   aspect='equal'.\n        ========   ================================================\n\n    adjustable : None or {'box', 'datalim'}, optional\n        If not ``None``, this defines which parameter will be adjusted to\n        meet the required aspect. See `.set_adjustable` for further\n        details.\n\n    anchor : None or str or 2-tuple of float, optional\n        If not ``None``, this defines where the Axes will be drawn if there\n        is extra space due to aspect constraints. The most common way to\n        to specify the anchor are abbreviations of cardinal directions:\n\n        =====   =====================\n        value   description\n        =====   =====================\n        'C'     centered\n        'SW'    lower left corner\n        'S'     middle of bottom edge\n        'SE'    lower right corner\n        etc.\n        =====   =====================\n\n        See `.set_anchor` for further details.\n\n    share : bool, optional\n        If ``True``, apply the settings to all shared Axes.\n        Default is ``False``.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if not (cbook._str_equal(aspect, 'equal') or cbook._str_equal(aspect, 'auto')):\n        aspect = float(aspect)\n    if not cbook._str_equal(aspect, 'auto') and self.name == '3d':\n        raise NotImplementedError('It is not currently possible to manually set the aspect on 3D axes')\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._aspect = aspect\n    if adjustable is None:\n        adjustable = self._adjustable\n    self.set_adjustable(adjustable, share=share)\n    if anchor is not None:\n        self.set_anchor(anchor, share=share)\n    self.stale = True",
                            "def get_adjustable(self):\n    return self._adjustable",
                            "def set_adjustable(self, adjustable, share=False):\n    \"\"\"\n    Define which parameter the Axes will change to achieve a given aspect.\n\n    Parameters\n    ----------\n    adjustable : {'box', 'datalim'}\n        If 'box', change the physical dimensions of the Axes.\n        If 'datalim', change the ``x`` or ``y`` data limits.\n\n    share : bool, optional\n        If ``True``, apply the settings to all shared Axes.\n        Default is ``False``.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n\n    Notes\n    -----\n    Shared Axes (of which twinned Axes are a special case)\n    impose restrictions on how aspect ratios can be imposed.\n    For twinned Axes, use 'datalim'.  For Axes that share both\n    x and y, use 'box'.  Otherwise, either 'datalim' or 'box'\n    may be used.  These limitations are partly a requirement\n    to avoid over-specification, and partly a result of the\n    particular implementation we are currently using, in\n    which the adjustments for aspect ratios are done sequentially\n    and independently on each Axes as it is drawn.\n    \"\"\"\n    cbook._check_in_list(['box', 'datalim'], adjustable=adjustable)\n    if share:\n        axs = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axs = [self]\n    if adjustable == 'datalim' and any((getattr(ax.get_data_ratio, '__func__', None) != _AxesBase.get_data_ratio for ax in axs)):\n        raise ValueError(\"Cannot set axes adjustable to 'datalim' for Axes which override 'get_data_ratio'\")\n    for ax in axs:\n        ax._adjustable = adjustable\n    self.stale = True",
                            "def get_anchor(self):\n    \"\"\"\n    Get the anchor location.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_anchor\n        for a description of the anchor.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._anchor",
                            "def set_anchor(self, anchor, share=False):\n    \"\"\"\n    Define the anchor location.\n\n    The actual drawing area (active position) of the Axes may be smaller\n    than the Bbox (original position) when a fixed aspect is required. The\n    anchor defines where the drawing area will be located within the\n    available space.\n\n    Parameters\n    ----------\n    anchor : 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...}\n        The anchor position may be either:\n\n        - a sequence (*cx*, *cy*). *cx* and *cy* may range from 0\n          to 1, where 0 is left or bottom and 1 is right or top.\n\n        - a string using cardinal directions as abbreviation:\n\n          - 'C' for centered\n          - 'S' (south) for bottom-center\n          - 'SW' (south west) for bottom-left\n          - etc.\n\n          Here is an overview of the possible positions:\n\n          +------+------+------+\n          | 'NW' | 'N'  | 'NE' |\n          +------+------+------+\n          | 'W'  | 'C'  | 'E'  |\n          +------+------+------+\n          | 'SW' | 'S'  | 'SE' |\n          +------+------+------+\n\n    share : bool, optional\n        If ``True``, apply the settings to all shared Axes.\n        Default is ``False``.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    if not (anchor in mtransforms.Bbox.coefs or len(anchor) == 2):\n        raise ValueError('argument must be among %s' % ', '.join(mtransforms.Bbox.coefs))\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._anchor = anchor\n    self.stale = True",
                            "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the scaled data.\n\n    Notes\n    -----\n    This method is intended to be overridden by new projection types.\n    \"\"\"\n    (trf_xmin, trf_xmax) = map(self.xaxis.get_transform().transform, self.get_xbound())\n    (trf_ymin, trf_ymax) = map(self.yaxis.get_transform().transform, self.get_ybound())\n    xsize = max(abs(trf_xmax - trf_xmin), 1e-30)\n    ysize = max(abs(trf_ymax - trf_ymin), 1e-30)\n    return ysize / xsize",
                            "@cbook.deprecated('3.2')\ndef get_data_ratio_log(self):\n    \"\"\"\n    Return the aspect ratio of the raw data in log scale.\n\n    Notes\n    -----\n    Will be used when both axis are in log scale.\n    \"\"\"\n    (xmin, xmax) = self.get_xbound()\n    (ymin, ymax) = self.get_ybound()\n    xsize = max(abs(math.log10(xmax) - math.log10(xmin)), 1e-30)\n    ysize = max(abs(math.log10(ymax) - math.log10(ymin)), 1e-30)\n    return ysize / xsize",
                            "def apply_aspect(self, position=None):\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n\n    Depending on `.get_adjustable` this will modify either the Axes box\n    (position) or the view limits. In the former case, `.get_anchor`\n    will affect the position.\n\n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n    aspect = self.get_aspect()\n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n    if aspect == 'equal':\n        aspect = 1\n    (fig_width, fig_height) = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n    self._set_position(position, which='active')\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    (xmin, xmax) = map(x_trf.transform, self.get_xbound())\n    (ymin, ymax) = map(y_trf.transform, self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n    (l, b, w, h) = position.bounds\n    box_aspect = fig_aspect * (h / w)\n    data_ratio = box_aspect / aspect\n    y_expander = data_ratio * xsize / ysize - 1\n    if abs(y_expander) < 0.005:\n        return\n    dL = self.dataLim\n    (x0, x1) = map(x_trf.inverted().transform, dL.intervalx)\n    (y0, y1) = map(y_trf.inverted().transform, dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    xm = 0\n    ym = 0\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both axes are shared\")\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = Ymarg > 0 and y_expander < 0 or (Xmarg < 0 and y_expander > 0)\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(*map(y_trf.inverted().transform, (y0, y1)))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(*map(x_trf.inverted().transform, (x0, x1)))",
                            "def axis(self, *args, emit=True, **kwargs):\n    \"\"\"\n    Convenience method to get or set some axis properties.\n\n    Call signatures::\n\n      xmin, xmax, ymin, ymax = axis()\n      xmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\n      xmin, xmax, ymin, ymax = axis(option)\n      xmin, xmax, ymin, ymax = axis(**kwargs)\n\n    Parameters\n    ----------\n    xmin, xmax, ymin, ymax : float, optional\n        The axis limits to be set.  This can also be achieved using ::\n\n            ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n    option : bool or str\n        If a bool, turns axis lines and labels on or off. If a string,\n        possible values are:\n\n        ======== ==========================================================\n        Value    Description\n        ======== ==========================================================\n        'on'     Turn on axis lines and labels. Same as ``True``.\n        'off'    Turn off axis lines and labels. Same as ``False``.\n        'equal'  Set equal scaling (i.e., make circles circular) by\n                 changing axis limits.\n        'scaled' Set equal scaling (i.e., make circles circular) by\n                 changing dimensions of the plot box, then disable further\n                 autoscaling.\n        'tight'  Set limits just large enough to show all data, then\n                 disable further autoscaling.\n        'auto'   Automatic scaling (fill plot box with data).\n        'normal' Same as 'auto'; deprecated.\n        'image'  'scaled' with axis limits equal to data limits.\n        'square' Square plot; similar to 'scaled', but initially forcing\n                 ``xmax-xmin == ymax-ymin``.\n        ======== ==========================================================\n\n    emit : bool, optional, default *True*\n        Whether observers are notified of the axis limit change.\n        This option is passed on to `~.Axes.set_xlim` and\n        `~.Axes.set_ylim`.\n\n    Returns\n    -------\n    xmin, xmax, ymin, ymax : float\n        The axis limits.\n\n    See also\n    --------\n    matplotlib.axes.Axes.set_xlim\n    matplotlib.axes.Axes.set_ylim\n    \"\"\"\n    if len(args) == 1 and isinstance(args[0], (str, bool)):\n        s = args[0]\n        if s is True:\n            s = 'on'\n        if s is False:\n            s = 'off'\n        s = s.lower()\n        if s == 'on':\n            self.set_axis_on()\n        elif s == 'off':\n            self.set_axis_off()\n        elif s in ('equal', 'tight', 'scaled', 'normal', 'auto', 'image', 'square'):\n            if s == 'normal':\n                cbook.warn_deprecated('3.1', message=\"Passing 'normal' to axis() is deprecated since %(since)s; use 'auto' instead.\")\n            self.set_autoscale_on(True)\n            self.set_aspect('auto')\n            self.autoscale_view(tight=False)\n            if s == 'equal':\n                self.set_aspect('equal', adjustable='datalim')\n            elif s == 'scaled':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n            elif s == 'tight':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n            elif s == 'image':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n                self.set_aspect('equal', adjustable='box', anchor='C')\n            elif s == 'square':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n                xlim = self.get_xlim()\n                ylim = self.get_ylim()\n                edge_size = max(np.diff(xlim), np.diff(ylim))[0]\n                self.set_xlim([xlim[0], xlim[0] + edge_size], emit=emit, auto=False)\n                self.set_ylim([ylim[0], ylim[0] + edge_size], emit=emit, auto=False)\n        else:\n            raise ValueError('Unrecognized string %s to axis; try on or off' % s)\n    else:\n        if len(args) >= 1:\n            if len(args) != 1:\n                cbook.warn_deprecated('3.2', message='Passing more than one positional argument to axis() is deprecated and will raise a TypeError %(removal)s.')\n            limits = args[0]\n            try:\n                (xmin, xmax, ymin, ymax) = limits\n            except (TypeError, ValueError):\n                raise TypeError('the first argument to axis() must be an interable of the form [xmin, xmax, ymin, ymax]')\n        else:\n            xmin = kwargs.pop('xmin', None)\n            xmax = kwargs.pop('xmax', None)\n            ymin = kwargs.pop('ymin', None)\n            ymax = kwargs.pop('ymax', None)\n        xauto = None if xmin is None and xmax is None else False\n        yauto = None if ymin is None and ymax is None else False\n        self.set_xlim(xmin, xmax, emit=emit, auto=xauto)\n        self.set_ylim(ymin, ymax, emit=emit, auto=yauto)\n    if kwargs:\n        cbook.warn_deprecated('3.1', message='Passing unsupported keyword arguments to axis() will raise a TypeError %(removal)s.')\n    return (*self.get_xlim(), *self.get_ylim())",
                            "def get_legend(self):\n    \"\"\"Return the `Legend` instance, or None if no legend is defined.\"\"\"\n    return self.legend_",
                            "def get_images(self):\n    \"\"\"return a list of Axes images contained by the Axes\"\"\"\n    return cbook.silent_list('AxesImage', self.images)",
                            "def get_lines(self):\n    \"\"\"Return a list of lines contained by the Axes\"\"\"\n    return cbook.silent_list('Line2D', self.lines)",
                            "def get_xaxis(self):\n    \"\"\"Return the XAxis instance.\"\"\"\n    return self.xaxis",
                            "def get_xgridlines(self):\n    \"\"\"Get the x grid lines as a list of `Line2D` instances.\"\"\"\n    return self.xaxis.get_gridlines()",
                            "def get_xticklines(self):\n    \"\"\"Get the x tick lines as a list of `Line2D` instances.\"\"\"\n    return self.xaxis.get_ticklines()",
                            "def get_yaxis(self):\n    \"\"\"Return the YAxis instance.\"\"\"\n    return self.yaxis",
                            "def get_ygridlines(self):\n    \"\"\"Get the y grid lines as a list of `Line2D` instances.\"\"\"\n    return self.yaxis.get_gridlines()",
                            "def get_yticklines(self):\n    \"\"\"Get the y tick lines as a list of `Line2D` instances.\"\"\"\n    return self.yaxis.get_ticklines()",
                            "def _sci(self, im):\n    \"\"\"Set the current image.\n\n    This image will be the target of colormap functions like\n    `~.pyplot.viridis`, and other functions such as `~.pyplot.clim`.  The\n    current image is an attribute of the current axes.\n    \"\"\"\n    if isinstance(im, mpl.contour.ContourSet):\n        if im.collections[0] not in self.collections:\n            raise ValueError('ContourSet must be in current Axes')\n    elif im not in self.images and im not in self.collections:\n        raise ValueError('Argument must be an image, collection, or ContourSet in this Axes')\n    self._current_image = im",
                            "def _gci(self):\n    \"\"\"\n    Helper for :func:`~matplotlib.pyplot.gci`;\n    do not use elsewhere.\n    \"\"\"\n    return self._current_image",
                            "def has_data(self):\n    \"\"\"\n    Return *True* if any artists have been added to axes.\n\n    This should not be used to determine whether the *dataLim*\n    need to be updated, and may not actually be useful for\n    anything.\n    \"\"\"\n    return len(self.collections) + len(self.images) + len(self.lines) + len(self.patches) > 0",
                            "def add_artist(self, a):\n    \"\"\"\n    Add an `~.Artist` to the axes, and return the artist.\n\n    Use `add_artist` only for artists for which there is no dedicated\n    \"add\" method; and if necessary, use a method such as `update_datalim`\n    to manually update the dataLim if the artist is to be included in\n    autoscaling.\n\n    If no ``transform`` has been specified when creating the artist (e.g.\n    ``artist.get_transform() == None``) then the transform is set to\n    ``ax.transData``.\n    \"\"\"\n    a.axes = self\n    self.artists.append(a)\n    a._remove_method = self.artists.remove\n    self._set_artist_props(a)\n    a.set_clip_path(self.patch)\n    self.stale = True\n    return a",
                            "def add_child_axes(self, ax):\n    \"\"\"\n    Add an `~.AxesBase` to the axes' children; return the child axes.\n\n    This is the lowlevel version.  See `.axes.Axes.inset_axes`.\n    \"\"\"\n    ax._axes = self\n    ax.stale_callback = martist._stale_axes_callback\n    self.child_axes.append(ax)\n    ax._remove_method = self.child_axes.remove\n    self.stale = True\n    return ax",
                            "def add_collection(self, collection, autolim=True):\n    \"\"\"\n    Add a `~.Collection` to the axes' collections; return the collection.\n    \"\"\"\n    label = collection.get_label()\n    if not label:\n        collection.set_label('_collection%d' % len(self.collections))\n    self.collections.append(collection)\n    collection._remove_method = self.collections.remove\n    self._set_artist_props(collection)\n    if collection.get_clip_path() is None:\n        collection.set_clip_path(self.patch)\n    if autolim:\n        self._unstale_viewLim()\n        self.update_datalim(collection.get_datalim(self.transData))\n    self.stale = True\n    return collection",
                            "def add_image(self, image):\n    \"\"\"\n    Add an `~.AxesImage` to the axes' images; return the image.\n    \"\"\"\n    self._set_artist_props(image)\n    if not image.get_label():\n        image.set_label('_image%d' % len(self.images))\n    self.images.append(image)\n    image._remove_method = self.images.remove\n    self.stale = True\n    return image",
                            "def _update_image_limits(self, image):\n    (xmin, xmax, ymin, ymax) = image.get_extent()\n    self.axes.update_datalim(((xmin, ymin), (xmax, ymax)))",
                            "def add_line(self, line):\n    \"\"\"\n    Add a `.Line2D` to the axes' lines; return the line.\n    \"\"\"\n    self._set_artist_props(line)\n    if line.get_clip_path() is None:\n        line.set_clip_path(self.patch)\n    self._update_line_limits(line)\n    if not line.get_label():\n        line.set_label('_line%d' % len(self.lines))\n    self.lines.append(line)\n    line._remove_method = self.lines.remove\n    self.stale = True\n    return line",
                            "def _add_text(self, txt):\n    \"\"\"\n    Add a `~.Text` to the axes' texts; return the text.\n    \"\"\"\n    self._set_artist_props(txt)\n    self.texts.append(txt)\n    txt._remove_method = self.texts.remove\n    self.stale = True\n    return txt",
                            "def _update_line_limits(self, line):\n    \"\"\"\n    Figures out the data limit of the given line, updating self.dataLim.\n    \"\"\"\n    path = line.get_path()\n    if path.vertices.size == 0:\n        return\n    line_trans = line.get_transform()\n    if line_trans == self.transData:\n        data_path = path\n    elif any(line_trans.contains_branch_seperately(self.transData)):\n        trans_to_data = line_trans - self.transData\n        if self.transData.is_affine:\n            line_trans_path = line._get_transformed_path()\n            (na_path, _) = line_trans_path.get_transformed_path_and_affine()\n            data_path = trans_to_data.transform_path_affine(na_path)\n        else:\n            data_path = trans_to_data.transform_path(path)\n    else:\n        data_path = path\n    if data_path.vertices.size > 0:\n        (updatex, updatey) = line_trans.contains_branch_seperately(self.transData)\n        self.dataLim.update_from_path(data_path, self.ignore_existing_data_limits, updatex=updatex, updatey=updatey)\n        self.ignore_existing_data_limits = False",
                            "def add_patch(self, p):\n    \"\"\"\n    Add a `~.Patch` to the axes' patches; return the patch.\n    \"\"\"\n    self._set_artist_props(p)\n    if p.get_clip_path() is None:\n        p.set_clip_path(self.patch)\n    self._update_patch_limits(p)\n    self.patches.append(p)\n    p._remove_method = self.patches.remove\n    return p",
                            "def _update_patch_limits(self, patch):\n    \"\"\"update the data limits for patch *p*\"\"\"\n    if isinstance(patch, mpatches.Rectangle) and (not patch.get_width() and (not patch.get_height())):\n        return\n    vertices = patch.get_path().vertices\n    if vertices.size > 0:\n        xys = patch.get_patch_transform().transform(vertices)\n        if patch.get_data_transform() != self.transData:\n            patch_to_data = patch.get_data_transform() - self.transData\n            xys = patch_to_data.transform(xys)\n        (updatex, updatey) = patch.get_transform().contains_branch_seperately(self.transData)\n        self.update_datalim(xys, updatex=updatex, updatey=updatey)",
                            "def add_table(self, tab):\n    \"\"\"\n    Add a `~.Table` to the axes' tables; return the table.\n    \"\"\"\n    self._set_artist_props(tab)\n    self.tables.append(tab)\n    tab.set_clip_path(self.patch)\n    tab._remove_method = self.tables.remove\n    return tab",
                            "def add_container(self, container):\n    \"\"\"\n    Add a `~.Container` to the axes' containers; return the container.\n    \"\"\"\n    label = container.get_label()\n    if not label:\n        container.set_label('_container%d' % len(self.containers))\n    self.containers.append(container)\n    container._remove_method = self.containers.remove\n    return container",
                            "def _on_units_changed(self, scalex=False, scaley=False):\n    \"\"\"\n    Callback for processing changes to axis units.\n\n    Currently requests updates of data limits and view limits.\n    \"\"\"\n    self.relim()\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)",
                            "def relim(self, visible_only=False):\n    \"\"\"\n    Recompute the data limits based on current artists.\n\n    At present, `~.Collection` instances are not supported.\n\n    Parameters\n    ----------\n    visible_only : bool\n        Whether to exclude invisible artists.  Defaults to False.\n    \"\"\"\n    self.dataLim.ignore(True)\n    self.dataLim.set_points(mtransforms.Bbox.null().get_points())\n    self.ignore_existing_data_limits = True\n    for line in self.lines:\n        if not visible_only or line.get_visible():\n            self._update_line_limits(line)\n    for p in self.patches:\n        if not visible_only or p.get_visible():\n            self._update_patch_limits(p)\n    for image in self.images:\n        if not visible_only or image.get_visible():\n            self._update_image_limits(image)",
                            "def update_datalim(self, xys, updatex=True, updatey=True):\n    \"\"\"\n    Extend the `~.Axes.dataLim` BBox to include the given points.\n\n    If no data is set currently, the BBox will ignore its limits and set\n    the bound to be the bounds of the xydata (*xys*). Otherwise, it will\n    compute the bounds of the union of its current data and the data in\n    *xys*.\n\n    Parameters\n    ----------\n    xys : 2D array-like\n        The points to include in the data limits BBox. This can be either\n        a list of (x, y) tuples or a Nx2 array.\n\n    updatex, updatey : bool, optional, default *True*\n        Whether to update the x/y limits.\n    \"\"\"\n    xys = np.asarray(xys)\n    if not len(xys):\n        return\n    self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits, updatex=updatex, updatey=updatey)\n    self.ignore_existing_data_limits = False",
                            "def update_datalim_bounds(self, bounds):\n    \"\"\"\n    Extend the `~.Axes.datalim` BBox to include the given\n    `~matplotlib.transforms.Bbox`.\n\n    Parameters\n    ----------\n    bounds : `~matplotlib.transforms.Bbox`\n    \"\"\"\n    self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds]))",
                            "def _process_unit_info(self, xdata=None, ydata=None, kwargs=None):\n    \"\"\"Look for unit *kwargs* and update the axis instances as necessary\"\"\"\n\n    def _process_single_axis(data, axis, unit_name, kwargs):\n        if axis is None:\n            return kwargs\n        if data is not None:\n            if not axis.have_units():\n                axis.update_units(data)\n        if kwargs is not None:\n            units = kwargs.pop(unit_name, axis.units)\n            if self.name == 'polar':\n                polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n                units = kwargs.pop(polar_units[unit_name], units)\n            if units != axis.units:\n                axis.set_units(units)\n                if data is not None:\n                    axis.update_units(data)\n        return kwargs\n    kwargs = _process_single_axis(xdata, self.xaxis, 'xunits', kwargs)\n    kwargs = _process_single_axis(ydata, self.yaxis, 'yunits', kwargs)\n    return kwargs",
                            "def in_axes(self, mouseevent):\n    \"\"\"\n    Return *True* if the given *mouseevent* (in display coords)\n    is in the Axes\n    \"\"\"\n    return self.patch.contains(mouseevent)[0]",
                            "def get_autoscale_on(self):\n    \"\"\"\n    Get whether autoscaling is applied for both axes on plot commands\n    \"\"\"\n    return self._autoscaleXon and self._autoscaleYon",
                            "def get_autoscalex_on(self):\n    \"\"\"\n    Get whether autoscaling for the x-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleXon",
                            "def get_autoscaley_on(self):\n    \"\"\"\n    Get whether autoscaling for the y-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleYon",
                            "def set_autoscale_on(self, b):\n    \"\"\"\n    Set whether autoscaling is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b\n    self._autoscaleYon = b",
                            "def set_autoscalex_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the x-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b",
                            "def set_autoscaley_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the y-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleYon = b",
                            "@property\ndef use_sticky_edges(self):\n    \"\"\"\n    When autoscaling, whether to obey all `Artist.sticky_edges`.\n\n    Default is ``True``.\n\n    Setting this to ``False`` ensures that the specified margins\n    will be applied, even if the plot includes an image, for\n    example, which would otherwise force a view limit to coincide\n    with its data limit.\n\n    The changing this property does not change the plot until\n    `autoscale` or `autoscale_view` is called.\n    \"\"\"\n    return self._use_sticky_edges",
                            "@use_sticky_edges.setter\ndef use_sticky_edges(self, b):\n    self._use_sticky_edges = bool(b)",
                            "def set_xmargin(self, m):\n    \"\"\"\n    Set padding of X data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError('margin must be greater than -0.5')\n    self._xmargin = m\n    self.stale = True",
                            "def set_ymargin(self, m):\n    \"\"\"\n    Set padding of Y data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError('margin must be greater than -0.5')\n    self._ymargin = m\n    self.stale = True",
                            "def margins(self, *margins, x=None, y=None, tight=True):\n    \"\"\"\n    Set or retrieve autoscaling margins.\n\n    The padding added to each limit of the axes is the *margin*\n    times the data interval. All input parameters must be floats\n    within the range [0, 1]. Passing both positional and keyword\n    arguments is invalid and will raise a TypeError. If no\n    arguments (positional or otherwise) are provided, the current\n    margins will remain in place and simply be returned.\n\n    Specifying any margin changes only the autoscaling; for example,\n    if *xmargin* is not None, then *xmargin* times the X data\n    interval will be added to each end of that interval before\n    it is used in autoscaling.\n\n    Parameters\n    ----------\n    *margins : float, optional\n        If a single positional argument is provided, it specifies\n        both margins of the x-axis and y-axis limits. If two\n        positional arguments are provided, they will be interpreted\n        as *xmargin*, *ymargin*. If setting the margin on a single\n        axis is desired, use the keyword arguments described below.\n\n    x, y : float, optional\n        Specific margin values for the x-axis and y-axis,\n        respectively. These cannot be used with positional\n        arguments, but can be used individually to alter on e.g.,\n        only the y-axis.\n\n    tight : bool or None, default is True\n        The *tight* parameter is passed to :meth:`autoscale_view`,\n        which is executed after a margin is changed; the default\n        here is *True*, on the assumption that when margins are\n        specified, no additional padding to match tick marks is\n        usually desired.  Set *tight* to *None* will preserve\n        the previous setting.\n\n    Returns\n    -------\n    xmargin, ymargin : float\n\n    Notes\n    -----\n    If a previously used Axes method such as :meth:`pcolor` has set\n    :attr:`use_sticky_edges` to `True`, only the limits not set by\n    the \"sticky artists\" will be modified. To force all of the\n    margins to be set, set :attr:`use_sticky_edges` to `False`\n    before calling :meth:`margins`.\n    \"\"\"\n    if margins and x is not None and (y is not None):\n        raise TypeError('Cannot pass both positional and keyword arguments for x and/or y.')\n    elif len(margins) == 1:\n        x = y = margins[0]\n    elif len(margins) == 2:\n        (x, y) = margins\n    elif margins:\n        raise TypeError('Must pass a single positional argument for all margins, or one for each margin (x, y).')\n    if x is None and y is None:\n        if tight is not True:\n            cbook._warn_external(f'ignoring tight={tight!r} in get mode')\n        return (self._xmargin, self._ymargin)\n    if x is not None:\n        self.set_xmargin(x)\n    if y is not None:\n        self.set_ymargin(y)\n    self._request_autoscale_view(tight=tight, scalex=x is not None, scaley=y is not None)",
                            "def set_rasterization_zorder(self, z):\n    \"\"\"\n    Parameters\n    ----------\n    z : float or None\n        zorder below which artists are rasterized.  ``None`` means that\n        artists do not get rasterized based on zorder.\n    \"\"\"\n    self._rasterization_zorder = z\n    self.stale = True",
                            "def get_rasterization_zorder(self):\n    \"\"\"Return the zorder value below which artists will be rasterized.\"\"\"\n    return self._rasterization_zorder",
                            "def autoscale(self, enable=True, axis='both', tight=None):\n    \"\"\"\n    Autoscale the axis view to the data (toggle).\n\n    Convenience method for simple axis view autoscaling.\n    It turns autoscaling on or off, and then,\n    if autoscaling for either axis is on, it performs\n    the autoscaling on the specified axis or axes.\n\n    Parameters\n    ----------\n    enable : bool or None, optional\n        True (default) turns autoscaling on, False turns it off.\n        None leaves the autoscaling state unchanged.\n\n    axis : {'both', 'x', 'y'}, optional\n        Which axis to operate on; default is 'both'.\n\n    tight : bool or None, optional\n        If True, first set the margins to zero.  Then, this argument is\n        forwarded to `autoscale_view` (regardless of its value); see the\n        description of its behavior there.\n    \"\"\"\n    if enable is None:\n        scalex = True\n        scaley = True\n    else:\n        scalex = False\n        scaley = False\n        if axis in ['x', 'both']:\n            self._autoscaleXon = bool(enable)\n            scalex = self._autoscaleXon\n        if axis in ['y', 'both']:\n            self._autoscaleYon = bool(enable)\n            scaley = self._autoscaleYon\n    if tight and scalex:\n        self._xmargin = 0\n    if tight and scaley:\n        self._ymargin = 0\n    self._request_autoscale_view(tight=tight, scalex=scalex, scaley=scaley)",
                            "def autoscale_view(self, tight=None, scalex=True, scaley=True):\n    \"\"\"\n    Autoscale the view limits using the data limits.\n\n    Parameters\n    ----------\n    tight : bool or None\n        If *True*, only expand the axis limits using the margins.  Note\n        that unlike for `autoscale`, ``tight=True`` does *not* set the\n        margins to zero.\n\n        If *False* and :rc:`axes.autolimit_mode` is 'round_numbers', then\n        after expansion by the margins, further expand the axis limits\n        using the axis major locator.\n\n        If None (the default), reuse the value set in the previous call to\n        `autoscale_view` (the initial value is False, but the default style\n        sets :rc:`axes.autolimit_mode` to 'data', in which case this\n        behaves like True).\n\n    scalex : bool\n        Whether to autoscale the x axis (default is True).\n\n    scaley : bool\n        Whether to autoscale the x axis (default is True).\n\n    Notes\n    -----\n    The autoscaling preserves any preexisting axis direction reversal.\n\n    The data limits are not updated automatically when artist data are\n    changed after the artist has been added to an Axes instance.  In that\n    case, use :meth:`matplotlib.axes.Axes.relim` prior to calling\n    autoscale_view.\n    \"\"\"\n    if tight is not None:\n        self._tight = bool(tight)\n    if self.use_sticky_edges and (self._xmargin and scalex and self._autoscaleXon or (self._ymargin and scaley and self._autoscaleYon)):\n        stickies = [artist.sticky_edges for artist in self.get_children()]\n    else:\n        stickies = []\n    x_stickies = np.sort([x for sticky in stickies for x in sticky.x])\n    y_stickies = np.sort([y for sticky in stickies for y in sticky.y])\n    if self.get_xscale().lower() == 'log':\n        x_stickies = x_stickies[x_stickies > 0]\n    if self.get_yscale().lower() == 'log':\n        y_stickies = y_stickies[y_stickies > 0]\n\n    def handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound):\n        if not (scale and autoscaleon):\n            return\n        shared = shared_axes.get_siblings(self)\n        dl = [ax.dataLim for ax in shared]\n        finite_dl = [d for d in dl if np.isfinite(d).all()]\n        if len(finite_dl):\n            x_finite = [d for d in dl if np.isfinite(d.intervalx).all() and d not in finite_dl]\n            y_finite = [d for d in dl if np.isfinite(d.intervaly).all() and d not in finite_dl]\n            dl = finite_dl\n            dl.extend(x_finite)\n            dl.extend(y_finite)\n        bb = mtransforms.BboxBase.union(dl)\n        vl = None\n        if not np.isfinite(bb.intervalx).all():\n            vl = mtransforms.BboxBase.union([ax.viewLim for ax in shared])\n            bb.intervalx = vl.intervalx\n        if not np.isfinite(bb.intervaly).all():\n            if vl is None:\n                vl = mtransforms.BboxBase.union([ax.viewLim for ax in shared])\n            bb.intervaly = vl.intervaly\n        (x0, x1) = getattr(bb, interval)\n        locator = axis.get_major_locator()\n        (x0, x1) = locator.nonsingular(x0, x1)\n\n        def tol(x):\n            return 1e-05 * abs(x) + 1e-08\n        i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n        x0bound = stickies[i0] if i0 != -1 else None\n        i1 = stickies.searchsorted(x1 - tol(x1))\n        x1bound = stickies[i1] if i1 != len(stickies) else None\n        minpos = getattr(bb, minpos)\n        transform = axis.get_transform()\n        inverse_trans = transform.inverted()\n        (x0, x1) = axis._scale.limit_range_for_scale(x0, x1, minpos)\n        (x0t, x1t) = transform.transform([x0, x1])\n        delta = (x1t - x0t) * margin\n        if not np.isfinite(delta):\n            delta = 0\n        (x0, x1) = inverse_trans.transform([x0t - delta, x1t + delta])\n        if x0bound is not None:\n            x0 = max(x0, x0bound)\n        if x1bound is not None:\n            x1 = min(x1, x1bound)\n        if not self._tight:\n            (x0, x1) = locator.view_limits(x0, x1)\n        set_bound(x0, x1)\n    handle_single_axis(scalex, self._autoscaleXon, self._shared_x_axes, 'intervalx', 'minposx', self.xaxis, self._xmargin, x_stickies, self.set_xbound)\n    handle_single_axis(scaley, self._autoscaleYon, self._shared_y_axes, 'intervaly', 'minposy', self.yaxis, self._ymargin, y_stickies, self.set_ybound)",
                            "def _get_axis_list(self):\n    return (self.xaxis, self.yaxis)",
                            "def _get_axis_map(self):\n    \"\"\"\n    Return a mapping of `Axis` \"names\" to `Axis` instances.\n\n    The `Axis` name is derived from the attribute under which the instance\n    is stored, so e.g. for polar axes, the theta-axis is still named \"x\"\n    and the r-axis is still named \"y\" (for back-compatibility).\n\n    In practice, this means that the entries are typically \"x\" and \"y\", and\n    additionally \"z\" for 3D axes.\n    \"\"\"\n    d = {}\n    axis_list = self._get_axis_list()\n    for (k, v) in vars(self).items():\n        if k.endswith('axis') and v in axis_list:\n            d[k[:-len('axis')]] = v\n    return d",
                            "def _update_title_position(self, renderer):\n    \"\"\"\n    Update the title position based on the bounding box enclosing\n    all the ticklabels and x-axis spine and xlabel...\n    \"\"\"\n    if self._autotitlepos is not None and (not self._autotitlepos):\n        _log.debug('title position was updated manually, not adjusting')\n        return\n    titles = (self.title, self._left_title, self._right_title)\n    if self._autotitlepos is None:\n        for title in titles:\n            (x, y) = title.get_position()\n            if not np.isclose(y, 1.0):\n                self._autotitlepos = False\n                _log.debug('not adjusting title pos because a title was already placed manually: %f', y)\n                return\n        self._autotitlepos = True\n    for title in titles:\n        (x, _) = title.get_position()\n        title.set_position((x, 1.0))\n        axs = self._twinned_axes.get_siblings(self)\n        for ax in self.child_axes:\n            if ax is not None:\n                locator = ax.get_axes_locator()\n                if locator:\n                    pos = locator(self, renderer)\n                    ax.apply_aspect(pos)\n                else:\n                    ax.apply_aspect()\n                axs = axs + [ax]\n        top = 0\n        for ax in axs:\n            if ax.xaxis.get_ticks_position() in ['top', 'unknown'] or ax.xaxis.get_label_position() == 'top':\n                bb = ax.xaxis.get_tightbbox(renderer)\n            else:\n                bb = ax.get_window_extent(renderer)\n            if bb is not None:\n                top = max(top, bb.ymax)\n        if title.get_window_extent(renderer).ymin < top:\n            (_, y) = self.transAxes.inverted().transform((0, top))\n            title.set_position((x, y))\n            if title.get_window_extent(renderer).ymin < top:\n                (_, y) = self.transAxes.inverted().transform((0.0, 2 * top - title.get_window_extent(renderer).ymin))\n                title.set_position((x, y))\n    ymax = max((title.get_position()[1] for title in titles))\n    for title in titles:\n        (x, _) = title.get_position()\n        title.set_position((x, ymax))",
                            "@martist.allow_rasterization\ndef draw(self, renderer=None, inframe=False):\n    \"\"\"Draw everything (plot lines, axes, labels)\"\"\"\n    if renderer is None:\n        renderer = self.figure._cachedRenderer\n    if renderer is None:\n        raise RuntimeError('No renderer defined')\n    if not self.get_visible():\n        return\n    self._unstale_viewLim()\n    renderer.open_group('axes')\n    self._stale = True\n    locator = self.get_axes_locator()\n    if locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n    artists = self.get_children()\n    artists.remove(self.patch)\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n    self._update_title_position(renderer)\n    if not self.axison or inframe:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n    if inframe:\n        artists.remove(self.title)\n        artists.remove(self._left_title)\n        artists.remove(self._right_title)\n    if not self.figure.canvas.is_saving():\n        artists = [a for a in artists if not a.get_animated() or a in self.images]\n    artists = sorted(artists, key=attrgetter('zorder'))\n    rasterization_zorder = self._rasterization_zorder\n    if rasterization_zorder is not None and artists and (artists[0].zorder < rasterization_zorder):\n        renderer.start_rasterizing()\n        artists_rasterized = [a for a in artists if a.zorder < rasterization_zorder]\n        artists = [a for a in artists if a.zorder >= rasterization_zorder]\n    else:\n        artists_rasterized = []\n    if self.axison and self._frameon:\n        self.patch.draw(renderer)\n    if artists_rasterized:\n        for a in artists_rasterized:\n            a.draw(renderer)\n        renderer.stop_rasterizing()\n    mimage._draw_list_compositing_images(renderer, self, artists)\n    renderer.close_group('axes')\n    self.stale = False",
                            "def draw_artist(self, a):\n    \"\"\"\n    This method can only be used after an initial draw which\n    caches the renderer.  It is used to efficiently update Axes\n    data (axis ticks, labels, etc are not updated)\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError('draw_artist can only be used after an initial draw which caches the renderer')\n    a.draw(self.figure._cachedRenderer)",
                            "def redraw_in_frame(self):\n    \"\"\"\n    This method can only be used after an initial draw which\n    caches the renderer.  It is used to efficiently update Axes\n    data (axis ticks, labels, etc are not updated)\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError('redraw_in_frame can only be used after an initial draw which caches the renderer')\n    self.draw(self.figure._cachedRenderer, inframe=True)",
                            "def get_renderer_cache(self):\n    return self.figure._cachedRenderer",
                            "def get_frame_on(self):\n    \"\"\"Get whether the axes rectangle patch is drawn.\"\"\"\n    return self._frameon",
                            "def set_frame_on(self, b):\n    \"\"\"\n    Set whether the axes rectangle patch is drawn.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._frameon = b\n    self.stale = True",
                            "def get_axisbelow(self):\n    \"\"\"\n    Get whether axis ticks and gridlines are above or below most artists.\n\n    Returns\n    -------\n    axisbelow : bool or 'line'\n\n    See Also\n    --------\n    set_axisbelow\n    \"\"\"\n    return self._axisbelow",
                            "def set_axisbelow(self, b):\n    \"\"\"\n    Set whether axis ticks and gridlines are above or below most artists.\n\n    This controls the zorder of the ticks and gridlines. For more\n    information on the zorder see :doc:`/gallery/misc/zorder_demo`.\n\n    Parameters\n    ----------\n    b : bool or 'line'\n        Possible values:\n\n        - *True* (zorder = 0.5): Ticks and gridlines are below all Artists.\n        - 'line' (zorder = 1.5): Ticks and gridlines are above patches\n          (e.g. rectangles, with default zorder = 1) but still below lines\n          and markers (with their default zorder = 2).\n        - *False* (zorder = 2.5): Ticks and gridlines are above patches\n          and lines / markers.\n\n    See Also\n    --------\n    get_axisbelow\n    \"\"\"\n    self._axisbelow = axisbelow = validate_axisbelow(b)\n    if axisbelow is True:\n        zorder = 0.5\n    elif axisbelow is False:\n        zorder = 2.5\n    elif axisbelow == 'line':\n        zorder = 1.5\n    else:\n        raise ValueError('Unexpected axisbelow value')\n    for axis in self._get_axis_list():\n        axis.set_zorder(zorder)\n    self.stale = True",
                            "@docstring.dedent_interpd\ndef grid(self, b=None, which='major', axis='both', **kwargs):\n    \"\"\"\n    Configure the grid lines.\n\n    Parameters\n    ----------\n    b : bool or None, optional\n        Whether to show the grid lines. If any *kwargs* are supplied,\n        it is assumed you want the grid on and *b* will be set to True.\n\n        If *b* is *None* and there are no *kwargs*, this toggles the\n        visibility of the lines.\n\n    which : {'major', 'minor', 'both'}, optional\n        The grid lines to apply the changes on.\n\n    axis : {'both', 'x', 'y'}, optional\n        The axis to apply the changes on.\n\n    **kwargs : `.Line2D` properties\n        Define the line properties of the grid, e.g.::\n\n            grid(color='r', linestyle='-', linewidth=2)\n\n        Valid keyword arguments are:\n\n        %(_Line2D_docstr)s\n\n    Notes\n    -----\n    The axis is drawn as a unit, so the effective zorder for drawing the\n    grid is determined by the zorder of each axis, not by the zorder of the\n    `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,\n    use `.set_axisbelow` or, for more control, call the\n    `~matplotlib.axis.Axis.set_zorder` method of each axis.\n    \"\"\"\n    if len(kwargs):\n        b = True\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        self.xaxis.grid(b, which=which, **kwargs)\n    if axis in ['y', 'both']:\n        self.yaxis.grid(b, which=which, **kwargs)",
                            "def ticklabel_format(self, *, axis='both', style='', scilimits=None, useOffset=None, useLocale=None, useMathText=None):\n    \"\"\"\n    Change the `~matplotlib.ticker.ScalarFormatter` used by\n    default for linear axes.\n\n    Optional keyword arguments:\n\n      ==============   =========================================\n      Keyword          Description\n      ==============   =========================================\n      *axis*           [ 'x' | 'y' | 'both' ]\n      *style*          [ 'sci' (or 'scientific') | 'plain' ]\n                       plain turns off scientific notation\n      *scilimits*      (m, n), pair of integers; if *style*\n                       is 'sci', scientific notation will\n                       be used for numbers outside the range\n                       10\\\\ :sup:`m` to 10\\\\ :sup:`n`.\n                       Use (0, 0) to include all numbers.\n                       Use (m, m) where m != 0 to fix the order\n                       of magnitude to 10\\\\ :sup:`m`.\n      *useOffset*      [ bool | offset ]; if True,\n                       the offset will be calculated as needed;\n                       if False, no offset will be used; if a\n                       numeric offset is specified, it will be\n                       used.\n      *useLocale*      If True, format the number according to\n                       the current locale.  This affects things\n                       such as the character used for the\n                       decimal separator.  If False, use\n                       C-style (English) formatting.  The\n                       default setting is controlled by the\n                       axes.formatter.use_locale rcparam.\n      *useMathText*    If True, render the offset and scientific\n                       notation in mathtext\n      ==============   =========================================\n\n    Only the major ticks are affected.\n    If the method is called when the `~matplotlib.ticker.ScalarFormatter`\n    is not the `~matplotlib.ticker.Formatter` being used, an\n    `AttributeError` will be raised.\n    \"\"\"\n    style = style.lower()\n    axis = axis.lower()\n    if scilimits is not None:\n        try:\n            (m, n) = scilimits\n            m + n + 1\n        except (ValueError, TypeError):\n            raise ValueError('scilimits must be a sequence of 2 integers')\n    STYLES = {'sci': True, 'scientific': True, 'plain': False, '': None}\n    is_sci_style = cbook._check_getitem(STYLES, style=style)\n    axis_map = {**{k: [v] for (k, v) in self._get_axis_map().items()}, 'both': self._get_axis_list()}\n    axises = cbook._check_getitem(axis_map, axis=axis)\n    try:\n        for axis in axises:\n            if is_sci_style is not None:\n                axis.major.formatter.set_scientific(is_sci_style)\n            if scilimits is not None:\n                axis.major.formatter.set_powerlimits(scilimits)\n            if useOffset is not None:\n                axis.major.formatter.set_useOffset(useOffset)\n            if useLocale is not None:\n                axis.major.formatter.set_useLocale(useLocale)\n            if useMathText is not None:\n                axis.major.formatter.set_useMathText(useMathText)\n    except AttributeError:\n        raise AttributeError('This method only works with the ScalarFormatter')",
                            "def locator_params(self, axis='both', tight=None, **kwargs):\n    \"\"\"\n    Control behavior of major tick locators.\n\n    Because the locator is involved in autoscaling, `~.Axes.autoscale_view`\n    is called automatically after the parameters are changed.\n\n    Parameters\n    ----------\n    axis : {'both', 'x', 'y'}, optional\n        The axis on which to operate.\n\n    tight : bool or None, optional\n        Parameter passed to `~.Axes.autoscale_view`.\n        Default is None, for no change.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Remaining keyword arguments are passed to directly to the\n        ``set_params()`` method of the locator. Supported keywords depend\n        on the type of the locator. See for example\n        `~.ticker.MaxNLocator.set_params` for the `.ticker.MaxNLocator`\n        used by default for linear axes.\n\n    Examples\n    --------\n    When plotting small subplots, one might want to reduce the maximum\n    number of ticks and use tight bounds, for example::\n\n        ax.locator_params(tight=True, nbins=4)\n\n    \"\"\"\n    _x = axis in ['x', 'both']\n    _y = axis in ['y', 'both']\n    if _x:\n        self.xaxis.get_major_locator().set_params(**kwargs)\n    if _y:\n        self.yaxis.get_major_locator().set_params(**kwargs)\n    self._request_autoscale_view(tight=tight, scalex=_x, scaley=_y)",
                            "def tick_params(self, axis='both', **kwargs):\n    \"\"\"Change the appearance of ticks, tick labels, and gridlines.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, optional\n        Which axis to apply the parameters to.\n\n    Other Parameters\n    ----------------\n    axis : {'x', 'y', 'both'}\n        Axis on which to operate; default is 'both'.\n    reset : bool, default: False\n        If *True*, set all parameters to defaults before processing other\n        keyword arguments.\n    which : {'major', 'minor', 'both'}\n        Default is 'major'; apply arguments to *which* ticks.\n    direction : {'in', 'out', 'inout'}\n        Puts ticks inside the axes, outside the axes, or both.\n    length : float\n        Tick length in points.\n    width : float\n        Tick width in points.\n    color : color\n        Tick color.\n    pad : float\n        Distance in points between tick and label.\n    labelsize : float or str\n        Tick label font size in points or as a string (e.g., 'large').\n    labelcolor : color\n        Tick label color.\n    colors : color\n        Tick color and label color.\n    zorder : float\n        Tick and label zorder.\n    bottom, top, left, right : bool\n        Whether to draw the respective ticks.\n    labelbottom, labeltop, labelleft, labelright : bool\n        Whether to draw the respective tick labels.\n    labelrotation : float\n        Tick label rotation\n    grid_color : color\n        Gridline color.\n    grid_alpha : float\n        Transparency of gridlines: 0 (transparent) to 1 (opaque).\n    grid_linewidth : float\n        Width of gridlines in points.\n    grid_linestyle : str\n        Any valid `.Line2D` line style spec.\n\n    Examples\n    --------\n    Usage ::\n\n        ax.tick_params(direction='out', length=6, width=2, colors='r',\n                       grid_color='r', grid_alpha=0.5)\n\n    This will make all major ticks be red, pointing out of the box,\n    and with dimensions 6 points by 2 points.  Tick labels will\n    also be red.  Gridlines will be red and translucent.\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        xkw = dict(kwargs)\n        xkw.pop('left', None)\n        xkw.pop('right', None)\n        xkw.pop('labelleft', None)\n        xkw.pop('labelright', None)\n        self.xaxis.set_tick_params(**xkw)\n    if axis in ['y', 'both']:\n        ykw = dict(kwargs)\n        ykw.pop('top', None)\n        ykw.pop('bottom', None)\n        ykw.pop('labeltop', None)\n        ykw.pop('labelbottom', None)\n        self.yaxis.set_tick_params(**ykw)",
                            "def set_axis_off(self):\n    \"\"\"\n    Turn the x- and y-axis off.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = False\n    self.stale = True",
                            "def set_axis_on(self):\n    \"\"\"\n    Turn the x- and y-axis on.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = True\n    self.stale = True",
                            "def invert_xaxis(self):\n    \"\"\"\n    Invert the x-axis.\n\n    See Also\n    --------\n    xaxis_inverted\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    self.xaxis.set_inverted(not self.xaxis.get_inverted())",
                            "def xaxis_inverted(self):\n    \"\"\"\n    Return whether the x-axis is inverted.\n\n    The axis is inverted if the left value is larger than the right value.\n\n    See Also\n    --------\n    invert_xaxis\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    return self.xaxis.get_inverted()",
                            "def get_xbound(self):\n    \"\"\"\n    Return the lower and upper x-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    (left, right) = self.get_xlim()\n    if left < right:\n        return (left, right)\n    else:\n        return (right, left)",
                            "def set_xbound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the x-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (``Axes._autoscaleXon``).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        (lower, upper) = lower\n    (old_lower, old_upper) = self.get_xbound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n    if self.xaxis_inverted():\n        if lower < upper:\n            self.set_xlim(upper, lower, auto=None)\n        else:\n            self.set_xlim(lower, upper, auto=None)\n    elif lower < upper:\n        self.set_xlim(lower, upper, auto=None)\n    else:\n        self.set_xlim(upper, lower, auto=None)",
                            "def get_xlim(self):\n    \"\"\"\n    Return the x-axis view limits.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The current x-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The x-axis may be inverted, in which case the *left* value will\n    be greater than the *right* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervalx)",
                            "def _validate_converted_limits(self, limit, convert):\n    \"\"\"\n    Raise ValueError if converted limits are non-finite.\n\n    Note that this function also accepts None as a limit argument.\n\n    Returns\n    -------\n    The limit value after call to convert(), or None if limit is None.\n    \"\"\"\n    if limit is not None:\n        converted_limit = convert(limit)\n        if isinstance(converted_limit, Real) and (not np.isfinite(converted_limit)):\n            raise ValueError('Axis limits cannot be NaN or Inf')\n        return converted_limit",
                            "def set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    .. ACCEPTS: (left: float, right: float)\n\n    Parameters\n    ----------\n    left : scalar, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may also be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n    right : scalar, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, optional\n        Whether to notify observers of limit change (default: True).\n\n    auto : bool or None, optional\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off (default action), None leaves unchanged.\n\n    xmin, xmax : scalar, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and np.iterable(left):\n        (left, right) = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n    if left is None or right is None:\n        (old_left, old_right) = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n    if self.get_xscale() == 'log' and (left <= 0 or right <= 0):\n        (old_left, old_right) = self.get_xlim()\n        if left <= 0:\n            cbook._warn_external('Attempted to set non-positive left xlim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external('Attempted to set non-positive right xlim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')\n    (left, right) = self.xaxis.get_major_locator().nonsingular(left, right)\n    (left, right) = self.xaxis.limit_range_for_scale(left, right)\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return (left, right)",
                            "def get_xscale(self):\n    \"\"\"\n    Return the x-axis scale as string.\n\n    See Also\n    --------\n    set_xscale\n    \"\"\"\n    return self.xaxis.get_scale()",
                            "def set_xscale(self, value, **kwargs):\n    \"\"\"\n    Set the x-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    g = self.get_shared_x_axes()\n    for ax in g.get_siblings(self):\n        ax.xaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    self._request_autoscale_view(scaley=False)",
                            "def get_xticks(self, minor=False):\n    \"\"\"Return the x ticks as a list of locations\"\"\"\n    return self.xaxis.get_ticklocs(minor=minor)",
                            "def set_xticks(self, ticks, minor=False):\n    \"\"\"\n    Set the x ticks with list of *ticks*\n\n    Parameters\n    ----------\n    ticks : list\n        List of x-axis tick locations.\n\n    minor : bool, optional\n        If ``False`` sets major ticks, if ``True`` sets minor ticks.\n        Default is ``False``.\n    \"\"\"\n    ret = self.xaxis.set_ticks(ticks, minor=minor)\n    self.stale = True\n    return ret",
                            "def get_xmajorticklabels(self):\n    \"\"\"\n    Get the major x tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.xaxis.get_majorticklabels()",
                            "def get_xminorticklabels(self):\n    \"\"\"\n    Get the minor x tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.xaxis.get_minorticklabels()",
                            "def get_xticklabels(self, minor=False, which=None):\n    \"\"\"\n    Get the x tick labels as a list of `~matplotlib.text.Text` instances.\n\n    Parameters\n    ----------\n    minor : bool, optional\n       If True return the minor ticklabels,\n       else return the major ticklabels.\n\n    which : None, ('minor', 'major', 'both')\n       Overrides *minor*.\n\n       Selects which ticklabels to return\n\n    Returns\n    -------\n    ret : list\n       List of `~matplotlib.text.Text` instances.\n    \"\"\"\n    return self.xaxis.get_ticklabels(minor=minor, which=which)",
                            "def set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs):\n    \"\"\"\n    Set the x-tick labels with list of string labels.\n\n    Parameters\n    ----------\n    labels : List[str]\n        List of string labels.\n\n    fontdict : dict, optional\n        A dictionary controlling the appearance of the ticklabels.\n        The default *fontdict* is::\n\n           {'fontsize': rcParams['axes.titlesize'],\n            'fontweight': rcParams['axes.titleweight'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    minor : bool, optional\n        Whether to set the minor ticklabels rather than the major ones.\n\n    Returns\n    -------\n    A list of `~.text.Text` instances.\n\n    Other Parameters\n    -----------------\n    **kwargs : `~.text.Text` properties.\n    \"\"\"\n    if fontdict is not None:\n        kwargs.update(fontdict)\n    ret = self.xaxis.set_ticklabels(labels, minor=minor, **kwargs)\n    self.stale = True\n    return ret",
                            "def invert_yaxis(self):\n    \"\"\"\n    Invert the y-axis.\n\n    See Also\n    --------\n    yaxis_inverted\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    self.yaxis.set_inverted(not self.yaxis.get_inverted())",
                            "def yaxis_inverted(self):\n    \"\"\"\n    Return whether the y-axis is inverted.\n\n    The axis is inverted if the bottom value is larger than the top value.\n\n    See Also\n    --------\n    invert_yaxis\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    return self.yaxis.get_inverted()",
                            "def get_ybound(self):\n    \"\"\"\n    Return the lower and upper y-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    (bottom, top) = self.get_ylim()\n    if bottom < top:\n        return (bottom, top)\n    else:\n        return (top, bottom)",
                            "def set_ybound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the y-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (``Axes._autoscaleYon``).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        (lower, upper) = lower\n    (old_lower, old_upper) = self.get_ybound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n    if self.yaxis_inverted():\n        if lower < upper:\n            self.set_ylim(upper, lower, auto=None)\n        else:\n            self.set_ylim(lower, upper, auto=None)\n    elif lower < upper:\n        self.set_ylim(lower, upper, auto=None)\n    else:\n        self.set_ylim(upper, lower, auto=None)",
                            "def get_ylim(self):\n    \"\"\"\n    Return the y-axis view limits.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The current y-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The y-axis may be inverted, in which case the *bottom* value\n    will be greater than the *top* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervaly)",
                            "def set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):\n    \"\"\"\n    Set the y-axis view limits.\n\n    .. ACCEPTS: (bottom: float, top: float)\n\n    Parameters\n    ----------\n    bottom : scalar, optional\n        The bottom ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The bottom and top ylims may also be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n    top : scalar, optional\n        The top ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, optional\n        Whether to notify observers of limit change (default: ``True``).\n\n    auto : bool or None, optional\n        Whether to turn on autoscaling of the y-axis. *True* turns on,\n        *False* turns off (default action), *None* leaves unchanged.\n\n    ymin, ymax : scalar, optional\n        They are equivalent to bottom and top respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The *bottom* value may be greater than the *top* value, in which\n    case the y-axis values will decrease from *bottom* to *top*.\n\n    Examples\n    --------\n    >>> set_ylim(bottom, top)\n    >>> set_ylim((bottom, top))\n    >>> bottom, top = set_ylim(bottom, top)\n\n    One limit may be left unchanged.\n\n    >>> set_ylim(top=top_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the y-axis. For example, suppose ``y`` represents depth of the\n    ocean in m. The y-axis limits might be set like the following\n    so 5000 m depth is at the bottom of the plot and the surface,\n    0 m, is at the top.\n\n    >>> set_ylim(5000, 0)\n    \"\"\"\n    if top is None and np.iterable(bottom):\n        (bottom, top) = bottom\n    if ymin is not None:\n        if bottom is not None:\n            raise TypeError('Cannot pass both `ymin` and `bottom`')\n        bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise TypeError('Cannot pass both `ymax` and `top`')\n        top = ymax\n    self._process_unit_info(ydata=(bottom, top))\n    bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n    top = self._validate_converted_limits(top, self.convert_yunits)\n    if bottom is None or top is None:\n        (old_bottom, old_top) = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):\n        (old_bottom, old_top) = self.get_ylim()\n        if bottom <= 0:\n            cbook._warn_external('Attempted to set non-positive bottom ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            bottom = old_bottom\n        if top <= 0:\n            cbook._warn_external('Attempted to set non-positive top ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            top = old_top\n    if bottom == top:\n        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')\n    (bottom, top) = self.yaxis.get_major_locator().nonsingular(bottom, top)\n    (bottom, top) = self.yaxis.limit_range_for_scale(bottom, top)\n    self._viewLim.intervaly = (bottom, top)\n    if auto is not None:\n        self._autoscaleYon = bool(auto)\n    if emit:\n        self.callbacks.process('ylim_changed', self)\n        for other in self._shared_y_axes.get_siblings(self):\n            if other is not self:\n                other.set_ylim(self.viewLim.intervaly, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return (bottom, top)",
                            "def get_yscale(self):\n    \"\"\"\n    Return the y-axis scale as string.\n\n    See Also\n    --------\n    set_yscale\n    \"\"\"\n    return self.yaxis.get_scale()",
                            "def set_yscale(self, value, **kwargs):\n    \"\"\"\n    Set the y-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    g = self.get_shared_y_axes()\n    for ax in g.get_siblings(self):\n        ax.yaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    self._request_autoscale_view(scalex=False)",
                            "def get_yticks(self, minor=False):\n    \"\"\"Return the y ticks as a list of locations\"\"\"\n    return self.yaxis.get_ticklocs(minor=minor)",
                            "def set_yticks(self, ticks, minor=False):\n    \"\"\"\n    Set the y ticks with list of *ticks*\n\n    Parameters\n    ----------\n    ticks : list\n        List of y-axis tick locations\n\n    minor : bool, optional\n        If ``False`` sets major ticks, if ``True`` sets minor ticks.\n        Default is ``False``.\n    \"\"\"\n    ret = self.yaxis.set_ticks(ticks, minor=minor)\n    return ret",
                            "def get_ymajorticklabels(self):\n    \"\"\"\n    Get the major y tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.yaxis.get_majorticklabels()",
                            "def get_yminorticklabels(self):\n    \"\"\"\n    Get the minor y tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.yaxis.get_minorticklabels()",
                            "def get_yticklabels(self, minor=False, which=None):\n    \"\"\"\n    Get the y tick labels as a list of `~matplotlib.text.Text` instances.\n\n    Parameters\n    ----------\n    minor : bool\n       If True return the minor ticklabels,\n       else return the major ticklabels\n\n    which : None, ('minor', 'major', 'both')\n       Overrides *minor*.\n\n       Selects which ticklabels to return\n\n    Returns\n    -------\n    ret : list\n       List of `~matplotlib.text.Text` instances.\n    \"\"\"\n    return self.yaxis.get_ticklabels(minor=minor, which=which)",
                            "def set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs):\n    \"\"\"\n    Set the y-tick labels with list of strings labels.\n\n    Parameters\n    ----------\n    labels : List[str]\n        list of string labels\n\n    fontdict : dict, optional\n        A dictionary controlling the appearance of the ticklabels.\n        The default *fontdict* is::\n\n           {'fontsize': rcParams['axes.titlesize'],\n            'fontweight': rcParams['axes.titleweight'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    minor : bool, optional\n        Whether to set the minor ticklabels rather than the major ones.\n\n    Returns\n    -------\n    A list of `~.text.Text` instances.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~.text.Text` properties.\n    \"\"\"\n    if fontdict is not None:\n        kwargs.update(fontdict)\n    return self.yaxis.set_ticklabels(labels, minor=minor, **kwargs)",
                            "def xaxis_date(self, tz=None):\n    \"\"\"\n    Sets up x-axis ticks and labels that treat the x data as dates.\n\n    Parameters\n    ----------\n    tz : str or `tzinfo` instance, optional\n        Timezone.  Defaults to :rc:`timezone`.\n    \"\"\"\n    self.xaxis.axis_date(tz)",
                            "def yaxis_date(self, tz=None):\n    \"\"\"\n    Sets up y-axis ticks and labels that treat the y data as dates.\n\n    Parameters\n    ----------\n    tz : str or `tzinfo` instance, optional\n        Timezone.  Defaults to :rc:`timezone`.\n    \"\"\"\n    self.yaxis.axis_date(tz)",
                            "def format_xdata(self, x):\n    \"\"\"\n    Return *x* formatted as an x-value.\n\n    This function will use the `.fmt_xdata` attribute if it is not None,\n    else will fall back on the xaxis major formatter.\n    \"\"\"\n    return (self.fmt_xdata if self.fmt_xdata is not None else self.xaxis.get_major_formatter().format_data_short)(x)",
                            "def format_ydata(self, y):\n    \"\"\"\n    Return *y* formatted as an y-value.\n\n    This function will use the `.fmt_ydata` attribute if it is not None,\n    else will fall back on the yaxis major formatter.\n    \"\"\"\n    return (self.fmt_ydata if self.fmt_ydata is not None else self.yaxis.get_major_formatter().format_data_short)(y)",
                            "def format_coord(self, x, y):\n    \"\"\"Return a format string formatting the *x*, *y* coordinates.\"\"\"\n    if x is None:\n        xs = '???'\n    else:\n        xs = self.format_xdata(x)\n    if y is None:\n        ys = '???'\n    else:\n        ys = self.format_ydata(y)\n    return 'x=%s y=%s' % (xs, ys)",
                            "def minorticks_on(self):\n    \"\"\"\n    Display minor ticks on the axes.\n\n    Displaying minor ticks may reduce performance; you may turn them off\n    using `minorticks_off()` if drawing speed is a problem.\n    \"\"\"\n    for ax in (self.xaxis, self.yaxis):\n        scale = ax.get_scale()\n        if scale == 'log':\n            s = ax._scale\n            ax.set_minor_locator(mticker.LogLocator(s.base, s.subs))\n        elif scale == 'symlog':\n            s = ax._scale\n            ax.set_minor_locator(mticker.SymmetricalLogLocator(s._transform, s.subs))\n        else:\n            ax.set_minor_locator(mticker.AutoMinorLocator())",
                            "def minorticks_off(self):\n    \"\"\"Remove minor ticks from the axes.\"\"\"\n    self.xaxis.set_minor_locator(mticker.NullLocator())\n    self.yaxis.set_minor_locator(mticker.NullLocator())",
                            "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n    \"\"\"\n    return True",
                            "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports any pan/zoom button functionality.\n    \"\"\"\n    return True",
                            "def get_navigate(self):\n    \"\"\"\n    Get whether the axes responds to navigation commands\n    \"\"\"\n    return self._navigate",
                            "def set_navigate(self, b):\n    \"\"\"\n    Set whether the axes responds to navigation toolbar commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._navigate = b",
                            "def get_navigate_mode(self):\n    \"\"\"\n    Get the navigation toolbar button status: 'PAN', 'ZOOM', or None\n    \"\"\"\n    return self._navigate_mode",
                            "def set_navigate_mode(self, b):\n    \"\"\"\n    Set the navigation toolbar button status;\n\n    .. warning::\n        this is not a user-API function.\n\n    \"\"\"\n    self._navigate_mode = b",
                            "def _get_view(self):\n    \"\"\"\n    Save information required to reproduce the current view.\n\n    Called before a view is changed, such as during a pan or zoom\n    initiated by the user. You may return any information you deem\n    necessary to describe the view.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation saves the view limits. You *must* implement\n        :meth:`_set_view` if you implement this method.\n    \"\"\"\n    (xmin, xmax) = self.get_xlim()\n    (ymin, ymax) = self.get_ylim()\n    return (xmin, xmax, ymin, ymax)",
                            "def _set_view(self, view):\n    \"\"\"\n    Apply a previously saved view.\n\n    Called when restoring a view, such as with the navigation buttons.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation restores the view limits. You *must*\n        implement :meth:`_get_view` if you implement this method.\n    \"\"\"\n    (xmin, xmax, ymin, ymax) = view\n    self.set_xlim((xmin, xmax))\n    self.set_ylim((ymin, ymax))",
                            "def _set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False):\n    \"\"\"\n    Update view from a selection bbox.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation sets the view limits to the bbox directly.\n\n    Parameters\n    ----------\n    bbox : 4-tuple or 3 tuple\n        * If bbox is a 4 tuple, it is the selected bounding box limits,\n          in *display* coordinates.\n        * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where\n          (xp, yp) is the center of zooming and scl the scale factor to\n          zoom by.\n\n    direction : str\n        The direction to apply the bounding box.\n            * `'in'` - The bounding box describes the view directly, i.e.,\n                       it zooms in.\n            * `'out'` - The bounding box describes the size to make the\n                        existing view, i.e., it zooms out.\n\n    mode : str or None\n        The selection mode, whether to apply the bounding box in only the\n        `'x'` direction, `'y'` direction or both (`None`).\n\n    twinx : bool\n        Whether this axis is twinned in the *x*-direction.\n\n    twiny : bool\n        Whether this axis is twinned in the *y*-direction.\n    \"\"\"\n    (Xmin, Xmax) = self.get_xlim()\n    (Ymin, Ymax) = self.get_ylim()\n    if len(bbox) == 3:\n        (xp, yp, scl) = bbox\n        if scl == 0:\n            scl = 1.0\n        if scl > 1:\n            direction = 'in'\n        else:\n            direction = 'out'\n            scl = 1 / scl\n        tranD2C = self.transData.transform\n        (xmin, ymin) = tranD2C((Xmin, Ymin))\n        (xmax, ymax) = tranD2C((Xmax, Ymax))\n        xwidth = xmax - xmin\n        ywidth = ymax - ymin\n        xcen = (xmax + xmin) * 0.5\n        ycen = (ymax + ymin) * 0.5\n        xzc = (xp * (scl - 1) + xcen) / scl\n        yzc = (yp * (scl - 1) + ycen) / scl\n        bbox = [xzc - xwidth / 2.0 / scl, yzc - ywidth / 2.0 / scl, xzc + xwidth / 2.0 / scl, yzc + ywidth / 2.0 / scl]\n    elif len(bbox) != 4:\n        cbook._warn_external('Warning in _set_view_from_bbox: bounding box is not a tuple of length 3 or 4. Ignoring the view change.')\n        return\n    (lastx, lasty, x, y) = bbox\n    inverse = self.transData.inverted()\n    ((lastx, lasty), (x, y)) = inverse.transform([(lastx, lasty), (x, y)])\n    if twinx:\n        (x0, x1) = (Xmin, Xmax)\n    elif Xmin < Xmax:\n        if x < lastx:\n            (x0, x1) = (x, lastx)\n        else:\n            (x0, x1) = (lastx, x)\n        if x0 < Xmin:\n            x0 = Xmin\n        if x1 > Xmax:\n            x1 = Xmax\n    else:\n        if x > lastx:\n            (x0, x1) = (x, lastx)\n        else:\n            (x0, x1) = (lastx, x)\n        if x0 > Xmin:\n            x0 = Xmin\n        if x1 < Xmax:\n            x1 = Xmax\n    if twiny:\n        (y0, y1) = (Ymin, Ymax)\n    elif Ymin < Ymax:\n        if y < lasty:\n            (y0, y1) = (y, lasty)\n        else:\n            (y0, y1) = (lasty, y)\n        if y0 < Ymin:\n            y0 = Ymin\n        if y1 > Ymax:\n            y1 = Ymax\n    else:\n        if y > lasty:\n            (y0, y1) = (y, lasty)\n        else:\n            (y0, y1) = (lasty, y)\n        if y0 > Ymin:\n            y0 = Ymin\n        if y1 < Ymax:\n            y1 = Ymax\n    if direction == 'in':\n        if mode == 'x':\n            self.set_xlim((x0, x1))\n        elif mode == 'y':\n            self.set_ylim((y0, y1))\n        else:\n            self.set_xlim((x0, x1))\n            self.set_ylim((y0, y1))\n    elif direction == 'out':\n        if self.get_xscale() == 'log':\n            alpha = np.log(Xmax / Xmin) / np.log(x1 / x0)\n            rx1 = pow(Xmin / x0, alpha) * Xmin\n            rx2 = pow(Xmax / x0, alpha) * Xmin\n        else:\n            alpha = (Xmax - Xmin) / (x1 - x0)\n            rx1 = alpha * (Xmin - x0) + Xmin\n            rx2 = alpha * (Xmax - x0) + Xmin\n        if self.get_yscale() == 'log':\n            alpha = np.log(Ymax / Ymin) / np.log(y1 / y0)\n            ry1 = pow(Ymin / y0, alpha) * Ymin\n            ry2 = pow(Ymax / y0, alpha) * Ymin\n        else:\n            alpha = (Ymax - Ymin) / (y1 - y0)\n            ry1 = alpha * (Ymin - y0) + Ymin\n            ry2 = alpha * (Ymax - y0) + Ymin\n        if mode == 'x':\n            self.set_xlim((rx1, rx2))\n        elif mode == 'y':\n            self.set_ylim((ry1, ry2))\n        else:\n            self.set_xlim((rx1, rx2))\n            self.set_ylim((ry1, ry2))",
                            "def start_pan(self, x, y, button):\n    \"\"\"\n    Called when a pan operation has started.\n\n    *x*, *y* are the mouse coordinates in display coords.\n    button is the mouse button number:\n\n    * 1: LEFT\n    * 2: MIDDLE\n    * 3: RIGHT\n\n    .. note::\n\n        Intended to be overridden by new projection types.\n\n    \"\"\"\n    self._pan_start = types.SimpleNamespace(lim=self.viewLim.frozen(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), bbox=self.bbox.frozen(), x=x, y=y)",
                            "def end_pan(self):\n    \"\"\"\n    Called when a pan operation completes (when the mouse button\n    is up.)\n\n    .. note::\n\n        Intended to be overridden by new projection types.\n\n    \"\"\"\n    del self._pan_start",
                            "def drag_pan(self, button, key, x, y):\n    \"\"\"\n    Called when the mouse moves during a pan operation.\n\n    *button* is the mouse button number:\n\n    * 1: LEFT\n    * 2: MIDDLE\n    * 3: RIGHT\n\n    *key* is a \"shift\" key\n\n    *x*, *y* are the mouse coordinates in display coords.\n\n    .. note::\n\n        Intended to be overridden by new projection types.\n\n    \"\"\"\n\n    def format_deltas(key, dx, dy):\n        if key == 'control':\n            if abs(dx) > abs(dy):\n                dy = dx\n            else:\n                dx = dy\n        elif key == 'x':\n            dy = 0\n        elif key == 'y':\n            dx = 0\n        elif key == 'shift':\n            if 2 * abs(dx) < abs(dy):\n                dx = 0\n            elif 2 * abs(dy) < abs(dx):\n                dy = 0\n            elif abs(dx) > abs(dy):\n                dy = dy / abs(dy) * abs(dx)\n            else:\n                dx = dx / abs(dx) * abs(dy)\n        return (dx, dy)\n    p = self._pan_start\n    dx = x - p.x\n    dy = y - p.y\n    if dx == dy == 0:\n        return\n    if button == 1:\n        (dx, dy) = format_deltas(key, dx, dy)\n        result = p.bbox.translated(-dx, -dy).transformed(p.trans_inverse)\n    elif button == 3:\n        try:\n            dx = -dx / self.bbox.width\n            dy = -dy / self.bbox.height\n            (dx, dy) = format_deltas(key, dx, dy)\n            if self.get_aspect() != 'auto':\n                dx = dy = 0.5 * (dx + dy)\n            alpha = np.power(10.0, (dx, dy))\n            start = np.array([p.x, p.y])\n            oldpoints = p.lim.transformed(p.trans)\n            newpoints = start + alpha * (oldpoints - start)\n            result = mtransforms.Bbox(newpoints).transformed(p.trans_inverse)\n        except OverflowError:\n            cbook._warn_external('Overflow while panning')\n            return\n    else:\n        return\n    valid = np.isfinite(result.transformed(p.trans))\n    points = result.get_points().astype(object)\n    points[~valid] = None\n    self.set_xlim(points[:, 0])\n    self.set_ylim(points[:, 1])",
                            "def get_children(self):\n    return [*self.collections, *self.patches, *self.lines, *self.texts, *self.artists, *self.spines.values(), *self._get_axis_list(), self.title, self._left_title, self._right_title, *self.tables, *self.images, *self.child_axes, *([self.legend_] if self.legend_ is not None else []), self.patch]",
                            "def contains(self, mouseevent):\n    (inside, info) = self._default_contains(mouseevent)\n    if inside is not None:\n        return (inside, info)\n    return self.patch.contains(mouseevent)",
                            "def contains_point(self, point):\n    \"\"\"\n    Return whether *point* (pair of pixel coordinates) is inside the axes\n    patch.\n    \"\"\"\n    return self.patch.contains_point(point, radius=1.0)",
                            "def get_default_bbox_extra_artists(self):\n    \"\"\"\n    Return a default list of artists that are used for the bounding box\n    calculation.\n\n    Artists are excluded either by not being visible or\n    ``artist.set_in_layout(False)``.\n    \"\"\"\n    artists = self.get_children()\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n    if not self.axison:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n    return [artist for artist in artists if artist.get_visible() and artist.get_in_layout()]",
                            "def get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None):\n    \"\"\"\n    Return the tight bounding box of the axes, including axis and their\n    decorators (xlabel, title, etc).\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` instance\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of the axes are\n        included in the tight bounding box.\n\n    call_axes_locator : boolean (default ``True``)\n        If *call_axes_locator* is ``False``, it does not call the\n        ``_axes_locator`` attribute, which is necessary to get the correct\n        bounding box. ``call_axes_locator=False`` can be used if the\n        caller is only interested in the relative size of the tightbbox\n        compared to the axes bbox.\n\n    Returns\n    -------\n    bbox : `.BboxBase`\n        bounding box in figure pixel coordinates.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_window_extent\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.Spine.get_window_extent\n\n    \"\"\"\n    bb = []\n    if not self.get_visible():\n        return None\n    locator = self.get_axes_locator()\n    if locator and call_axes_locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n    if self.axison:\n        bb_xaxis = self.xaxis.get_tightbbox(renderer)\n        if bb_xaxis:\n            bb.append(bb_xaxis)\n        bb_yaxis = self.yaxis.get_tightbbox(renderer)\n        if bb_yaxis:\n            bb.append(bb_yaxis)\n    self._update_title_position(renderer)\n    axbbox = self.get_window_extent(renderer)\n    bb.append(axbbox)\n    self._update_title_position(renderer)\n    if self.title.get_visible():\n        bb.append(self.title.get_window_extent(renderer))\n    if self._left_title.get_visible():\n        bb.append(self._left_title.get_window_extent(renderer))\n    if self._right_title.get_visible():\n        bb.append(self._right_title.get_window_extent(renderer))\n    bb.append(self.get_window_extent(renderer))\n    bbox_artists = bbox_extra_artists\n    if bbox_artists is None:\n        bbox_artists = self.get_default_bbox_extra_artists()\n    for a in bbox_artists:\n        clip_extent = a._get_clipping_extent_bbox()\n        if clip_extent is not None:\n            clip_extent = mtransforms.Bbox.intersection(clip_extent, axbbox)\n            if np.all(clip_extent.extents == axbbox.extents):\n                continue\n        bbox = a.get_tightbbox(renderer)\n        if bbox is not None and 0 < bbox.width < np.inf and (0 < bbox.height < np.inf):\n            bb.append(bbox)\n    _bbox = mtransforms.Bbox.union([b for b in bb if b.width != 0 or b.height != 0])\n    return _bbox",
                            "def _make_twin_axes(self, *args, **kwargs):\n    \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n    if 'sharex' in kwargs and 'sharey' in kwargs:\n        raise ValueError('Twinned Axes may share only one axis')\n    ax2 = self.figure.add_axes(self.get_position(True), *args, **kwargs)\n    self.set_adjustable('datalim')\n    ax2.set_adjustable('datalim')\n    self._twinned_axes.join(self, ax2)\n    return ax2",
                            "def twinx(self):\n    \"\"\"\n    Create a twin Axes sharing the xaxis.\n\n    Create a new Axes with an invisible x-axis and an independent\n    y-axis positioned opposite to the original one (i.e. at right). The\n    x-axis autoscale setting will be inherited from the original\n    Axes.  To ensure that the tick marks of both y-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    ax_twin : Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twinx, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharex=self)\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    ax2.yaxis.set_offset_position('right')\n    ax2.set_autoscalex_on(self.get_autoscalex_on())\n    self.yaxis.tick_left()\n    ax2.xaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                            "def twiny(self):\n    \"\"\"\n    Create a twin Axes sharing the yaxis.\n\n    Create a new Axes with an invisible y-axis and an independent\n    x-axis positioned opposite to the original one (i.e. at top). The\n    y-axis autoscale setting will be inherited from the original Axes.\n    To ensure that the tick marks of both x-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    ax_twin : Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twiny, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharey=self)\n    ax2.xaxis.tick_top()\n    ax2.xaxis.set_label_position('top')\n    ax2.set_autoscaley_on(self.get_autoscaley_on())\n    self.xaxis.tick_bottom()\n    ax2.yaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                            "def get_shared_x_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for x axes.\"\"\"\n    return self._shared_x_axes",
                            "def get_shared_y_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n    return self._shared_y_axes",
                            "def _process_single_axis(data, axis, unit_name, kwargs):\n    if axis is None:\n        return kwargs\n    if data is not None:\n        if not axis.have_units():\n            axis.update_units(data)\n    if kwargs is not None:\n        units = kwargs.pop(unit_name, axis.units)\n        if self.name == 'polar':\n            polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n            units = kwargs.pop(polar_units[unit_name], units)\n        if units != axis.units:\n            axis.set_units(units)\n            if data is not None:\n                axis.update_units(data)\n    return kwargs",
                            "def handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound):\n    if not (scale and autoscaleon):\n        return\n    shared = shared_axes.get_siblings(self)\n    dl = [ax.dataLim for ax in shared]\n    finite_dl = [d for d in dl if np.isfinite(d).all()]\n    if len(finite_dl):\n        x_finite = [d for d in dl if np.isfinite(d.intervalx).all() and d not in finite_dl]\n        y_finite = [d for d in dl if np.isfinite(d.intervaly).all() and d not in finite_dl]\n        dl = finite_dl\n        dl.extend(x_finite)\n        dl.extend(y_finite)\n    bb = mtransforms.BboxBase.union(dl)\n    vl = None\n    if not np.isfinite(bb.intervalx).all():\n        vl = mtransforms.BboxBase.union([ax.viewLim for ax in shared])\n        bb.intervalx = vl.intervalx\n    if not np.isfinite(bb.intervaly).all():\n        if vl is None:\n            vl = mtransforms.BboxBase.union([ax.viewLim for ax in shared])\n        bb.intervaly = vl.intervaly\n    (x0, x1) = getattr(bb, interval)\n    locator = axis.get_major_locator()\n    (x0, x1) = locator.nonsingular(x0, x1)\n\n    def tol(x):\n        return 1e-05 * abs(x) + 1e-08\n    i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n    x0bound = stickies[i0] if i0 != -1 else None\n    i1 = stickies.searchsorted(x1 - tol(x1))\n    x1bound = stickies[i1] if i1 != len(stickies) else None\n    minpos = getattr(bb, minpos)\n    transform = axis.get_transform()\n    inverse_trans = transform.inverted()\n    (x0, x1) = axis._scale.limit_range_for_scale(x0, x1, minpos)\n    (x0t, x1t) = transform.transform([x0, x1])\n    delta = (x1t - x0t) * margin\n    if not np.isfinite(delta):\n        delta = 0\n    (x0, x1) = inverse_trans.transform([x0t - delta, x1t + delta])\n    if x0bound is not None:\n        x0 = max(x0, x0bound)\n    if x1bound is not None:\n        x1 = min(x1, x1bound)\n    if not self._tight:\n        (x0, x1) = locator.view_limits(x0, x1)\n    set_bound(x0, x1)",
                            "def format_deltas(key, dx, dy):\n    if key == 'control':\n        if abs(dx) > abs(dy):\n            dy = dx\n        else:\n            dx = dy\n    elif key == 'x':\n        dy = 0\n    elif key == 'y':\n        dx = 0\n    elif key == 'shift':\n        if 2 * abs(dx) < abs(dy):\n            dx = 0\n        elif 2 * abs(dy) < abs(dx):\n            dy = 0\n        elif abs(dx) > abs(dy):\n            dy = dy / abs(dy) * abs(dx)\n        else:\n            dx = dx / abs(dx) * abs(dy)\n    return (dx, dy)",
                            "def tol(x):\n    return 1e-05 * abs(x) + 1e-08"
                        ],
                        "constructor_variables": [
                            "self._position = rect",
                            "self._position = mtransforms.Bbox.from_bounds(*rect)",
                            "self._originalPosition = self._position.frozen()",
                            "self.axes = self",
                            "self._aspect = 'auto'",
                            "self._adjustable = 'box'",
                            "self._anchor = 'C'",
                            "self._stale_viewlim_x = False",
                            "self._stale_viewlim_y = False",
                            "self._sharex = sharex",
                            "self._sharey = sharey",
                            "self.spines = self._gen_axes_spines()",
                            "self._facecolor = facecolor",
                            "self._frameon = frameon",
                            "self._rasterization_zorder = None",
                            "self.fmt_xdata = None",
                            "self.fmt_ydata = None",
                            "self._xcid = self.xaxis.callbacks.connect('units finalize', lambda : self._on_units_changed(scalex=True))",
                            "self._ycid = self.yaxis.callbacks.connect('units finalize', lambda : self._on_units_changed(scaley=True))",
                            "self._layoutbox = None",
                            "self._poslayoutbox = None"
                        ],
                        "class_level_variables": [
                            "name = 'rectilinear'",
                            "_shared_x_axes = cbook.Grouper()",
                            "_shared_y_axes = cbook.Grouper()",
                            "_twinned_axes = cbook.Grouper()",
                            "get_fc = get_facecolor",
                            "set_fc = set_facecolor"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__str__(self)",
                            "__init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, **kwargs)",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "get_window_extent(self, *args, **kwargs)",
                            "_init_axis(self)",
                            "set_figure(self, fig)",
                            "_unstale_viewLim(self)",
                            "viewLim(self)",
                            "_request_autoscale_view(self, tight=None, scalex=True, scaley=True)",
                            "_set_lim_and_transforms(self)",
                            "get_xaxis_transform(self, which='grid')",
                            "get_xaxis_text1_transform(self, pad_points)",
                            "get_xaxis_text2_transform(self, pad_points)",
                            "get_yaxis_transform(self, which='grid')",
                            "get_yaxis_text1_transform(self, pad_points)",
                            "get_yaxis_text2_transform(self, pad_points)",
                            "_update_transScale(self)",
                            "get_position(self, original=False)",
                            "set_position(self, pos, which='both')",
                            "_set_position(self, pos, which='both')",
                            "reset_position(self)",
                            "set_axes_locator(self, locator)",
                            "get_axes_locator(self)",
                            "_set_artist_props(self, a)",
                            "_gen_axes_patch(self)",
                            "_gen_axes_spines(self, locations=None, offset=0.0, units='inches')",
                            "cla(self)",
                            "clear(self)",
                            "get_facecolor(self)",
                            "set_facecolor(self, color)",
                            "_set_title_offset_trans(self, title_offset_points)",
                            "set_prop_cycle(self, *args, **kwargs)",
                            "get_aspect(self)",
                            "set_aspect(self, aspect, adjustable=None, anchor=None, share=False)",
                            "get_adjustable(self)",
                            "set_adjustable(self, adjustable, share=False)",
                            "get_anchor(self)",
                            "set_anchor(self, anchor, share=False)",
                            "get_data_ratio(self)",
                            "get_data_ratio_log(self)",
                            "apply_aspect(self, position=None)",
                            "axis(self, *args, **kwargs)",
                            "get_legend(self)",
                            "get_images(self)",
                            "get_lines(self)",
                            "get_xaxis(self)",
                            "get_xgridlines(self)",
                            "get_xticklines(self)",
                            "get_yaxis(self)",
                            "get_ygridlines(self)",
                            "get_yticklines(self)",
                            "_sci(self, im)",
                            "_gci(self)",
                            "has_data(self)",
                            "add_artist(self, a)",
                            "add_child_axes(self, ax)",
                            "add_collection(self, collection, autolim=True)",
                            "add_image(self, image)",
                            "_update_image_limits(self, image)",
                            "add_line(self, line)",
                            "_add_text(self, txt)",
                            "_update_line_limits(self, line)",
                            "add_patch(self, p)",
                            "_update_patch_limits(self, patch)",
                            "add_table(self, tab)",
                            "add_container(self, container)",
                            "_on_units_changed(self, scalex=False, scaley=False)",
                            "relim(self, visible_only=False)",
                            "update_datalim(self, xys, updatex=True, updatey=True)",
                            "update_datalim_bounds(self, bounds)",
                            "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
                            "in_axes(self, mouseevent)",
                            "get_autoscale_on(self)",
                            "get_autoscalex_on(self)",
                            "get_autoscaley_on(self)",
                            "set_autoscale_on(self, b)",
                            "set_autoscalex_on(self, b)",
                            "set_autoscaley_on(self, b)",
                            "use_sticky_edges(self)",
                            "use_sticky_edges(self, b)",
                            "set_xmargin(self, m)",
                            "set_ymargin(self, m)",
                            "margins(self, *margins)",
                            "set_rasterization_zorder(self, z)",
                            "get_rasterization_zorder(self)",
                            "autoscale(self, enable=True, axis='both', tight=None)",
                            "autoscale_view(self, tight=None, scalex=True, scaley=True)",
                            "_get_axis_list(self)",
                            "_get_axis_map(self)",
                            "_update_title_position(self, renderer)",
                            "draw(self, renderer=None, inframe=False)",
                            "draw_artist(self, a)",
                            "redraw_in_frame(self)",
                            "get_renderer_cache(self)",
                            "get_frame_on(self)",
                            "set_frame_on(self, b)",
                            "get_axisbelow(self)",
                            "set_axisbelow(self, b)",
                            "grid(self, b=None, which='major', axis='both', **kwargs)",
                            "ticklabel_format(self)",
                            "locator_params(self, axis='both', tight=None, **kwargs)",
                            "tick_params(self, axis='both', **kwargs)",
                            "set_axis_off(self)",
                            "set_axis_on(self)",
                            "invert_xaxis(self)",
                            "xaxis_inverted(self)",
                            "get_xbound(self)",
                            "set_xbound(self, lower=None, upper=None)",
                            "get_xlim(self)",
                            "_validate_converted_limits(self, limit, convert)",
                            "set_xlim(self, left=None, right=None, emit=True, auto=False)",
                            "get_xscale(self)",
                            "set_xscale(self, value, **kwargs)",
                            "get_xticks(self, minor=False)",
                            "set_xticks(self, ticks, minor=False)",
                            "get_xmajorticklabels(self)",
                            "get_xminorticklabels(self)",
                            "get_xticklabels(self, minor=False, which=None)",
                            "set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs)",
                            "invert_yaxis(self)",
                            "yaxis_inverted(self)",
                            "get_ybound(self)",
                            "set_ybound(self, lower=None, upper=None)",
                            "get_ylim(self)",
                            "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                            "get_yscale(self)",
                            "set_yscale(self, value, **kwargs)",
                            "get_yticks(self, minor=False)",
                            "set_yticks(self, ticks, minor=False)",
                            "get_ymajorticklabels(self)",
                            "get_yminorticklabels(self)",
                            "get_yticklabels(self, minor=False, which=None)",
                            "set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs)",
                            "xaxis_date(self, tz=None)",
                            "yaxis_date(self, tz=None)",
                            "format_xdata(self, x)",
                            "format_ydata(self, y)",
                            "format_coord(self, x, y)",
                            "minorticks_on(self)",
                            "minorticks_off(self)",
                            "can_zoom(self)",
                            "can_pan(self)",
                            "get_navigate(self)",
                            "set_navigate(self, b)",
                            "get_navigate_mode(self)",
                            "set_navigate_mode(self, b)",
                            "_get_view(self)",
                            "_set_view(self, view)",
                            "_set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False)",
                            "start_pan(self, x, y, button)",
                            "end_pan(self)",
                            "drag_pan(self, button, key, x, y)",
                            "get_children(self)",
                            "contains(self, mouseevent)",
                            "contains_point(self, point)",
                            "get_default_bbox_extra_artists(self)",
                            "get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None)",
                            "_make_twin_axes(self, *args, **kwargs)",
                            "twinx(self)",
                            "twiny(self)",
                            "get_shared_x_axes(self)",
                            "get_shared_y_axes(self)",
                            "_process_single_axis(data, axis, unit_name, kwargs)",
                            "handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound)",
                            "format_deltas(key, dx, dy)",
                            "tol(x)"
                        ],
                        "class_level_variable_names": [
                            "name",
                            "_shared_x_axes",
                            "_shared_y_axes",
                            "_twinned_axes",
                            "get_fc",
                            "set_fc"
                        ],
                        "constructor_variable_names": [
                            "_sharex",
                            "_anchor",
                            "_facecolor",
                            "fmt_ydata",
                            "_layoutbox",
                            "_rasterization_zorder",
                            "facecolor",
                            "axes",
                            "_frameon",
                            "_aspect",
                            "_sharey",
                            "_poslayoutbox",
                            "_stale_viewlim_x",
                            "_ycid",
                            "_originalPosition",
                            "_adjustable",
                            "_stale_viewlim_y",
                            "spines",
                            "_xcid",
                            "fmt_xdata",
                            "_position"
                        ]
                    },
                    "used_imports": [],
                    "variable_values": [
                        [
                            {
                                "position": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.get_position": {
                                    "variable_value": "<bound method _AxesBase.get_position of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>",
                                    "variable_type": "Axes",
                                    "variable_shape": null
                                },
                                "aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_aspect": {
                                    "variable_value": "<bound method _AxesBase.get_aspect of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._set_position": {
                                    "variable_value": "<bound method _AxesBase._set_position of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fig_height": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_size_inches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_figure": {
                                    "variable_value": "<bound method Artist.get_figure of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._adjustable": {
                                    "variable_value": "'datalim'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self._twinned_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7ff1f5b5c2b0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "box_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_data_ratio": {
                                    "variable_value": "<bound method _AxesBase.get_data_ratio of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "pb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "position.frozen": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pb1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb.shrunk_to_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb1.anchored": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_anchor": {
                                    "variable_value": "<bound method _AxesBase.get_anchor of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x_trf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x7ff1fcbb1220>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "y_trf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x7ff1fcbbd8b0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x_trf.transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xbound": {
                                    "variable_value": "<bound method _AxesBase.get_xbound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_trf.transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ybound": {
                                    "variable_value": "<bound method _AxesBase.get_ybound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xsize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ysize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "h": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "position.bounds": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "data_ratio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_expander": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dataLim": {
                                    "variable_value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "x0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x_trf.inverted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dL.intervalx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_trf.inverted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dL.intervaly": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ymarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Ysize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Xsize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Xmarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Ymarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ym": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shared_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7ff1fd0cdcd0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "shared_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7ff1f5b5c250>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "adjust_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adjy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_ybound": {
                                    "variable_value": "<bound method _AxesBase.set_ybound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xbound": {
                                    "variable_value": "<bound method _AxesBase.set_xbound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "position": {
                                    "variable_value": "Bbox([[0.1, 0.1], [0.9, 0.9]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "self.get_position": {
                                    "variable_value": "<bound method _AxesBase.get_position of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>",
                                    "variable_type": "Axes",
                                    "variable_shape": null
                                },
                                "aspect": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.get_aspect": {
                                    "variable_value": "<bound method _AxesBase.get_aspect of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._set_position": {
                                    "variable_value": "<bound method _AxesBase._set_position of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_width": {
                                    "variable_value": "10.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "fig_height": {
                                    "variable_value": "10.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "get_size_inches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_figure": {
                                    "variable_value": "<bound method Artist.get_figure of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_aspect": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self._adjustable": {
                                    "variable_value": "'datalim'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self._twinned_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7ff1f5b5c2b0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "box_aspect": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.get_data_ratio": {
                                    "variable_value": "<bound method _AxesBase.get_data_ratio of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "pb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "position.frozen": {
                                    "variable_value": "<bound method BboxBase.frozen of Bbox([[0.1, 0.1], [0.9, 0.9]])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "pb1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb.shrunk_to_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb1.anchored": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_anchor": {
                                    "variable_value": "<bound method _AxesBase.get_anchor of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x_trf": {
                                    "variable_value": "<matplotlib.scale.LogTransform object at 0x7ff1fc8a1af0>",
                                    "variable_type": "LogTransform",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x7ff1fcbb1220>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "y_trf": {
                                    "variable_value": "<matplotlib.scale.LogitTransform object at 0x7ff1fc8d3670>",
                                    "variable_type": "LogitTransform",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x7ff1fcbbd8b0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "xmax": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "x_trf.transform": {
                                    "variable_value": "<bound method Transform.transform of <matplotlib.scale.LogTransform object at 0x7ff1fc8a1af0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xbound": {
                                    "variable_value": "<bound method _AxesBase.get_xbound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "-2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ymax": {
                                    "variable_value": "-1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y_trf.transform": {
                                    "variable_value": "<bound method Transform.transform of <matplotlib.scale.LogitTransform object at 0x7ff1fc8d3670>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_ybound": {
                                    "variable_value": "<bound method _AxesBase.get_ybound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xsize": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ysize": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "l": {
                                    "variable_value": "0.1",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "b": {
                                    "variable_value": "0.1",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "w": {
                                    "variable_value": "0.8",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "h": {
                                    "variable_value": "0.8",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "position.bounds": {
                                    "variable_value": "(0.1, 0.1, 0.8, 0.8)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "data_ratio": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y_expander": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "dL": {
                                    "variable_value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "self.dataLim": {
                                    "variable_value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "x0": {
                                    "variable_value": "2.51188643150958",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "x1": {
                                    "variable_value": "3.9810717055349722",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x_trf.inverted": {
                                    "variable_value": "<bound method LogTransform.inverted of <matplotlib.scale.LogTransform object at 0x7ff1fc8a1af0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "dL.intervalx": {
                                    "variable_value": "array([0.4, 0.6])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "y0": {
                                    "variable_value": "-2.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y1": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y_trf.inverted": {
                                    "variable_value": "<bound method LogitTransform.inverted of <matplotlib.scale.LogitTransform object at 0x7ff1fc8d3670>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "dL.intervaly": {
                                    "variable_value": "array([0.4, 0.6])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "xr": {
                                    "variable_value": "1.5426445377266618",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "yr": {
                                    "variable_value": "0.0881866020395845",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "xmarg": {
                                    "variable_value": "0.45735546227333823",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ymarg": {
                                    "variable_value": "0.9118133979604155",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Ysize": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Xsize": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Xmarg": {
                                    "variable_value": "-0.5426445377266618",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Ymarg": {
                                    "variable_value": "1.9118133979604155",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "xm": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ym": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shared_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7ff1fd0cdcd0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "shared_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7ff1f5b5c250>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "adjust_y": {
                                    "variable_value": "True",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "adjy": {
                                    "variable_value": "True",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "yc": {
                                    "variable_value": "-1.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.set_ybound": {
                                    "variable_value": "<bound method _AxesBase.set_ybound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xbound": {
                                    "variable_value": "<bound method _AxesBase.set_xbound of <matplotlib.axes._axes.Axes object at 0x7ff1fcbb19a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "position": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.get_position": {
                                    "variable_value": "<bound method _AxesBase.get_position of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>",
                                    "variable_type": "Axes",
                                    "variable_shape": null
                                },
                                "aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_aspect": {
                                    "variable_value": "<bound method _AxesBase.get_aspect of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._set_position": {
                                    "variable_value": "<bound method _AxesBase._set_position of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fig_height": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_size_inches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_figure": {
                                    "variable_value": "<bound method Artist.get_figure of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._adjustable": {
                                    "variable_value": "'datalim'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self._twinned_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7f6f2195d2b0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "box_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_data_ratio": {
                                    "variable_value": "<bound method _AxesBase.get_data_ratio of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "pb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "position.frozen": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pb1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb.shrunk_to_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb1.anchored": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_anchor": {
                                    "variable_value": "<bound method _AxesBase.get_anchor of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x_trf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x7f6f2820c220>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "y_trf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x7f6f28042220>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x_trf.transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xbound": {
                                    "variable_value": "<bound method _AxesBase.get_xbound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_trf.transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ybound": {
                                    "variable_value": "<bound method _AxesBase.get_ybound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xsize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ysize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "w": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "h": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "position.bounds": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "data_ratio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_expander": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dataLim": {
                                    "variable_value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "x0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dL.intervalx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dL.intervaly": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xmarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ymarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Ysize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Xsize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Xmarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Ymarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ym": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shared_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7f6f28ec9cd0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "shared_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7f6f2195d250>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "adjust_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adjy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_ybound": {
                                    "variable_value": "<bound method _AxesBase.set_ybound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_trf.inverted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_xbound": {
                                    "variable_value": "<bound method _AxesBase.set_xbound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x_trf.inverted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "position": {
                                    "variable_value": "Bbox([[0.1, 0.1], [0.9, 0.9]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "self.get_position": {
                                    "variable_value": "<bound method _AxesBase.get_position of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>",
                                    "variable_type": "Axes",
                                    "variable_shape": null
                                },
                                "aspect": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.get_aspect": {
                                    "variable_value": "<bound method _AxesBase.get_aspect of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._set_position": {
                                    "variable_value": "<bound method _AxesBase._set_position of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_width": {
                                    "variable_value": "10.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "fig_height": {
                                    "variable_value": "10.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "get_size_inches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_figure": {
                                    "variable_value": "<bound method Artist.get_figure of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "fig_aspect": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self._adjustable": {
                                    "variable_value": "'datalim'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self._twinned_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7f6f2195d2b0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "box_aspect": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.get_data_ratio": {
                                    "variable_value": "<bound method _AxesBase.get_data_ratio of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "pb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "position.frozen": {
                                    "variable_value": "<bound method BboxBase.frozen of Bbox([[0.1, 0.1], [0.9, 0.9]])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "pb1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb.shrunk_to_aspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pb1.anchored": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_anchor": {
                                    "variable_value": "<bound method _AxesBase.get_anchor of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x_trf": {
                                    "variable_value": "<matplotlib.scale.LogTransform object at 0x7f6f280474c0>",
                                    "variable_type": "LogTransform",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x7f6f2820c220>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "y_trf": {
                                    "variable_value": "<matplotlib.scale.LogitTransform object at 0x7f6f281a4fd0>",
                                    "variable_type": "LogitTransform",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x7f6f28042220>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "xmax": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "x_trf.transform": {
                                    "variable_value": "<bound method Transform.transform of <matplotlib.scale.LogTransform object at 0x7f6f280474c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xbound": {
                                    "variable_value": "<bound method _AxesBase.get_xbound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "-2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ymax": {
                                    "variable_value": "-1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y_trf.transform": {
                                    "variable_value": "<bound method Transform.transform of <matplotlib.scale.LogitTransform object at 0x7f6f281a4fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_ybound": {
                                    "variable_value": "<bound method _AxesBase.get_ybound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xsize": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ysize": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "l": {
                                    "variable_value": "0.1",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "b": {
                                    "variable_value": "0.1",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "w": {
                                    "variable_value": "0.8",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "h": {
                                    "variable_value": "0.8",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "position.bounds": {
                                    "variable_value": "(0.1, 0.1, 0.8, 0.8)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "data_ratio": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y_expander": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "dL": {
                                    "variable_value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "self.dataLim": {
                                    "variable_value": "Bbox([[0.4, 0.4], [0.6, 0.6]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "x0": {
                                    "variable_value": "0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "x1": {
                                    "variable_value": "1.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "dL.intervalx": {
                                    "variable_value": "array([0.4, 0.6])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "y0": {
                                    "variable_value": "-0.17609125905568118",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "y1": {
                                    "variable_value": "0.17609125905568115",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "dL.intervaly": {
                                    "variable_value": "array([0.4, 0.6])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "xr": {
                                    "variable_value": "0.1848958220084653",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "yr": {
                                    "variable_value": "0.3697916440169305",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "xmarg": {
                                    "variable_value": "1.8151041779915347",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ymarg": {
                                    "variable_value": "0.6302083559830696",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Ysize": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Xsize": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Xmarg": {
                                    "variable_value": "0.8151041779915347",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "Ymarg": {
                                    "variable_value": "1.6302083559830696",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "xm": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ym": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shared_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7f6f28ec9cd0>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "shared_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x7f6f2195d250>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "adjust_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "adjy": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "yc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.set_ybound": {
                                    "variable_value": "<bound method _AxesBase.set_ybound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_trf.inverted": {
                                    "variable_value": "<bound method LogitTransform.inverted of <matplotlib.scale.LogitTransform object at 0x7f6f281a4fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "xc": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.set_xbound": {
                                    "variable_value": "<bound method _AxesBase.set_xbound of <matplotlib.axes._axes.Axes object at 0x7f6f2821ab50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x_trf.inverted": {
                                    "variable_value": "<bound method LogTransform.inverted of <matplotlib.scale.LogTransform object at 0x7f6f280474c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _process_plot_format(fmt):\n    \"\"\"\n    Convert a MATLAB style color/line style format string to a (*linestyle*,\n    *marker*, *color*) tuple.\n\n    Example format strings include:\n\n    * 'ko': black circles\n    * '.b': blue dots\n    * 'r--': red dashed lines\n    * 'C2--': the third color in the color cycle, dashed lines\n\n    See Also\n    --------\n    matplotlib.Line2D.lineStyles, matplotlib.colors.cnames\n        All possible styles and color format strings.\n    \"\"\"\n\n    linestyle = None\n    marker = None\n    color = None\n\n    # Is fmt just a colorspec?\n    try:\n        color = mcolors.to_rgba(fmt)\n\n        # We need to differentiate grayscale '1.0' from tri_down marker '1'\n        try:\n            fmtint = str(int(fmt))\n        except ValueError:\n            return linestyle, marker, color  # Yes\n        else:\n            if fmt != fmtint:\n                # user definitely doesn't want tri_down marker\n                return linestyle, marker, color  # Yes\n            else:\n                # ignore converted color\n                color = None\n    except ValueError:\n        pass  # No, not just a color.\n\n    i = 0\n    while i < len(fmt):\n        c = fmt[i]\n        if fmt[i:i+2] in mlines.lineStyles:  # First, the two-char styles.\n            if linestyle is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two linestyle symbols' % fmt)\n            linestyle = fmt[i:i+2]\n            i += 2\n        elif c in mlines.lineStyles:\n            if linestyle is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two linestyle symbols' % fmt)\n            linestyle = c\n            i += 1\n        elif c in mlines.lineMarkers:\n            if marker is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two marker symbols' % fmt)\n            marker = c\n            i += 1\n        elif c in mcolors.get_named_colors_mapping():\n            if color is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two color symbols' % fmt)\n            color = c\n            i += 1\n        elif c == 'C' and i < len(fmt) - 1:\n            color_cycle_number = int(fmt[i + 1])\n            color = mcolors.to_rgba(\"C{}\".format(color_cycle_number))\n            i += 2\n        else:\n            raise ValueError(\n                'Unrecognized character %c in format string' % c)\n\n    if linestyle is None and marker is None:\n        linestyle = rcParams['lines.linestyle']\n    if linestyle is None:\n        linestyle = 'None'\n    if marker is None:\n        marker = 'None'\n\n    return linestyle, marker, color",
                "def __init__(self, axes, command='plot'):\n    self.axes = axes\n    self.command = command\n    self.set_prop_cycle()",
                "def __getstate__(self):\n    # note: it is not possible to pickle a generator (and thus a cycler).\n    return {'axes': self.axes, 'command': self.command}",
                "def __setstate__(self, state):\n    self.__dict__ = state.copy()\n    self.set_prop_cycle()",
                "def set_prop_cycle(self, *args, **kwargs):\n    # Can't do `args == (None,)` as that crashes cycler.\n    if not (args or kwargs) or (len(args) == 1 and args[0] is None):\n        prop_cycler = rcParams['axes.prop_cycle']\n    else:\n        prop_cycler = cycler(*args, **kwargs)\n\n    self.prop_cycler = itertools.cycle(prop_cycler)\n    # This should make a copy\n    self._prop_keys = prop_cycler.keys",
                "def __call__(self, *args, **kwargs):\n    self.axes._process_unit_info(kwargs=kwargs)\n\n    for pos_only in \"xy\":\n        if pos_only in kwargs:\n            raise TypeError(\"{} got an unexpected keyword argument {!r}\"\n                            .format(self.command, pos_only))\n\n    if not args:\n        return\n\n    # Process the 'data' kwarg.\n    data = kwargs.pop(\"data\", None)\n    if data is not None:\n        replaced = [mpl._replacer(data, arg) for arg in args]\n        if len(args) == 1:\n            label_namer_idx = 0\n        elif len(args) == 2:  # Can be x, y or y, c.\n            # Figure out what the second argument is.\n            # 1) If the second argument cannot be a format shorthand, the\n            #    second argument is the label_namer.\n            # 2) Otherwise (it could have been a format shorthand),\n            #    a) if we did perform a substitution, emit a warning, and\n            #       use it as label_namer.\n            #    b) otherwise, it is indeed a format shorthand; use the\n            #       first argument as label_namer.\n            try:\n                _process_plot_format(args[1])\n            except ValueError:  # case 1)\n                label_namer_idx = 1\n            else:\n                if replaced[1] is not args[1]:  # case 2a)\n                    cbook._warn_external(\n                        f\"Second argument {args[1]!r} is ambiguous: could \"\n                        f\"be a format string but is in 'data'; using as \"\n                        f\"data.  If it was intended as data, set the \"\n                        f\"format string to an empty string to suppress \"\n                        f\"this warning.  If it was intended as a format \"\n                        f\"string, explicitly pass the x-values as well.  \"\n                        f\"Alternatively, rename the entry in 'data'.\",\n                        RuntimeWarning)\n                    label_namer_idx = 1\n                else:  # case 2b)\n                    label_namer_idx = 0\n        elif len(args) == 3:\n            label_namer_idx = 1\n        else:\n            raise ValueError(\n                \"Using arbitrary long args with data is not supported due \"\n                \"to ambiguity of arguments; use multiple plotting calls \"\n                \"instead\")\n        if kwargs.get(\"label\") is None:\n            kwargs[\"label\"] = mpl._label_from_arg(\n                replaced[label_namer_idx], args[label_namer_idx])\n        args = replaced\n\n    # Repeatedly grab (x, y) or (x, y, format) from the front of args and\n    # massage them into arguments to plot() or fill().\n    while args:\n        this, args = args[:2], args[2:]\n        if args and isinstance(args[0], str):\n            this += args[0],\n            args = args[1:]\n        yield from self._plot_args(this, kwargs)",
                "def get_next_color(self):\n    \"\"\"Return the next color in the cycle.\"\"\"\n    if 'color' not in self._prop_keys:\n        return 'k'\n    return next(self.prop_cycler)['color']",
                "def _getdefaults(self, ignore, kw):\n    \"\"\"\n    If some keys in the property cycle (excluding those in the set\n    *ignore*) are absent or set to None in the dict *kw*, return a copy\n    of the next entry in the property cycle, excluding keys in *ignore*.\n    Otherwise, don't advance the property cycle, and return an empty dict.\n    \"\"\"\n    prop_keys = self._prop_keys - ignore\n    if any(kw.get(k, None) is None for k in prop_keys):\n        # Need to copy this dictionary or else the next time around\n        # in the cycle, the dictionary could be missing entries.\n        default_dict = next(self.prop_cycler).copy()\n        for p in ignore:\n            default_dict.pop(p, None)\n    else:\n        default_dict = {}\n    return default_dict",
                "def _setdefaults(self, defaults, kw):\n    \"\"\"\n    Add to the dict *kw* the entries in the dict *default* that are absent\n    or set to None in *kw*.\n    \"\"\"\n    for k in defaults:\n        if kw.get(k, None) is None:\n            kw[k] = defaults[k]",
                "def _makeline(self, x, y, kw, kwargs):\n    kw = {**kw, **kwargs}  # Don't modify the original kw.\n    default_dict = self._getdefaults(set(), kw)\n    self._setdefaults(default_dict, kw)\n    seg = mlines.Line2D(x, y, **kw)\n    return seg",
                "def _makefill(self, x, y, kw, kwargs):\n    # Polygon doesn't directly support unitized inputs.\n    x = self.axes.convert_xunits(x)\n    y = self.axes.convert_yunits(y)\n\n    kw = kw.copy()  # Don't modify the original kw.\n    kwargs = kwargs.copy()\n\n    # Ignore 'marker'-related properties as they aren't Polygon\n    # properties, but they are Line2D properties, and so they are\n    # likely to appear in the default cycler construction.\n    # This is done here to the defaults dictionary as opposed to the\n    # other two dictionaries because we do want to capture when a\n    # *user* explicitly specifies a marker which should be an error.\n    # We also want to prevent advancing the cycler if there are no\n    # defaults needed after ignoring the given properties.\n    ignores = {'marker', 'markersize', 'markeredgecolor',\n               'markerfacecolor', 'markeredgewidth'}\n    # Also ignore anything provided by *kwargs*.\n    for k, v in kwargs.items():\n        if v is not None:\n            ignores.add(k)\n\n    # Only using the first dictionary to use as basis\n    # for getting defaults for back-compat reasons.\n    # Doing it with both seems to mess things up in\n    # various places (probably due to logic bugs elsewhere).\n    default_dict = self._getdefaults(ignores, kw)\n    self._setdefaults(default_dict, kw)\n\n    # Looks like we don't want \"color\" to be interpreted to\n    # mean both facecolor and edgecolor for some reason.\n    # So the \"kw\" dictionary is thrown out, and only its\n    # 'color' value is kept and translated as a 'facecolor'.\n    # This design should probably be revisited as it increases\n    # complexity.\n    facecolor = kw.get('color', None)\n\n    # Throw out 'color' as it is now handled as a facecolor\n    default_dict.pop('color', None)\n\n    # To get other properties set from the cycler\n    # modify the kwargs dictionary.\n    self._setdefaults(default_dict, kwargs)\n\n    seg = mpatches.Polygon(np.column_stack((x, y)),\n                           facecolor=facecolor,\n                           fill=kwargs.get('fill', True),\n                           closed=kw['closed'])\n    seg.set(**kwargs)\n    return seg",
                "def _plot_args(self, tup, kwargs):\n    if len(tup) > 1 and isinstance(tup[-1], str):\n        linestyle, marker, color = _process_plot_format(tup[-1])\n        tup = tup[:-1]\n    elif len(tup) == 3:\n        raise ValueError('third arg must be a format string')\n    else:\n        linestyle, marker, color = None, None, None\n\n    # Don't allow any None value; these would be up-converted to one\n    # element array of None which causes problems downstream.\n    if any(v is None for v in tup):\n        raise ValueError(\"x, y, and format string must not be None\")\n\n    kw = {}\n    for k, v in zip(('linestyle', 'marker', 'color'),\n                    (linestyle, marker, color)):\n        if v is not None:\n            kw[k] = v\n\n    if len(tup) == 2:\n        x = _check_1d(tup[0])\n        y = _check_1d(tup[-1])\n    else:\n        x, y = index_of(tup[-1])\n\n    if self.axes.xaxis is not None:\n        self.axes.xaxis.update_units(x)\n    if self.axes.yaxis is not None:\n        self.axes.yaxis.update_units(y)\n\n    if x.shape[0] != y.shape[0]:\n        raise ValueError(f\"x and y must have same first dimension, but \"\n                         f\"have shapes {x.shape} and {y.shape}\")\n    if x.ndim > 2 or y.ndim > 2:\n        raise ValueError(f\"x and y can be no greater than 2-D, but have \"\n                         f\"shapes {x.shape} and {y.shape}\")\n    if x.ndim == 1:\n        x = x[:, np.newaxis]\n    if y.ndim == 1:\n        y = y[:, np.newaxis]\n\n    if self.command == 'plot':\n        func = self._makeline\n    else:\n        kw['closed'] = kwargs.get('closed', True)\n        func = self._makefill\n\n    ncx, ncy = x.shape[1], y.shape[1]\n    if ncx > 1 and ncy > 1 and ncx != ncy:\n        cbook.warn_deprecated(\n            \"2.2\", message=\"cycling among columns of inputs with \"\n            \"non-matching shapes is deprecated.\")\n    return [func(x[:, j % ncx], y[:, j % ncy], kw, kwargs)\n            for j in range(max(ncx, ncy))]",
                "def __str__(self):\n    return \"{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})\".format(\n        type(self).__name__, self._position.bounds)",
                "def __init__(self, fig, rect,\n             facecolor=None,  # defaults to rc axes.facecolor\n             frameon=True,\n             sharex=None,  # use Axes instance's xaxis info\n             sharey=None,  # use Axes instance's yaxis info\n             label='',\n             xscale=None,\n             yscale=None,\n             **kwargs\n             ):\n    \"\"\"\n    Build an axes in a figure.\n\n    Parameters\n    ----------\n    fig : `~matplotlib.figure.Figure`\n        The axes is build in the `.Figure` *fig*.\n\n    rect : [left, bottom, width, height]\n        The axes is build in the rectangle *rect*. *rect* is in\n        `.Figure` coordinates.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        The x or y `~.matplotlib.axis` is shared with the x or\n        y axis in the input `~.axes.Axes`.\n\n    frameon : bool, optional\n        True means that the axes frame is visible.\n\n    **kwargs\n        Other optional keyword arguments:\n\n        %(Axes)s\n\n    Returns\n    -------\n    axes : `~.axes.Axes`\n        The new `~.axes.Axes` object.\n    \"\"\"\n\n    martist.Artist.__init__(self)\n    if isinstance(rect, mtransforms.Bbox):\n        self._position = rect\n    else:\n        self._position = mtransforms.Bbox.from_bounds(*rect)\n    if self._position.width < 0 or self._position.height < 0:\n        raise ValueError('Width and height specified must be non-negative')\n    self._originalPosition = self._position.frozen()\n    self.axes = self\n    self._aspect = 'auto'\n    self._adjustable = 'box'\n    self._anchor = 'C'\n    self._stale_viewlim_x = False\n    self._stale_viewlim_y = False\n    self._sharex = sharex\n    self._sharey = sharey\n    if sharex is not None:\n        self._shared_x_axes.join(self, sharex)\n    if sharey is not None:\n        self._shared_y_axes.join(self, sharey)\n    self.set_label(label)\n    self.set_figure(fig)\n\n    self.set_axes_locator(kwargs.get(\"axes_locator\", None))\n\n    self.spines = self._gen_axes_spines()\n\n    # this call may differ for non-sep axes, e.g., polar\n    self._init_axis()\n    if facecolor is None:\n        facecolor = rcParams['axes.facecolor']\n    self._facecolor = facecolor\n    self._frameon = frameon\n    self.set_axisbelow(rcParams['axes.axisbelow'])\n\n    self._rasterization_zorder = None\n    self.cla()\n\n    # funcs used to format x and y - fall back on major formatters\n    self.fmt_xdata = None\n    self.fmt_ydata = None\n\n    self.set_navigate(True)\n    self.set_navigate_mode(None)\n\n    if xscale:\n        self.set_xscale(xscale)\n    if yscale:\n        self.set_yscale(yscale)\n\n    self.update(kwargs)\n\n    if self.xaxis is not None:\n        self._xcid = self.xaxis.callbacks.connect(\n            'units finalize', lambda: self._on_units_changed(scalex=True))\n\n    if self.yaxis is not None:\n        self._ycid = self.yaxis.callbacks.connect(\n            'units finalize', lambda: self._on_units_changed(scaley=True))\n\n    self.tick_params(\n        top=rcParams['xtick.top'] and rcParams['xtick.minor.top'],\n        bottom=rcParams['xtick.bottom'] and rcParams['xtick.minor.bottom'],\n        labeltop=(rcParams['xtick.labeltop'] and\n                  rcParams['xtick.minor.top']),\n        labelbottom=(rcParams['xtick.labelbottom'] and\n                     rcParams['xtick.minor.bottom']),\n        left=rcParams['ytick.left'] and rcParams['ytick.minor.left'],\n        right=rcParams['ytick.right'] and rcParams['ytick.minor.right'],\n        labelleft=(rcParams['ytick.labelleft'] and\n                   rcParams['ytick.minor.left']),\n        labelright=(rcParams['ytick.labelright'] and\n                    rcParams['ytick.minor.right']),\n        which='minor')\n\n    self.tick_params(\n        top=rcParams['xtick.top'] and rcParams['xtick.major.top'],\n        bottom=rcParams['xtick.bottom'] and rcParams['xtick.major.bottom'],\n        labeltop=(rcParams['xtick.labeltop'] and\n                  rcParams['xtick.major.top']),\n        labelbottom=(rcParams['xtick.labelbottom'] and\n                     rcParams['xtick.major.bottom']),\n        left=rcParams['ytick.left'] and rcParams['ytick.major.left'],\n        right=rcParams['ytick.right'] and rcParams['ytick.major.right'],\n        labelleft=(rcParams['ytick.labelleft'] and\n                   rcParams['ytick.major.left']),\n        labelright=(rcParams['ytick.labelright'] and\n                    rcParams['ytick.major.right']),\n        which='major')\n\n    self._layoutbox = None\n    self._poslayoutbox = None",
                "def __getstate__(self):\n    # The renderer should be re-created by the figure, and then cached at\n    # that point.\n    state = super().__getstate__()\n    for key in ['_layoutbox', '_poslayoutbox']:\n        state[key] = None\n    # Prune the sharing & twinning info to only contain the current group.\n    for grouper_name in [\n            '_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        grouper = getattr(self, grouper_name)\n        state[grouper_name] = (grouper.get_siblings(self)\n                               if self in grouper else None)\n    return state",
                "def __setstate__(self, state):\n    # Merge the grouping info back into the global groupers.\n    for grouper_name in [\n            '_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        siblings = state.pop(grouper_name)\n        if siblings:\n            getattr(self, grouper_name).join(*siblings)\n    self.__dict__ = state\n    self._stale = True",
                "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the axes bounding box in display space; *args* and *kwargs*\n    are empty.\n\n    This bounding box does not include the spines, ticks, ticklables,\n    or other labels.  For a bounding box including these elements use\n    `~matplotlib.axes.Axes.get_tightbbox`.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_tightbbox\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.get_window_extent\n\n    \"\"\"\n    return self.bbox",
                "def _init_axis(self):\n    \"move this out of __init__ because non-separable axes don't use it\"\n    self.xaxis = maxis.XAxis(self)\n    self.spines['bottom'].register_axis(self.xaxis)\n    self.spines['top'].register_axis(self.xaxis)\n    self.yaxis = maxis.YAxis(self)\n    self.spines['left'].register_axis(self.yaxis)\n    self.spines['right'].register_axis(self.yaxis)\n    self._update_transScale()",
                "def set_figure(self, fig):\n    \"\"\"\n    Set the `.Figure` for this `.Axes`.\n\n    Parameters\n    ----------\n    fig : `.Figure`\n    \"\"\"\n    martist.Artist.set_figure(self, fig)\n\n    self.bbox = mtransforms.TransformedBbox(self._position,\n                                            fig.transFigure)\n    # these will be updated later as data is added\n    self.dataLim = mtransforms.Bbox.null()\n    self._viewLim = mtransforms.Bbox.unit()\n    self.transScale = mtransforms.TransformWrapper(\n        mtransforms.IdentityTransform())\n\n    self._set_lim_and_transforms()",
                "def _unstale_viewLim(self):\n    # We should arrange to store this information once per share-group\n    # instead of on every axis.\n    scalex = any(ax._stale_viewlim_x\n                 for ax in self._shared_x_axes.get_siblings(self))\n    scaley = any(ax._stale_viewlim_y\n                 for ax in self._shared_y_axes.get_siblings(self))\n    if scalex or scaley:\n        for ax in self._shared_x_axes.get_siblings(self):\n            ax._stale_viewlim_x = False\n        for ax in self._shared_y_axes.get_siblings(self):\n            ax._stale_viewlim_y = False\n        self.autoscale_view(scalex=scalex, scaley=scaley)",
                "@property\ndef viewLim(self):\n    self._unstale_viewLim()\n    return self._viewLim",
                "def _request_autoscale_view(self, tight=None, scalex=True, scaley=True):\n    if tight is not None:\n        self._tight = tight\n    if scalex:\n        self._stale_viewlim_x = True  # Else keep old state.\n    if scaley:\n        self._stale_viewlim_y = True",
                "def _set_lim_and_transforms(self):\n    \"\"\"\n    Set the *_xaxis_transform*, *_yaxis_transform*, *transScale*,\n    *transData*, *transLimits* and *transAxes* transformations.\n\n    .. note::\n\n        This method is primarily used by rectilinear projections of the\n        `~matplotlib.axes.Axes` class, and is meant to be overridden by\n        new kinds of projection axes that need different transformations\n        and limits. (See `~matplotlib.projections.polar.PolarAxes` for an\n        example.)\n    \"\"\"\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n\n    # Transforms the x and y axis separately by a scale factor.\n    # It is assumed that this part will have non-linear components\n    # (e.g., for a log scale).\n    self.transScale = mtransforms.TransformWrapper(\n        mtransforms.IdentityTransform())\n\n    # An affine transformation on the data, generally to limit the\n    # range of the axes\n    self.transLimits = mtransforms.BboxTransformFrom(\n        mtransforms.TransformedBbox(self._viewLim, self.transScale))\n\n    # The parentheses are important for efficiency here -- they\n    # group the last two (which are usually affines) separately\n    # from the first (which, with log-scaling can be non-affine).\n    self.transData = self.transScale + (self.transLimits + self.transAxes)\n\n    self._xaxis_transform = mtransforms.blended_transform_factory(\n        self.transData, self.transAxes)\n    self._yaxis_transform = mtransforms.blended_transform_factory(\n        self.transAxes, self.transData)",
                "def get_xaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing x-axis labels, ticks\n    and gridlines.  The x-direction is in data coordinates and the\n    y-direction is in axis coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._xaxis_transform\n    elif which == 'tick1':\n        # for cartesian projection, this is bottom spine\n        return self.spines['bottom'].get_spine_transform()\n    elif which == 'tick2':\n        # for cartesian projection, this is top spine\n        return self.spines['top'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                "def get_xaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing x-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in data coordinates and the y-direction is in\n        axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams[\"xtick.alignment\"]\n    return (self.get_xaxis_transform(which='tick1') +\n            mtransforms.ScaledTranslation(0, -1 * pad_points / 72,\n                                          self.figure.dpi_scale_trans),\n            \"top\", labels_align)",
                "def get_xaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondary x-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in data coordinates and the y-direction\n        is in axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams[\"xtick.alignment\"]\n    return (self.get_xaxis_transform(which='tick2') +\n            mtransforms.ScaledTranslation(0, pad_points / 72,\n                                          self.figure.dpi_scale_trans),\n            \"bottom\", labels_align)",
                "def get_yaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing y-axis labels, ticks\n    and gridlines.  The x-direction is in axis coordinates and the\n    y-direction is in data coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._yaxis_transform\n    elif which == 'tick1':\n        # for cartesian projection, this is bottom spine\n        return self.spines['left'].get_spine_transform()\n    elif which == 'tick2':\n        # for cartesian projection, this is top spine\n        return self.spines['right'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                "def get_yaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing y-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in axis coordinates and the y-direction is in\n        data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams[\"ytick.alignment\"]\n    return (self.get_yaxis_transform(which='tick1') +\n            mtransforms.ScaledTranslation(-1 * pad_points / 72, 0,\n                                          self.figure.dpi_scale_trans),\n            labels_align, \"right\")",
                "def get_yaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondart y-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in axis coordinates and the y-direction\n        is in data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = rcParams[\"ytick.alignment\"]\n    return (self.get_yaxis_transform(which='tick2') +\n            mtransforms.ScaledTranslation(pad_points / 72, 0,\n                                          self.figure.dpi_scale_trans),\n            labels_align, \"left\")",
                "def _update_transScale(self):\n    self.transScale.set(\n        mtransforms.blended_transform_factory(\n            self.xaxis.get_transform(), self.yaxis.get_transform()))\n    for line in getattr(self, \"lines\", []):  # Not set during init.\n        try:\n            line._transformed_path.invalidate()\n        except AttributeError:\n            pass",
                "def get_position(self, original=False):\n    \"\"\"\n    Get a copy of the axes rectangle as a `.Bbox`.\n\n    Parameters\n    ----------\n    original : bool\n        If ``True``, return the original position. Otherwise return the\n        active position. For an explanation of the positions see\n        `.set_position`.\n\n    Returns\n    -------\n    pos : `.Bbox`\n\n    \"\"\"\n    if original:\n        return self._originalPosition.frozen()\n    else:\n        locator = self.get_axes_locator()\n        if not locator:\n            self.apply_aspect()\n        return self._position.frozen()",
                "def set_position(self, pos, which='both'):\n    \"\"\"\n    Set the axes position.\n\n    Axes have two position attributes. The 'original' position is the\n    position allocated for the Axes. The 'active' position is the\n    position the Axes is actually drawn at. These positions are usually\n    the same unless a fixed aspect is set to the Axes. See `.set_aspect`\n    for details.\n\n    Parameters\n    ----------\n    pos : [left, bottom, width, height] or `~matplotlib.transforms.Bbox`\n        The new position of the in `.Figure` coordinates.\n\n    which : {'both', 'active', 'original'}, optional\n        Determines which position variables to change.\n\n    \"\"\"\n    self._set_position(pos, which=which)\n    # because this is being called externally to the library we\n    # zero the constrained layout parts.\n    self._layoutbox = None\n    self._poslayoutbox = None",
                "def _set_position(self, pos, which='both'):\n    \"\"\"\n    private version of set_position.  Call this internally\n    to get the same functionality of `get_position`, but not\n    to take the axis out of the constrained_layout\n    hierarchy.\n    \"\"\"\n    if not isinstance(pos, mtransforms.BboxBase):\n        pos = mtransforms.Bbox.from_bounds(*pos)\n    for ax in self._twinned_axes.get_siblings(self):\n        if which in ('both', 'active'):\n            ax._position.set(pos)\n        if which in ('both', 'original'):\n            ax._originalPosition.set(pos)\n    self.stale = True",
                "def reset_position(self):\n    \"\"\"\n    Reset the active position to the original position.\n\n    This resets the a possible position change due to aspect constraints.\n    For an explanation of the positions see `.set_position`.\n    \"\"\"\n    for ax in self._twinned_axes.get_siblings(self):\n        pos = ax.get_position(original=True)\n        ax.set_position(pos, which='active')",
                "def set_axes_locator(self, locator):\n    \"\"\"\n    Set the axes locator.\n\n    Parameters\n    ----------\n    locator : Callable[[Axes, Renderer], Bbox]\n    \"\"\"\n    self._axes_locator = locator\n    self.stale = True",
                "def get_axes_locator(self):\n    \"\"\"\n    Return the axes_locator.\n    \"\"\"\n    return self._axes_locator",
                "def _set_artist_props(self, a):\n    \"\"\"set the boilerplate props for artists added to axes\"\"\"\n    a.set_figure(self.figure)\n    if not a.is_transform_set():\n        a.set_transform(self.transData)\n\n    a.axes = self\n    if a.mouseover:\n        self._mouseover_set.add(a)",
                "def _gen_axes_patch(self):\n    \"\"\"\n    Returns\n    -------\n    Patch\n        The patch used to draw the background of the axes.  It is also used\n        as the clipping path for any data elements on the axes.\n\n        In the standard axes, this is a rectangle, but in other projections\n        it may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)",
                "def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'):\n    \"\"\"\n    Returns\n    -------\n    dict\n        Mapping of spine names to `Line2D` or `Patch` instances that are\n        used to draw axes spines.\n\n        In the standard axes, spines are single line segments, but in other\n        projections they may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return OrderedDict((side, mspines.Spine.linear_spine(self, side))\n                       for side in ['left', 'right', 'bottom', 'top'])",
                "def cla(self):\n    \"\"\"Clear the current axes.\"\"\"\n    # Note: this is called by Axes.__init__()\n\n    # stash the current visibility state\n    if hasattr(self, 'patch'):\n        patch_visible = self.patch.get_visible()\n    else:\n        patch_visible = True\n\n    xaxis_visible = self.xaxis.get_visible()\n    yaxis_visible = self.yaxis.get_visible()\n\n    self.xaxis.cla()\n    self.yaxis.cla()\n\n    for name, spine in self.spines.items():\n        spine.cla()\n\n    self.ignore_existing_data_limits = True\n    self.callbacks = cbook.CallbackRegistry()\n\n    if self._sharex is not None:\n        # major and minor are axis.Ticker class instances with\n        # locator and formatter attributes\n        self.xaxis.major = self._sharex.xaxis.major\n        self.xaxis.minor = self._sharex.xaxis.minor\n        x0, x1 = self._sharex.get_xlim()\n        self.set_xlim(x0, x1, emit=False,\n                      auto=self._sharex.get_autoscalex_on())\n        self.xaxis._scale = self._sharex.xaxis._scale\n    else:\n        self.xaxis._set_scale('linear')\n        try:\n            self.set_xlim(0, 1)\n        except TypeError:\n            pass\n\n    if self._sharey is not None:\n        self.yaxis.major = self._sharey.yaxis.major\n        self.yaxis.minor = self._sharey.yaxis.minor\n        y0, y1 = self._sharey.get_ylim()\n        self.set_ylim(y0, y1, emit=False,\n                      auto=self._sharey.get_autoscaley_on())\n        self.yaxis._scale = self._sharey.yaxis._scale\n    else:\n        self.yaxis._set_scale('linear')\n        try:\n            self.set_ylim(0, 1)\n        except TypeError:\n            pass\n    # update the minor locator for x and y axis based on rcParams\n    if rcParams['xtick.minor.visible']:\n        self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n\n    if rcParams['ytick.minor.visible']:\n        self.yaxis.set_minor_locator(mticker.AutoMinorLocator())\n\n    if self._sharex is None:\n        self._autoscaleXon = True\n    if self._sharey is None:\n        self._autoscaleYon = True\n    self._xmargin = rcParams['axes.xmargin']\n    self._ymargin = rcParams['axes.ymargin']\n    self._tight = None\n    self._use_sticky_edges = True\n    self._update_transScale()  # needed?\n\n    self._get_lines = _process_plot_var_args(self)\n    self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n\n    self._gridOn = rcParams['axes.grid']\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.tables = []\n    self.artists = []\n    self.images = []\n    self._mouseover_set = _OrderedSet()\n    self.child_axes = []\n    self._current_image = None  # strictly for pyplot via _sci, _gci\n    self.legend_ = None\n    self.collections = []  # collection.Collection instances\n    self.containers = []\n\n    self.grid(False)  # Disable grid on init to use rcParameter\n    self.grid(self._gridOn, which=rcParams['axes.grid.which'],\n              axis=rcParams['axes.grid.axis'])\n    props = font_manager.FontProperties(\n        size=rcParams['axes.titlesize'],\n        weight=rcParams['axes.titleweight'])\n\n    self.title = mtext.Text(\n        x=0.5, y=1.0, text='',\n        fontproperties=props,\n        verticalalignment='baseline',\n        horizontalalignment='center',\n        )\n    self._left_title = mtext.Text(\n        x=0.0, y=1.0, text='',\n        fontproperties=props.copy(),\n        verticalalignment='baseline',\n        horizontalalignment='left', )\n    self._right_title = mtext.Text(\n        x=1.0, y=1.0, text='',\n        fontproperties=props.copy(),\n        verticalalignment='baseline',\n        horizontalalignment='right',\n        )\n    title_offset_points = rcParams['axes.titlepad']\n    # refactor this out so it can be called in ax.set_title if\n    # pad argument used...\n    self._set_title_offset_trans(title_offset_points)\n    # determine if the title position has been set manually:\n    self._autotitlepos = None\n\n    for _title in (self.title, self._left_title, self._right_title):\n        self._set_artist_props(_title)\n\n    # The patch draws the background of the axes.  We want this to be below\n    # the other artists.  We use the frame to draw the edges so we are\n    # setting the edgecolor to None.\n    self.patch = self._gen_axes_patch()\n    self.patch.set_figure(self.figure)\n    self.patch.set_facecolor(self._facecolor)\n    self.patch.set_edgecolor('None')\n    self.patch.set_linewidth(0)\n    self.patch.set_transform(self.transAxes)\n\n    self.set_axis_on()\n\n    self.xaxis.set_clip_path(self.patch)\n    self.yaxis.set_clip_path(self.patch)\n\n    self._shared_x_axes.clean()\n    self._shared_y_axes.clean()\n    if self._sharex:\n        self.xaxis.set_visible(xaxis_visible)\n        self.patch.set_visible(patch_visible)\n\n    if self._sharey:\n        self.yaxis.set_visible(yaxis_visible)\n        self.patch.set_visible(patch_visible)\n\n    self.stale = True",
                "def clear(self):\n    \"\"\"Clear the axes.\"\"\"\n    self.cla()",
                "def get_facecolor(self):\n    \"\"\"Get the facecolor of the Axes.\"\"\"\n    return self.patch.get_facecolor()",
                "def set_facecolor(self, color):\n    \"\"\"\n    Set the facecolor of the Axes.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self._facecolor = color\n    self.stale = True\n    return self.patch.set_facecolor(color)",
                "def _set_title_offset_trans(self, title_offset_points):\n    \"\"\"\n    Set the offset for the title either from rcParams['axes.titlepad']\n    or from set_title kwarg ``pad``.\n    \"\"\"\n    self.titleOffsetTrans = mtransforms.ScaledTranslation(\n            0.0, title_offset_points / 72,\n            self.figure.dpi_scale_trans)\n    for _title in (self.title, self._left_title, self._right_title):\n        _title.set_transform(self.transAxes + self.titleOffsetTrans)\n        _title.set_clip_box(None)",
                "def set_prop_cycle(self, *args, **kwargs):\n    \"\"\"\n    Set the property cycle of the Axes.\n\n    The property cycle controls the style properties such as color,\n    marker and linestyle of future plot commands. The style properties\n    of data already added to the Axes are not modified.\n\n    Call signatures::\n\n      set_prop_cycle(cycler)\n      set_prop_cycle(label=values[, label2=values2[, ...]])\n      set_prop_cycle(label, values)\n\n    Form 1 sets given `~cycler.Cycler` object.\n\n    Form 2 creates a `~cycler.Cycler` which cycles over one or more\n    properties simultaneously and set it as the property cycle of the\n    axes. If multiple properties are given, their value lists must have\n    the same length. This is just a shortcut for explicitly creating a\n    cycler and passing it to the function, i.e. it's short for\n    ``set_prop_cycle(cycler(label=values label2=values2, ...))``.\n\n    Form 3 creates a `~cycler.Cycler` for a single property and set it\n    as the property cycle of the axes. This form exists for compatibility\n    with the original `cycler.cycler` interface. Its use is discouraged\n    in favor of the kwarg form, i.e. ``set_prop_cycle(label=values)``.\n\n    Parameters\n    ----------\n    cycler : Cycler\n        Set the given Cycler. *None* resets to the cycle defined by the\n        current style.\n\n    label : str\n        The property key. Must be a valid `.Artist` property.\n        For example, 'color' or 'linestyle'. Aliases are allowed,\n        such as 'c' for 'color' and 'lw' for 'linewidth'.\n\n    values : iterable\n        Finite-length iterable of the property values. These values\n        are validated and will raise a ValueError if invalid.\n\n    Examples\n    --------\n    Setting the property cycle for a single property:\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n\n    Setting the property cycle for simultaneously cycling over multiple\n    properties (e.g. red circle, green plus, blue cross):\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n    ...                   marker=['o', '+', 'x'])\n\n    See Also\n    --------\n    matplotlib.rcsetup.cycler\n        Convenience function for creating validated cyclers for properties.\n    cycler.cycler\n        The original function for creating unvalidated cyclers.\n\n    \"\"\"\n    if args and kwargs:\n        raise TypeError(\"Cannot supply both positional and keyword \"\n                        \"arguments to this method.\")\n    # Can't do `args == (None,)` as that crashes cycler.\n    if len(args) == 1 and args[0] is None:\n        prop_cycle = None\n    else:\n        prop_cycle = cycler(*args, **kwargs)\n    self._get_lines.set_prop_cycle(prop_cycle)\n    self._get_patches_for_fill.set_prop_cycle(prop_cycle)",
                "def get_aspect(self):\n    return self._aspect",
                "def set_aspect(self, aspect, adjustable=None, anchor=None, share=False):\n    \"\"\"\n    Set the aspect of the axis scaling, i.e. the ratio of y-unit to x-unit.\n\n    Parameters\n    ----------\n    aspect : {'auto', 'equal'} or num\n        Possible values:\n\n        ========   ================================================\n        value      description\n        ========   ================================================\n        'auto'     automatic; fill the position rectangle with data\n        'equal'    same scaling from data to plot units for x and y\n         num       a circle will be stretched such that the height\n                   is num times the width. aspect=1 is the same as\n                   aspect='equal'.\n        ========   ================================================\n\n    adjustable : None or {'box', 'datalim'}, optional\n        If not ``None``, this defines which parameter will be adjusted to\n        meet the required aspect. See `.set_adjustable` for further\n        details.\n\n    anchor : None or str or 2-tuple of float, optional\n        If not ``None``, this defines where the Axes will be drawn if there\n        is extra space due to aspect constraints. The most common way to\n        to specify the anchor are abbreviations of cardinal directions:\n\n        =====   =====================\n        value   description\n        =====   =====================\n        'C'     centered\n        'SW'    lower left corner\n        'S'     middle of bottom edge\n        'SE'    lower right corner\n        etc.\n        =====   =====================\n\n        See `.set_anchor` for further details.\n\n    share : bool, optional\n        If ``True``, apply the settings to all shared Axes.\n        Default is ``False``.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if not (cbook._str_equal(aspect, 'equal')\n            or cbook._str_equal(aspect, 'auto')):\n        aspect = float(aspect)  # raise ValueError if necessary\n\n    if (not cbook._str_equal(aspect, 'auto')) and self.name == '3d':\n        raise NotImplementedError(\n            'It is not currently possible to manually set the aspect '\n            'on 3D axes')\n\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self),\n                *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n\n    for ax in axes:\n        ax._aspect = aspect\n\n    if adjustable is None:\n        adjustable = self._adjustable\n    self.set_adjustable(adjustable, share=share)  # Handle sharing.\n\n    if anchor is not None:\n        self.set_anchor(anchor, share=share)\n    self.stale = True",
                "def get_adjustable(self):\n    return self._adjustable",
                "def set_adjustable(self, adjustable, share=False):\n    \"\"\"\n    Define which parameter the Axes will change to achieve a given aspect.\n\n    Parameters\n    ----------\n    adjustable : {'box', 'datalim'}\n        If 'box', change the physical dimensions of the Axes.\n        If 'datalim', change the ``x`` or ``y`` data limits.\n\n    share : bool, optional\n        If ``True``, apply the settings to all shared Axes.\n        Default is ``False``.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n\n    Notes\n    -----\n    Shared Axes (of which twinned Axes are a special case)\n    impose restrictions on how aspect ratios can be imposed.\n    For twinned Axes, use 'datalim'.  For Axes that share both\n    x and y, use 'box'.  Otherwise, either 'datalim' or 'box'\n    may be used.  These limitations are partly a requirement\n    to avoid over-specification, and partly a result of the\n    particular implementation we are currently using, in\n    which the adjustments for aspect ratios are done sequentially\n    and independently on each Axes as it is drawn.\n    \"\"\"\n    cbook._check_in_list([\"box\", \"datalim\"], adjustable=adjustable)\n    if share:\n        axs = {*self._shared_x_axes.get_siblings(self),\n               *self._shared_y_axes.get_siblings(self)}\n    else:\n        axs = [self]\n    if (adjustable == \"datalim\"\n            and any(getattr(ax.get_data_ratio, \"__func__\", None)\n                    != _AxesBase.get_data_ratio\n                    for ax in axs)):\n        # Limits adjustment by apply_aspect assumes that the axes' aspect\n        # ratio can be computed from the data limits and scales.\n        raise ValueError(\"Cannot set axes adjustable to 'datalim' for \"\n                         \"Axes which override 'get_data_ratio'\")\n    for ax in axs:\n        ax._adjustable = adjustable\n    self.stale = True",
                "def get_anchor(self):\n    \"\"\"\n    Get the anchor location.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_anchor\n        for a description of the anchor.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._anchor",
                "def set_anchor(self, anchor, share=False):\n    \"\"\"\n    Define the anchor location.\n\n    The actual drawing area (active position) of the Axes may be smaller\n    than the Bbox (original position) when a fixed aspect is required. The\n    anchor defines where the drawing area will be located within the\n    available space.\n\n    Parameters\n    ----------\n    anchor : 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...}\n        The anchor position may be either:\n\n        - a sequence (*cx*, *cy*). *cx* and *cy* may range from 0\n          to 1, where 0 is left or bottom and 1 is right or top.\n\n        - a string using cardinal directions as abbreviation:\n\n          - 'C' for centered\n          - 'S' (south) for bottom-center\n          - 'SW' (south west) for bottom-left\n          - etc.\n\n          Here is an overview of the possible positions:\n\n          +------+------+------+\n          | 'NW' | 'N'  | 'NE' |\n          +------+------+------+\n          | 'W'  | 'C'  | 'E'  |\n          +------+------+------+\n          | 'SW' | 'S'  | 'SE' |\n          +------+------+------+\n\n    share : bool, optional\n        If ``True``, apply the settings to all shared Axes.\n        Default is ``False``.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    if not (anchor in mtransforms.Bbox.coefs or len(anchor) == 2):\n        raise ValueError('argument must be among %s' %\n                         ', '.join(mtransforms.Bbox.coefs))\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self),\n                *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._anchor = anchor\n\n    self.stale = True",
                "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the scaled data.\n\n    Notes\n    -----\n    This method is intended to be overridden by new projection types.\n    \"\"\"\n    trf_xmin, trf_xmax = map(\n        self.xaxis.get_transform().transform, self.get_xbound())\n    trf_ymin, trf_ymax = map(\n        self.yaxis.get_transform().transform, self.get_ybound())\n    xsize = max(abs(trf_xmax - trf_xmin), 1e-30)\n    ysize = max(abs(trf_ymax - trf_ymin), 1e-30)\n    return ysize / xsize",
                "@cbook.deprecated(\"3.2\")\ndef get_data_ratio_log(self):\n    \"\"\"\n    Return the aspect ratio of the raw data in log scale.\n\n    Notes\n    -----\n    Will be used when both axis are in log scale.\n    \"\"\"\n    xmin, xmax = self.get_xbound()\n    ymin, ymax = self.get_ybound()\n\n    xsize = max(abs(math.log10(xmax) - math.log10(xmin)), 1e-30)\n    ysize = max(abs(math.log10(ymax) - math.log10(ymin)), 1e-30)\n\n    return ysize / xsize",
                "def apply_aspect(self, position=None):\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n\n    Depending on `.get_adjustable` this will modify either the Axes box\n    (position) or the view limits. In the former case, `.get_anchor`\n    will affect the position.\n\n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n\n    aspect = self.get_aspect()\n\n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n\n    if aspect == 'equal':\n        aspect = 1\n\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                               \"twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n\n    # self._adjustable == 'datalim'\n\n    # reset active to original in case it had been changed by prior use\n    # of 'box'\n    self._set_position(position, which='active')\n\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    xmin, xmax = map(x_trf.transform, self.get_xbound())\n    ymin, ymax = map(y_trf.transform, self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n\n    l, b, w, h = position.bounds\n    box_aspect = fig_aspect * (h / w)\n    data_ratio = box_aspect / aspect\n\n    y_expander = data_ratio * xsize / ysize - 1\n    # If y_expander > 0, the dy/dx viewLim ratio needs to increase\n    if abs(y_expander) < 0.005:\n        return\n\n    dL = self.dataLim\n    x0, x1 = map(x_trf.inverted().transform, dL.intervalx)\n    y0, y1 = map(y_trf.inverted().transform, dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    # Setting these targets to, e.g., 0.05*xr does not seem to help.\n    xm = 0\n    ym = 0\n\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    # Not sure whether we need this check:\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both \"\n                           \"axes are shared\")\n\n    # If y is shared, then we are only allowed to change x, etc.\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = ((Ymarg > 0 and y_expander < 0) or\n                    (Xmarg < 0 and y_expander > 0))\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy  # (Ymarg > xmarg)\n\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(*map(y_trf.inverted().transform, (y0, y1)))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(*map(x_trf.inverted().transform, (x0, x1)))",
                "def axis(self, *args, emit=True, **kwargs):\n    \"\"\"\n    Convenience method to get or set some axis properties.\n\n    Call signatures::\n\n      xmin, xmax, ymin, ymax = axis()\n      xmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\n      xmin, xmax, ymin, ymax = axis(option)\n      xmin, xmax, ymin, ymax = axis(**kwargs)\n\n    Parameters\n    ----------\n    xmin, xmax, ymin, ymax : float, optional\n        The axis limits to be set.  This can also be achieved using ::\n\n            ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n    option : bool or str\n        If a bool, turns axis lines and labels on or off. If a string,\n        possible values are:\n\n        ======== ==========================================================\n        Value    Description\n        ======== ==========================================================\n        'on'     Turn on axis lines and labels. Same as ``True``.\n        'off'    Turn off axis lines and labels. Same as ``False``.\n        'equal'  Set equal scaling (i.e., make circles circular) by\n                 changing axis limits.\n        'scaled' Set equal scaling (i.e., make circles circular) by\n                 changing dimensions of the plot box, then disable further\n                 autoscaling.\n        'tight'  Set limits just large enough to show all data, then\n                 disable further autoscaling.\n        'auto'   Automatic scaling (fill plot box with data).\n        'normal' Same as 'auto'; deprecated.\n        'image'  'scaled' with axis limits equal to data limits.\n        'square' Square plot; similar to 'scaled', but initially forcing\n                 ``xmax-xmin == ymax-ymin``.\n        ======== ==========================================================\n\n    emit : bool, optional, default *True*\n        Whether observers are notified of the axis limit change.\n        This option is passed on to `~.Axes.set_xlim` and\n        `~.Axes.set_ylim`.\n\n    Returns\n    -------\n    xmin, xmax, ymin, ymax : float\n        The axis limits.\n\n    See also\n    --------\n    matplotlib.axes.Axes.set_xlim\n    matplotlib.axes.Axes.set_ylim\n    \"\"\"\n    if len(args) == 1 and isinstance(args[0], (str, bool)):\n        s = args[0]\n        if s is True:\n            s = 'on'\n        if s is False:\n            s = 'off'\n        s = s.lower()\n        if s == 'on':\n            self.set_axis_on()\n        elif s == 'off':\n            self.set_axis_off()\n        elif s in ('equal', 'tight', 'scaled', 'normal',\n                   'auto', 'image', 'square'):\n            if s == 'normal':\n                cbook.warn_deprecated(\n                    \"3.1\", message=\"Passing 'normal' to axis() is \"\n                    \"deprecated since %(since)s; use 'auto' instead.\")\n            self.set_autoscale_on(True)\n            self.set_aspect('auto')\n            self.autoscale_view(tight=False)\n            # self.apply_aspect()\n            if s == 'equal':\n                self.set_aspect('equal', adjustable='datalim')\n            elif s == 'scaled':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)  # Req. by Mark Bakker\n            elif s == 'tight':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n            elif s == 'image':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n                self.set_aspect('equal', adjustable='box', anchor='C')\n            elif s == 'square':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n                xlim = self.get_xlim()\n                ylim = self.get_ylim()\n                edge_size = max(np.diff(xlim), np.diff(ylim))[0]\n                self.set_xlim([xlim[0], xlim[0] + edge_size],\n                              emit=emit, auto=False)\n                self.set_ylim([ylim[0], ylim[0] + edge_size],\n                              emit=emit, auto=False)\n        else:\n            raise ValueError('Unrecognized string %s to axis; '\n                             'try on or off' % s)\n    else:\n        if len(args) >= 1:\n            if len(args) != 1:\n                cbook.warn_deprecated(\n                    \"3.2\", message=\"Passing more than one positional \"\n                    \"argument to axis() is deprecated and will raise a \"\n                    \"TypeError %(removal)s.\")\n            limits = args[0]\n            try:\n                xmin, xmax, ymin, ymax = limits\n            except (TypeError, ValueError):\n                raise TypeError('the first argument to axis() must be an '\n                                'interable of the form '\n                                '[xmin, xmax, ymin, ymax]')\n        else:\n            xmin = kwargs.pop('xmin', None)\n            xmax = kwargs.pop('xmax', None)\n            ymin = kwargs.pop('ymin', None)\n            ymax = kwargs.pop('ymax', None)\n        xauto = (None  # Keep autoscale state as is.\n                 if xmin is None and xmax is None\n                 else False)  # Turn off autoscale.\n        yauto = (None\n                 if ymin is None and ymax is None\n                 else False)\n        self.set_xlim(xmin, xmax, emit=emit, auto=xauto)\n        self.set_ylim(ymin, ymax, emit=emit, auto=yauto)\n    if kwargs:\n        cbook.warn_deprecated(\n            \"3.1\", message=\"Passing unsupported keyword arguments to \"\n            \"axis() will raise a TypeError %(removal)s.\")\n    return (*self.get_xlim(), *self.get_ylim())",
                "def get_legend(self):\n    \"\"\"Return the `Legend` instance, or None if no legend is defined.\"\"\"\n    return self.legend_",
                "def get_images(self):\n    \"\"\"return a list of Axes images contained by the Axes\"\"\"\n    return cbook.silent_list('AxesImage', self.images)",
                "def get_lines(self):\n    \"\"\"Return a list of lines contained by the Axes\"\"\"\n    return cbook.silent_list('Line2D', self.lines)",
                "def get_xaxis(self):\n    \"\"\"Return the XAxis instance.\"\"\"\n    return self.xaxis",
                "def get_xgridlines(self):\n    \"\"\"Get the x grid lines as a list of `Line2D` instances.\"\"\"\n    return self.xaxis.get_gridlines()",
                "def get_xticklines(self):\n    \"\"\"Get the x tick lines as a list of `Line2D` instances.\"\"\"\n    return self.xaxis.get_ticklines()",
                "def get_yaxis(self):\n    \"\"\"Return the YAxis instance.\"\"\"\n    return self.yaxis",
                "def get_ygridlines(self):\n    \"\"\"Get the y grid lines as a list of `Line2D` instances.\"\"\"\n    return self.yaxis.get_gridlines()",
                "def get_yticklines(self):\n    \"\"\"Get the y tick lines as a list of `Line2D` instances.\"\"\"\n    return self.yaxis.get_ticklines()",
                "def _sci(self, im):\n    \"\"\"Set the current image.\n\n    This image will be the target of colormap functions like\n    `~.pyplot.viridis`, and other functions such as `~.pyplot.clim`.  The\n    current image is an attribute of the current axes.\n    \"\"\"\n    if isinstance(im, mpl.contour.ContourSet):\n        if im.collections[0] not in self.collections:\n            raise ValueError(\"ContourSet must be in current Axes\")\n    elif im not in self.images and im not in self.collections:\n        raise ValueError(\"Argument must be an image, collection, or \"\n                         \"ContourSet in this Axes\")\n    self._current_image = im",
                "def _gci(self):\n    \"\"\"\n    Helper for :func:`~matplotlib.pyplot.gci`;\n    do not use elsewhere.\n    \"\"\"\n    return self._current_image",
                "def has_data(self):\n    \"\"\"\n    Return *True* if any artists have been added to axes.\n\n    This should not be used to determine whether the *dataLim*\n    need to be updated, and may not actually be useful for\n    anything.\n    \"\"\"\n    return (\n        len(self.collections) +\n        len(self.images) +\n        len(self.lines) +\n        len(self.patches)) > 0",
                "def add_artist(self, a):\n    \"\"\"\n    Add an `~.Artist` to the axes, and return the artist.\n\n    Use `add_artist` only for artists for which there is no dedicated\n    \"add\" method; and if necessary, use a method such as `update_datalim`\n    to manually update the dataLim if the artist is to be included in\n    autoscaling.\n\n    If no ``transform`` has been specified when creating the artist (e.g.\n    ``artist.get_transform() == None``) then the transform is set to\n    ``ax.transData``.\n    \"\"\"\n    a.axes = self\n    self.artists.append(a)\n    a._remove_method = self.artists.remove\n    self._set_artist_props(a)\n    a.set_clip_path(self.patch)\n    self.stale = True\n    return a",
                "def add_child_axes(self, ax):\n    \"\"\"\n    Add an `~.AxesBase` to the axes' children; return the child axes.\n\n    This is the lowlevel version.  See `.axes.Axes.inset_axes`.\n    \"\"\"\n\n    # normally axes have themselves as the axes, but these need to have\n    # their parent...\n    # Need to bypass the getter...\n    ax._axes = self\n    ax.stale_callback = martist._stale_axes_callback\n\n    self.child_axes.append(ax)\n    ax._remove_method = self.child_axes.remove\n    self.stale = True\n    return ax",
                "def add_collection(self, collection, autolim=True):\n    \"\"\"\n    Add a `~.Collection` to the axes' collections; return the collection.\n    \"\"\"\n    label = collection.get_label()\n    if not label:\n        collection.set_label('_collection%d' % len(self.collections))\n    self.collections.append(collection)\n    collection._remove_method = self.collections.remove\n    self._set_artist_props(collection)\n\n    if collection.get_clip_path() is None:\n        collection.set_clip_path(self.patch)\n\n    if autolim:\n        # Make sure viewLim is not stale (mostly to match\n        # pre-lazy-autoscale behavior, which is not really better).\n        self._unstale_viewLim()\n        self.update_datalim(collection.get_datalim(self.transData))\n\n    self.stale = True\n    return collection",
                "def add_image(self, image):\n    \"\"\"\n    Add an `~.AxesImage` to the axes' images; return the image.\n    \"\"\"\n    self._set_artist_props(image)\n    if not image.get_label():\n        image.set_label('_image%d' % len(self.images))\n    self.images.append(image)\n    image._remove_method = self.images.remove\n    self.stale = True\n    return image",
                "def _update_image_limits(self, image):\n    xmin, xmax, ymin, ymax = image.get_extent()\n    self.axes.update_datalim(((xmin, ymin), (xmax, ymax)))",
                "def add_line(self, line):\n    \"\"\"\n    Add a `.Line2D` to the axes' lines; return the line.\n    \"\"\"\n    self._set_artist_props(line)\n    if line.get_clip_path() is None:\n        line.set_clip_path(self.patch)\n\n    self._update_line_limits(line)\n    if not line.get_label():\n        line.set_label('_line%d' % len(self.lines))\n    self.lines.append(line)\n    line._remove_method = self.lines.remove\n    self.stale = True\n    return line",
                "def _add_text(self, txt):\n    \"\"\"\n    Add a `~.Text` to the axes' texts; return the text.\n    \"\"\"\n    self._set_artist_props(txt)\n    self.texts.append(txt)\n    txt._remove_method = self.texts.remove\n    self.stale = True\n    return txt",
                "def _update_line_limits(self, line):\n    \"\"\"\n    Figures out the data limit of the given line, updating self.dataLim.\n    \"\"\"\n    path = line.get_path()\n    if path.vertices.size == 0:\n        return\n\n    line_trans = line.get_transform()\n\n    if line_trans == self.transData:\n        data_path = path\n\n    elif any(line_trans.contains_branch_seperately(self.transData)):\n        # identify the transform to go from line's coordinates\n        # to data coordinates\n        trans_to_data = line_trans - self.transData\n\n        # if transData is affine we can use the cached non-affine component\n        # of line's path. (since the non-affine part of line_trans is\n        # entirely encapsulated in trans_to_data).\n        if self.transData.is_affine:\n            line_trans_path = line._get_transformed_path()\n            na_path, _ = line_trans_path.get_transformed_path_and_affine()\n            data_path = trans_to_data.transform_path_affine(na_path)\n        else:\n            data_path = trans_to_data.transform_path(path)\n    else:\n        # for backwards compatibility we update the dataLim with the\n        # coordinate range of the given path, even though the coordinate\n        # systems are completely different. This may occur in situations\n        # such as when ax.transAxes is passed through for absolute\n        # positioning.\n        data_path = path\n\n    if data_path.vertices.size > 0:\n        updatex, updatey = line_trans.contains_branch_seperately(\n            self.transData)\n        self.dataLim.update_from_path(data_path,\n                                      self.ignore_existing_data_limits,\n                                      updatex=updatex,\n                                      updatey=updatey)\n        self.ignore_existing_data_limits = False",
                "def add_patch(self, p):\n    \"\"\"\n    Add a `~.Patch` to the axes' patches; return the patch.\n    \"\"\"\n    self._set_artist_props(p)\n    if p.get_clip_path() is None:\n        p.set_clip_path(self.patch)\n    self._update_patch_limits(p)\n    self.patches.append(p)\n    p._remove_method = self.patches.remove\n    return p",
                "def _update_patch_limits(self, patch):\n    \"\"\"update the data limits for patch *p*\"\"\"\n    # hist can add zero height Rectangles, which is useful to keep\n    # the bins, counts and patches lined up, but it throws off log\n    # scaling.  We'll ignore rects with zero height or width in\n    # the auto-scaling\n\n    # cannot check for '==0' since unitized data may not compare to zero\n    # issue #2150 - we update the limits if patch has non zero width\n    # or height.\n    if (isinstance(patch, mpatches.Rectangle) and\n            ((not patch.get_width()) and (not patch.get_height()))):\n        return\n    vertices = patch.get_path().vertices\n    if vertices.size > 0:\n        xys = patch.get_patch_transform().transform(vertices)\n        if patch.get_data_transform() != self.transData:\n            patch_to_data = (patch.get_data_transform() -\n                             self.transData)\n            xys = patch_to_data.transform(xys)\n\n        updatex, updatey = patch.get_transform().\\\n            contains_branch_seperately(self.transData)\n        self.update_datalim(xys, updatex=updatex,\n                            updatey=updatey)",
                "def add_table(self, tab):\n    \"\"\"\n    Add a `~.Table` to the axes' tables; return the table.\n    \"\"\"\n    self._set_artist_props(tab)\n    self.tables.append(tab)\n    tab.set_clip_path(self.patch)\n    tab._remove_method = self.tables.remove\n    return tab",
                "def add_container(self, container):\n    \"\"\"\n    Add a `~.Container` to the axes' containers; return the container.\n    \"\"\"\n    label = container.get_label()\n    if not label:\n        container.set_label('_container%d' % len(self.containers))\n    self.containers.append(container)\n    container._remove_method = self.containers.remove\n    return container",
                "def _on_units_changed(self, scalex=False, scaley=False):\n    \"\"\"\n    Callback for processing changes to axis units.\n\n    Currently requests updates of data limits and view limits.\n    \"\"\"\n    self.relim()\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)",
                "def relim(self, visible_only=False):\n    \"\"\"\n    Recompute the data limits based on current artists.\n\n    At present, `~.Collection` instances are not supported.\n\n    Parameters\n    ----------\n    visible_only : bool\n        Whether to exclude invisible artists.  Defaults to False.\n    \"\"\"\n    # Collections are deliberately not supported (yet); see\n    # the TODO note in artists.py.\n    self.dataLim.ignore(True)\n    self.dataLim.set_points(mtransforms.Bbox.null().get_points())\n    self.ignore_existing_data_limits = True\n\n    for line in self.lines:\n        if not visible_only or line.get_visible():\n            self._update_line_limits(line)\n\n    for p in self.patches:\n        if not visible_only or p.get_visible():\n            self._update_patch_limits(p)\n\n    for image in self.images:\n        if not visible_only or image.get_visible():\n            self._update_image_limits(image)",
                "def update_datalim(self, xys, updatex=True, updatey=True):\n    \"\"\"\n    Extend the `~.Axes.dataLim` BBox to include the given points.\n\n    If no data is set currently, the BBox will ignore its limits and set\n    the bound to be the bounds of the xydata (*xys*). Otherwise, it will\n    compute the bounds of the union of its current data and the data in\n    *xys*.\n\n    Parameters\n    ----------\n    xys : 2D array-like\n        The points to include in the data limits BBox. This can be either\n        a list of (x, y) tuples or a Nx2 array.\n\n    updatex, updatey : bool, optional, default *True*\n        Whether to update the x/y limits.\n    \"\"\"\n    xys = np.asarray(xys)\n    if not len(xys):\n        return\n    self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits,\n                                     updatex=updatex, updatey=updatey)\n    self.ignore_existing_data_limits = False",
                "def update_datalim_bounds(self, bounds):\n    \"\"\"\n    Extend the `~.Axes.datalim` BBox to include the given\n    `~matplotlib.transforms.Bbox`.\n\n    Parameters\n    ----------\n    bounds : `~matplotlib.transforms.Bbox`\n    \"\"\"\n    self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds]))",
                "def _process_unit_info(self, xdata=None, ydata=None, kwargs=None):\n    \"\"\"Look for unit *kwargs* and update the axis instances as necessary\"\"\"\n\n    def _process_single_axis(data, axis, unit_name, kwargs):\n        # Return if there's no axis set\n        if axis is None:\n            return kwargs\n\n        if data is not None:\n            # We only need to update if there is nothing set yet.\n            if not axis.have_units():\n                axis.update_units(data)\n\n        # Check for units in the kwargs, and if present update axis\n        if kwargs is not None:\n            units = kwargs.pop(unit_name, axis.units)\n            if self.name == 'polar':\n                polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n                units = kwargs.pop(polar_units[unit_name], units)\n\n            if units != axis.units:\n                axis.set_units(units)\n                # If the units being set imply a different converter,\n                # we need to update.\n                if data is not None:\n                    axis.update_units(data)\n        return kwargs\n\n    kwargs = _process_single_axis(xdata, self.xaxis, 'xunits', kwargs)\n    kwargs = _process_single_axis(ydata, self.yaxis, 'yunits', kwargs)\n    return kwargs",
                "def in_axes(self, mouseevent):\n    \"\"\"\n    Return *True* if the given *mouseevent* (in display coords)\n    is in the Axes\n    \"\"\"\n    return self.patch.contains(mouseevent)[0]",
                "def get_autoscale_on(self):\n    \"\"\"\n    Get whether autoscaling is applied for both axes on plot commands\n    \"\"\"\n    return self._autoscaleXon and self._autoscaleYon",
                "def get_autoscalex_on(self):\n    \"\"\"\n    Get whether autoscaling for the x-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleXon",
                "def get_autoscaley_on(self):\n    \"\"\"\n    Get whether autoscaling for the y-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleYon",
                "def set_autoscale_on(self, b):\n    \"\"\"\n    Set whether autoscaling is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b\n    self._autoscaleYon = b",
                "def set_autoscalex_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the x-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b",
                "def set_autoscaley_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the y-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleYon = b",
                "@property\ndef use_sticky_edges(self):\n    \"\"\"\n    When autoscaling, whether to obey all `Artist.sticky_edges`.\n\n    Default is ``True``.\n\n    Setting this to ``False`` ensures that the specified margins\n    will be applied, even if the plot includes an image, for\n    example, which would otherwise force a view limit to coincide\n    with its data limit.\n\n    The changing this property does not change the plot until\n    `autoscale` or `autoscale_view` is called.\n    \"\"\"\n    return self._use_sticky_edges",
                "@use_sticky_edges.setter\ndef use_sticky_edges(self, b):\n    self._use_sticky_edges = bool(b)",
                "def set_xmargin(self, m):\n    \"\"\"\n    Set padding of X data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError(\"margin must be greater than -0.5\")\n    self._xmargin = m\n    self.stale = True",
                "def set_ymargin(self, m):\n    \"\"\"\n    Set padding of Y data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError(\"margin must be greater than -0.5\")\n    self._ymargin = m\n    self.stale = True",
                "def margins(self, *margins, x=None, y=None, tight=True):\n    \"\"\"\n    Set or retrieve autoscaling margins.\n\n    The padding added to each limit of the axes is the *margin*\n    times the data interval. All input parameters must be floats\n    within the range [0, 1]. Passing both positional and keyword\n    arguments is invalid and will raise a TypeError. If no\n    arguments (positional or otherwise) are provided, the current\n    margins will remain in place and simply be returned.\n\n    Specifying any margin changes only the autoscaling; for example,\n    if *xmargin* is not None, then *xmargin* times the X data\n    interval will be added to each end of that interval before\n    it is used in autoscaling.\n\n    Parameters\n    ----------\n    *margins : float, optional\n        If a single positional argument is provided, it specifies\n        both margins of the x-axis and y-axis limits. If two\n        positional arguments are provided, they will be interpreted\n        as *xmargin*, *ymargin*. If setting the margin on a single\n        axis is desired, use the keyword arguments described below.\n\n    x, y : float, optional\n        Specific margin values for the x-axis and y-axis,\n        respectively. These cannot be used with positional\n        arguments, but can be used individually to alter on e.g.,\n        only the y-axis.\n\n    tight : bool or None, default is True\n        The *tight* parameter is passed to :meth:`autoscale_view`,\n        which is executed after a margin is changed; the default\n        here is *True*, on the assumption that when margins are\n        specified, no additional padding to match tick marks is\n        usually desired.  Set *tight* to *None* will preserve\n        the previous setting.\n\n    Returns\n    -------\n    xmargin, ymargin : float\n\n    Notes\n    -----\n    If a previously used Axes method such as :meth:`pcolor` has set\n    :attr:`use_sticky_edges` to `True`, only the limits not set by\n    the \"sticky artists\" will be modified. To force all of the\n    margins to be set, set :attr:`use_sticky_edges` to `False`\n    before calling :meth:`margins`.\n    \"\"\"\n\n    if margins and x is not None and y is not None:\n        raise TypeError('Cannot pass both positional and keyword '\n                        'arguments for x and/or y.')\n    elif len(margins) == 1:\n        x = y = margins[0]\n    elif len(margins) == 2:\n        x, y = margins\n    elif margins:\n        raise TypeError('Must pass a single positional argument for all '\n                        'margins, or one for each margin (x, y).')\n\n    if x is None and y is None:\n        if tight is not True:\n            cbook._warn_external(f'ignoring tight={tight!r} in get mode')\n        return self._xmargin, self._ymargin\n\n    if x is not None:\n        self.set_xmargin(x)\n    if y is not None:\n        self.set_ymargin(y)\n\n    self._request_autoscale_view(\n        tight=tight, scalex=(x is not None), scaley=(y is not None)\n    )",
                "def set_rasterization_zorder(self, z):\n    \"\"\"\n    Parameters\n    ----------\n    z : float or None\n        zorder below which artists are rasterized.  ``None`` means that\n        artists do not get rasterized based on zorder.\n    \"\"\"\n    self._rasterization_zorder = z\n    self.stale = True",
                "def get_rasterization_zorder(self):\n    \"\"\"Return the zorder value below which artists will be rasterized.\"\"\"\n    return self._rasterization_zorder",
                "def autoscale(self, enable=True, axis='both', tight=None):\n    \"\"\"\n    Autoscale the axis view to the data (toggle).\n\n    Convenience method for simple axis view autoscaling.\n    It turns autoscaling on or off, and then,\n    if autoscaling for either axis is on, it performs\n    the autoscaling on the specified axis or axes.\n\n    Parameters\n    ----------\n    enable : bool or None, optional\n        True (default) turns autoscaling on, False turns it off.\n        None leaves the autoscaling state unchanged.\n\n    axis : {'both', 'x', 'y'}, optional\n        Which axis to operate on; default is 'both'.\n\n    tight : bool or None, optional\n        If True, first set the margins to zero.  Then, this argument is\n        forwarded to `autoscale_view` (regardless of its value); see the\n        description of its behavior there.\n    \"\"\"\n    if enable is None:\n        scalex = True\n        scaley = True\n    else:\n        scalex = False\n        scaley = False\n        if axis in ['x', 'both']:\n            self._autoscaleXon = bool(enable)\n            scalex = self._autoscaleXon\n        if axis in ['y', 'both']:\n            self._autoscaleYon = bool(enable)\n            scaley = self._autoscaleYon\n    if tight and scalex:\n        self._xmargin = 0\n    if tight and scaley:\n        self._ymargin = 0\n    self._request_autoscale_view(tight=tight, scalex=scalex, scaley=scaley)",
                "def autoscale_view(self, tight=None, scalex=True, scaley=True):\n    \"\"\"\n    Autoscale the view limits using the data limits.\n\n    Parameters\n    ----------\n    tight : bool or None\n        If *True*, only expand the axis limits using the margins.  Note\n        that unlike for `autoscale`, ``tight=True`` does *not* set the\n        margins to zero.\n\n        If *False* and :rc:`axes.autolimit_mode` is 'round_numbers', then\n        after expansion by the margins, further expand the axis limits\n        using the axis major locator.\n\n        If None (the default), reuse the value set in the previous call to\n        `autoscale_view` (the initial value is False, but the default style\n        sets :rc:`axes.autolimit_mode` to 'data', in which case this\n        behaves like True).\n\n    scalex : bool\n        Whether to autoscale the x axis (default is True).\n\n    scaley : bool\n        Whether to autoscale the x axis (default is True).\n\n    Notes\n    -----\n    The autoscaling preserves any preexisting axis direction reversal.\n\n    The data limits are not updated automatically when artist data are\n    changed after the artist has been added to an Axes instance.  In that\n    case, use :meth:`matplotlib.axes.Axes.relim` prior to calling\n    autoscale_view.\n    \"\"\"\n    if tight is not None:\n        self._tight = bool(tight)\n\n    if self.use_sticky_edges and (\n            (self._xmargin and scalex and self._autoscaleXon) or\n            (self._ymargin and scaley and self._autoscaleYon)):\n        stickies = [artist.sticky_edges for artist in self.get_children()]\n    else:  # Small optimization.\n        stickies = []\n    x_stickies = np.sort([x for sticky in stickies for x in sticky.x])\n    y_stickies = np.sort([y for sticky in stickies for y in sticky.y])\n    if self.get_xscale().lower() == 'log':\n        x_stickies = x_stickies[x_stickies > 0]\n    if self.get_yscale().lower() == 'log':\n        y_stickies = y_stickies[y_stickies > 0]\n\n    def handle_single_axis(scale, autoscaleon, shared_axes, interval,\n                           minpos, axis, margin, stickies, set_bound):\n\n        if not (scale and autoscaleon):\n            return  # nothing to do...\n\n        shared = shared_axes.get_siblings(self)\n        dl = [ax.dataLim for ax in shared]\n        # ignore non-finite data limits if good limits exist\n        finite_dl = [d for d in dl if np.isfinite(d).all()]\n        if len(finite_dl):\n            # if finite limits exist for atleast one axis (and the\n            # other is infinite), restore the finite limits\n            x_finite = [d for d in dl\n                        if (np.isfinite(d.intervalx).all() and\n                            (d not in finite_dl))]\n            y_finite = [d for d in dl\n                        if (np.isfinite(d.intervaly).all() and\n                            (d not in finite_dl))]\n\n            dl = finite_dl\n            dl.extend(x_finite)\n            dl.extend(y_finite)\n\n        bb = mtransforms.BboxBase.union(dl)\n        # fall back on the viewlimits if this is not finite:\n        vl = None\n        if not np.isfinite(bb.intervalx).all():\n            vl = mtransforms.BboxBase.union([ax.viewLim for ax in shared])\n            bb.intervalx = vl.intervalx\n        if not np.isfinite(bb.intervaly).all():\n            if vl is None:\n                vl = mtransforms.BboxBase.union(\n                    [ax.viewLim for ax in shared])\n            bb.intervaly = vl.intervaly\n        x0, x1 = getattr(bb, interval)\n        locator = axis.get_major_locator()\n        x0, x1 = locator.nonsingular(x0, x1)\n\n        # Prevent margin addition from crossing a sticky value.  Small\n        # tolerances (whose values come from isclose()) must be used due to\n        # floating point issues with streamplot.\n        def tol(x): return 1e-5 * abs(x) + 1e-8\n        # Index of largest element < x0 + tol, if any.\n        i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n        x0bound = stickies[i0] if i0 != -1 else None\n        # Index of smallest element > x1 - tol, if any.\n        i1 = stickies.searchsorted(x1 - tol(x1))\n        x1bound = stickies[i1] if i1 != len(stickies) else None\n\n        # Add the margin in figure space and then transform back, to handle\n        # non-linear scales.\n        minpos = getattr(bb, minpos)\n        transform = axis.get_transform()\n        inverse_trans = transform.inverted()\n        x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n        x0t, x1t = transform.transform([x0, x1])\n        delta = (x1t - x0t) * margin\n        if not np.isfinite(delta):\n            delta = 0  # If a bound isn't finite, set margin to zero.\n        x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n\n        # Apply sticky bounds.\n        if x0bound is not None:\n            x0 = max(x0, x0bound)\n        if x1bound is not None:\n            x1 = min(x1, x1bound)\n\n        if not self._tight:\n            x0, x1 = locator.view_limits(x0, x1)\n        set_bound(x0, x1)\n        # End of definition of internal function 'handle_single_axis'.\n\n    handle_single_axis(\n        scalex, self._autoscaleXon, self._shared_x_axes, 'intervalx',\n        'minposx', self.xaxis, self._xmargin, x_stickies, self.set_xbound)\n    handle_single_axis(\n        scaley, self._autoscaleYon, self._shared_y_axes, 'intervaly',\n        'minposy', self.yaxis, self._ymargin, y_stickies, self.set_ybound)",
                "def _get_axis_list(self):\n    return (self.xaxis, self.yaxis)",
                "def _get_axis_map(self):\n    \"\"\"\n    Return a mapping of `Axis` \"names\" to `Axis` instances.\n\n    The `Axis` name is derived from the attribute under which the instance\n    is stored, so e.g. for polar axes, the theta-axis is still named \"x\"\n    and the r-axis is still named \"y\" (for back-compatibility).\n\n    In practice, this means that the entries are typically \"x\" and \"y\", and\n    additionally \"z\" for 3D axes.\n    \"\"\"\n    d = {}\n    axis_list = self._get_axis_list()\n    for k, v in vars(self).items():\n        if k.endswith(\"axis\") and v in axis_list:\n            d[k[:-len(\"axis\")]] = v\n    return d",
                "def _update_title_position(self, renderer):\n    \"\"\"\n    Update the title position based on the bounding box enclosing\n    all the ticklabels and x-axis spine and xlabel...\n    \"\"\"\n\n    if self._autotitlepos is not None and not self._autotitlepos:\n        _log.debug('title position was updated manually, not adjusting')\n        return\n\n    titles = (self.title, self._left_title, self._right_title)\n\n    if self._autotitlepos is None:\n        for title in titles:\n            x, y = title.get_position()\n            if not np.isclose(y, 1.0):\n                self._autotitlepos = False\n                _log.debug('not adjusting title pos because a title was'\n                         ' already placed manually: %f', y)\n                return\n        self._autotitlepos = True\n\n    for title in titles:\n        x, _ = title.get_position()\n        # need to start again in case of window resizing\n        title.set_position((x, 1.0))\n        # need to check all our twins too...\n        axs = self._twinned_axes.get_siblings(self)\n        # and all the children\n        for ax in self.child_axes:\n            if ax is not None:\n                locator = ax.get_axes_locator()\n                if locator:\n                    pos = locator(self, renderer)\n                    ax.apply_aspect(pos)\n                else:\n                    ax.apply_aspect()\n                axs = axs + [ax]\n        top = 0\n        for ax in axs:\n            if (ax.xaxis.get_ticks_position() in ['top', 'unknown']\n                    or ax.xaxis.get_label_position() == 'top'):\n                bb = ax.xaxis.get_tightbbox(renderer)\n            else:\n                bb = ax.get_window_extent(renderer)\n            if bb is not None:\n                top = max(top, bb.ymax)\n        if title.get_window_extent(renderer).ymin < top:\n            _, y = self.transAxes.inverted().transform((0, top))\n            title.set_position((x, y))\n            # empirically, this doesn't always get the min to top,\n            # so we need to adjust again.\n            if title.get_window_extent(renderer).ymin < top:\n                _, y = self.transAxes.inverted().transform(\n                    (0., 2 * top - title.get_window_extent(renderer).ymin))\n                title.set_position((x, y))\n\n    ymax = max(title.get_position()[1] for title in titles)\n    for title in titles:\n        # now line up all the titles at the highest baseline.\n        x, _ = title.get_position()\n        title.set_position((x, ymax))",
                "@martist.allow_rasterization\ndef draw(self, renderer=None, inframe=False):\n    \"\"\"Draw everything (plot lines, axes, labels)\"\"\"\n    if renderer is None:\n        renderer = self.figure._cachedRenderer\n    if renderer is None:\n        raise RuntimeError('No renderer defined')\n    if not self.get_visible():\n        return\n    self._unstale_viewLim()\n\n    renderer.open_group('axes')\n\n    # prevent triggering call backs during the draw process\n    self._stale = True\n\n    # loop over self and child axes...\n    locator = self.get_axes_locator()\n    if locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n\n    artists = self.get_children()\n    artists.remove(self.patch)\n\n    # the frame draws the edges around the axes patch -- we\n    # decouple these so the patch can be in the background and the\n    # frame in the foreground. Do this before drawing the axis\n    # objects so that the spine has the opportunity to update them.\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n\n    self._update_title_position(renderer)\n\n    if not self.axison or inframe:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n\n    if inframe:\n        artists.remove(self.title)\n        artists.remove(self._left_title)\n        artists.remove(self._right_title)\n\n    if not self.figure.canvas.is_saving():\n        artists = [a for a in artists\n                   if not a.get_animated() or a in self.images]\n    artists = sorted(artists, key=attrgetter('zorder'))\n\n    # rasterize artists with negative zorder\n    # if the minimum zorder is negative, start rasterization\n    rasterization_zorder = self._rasterization_zorder\n\n    if (rasterization_zorder is not None and\n            artists and artists[0].zorder < rasterization_zorder):\n        renderer.start_rasterizing()\n        artists_rasterized = [a for a in artists\n                              if a.zorder < rasterization_zorder]\n        artists = [a for a in artists\n                   if a.zorder >= rasterization_zorder]\n    else:\n        artists_rasterized = []\n\n    # the patch draws the background rectangle -- the frame below\n    # will draw the edges\n    if self.axison and self._frameon:\n        self.patch.draw(renderer)\n\n    if artists_rasterized:\n        for a in artists_rasterized:\n            a.draw(renderer)\n        renderer.stop_rasterizing()\n\n    mimage._draw_list_compositing_images(renderer, self, artists)\n\n    renderer.close_group('axes')\n    self.stale = False",
                "def draw_artist(self, a):\n    \"\"\"\n    This method can only be used after an initial draw which\n    caches the renderer.  It is used to efficiently update Axes\n    data (axis ticks, labels, etc are not updated)\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError(\"draw_artist can only be used after an \"\n                             \"initial draw which caches the renderer\")\n    a.draw(self.figure._cachedRenderer)",
                "def redraw_in_frame(self):\n    \"\"\"\n    This method can only be used after an initial draw which\n    caches the renderer.  It is used to efficiently update Axes\n    data (axis ticks, labels, etc are not updated)\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError(\"redraw_in_frame can only be used after an \"\n                             \"initial draw which caches the renderer\")\n    self.draw(self.figure._cachedRenderer, inframe=True)",
                "def get_renderer_cache(self):\n    return self.figure._cachedRenderer",
                "def get_frame_on(self):\n    \"\"\"Get whether the axes rectangle patch is drawn.\"\"\"\n    return self._frameon",
                "def set_frame_on(self, b):\n    \"\"\"\n    Set whether the axes rectangle patch is drawn.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._frameon = b\n    self.stale = True",
                "def get_axisbelow(self):\n    \"\"\"\n    Get whether axis ticks and gridlines are above or below most artists.\n\n    Returns\n    -------\n    axisbelow : bool or 'line'\n\n    See Also\n    --------\n    set_axisbelow\n    \"\"\"\n    return self._axisbelow",
                "def set_axisbelow(self, b):\n    \"\"\"\n    Set whether axis ticks and gridlines are above or below most artists.\n\n    This controls the zorder of the ticks and gridlines. For more\n    information on the zorder see :doc:`/gallery/misc/zorder_demo`.\n\n    Parameters\n    ----------\n    b : bool or 'line'\n        Possible values:\n\n        - *True* (zorder = 0.5): Ticks and gridlines are below all Artists.\n        - 'line' (zorder = 1.5): Ticks and gridlines are above patches\n          (e.g. rectangles, with default zorder = 1) but still below lines\n          and markers (with their default zorder = 2).\n        - *False* (zorder = 2.5): Ticks and gridlines are above patches\n          and lines / markers.\n\n    See Also\n    --------\n    get_axisbelow\n    \"\"\"\n    self._axisbelow = axisbelow = validate_axisbelow(b)\n    if axisbelow is True:\n        zorder = 0.5\n    elif axisbelow is False:\n        zorder = 2.5\n    elif axisbelow == \"line\":\n        zorder = 1.5\n    else:\n        raise ValueError(\"Unexpected axisbelow value\")\n    for axis in self._get_axis_list():\n        axis.set_zorder(zorder)\n    self.stale = True",
                "@docstring.dedent_interpd\ndef grid(self, b=None, which='major', axis='both', **kwargs):\n    \"\"\"\n    Configure the grid lines.\n\n    Parameters\n    ----------\n    b : bool or None, optional\n        Whether to show the grid lines. If any *kwargs* are supplied,\n        it is assumed you want the grid on and *b* will be set to True.\n\n        If *b* is *None* and there are no *kwargs*, this toggles the\n        visibility of the lines.\n\n    which : {'major', 'minor', 'both'}, optional\n        The grid lines to apply the changes on.\n\n    axis : {'both', 'x', 'y'}, optional\n        The axis to apply the changes on.\n\n    **kwargs : `.Line2D` properties\n        Define the line properties of the grid, e.g.::\n\n            grid(color='r', linestyle='-', linewidth=2)\n\n        Valid keyword arguments are:\n\n        %(_Line2D_docstr)s\n\n    Notes\n    -----\n    The axis is drawn as a unit, so the effective zorder for drawing the\n    grid is determined by the zorder of each axis, not by the zorder of the\n    `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,\n    use `.set_axisbelow` or, for more control, call the\n    `~matplotlib.axis.Axis.set_zorder` method of each axis.\n    \"\"\"\n    if len(kwargs):\n        b = True\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        self.xaxis.grid(b, which=which, **kwargs)\n    if axis in ['y', 'both']:\n        self.yaxis.grid(b, which=which, **kwargs)",
                "def ticklabel_format(self, *, axis='both', style='', scilimits=None,\n                     useOffset=None, useLocale=None, useMathText=None):\n    r\"\"\"\n    Change the `~matplotlib.ticker.ScalarFormatter` used by\n    default for linear axes.\n\n    Optional keyword arguments:\n\n      ==============   =========================================\n      Keyword          Description\n      ==============   =========================================\n      *axis*           [ 'x' | 'y' | 'both' ]\n      *style*          [ 'sci' (or 'scientific') | 'plain' ]\n                       plain turns off scientific notation\n      *scilimits*      (m, n), pair of integers; if *style*\n                       is 'sci', scientific notation will\n                       be used for numbers outside the range\n                       10\\ :sup:`m` to 10\\ :sup:`n`.\n                       Use (0, 0) to include all numbers.\n                       Use (m, m) where m != 0 to fix the order\n                       of magnitude to 10\\ :sup:`m`.\n      *useOffset*      [ bool | offset ]; if True,\n                       the offset will be calculated as needed;\n                       if False, no offset will be used; if a\n                       numeric offset is specified, it will be\n                       used.\n      *useLocale*      If True, format the number according to\n                       the current locale.  This affects things\n                       such as the character used for the\n                       decimal separator.  If False, use\n                       C-style (English) formatting.  The\n                       default setting is controlled by the\n                       axes.formatter.use_locale rcparam.\n      *useMathText*    If True, render the offset and scientific\n                       notation in mathtext\n      ==============   =========================================\n\n    Only the major ticks are affected.\n    If the method is called when the `~matplotlib.ticker.ScalarFormatter`\n    is not the `~matplotlib.ticker.Formatter` being used, an\n    `AttributeError` will be raised.\n    \"\"\"\n    style = style.lower()\n    axis = axis.lower()\n    if scilimits is not None:\n        try:\n            m, n = scilimits\n            m + n + 1  # check that both are numbers\n        except (ValueError, TypeError):\n            raise ValueError(\"scilimits must be a sequence of 2 integers\")\n    STYLES = {'sci': True, 'scientific': True, 'plain': False, '': None}\n    is_sci_style = cbook._check_getitem(STYLES, style=style)\n    axis_map = {**{k: [v] for k, v in self._get_axis_map().items()},\n                'both': self._get_axis_list()}\n    axises = cbook._check_getitem(axis_map, axis=axis)\n    try:\n        for axis in axises:\n            if is_sci_style is not None:\n                axis.major.formatter.set_scientific(is_sci_style)\n            if scilimits is not None:\n                axis.major.formatter.set_powerlimits(scilimits)\n            if useOffset is not None:\n                axis.major.formatter.set_useOffset(useOffset)\n            if useLocale is not None:\n                axis.major.formatter.set_useLocale(useLocale)\n            if useMathText is not None:\n                axis.major.formatter.set_useMathText(useMathText)\n    except AttributeError:\n        raise AttributeError(\n            \"This method only works with the ScalarFormatter\")",
                "def locator_params(self, axis='both', tight=None, **kwargs):\n    \"\"\"\n    Control behavior of major tick locators.\n\n    Because the locator is involved in autoscaling, `~.Axes.autoscale_view`\n    is called automatically after the parameters are changed.\n\n    Parameters\n    ----------\n    axis : {'both', 'x', 'y'}, optional\n        The axis on which to operate.\n\n    tight : bool or None, optional\n        Parameter passed to `~.Axes.autoscale_view`.\n        Default is None, for no change.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Remaining keyword arguments are passed to directly to the\n        ``set_params()`` method of the locator. Supported keywords depend\n        on the type of the locator. See for example\n        `~.ticker.MaxNLocator.set_params` for the `.ticker.MaxNLocator`\n        used by default for linear axes.\n\n    Examples\n    --------\n    When plotting small subplots, one might want to reduce the maximum\n    number of ticks and use tight bounds, for example::\n\n        ax.locator_params(tight=True, nbins=4)\n\n    \"\"\"\n    _x = axis in ['x', 'both']\n    _y = axis in ['y', 'both']\n    if _x:\n        self.xaxis.get_major_locator().set_params(**kwargs)\n    if _y:\n        self.yaxis.get_major_locator().set_params(**kwargs)\n    self._request_autoscale_view(tight=tight, scalex=_x, scaley=_y)",
                "def tick_params(self, axis='both', **kwargs):\n    \"\"\"Change the appearance of ticks, tick labels, and gridlines.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, optional\n        Which axis to apply the parameters to.\n\n    Other Parameters\n    ----------------\n    axis : {'x', 'y', 'both'}\n        Axis on which to operate; default is 'both'.\n    reset : bool, default: False\n        If *True*, set all parameters to defaults before processing other\n        keyword arguments.\n    which : {'major', 'minor', 'both'}\n        Default is 'major'; apply arguments to *which* ticks.\n    direction : {'in', 'out', 'inout'}\n        Puts ticks inside the axes, outside the axes, or both.\n    length : float\n        Tick length in points.\n    width : float\n        Tick width in points.\n    color : color\n        Tick color.\n    pad : float\n        Distance in points between tick and label.\n    labelsize : float or str\n        Tick label font size in points or as a string (e.g., 'large').\n    labelcolor : color\n        Tick label color.\n    colors : color\n        Tick color and label color.\n    zorder : float\n        Tick and label zorder.\n    bottom, top, left, right : bool\n        Whether to draw the respective ticks.\n    labelbottom, labeltop, labelleft, labelright : bool\n        Whether to draw the respective tick labels.\n    labelrotation : float\n        Tick label rotation\n    grid_color : color\n        Gridline color.\n    grid_alpha : float\n        Transparency of gridlines: 0 (transparent) to 1 (opaque).\n    grid_linewidth : float\n        Width of gridlines in points.\n    grid_linestyle : str\n        Any valid `.Line2D` line style spec.\n\n    Examples\n    --------\n    Usage ::\n\n        ax.tick_params(direction='out', length=6, width=2, colors='r',\n                       grid_color='r', grid_alpha=0.5)\n\n    This will make all major ticks be red, pointing out of the box,\n    and with dimensions 6 points by 2 points.  Tick labels will\n    also be red.  Gridlines will be red and translucent.\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        xkw = dict(kwargs)\n        xkw.pop('left', None)\n        xkw.pop('right', None)\n        xkw.pop('labelleft', None)\n        xkw.pop('labelright', None)\n        self.xaxis.set_tick_params(**xkw)\n    if axis in ['y', 'both']:\n        ykw = dict(kwargs)\n        ykw.pop('top', None)\n        ykw.pop('bottom', None)\n        ykw.pop('labeltop', None)\n        ykw.pop('labelbottom', None)\n        self.yaxis.set_tick_params(**ykw)",
                "def set_axis_off(self):\n    \"\"\"\n    Turn the x- and y-axis off.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = False\n    self.stale = True",
                "def set_axis_on(self):\n    \"\"\"\n    Turn the x- and y-axis on.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = True\n    self.stale = True",
                "def invert_xaxis(self):\n    \"\"\"\n    Invert the x-axis.\n\n    See Also\n    --------\n    xaxis_inverted\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    self.xaxis.set_inverted(not self.xaxis.get_inverted())",
                "def xaxis_inverted(self):\n    \"\"\"\n    Return whether the x-axis is inverted.\n\n    The axis is inverted if the left value is larger than the right value.\n\n    See Also\n    --------\n    invert_xaxis\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    return self.xaxis.get_inverted()",
                "def get_xbound(self):\n    \"\"\"\n    Return the lower and upper x-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    left, right = self.get_xlim()\n    if left < right:\n        return left, right\n    else:\n        return right, left",
                "def set_xbound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the x-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (``Axes._autoscaleXon``).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n\n    old_lower, old_upper = self.get_xbound()\n\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n\n    if self.xaxis_inverted():\n        if lower < upper:\n            self.set_xlim(upper, lower, auto=None)\n        else:\n            self.set_xlim(lower, upper, auto=None)\n    else:\n        if lower < upper:\n            self.set_xlim(lower, upper, auto=None)\n        else:\n            self.set_xlim(upper, lower, auto=None)",
                "def get_xlim(self):\n    \"\"\"\n    Return the x-axis view limits.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The current x-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The x-axis may be inverted, in which case the *left* value will\n    be greater than the *right* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervalx)",
                "def _validate_converted_limits(self, limit, convert):\n    \"\"\"\n    Raise ValueError if converted limits are non-finite.\n\n    Note that this function also accepts None as a limit argument.\n\n    Returns\n    -------\n    The limit value after call to convert(), or None if limit is None.\n    \"\"\"\n    if limit is not None:\n        converted_limit = convert(limit)\n        if (isinstance(converted_limit, Real)\n                and not np.isfinite(converted_limit)):\n            raise ValueError(\"Axis limits cannot be NaN or Inf\")\n        return converted_limit",
                "def set_xlim(self, left=None, right=None, emit=True, auto=False,\n             *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    .. ACCEPTS: (left: float, right: float)\n\n    Parameters\n    ----------\n    left : scalar, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may also be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n    right : scalar, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, optional\n        Whether to notify observers of limit change (default: True).\n\n    auto : bool or None, optional\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off (default action), None leaves unchanged.\n\n    xmin, xmax : scalar, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and np.iterable(left):\n        left, right = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n\n    if left is None or right is None:\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n\n    if self.get_xscale() == 'log' and (left <= 0 or right <= 0):\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive left xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive right xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(\n            f\"Attempting to set identical left == right == {left} results \"\n            f\"in singular transformations; automatically expanding.\")\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        # Call all of the other x-axes that are shared with this one\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return left, right",
                "def get_xscale(self):\n    \"\"\"\n    Return the x-axis scale as string.\n\n    See Also\n    --------\n    set_xscale\n    \"\"\"\n    return self.xaxis.get_scale()",
                "def set_xscale(self, value, **kwargs):\n    \"\"\"\n    Set the x-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    g = self.get_shared_x_axes()\n    for ax in g.get_siblings(self):\n        ax.xaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    self._request_autoscale_view(scaley=False)",
                "def get_xticks(self, minor=False):\n    \"\"\"Return the x ticks as a list of locations\"\"\"\n    return self.xaxis.get_ticklocs(minor=minor)",
                "def set_xticks(self, ticks, minor=False):\n    \"\"\"\n    Set the x ticks with list of *ticks*\n\n    Parameters\n    ----------\n    ticks : list\n        List of x-axis tick locations.\n\n    minor : bool, optional\n        If ``False`` sets major ticks, if ``True`` sets minor ticks.\n        Default is ``False``.\n    \"\"\"\n    ret = self.xaxis.set_ticks(ticks, minor=minor)\n    self.stale = True\n    return ret",
                "def get_xmajorticklabels(self):\n    \"\"\"\n    Get the major x tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.xaxis.get_majorticklabels()",
                "def get_xminorticklabels(self):\n    \"\"\"\n    Get the minor x tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.xaxis.get_minorticklabels()",
                "def get_xticklabels(self, minor=False, which=None):\n    \"\"\"\n    Get the x tick labels as a list of `~matplotlib.text.Text` instances.\n\n    Parameters\n    ----------\n    minor : bool, optional\n       If True return the minor ticklabels,\n       else return the major ticklabels.\n\n    which : None, ('minor', 'major', 'both')\n       Overrides *minor*.\n\n       Selects which ticklabels to return\n\n    Returns\n    -------\n    ret : list\n       List of `~matplotlib.text.Text` instances.\n    \"\"\"\n    return self.xaxis.get_ticklabels(minor=minor, which=which)",
                "def set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs):\n    \"\"\"\n    Set the x-tick labels with list of string labels.\n\n    Parameters\n    ----------\n    labels : List[str]\n        List of string labels.\n\n    fontdict : dict, optional\n        A dictionary controlling the appearance of the ticklabels.\n        The default *fontdict* is::\n\n           {'fontsize': rcParams['axes.titlesize'],\n            'fontweight': rcParams['axes.titleweight'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    minor : bool, optional\n        Whether to set the minor ticklabels rather than the major ones.\n\n    Returns\n    -------\n    A list of `~.text.Text` instances.\n\n    Other Parameters\n    -----------------\n    **kwargs : `~.text.Text` properties.\n    \"\"\"\n    if fontdict is not None:\n        kwargs.update(fontdict)\n    ret = self.xaxis.set_ticklabels(labels,\n                                    minor=minor, **kwargs)\n    self.stale = True\n    return ret",
                "def invert_yaxis(self):\n    \"\"\"\n    Invert the y-axis.\n\n    See Also\n    --------\n    yaxis_inverted\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    self.yaxis.set_inverted(not self.yaxis.get_inverted())",
                "def yaxis_inverted(self):\n    \"\"\"\n    Return whether the y-axis is inverted.\n\n    The axis is inverted if the bottom value is larger than the top value.\n\n    See Also\n    --------\n    invert_yaxis\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    return self.yaxis.get_inverted()",
                "def get_ybound(self):\n    \"\"\"\n    Return the lower and upper y-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    bottom, top = self.get_ylim()\n    if bottom < top:\n        return bottom, top\n    else:\n        return top, bottom",
                "def set_ybound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the y-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (``Axes._autoscaleYon``).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n\n    old_lower, old_upper = self.get_ybound()\n\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n\n    if self.yaxis_inverted():\n        if lower < upper:\n            self.set_ylim(upper, lower, auto=None)\n        else:\n            self.set_ylim(lower, upper, auto=None)\n    else:\n        if lower < upper:\n            self.set_ylim(lower, upper, auto=None)\n        else:\n            self.set_ylim(upper, lower, auto=None)",
                "def get_ylim(self):\n    \"\"\"\n    Return the y-axis view limits.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The current y-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The y-axis may be inverted, in which case the *bottom* value\n    will be greater than the *top* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervaly)",
                "def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n             *, ymin=None, ymax=None):\n    \"\"\"\n    Set the y-axis view limits.\n\n    .. ACCEPTS: (bottom: float, top: float)\n\n    Parameters\n    ----------\n    bottom : scalar, optional\n        The bottom ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The bottom and top ylims may also be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n    top : scalar, optional\n        The top ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, optional\n        Whether to notify observers of limit change (default: ``True``).\n\n    auto : bool or None, optional\n        Whether to turn on autoscaling of the y-axis. *True* turns on,\n        *False* turns off (default action), *None* leaves unchanged.\n\n    ymin, ymax : scalar, optional\n        They are equivalent to bottom and top respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The *bottom* value may be greater than the *top* value, in which\n    case the y-axis values will decrease from *bottom* to *top*.\n\n    Examples\n    --------\n    >>> set_ylim(bottom, top)\n    >>> set_ylim((bottom, top))\n    >>> bottom, top = set_ylim(bottom, top)\n\n    One limit may be left unchanged.\n\n    >>> set_ylim(top=top_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the y-axis. For example, suppose ``y`` represents depth of the\n    ocean in m. The y-axis limits might be set like the following\n    so 5000 m depth is at the bottom of the plot and the surface,\n    0 m, is at the top.\n\n    >>> set_ylim(5000, 0)\n    \"\"\"\n    if top is None and np.iterable(bottom):\n        bottom, top = bottom\n    if ymin is not None:\n        if bottom is not None:\n            raise TypeError('Cannot pass both `ymin` and `bottom`')\n        bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise TypeError('Cannot pass both `ymax` and `top`')\n        top = ymax\n\n    self._process_unit_info(ydata=(bottom, top))\n    bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n    top = self._validate_converted_limits(top, self.convert_yunits)\n\n    if bottom is None or top is None:\n        # Axes init calls set_ylim(0, 1) before get_ylim() can be called,\n        # so only grab the limits if we really need them.\n        old_bottom, old_top = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n\n    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_bottom, old_top = self.get_ylim()\n        if bottom <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive bottom ylim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            bottom = old_bottom\n        if top <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive top ylim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            top = old_top\n    if bottom == top:\n        cbook._warn_external(\n            f\"Attempting to set identical bottom == top == {bottom} \"\n            f\"results in singular transformations; automatically \"\n            f\"expanding.\")\n    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n\n    self._viewLim.intervaly = (bottom, top)\n    if auto is not None:\n        self._autoscaleYon = bool(auto)\n\n    if emit:\n        self.callbacks.process('ylim_changed', self)\n        # Call all of the other y-axes that are shared with this one\n        for other in self._shared_y_axes.get_siblings(self):\n            if other is not self:\n                other.set_ylim(self.viewLim.intervaly,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return bottom, top",
                "def get_yscale(self):\n    \"\"\"\n    Return the y-axis scale as string.\n\n    See Also\n    --------\n    set_yscale\n    \"\"\"\n    return self.yaxis.get_scale()",
                "def set_yscale(self, value, **kwargs):\n    \"\"\"\n    Set the y-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    g = self.get_shared_y_axes()\n    for ax in g.get_siblings(self):\n        ax.yaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    self._request_autoscale_view(scalex=False)",
                "def get_yticks(self, minor=False):\n    \"\"\"Return the y ticks as a list of locations\"\"\"\n    return self.yaxis.get_ticklocs(minor=minor)",
                "def set_yticks(self, ticks, minor=False):\n    \"\"\"\n    Set the y ticks with list of *ticks*\n\n    Parameters\n    ----------\n    ticks : list\n        List of y-axis tick locations\n\n    minor : bool, optional\n        If ``False`` sets major ticks, if ``True`` sets minor ticks.\n        Default is ``False``.\n    \"\"\"\n    ret = self.yaxis.set_ticks(ticks, minor=minor)\n    return ret",
                "def get_ymajorticklabels(self):\n    \"\"\"\n    Get the major y tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.yaxis.get_majorticklabels()",
                "def get_yminorticklabels(self):\n    \"\"\"\n    Get the minor y tick labels.\n\n    Returns\n    -------\n    labels : list\n        List of `~matplotlib.text.Text` instances\n    \"\"\"\n    return self.yaxis.get_minorticklabels()",
                "def get_yticklabels(self, minor=False, which=None):\n    \"\"\"\n    Get the y tick labels as a list of `~matplotlib.text.Text` instances.\n\n    Parameters\n    ----------\n    minor : bool\n       If True return the minor ticklabels,\n       else return the major ticklabels\n\n    which : None, ('minor', 'major', 'both')\n       Overrides *minor*.\n\n       Selects which ticklabels to return\n\n    Returns\n    -------\n    ret : list\n       List of `~matplotlib.text.Text` instances.\n    \"\"\"\n    return self.yaxis.get_ticklabels(minor=minor, which=which)",
                "def set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs):\n    \"\"\"\n    Set the y-tick labels with list of strings labels.\n\n    Parameters\n    ----------\n    labels : List[str]\n        list of string labels\n\n    fontdict : dict, optional\n        A dictionary controlling the appearance of the ticklabels.\n        The default *fontdict* is::\n\n           {'fontsize': rcParams['axes.titlesize'],\n            'fontweight': rcParams['axes.titleweight'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    minor : bool, optional\n        Whether to set the minor ticklabels rather than the major ones.\n\n    Returns\n    -------\n    A list of `~.text.Text` instances.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~.text.Text` properties.\n    \"\"\"\n    if fontdict is not None:\n        kwargs.update(fontdict)\n    return self.yaxis.set_ticklabels(labels,\n                                     minor=minor, **kwargs)",
                "def xaxis_date(self, tz=None):\n    \"\"\"\n    Sets up x-axis ticks and labels that treat the x data as dates.\n\n    Parameters\n    ----------\n    tz : str or `tzinfo` instance, optional\n        Timezone.  Defaults to :rc:`timezone`.\n    \"\"\"\n    # should be enough to inform the unit conversion interface\n    # dates are coming in\n    self.xaxis.axis_date(tz)",
                "def yaxis_date(self, tz=None):\n    \"\"\"\n    Sets up y-axis ticks and labels that treat the y data as dates.\n\n    Parameters\n    ----------\n    tz : str or `tzinfo` instance, optional\n        Timezone.  Defaults to :rc:`timezone`.\n    \"\"\"\n    self.yaxis.axis_date(tz)",
                "def format_xdata(self, x):\n    \"\"\"\n    Return *x* formatted as an x-value.\n\n    This function will use the `.fmt_xdata` attribute if it is not None,\n    else will fall back on the xaxis major formatter.\n    \"\"\"\n    return (self.fmt_xdata if self.fmt_xdata is not None\n            else self.xaxis.get_major_formatter().format_data_short)(x)",
                "def format_ydata(self, y):\n    \"\"\"\n    Return *y* formatted as an y-value.\n\n    This function will use the `.fmt_ydata` attribute if it is not None,\n    else will fall back on the yaxis major formatter.\n    \"\"\"\n    return (self.fmt_ydata if self.fmt_ydata is not None\n            else self.yaxis.get_major_formatter().format_data_short)(y)",
                "def format_coord(self, x, y):\n    \"\"\"Return a format string formatting the *x*, *y* coordinates.\"\"\"\n    if x is None:\n        xs = '???'\n    else:\n        xs = self.format_xdata(x)\n    if y is None:\n        ys = '???'\n    else:\n        ys = self.format_ydata(y)\n    return 'x=%s y=%s' % (xs, ys)",
                "def minorticks_on(self):\n    \"\"\"\n    Display minor ticks on the axes.\n\n    Displaying minor ticks may reduce performance; you may turn them off\n    using `minorticks_off()` if drawing speed is a problem.\n    \"\"\"\n    for ax in (self.xaxis, self.yaxis):\n        scale = ax.get_scale()\n        if scale == 'log':\n            s = ax._scale\n            ax.set_minor_locator(mticker.LogLocator(s.base, s.subs))\n        elif scale == 'symlog':\n            s = ax._scale\n            ax.set_minor_locator(\n                mticker.SymmetricalLogLocator(s._transform, s.subs))\n        else:\n            ax.set_minor_locator(mticker.AutoMinorLocator())",
                "def minorticks_off(self):\n    \"\"\"Remove minor ticks from the axes.\"\"\"\n    self.xaxis.set_minor_locator(mticker.NullLocator())\n    self.yaxis.set_minor_locator(mticker.NullLocator())",
                "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n    \"\"\"\n    return True",
                "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports any pan/zoom button functionality.\n    \"\"\"\n    return True",
                "def get_navigate(self):\n    \"\"\"\n    Get whether the axes responds to navigation commands\n    \"\"\"\n    return self._navigate",
                "def set_navigate(self, b):\n    \"\"\"\n    Set whether the axes responds to navigation toolbar commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._navigate = b",
                "def get_navigate_mode(self):\n    \"\"\"\n    Get the navigation toolbar button status: 'PAN', 'ZOOM', or None\n    \"\"\"\n    return self._navigate_mode",
                "def set_navigate_mode(self, b):\n    \"\"\"\n    Set the navigation toolbar button status;\n\n    .. warning::\n        this is not a user-API function.\n\n    \"\"\"\n    self._navigate_mode = b",
                "def _get_view(self):\n    \"\"\"\n    Save information required to reproduce the current view.\n\n    Called before a view is changed, such as during a pan or zoom\n    initiated by the user. You may return any information you deem\n    necessary to describe the view.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation saves the view limits. You *must* implement\n        :meth:`_set_view` if you implement this method.\n    \"\"\"\n    xmin, xmax = self.get_xlim()\n    ymin, ymax = self.get_ylim()\n    return (xmin, xmax, ymin, ymax)",
                "def _set_view(self, view):\n    \"\"\"\n    Apply a previously saved view.\n\n    Called when restoring a view, such as with the navigation buttons.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation restores the view limits. You *must*\n        implement :meth:`_get_view` if you implement this method.\n    \"\"\"\n    xmin, xmax, ymin, ymax = view\n    self.set_xlim((xmin, xmax))\n    self.set_ylim((ymin, ymax))",
                "def _set_view_from_bbox(self, bbox, direction='in',\n                        mode=None, twinx=False, twiny=False):\n    \"\"\"\n    Update view from a selection bbox.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation sets the view limits to the bbox directly.\n\n    Parameters\n    ----------\n    bbox : 4-tuple or 3 tuple\n        * If bbox is a 4 tuple, it is the selected bounding box limits,\n          in *display* coordinates.\n        * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where\n          (xp, yp) is the center of zooming and scl the scale factor to\n          zoom by.\n\n    direction : str\n        The direction to apply the bounding box.\n            * `'in'` - The bounding box describes the view directly, i.e.,\n                       it zooms in.\n            * `'out'` - The bounding box describes the size to make the\n                        existing view, i.e., it zooms out.\n\n    mode : str or None\n        The selection mode, whether to apply the bounding box in only the\n        `'x'` direction, `'y'` direction or both (`None`).\n\n    twinx : bool\n        Whether this axis is twinned in the *x*-direction.\n\n    twiny : bool\n        Whether this axis is twinned in the *y*-direction.\n    \"\"\"\n    Xmin, Xmax = self.get_xlim()\n    Ymin, Ymax = self.get_ylim()\n\n    if len(bbox) == 3:\n        # Zooming code\n        xp, yp, scl = bbox\n\n        # Should not happen\n        if scl == 0:\n            scl = 1.\n\n        # direction = 'in'\n        if scl > 1:\n            direction = 'in'\n        else:\n            direction = 'out'\n            scl = 1/scl\n\n        # get the limits of the axes\n        tranD2C = self.transData.transform\n        xmin, ymin = tranD2C((Xmin, Ymin))\n        xmax, ymax = tranD2C((Xmax, Ymax))\n\n        # set the range\n        xwidth = xmax - xmin\n        ywidth = ymax - ymin\n        xcen = (xmax + xmin)*.5\n        ycen = (ymax + ymin)*.5\n        xzc = (xp*(scl - 1) + xcen)/scl\n        yzc = (yp*(scl - 1) + ycen)/scl\n\n        bbox = [xzc - xwidth/2./scl, yzc - ywidth/2./scl,\n                xzc + xwidth/2./scl, yzc + ywidth/2./scl]\n    elif len(bbox) != 4:\n        # should be len 3 or 4 but nothing else\n        cbook._warn_external(\n            \"Warning in _set_view_from_bbox: bounding box is not a tuple \"\n            \"of length 3 or 4. Ignoring the view change.\")\n        return\n\n    # Just grab bounding box\n    lastx, lasty, x, y = bbox\n\n    # zoom to rect\n    inverse = self.transData.inverted()\n    (lastx, lasty), (x, y) = inverse.transform([(lastx, lasty), (x, y)])\n\n    if twinx:\n        x0, x1 = Xmin, Xmax\n    else:\n        if Xmin < Xmax:\n            if x < lastx:\n                x0, x1 = x, lastx\n            else:\n                x0, x1 = lastx, x\n            if x0 < Xmin:\n                x0 = Xmin\n            if x1 > Xmax:\n                x1 = Xmax\n        else:\n            if x > lastx:\n                x0, x1 = x, lastx\n            else:\n                x0, x1 = lastx, x\n            if x0 > Xmin:\n                x0 = Xmin\n            if x1 < Xmax:\n                x1 = Xmax\n\n    if twiny:\n        y0, y1 = Ymin, Ymax\n    else:\n        if Ymin < Ymax:\n            if y < lasty:\n                y0, y1 = y, lasty\n            else:\n                y0, y1 = lasty, y\n            if y0 < Ymin:\n                y0 = Ymin\n            if y1 > Ymax:\n                y1 = Ymax\n        else:\n            if y > lasty:\n                y0, y1 = y, lasty\n            else:\n                y0, y1 = lasty, y\n            if y0 > Ymin:\n                y0 = Ymin\n            if y1 < Ymax:\n                y1 = Ymax\n\n    if direction == 'in':\n        if mode == 'x':\n            self.set_xlim((x0, x1))\n        elif mode == 'y':\n            self.set_ylim((y0, y1))\n        else:\n            self.set_xlim((x0, x1))\n            self.set_ylim((y0, y1))\n    elif direction == 'out':\n        if self.get_xscale() == 'log':\n            alpha = np.log(Xmax / Xmin) / np.log(x1 / x0)\n            rx1 = pow(Xmin / x0, alpha) * Xmin\n            rx2 = pow(Xmax / x0, alpha) * Xmin\n        else:\n            alpha = (Xmax - Xmin) / (x1 - x0)\n            rx1 = alpha * (Xmin - x0) + Xmin\n            rx2 = alpha * (Xmax - x0) + Xmin\n        if self.get_yscale() == 'log':\n            alpha = np.log(Ymax / Ymin) / np.log(y1 / y0)\n            ry1 = pow(Ymin / y0, alpha) * Ymin\n            ry2 = pow(Ymax / y0, alpha) * Ymin\n        else:\n            alpha = (Ymax - Ymin) / (y1 - y0)\n            ry1 = alpha * (Ymin - y0) + Ymin\n            ry2 = alpha * (Ymax - y0) + Ymin\n\n        if mode == 'x':\n            self.set_xlim((rx1, rx2))\n        elif mode == 'y':\n            self.set_ylim((ry1, ry2))\n        else:\n            self.set_xlim((rx1, rx2))\n            self.set_ylim((ry1, ry2))",
                "def start_pan(self, x, y, button):\n    \"\"\"\n    Called when a pan operation has started.\n\n    *x*, *y* are the mouse coordinates in display coords.\n    button is the mouse button number:\n\n    * 1: LEFT\n    * 2: MIDDLE\n    * 3: RIGHT\n\n    .. note::\n\n        Intended to be overridden by new projection types.\n\n    \"\"\"\n    self._pan_start = types.SimpleNamespace(\n        lim=self.viewLim.frozen(),\n        trans=self.transData.frozen(),\n        trans_inverse=self.transData.inverted().frozen(),\n        bbox=self.bbox.frozen(),\n        x=x,\n        y=y)",
                "def end_pan(self):\n    \"\"\"\n    Called when a pan operation completes (when the mouse button\n    is up.)\n\n    .. note::\n\n        Intended to be overridden by new projection types.\n\n    \"\"\"\n    del self._pan_start",
                "def drag_pan(self, button, key, x, y):\n    \"\"\"\n    Called when the mouse moves during a pan operation.\n\n    *button* is the mouse button number:\n\n    * 1: LEFT\n    * 2: MIDDLE\n    * 3: RIGHT\n\n    *key* is a \"shift\" key\n\n    *x*, *y* are the mouse coordinates in display coords.\n\n    .. note::\n\n        Intended to be overridden by new projection types.\n\n    \"\"\"\n    def format_deltas(key, dx, dy):\n        if key == 'control':\n            if abs(dx) > abs(dy):\n                dy = dx\n            else:\n                dx = dy\n        elif key == 'x':\n            dy = 0\n        elif key == 'y':\n            dx = 0\n        elif key == 'shift':\n            if 2 * abs(dx) < abs(dy):\n                dx = 0\n            elif 2 * abs(dy) < abs(dx):\n                dy = 0\n            elif abs(dx) > abs(dy):\n                dy = dy / abs(dy) * abs(dx)\n            else:\n                dx = dx / abs(dx) * abs(dy)\n        return dx, dy\n\n    p = self._pan_start\n    dx = x - p.x\n    dy = y - p.y\n    if dx == dy == 0:\n        return\n    if button == 1:\n        dx, dy = format_deltas(key, dx, dy)\n        result = p.bbox.translated(-dx, -dy).transformed(p.trans_inverse)\n    elif button == 3:\n        try:\n            dx = -dx / self.bbox.width\n            dy = -dy / self.bbox.height\n            dx, dy = format_deltas(key, dx, dy)\n            if self.get_aspect() != 'auto':\n                dx = dy = 0.5 * (dx + dy)\n            alpha = np.power(10.0, (dx, dy))\n            start = np.array([p.x, p.y])\n            oldpoints = p.lim.transformed(p.trans)\n            newpoints = start + alpha * (oldpoints - start)\n            result = (mtransforms.Bbox(newpoints)\n                      .transformed(p.trans_inverse))\n        except OverflowError:\n            cbook._warn_external('Overflow while panning')\n            return\n    else:\n        return\n\n    valid = np.isfinite(result.transformed(p.trans))\n    points = result.get_points().astype(object)\n    # Just ignore invalid limits (typically, underflow in log-scale).\n    points[~valid] = None\n    self.set_xlim(points[:, 0])\n    self.set_ylim(points[:, 1])",
                "def get_children(self):\n    # docstring inherited.\n    return [\n        *self.collections,\n        *self.patches,\n        *self.lines,\n        *self.texts,\n        *self.artists,\n        *self.spines.values(),\n        *self._get_axis_list(),\n        self.title, self._left_title, self._right_title,\n        *self.tables,\n        *self.images,\n        *self.child_axes,\n        *([self.legend_] if self.legend_ is not None else []),\n        self.patch,\n    ]",
                "def contains(self, mouseevent):\n    # docstring inherited.\n    inside, info = self._default_contains(mouseevent)\n    if inside is not None:\n        return inside, info\n    return self.patch.contains(mouseevent)",
                "def contains_point(self, point):\n    \"\"\"\n    Return whether *point* (pair of pixel coordinates) is inside the axes\n    patch.\n    \"\"\"\n    return self.patch.contains_point(point, radius=1.0)",
                "def get_default_bbox_extra_artists(self):\n    \"\"\"\n    Return a default list of artists that are used for the bounding box\n    calculation.\n\n    Artists are excluded either by not being visible or\n    ``artist.set_in_layout(False)``.\n    \"\"\"\n\n    artists = self.get_children()\n\n    if not (self.axison and self._frameon):\n        # don't do bbox on spines if frame not on.\n        for spine in self.spines.values():\n            artists.remove(spine)\n\n    if not self.axison:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n\n    return [artist for artist in artists\n            if (artist.get_visible() and artist.get_in_layout())]",
                "def get_tightbbox(self, renderer, call_axes_locator=True,\n                  bbox_extra_artists=None):\n    \"\"\"\n    Return the tight bounding box of the axes, including axis and their\n    decorators (xlabel, title, etc).\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` instance\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of the axes are\n        included in the tight bounding box.\n\n    call_axes_locator : boolean (default ``True``)\n        If *call_axes_locator* is ``False``, it does not call the\n        ``_axes_locator`` attribute, which is necessary to get the correct\n        bounding box. ``call_axes_locator=False`` can be used if the\n        caller is only interested in the relative size of the tightbbox\n        compared to the axes bbox.\n\n    Returns\n    -------\n    bbox : `.BboxBase`\n        bounding box in figure pixel coordinates.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_window_extent\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.Spine.get_window_extent\n\n    \"\"\"\n\n    bb = []\n\n    if not self.get_visible():\n        return None\n\n    locator = self.get_axes_locator()\n    if locator and call_axes_locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n\n    if self.axison:\n        bb_xaxis = self.xaxis.get_tightbbox(renderer)\n        if bb_xaxis:\n            bb.append(bb_xaxis)\n\n        bb_yaxis = self.yaxis.get_tightbbox(renderer)\n        if bb_yaxis:\n            bb.append(bb_yaxis)\n\n    self._update_title_position(renderer)\n    axbbox = self.get_window_extent(renderer)\n    bb.append(axbbox)\n\n    self._update_title_position(renderer)\n    if self.title.get_visible():\n        bb.append(self.title.get_window_extent(renderer))\n    if self._left_title.get_visible():\n        bb.append(self._left_title.get_window_extent(renderer))\n    if self._right_title.get_visible():\n        bb.append(self._right_title.get_window_extent(renderer))\n\n    bb.append(self.get_window_extent(renderer))\n\n    bbox_artists = bbox_extra_artists\n    if bbox_artists is None:\n        bbox_artists = self.get_default_bbox_extra_artists()\n\n    for a in bbox_artists:\n        # Extra check here to quickly see if clipping is on and\n        # contained in the axes.  If it is, don't get the tightbbox for\n        # this artist because this can be expensive:\n        clip_extent = a._get_clipping_extent_bbox()\n        if clip_extent is not None:\n            clip_extent = mtransforms.Bbox.intersection(clip_extent,\n                axbbox)\n            if np.all(clip_extent.extents == axbbox.extents):\n                # clip extent is inside the axes bbox so don't check\n                # this artist\n                continue\n        bbox = a.get_tightbbox(renderer)\n        if (bbox is not None\n                and 0 < bbox.width < np.inf\n                and 0 < bbox.height < np.inf):\n            bb.append(bbox)\n    _bbox = mtransforms.Bbox.union(\n        [b for b in bb if b.width != 0 or b.height != 0])\n\n    return _bbox",
                "def _make_twin_axes(self, *args, **kwargs):\n    \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n    # Typically, SubplotBase._make_twin_axes is called instead of this.\n    if 'sharex' in kwargs and 'sharey' in kwargs:\n        raise ValueError(\"Twinned Axes may share only one axis\")\n    ax2 = self.figure.add_axes(self.get_position(True), *args, **kwargs)\n    self.set_adjustable('datalim')\n    ax2.set_adjustable('datalim')\n    self._twinned_axes.join(self, ax2)\n    return ax2",
                "def twinx(self):\n    \"\"\"\n    Create a twin Axes sharing the xaxis.\n\n    Create a new Axes with an invisible x-axis and an independent\n    y-axis positioned opposite to the original one (i.e. at right). The\n    x-axis autoscale setting will be inherited from the original\n    Axes.  To ensure that the tick marks of both y-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    ax_twin : Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twinx, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharex=self)\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    ax2.yaxis.set_offset_position('right')\n    ax2.set_autoscalex_on(self.get_autoscalex_on())\n    self.yaxis.tick_left()\n    ax2.xaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                "def twiny(self):\n    \"\"\"\n    Create a twin Axes sharing the yaxis.\n\n    Create a new Axes with an invisible y-axis and an independent\n    x-axis positioned opposite to the original one (i.e. at top). The\n    y-axis autoscale setting will be inherited from the original Axes.\n    To ensure that the tick marks of both x-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    ax_twin : Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twiny, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharey=self)\n    ax2.xaxis.tick_top()\n    ax2.xaxis.set_label_position('top')\n    ax2.set_autoscaley_on(self.get_autoscaley_on())\n    self.xaxis.tick_bottom()\n    ax2.yaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                "def get_shared_x_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for x axes.\"\"\"\n    return self._shared_x_axes",
                "def get_shared_y_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n    return self._shared_y_axes",
                "def _process_single_axis(data, axis, unit_name, kwargs):\n    # Return if there's no axis set\n    if axis is None:\n        return kwargs\n\n    if data is not None:\n        # We only need to update if there is nothing set yet.\n        if not axis.have_units():\n            axis.update_units(data)\n\n    # Check for units in the kwargs, and if present update axis\n    if kwargs is not None:\n        units = kwargs.pop(unit_name, axis.units)\n        if self.name == 'polar':\n            polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n            units = kwargs.pop(polar_units[unit_name], units)\n\n        if units != axis.units:\n            axis.set_units(units)\n            # If the units being set imply a different converter,\n            # we need to update.\n            if data is not None:\n                axis.update_units(data)\n    return kwargs",
                "def handle_single_axis(scale, autoscaleon, shared_axes, interval,\n                       minpos, axis, margin, stickies, set_bound):\n\n    if not (scale and autoscaleon):\n        return  # nothing to do...\n\n    shared = shared_axes.get_siblings(self)\n    dl = [ax.dataLim for ax in shared]\n    # ignore non-finite data limits if good limits exist\n    finite_dl = [d for d in dl if np.isfinite(d).all()]\n    if len(finite_dl):\n        # if finite limits exist for atleast one axis (and the\n        # other is infinite), restore the finite limits\n        x_finite = [d for d in dl\n                    if (np.isfinite(d.intervalx).all() and\n                        (d not in finite_dl))]\n        y_finite = [d for d in dl\n                    if (np.isfinite(d.intervaly).all() and\n                        (d not in finite_dl))]\n\n        dl = finite_dl\n        dl.extend(x_finite)\n        dl.extend(y_finite)\n\n    bb = mtransforms.BboxBase.union(dl)\n    # fall back on the viewlimits if this is not finite:\n    vl = None\n    if not np.isfinite(bb.intervalx).all():\n        vl = mtransforms.BboxBase.union([ax.viewLim for ax in shared])\n        bb.intervalx = vl.intervalx\n    if not np.isfinite(bb.intervaly).all():\n        if vl is None:\n            vl = mtransforms.BboxBase.union(\n                [ax.viewLim for ax in shared])\n        bb.intervaly = vl.intervaly\n    x0, x1 = getattr(bb, interval)\n    locator = axis.get_major_locator()\n    x0, x1 = locator.nonsingular(x0, x1)\n\n    # Prevent margin addition from crossing a sticky value.  Small\n    # tolerances (whose values come from isclose()) must be used due to\n    # floating point issues with streamplot.\n    def tol(x): return 1e-5 * abs(x) + 1e-8\n    # Index of largest element < x0 + tol, if any.\n    i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n    x0bound = stickies[i0] if i0 != -1 else None\n    # Index of smallest element > x1 - tol, if any.\n    i1 = stickies.searchsorted(x1 - tol(x1))\n    x1bound = stickies[i1] if i1 != len(stickies) else None\n\n    # Add the margin in figure space and then transform back, to handle\n    # non-linear scales.\n    minpos = getattr(bb, minpos)\n    transform = axis.get_transform()\n    inverse_trans = transform.inverted()\n    x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n    x0t, x1t = transform.transform([x0, x1])\n    delta = (x1t - x0t) * margin\n    if not np.isfinite(delta):\n        delta = 0  # If a bound isn't finite, set margin to zero.\n    x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n\n    # Apply sticky bounds.\n    if x0bound is not None:\n        x0 = max(x0, x0bound)\n    if x1bound is not None:\n        x1 = min(x1, x1bound)\n\n    if not self._tight:\n        x0, x1 = locator.view_limits(x0, x1)\n    set_bound(x0, x1)",
                "def format_deltas(key, dx, dy):\n    if key == 'control':\n        if abs(dx) > abs(dy):\n            dy = dx\n        else:\n            dx = dy\n    elif key == 'x':\n        dy = 0\n    elif key == 'y':\n        dx = 0\n    elif key == 'shift':\n        if 2 * abs(dx) < abs(dy):\n            dx = 0\n        elif 2 * abs(dy) < abs(dx):\n            dy = 0\n        elif abs(dx) > abs(dy):\n            dy = dy / abs(dy) * abs(dx)\n        else:\n            dx = dx / abs(dx) * abs(dy)\n    return dx, dy",
                "def tol(x): return 1e-5 * abs(x) + 1e-8"
            ],
            "inscope_function_signatures": [
                "_process_plot_format(fmt)",
                "__init__(self, axes, command='plot')",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "set_prop_cycle(self, *args, **kwargs)",
                "__call__(self, *args, **kwargs)",
                "get_next_color(self)",
                "_getdefaults(self, ignore, kw)",
                "_setdefaults(self, defaults, kw)",
                "_makeline(self, x, y, kw, kwargs)",
                "_makefill(self, x, y, kw, kwargs)",
                "_plot_args(self, tup, kwargs)",
                "__str__(self)",
                "__init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, **kwargs)",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "get_window_extent(self, *args, **kwargs)",
                "_init_axis(self)",
                "set_figure(self, fig)",
                "_unstale_viewLim(self)",
                "viewLim(self)",
                "_request_autoscale_view(self, tight=None, scalex=True, scaley=True)",
                "_set_lim_and_transforms(self)",
                "get_xaxis_transform(self, which='grid')",
                "get_xaxis_text1_transform(self, pad_points)",
                "get_xaxis_text2_transform(self, pad_points)",
                "get_yaxis_transform(self, which='grid')",
                "get_yaxis_text1_transform(self, pad_points)",
                "get_yaxis_text2_transform(self, pad_points)",
                "_update_transScale(self)",
                "get_position(self, original=False)",
                "set_position(self, pos, which='both')",
                "_set_position(self, pos, which='both')",
                "reset_position(self)",
                "set_axes_locator(self, locator)",
                "get_axes_locator(self)",
                "_set_artist_props(self, a)",
                "_gen_axes_patch(self)",
                "_gen_axes_spines(self, locations=None, offset=0.0, units='inches')",
                "cla(self)",
                "clear(self)",
                "get_facecolor(self)",
                "set_facecolor(self, color)",
                "_set_title_offset_trans(self, title_offset_points)",
                "set_prop_cycle(self, *args, **kwargs)",
                "get_aspect(self)",
                "set_aspect(self, aspect, adjustable=None, anchor=None, share=False)",
                "get_adjustable(self)",
                "set_adjustable(self, adjustable, share=False)",
                "get_anchor(self)",
                "set_anchor(self, anchor, share=False)",
                "get_data_ratio(self)",
                "get_data_ratio_log(self)",
                "apply_aspect(self, position=None)",
                "axis(self, *args, **kwargs)",
                "get_legend(self)",
                "get_images(self)",
                "get_lines(self)",
                "get_xaxis(self)",
                "get_xgridlines(self)",
                "get_xticklines(self)",
                "get_yaxis(self)",
                "get_ygridlines(self)",
                "get_yticklines(self)",
                "_sci(self, im)",
                "_gci(self)",
                "has_data(self)",
                "add_artist(self, a)",
                "add_child_axes(self, ax)",
                "add_collection(self, collection, autolim=True)",
                "add_image(self, image)",
                "_update_image_limits(self, image)",
                "add_line(self, line)",
                "_add_text(self, txt)",
                "_update_line_limits(self, line)",
                "add_patch(self, p)",
                "_update_patch_limits(self, patch)",
                "add_table(self, tab)",
                "add_container(self, container)",
                "_on_units_changed(self, scalex=False, scaley=False)",
                "relim(self, visible_only=False)",
                "update_datalim(self, xys, updatex=True, updatey=True)",
                "update_datalim_bounds(self, bounds)",
                "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
                "in_axes(self, mouseevent)",
                "get_autoscale_on(self)",
                "get_autoscalex_on(self)",
                "get_autoscaley_on(self)",
                "set_autoscale_on(self, b)",
                "set_autoscalex_on(self, b)",
                "set_autoscaley_on(self, b)",
                "use_sticky_edges(self)",
                "use_sticky_edges(self, b)",
                "set_xmargin(self, m)",
                "set_ymargin(self, m)",
                "margins(self, *margins)",
                "set_rasterization_zorder(self, z)",
                "get_rasterization_zorder(self)",
                "autoscale(self, enable=True, axis='both', tight=None)",
                "autoscale_view(self, tight=None, scalex=True, scaley=True)",
                "_get_axis_list(self)",
                "_get_axis_map(self)",
                "_update_title_position(self, renderer)",
                "draw(self, renderer=None, inframe=False)",
                "draw_artist(self, a)",
                "redraw_in_frame(self)",
                "get_renderer_cache(self)",
                "get_frame_on(self)",
                "set_frame_on(self, b)",
                "get_axisbelow(self)",
                "set_axisbelow(self, b)",
                "grid(self, b=None, which='major', axis='both', **kwargs)",
                "ticklabel_format(self)",
                "locator_params(self, axis='both', tight=None, **kwargs)",
                "tick_params(self, axis='both', **kwargs)",
                "set_axis_off(self)",
                "set_axis_on(self)",
                "invert_xaxis(self)",
                "xaxis_inverted(self)",
                "get_xbound(self)",
                "set_xbound(self, lower=None, upper=None)",
                "get_xlim(self)",
                "_validate_converted_limits(self, limit, convert)",
                "set_xlim(self, left=None, right=None, emit=True, auto=False)",
                "get_xscale(self)",
                "set_xscale(self, value, **kwargs)",
                "get_xticks(self, minor=False)",
                "set_xticks(self, ticks, minor=False)",
                "get_xmajorticklabels(self)",
                "get_xminorticklabels(self)",
                "get_xticklabels(self, minor=False, which=None)",
                "set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs)",
                "invert_yaxis(self)",
                "yaxis_inverted(self)",
                "get_ybound(self)",
                "set_ybound(self, lower=None, upper=None)",
                "get_ylim(self)",
                "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                "get_yscale(self)",
                "set_yscale(self, value, **kwargs)",
                "get_yticks(self, minor=False)",
                "set_yticks(self, ticks, minor=False)",
                "get_ymajorticklabels(self)",
                "get_yminorticklabels(self)",
                "get_yticklabels(self, minor=False, which=None)",
                "set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs)",
                "xaxis_date(self, tz=None)",
                "yaxis_date(self, tz=None)",
                "format_xdata(self, x)",
                "format_ydata(self, y)",
                "format_coord(self, x, y)",
                "minorticks_on(self)",
                "minorticks_off(self)",
                "can_zoom(self)",
                "can_pan(self)",
                "get_navigate(self)",
                "set_navigate(self, b)",
                "get_navigate_mode(self)",
                "set_navigate_mode(self, b)",
                "_get_view(self)",
                "_set_view(self, view)",
                "_set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False)",
                "start_pan(self, x, y, button)",
                "end_pan(self)",
                "drag_pan(self, button, key, x, y)",
                "get_children(self)",
                "contains(self, mouseevent)",
                "contains_point(self, point)",
                "get_default_bbox_extra_artists(self)",
                "get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None)",
                "_make_twin_axes(self, *args, **kwargs)",
                "twinx(self)",
                "twiny(self)",
                "get_shared_x_axes(self)",
                "get_shared_y_axes(self)",
                "_process_single_axis(data, axis, unit_name, kwargs)",
                "handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound)",
                "format_deltas(key, dx, dy)",
                "tol(x)"
            ],
            "variables_in_file": {
                "_log": [
                    2490,
                    2500,
                    28
                ],
                "logging.getLogger": [
                    28
                ],
                "logging": [
                    28
                ],
                "__name__": [
                    376,
                    28
                ],
                "linestyle": [
                    65,
                    326,
                    107,
                    76,
                    108,
                    109,
                    79,
                    110,
                    49,
                    82,
                    114,
                    85,
                    312,
                    317,
                    61
                ],
                "marker": [
                    65,
                    312,
                    326,
                    317,
                    107,
                    111,
                    112,
                    50,
                    114,
                    88,
                    91,
                    61
                ],
                "color": [
                    65,
                    97,
                    68,
                    101,
                    326,
                    114,
                    51,
                    1111,
                    55,
                    312,
                    1113,
                    317,
                    61,
                    94
                ],
                "mcolors.to_rgba": [
                    101,
                    55
                ],
                "mcolors": [
                    101,
                    93,
                    55
                ],
                "fmt": [
                    96,
                    99,
                    100,
                    73,
                    74,
                    75,
                    78,
                    79,
                    84,
                    55,
                    90,
                    59,
                    63
                ],
                "fmtint": [
                    59,
                    63
                ],
                "str": [
                    1610,
                    59,
                    213,
                    311
                ],
                "int": [
                    59,
                    100
                ],
                "ValueError": [
                    1666,
                    2194,
                    3093,
                    2714,
                    670,
                    424,
                    1330,
                    181,
                    315,
                    60,
                    322,
                    2812,
                    69,
                    200,
                    1736,
                    1738,
                    77,
                    83,
                    342,
                    345,
                    89,
                    95,
                    104,
                    746,
                    1393,
                    4339,
                    1654,
                    2172,
                    2813
                ],
                "i": [
                    98,
                    99,
                    100,
                    102,
                    72,
                    73,
                    74,
                    75,
                    79,
                    80,
                    86,
                    92
                ],
                "len": [
                    3977,
                    144,
                    1808,
                    1831,
                    168,
                    170,
                    1195,
                    1965,
                    2480,
                    311,
                    314,
                    1851,
                    2756,
                    197,
                    73,
                    330,
                    1610,
                    2253,
                    2255,
                    2392,
                    1758,
                    1759,
                    1760,
                    1761,
                    99,
                    2027,
                    3947,
                    1392,
                    1657,
                    1658,
                    2430
                ],
                "c": [
                    97,
                    99,
                    105,
                    74,
                    81,
                    85,
                    87,
                    91,
                    93
                ],
                "mlines.lineStyles": [
                    81,
                    75
                ],
                "mlines": [
                    255,
                    81,
                    75,
                    87
                ],
                "mlines.lineMarkers": [
                    87
                ],
                "mcolors.get_named_colors_mapping": [
                    93
                ],
                "color_cycle_number": [
                    100,
                    101
                ],
                "format": [
                    101,
                    158,
                    375
                ],
                "rcParams": [
                    768,
                    1019,
                    1034,
                    1035,
                    1037,
                    1038,
                    145,
                    794,
                    1057,
                    692,
                    448,
                    451,
                    718,
                    479,
                    480,
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    1000,
                    108,
                    1003,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    501,
                    502,
                    503,
                    504,
                    505,
                    1010,
                    1011
                ],
                "self.axes": [
                    130,
                    260,
                    261,
                    136,
                    426,
                    1839,
                    336,
                    337,
                    338,
                    339,
                    154
                ],
                "self": [
                    4103,
                    2060,
                    2072,
                    2073,
                    2081,
                    2087,
                    2093,
                    4145,
                    2099,
                    4155,
                    4156,
                    2109,
                    2110,
                    4158,
                    2120,
                    4176,
                    4177,
                    2130,
                    4182,
                    4183,
                    4184,
                    4185,
                    4186,
                    4187,
                    4188,
                    4189,
                    4190,
                    4191,
                    4192,
                    4193,
                    4194,
                    2147,
                    2151,
                    4199,
                    4202,
                    4209,
                    4220,
                    2173,
                    2174,
                    4222,
                    4224,
                    130,
                    131,
                    132,
                    4227,
                    4228,
                    136,
                    139,
                    140,
                    2195,
                    2196,
                    149,
                    151,
                    154,
                    159,
                    4276,
                    4279,
                    4281,
                    4282,
                    4284,
                    4286,
                    4287,
                    4291,
                    4295,
                    4296,
                    4299,
                    4300,
                    4301,
                    4302,
                    4303,
                    4304,
                    4305,
                    4307,
                    4311,
                    216,
                    2264,
                    2267,
                    220,
                    2269,
                    222,
                    2271,
                    231,
                    235,
                    2283,
                    2284,
                    2288,
                    4340,
                    4341,
                    4343,
                    253,
                    254,
                    260,
                    261,
                    4366,
                    2320,
                    2321,
                    4370,
                    2323,
                    2324,
                    4371,
                    2326,
                    2328,
                    2329,
                    285,
                    286,
                    4396,
                    301,
                    4399,
                    4400,
                    4407,
                    4411,
                    2367,
                    2369,
                    2370,
                    2371,
                    2372,
                    2377,
                    2379,
                    336,
                    337,
                    338,
                    339,
                    2388,
                    352,
                    353,
                    356,
                    376,
                    2450,
                    2456,
                    2457,
                    2459,
                    2460,
                    2463,
                    418,
                    420,
                    422,
                    423,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    2477,
                    435,
                    2478,
                    437,
                    438,
                    439,
                    441,
                    2489,
                    443,
                    2493,
                    446,
                    2495,
                    449,
                    450,
                    451,
                    2499,
                    453,
                    454,
                    2503,
                    457,
                    458,
                    460,
                    461,
                    2510,
                    464,
                    2512,
                    466,
                    468,
                    2516,
                    470,
                    471,
                    472,
                    474,
                    475,
                    476,
                    478,
                    2531,
                    2536,
                    493,
                    2551,
                    2554,
                    508,
                    509,
                    2556,
                    2561,
                    2564,
                    2566,
                    2567,
                    520,
                    521,
                    522,
                    2569,
                    2571,
                    2572,
                    2578,
                    531,
                    532,
                    533,
                    2579,
                    2582,
                    2584,
                    2585,
                    2589,
                    2590,
                    2591,
                    2593,
                    2595,
                    551,
                    2600,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    2614,
                    2615,
                    571,
                    573,
                    2622,
                    576,
                    577,
                    578,
                    2625,
                    581,
                    2633,
                    587,
                    2636,
                    589,
                    591,
                    593,
                    595,
                    2644,
                    599,
                    600,
                    2647,
                    2650,
                    606,
                    608,
                    2656,
                    610,
                    2666,
                    2667,
                    625,
                    630,
                    2681,
                    635,
                    636,
                    641,
                    643,
                    644,
                    645,
                    646,
                    2706,
                    662,
                    665,
                    2715,
                    668,
                    2717,
                    693,
                    695,
                    2760,
                    2762,
                    719,
                    721,
                    738,
                    741,
                    744,
                    2816,
                    769,
                    2817,
                    771,
                    795,
                    797,
                    801,
                    803,
                    804,
                    2871,
                    2873,
                    2874,
                    827,
                    829,
                    831,
                    832,
                    853,
                    856,
                    857,
                    868,
                    873,
                    882,
                    894,
                    895,
                    2945,
                    901,
                    2952,
                    905,
                    907,
                    909,
                    911,
                    2960,
                    2961,
                    2969,
                    2970,
                    2984,
                    945,
                    2998,
                    953,
                    954,
                    958,
                    959,
                    961,
                    962,
                    3010,
                    964,
                    967,
                    968,
                    970,
                    973,
                    974,
                    975,
                    976,
                    977,
                    978,
                    980,
                    982,
                    986,
                    987,
                    988,
                    989,
                    990,
                    991,
                    992,
                    3038,
                    994,
                    996,
                    3045,
                    3047,
                    1001,
                    3049,
                    1004,
                    3052,
                    1006,
                    1007,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012,
                    1013,
                    1014,
                    3054,
                    1016,
                    1017,
                    1019,
                    1020,
                    1021,
                    1022,
                    1023,
                    1024,
                    1025,
                    1026,
                    1027,
                    1028,
                    1029,
                    1030,
                    1031,
                    3077,
                    1033,
                    1034,
                    1040,
                    1046,
                    1051,
                    1060,
                    1062,
                    1064,
                    1065,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1077,
                    1079,
                    1080,
                    1082,
                    1083,
                    1084,
                    1085,
                    1086,
                    1088,
                    1089,
                    1090,
                    1092,
                    1096,
                    1100,
                    1111,
                    1112,
                    1113,
                    1121,
                    1123,
                    1124,
                    1125,
                    3175,
                    3176,
                    3177,
                    3182,
                    3188,
                    3191,
                    3208,
                    3209,
                    3211,
                    3213,
                    3216,
                    3218,
                    3219,
                    3220,
                    3222,
                    3224,
                    3235,
                    1199,
                    1200,
                    1203,
                    3263,
                    3264,
                    3268,
                    3272,
                    3287,
                    3288,
                    3300,
                    1262,
                    3311,
                    1268,
                    1269,
                    1271,
                    1277,
                    1278,
                    1281,
                    1282,
                    1285,
                    3333,
                    3366,
                    1320,
                    1321,
                    3368,
                    1323,
                    3381,
                    1334,
                    1347,
                    3395,
                    3407,
                    3435,
                    3442,
                    1396,
                    1397,
                    3444,
                    1399,
                    3446,
                    3449,
                    1403,
                    3451,
                    1414,
                    1416,
                    3474,
                    1430,
                    1431,
                    1463,
                    1465,
                    1468,
                    1474,
                    1477,
                    1478,
                    1481,
                    1484,
                    1491,
                    1493,
                    1494,
                    1495,
                    1496,
                    3554,
                    3555,
                    3556,
                    1509,
                    3561,
                    3567,
                    3570,
                    1525,
                    1526,
                    3588,
                    3589,
                    3591,
                    3593,
                    1547,
                    3596,
                    3598,
                    3599,
                    1552,
                    3600,
                    3602,
                    3604,
                    3615,
                    3643,
                    3644,
                    3648,
                    3652,
                    1618,
                    3667,
                    1620,
                    1627,
                    1628,
                    1629,
                    3679,
                    1632,
                    1634,
                    1635,
                    1637,
                    1638,
                    1640,
                    1641,
                    1642,
                    3690,
                    1644,
                    1645,
                    1646,
                    1647,
                    1649,
                    1651,
                    3712,
                    1681,
                    1682,
                    1687,
                    1691,
                    1695,
                    3745,
                    1699,
                    1703,
                    1707,
                    1711,
                    3759,
                    1715,
                    1719,
                    3770,
                    1723,
                    3779,
                    3780,
                    1735,
                    1737,
                    1740,
                    3789,
                    3790,
                    1747,
                    3797,
                    3801,
                    1758,
                    1759,
                    1760,
                    1761,
                    3811,
                    1776,
                    1777,
                    1778,
                    1779,
                    1780,
                    1781,
                    3825,
                    3826,
                    1794,
                    1797,
                    1798,
                    1799,
                    3846,
                    1808,
                    1809,
                    1810,
                    1811,
                    3856,
                    1814,
                    3862,
                    1819,
                    1820,
                    1822,
                    3872,
                    1829,
                    1831,
                    1832,
                    1833,
                    1834,
                    1839,
                    3888,
                    3889,
                    1845,
                    1847,
                    1849,
                    1851,
                    1852,
                    1853,
                    1854,
                    3905,
                    3906,
                    1861,
                    1862,
                    1863,
                    1864,
                    1877,
                    1880,
                    1883,
                    1888,
                    3944,
                    3945,
                    1904,
                    1905,
                    1906,
                    1909,
                    1915,
                    3963,
                    1917,
                    1918,
                    1919,
                    1920,
                    1939,
                    3988,
                    1941,
                    1945,
                    1946,
                    1953,
                    1954,
                    1955,
                    1956,
                    1965,
                    1966,
                    1967,
                    1976,
                    1977,
                    4037,
                    4039,
                    1992,
                    1993,
                    1994,
                    4041,
                    1996,
                    4042,
                    1998,
                    4044,
                    2000,
                    2002,
                    2004,
                    4052,
                    2006,
                    4062,
                    4064,
                    4066,
                    4067,
                    2029,
                    2031,
                    4085,
                    4086,
                    4087,
                    4088,
                    4089,
                    2042
                ],
                "axes": [
                    130,
                    1396,
                    1268,
                    1271,
                    1400,
                    1273,
                    1399
                ],
                "self.command": [
                    136,
                    131,
                    352,
                    159
                ],
                "command": [
                    131
                ],
                "self.set_prop_cycle": [
                    140,
                    132
                ],
                "self.__dict__": [
                    139,
                    532
                ],
                "state.copy": [
                    139
                ],
                "state": [
                    514,
                    516,
                    521,
                    523,
                    139,
                    529,
                    532
                ],
                "args": [
                    144,
                    147,
                    161,
                    167,
                    168,
                    1191,
                    170,
                    1195,
                    1198,
                    180,
                    184,
                    186,
                    197,
                    1610,
                    1611,
                    206,
                    207,
                    211,
                    212,
                    213,
                    214,
                    215,
                    4340,
                    1657,
                    1658,
                    1663
                ],
                "kwargs": [
                    2050,
                    2947,
                    1671,
                    264,
                    1672,
                    1673,
                    1674,
                    2058,
                    2059,
                    2062,
                    144,
                    147,
                    1683,
                    277,
                    2070,
                    2072,
                    2073,
                    154,
                    2074,
                    157,
                    3744,
                    3746,
                    165,
                    3365,
                    1191,
                    3367,
                    301,
                    1198,
                    305,
                    307,
                    2871,
                    441,
                    2873,
                    3645,
                    3265,
                    2756,
                    2760,
                    2940,
                    2762,
                    204,
                    205,
                    468,
                    216,
                    355,
                    363,
                    4338,
                    4340,
                    252
                ],
                "prop_cycler": [
                    145,
                    147,
                    149,
                    151
                ],
                "cycler": [
                    147,
                    1198
                ],
                "self.prop_cycler": [
                    235,
                    149,
                    222
                ],
                "itertools.cycle": [
                    149
                ],
                "itertools": [
                    149
                ],
                "self._prop_keys": [
                    231,
                    220,
                    151
                ],
                "prop_cycler.keys": [
                    151
                ],
                "self.axes._process_unit_info": [
                    154
                ],
                "pos_only": [
                    156,
                    157,
                    159
                ],
                "TypeError": [
                    3168,
                    1666,
                    1667,
                    3172,
                    997,
                    1192,
                    2251,
                    2258,
                    983,
                    3547,
                    2812,
                    158,
                    3551
                ],
                "data": [
                    2052,
                    165,
                    166,
                    2055,
                    167,
                    2068,
                    2069
                ],
                "kwargs.pop": [
                    165,
                    1671,
                    1672,
                    1673,
                    1674,
                    2059,
                    2062
                ],
                "replaced": [
                    184,
                    207,
                    206,
                    167
                ],
                "mpl._replacer": [
                    167
                ],
                "mpl": [
                    205,
                    1734,
                    167
                ],
                "arg": [
                    167
                ],
                "label_namer_idx": [
                    194,
                    196,
                    198,
                    169,
                    206,
                    182
                ],
                "_process_plot_format": [
                    312,
                    180
                ],
                "cbook._warn_external": [
                    3584,
                    3193,
                    3205,
                    4167,
                    3979,
                    3572,
                    2263,
                    185,
                    3578,
                    3199
                ],
                "cbook": [
                    3584,
                    2818,
                    3205,
                    3979,
                    1421,
                    1684,
                    1695,
                    1699,
                    1318,
                    185,
                    2758,
                    4167,
                    968,
                    3578,
                    2263,
                    1624,
                    3199,
                    360,
                    1258,
                    1259,
                    1262,
                    370,
                    371,
                    372,
                    3572,
                    3193,
                    2938,
                    1659,
                    2815
                ],
                "RuntimeWarning": [
                    193
                ],
                "kwargs.get": [
                    441,
                    305,
                    355,
                    204
                ],
                "mpl._label_from_arg": [
                    205
                ],
                "this": [
                    216,
                    212,
                    214
                ],
                "isinstance": [
                    866,
                    419,
                    1734,
                    1610,
                    1933,
                    3091,
                    213,
                    311
                ],
                "self._plot_args": [
                    216
                ],
                "next": [
                    235,
                    222
                ],
                "prop_keys": [
                    232,
                    231
                ],
                "ignore": [
                    236,
                    231
                ],
                "any": [
                    321,
                    232,
                    586,
                    588,
                    1325,
                    1880
                ],
                "kw.get": [
                    232,
                    248,
                    294
                ],
                "kw": [
                    355,
                    324,
                    294,
                    263,
                    232,
                    328,
                    363,
                    286,
                    306,
                    248,
                    249,
                    285,
                    252,
                    253,
                    254,
                    255
                ],
                "k": [
                    2816,
                    325,
                    232,
                    328,
                    2478,
                    2479,
                    2480,
                    277,
                    247,
                    248,
                    249,
                    279
                ],
                "default_dict": [
                    297,
                    235,
                    237,
                    301,
                    239,
                    240,
                    285,
                    253,
                    254,
                    286
                ],
                "copy": [
                    235
                ],
                "p": [
                    1920,
                    1921,
                    4145,
                    4146,
                    4147,
                    4152,
                    4161,
                    4162,
                    4165,
                    4172,
                    2000,
                    2001,
                    2002,
                    236,
                    237,
                    1915,
                    1916,
                    1917,
                    1918,
                    1919
                ],
                "default_dict.pop": [
                    297,
                    237
                ],
                "defaults": [
                    249,
                    247
                ],
                "self._getdefaults": [
                    285,
                    253
                ],
                "set": [
                    253
                ],
                "self._setdefaults": [
                    301,
                    254,
                    286
                ],
                "seg": [
                    256,
                    303,
                    307,
                    308,
                    255
                ],
                "mlines.Line2D": [
                    255
                ],
                "x": [
                    260,
                    3985,
                    3989,
                    3995,
                    3996,
                    3998,
                    4004,
                    4005,
                    4007,
                    303,
                    4146,
                    2497,
                    3780,
                    2375,
                    2250,
                    331,
                    2506,
                    2508,
                    334,
                    2254,
                    2256,
                    337,
                    3794,
                    341,
                    2261,
                    343,
                    344,
                    3797,
                    2266,
                    346,
                    347,
                    348,
                    2267,
                    2272,
                    2532,
                    358,
                    2538,
                    363,
                    2543,
                    2544,
                    2424,
                    4090,
                    255
                ],
                "y": [
                    261,
                    3985,
                    3989,
                    303,
                    4017,
                    4018,
                    4147,
                    4020,
                    4026,
                    4027,
                    4029,
                    2497,
                    2498,
                    2501,
                    2376,
                    2250,
                    332,
                    334,
                    2254,
                    2256,
                    3790,
                    339,
                    341,
                    2261,
                    343,
                    344,
                    3798,
                    346,
                    3801,
                    2268,
                    349,
                    350,
                    2269,
                    2272,
                    2531,
                    2532,
                    358,
                    2536,
                    2538,
                    363,
                    4091,
                    255
                ],
                "self.axes.convert_xunits": [
                    260
                ],
                "self.axes.convert_yunits": [
                    261
                ],
                "kw.copy": [
                    263
                ],
                "kwargs.copy": [
                    264
                ],
                "ignores": [
                    274,
                    285,
                    279
                ],
                "v": [
                    2816,
                    321,
                    325,
                    327,
                    328,
                    2478,
                    2479,
                    2480,
                    277,
                    278
                ],
                "kwargs.items": [
                    277
                ],
                "ignores.add": [
                    279
                ],
                "facecolor": [
                    448,
                    449,
                    294,
                    304,
                    447
                ],
                "mpatches.Polygon": [
                    303
                ],
                "mpatches": [
                    928,
                    1933,
                    303
                ],
                "np.column_stack": [
                    303
                ],
                "np": [
                    2440,
                    3092,
                    303,
                    4160,
                    4161,
                    2498,
                    2375,
                    2376,
                    4172,
                    4045,
                    4053,
                    3543,
                    2391,
                    3035,
                    3164,
                    2396,
                    348,
                    350,
                    2399,
                    4321,
                    4327,
                    3432,
                    2409,
                    2026,
                    4328,
                    2412,
                    1648
                ],
                "seg.set": [
                    307
                ],
                "tup": [
                    321,
                    330,
                    331,
                    332,
                    334,
                    311,
                    312,
                    313,
                    314
                ],
                "zip": [
                    325
                ],
                "_check_1d": [
                    331,
                    332
                ],
                "index_of": [
                    334
                ],
                "self.axes.xaxis": [
                    336,
                    337
                ],
                "self.axes.xaxis.update_units": [
                    337
                ],
                "self.axes.yaxis": [
                    338,
                    339
                ],
                "self.axes.yaxis.update_units": [
                    339
                ],
                "x.shape": [
                    346,
                    341,
                    358,
                    343
                ],
                "y.shape": [
                    346,
                    341,
                    358,
                    343
                ],
                "x.ndim": [
                    344,
                    347
                ],
                "y.ndim": [
                    344,
                    349
                ],
                "np.newaxis": [
                    348,
                    350
                ],
                "func": [
                    353,
                    363,
                    356
                ],
                "self._makeline": [
                    353
                ],
                "self._makefill": [
                    356
                ],
                "ncx": [
                    363,
                    364,
                    358,
                    359
                ],
                "ncy": [
                    363,
                    364,
                    358,
                    359
                ],
                "cbook.warn_deprecated": [
                    360,
                    1659,
                    1624,
                    1684
                ],
                "j": [
                    363,
                    364
                ],
                "range": [
                    364
                ],
                "max": [
                    2529,
                    1417,
                    1418,
                    364,
                    1497,
                    2446,
                    2540,
                    1648,
                    1498,
                    1433,
                    1434
                ],
                "martist.Artist": [
                    418,
                    571,
                    367
                ],
                "martist": [
                    418,
                    1795,
                    367,
                    2547,
                    571
                ],
                "name": [
                    368,
                    964
                ],
                "_shared_x_axes": [
                    370
                ],
                "cbook.Grouper": [
                    370,
                    371,
                    372
                ],
                "_shared_y_axes": [
                    371
                ],
                "_twinned_axes": [
                    372
                ],
                "type": [
                    376
                ],
                "self._position.bounds": [
                    376
                ],
                "self._position": [
                    832,
                    420,
                    422,
                    423,
                    425,
                    376,
                    573
                ],
                "martist.Artist.__init__": [
                    418
                ],
                "rect": [
                    419,
                    420,
                    422
                ],
                "mtransforms.Bbox": [
                    576,
                    577,
                    419,
                    867,
                    4164,
                    422,
                    1993,
                    4330,
                    1392,
                    1394,
                    2042,
                    4319
                ],
                "mtransforms": [
                    770,
                    643,
                    645,
                    796,
                    802,
                    419,
                    422,
                    694,
                    573,
                    576,
                    577,
                    578,
                    579,
                    4164,
                    1993,
                    720,
                    4319,
                    1121,
                    866,
                    867,
                    2406,
                    2410,
                    4330,
                    2414,
                    1392,
                    625,
                    1394,
                    630,
                    631,
                    2042,
                    635,
                    636
                ],
                "mtransforms.Bbox.from_bounds": [
                    867,
                    422
                ],
                "self._position.width": [
                    423
                ],
                "self._position.height": [
                    423
                ],
                "self._originalPosition": [
                    425,
                    827
                ],
                "self._position.frozen": [
                    832,
                    425
                ],
                "self._aspect": [
                    427,
                    1203
                ],
                "self._adjustable": [
                    1477,
                    1285,
                    428,
                    1277
                ],
                "self._anchor": [
                    1347,
                    429
                ],
                "self._stale_viewlim_x": [
                    608,
                    430
                ],
                "self._stale_viewlim_y": [
                    610,
                    431
                ],
                "self._sharex": [
                    970,
                    973,
                    974,
                    975,
                    432,
                    977,
                    978,
                    1006,
                    1084
                ],
                "sharex": [
                    432,
                    434,
                    435
                ],
                "self._sharey": [
                    992,
                    1088,
                    1008,
                    433,
                    986,
                    987,
                    988,
                    989,
                    991
                ],
                "sharey": [
                    433,
                    436,
                    437
                ],
                "self._shared_x_axes.join": [
                    435
                ],
                "self._shared_x_axes": [
                    1320,
                    587,
                    591,
                    3218,
                    435,
                    1268,
                    1396,
                    1525,
                    4407,
                    2456,
                    1082
                ],
                "self._shared_y_axes.join": [
                    437
                ],
                "self._shared_y_axes": [
                    1321,
                    589,
                    3598,
                    593,
                    4411,
                    2459,
                    437,
                    1269,
                    1397,
                    1526,
                    1083
                ],
                "self.set_label": [
                    438
                ],
                "label": [
                    1963,
                    1964,
                    1806,
                    1807,
                    438
                ],
                "self.set_figure": [
                    439
                ],
                "fig": [
                    571,
                    574,
                    439
                ],
                "self.set_axes_locator": [
                    441
                ],
                "self.spines": [
                    4224,
                    964,
                    741,
                    744,
                    4187,
                    556,
                    557,
                    559,
                    560,
                    2579,
                    665,
                    443,
                    668
                ],
                "self._gen_axes_spines": [
                    443
                ],
                "self._init_axis": [
                    446
                ],
                "self._facecolor": [
                    1072,
                    449,
                    1111
                ],
                "self._frameon": [
                    2656,
                    450,
                    2666,
                    2578,
                    2614,
                    4222
                ],
                "frameon": [
                    450
                ],
                "self.set_axisbelow": [
                    451
                ],
                "self._rasterization_zorder": [
                    2288,
                    2600,
                    2283,
                    453
                ],
                "self.cla": [
                    1096,
                    454
                ],
                "self.fmt_xdata": [
                    457,
                    3779
                ],
                "self.fmt_ydata": [
                    458,
                    3789
                ],
                "self.set_navigate": [
                    460
                ],
                "self.set_navigate_mode": [
                    461
                ],
                "xscale": [
                    464,
                    463
                ],
                "self.set_xscale": [
                    464
                ],
                "yscale": [
                    465,
                    466
                ],
                "self.set_yscale": [
                    466
                ],
                "self.update": [
                    468
                ],
                "self.xaxis": [
                    2945,
                    3333,
                    1414,
                    3208,
                    3209,
                    2072,
                    2457,
                    2463,
                    803,
                    3235,
                    3366,
                    1703,
                    2984,
                    555,
                    556,
                    557,
                    1707,
                    1711,
                    3759,
                    4400,
                    2998,
                    1079,
                    2871,
                    1085,
                    958,
                    4287,
                    961,
                    3780,
                    2760,
                    3272,
                    973,
                    974,
                    978,
                    980,
                    1493,
                    470,
                    471,
                    3287,
                    3811,
                    3300,
                    1001,
                    3311,
                    3825
                ],
                "self._xcid": [
                    471
                ],
                "self.xaxis.callbacks.connect": [
                    471
                ],
                "self.xaxis.callbacks": [
                    471
                ],
                "self._on_units_changed": [
                    472,
                    476
                ],
                "self.yaxis": [
                    3712,
                    3588,
                    3589,
                    1416,
                    2952,
                    4371,
                    2073,
                    2460,
                    2463,
                    3615,
                    3745,
                    803,
                    558,
                    559,
                    560,
                    1715,
                    3381,
                    1719,
                    1080,
                    2873,
                    3770,
                    1723,
                    959,
                    1089,
                    962,
                    3395,
                    3652,
                    4291,
                    2762,
                    3790,
                    3667,
                    1494,
                    474,
                    987,
                    475,
                    988,
                    3679,
                    992,
                    994,
                    3811,
                    3690,
                    1004,
                    3826
                ],
                "self._ycid": [
                    475
                ],
                "self.yaxis.callbacks.connect": [
                    475
                ],
                "self.yaxis.callbacks": [
                    475
                ],
                "self.tick_params": [
                    493,
                    478
                ],
                "self._layoutbox": [
                    856,
                    508
                ],
                "self._poslayoutbox": [
                    857,
                    509
                ],
                "__getstate__": [
                    514
                ],
                "super": [
                    514
                ],
                "key": [
                    4130,
                    515,
                    516,
                    4132,
                    4134,
                    4157,
                    4151,
                    4125
                ],
                "grouper_name": [
                    518,
                    520,
                    521,
                    527,
                    529,
                    531
                ],
                "grouper": [
                    520,
                    521,
                    522
                ],
                "getattr": [
                    2434,
                    804,
                    520,
                    1325,
                    2417,
                    531
                ],
                "grouper.get_siblings": [
                    521
                ],
                "siblings": [
                    529,
                    530,
                    531
                ],
                "state.pop": [
                    529
                ],
                "join": [
                    1394,
                    531
                ],
                "self._stale": [
                    2561,
                    533
                ],
                "self.bbox": [
                    551,
                    625,
                    4089,
                    4155,
                    4156,
                    573
                ],
                "maxis.XAxis": [
                    555
                ],
                "maxis": [
                    555,
                    558
                ],
                "register_axis": [
                    560,
                    556,
                    557,
                    559
                ],
                "maxis.YAxis": [
                    558
                ],
                "self._update_transScale": [
                    561,
                    1014
                ],
                "martist.Artist.set_figure": [
                    571
                ],
                "mtransforms.TransformedBbox": [
                    636,
                    573
                ],
                "fig.transFigure": [
                    574
                ],
                "self.dataLim": [
                    576,
                    1509,
                    1992,
                    1993,
                    2029,
                    1905,
                    2042
                ],
                "mtransforms.Bbox.null": [
                    576,
                    1993
                ],
                "self._viewLim": [
                    577,
                    3591,
                    3211,
                    600,
                    636
                ],
                "mtransforms.Bbox.unit": [
                    577
                ],
                "self.transScale": [
                    641,
                    578,
                    801,
                    630,
                    636
                ],
                "mtransforms.TransformWrapper": [
                    578,
                    630
                ],
                "mtransforms.IdentityTransform": [
                    579,
                    631
                ],
                "self._set_lim_and_transforms": [
                    581
                ],
                "scalex": [
                    2370,
                    2329,
                    586,
                    2314,
                    2317,
                    590,
                    2321,
                    595,
                    2325,
                    2456,
                    1977,
                    607
                ],
                "ax._stale_viewlim_x": [
                    592,
                    586
                ],
                "ax": [
                    1794,
                    1795,
                    1797,
                    1798,
                    1800,
                    1401,
                    1325,
                    1327,
                    1332,
                    1333,
                    3644,
                    3645,
                    3646,
                    3647,
                    3264,
                    3265,
                    3266,
                    3267,
                    586,
                    587,
                    588,
                    589,
                    591,
                    592,
                    593,
                    594,
                    2512,
                    2513,
                    2389,
                    2514,
                    2517,
                    2519,
                    2520,
                    2522,
                    2523,
                    2524,
                    2525,
                    2527,
                    3811,
                    868,
                    3812,
                    870,
                    3814,
                    872,
                    3815,
                    2410,
                    3817,
                    3818,
                    3821,
                    2415,
                    882,
                    883,
                    884,
                    1400,
                    1273,
                    1274
                ],
                "self._shared_x_axes.get_siblings": [
                    1320,
                    587,
                    591,
                    3218,
                    1396,
                    1268
                ],
                "scaley": [
                    609,
                    2371,
                    2329,
                    2315,
                    588,
                    590,
                    2318,
                    595,
                    2324,
                    2327,
                    1977,
                    2459
                ],
                "ax._stale_viewlim_y": [
                    594,
                    588
                ],
                "self._shared_y_axes.get_siblings": [
                    1321,
                    589,
                    3598,
                    593,
                    1397,
                    1269
                ],
                "self.autoscale_view": [
                    1637,
                    595,
                    1640,
                    1629
                ],
                "self._unstale_viewLim": [
                    1819,
                    2556,
                    599
                ],
                "property": [
                    2132,
                    597
                ],
                "tight": [
                    2272,
                    2366,
                    2325,
                    2262,
                    2263,
                    2329,
                    2874,
                    2327,
                    605,
                    606,
                    2367
                ],
                "self._tight": [
                    2450,
                    1012,
                    606,
                    2367
                ],
                "self.transAxes": [
                    641,
                    2531,
                    644,
                    1125,
                    646,
                    2536,
                    625,
                    1075
                ],
                "mtransforms.BboxTransformTo": [
                    625
                ],
                "self.transLimits": [
                    641,
                    635
                ],
                "mtransforms.BboxTransformFrom": [
                    635
                ],
                "self.transData": [
                    1888,
                    641,
                    3963,
                    644,
                    646,
                    907,
                    4088,
                    1904,
                    1939,
                    3988,
                    1877,
                    1941,
                    4087,
                    1880,
                    1945,
                    1883,
                    1820
                ],
                "self._xaxis_transform": [
                    643,
                    662
                ],
                "mtransforms.blended_transform_factory": [
                    802,
                    643,
                    645
                ],
                "self._yaxis_transform": [
                    738,
                    645
                ],
                "which": [
                    3712,
                    737,
                    739,
                    869,
                    742,
                    871,
                    2760,
                    3333,
                    2762,
                    661,
                    853,
                    663,
                    666
                ],
                "get_spine_transform": [
                    744,
                    665,
                    668,
                    741
                ],
                "labels_align": [
                    768,
                    772,
                    718,
                    722,
                    692,
                    696,
                    794,
                    798
                ],
                "self.get_xaxis_transform": [
                    693,
                    719
                ],
                "mtransforms.ScaledTranslation": [
                    1121,
                    770,
                    720,
                    694,
                    796
                ],
                "pad_points": [
                    720,
                    770,
                    796,
                    694
                ],
                "self.figure.dpi_scale_trans": [
                    771,
                    1123,
                    721,
                    695,
                    797
                ],
                "self.figure": [
                    2593,
                    771,
                    1123,
                    2551,
                    2647,
                    905,
                    2633,
                    2636,
                    1071,
                    721,
                    3602,
                    2644,
                    4340,
                    3222,
                    695,
                    2650,
                    797
                ],
                "self.get_yaxis_transform": [
                    769,
                    795
                ],
                "self.transScale.set": [
                    801
                ],
                "self.xaxis.get_transform": [
                    803,
                    1493,
                    1414
                ],
                "self.yaxis.get_transform": [
                    1416,
                    803,
                    1494
                ],
                "line": [
                    1889,
                    804,
                    806,
                    1996,
                    1997,
                    1998,
                    1871,
                    1875,
                    1845,
                    1846,
                    1847,
                    1849,
                    1850,
                    1851,
                    1852,
                    1853,
                    1855
                ],
                "line._transformed_path.invalidate": [
                    806
                ],
                "line._transformed_path": [
                    806
                ],
                "AttributeError": [
                    807,
                    2634,
                    2831,
                    2832,
                    2645
                ],
                "original": [
                    826
                ],
                "self._originalPosition.frozen": [
                    827
                ],
                "locator": [
                    4281,
                    2564,
                    2565,
                    2566,
                    830,
                    2418,
                    2419,
                    2451,
                    2514,
                    2515,
                    2516,
                    4280,
                    4279,
                    829,
                    894
                ],
                "self.get_axes_locator": [
                    2564,
                    829,
                    4279
                ],
                "self.apply_aspect": [
                    2567,
                    2569,
                    4282,
                    4284,
                    831
                ],
                "self._set_position": [
                    1484,
                    1468,
                    853,
                    1491
                ],
                "pos": [
                    866,
                    867,
                    870,
                    2566,
                    872,
                    2567,
                    883,
                    884,
                    853,
                    2516,
                    2517,
                    4281,
                    4282
                ],
                "mtransforms.BboxBase": [
                    2410,
                    866,
                    2414,
                    2406
                ],
                "self._twinned_axes.get_siblings": [
                    882,
                    868,
                    2510
                ],
                "self._twinned_axes": [
                    868,
                    1478,
                    2510,
                    882,
                    4343
                ],
                "ax._position.set": [
                    870
                ],
                "ax._position": [
                    870
                ],
                "ax._originalPosition.set": [
                    872
                ],
                "ax._originalPosition": [
                    872
                ],
                "self.stale": [
                    1282,
                    1799,
                    2961,
                    2196,
                    3604,
                    3224,
                    2970,
                    2717,
                    1822,
                    3368,
                    1834,
                    1334,
                    1854,
                    2625,
                    1092,
                    1864,
                    1112,
                    3288,
                    873,
                    2667,
                    2284,
                    1781,
                    1403,
                    2174,
                    895
                ],
                "ax.get_position": [
                    883
                ],
                "ax.set_position": [
                    884
                ],
                "self._axes_locator": [
                    901,
                    894
                ],
                "a.set_figure": [
                    905
                ],
                "a": [
                    905,
                    906,
                    907,
                    909,
                    910,
                    911,
                    2594,
                    2595,
                    2605,
                    2606,
                    2607,
                    2608,
                    2618,
                    2619,
                    2636,
                    4313,
                    4317,
                    4325,
                    1776,
                    1777,
                    1778,
                    1779,
                    1780,
                    1782
                ],
                "a.is_transform_set": [
                    906
                ],
                "a.set_transform": [
                    907
                ],
                "a.axes": [
                    1776,
                    909
                ],
                "a.mouseover": [
                    910
                ],
                "self._mouseover_set.add": [
                    911
                ],
                "self._mouseover_set": [
                    1026,
                    911
                ],
                "mpatches.Rectangle": [
                    928,
                    1933
                ],
                "OrderedDict": [
                    945
                ],
                "side": [
                    945,
                    946
                ],
                "mspines.Spine.linear_spine": [
                    945
                ],
                "mspines.Spine": [
                    945
                ],
                "mspines": [
                    945
                ],
                "hasattr": [
                    953
                ],
                "patch_visible": [
                    954,
                    956,
                    1090,
                    1086
                ],
                "self.patch.get_visible": [
                    954
                ],
                "self.patch": [
                    2572,
                    1814,
                    2081,
                    1955,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1847,
                    1079,
                    1080,
                    954,
                    2615,
                    1086,
                    1090,
                    1100,
                    1113,
                    4194,
                    4202,
                    4209,
                    1780,
                    1917
                ],
                "xaxis_visible": [
                    1085,
                    958
                ],
                "self.xaxis.get_visible": [
                    958
                ],
                "yaxis_visible": [
                    1089,
                    959
                ],
                "self.yaxis.get_visible": [
                    959
                ],
                "self.xaxis.cla": [
                    961
                ],
                "self.yaxis.cla": [
                    962
                ],
                "spine": [
                    4224,
                    4225,
                    964,
                    965,
                    2579,
                    2580
                ],
                "self.spines.items": [
                    964
                ],
                "spine.cla": [
                    965
                ],
                "self.ignore_existing_data_limits": [
                    967,
                    1994,
                    2029,
                    2031,
                    1906,
                    1909
                ],
                "self.callbacks": [
                    968,
                    3596,
                    3216
                ],
                "cbook.CallbackRegistry": [
                    968
                ],
                "self.xaxis.major": [
                    973
                ],
                "self._sharex.xaxis.major": [
                    973
                ],
                "self._sharex.xaxis": [
                    978,
                    973,
                    974
                ],
                "self.xaxis.minor": [
                    974
                ],
                "self._sharex.xaxis.minor": [
                    974
                ],
                "x0": [
                    2437,
                    2438,
                    2442,
                    1550,
                    2446,
                    1552,
                    2451,
                    2452,
                    3992,
                    3996,
                    3998,
                    3999,
                    4000,
                    4005,
                    4007,
                    4008,
                    4009,
                    4037,
                    4041,
                    4045,
                    4046,
                    975,
                    976,
                    4047,
                    4049,
                    4050,
                    4051,
                    1510,
                    1512,
                    2417,
                    2419,
                    2426
                ],
                "x1": [
                    2437,
                    2438,
                    2442,
                    1551,
                    1552,
                    2448,
                    2451,
                    2452,
                    3992,
                    3996,
                    3998,
                    4001,
                    4002,
                    4005,
                    4007,
                    4010,
                    4011,
                    4037,
                    4041,
                    4045,
                    975,
                    976,
                    4049,
                    1510,
                    1512,
                    2417,
                    2419,
                    2429
                ],
                "self._sharex.get_xlim": [
                    975
                ],
                "self.set_xlim": [
                    3905,
                    4066,
                    4037,
                    3047,
                    3049,
                    4041,
                    3052,
                    3054,
                    976,
                    1649,
                    1681,
                    4176,
                    982,
                    4062
                ],
                "self._sharex.get_autoscalex_on": [
                    977
                ],
                "self.xaxis._scale": [
                    978
                ],
                "self._sharex.xaxis._scale": [
                    978
                ],
                "self.xaxis._set_scale": [
                    980
                ],
                "self.yaxis.major": [
                    987
                ],
                "self._sharey.yaxis.major": [
                    987
                ],
                "self._sharey.yaxis": [
                    992,
                    987,
                    988
                ],
                "self.yaxis.minor": [
                    988
                ],
                "self._sharey.yaxis.minor": [
                    988
                ],
                "y0": [
                    1545,
                    1547,
                    4014,
                    4018,
                    4020,
                    4021,
                    4022,
                    4027,
                    4029,
                    4030,
                    4031,
                    4039,
                    4042,
                    4053,
                    4054,
                    4055,
                    4057,
                    4058,
                    4059,
                    989,
                    990,
                    1511,
                    1513
                ],
                "y1": [
                    1546,
                    1547,
                    4014,
                    4018,
                    4020,
                    4023,
                    4024,
                    4027,
                    4029,
                    4032,
                    4033,
                    4039,
                    4042,
                    4053,
                    4057,
                    989,
                    990,
                    1511,
                    1513
                ],
                "self._sharey.get_ylim": [
                    989
                ],
                "self.set_ylim": [
                    4064,
                    3906,
                    4067,
                    996,
                    4039,
                    4042,
                    4177,
                    1682,
                    1651,
                    3444,
                    3446,
                    3449,
                    3451,
                    990
                ],
                "self._sharey.get_autoscaley_on": [
                    991
                ],
                "self.yaxis._scale": [
                    992
                ],
                "self._sharey.yaxis._scale": [
                    992
                ],
                "self.yaxis._set_scale": [
                    994
                ],
                "self.xaxis.set_minor_locator": [
                    1001,
                    3825
                ],
                "mticker.AutoMinorLocator": [
                    1001,
                    1004,
                    3821
                ],
                "mticker": [
                    3815,
                    1001,
                    3819,
                    1004,
                    3821,
                    3825,
                    3826
                ],
                "self.yaxis.set_minor_locator": [
                    3826,
                    1004
                ],
                "self._autoscaleXon": [
                    2370,
                    2087,
                    2120,
                    2093,
                    3213,
                    1007,
                    2320,
                    2321,
                    2456,
                    2109
                ],
                "self._autoscaleYon": [
                    2371,
                    2087,
                    3593,
                    1009,
                    2130,
                    2099,
                    2323,
                    2324,
                    2459,
                    2110
                ],
                "self._xmargin": [
                    2370,
                    1010,
                    2326,
                    2264,
                    2457,
                    2173
                ],
                "self._ymargin": [
                    2328,
                    2371,
                    1011,
                    2195,
                    2264,
                    2460
                ],
                "self._use_sticky_edges": [
                    2147,
                    1013,
                    2151
                ],
                "self._get_lines": [
                    1016,
                    1199
                ],
                "_process_plot_var_args": [
                    1016,
                    1017
                ],
                "self._get_patches_for_fill": [
                    1200,
                    1017
                ],
                "self._gridOn": [
                    1034,
                    1019
                ],
                "self.lines": [
                    1760,
                    1699,
                    1852,
                    1996,
                    4184,
                    1851,
                    1020,
                    1853
                ],
                "self.patches": [
                    1920,
                    1761,
                    2000,
                    4183,
                    1021,
                    1919
                ],
                "self.texts": [
                    4185,
                    1862,
                    1022,
                    1863
                ],
                "self.tables": [
                    1954,
                    1956,
                    4190,
                    1023
                ],
                "self.artists": [
                    1024,
                    1777,
                    1778,
                    4186
                ],
                "self.images": [
                    1025,
                    2595,
                    1831,
                    1832,
                    1737,
                    1833,
                    1695,
                    2004,
                    4191,
                    1759
                ],
                "_OrderedSet": [
                    1026
                ],
                "self.child_axes": [
                    4192,
                    1027,
                    1797,
                    1798,
                    2512
                ],
                "self._current_image": [
                    1740,
                    1028,
                    1747
                ],
                "self.legend_": [
                    4193,
                    1691,
                    1029
                ],
                "self.collections": [
                    1030,
                    1735,
                    1737,
                    1808,
                    1809,
                    1810,
                    4182,
                    1758
                ],
                "self.containers": [
                    1967,
                    1965,
                    1966,
                    1031
                ],
                "self.grid": [
                    1033,
                    1034
                ],
                "props": [
                    1048,
                    1042,
                    1036,
                    1053
                ],
                "font_manager.FontProperties": [
                    1036
                ],
                "font_manager": [
                    1036
                ],
                "self.title": [
                    1124,
                    1064,
                    4300,
                    4301,
                    1040,
                    4189,
                    2589,
                    2493
                ],
                "mtext.Text": [
                    1040,
                    1051,
                    1046
                ],
                "mtext": [
                    1040,
                    1051,
                    1046
                ],
                "self._left_title": [
                    1124,
                    1064,
                    4302,
                    4303,
                    4189,
                    1046,
                    2493,
                    2590
                ],
                "props.copy": [
                    1048,
                    1053
                ],
                "self._right_title": [
                    1124,
                    1064,
                    4304,
                    4305,
                    4189,
                    1051,
                    2493,
                    2591
                ],
                "title_offset_points": [
                    1057,
                    1122,
                    1060
                ],
                "self._set_title_offset_trans": [
                    1060
                ],
                "self._autotitlepos": [
                    2499,
                    1062,
                    2503,
                    2489,
                    2495
                ],
                "_title": [
                    1124,
                    1125,
                    1126,
                    1064,
                    1065
                ],
                "self._set_artist_props": [
                    1953,
                    1829,
                    1861,
                    1065,
                    1811,
                    1779,
                    1845,
                    1915
                ],
                "self._gen_axes_patch": [
                    1070
                ],
                "self.patch.set_figure": [
                    1071
                ],
                "self.patch.set_facecolor": [
                    1072,
                    1113
                ],
                "self.patch.set_edgecolor": [
                    1073
                ],
                "self.patch.set_linewidth": [
                    1074
                ],
                "self.patch.set_transform": [
                    1075
                ],
                "self.set_axis_on": [
                    1618,
                    1077
                ],
                "self.xaxis.set_clip_path": [
                    1079
                ],
                "self.yaxis.set_clip_path": [
                    1080
                ],
                "self._shared_x_axes.clean": [
                    1082
                ],
                "self._shared_y_axes.clean": [
                    1083
                ],
                "self.xaxis.set_visible": [
                    1085
                ],
                "self.patch.set_visible": [
                    1090,
                    1086
                ],
                "self.yaxis.set_visible": [
                    1089
                ],
                "self.patch.get_facecolor": [
                    1100
                ],
                "get_fc": [
                    1101
                ],
                "get_facecolor": [
                    1101
                ],
                "set_fc": [
                    1114
                ],
                "set_facecolor": [
                    1114
                ],
                "self.titleOffsetTrans": [
                    1121,
                    1125
                ],
                "_title.set_transform": [
                    1125
                ],
                "_title.set_clip_box": [
                    1126
                ],
                "prop_cycle": [
                    1200,
                    1196,
                    1198,
                    1199
                ],
                "self._get_lines.set_prop_cycle": [
                    1199
                ],
                "self._get_patches_for_fill.set_prop_cycle": [
                    1200
                ],
                "cbook._str_equal": [
                    1258,
                    1259,
                    1262
                ],
                "aspect": [
                    1472,
                    1481,
                    1258,
                    1259,
                    1260,
                    1262,
                    1465,
                    1274,
                    1467,
                    1502,
                    1471
                ],
                "float": [
                    1260
                ],
                "self.name": [
                    2060,
                    1262
                ],
                "NotImplementedError": [
                    1263
                ],
                "share": [
                    1281,
                    1319,
                    1267,
                    1395,
                    1278
                ],
                "ax._aspect": [
                    1274
                ],
                "adjustable": [
                    1318,
                    1324,
                    1333,
                    1276,
                    1277,
                    1278
                ],
                "self.set_adjustable": [
                    4341,
                    1278
                ],
                "anchor": [
                    1280,
                    1281,
                    1392,
                    1401
                ],
                "self.set_anchor": [
                    1281
                ],
                "cbook._check_in_list": [
                    2938,
                    2758,
                    1318
                ],
                "axs": [
                    1320,
                    1323,
                    2510,
                    1327,
                    1332,
                    2520,
                    2522
                ],
                "ax.get_data_ratio": [
                    1325
                ],
                "_AxesBase.get_data_ratio": [
                    1326
                ],
                "_AxesBase": [
                    1326
                ],
                "ax._adjustable": [
                    1333
                ],
                "mtransforms.Bbox.coefs": [
                    1392,
                    1394
                ],
                "ax._anchor": [
                    1401
                ],
                "trf_xmin": [
                    1417,
                    1413
                ],
                "trf_xmax": [
                    1417,
                    1413
                ],
                "map": [
                    1413,
                    1510,
                    1415,
                    1511,
                    1547,
                    1552,
                    1495,
                    1496
                ],
                "transform": [
                    2435,
                    2436,
                    2531,
                    1510,
                    1414,
                    1416,
                    1511,
                    2438,
                    1547,
                    2536,
                    1552,
                    1938
                ],
                "self.get_xbound": [
                    1430,
                    3038,
                    1414,
                    1495
                ],
                "trf_ymin": [
                    1418,
                    1415
                ],
                "trf_ymax": [
                    1418,
                    1415
                ],
                "self.get_ybound": [
                    1416,
                    3435,
                    1496,
                    1431
                ],
                "xsize": [
                    1504,
                    1417,
                    1419,
                    1497,
                    1515,
                    1517,
                    1433,
                    1436
                ],
                "abs": [
                    1506,
                    4135,
                    1417,
                    1418,
                    4137,
                    1497,
                    4139,
                    4140,
                    4142,
                    1498,
                    2424,
                    1433,
                    1434,
                    4126
                ],
                "ysize": [
                    1504,
                    1418,
                    1419,
                    1516,
                    1518,
                    1434,
                    1498,
                    1436
                ],
                "xmin": [
                    3968,
                    1665,
                    3970,
                    1671,
                    1676,
                    1549,
                    1681,
                    1430,
                    1433,
                    1838,
                    1839,
                    3888,
                    3890,
                    3904,
                    3905,
                    1495,
                    1497,
                    3166,
                    3169,
                    3964
                ],
                "xmax": [
                    3968,
                    1665,
                    3970,
                    1672,
                    1676,
                    1549,
                    1681,
                    1430,
                    1433,
                    1838,
                    1839,
                    3888,
                    3890,
                    3904,
                    3905,
                    1495,
                    1497,
                    3170,
                    3173,
                    3965
                ],
                "ymin": [
                    1665,
                    3969,
                    3971,
                    1544,
                    1673,
                    1679,
                    1682,
                    1431,
                    1434,
                    1838,
                    1839,
                    3889,
                    3890,
                    3904,
                    3906,
                    1496,
                    3545,
                    1498,
                    3548,
                    2530,
                    2535,
                    2537,
                    3964
                ],
                "ymax": [
                    1665,
                    3969,
                    3971,
                    1544,
                    1674,
                    1679,
                    1682,
                    1431,
                    1434,
                    1838,
                    1839,
                    3889,
                    3890,
                    3904,
                    3906,
                    1496,
                    1498,
                    3549,
                    3552,
                    2540,
                    2544,
                    3965
                ],
                "math.log10": [
                    1433,
                    1434
                ],
                "math": [
                    1433,
                    1434
                ],
                "cbook.deprecated": [
                    1421
                ],
                "position": [
                    1482,
                    1491,
                    1462,
                    1463,
                    1500,
                    1468
                ],
                "self.get_position": [
                    4340,
                    1463
                ],
                "self.get_aspect": [
                    1465,
                    4158
                ],
                "fig_width": [
                    1474,
                    1475
                ],
                "fig_height": [
                    1474,
                    1475
                ],
                "get_size_inches": [
                    1474
                ],
                "self.get_figure": [
                    1474
                ],
                "fig_aspect": [
                    1475,
                    1501,
                    1483
                ],
                "RuntimeError": [
                    1529,
                    2553,
                    1479
                ],
                "box_aspect": [
                    1481,
                    1483,
                    1501,
                    1502
                ],
                "self.get_data_ratio": [
                    1481
                ],
                "pb": [
                    1482,
                    1483,
                    1484
                ],
                "position.frozen": [
                    1482
                ],
                "pb1": [
                    1483,
                    1484
                ],
                "pb.shrunk_to_aspect": [
                    1483
                ],
                "pb1.anchored": [
                    1484
                ],
                "self.get_anchor": [
                    1484
                ],
                "x_trf": [
                    1552,
                    1493,
                    1510,
                    1495
                ],
                "y_trf": [
                    1496,
                    1547,
                    1494,
                    1511
                ],
                "x_trf.transform": [
                    1495
                ],
                "y_trf.transform": [
                    1496
                ],
                "l": [
                    1500
                ],
                "b": [
                    3872,
                    2757,
                    2151,
                    2120,
                    2760,
                    2666,
                    2762,
                    4331,
                    3856,
                    2130,
                    2706,
                    1500,
                    2109,
                    2110
                ],
                "w": [
                    1500,
                    1501
                ],
                "h": [
                    1500,
                    1501
                ],
                "position.bounds": [
                    1500
                ],
                "data_ratio": [
                    1504,
                    1518,
                    1517,
                    1502
                ],
                "y_expander": [
                    1504,
                    1537,
                    1506,
                    1538,
                    1540
                ],
                "dL": [
                    1509,
                    1510,
                    1511
                ],
                "x_trf.inverted": [
                    1552,
                    1510
                ],
                "dL.intervalx": [
                    1510
                ],
                "y_trf.inverted": [
                    1547,
                    1511
                ],
                "dL.intervaly": [
                    1511
                ],
                "xr": [
                    1512,
                    1515,
                    1519
                ],
                "yr": [
                    1520,
                    1513,
                    1516
                ],
                "xmarg": [
                    1536,
                    1515
                ],
                "ymarg": [
                    1536,
                    1516
                ],
                "Ysize": [
                    1520,
                    1545,
                    1546,
                    1517
                ],
                "Xsize": [
                    1551,
                    1550,
                    1518,
                    1519
                ],
                "Xmarg": [
                    1538,
                    1519
                ],
                "Ymarg": [
                    1520,
                    1537
                ],
                "xm": [
                    1536,
                    1522
                ],
                "ym": [
                    1536,
                    1523
                ],
                "shared_x": [
                    1528,
                    1541,
                    1525
                ],
                "shared_y": [
                    1528,
                    1533,
                    1526
                ],
                "adjust_y": [
                    1541,
                    1534,
                    1543
                ],
                "adjy": [
                    1537,
                    1540,
                    1541
                ],
                "yc": [
                    1544,
                    1545,
                    1546
                ],
                "self.set_ybound": [
                    1547,
                    2460
                ],
                "xc": [
                    1549,
                    1550,
                    1551
                ],
                "self.set_xbound": [
                    1552,
                    2457
                ],
                "bool": [
                    2151,
                    3593,
                    1610,
                    3213,
                    2320,
                    2323,
                    2367
                ],
                "s": [
                    1611,
                    1612,
                    1613,
                    1614,
                    1615,
                    1616,
                    1617,
                    1619,
                    1621,
                    1623,
                    1631,
                    1633,
                    1636,
                    3814,
                    1639,
                    3815,
                    3817,
                    1643,
                    3819,
                    1655
                ],
                "s.lower": [
                    1616
                ],
                "self.set_axis_off": [
                    1620
                ],
                "self.set_autoscale_on": [
                    1635,
                    1638,
                    1641,
                    1645,
                    1627
                ],
                "self.set_aspect": [
                    1632,
                    1634,
                    1642,
                    1644,
                    1628
                ],
                "xlim": [
                    1648,
                    1649,
                    1646
                ],
                "self.get_xlim": [
                    3010,
                    1687,
                    3944,
                    3182,
                    1646,
                    3888,
                    3191
                ],
                "ylim": [
                    1648,
                    1651,
                    1647
                ],
                "self.get_ylim": [
                    3561,
                    3945,
                    3407,
                    1647,
                    3889,
                    3570,
                    1687
                ],
                "edge_size": [
                    1648,
                    1649,
                    1651
                ],
                "np.diff": [
                    1648
                ],
                "emit": [
                    3595,
                    3215,
                    1681,
                    1650,
                    1682,
                    1652
                ],
                "limits": [
                    1665,
                    1663
                ],
                "xauto": [
                    1681,
                    1675
                ],
                "yauto": [
                    1682,
                    1678
                ],
                "cbook.silent_list": [
                    1699,
                    1695
                ],
                "self.xaxis.get_gridlines": [
                    1707
                ],
                "self.xaxis.get_ticklines": [
                    1711
                ],
                "self.yaxis.get_gridlines": [
                    1719
                ],
                "self.yaxis.get_ticklines": [
                    1723
                ],
                "im": [
                    1737,
                    1740,
                    1734,
                    1735
                ],
                "mpl.contour.ContourSet": [
                    1734
                ],
                "mpl.contour": [
                    1734
                ],
                "im.collections": [
                    1735
                ],
                "self.artists.append": [
                    1777
                ],
                "a._remove_method": [
                    1778
                ],
                "self.artists.remove": [
                    1778
                ],
                "a.set_clip_path": [
                    1780
                ],
                "ax._axes": [
                    1794
                ],
                "ax.stale_callback": [
                    1795
                ],
                "martist._stale_axes_callback": [
                    1795
                ],
                "self.child_axes.append": [
                    1797
                ],
                "ax._remove_method": [
                    1798
                ],
                "self.child_axes.remove": [
                    1798
                ],
                "collection.get_label": [
                    1806
                ],
                "collection": [
                    1806,
                    1808,
                    1809,
                    1810,
                    1811,
                    1813,
                    1814,
                    1820,
                    1823
                ],
                "collection.set_label": [
                    1808
                ],
                "self.collections.append": [
                    1809
                ],
                "collection._remove_method": [
                    1810
                ],
                "self.collections.remove": [
                    1810
                ],
                "collection.get_clip_path": [
                    1813
                ],
                "collection.set_clip_path": [
                    1814
                ],
                "autolim": [
                    1816
                ],
                "self.update_datalim": [
                    1946,
                    1820
                ],
                "collection.get_datalim": [
                    1820
                ],
                "image": [
                    1829,
                    1830,
                    1831,
                    1832,
                    1833,
                    1835,
                    1838,
                    2004,
                    2005,
                    2006
                ],
                "image.get_label": [
                    1830
                ],
                "image.set_label": [
                    1831
                ],
                "self.images.append": [
                    1832
                ],
                "image._remove_method": [
                    1833
                ],
                "self.images.remove": [
                    1833
                ],
                "image.get_extent": [
                    1838
                ],
                "self.axes.update_datalim": [
                    1839
                ],
                "line.get_clip_path": [
                    1846
                ],
                "line.set_clip_path": [
                    1847
                ],
                "self._update_line_limits": [
                    1849,
                    1998
                ],
                "line.get_label": [
                    1850
                ],
                "line.set_label": [
                    1851
                ],
                "self.lines.append": [
                    1852
                ],
                "line._remove_method": [
                    1853
                ],
                "self.lines.remove": [
                    1853
                ],
                "txt": [
                    1865,
                    1861,
                    1862,
                    1863
                ],
                "self.texts.append": [
                    1862
                ],
                "txt._remove_method": [
                    1863
                ],
                "self.texts.remove": [
                    1863
                ],
                "path": [
                    1893,
                    1900,
                    1871,
                    1872,
                    1878
                ],
                "line.get_path": [
                    1871
                ],
                "path.vertices.size": [
                    1872
                ],
                "path.vertices": [
                    1872
                ],
                "line_trans": [
                    1903,
                    1875,
                    1877,
                    1880,
                    1883
                ],
                "line.get_transform": [
                    1875
                ],
                "data_path": [
                    1891,
                    1893,
                    1900,
                    1902,
                    1905,
                    1878
                ],
                "line_trans.contains_branch_seperately": [
                    1880,
                    1903
                ],
                "trans_to_data": [
                    1891,
                    1883,
                    1893
                ],
                "self.transData.is_affine": [
                    1888
                ],
                "line_trans_path": [
                    1889,
                    1890
                ],
                "line._get_transformed_path": [
                    1889
                ],
                "na_path": [
                    1890,
                    1891
                ],
                "_": [
                    1890,
                    2531,
                    2536,
                    2506,
                    2543
                ],
                "line_trans_path.get_transformed_path_and_affine": [
                    1890
                ],
                "trans_to_data.transform_path_affine": [
                    1891
                ],
                "trans_to_data.transform_path": [
                    1893
                ],
                "data_path.vertices.size": [
                    1902
                ],
                "data_path.vertices": [
                    1902
                ],
                "updatex": [
                    2030,
                    1903,
                    1907,
                    1944,
                    1946
                ],
                "updatey": [
                    2030,
                    1903,
                    1908,
                    1944,
                    1947
                ],
                "self.dataLim.update_from_path": [
                    1905
                ],
                "p.get_clip_path": [
                    1916
                ],
                "p.set_clip_path": [
                    1917
                ],
                "self._update_patch_limits": [
                    2002,
                    1918
                ],
                "self.patches.append": [
                    1919
                ],
                "p._remove_method": [
                    1920
                ],
                "self.patches.remove": [
                    1920
                ],
                "patch": [
                    1933,
                    1934,
                    1936,
                    1938,
                    1939,
                    1940,
                    1944
                ],
                "patch.get_width": [
                    1934
                ],
                "patch.get_height": [
                    1934
                ],
                "vertices": [
                    1936,
                    1937,
                    1938
                ],
                "patch.get_path": [
                    1936
                ],
                "vertices.size": [
                    1937
                ],
                "xys": [
                    2026,
                    2027,
                    2029,
                    1938,
                    1942,
                    1946
                ],
                "patch.get_patch_transform": [
                    1938
                ],
                "patch.get_data_transform": [
                    1939,
                    1940
                ],
                "patch_to_data": [
                    1940,
                    1942
                ],
                "patch_to_data.transform": [
                    1942
                ],
                "contains_branch_seperately": [
                    1944
                ],
                "patch.get_transform": [
                    1944
                ],
                "tab": [
                    1953,
                    1954,
                    1955,
                    1956,
                    1957
                ],
                "self.tables.append": [
                    1954
                ],
                "tab.set_clip_path": [
                    1955
                ],
                "tab._remove_method": [
                    1956
                ],
                "self.tables.remove": [
                    1956
                ],
                "container.get_label": [
                    1963
                ],
                "container": [
                    1963,
                    1965,
                    1966,
                    1967,
                    1968
                ],
                "container.set_label": [
                    1965
                ],
                "self.containers.append": [
                    1966
                ],
                "container._remove_method": [
                    1967
                ],
                "self.containers.remove": [
                    1967
                ],
                "self.relim": [
                    1976
                ],
                "self._request_autoscale_view": [
                    3648,
                    3268,
                    2329,
                    1977,
                    2874,
                    2271
                ],
                "self.dataLim.ignore": [
                    1992
                ],
                "self.dataLim.set_points": [
                    1993
                ],
                "get_points": [
                    1993
                ],
                "visible_only": [
                    2005,
                    2001,
                    1997
                ],
                "line.get_visible": [
                    1997
                ],
                "p.get_visible": [
                    2001
                ],
                "image.get_visible": [
                    2005
                ],
                "self._update_image_limits": [
                    2006
                ],
                "np.asarray": [
                    2026
                ],
                "self.dataLim.update_from_data_xy": [
                    2029
                ],
                "self.dataLim.set": [
                    2042
                ],
                "mtransforms.Bbox.union": [
                    2042,
                    4330
                ],
                "bounds": [
                    2042
                ],
                "axis": [
                    2049,
                    2818,
                    2435,
                    2820,
                    2437,
                    2054,
                    2055,
                    2822,
                    2824,
                    2826,
                    2059,
                    2828,
                    2830,
                    2319,
                    2064,
                    2065,
                    2322,
                    2069,
                    2715,
                    2716,
                    2868,
                    2869,
                    2758,
                    2759,
                    2761,
                    2946,
                    2418,
                    2807,
                    2938,
                    2939
                ],
                "axis.have_units": [
                    2054
                ],
                "axis.update_units": [
                    2069,
                    2055
                ],
                "units": [
                    2064,
                    2065,
                    2059,
                    2062
                ],
                "unit_name": [
                    2059,
                    2062
                ],
                "axis.units": [
                    2064,
                    2059
                ],
                "polar_units": [
                    2061,
                    2062
                ],
                "axis.set_units": [
                    2065
                ],
                "_process_single_axis": [
                    2072,
                    2073
                ],
                "xdata": [
                    2072
                ],
                "ydata": [
                    2073
                ],
                "self.patch.contains": [
                    2081,
                    4202
                ],
                "mouseevent": [
                    2081,
                    4202,
                    4199
                ],
                "use_sticky_edges.setter": [
                    2149
                ],
                "use_sticky_edges": [
                    2149
                ],
                "m": [
                    2193,
                    2195,
                    2810,
                    2171,
                    2173,
                    2811
                ],
                "margins": [
                    2250,
                    2253,
                    2254,
                    2255,
                    2256,
                    2257
                ],
                "self.set_xmargin": [
                    2267
                ],
                "self.set_ymargin": [
                    2269
                ],
                "z": [
                    2283
                ],
                "enable": [
                    2320,
                    2313,
                    2323
                ],
                "self.use_sticky_edges": [
                    2369
                ],
                "stickies": [
                    2372,
                    2374,
                    2375,
                    2376,
                    2426,
                    2427,
                    2429,
                    2430
                ],
                "artist.sticky_edges": [
                    2372
                ],
                "artist": [
                    4232,
                    2372,
                    4231
                ],
                "self.get_children": [
                    4220,
                    2571,
                    2372
                ],
                "x_stickies": [
                    2457,
                    2378,
                    2375
                ],
                "np.sort": [
                    2376,
                    2375
                ],
                "sticky": [
                    2376,
                    2375
                ],
                "sticky.x": [
                    2375
                ],
                "y_stickies": [
                    2376,
                    2460,
                    2380
                ],
                "sticky.y": [
                    2376
                ],
                "lower": [
                    2377,
                    2379,
                    3035,
                    3036,
                    3040,
                    3041,
                    3046,
                    3047,
                    3432,
                    3049,
                    3433,
                    3051,
                    3052,
                    3437,
                    3054,
                    3438,
                    3443,
                    3444,
                    3446,
                    3448,
                    3449,
                    3451
                ],
                "self.get_xscale": [
                    2377,
                    4044,
                    3188
                ],
                "self.get_yscale": [
                    2379,
                    4052,
                    3567
                ],
                "scale": [
                    3816,
                    2385,
                    3812,
                    3813
                ],
                "autoscaleon": [
                    2385
                ],
                "shared": [
                    2410,
                    2388,
                    2389,
                    2415
                ],
                "shared_axes.get_siblings": [
                    2388
                ],
                "shared_axes": [
                    2388
                ],
                "dl": [
                    2402,
                    2403,
                    2404,
                    2406,
                    2389,
                    2391,
                    2395,
                    2398
                ],
                "ax.dataLim": [
                    2389
                ],
                "finite_dl": [
                    2400,
                    2402,
                    2391,
                    2392,
                    2397
                ],
                "d": [
                    2400,
                    2476,
                    2480,
                    2481,
                    2391,
                    2395,
                    2396,
                    2397,
                    2398,
                    2399
                ],
                "all": [
                    2409,
                    2412,
                    2391,
                    2396,
                    2399
                ],
                "np.isfinite": [
                    2440,
                    2409,
                    2412,
                    4172,
                    3092,
                    2391,
                    2396,
                    2399
                ],
                "x_finite": [
                    2403,
                    2395
                ],
                "d.intervalx": [
                    2396
                ],
                "y_finite": [
                    2404,
                    2398
                ],
                "d.intervaly": [
                    2399
                ],
                "dl.extend": [
                    2403,
                    2404
                ],
                "bb": [
                    2434,
                    4274,
                    4289,
                    4293,
                    4297,
                    4301,
                    4303,
                    4305,
                    4307,
                    2525,
                    2527,
                    2528,
                    2529,
                    2406,
                    2409,
                    4329,
                    2411,
                    2412,
                    4331,
                    2416,
                    2417
                ],
                "mtransforms.BboxBase.union": [
                    2410,
                    2414,
                    2406
                ],
                "vl": [
                    2408,
                    2410,
                    2411,
                    2413,
                    2414,
                    2416
                ],
                "bb.intervalx": [
                    2409,
                    2411
                ],
                "ax.viewLim": [
                    2410,
                    2415
                ],
                "vl.intervalx": [
                    2411
                ],
                "bb.intervaly": [
                    2416,
                    2412
                ],
                "vl.intervaly": [
                    2416
                ],
                "interval": [
                    2417
                ],
                "axis.get_major_locator": [
                    2418
                ],
                "locator.nonsingular": [
                    2419
                ],
                "i0": [
                    2426,
                    2427
                ],
                "stickies.searchsorted": [
                    2426,
                    2429
                ],
                "tol": [
                    2426,
                    2429
                ],
                "x0bound": [
                    2427,
                    2445,
                    2446
                ],
                "i1": [
                    2429,
                    2430
                ],
                "x1bound": [
                    2448,
                    2430,
                    2447
                ],
                "minpos": [
                    2434,
                    2437
                ],
                "axis.get_transform": [
                    2435
                ],
                "inverse_trans": [
                    2442,
                    2436
                ],
                "transform.inverted": [
                    2436
                ],
                "axis._scale.limit_range_for_scale": [
                    2437
                ],
                "axis._scale": [
                    2437
                ],
                "x0t": [
                    2442,
                    2438,
                    2439
                ],
                "x1t": [
                    2442,
                    2438,
                    2439
                ],
                "transform.transform": [
                    2438
                ],
                "delta": [
                    2440,
                    2441,
                    2442,
                    2439
                ],
                "margin": [
                    2439
                ],
                "inverse_trans.transform": [
                    2442
                ],
                "min": [
                    2448
                ],
                "locator.view_limits": [
                    2451
                ],
                "set_bound": [
                    2452
                ],
                "handle_single_axis": [
                    2458,
                    2455
                ],
                "axis_list": [
                    2477,
                    2479
                ],
                "self._get_axis_list": [
                    2817,
                    4228,
                    2477,
                    2585,
                    2715,
                    4188
                ],
                "items": [
                    2816,
                    2478
                ],
                "vars": [
                    2478
                ],
                "k.endswith": [
                    2479
                ],
                "_log.debug": [
                    2490,
                    2500
                ],
                "titles": [
                    2496,
                    2505,
                    2540,
                    2541,
                    2493
                ],
                "title": [
                    2496,
                    2497,
                    2530,
                    2532,
                    2535,
                    2505,
                    2506,
                    2537,
                    2508,
                    2538,
                    2540,
                    2541,
                    2543,
                    2544
                ],
                "title.get_position": [
                    2497,
                    2506,
                    2540,
                    2543
                ],
                "np.isclose": [
                    2498
                ],
                "title.set_position": [
                    2544,
                    2538,
                    2508,
                    2532
                ],
                "ax.get_axes_locator": [
                    2514
                ],
                "renderer": [
                    2566,
                    2582,
                    2604,
                    2615,
                    4281,
                    2619,
                    2620,
                    2622,
                    4287,
                    2624,
                    4291,
                    4295,
                    4296,
                    4299,
                    4301,
                    4303,
                    4305,
                    4307,
                    2516,
                    2525,
                    2527,
                    2530,
                    4325,
                    2535,
                    2537,
                    2550,
                    2551,
                    2552,
                    2558
                ],
                "ax.apply_aspect": [
                    2517,
                    2519
                ],
                "top": [
                    3588,
                    3589,
                    3591,
                    3605,
                    3407,
                    3408,
                    3409,
                    3411,
                    3543,
                    3544,
                    2521,
                    3550,
                    3552,
                    2529,
                    2530,
                    2531,
                    3554,
                    3556,
                    3558,
                    2535,
                    2537,
                    3564,
                    3565,
                    3567,
                    3577,
                    3582,
                    3583
                ],
                "ax.xaxis.get_ticks_position": [
                    2523
                ],
                "ax.xaxis": [
                    3265,
                    2523,
                    2524,
                    2525
                ],
                "ax.xaxis.get_label_position": [
                    2524
                ],
                "ax.xaxis.get_tightbbox": [
                    2525
                ],
                "ax.get_window_extent": [
                    2527
                ],
                "bb.ymax": [
                    2529
                ],
                "title.get_window_extent": [
                    2537,
                    2530,
                    2535
                ],
                "self.transAxes.inverted": [
                    2536,
                    2531
                ],
                "self.figure._cachedRenderer": [
                    2551,
                    2633,
                    2636,
                    2644,
                    2647,
                    2650
                ],
                "self.get_visible": [
                    2554,
                    4276
                ],
                "renderer.open_group": [
                    2558
                ],
                "artists": [
                    4225,
                    2594,
                    2596,
                    4229,
                    4231,
                    2622,
                    2571,
                    2572,
                    2603,
                    2605,
                    2607,
                    2580,
                    2586,
                    4220,
                    2589,
                    2590,
                    2591
                ],
                "artists.remove": [
                    4225,
                    4229,
                    2572,
                    2580,
                    2586,
                    2589,
                    2590,
                    2591
                ],
                "self.axison": [
                    4227,
                    2960,
                    2578,
                    2614,
                    2584,
                    2969,
                    4286,
                    4222
                ],
                "self.spines.values": [
                    4224,
                    4187,
                    2579
                ],
                "self._update_title_position": [
                    4299,
                    2582,
                    4295
                ],
                "inframe": [
                    2584,
                    2588
                ],
                "_axis": [
                    2585,
                    2586,
                    4228,
                    4229
                ],
                "self.figure.canvas.is_saving": [
                    2593
                ],
                "self.figure.canvas": [
                    2593
                ],
                "a.get_animated": [
                    2595
                ],
                "sorted": [
                    2596
                ],
                "attrgetter": [
                    2596
                ],
                "rasterization_zorder": [
                    2600,
                    2602,
                    2603,
                    2606,
                    2608
                ],
                "zorder": [
                    2603,
                    2708,
                    2710,
                    2712,
                    2716
                ],
                "renderer.start_rasterizing": [
                    2604
                ],
                "artists_rasterized": [
                    2617,
                    2610,
                    2618,
                    2605
                ],
                "a.zorder": [
                    2608,
                    2606
                ],
                "self.patch.draw": [
                    2615
                ],
                "a.draw": [
                    2619,
                    2636
                ],
                "renderer.stop_rasterizing": [
                    2620
                ],
                "mimage._draw_list_compositing_images": [
                    2622
                ],
                "mimage": [
                    2622
                ],
                "renderer.close_group": [
                    2624
                ],
                "martist.allow_rasterization": [
                    2547
                ],
                "self.draw": [
                    2647
                ],
                "self._axisbelow": [
                    2681,
                    2706
                ],
                "axisbelow": [
                    2706,
                    2707,
                    2709,
                    2711
                ],
                "validate_axisbelow": [
                    2706
                ],
                "axis.set_zorder": [
                    2716
                ],
                "self.xaxis.grid": [
                    2760
                ],
                "self.yaxis.grid": [
                    2762
                ],
                "docstring.dedent_interpd": [
                    2719
                ],
                "docstring": [
                    2719
                ],
                "style": [
                    2806,
                    2815
                ],
                "style.lower": [
                    2806
                ],
                "axis.lower": [
                    2807
                ],
                "scilimits": [
                    2808,
                    2824,
                    2810,
                    2823
                ],
                "n": [
                    2810,
                    2811
                ],
                "STYLES": [
                    2814,
                    2815
                ],
                "is_sci_style": [
                    2821,
                    2822,
                    2815
                ],
                "cbook._check_getitem": [
                    2818,
                    2815
                ],
                "axis_map": [
                    2816,
                    2818
                ],
                "self._get_axis_map": [
                    2816
                ],
                "axises": [
                    2818,
                    2820
                ],
                "axis.major.formatter.set_scientific": [
                    2822
                ],
                "axis.major.formatter": [
                    2822,
                    2824,
                    2826,
                    2828,
                    2830
                ],
                "axis.major": [
                    2822,
                    2824,
                    2826,
                    2828,
                    2830
                ],
                "axis.major.formatter.set_powerlimits": [
                    2824
                ],
                "useOffset": [
                    2825,
                    2826
                ],
                "axis.major.formatter.set_useOffset": [
                    2826
                ],
                "useLocale": [
                    2827,
                    2828
                ],
                "axis.major.formatter.set_useLocale": [
                    2828
                ],
                "useMathText": [
                    2829,
                    2830
                ],
                "axis.major.formatter.set_useMathText": [
                    2830
                ],
                "_x": [
                    2874,
                    2868,
                    2870
                ],
                "_y": [
                    2872,
                    2874,
                    2869
                ],
                "set_params": [
                    2873,
                    2871
                ],
                "self.xaxis.get_major_locator": [
                    3208,
                    2871
                ],
                "self.yaxis.get_major_locator": [
                    2873,
                    3588
                ],
                "xkw": [
                    2944,
                    2945,
                    2940,
                    2941,
                    2942,
                    2943
                ],
                "dict": [
                    2947,
                    2940
                ],
                "xkw.pop": [
                    2944,
                    2941,
                    2942,
                    2943
                ],
                "self.xaxis.set_tick_params": [
                    2945
                ],
                "ykw": [
                    2947,
                    2948,
                    2949,
                    2950,
                    2951,
                    2952
                ],
                "ykw.pop": [
                    2948,
                    2949,
                    2950,
                    2951
                ],
                "self.yaxis.set_tick_params": [
                    2952
                ],
                "self.xaxis.set_inverted": [
                    2984
                ],
                "self.xaxis.get_inverted": [
                    2984,
                    2998
                ],
                "left": [
                    3204,
                    3206,
                    3208,
                    3209,
                    3211,
                    3225,
                    3010,
                    3011,
                    3012,
                    3014,
                    3164,
                    3165,
                    3167,
                    3169,
                    3175,
                    3176,
                    3179,
                    3183,
                    3184,
                    3188,
                    3192,
                    3197
                ],
                "right": [
                    3203,
                    3204,
                    3208,
                    3209,
                    3211,
                    3225,
                    3010,
                    3011,
                    3012,
                    3014,
                    3164,
                    3165,
                    3171,
                    3173,
                    3175,
                    3177,
                    3179,
                    3185,
                    3186,
                    3188,
                    3198
                ],
                "upper": [
                    3035,
                    3036,
                    3042,
                    3043,
                    3046,
                    3047,
                    3432,
                    3049,
                    3433,
                    3051,
                    3052,
                    3054,
                    3439,
                    3440,
                    3443,
                    3444,
                    3446,
                    3448,
                    3449,
                    3451
                ],
                "np.iterable": [
                    3432,
                    3035,
                    3164,
                    3543
                ],
                "old_lower": [
                    3041,
                    3438,
                    3435,
                    3038
                ],
                "old_upper": [
                    3435,
                    3043,
                    3440,
                    3038
                ],
                "self.xaxis_inverted": [
                    3045
                ],
                "tuple": [
                    3474,
                    3077
                ],
                "self.viewLim.intervalx": [
                    3220,
                    3077
                ],
                "self.viewLim": [
                    3077,
                    3600,
                    3474,
                    3220,
                    4086
                ],
                "limit": [
                    3089,
                    3090
                ],
                "converted_limit": [
                    3090,
                    3091,
                    3092,
                    3094
                ],
                "convert": [
                    3090
                ],
                "Real": [
                    3091
                ],
                "self._process_unit_info": [
                    3554,
                    3175
                ],
                "self._validate_converted_limits": [
                    3176,
                    3177,
                    3555,
                    3556
                ],
                "self.convert_xunits": [
                    3176,
                    3177
                ],
                "old_left": [
                    3184,
                    3197,
                    3182,
                    3191
                ],
                "old_right": [
                    3186,
                    3203,
                    3182,
                    3191
                ],
                "nonsingular": [
                    3208,
                    3588
                ],
                "self.xaxis.limit_range_for_scale": [
                    3209
                ],
                "self._viewLim.intervalx": [
                    3211
                ],
                "auto": [
                    3592,
                    3593,
                    3212,
                    3213,
                    3601,
                    3221
                ],
                "self.callbacks.process": [
                    3216,
                    3596
                ],
                "other": [
                    3598,
                    3599,
                    3600,
                    3218,
                    3219,
                    3220,
                    3602,
                    3222,
                    3223,
                    3603
                ],
                "other.set_xlim": [
                    3220
                ],
                "other.figure": [
                    3602,
                    3603,
                    3222,
                    3223
                ],
                "other.figure.canvas.draw_idle": [
                    3603,
                    3223
                ],
                "other.figure.canvas": [
                    3603,
                    3223
                ],
                "self.xaxis.get_scale": [
                    3235
                ],
                "g": [
                    3264,
                    3643,
                    3644,
                    3263
                ],
                "self.get_shared_x_axes": [
                    3263
                ],
                "g.get_siblings": [
                    3264,
                    3644
                ],
                "ax.xaxis._set_scale": [
                    3265
                ],
                "value": [
                    3265,
                    3645
                ],
                "ax._update_transScale": [
                    3266,
                    3646
                ],
                "ax.stale": [
                    3267,
                    3647
                ],
                "self.xaxis.get_ticklocs": [
                    3272
                ],
                "minor": [
                    3712,
                    3746,
                    3652,
                    3333,
                    3367,
                    3272,
                    3667,
                    3287
                ],
                "ret": [
                    3366,
                    3369,
                    3667,
                    3668,
                    3287,
                    3289
                ],
                "self.xaxis.set_ticks": [
                    3287
                ],
                "ticks": [
                    3667,
                    3287
                ],
                "self.xaxis.get_majorticklabels": [
                    3300
                ],
                "self.xaxis.get_minorticklabels": [
                    3311
                ],
                "self.xaxis.get_ticklabels": [
                    3333
                ],
                "fontdict": [
                    3744,
                    3364,
                    3365,
                    3743
                ],
                "kwargs.update": [
                    3744,
                    3365
                ],
                "self.xaxis.set_ticklabels": [
                    3366
                ],
                "labels": [
                    3745,
                    3366
                ],
                "self.yaxis.set_inverted": [
                    3381
                ],
                "self.yaxis.get_inverted": [
                    3395,
                    3381
                ],
                "bottom": [
                    3585,
                    3588,
                    3589,
                    3591,
                    3605,
                    3407,
                    3408,
                    3409,
                    3411,
                    3543,
                    3544,
                    3546,
                    3548,
                    3554,
                    3555,
                    3558,
                    3562,
                    3563,
                    3567,
                    3571,
                    3576,
                    3583
                ],
                "self.yaxis_inverted": [
                    3442
                ],
                "self.viewLim.intervaly": [
                    3600,
                    3474
                ],
                "self.convert_yunits": [
                    3555,
                    3556
                ],
                "old_bottom": [
                    3576,
                    3561,
                    3570,
                    3563
                ],
                "old_top": [
                    3561,
                    3570,
                    3565,
                    3582
                ],
                "self.yaxis.limit_range_for_scale": [
                    3589
                ],
                "self._viewLim.intervaly": [
                    3591
                ],
                "other.set_ylim": [
                    3600
                ],
                "self.yaxis.get_scale": [
                    3615
                ],
                "self.get_shared_y_axes": [
                    3643
                ],
                "ax.yaxis._set_scale": [
                    3645
                ],
                "ax.yaxis": [
                    3645
                ],
                "self.yaxis.get_ticklocs": [
                    3652
                ],
                "self.yaxis.set_ticks": [
                    3667
                ],
                "self.yaxis.get_majorticklabels": [
                    3679
                ],
                "self.yaxis.get_minorticklabels": [
                    3690
                ],
                "self.yaxis.get_ticklabels": [
                    3712
                ],
                "self.yaxis.set_ticklabels": [
                    3745
                ],
                "self.xaxis.axis_date": [
                    3759
                ],
                "tz": [
                    3770,
                    3759
                ],
                "self.yaxis.axis_date": [
                    3770
                ],
                "format_data_short": [
                    3780,
                    3790
                ],
                "self.xaxis.get_major_formatter": [
                    3780
                ],
                "self.yaxis.get_major_formatter": [
                    3790
                ],
                "xs": [
                    3802,
                    3795,
                    3797
                ],
                "self.format_xdata": [
                    3797
                ],
                "ys": [
                    3801,
                    3802,
                    3799
                ],
                "self.format_ydata": [
                    3801
                ],
                "ax.get_scale": [
                    3812
                ],
                "ax._scale": [
                    3817,
                    3814
                ],
                "ax.set_minor_locator": [
                    3818,
                    3821,
                    3815
                ],
                "mticker.LogLocator": [
                    3815
                ],
                "s.base": [
                    3815
                ],
                "s.subs": [
                    3819,
                    3815
                ],
                "mticker.SymmetricalLogLocator": [
                    3819
                ],
                "s._transform": [
                    3819
                ],
                "mticker.NullLocator": [
                    3825,
                    3826
                ],
                "self._navigate": [
                    3856,
                    3846
                ],
                "self._navigate_mode": [
                    3872,
                    3862
                ],
                "view": [
                    3904
                ],
                "Xmin": [
                    4000,
                    3944,
                    4008,
                    4009,
                    4045,
                    4046,
                    4047,
                    4049,
                    4050,
                    4051,
                    3992,
                    3994,
                    3964,
                    3999
                ],
                "Xmax": [
                    4001,
                    4002,
                    3944,
                    4010,
                    4011,
                    4045,
                    4047,
                    4049,
                    4051,
                    3992,
                    3994,
                    3965
                ],
                "Ymin": [
                    3945,
                    4014,
                    4016,
                    4055,
                    4021,
                    4022,
                    4053,
                    4054,
                    4057,
                    4058,
                    4059,
                    3964,
                    4030,
                    4031
                ],
                "Ymax": [
                    4032,
                    4033,
                    3945,
                    4014,
                    4016,
                    4055,
                    4053,
                    4023,
                    4024,
                    4057,
                    4059,
                    3965
                ],
                "bbox": [
                    4325,
                    4326,
                    3975,
                    4327,
                    3977,
                    4328,
                    3947,
                    4329,
                    3949,
                    3985
                ],
                "xp": [
                    3972,
                    3949
                ],
                "yp": [
                    3949,
                    3973
                ],
                "scl": [
                    3972,
                    3973,
                    3975,
                    3976,
                    3949,
                    3952,
                    3953,
                    3956,
                    3960
                ],
                "direction": [
                    4035,
                    3957,
                    4043,
                    3959
                ],
                "tranD2C": [
                    3963,
                    3964,
                    3965
                ],
                "self.transData.transform": [
                    3963
                ],
                "xwidth": [
                    3968,
                    3976,
                    3975
                ],
                "ywidth": [
                    3976,
                    3969,
                    3975
                ],
                "xcen": [
                    3970,
                    3972
                ],
                "ycen": [
                    3971,
                    3973
                ],
                "xzc": [
                    3976,
                    3972,
                    3975
                ],
                "yzc": [
                    3976,
                    3973,
                    3975
                ],
                "lastx": [
                    4004,
                    4005,
                    4007,
                    3985,
                    3989,
                    3995,
                    3996,
                    3998
                ],
                "lasty": [
                    3985,
                    4018,
                    4017,
                    4020,
                    3989,
                    4026,
                    4027,
                    4029
                ],
                "inverse": [
                    3988,
                    3989
                ],
                "self.transData.inverted": [
                    4088,
                    3988
                ],
                "inverse.transform": [
                    3989
                ],
                "twinx": [
                    3991
                ],
                "twiny": [
                    4013
                ],
                "mode": [
                    4036,
                    4061,
                    4038,
                    4063
                ],
                "alpha": [
                    4160,
                    4163,
                    4045,
                    4046,
                    4047,
                    4049,
                    4050,
                    4051,
                    4053,
                    4054,
                    4055,
                    4057,
                    4058,
                    4059
                ],
                "np.log": [
                    4053,
                    4045
                ],
                "rx1": [
                    4050,
                    4062,
                    4046,
                    4066
                ],
                "pow": [
                    4055,
                    4054,
                    4046,
                    4047
                ],
                "rx2": [
                    4066,
                    4051,
                    4062,
                    4047
                ],
                "ry1": [
                    4064,
                    4058,
                    4067,
                    4054
                ],
                "ry2": [
                    4064,
                    4059,
                    4067,
                    4055
                ],
                "self._pan_start": [
                    4145,
                    4085,
                    4103
                ],
                "types.SimpleNamespace": [
                    4085
                ],
                "types": [
                    4085
                ],
                "self.viewLim.frozen": [
                    4086
                ],
                "self.transData.frozen": [
                    4087
                ],
                "frozen": [
                    4088
                ],
                "self.bbox.frozen": [
                    4089
                ],
                "dx": [
                    4126,
                    4127,
                    4129,
                    4133,
                    4135,
                    4136,
                    4137,
                    4139,
                    4140,
                    4142,
                    4143,
                    4146,
                    4148,
                    4151,
                    4152,
                    4155,
                    4157,
                    4159,
                    4160
                ],
                "dy": [
                    4126,
                    4127,
                    4129,
                    4131,
                    4135,
                    4137,
                    4138,
                    4139,
                    4140,
                    4142,
                    4143,
                    4147,
                    4148,
                    4151,
                    4152,
                    4156,
                    4157,
                    4159,
                    4160
                ],
                "p.x": [
                    4161,
                    4146
                ],
                "p.y": [
                    4161,
                    4147
                ],
                "button": [
                    4153,
                    4150
                ],
                "format_deltas": [
                    4157,
                    4151
                ],
                "result": [
                    4152,
                    4164,
                    4173,
                    4172
                ],
                "transformed": [
                    4152,
                    4164
                ],
                "p.bbox.translated": [
                    4152
                ],
                "p.bbox": [
                    4152
                ],
                "p.trans_inverse": [
                    4152,
                    4165
                ],
                "self.bbox.width": [
                    4155
                ],
                "self.bbox.height": [
                    4156
                ],
                "np.power": [
                    4160
                ],
                "start": [
                    4161,
                    4163
                ],
                "np.array": [
                    4161
                ],
                "oldpoints": [
                    4162,
                    4163
                ],
                "p.lim.transformed": [
                    4162
                ],
                "p.lim": [
                    4162
                ],
                "p.trans": [
                    4162,
                    4172
                ],
                "newpoints": [
                    4163,
                    4164
                ],
                "OverflowError": [
                    4166
                ],
                "valid": [
                    4172,
                    4175
                ],
                "result.transformed": [
                    4172
                ],
                "points": [
                    4176,
                    4177,
                    4173,
                    4175
                ],
                "astype": [
                    4173
                ],
                "result.get_points": [
                    4173
                ],
                "object": [
                    4173
                ],
                "inside": [
                    4200,
                    4201,
                    4199
                ],
                "info": [
                    4201,
                    4199
                ],
                "self._default_contains": [
                    4199
                ],
                "self.patch.contains_point": [
                    4209
                ],
                "point": [
                    4209
                ],
                "artist.get_visible": [
                    4232
                ],
                "artist.get_in_layout": [
                    4232
                ],
                "call_axes_locator": [
                    4280
                ],
                "bb_xaxis": [
                    4288,
                    4289,
                    4287
                ],
                "self.xaxis.get_tightbbox": [
                    4287
                ],
                "bb.append": [
                    4289,
                    4293,
                    4297,
                    4329,
                    4301,
                    4303,
                    4305,
                    4307
                ],
                "bb_yaxis": [
                    4291,
                    4292,
                    4293
                ],
                "self.yaxis.get_tightbbox": [
                    4291
                ],
                "axbbox": [
                    4296,
                    4297,
                    4320,
                    4321
                ],
                "self.get_window_extent": [
                    4296,
                    4307
                ],
                "self.title.get_visible": [
                    4300
                ],
                "self.title.get_window_extent": [
                    4301
                ],
                "self._left_title.get_visible": [
                    4302
                ],
                "self._left_title.get_window_extent": [
                    4303
                ],
                "self._right_title.get_visible": [
                    4304
                ],
                "self._right_title.get_window_extent": [
                    4305
                ],
                "bbox_artists": [
                    4313,
                    4309,
                    4310,
                    4311
                ],
                "bbox_extra_artists": [
                    4309
                ],
                "self.get_default_bbox_extra_artists": [
                    4311
                ],
                "clip_extent": [
                    4321,
                    4317,
                    4318,
                    4319
                ],
                "a._get_clipping_extent_bbox": [
                    4317
                ],
                "mtransforms.Bbox.intersection": [
                    4319
                ],
                "np.all": [
                    4321
                ],
                "clip_extent.extents": [
                    4321
                ],
                "axbbox.extents": [
                    4321
                ],
                "a.get_tightbbox": [
                    4325
                ],
                "bbox.width": [
                    4327
                ],
                "np.inf": [
                    4328,
                    4327
                ],
                "bbox.height": [
                    4328
                ],
                "_bbox": [
                    4330,
                    4333
                ],
                "b.width": [
                    4331
                ],
                "b.height": [
                    4331
                ],
                "ax2": [
                    4366,
                    4367,
                    4368,
                    4369,
                    4370,
                    4372,
                    4373,
                    4374,
                    4396,
                    4397,
                    4398,
                    4399,
                    4401,
                    4402,
                    4403,
                    4340,
                    4342,
                    4343,
                    4344
                ],
                "self.figure.add_axes": [
                    4340
                ],
                "ax2.set_adjustable": [
                    4342
                ],
                "self._twinned_axes.join": [
                    4343
                ],
                "self._make_twin_axes": [
                    4396,
                    4366
                ],
                "ax2.yaxis.tick_right": [
                    4367
                ],
                "ax2.yaxis": [
                    4368,
                    4369,
                    4401,
                    4367
                ],
                "ax2.yaxis.set_label_position": [
                    4368
                ],
                "ax2.yaxis.set_offset_position": [
                    4369
                ],
                "ax2.set_autoscalex_on": [
                    4370
                ],
                "self.get_autoscalex_on": [
                    4370
                ],
                "self.yaxis.tick_left": [
                    4371
                ],
                "ax2.xaxis.set_visible": [
                    4372
                ],
                "ax2.xaxis": [
                    4372,
                    4397,
                    4398
                ],
                "ax2.patch.set_visible": [
                    4402,
                    4373
                ],
                "ax2.patch": [
                    4402,
                    4373
                ],
                "ax2.xaxis.tick_top": [
                    4397
                ],
                "ax2.xaxis.set_label_position": [
                    4398
                ],
                "ax2.set_autoscaley_on": [
                    4399
                ],
                "self.get_autoscaley_on": [
                    4399
                ],
                "self.xaxis.tick_bottom": [
                    4400
                ],
                "ax2.yaxis.set_visible": [
                    4401
                ]
            },
            "filtered_variables_in_file": {
                "_log": [
                    2490,
                    2500,
                    28
                ],
                "logging.getLogger": [
                    28
                ],
                "logging": [
                    28
                ],
                "linestyle": [
                    65,
                    326,
                    107,
                    76,
                    108,
                    109,
                    79,
                    110,
                    49,
                    82,
                    114,
                    85,
                    312,
                    317,
                    61
                ],
                "marker": [
                    65,
                    312,
                    326,
                    317,
                    107,
                    111,
                    112,
                    50,
                    114,
                    88,
                    91,
                    61
                ],
                "color": [
                    65,
                    97,
                    68,
                    101,
                    326,
                    114,
                    51,
                    1111,
                    55,
                    312,
                    1113,
                    317,
                    61,
                    94
                ],
                "mcolors.to_rgba": [
                    101,
                    55
                ],
                "mcolors": [
                    101,
                    93,
                    55
                ],
                "fmt": [
                    96,
                    99,
                    100,
                    73,
                    74,
                    75,
                    78,
                    79,
                    84,
                    55,
                    90,
                    59,
                    63
                ],
                "fmtint": [
                    59,
                    63
                ],
                "i": [
                    98,
                    99,
                    100,
                    102,
                    72,
                    73,
                    74,
                    75,
                    79,
                    80,
                    86,
                    92
                ],
                "c": [
                    97,
                    99,
                    105,
                    74,
                    81,
                    85,
                    87,
                    91,
                    93
                ],
                "mlines.lineStyles": [
                    81,
                    75
                ],
                "mlines": [
                    255,
                    81,
                    75,
                    87
                ],
                "mlines.lineMarkers": [
                    87
                ],
                "mcolors.get_named_colors_mapping": [
                    93
                ],
                "color_cycle_number": [
                    100,
                    101
                ],
                "rcParams": [
                    768,
                    1019,
                    1034,
                    1035,
                    1037,
                    1038,
                    145,
                    794,
                    1057,
                    692,
                    448,
                    451,
                    718,
                    479,
                    480,
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    1000,
                    108,
                    1003,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    501,
                    502,
                    503,
                    504,
                    505,
                    1010,
                    1011
                ],
                "self.axes": [
                    130,
                    260,
                    261,
                    136,
                    426,
                    1839,
                    336,
                    337,
                    338,
                    339,
                    154
                ],
                "self": [
                    4103,
                    2060,
                    2072,
                    2073,
                    2081,
                    2087,
                    2093,
                    4145,
                    2099,
                    4155,
                    4156,
                    2109,
                    2110,
                    4158,
                    2120,
                    4176,
                    4177,
                    2130,
                    4182,
                    4183,
                    4184,
                    4185,
                    4186,
                    4187,
                    4188,
                    4189,
                    4190,
                    4191,
                    4192,
                    4193,
                    4194,
                    2147,
                    2151,
                    4199,
                    4202,
                    4209,
                    4220,
                    2173,
                    2174,
                    4222,
                    4224,
                    130,
                    131,
                    132,
                    4227,
                    4228,
                    136,
                    139,
                    140,
                    2195,
                    2196,
                    149,
                    151,
                    154,
                    159,
                    4276,
                    4279,
                    4281,
                    4282,
                    4284,
                    4286,
                    4287,
                    4291,
                    4295,
                    4296,
                    4299,
                    4300,
                    4301,
                    4302,
                    4303,
                    4304,
                    4305,
                    4307,
                    4311,
                    216,
                    2264,
                    2267,
                    220,
                    2269,
                    222,
                    2271,
                    231,
                    235,
                    2283,
                    2284,
                    2288,
                    4340,
                    4341,
                    4343,
                    253,
                    254,
                    260,
                    261,
                    4366,
                    2320,
                    2321,
                    4370,
                    2323,
                    2324,
                    4371,
                    2326,
                    2328,
                    2329,
                    285,
                    286,
                    4396,
                    301,
                    4399,
                    4400,
                    4407,
                    4411,
                    2367,
                    2369,
                    2370,
                    2371,
                    2372,
                    2377,
                    2379,
                    336,
                    337,
                    338,
                    339,
                    2388,
                    352,
                    353,
                    356,
                    376,
                    2450,
                    2456,
                    2457,
                    2459,
                    2460,
                    2463,
                    418,
                    420,
                    422,
                    423,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    2477,
                    435,
                    2478,
                    437,
                    438,
                    439,
                    441,
                    2489,
                    443,
                    2493,
                    446,
                    2495,
                    449,
                    450,
                    451,
                    2499,
                    453,
                    454,
                    2503,
                    457,
                    458,
                    460,
                    461,
                    2510,
                    464,
                    2512,
                    466,
                    468,
                    2516,
                    470,
                    471,
                    472,
                    474,
                    475,
                    476,
                    478,
                    2531,
                    2536,
                    493,
                    2551,
                    2554,
                    508,
                    509,
                    2556,
                    2561,
                    2564,
                    2566,
                    2567,
                    520,
                    521,
                    522,
                    2569,
                    2571,
                    2572,
                    2578,
                    531,
                    532,
                    533,
                    2579,
                    2582,
                    2584,
                    2585,
                    2589,
                    2590,
                    2591,
                    2593,
                    2595,
                    551,
                    2600,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    2614,
                    2615,
                    571,
                    573,
                    2622,
                    576,
                    577,
                    578,
                    2625,
                    581,
                    2633,
                    587,
                    2636,
                    589,
                    591,
                    593,
                    595,
                    2644,
                    599,
                    600,
                    2647,
                    2650,
                    606,
                    608,
                    2656,
                    610,
                    2666,
                    2667,
                    625,
                    630,
                    2681,
                    635,
                    636,
                    641,
                    643,
                    644,
                    645,
                    646,
                    2706,
                    662,
                    665,
                    2715,
                    668,
                    2717,
                    693,
                    695,
                    2760,
                    2762,
                    719,
                    721,
                    738,
                    741,
                    744,
                    2816,
                    769,
                    2817,
                    771,
                    795,
                    797,
                    801,
                    803,
                    804,
                    2871,
                    2873,
                    2874,
                    827,
                    829,
                    831,
                    832,
                    853,
                    856,
                    857,
                    868,
                    873,
                    882,
                    894,
                    895,
                    2945,
                    901,
                    2952,
                    905,
                    907,
                    909,
                    911,
                    2960,
                    2961,
                    2969,
                    2970,
                    2984,
                    945,
                    2998,
                    953,
                    954,
                    958,
                    959,
                    961,
                    962,
                    3010,
                    964,
                    967,
                    968,
                    970,
                    973,
                    974,
                    975,
                    976,
                    977,
                    978,
                    980,
                    982,
                    986,
                    987,
                    988,
                    989,
                    990,
                    991,
                    992,
                    3038,
                    994,
                    996,
                    3045,
                    3047,
                    1001,
                    3049,
                    1004,
                    3052,
                    1006,
                    1007,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012,
                    1013,
                    1014,
                    3054,
                    1016,
                    1017,
                    1019,
                    1020,
                    1021,
                    1022,
                    1023,
                    1024,
                    1025,
                    1026,
                    1027,
                    1028,
                    1029,
                    1030,
                    1031,
                    3077,
                    1033,
                    1034,
                    1040,
                    1046,
                    1051,
                    1060,
                    1062,
                    1064,
                    1065,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1077,
                    1079,
                    1080,
                    1082,
                    1083,
                    1084,
                    1085,
                    1086,
                    1088,
                    1089,
                    1090,
                    1092,
                    1096,
                    1100,
                    1111,
                    1112,
                    1113,
                    1121,
                    1123,
                    1124,
                    1125,
                    3175,
                    3176,
                    3177,
                    3182,
                    3188,
                    3191,
                    3208,
                    3209,
                    3211,
                    3213,
                    3216,
                    3218,
                    3219,
                    3220,
                    3222,
                    3224,
                    3235,
                    1199,
                    1200,
                    1203,
                    3263,
                    3264,
                    3268,
                    3272,
                    3287,
                    3288,
                    3300,
                    1262,
                    3311,
                    1268,
                    1269,
                    1271,
                    1277,
                    1278,
                    1281,
                    1282,
                    1285,
                    3333,
                    3366,
                    1320,
                    1321,
                    3368,
                    1323,
                    3381,
                    1334,
                    1347,
                    3395,
                    3407,
                    3435,
                    3442,
                    1396,
                    1397,
                    3444,
                    1399,
                    3446,
                    3449,
                    1403,
                    3451,
                    1414,
                    1416,
                    3474,
                    1430,
                    1431,
                    1463,
                    1465,
                    1468,
                    1474,
                    1477,
                    1478,
                    1481,
                    1484,
                    1491,
                    1493,
                    1494,
                    1495,
                    1496,
                    3554,
                    3555,
                    3556,
                    1509,
                    3561,
                    3567,
                    3570,
                    1525,
                    1526,
                    3588,
                    3589,
                    3591,
                    3593,
                    1547,
                    3596,
                    3598,
                    3599,
                    1552,
                    3600,
                    3602,
                    3604,
                    3615,
                    3643,
                    3644,
                    3648,
                    3652,
                    1618,
                    3667,
                    1620,
                    1627,
                    1628,
                    1629,
                    3679,
                    1632,
                    1634,
                    1635,
                    1637,
                    1638,
                    1640,
                    1641,
                    1642,
                    3690,
                    1644,
                    1645,
                    1646,
                    1647,
                    1649,
                    1651,
                    3712,
                    1681,
                    1682,
                    1687,
                    1691,
                    1695,
                    3745,
                    1699,
                    1703,
                    1707,
                    1711,
                    3759,
                    1715,
                    1719,
                    3770,
                    1723,
                    3779,
                    3780,
                    1735,
                    1737,
                    1740,
                    3789,
                    3790,
                    1747,
                    3797,
                    3801,
                    1758,
                    1759,
                    1760,
                    1761,
                    3811,
                    1776,
                    1777,
                    1778,
                    1779,
                    1780,
                    1781,
                    3825,
                    3826,
                    1794,
                    1797,
                    1798,
                    1799,
                    3846,
                    1808,
                    1809,
                    1810,
                    1811,
                    3856,
                    1814,
                    3862,
                    1819,
                    1820,
                    1822,
                    3872,
                    1829,
                    1831,
                    1832,
                    1833,
                    1834,
                    1839,
                    3888,
                    3889,
                    1845,
                    1847,
                    1849,
                    1851,
                    1852,
                    1853,
                    1854,
                    3905,
                    3906,
                    1861,
                    1862,
                    1863,
                    1864,
                    1877,
                    1880,
                    1883,
                    1888,
                    3944,
                    3945,
                    1904,
                    1905,
                    1906,
                    1909,
                    1915,
                    3963,
                    1917,
                    1918,
                    1919,
                    1920,
                    1939,
                    3988,
                    1941,
                    1945,
                    1946,
                    1953,
                    1954,
                    1955,
                    1956,
                    1965,
                    1966,
                    1967,
                    1976,
                    1977,
                    4037,
                    4039,
                    1992,
                    1993,
                    1994,
                    4041,
                    1996,
                    4042,
                    1998,
                    4044,
                    2000,
                    2002,
                    2004,
                    4052,
                    2006,
                    4062,
                    4064,
                    4066,
                    4067,
                    2029,
                    2031,
                    4085,
                    4086,
                    4087,
                    4088,
                    4089,
                    2042
                ],
                "axes": [
                    130,
                    1396,
                    1268,
                    1271,
                    1400,
                    1273,
                    1399
                ],
                "self.command": [
                    136,
                    131,
                    352,
                    159
                ],
                "command": [
                    131
                ],
                "self.set_prop_cycle": [
                    140,
                    132
                ],
                "self.__dict__": [
                    139,
                    532
                ],
                "state.copy": [
                    139
                ],
                "state": [
                    514,
                    516,
                    521,
                    523,
                    139,
                    529,
                    532
                ],
                "args": [
                    144,
                    147,
                    161,
                    167,
                    168,
                    1191,
                    170,
                    1195,
                    1198,
                    180,
                    184,
                    186,
                    197,
                    1610,
                    1611,
                    206,
                    207,
                    211,
                    212,
                    213,
                    214,
                    215,
                    4340,
                    1657,
                    1658,
                    1663
                ],
                "kwargs": [
                    2050,
                    2947,
                    1671,
                    264,
                    1672,
                    1673,
                    1674,
                    2058,
                    2059,
                    2062,
                    144,
                    147,
                    1683,
                    277,
                    2070,
                    2072,
                    2073,
                    154,
                    2074,
                    157,
                    3744,
                    3746,
                    165,
                    3365,
                    1191,
                    3367,
                    301,
                    1198,
                    305,
                    307,
                    2871,
                    441,
                    2873,
                    3645,
                    3265,
                    2756,
                    2760,
                    2940,
                    2762,
                    204,
                    205,
                    468,
                    216,
                    355,
                    363,
                    4338,
                    4340,
                    252
                ],
                "prop_cycler": [
                    145,
                    147,
                    149,
                    151
                ],
                "cycler": [
                    147,
                    1198
                ],
                "self.prop_cycler": [
                    235,
                    149,
                    222
                ],
                "itertools.cycle": [
                    149
                ],
                "itertools": [
                    149
                ],
                "self._prop_keys": [
                    231,
                    220,
                    151
                ],
                "prop_cycler.keys": [
                    151
                ],
                "self.axes._process_unit_info": [
                    154
                ],
                "pos_only": [
                    156,
                    157,
                    159
                ],
                "data": [
                    2052,
                    165,
                    166,
                    2055,
                    167,
                    2068,
                    2069
                ],
                "kwargs.pop": [
                    165,
                    1671,
                    1672,
                    1673,
                    1674,
                    2059,
                    2062
                ],
                "replaced": [
                    184,
                    207,
                    206,
                    167
                ],
                "mpl._replacer": [
                    167
                ],
                "mpl": [
                    205,
                    1734,
                    167
                ],
                "arg": [
                    167
                ],
                "label_namer_idx": [
                    194,
                    196,
                    198,
                    169,
                    206,
                    182
                ],
                "_process_plot_format": [
                    312,
                    180
                ],
                "cbook._warn_external": [
                    3584,
                    3193,
                    3205,
                    4167,
                    3979,
                    3572,
                    2263,
                    185,
                    3578,
                    3199
                ],
                "cbook": [
                    3584,
                    2818,
                    3205,
                    3979,
                    1421,
                    1684,
                    1695,
                    1699,
                    1318,
                    185,
                    2758,
                    4167,
                    968,
                    3578,
                    2263,
                    1624,
                    3199,
                    360,
                    1258,
                    1259,
                    1262,
                    370,
                    371,
                    372,
                    3572,
                    3193,
                    2938,
                    1659,
                    2815
                ],
                "kwargs.get": [
                    441,
                    305,
                    355,
                    204
                ],
                "mpl._label_from_arg": [
                    205
                ],
                "this": [
                    216,
                    212,
                    214
                ],
                "self._plot_args": [
                    216
                ],
                "prop_keys": [
                    232,
                    231
                ],
                "ignore": [
                    236,
                    231
                ],
                "kw.get": [
                    232,
                    248,
                    294
                ],
                "kw": [
                    355,
                    324,
                    294,
                    263,
                    232,
                    328,
                    363,
                    286,
                    306,
                    248,
                    249,
                    285,
                    252,
                    253,
                    254,
                    255
                ],
                "k": [
                    2816,
                    325,
                    232,
                    328,
                    2478,
                    2479,
                    2480,
                    277,
                    247,
                    248,
                    249,
                    279
                ],
                "default_dict": [
                    297,
                    235,
                    237,
                    301,
                    239,
                    240,
                    285,
                    253,
                    254,
                    286
                ],
                "copy": [
                    235
                ],
                "p": [
                    1920,
                    1921,
                    4145,
                    4146,
                    4147,
                    4152,
                    4161,
                    4162,
                    4165,
                    4172,
                    2000,
                    2001,
                    2002,
                    236,
                    237,
                    1915,
                    1916,
                    1917,
                    1918,
                    1919
                ],
                "default_dict.pop": [
                    297,
                    237
                ],
                "defaults": [
                    249,
                    247
                ],
                "self._getdefaults": [
                    285,
                    253
                ],
                "self._setdefaults": [
                    301,
                    254,
                    286
                ],
                "seg": [
                    256,
                    303,
                    307,
                    308,
                    255
                ],
                "mlines.Line2D": [
                    255
                ],
                "x": [
                    260,
                    3985,
                    3989,
                    3995,
                    3996,
                    3998,
                    4004,
                    4005,
                    4007,
                    303,
                    4146,
                    2497,
                    3780,
                    2375,
                    2250,
                    331,
                    2506,
                    2508,
                    334,
                    2254,
                    2256,
                    337,
                    3794,
                    341,
                    2261,
                    343,
                    344,
                    3797,
                    2266,
                    346,
                    347,
                    348,
                    2267,
                    2272,
                    2532,
                    358,
                    2538,
                    363,
                    2543,
                    2544,
                    2424,
                    4090,
                    255
                ],
                "y": [
                    261,
                    3985,
                    3989,
                    303,
                    4017,
                    4018,
                    4147,
                    4020,
                    4026,
                    4027,
                    4029,
                    2497,
                    2498,
                    2501,
                    2376,
                    2250,
                    332,
                    334,
                    2254,
                    2256,
                    3790,
                    339,
                    341,
                    2261,
                    343,
                    344,
                    3798,
                    346,
                    3801,
                    2268,
                    349,
                    350,
                    2269,
                    2272,
                    2531,
                    2532,
                    358,
                    2536,
                    2538,
                    363,
                    4091,
                    255
                ],
                "self.axes.convert_xunits": [
                    260
                ],
                "self.axes.convert_yunits": [
                    261
                ],
                "kw.copy": [
                    263
                ],
                "kwargs.copy": [
                    264
                ],
                "ignores": [
                    274,
                    285,
                    279
                ],
                "v": [
                    2816,
                    321,
                    325,
                    327,
                    328,
                    2478,
                    2479,
                    2480,
                    277,
                    278
                ],
                "kwargs.items": [
                    277
                ],
                "ignores.add": [
                    279
                ],
                "facecolor": [
                    448,
                    449,
                    294,
                    304,
                    447
                ],
                "mpatches.Polygon": [
                    303
                ],
                "mpatches": [
                    928,
                    1933,
                    303
                ],
                "np.column_stack": [
                    303
                ],
                "np": [
                    2440,
                    3092,
                    303,
                    4160,
                    4161,
                    2498,
                    2375,
                    2376,
                    4172,
                    4045,
                    4053,
                    3543,
                    2391,
                    3035,
                    3164,
                    2396,
                    348,
                    350,
                    2399,
                    4321,
                    4327,
                    3432,
                    2409,
                    2026,
                    4328,
                    2412,
                    1648
                ],
                "seg.set": [
                    307
                ],
                "tup": [
                    321,
                    330,
                    331,
                    332,
                    334,
                    311,
                    312,
                    313,
                    314
                ],
                "_check_1d": [
                    331,
                    332
                ],
                "index_of": [
                    334
                ],
                "self.axes.xaxis": [
                    336,
                    337
                ],
                "self.axes.xaxis.update_units": [
                    337
                ],
                "self.axes.yaxis": [
                    338,
                    339
                ],
                "self.axes.yaxis.update_units": [
                    339
                ],
                "x.shape": [
                    346,
                    341,
                    358,
                    343
                ],
                "y.shape": [
                    346,
                    341,
                    358,
                    343
                ],
                "x.ndim": [
                    344,
                    347
                ],
                "y.ndim": [
                    344,
                    349
                ],
                "np.newaxis": [
                    348,
                    350
                ],
                "func": [
                    353,
                    363,
                    356
                ],
                "self._makeline": [
                    353
                ],
                "self._makefill": [
                    356
                ],
                "ncx": [
                    363,
                    364,
                    358,
                    359
                ],
                "ncy": [
                    363,
                    364,
                    358,
                    359
                ],
                "cbook.warn_deprecated": [
                    360,
                    1659,
                    1624,
                    1684
                ],
                "j": [
                    363,
                    364
                ],
                "martist.Artist": [
                    418,
                    571,
                    367
                ],
                "martist": [
                    418,
                    1795,
                    367,
                    2547,
                    571
                ],
                "name": [
                    368,
                    964
                ],
                "_shared_x_axes": [
                    370
                ],
                "cbook.Grouper": [
                    370,
                    371,
                    372
                ],
                "_shared_y_axes": [
                    371
                ],
                "_twinned_axes": [
                    372
                ],
                "self._position.bounds": [
                    376
                ],
                "self._position": [
                    832,
                    420,
                    422,
                    423,
                    425,
                    376,
                    573
                ],
                "martist.Artist.__init__": [
                    418
                ],
                "rect": [
                    419,
                    420,
                    422
                ],
                "mtransforms.Bbox": [
                    576,
                    577,
                    419,
                    867,
                    4164,
                    422,
                    1993,
                    4330,
                    1392,
                    1394,
                    2042,
                    4319
                ],
                "mtransforms": [
                    770,
                    643,
                    645,
                    796,
                    802,
                    419,
                    422,
                    694,
                    573,
                    576,
                    577,
                    578,
                    579,
                    4164,
                    1993,
                    720,
                    4319,
                    1121,
                    866,
                    867,
                    2406,
                    2410,
                    4330,
                    2414,
                    1392,
                    625,
                    1394,
                    630,
                    631,
                    2042,
                    635,
                    636
                ],
                "mtransforms.Bbox.from_bounds": [
                    867,
                    422
                ],
                "self._position.width": [
                    423
                ],
                "self._position.height": [
                    423
                ],
                "self._originalPosition": [
                    425,
                    827
                ],
                "self._position.frozen": [
                    832,
                    425
                ],
                "self._aspect": [
                    427,
                    1203
                ],
                "self._adjustable": [
                    1477,
                    1285,
                    428,
                    1277
                ],
                "self._anchor": [
                    1347,
                    429
                ],
                "self._stale_viewlim_x": [
                    608,
                    430
                ],
                "self._stale_viewlim_y": [
                    610,
                    431
                ],
                "self._sharex": [
                    970,
                    973,
                    974,
                    975,
                    432,
                    977,
                    978,
                    1006,
                    1084
                ],
                "sharex": [
                    432,
                    434,
                    435
                ],
                "self._sharey": [
                    992,
                    1088,
                    1008,
                    433,
                    986,
                    987,
                    988,
                    989,
                    991
                ],
                "sharey": [
                    433,
                    436,
                    437
                ],
                "self._shared_x_axes.join": [
                    435
                ],
                "self._shared_x_axes": [
                    1320,
                    587,
                    591,
                    3218,
                    435,
                    1268,
                    1396,
                    1525,
                    4407,
                    2456,
                    1082
                ],
                "self._shared_y_axes.join": [
                    437
                ],
                "self._shared_y_axes": [
                    1321,
                    589,
                    3598,
                    593,
                    4411,
                    2459,
                    437,
                    1269,
                    1397,
                    1526,
                    1083
                ],
                "self.set_label": [
                    438
                ],
                "label": [
                    1963,
                    1964,
                    1806,
                    1807,
                    438
                ],
                "self.set_figure": [
                    439
                ],
                "fig": [
                    571,
                    574,
                    439
                ],
                "self.set_axes_locator": [
                    441
                ],
                "self.spines": [
                    4224,
                    964,
                    741,
                    744,
                    4187,
                    556,
                    557,
                    559,
                    560,
                    2579,
                    665,
                    443,
                    668
                ],
                "self._gen_axes_spines": [
                    443
                ],
                "self._init_axis": [
                    446
                ],
                "self._facecolor": [
                    1072,
                    449,
                    1111
                ],
                "self._frameon": [
                    2656,
                    450,
                    2666,
                    2578,
                    2614,
                    4222
                ],
                "frameon": [
                    450
                ],
                "self.set_axisbelow": [
                    451
                ],
                "self._rasterization_zorder": [
                    2288,
                    2600,
                    2283,
                    453
                ],
                "self.cla": [
                    1096,
                    454
                ],
                "self.fmt_xdata": [
                    457,
                    3779
                ],
                "self.fmt_ydata": [
                    458,
                    3789
                ],
                "self.set_navigate": [
                    460
                ],
                "self.set_navigate_mode": [
                    461
                ],
                "xscale": [
                    464,
                    463
                ],
                "self.set_xscale": [
                    464
                ],
                "yscale": [
                    465,
                    466
                ],
                "self.set_yscale": [
                    466
                ],
                "self.update": [
                    468
                ],
                "self.xaxis": [
                    2945,
                    3333,
                    1414,
                    3208,
                    3209,
                    2072,
                    2457,
                    2463,
                    803,
                    3235,
                    3366,
                    1703,
                    2984,
                    555,
                    556,
                    557,
                    1707,
                    1711,
                    3759,
                    4400,
                    2998,
                    1079,
                    2871,
                    1085,
                    958,
                    4287,
                    961,
                    3780,
                    2760,
                    3272,
                    973,
                    974,
                    978,
                    980,
                    1493,
                    470,
                    471,
                    3287,
                    3811,
                    3300,
                    1001,
                    3311,
                    3825
                ],
                "self._xcid": [
                    471
                ],
                "self.xaxis.callbacks.connect": [
                    471
                ],
                "self.xaxis.callbacks": [
                    471
                ],
                "self._on_units_changed": [
                    472,
                    476
                ],
                "self.yaxis": [
                    3712,
                    3588,
                    3589,
                    1416,
                    2952,
                    4371,
                    2073,
                    2460,
                    2463,
                    3615,
                    3745,
                    803,
                    558,
                    559,
                    560,
                    1715,
                    3381,
                    1719,
                    1080,
                    2873,
                    3770,
                    1723,
                    959,
                    1089,
                    962,
                    3395,
                    3652,
                    4291,
                    2762,
                    3790,
                    3667,
                    1494,
                    474,
                    987,
                    475,
                    988,
                    3679,
                    992,
                    994,
                    3811,
                    3690,
                    1004,
                    3826
                ],
                "self._ycid": [
                    475
                ],
                "self.yaxis.callbacks.connect": [
                    475
                ],
                "self.yaxis.callbacks": [
                    475
                ],
                "self.tick_params": [
                    493,
                    478
                ],
                "self._layoutbox": [
                    856,
                    508
                ],
                "self._poslayoutbox": [
                    857,
                    509
                ],
                "__getstate__": [
                    514
                ],
                "key": [
                    4130,
                    515,
                    516,
                    4132,
                    4134,
                    4157,
                    4151,
                    4125
                ],
                "grouper_name": [
                    518,
                    520,
                    521,
                    527,
                    529,
                    531
                ],
                "grouper": [
                    520,
                    521,
                    522
                ],
                "grouper.get_siblings": [
                    521
                ],
                "siblings": [
                    529,
                    530,
                    531
                ],
                "state.pop": [
                    529
                ],
                "join": [
                    1394,
                    531
                ],
                "self._stale": [
                    2561,
                    533
                ],
                "self.bbox": [
                    551,
                    625,
                    4089,
                    4155,
                    4156,
                    573
                ],
                "maxis.XAxis": [
                    555
                ],
                "maxis": [
                    555,
                    558
                ],
                "register_axis": [
                    560,
                    556,
                    557,
                    559
                ],
                "maxis.YAxis": [
                    558
                ],
                "self._update_transScale": [
                    561,
                    1014
                ],
                "martist.Artist.set_figure": [
                    571
                ],
                "mtransforms.TransformedBbox": [
                    636,
                    573
                ],
                "fig.transFigure": [
                    574
                ],
                "self.dataLim": [
                    576,
                    1509,
                    1992,
                    1993,
                    2029,
                    1905,
                    2042
                ],
                "mtransforms.Bbox.null": [
                    576,
                    1993
                ],
                "self._viewLim": [
                    577,
                    3591,
                    3211,
                    600,
                    636
                ],
                "mtransforms.Bbox.unit": [
                    577
                ],
                "self.transScale": [
                    641,
                    578,
                    801,
                    630,
                    636
                ],
                "mtransforms.TransformWrapper": [
                    578,
                    630
                ],
                "mtransforms.IdentityTransform": [
                    579,
                    631
                ],
                "self._set_lim_and_transforms": [
                    581
                ],
                "scalex": [
                    2370,
                    2329,
                    586,
                    2314,
                    2317,
                    590,
                    2321,
                    595,
                    2325,
                    2456,
                    1977,
                    607
                ],
                "ax._stale_viewlim_x": [
                    592,
                    586
                ],
                "ax": [
                    1794,
                    1795,
                    1797,
                    1798,
                    1800,
                    1401,
                    1325,
                    1327,
                    1332,
                    1333,
                    3644,
                    3645,
                    3646,
                    3647,
                    3264,
                    3265,
                    3266,
                    3267,
                    586,
                    587,
                    588,
                    589,
                    591,
                    592,
                    593,
                    594,
                    2512,
                    2513,
                    2389,
                    2514,
                    2517,
                    2519,
                    2520,
                    2522,
                    2523,
                    2524,
                    2525,
                    2527,
                    3811,
                    868,
                    3812,
                    870,
                    3814,
                    872,
                    3815,
                    2410,
                    3817,
                    3818,
                    3821,
                    2415,
                    882,
                    883,
                    884,
                    1400,
                    1273,
                    1274
                ],
                "self._shared_x_axes.get_siblings": [
                    1320,
                    587,
                    591,
                    3218,
                    1396,
                    1268
                ],
                "scaley": [
                    609,
                    2371,
                    2329,
                    2315,
                    588,
                    590,
                    2318,
                    595,
                    2324,
                    2327,
                    1977,
                    2459
                ],
                "ax._stale_viewlim_y": [
                    594,
                    588
                ],
                "self._shared_y_axes.get_siblings": [
                    1321,
                    589,
                    3598,
                    593,
                    1397,
                    1269
                ],
                "self.autoscale_view": [
                    1637,
                    595,
                    1640,
                    1629
                ],
                "self._unstale_viewLim": [
                    1819,
                    2556,
                    599
                ],
                "tight": [
                    2272,
                    2366,
                    2325,
                    2262,
                    2263,
                    2329,
                    2874,
                    2327,
                    605,
                    606,
                    2367
                ],
                "self._tight": [
                    2450,
                    1012,
                    606,
                    2367
                ],
                "self.transAxes": [
                    641,
                    2531,
                    644,
                    1125,
                    646,
                    2536,
                    625,
                    1075
                ],
                "mtransforms.BboxTransformTo": [
                    625
                ],
                "self.transLimits": [
                    641,
                    635
                ],
                "mtransforms.BboxTransformFrom": [
                    635
                ],
                "self.transData": [
                    1888,
                    641,
                    3963,
                    644,
                    646,
                    907,
                    4088,
                    1904,
                    1939,
                    3988,
                    1877,
                    1941,
                    4087,
                    1880,
                    1945,
                    1883,
                    1820
                ],
                "self._xaxis_transform": [
                    643,
                    662
                ],
                "mtransforms.blended_transform_factory": [
                    802,
                    643,
                    645
                ],
                "self._yaxis_transform": [
                    738,
                    645
                ],
                "which": [
                    3712,
                    737,
                    739,
                    869,
                    742,
                    871,
                    2760,
                    3333,
                    2762,
                    661,
                    853,
                    663,
                    666
                ],
                "get_spine_transform": [
                    744,
                    665,
                    668,
                    741
                ],
                "labels_align": [
                    768,
                    772,
                    718,
                    722,
                    692,
                    696,
                    794,
                    798
                ],
                "self.get_xaxis_transform": [
                    693,
                    719
                ],
                "mtransforms.ScaledTranslation": [
                    1121,
                    770,
                    720,
                    694,
                    796
                ],
                "pad_points": [
                    720,
                    770,
                    796,
                    694
                ],
                "self.figure.dpi_scale_trans": [
                    771,
                    1123,
                    721,
                    695,
                    797
                ],
                "self.figure": [
                    2593,
                    771,
                    1123,
                    2551,
                    2647,
                    905,
                    2633,
                    2636,
                    1071,
                    721,
                    3602,
                    2644,
                    4340,
                    3222,
                    695,
                    2650,
                    797
                ],
                "self.get_yaxis_transform": [
                    769,
                    795
                ],
                "self.transScale.set": [
                    801
                ],
                "self.xaxis.get_transform": [
                    803,
                    1493,
                    1414
                ],
                "self.yaxis.get_transform": [
                    1416,
                    803,
                    1494
                ],
                "line": [
                    1889,
                    804,
                    806,
                    1996,
                    1997,
                    1998,
                    1871,
                    1875,
                    1845,
                    1846,
                    1847,
                    1849,
                    1850,
                    1851,
                    1852,
                    1853,
                    1855
                ],
                "line._transformed_path.invalidate": [
                    806
                ],
                "line._transformed_path": [
                    806
                ],
                "original": [
                    826
                ],
                "self._originalPosition.frozen": [
                    827
                ],
                "locator": [
                    4281,
                    2564,
                    2565,
                    2566,
                    830,
                    2418,
                    2419,
                    2451,
                    2514,
                    2515,
                    2516,
                    4280,
                    4279,
                    829,
                    894
                ],
                "self.get_axes_locator": [
                    2564,
                    829,
                    4279
                ],
                "self.apply_aspect": [
                    2567,
                    2569,
                    4282,
                    4284,
                    831
                ],
                "self._set_position": [
                    1484,
                    1468,
                    853,
                    1491
                ],
                "pos": [
                    866,
                    867,
                    870,
                    2566,
                    872,
                    2567,
                    883,
                    884,
                    853,
                    2516,
                    2517,
                    4281,
                    4282
                ],
                "mtransforms.BboxBase": [
                    2410,
                    866,
                    2414,
                    2406
                ],
                "self._twinned_axes.get_siblings": [
                    882,
                    868,
                    2510
                ],
                "self._twinned_axes": [
                    868,
                    1478,
                    2510,
                    882,
                    4343
                ],
                "ax._position.set": [
                    870
                ],
                "ax._position": [
                    870
                ],
                "ax._originalPosition.set": [
                    872
                ],
                "ax._originalPosition": [
                    872
                ],
                "self.stale": [
                    1282,
                    1799,
                    2961,
                    2196,
                    3604,
                    3224,
                    2970,
                    2717,
                    1822,
                    3368,
                    1834,
                    1334,
                    1854,
                    2625,
                    1092,
                    1864,
                    1112,
                    3288,
                    873,
                    2667,
                    2284,
                    1781,
                    1403,
                    2174,
                    895
                ],
                "ax.get_position": [
                    883
                ],
                "ax.set_position": [
                    884
                ],
                "self._axes_locator": [
                    901,
                    894
                ],
                "a.set_figure": [
                    905
                ],
                "a": [
                    905,
                    906,
                    907,
                    909,
                    910,
                    911,
                    2594,
                    2595,
                    2605,
                    2606,
                    2607,
                    2608,
                    2618,
                    2619,
                    2636,
                    4313,
                    4317,
                    4325,
                    1776,
                    1777,
                    1778,
                    1779,
                    1780,
                    1782
                ],
                "a.is_transform_set": [
                    906
                ],
                "a.set_transform": [
                    907
                ],
                "a.axes": [
                    1776,
                    909
                ],
                "a.mouseover": [
                    910
                ],
                "self._mouseover_set.add": [
                    911
                ],
                "self._mouseover_set": [
                    1026,
                    911
                ],
                "mpatches.Rectangle": [
                    928,
                    1933
                ],
                "OrderedDict": [
                    945
                ],
                "side": [
                    945,
                    946
                ],
                "mspines.Spine.linear_spine": [
                    945
                ],
                "mspines.Spine": [
                    945
                ],
                "mspines": [
                    945
                ],
                "patch_visible": [
                    954,
                    956,
                    1090,
                    1086
                ],
                "self.patch.get_visible": [
                    954
                ],
                "self.patch": [
                    2572,
                    1814,
                    2081,
                    1955,
                    1070,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1847,
                    1079,
                    1080,
                    954,
                    2615,
                    1086,
                    1090,
                    1100,
                    1113,
                    4194,
                    4202,
                    4209,
                    1780,
                    1917
                ],
                "xaxis_visible": [
                    1085,
                    958
                ],
                "self.xaxis.get_visible": [
                    958
                ],
                "yaxis_visible": [
                    1089,
                    959
                ],
                "self.yaxis.get_visible": [
                    959
                ],
                "self.xaxis.cla": [
                    961
                ],
                "self.yaxis.cla": [
                    962
                ],
                "spine": [
                    4224,
                    4225,
                    964,
                    965,
                    2579,
                    2580
                ],
                "self.spines.items": [
                    964
                ],
                "spine.cla": [
                    965
                ],
                "self.ignore_existing_data_limits": [
                    967,
                    1994,
                    2029,
                    2031,
                    1906,
                    1909
                ],
                "self.callbacks": [
                    968,
                    3596,
                    3216
                ],
                "cbook.CallbackRegistry": [
                    968
                ],
                "self.xaxis.major": [
                    973
                ],
                "self._sharex.xaxis.major": [
                    973
                ],
                "self._sharex.xaxis": [
                    978,
                    973,
                    974
                ],
                "self.xaxis.minor": [
                    974
                ],
                "self._sharex.xaxis.minor": [
                    974
                ],
                "x0": [
                    2437,
                    2438,
                    2442,
                    1550,
                    2446,
                    1552,
                    2451,
                    2452,
                    3992,
                    3996,
                    3998,
                    3999,
                    4000,
                    4005,
                    4007,
                    4008,
                    4009,
                    4037,
                    4041,
                    4045,
                    4046,
                    975,
                    976,
                    4047,
                    4049,
                    4050,
                    4051,
                    1510,
                    1512,
                    2417,
                    2419,
                    2426
                ],
                "x1": [
                    2437,
                    2438,
                    2442,
                    1551,
                    1552,
                    2448,
                    2451,
                    2452,
                    3992,
                    3996,
                    3998,
                    4001,
                    4002,
                    4005,
                    4007,
                    4010,
                    4011,
                    4037,
                    4041,
                    4045,
                    975,
                    976,
                    4049,
                    1510,
                    1512,
                    2417,
                    2419,
                    2429
                ],
                "self._sharex.get_xlim": [
                    975
                ],
                "self.set_xlim": [
                    3905,
                    4066,
                    4037,
                    3047,
                    3049,
                    4041,
                    3052,
                    3054,
                    976,
                    1649,
                    1681,
                    4176,
                    982,
                    4062
                ],
                "self._sharex.get_autoscalex_on": [
                    977
                ],
                "self.xaxis._scale": [
                    978
                ],
                "self._sharex.xaxis._scale": [
                    978
                ],
                "self.xaxis._set_scale": [
                    980
                ],
                "self.yaxis.major": [
                    987
                ],
                "self._sharey.yaxis.major": [
                    987
                ],
                "self._sharey.yaxis": [
                    992,
                    987,
                    988
                ],
                "self.yaxis.minor": [
                    988
                ],
                "self._sharey.yaxis.minor": [
                    988
                ],
                "y0": [
                    1545,
                    1547,
                    4014,
                    4018,
                    4020,
                    4021,
                    4022,
                    4027,
                    4029,
                    4030,
                    4031,
                    4039,
                    4042,
                    4053,
                    4054,
                    4055,
                    4057,
                    4058,
                    4059,
                    989,
                    990,
                    1511,
                    1513
                ],
                "y1": [
                    1546,
                    1547,
                    4014,
                    4018,
                    4020,
                    4023,
                    4024,
                    4027,
                    4029,
                    4032,
                    4033,
                    4039,
                    4042,
                    4053,
                    4057,
                    989,
                    990,
                    1511,
                    1513
                ],
                "self._sharey.get_ylim": [
                    989
                ],
                "self.set_ylim": [
                    4064,
                    3906,
                    4067,
                    996,
                    4039,
                    4042,
                    4177,
                    1682,
                    1651,
                    3444,
                    3446,
                    3449,
                    3451,
                    990
                ],
                "self._sharey.get_autoscaley_on": [
                    991
                ],
                "self.yaxis._scale": [
                    992
                ],
                "self._sharey.yaxis._scale": [
                    992
                ],
                "self.yaxis._set_scale": [
                    994
                ],
                "self.xaxis.set_minor_locator": [
                    1001,
                    3825
                ],
                "mticker.AutoMinorLocator": [
                    1001,
                    1004,
                    3821
                ],
                "mticker": [
                    3815,
                    1001,
                    3819,
                    1004,
                    3821,
                    3825,
                    3826
                ],
                "self.yaxis.set_minor_locator": [
                    3826,
                    1004
                ],
                "self._autoscaleXon": [
                    2370,
                    2087,
                    2120,
                    2093,
                    3213,
                    1007,
                    2320,
                    2321,
                    2456,
                    2109
                ],
                "self._autoscaleYon": [
                    2371,
                    2087,
                    3593,
                    1009,
                    2130,
                    2099,
                    2323,
                    2324,
                    2459,
                    2110
                ],
                "self._xmargin": [
                    2370,
                    1010,
                    2326,
                    2264,
                    2457,
                    2173
                ],
                "self._ymargin": [
                    2328,
                    2371,
                    1011,
                    2195,
                    2264,
                    2460
                ],
                "self._use_sticky_edges": [
                    2147,
                    1013,
                    2151
                ],
                "self._get_lines": [
                    1016,
                    1199
                ],
                "_process_plot_var_args": [
                    1016,
                    1017
                ],
                "self._get_patches_for_fill": [
                    1200,
                    1017
                ],
                "self._gridOn": [
                    1034,
                    1019
                ],
                "self.lines": [
                    1760,
                    1699,
                    1852,
                    1996,
                    4184,
                    1851,
                    1020,
                    1853
                ],
                "self.patches": [
                    1920,
                    1761,
                    2000,
                    4183,
                    1021,
                    1919
                ],
                "self.texts": [
                    4185,
                    1862,
                    1022,
                    1863
                ],
                "self.tables": [
                    1954,
                    1956,
                    4190,
                    1023
                ],
                "self.artists": [
                    1024,
                    1777,
                    1778,
                    4186
                ],
                "self.images": [
                    1025,
                    2595,
                    1831,
                    1832,
                    1737,
                    1833,
                    1695,
                    2004,
                    4191,
                    1759
                ],
                "_OrderedSet": [
                    1026
                ],
                "self.child_axes": [
                    4192,
                    1027,
                    1797,
                    1798,
                    2512
                ],
                "self._current_image": [
                    1740,
                    1028,
                    1747
                ],
                "self.legend_": [
                    4193,
                    1691,
                    1029
                ],
                "self.collections": [
                    1030,
                    1735,
                    1737,
                    1808,
                    1809,
                    1810,
                    4182,
                    1758
                ],
                "self.containers": [
                    1967,
                    1965,
                    1966,
                    1031
                ],
                "self.grid": [
                    1033,
                    1034
                ],
                "props": [
                    1048,
                    1042,
                    1036,
                    1053
                ],
                "font_manager.FontProperties": [
                    1036
                ],
                "font_manager": [
                    1036
                ],
                "self.title": [
                    1124,
                    1064,
                    4300,
                    4301,
                    1040,
                    4189,
                    2589,
                    2493
                ],
                "mtext.Text": [
                    1040,
                    1051,
                    1046
                ],
                "mtext": [
                    1040,
                    1051,
                    1046
                ],
                "self._left_title": [
                    1124,
                    1064,
                    4302,
                    4303,
                    4189,
                    1046,
                    2493,
                    2590
                ],
                "props.copy": [
                    1048,
                    1053
                ],
                "self._right_title": [
                    1124,
                    1064,
                    4304,
                    4305,
                    4189,
                    1051,
                    2493,
                    2591
                ],
                "title_offset_points": [
                    1057,
                    1122,
                    1060
                ],
                "self._set_title_offset_trans": [
                    1060
                ],
                "self._autotitlepos": [
                    2499,
                    1062,
                    2503,
                    2489,
                    2495
                ],
                "_title": [
                    1124,
                    1125,
                    1126,
                    1064,
                    1065
                ],
                "self._set_artist_props": [
                    1953,
                    1829,
                    1861,
                    1065,
                    1811,
                    1779,
                    1845,
                    1915
                ],
                "self._gen_axes_patch": [
                    1070
                ],
                "self.patch.set_figure": [
                    1071
                ],
                "self.patch.set_facecolor": [
                    1072,
                    1113
                ],
                "self.patch.set_edgecolor": [
                    1073
                ],
                "self.patch.set_linewidth": [
                    1074
                ],
                "self.patch.set_transform": [
                    1075
                ],
                "self.set_axis_on": [
                    1618,
                    1077
                ],
                "self.xaxis.set_clip_path": [
                    1079
                ],
                "self.yaxis.set_clip_path": [
                    1080
                ],
                "self._shared_x_axes.clean": [
                    1082
                ],
                "self._shared_y_axes.clean": [
                    1083
                ],
                "self.xaxis.set_visible": [
                    1085
                ],
                "self.patch.set_visible": [
                    1090,
                    1086
                ],
                "self.yaxis.set_visible": [
                    1089
                ],
                "self.patch.get_facecolor": [
                    1100
                ],
                "get_fc": [
                    1101
                ],
                "get_facecolor": [
                    1101
                ],
                "set_fc": [
                    1114
                ],
                "set_facecolor": [
                    1114
                ],
                "self.titleOffsetTrans": [
                    1121,
                    1125
                ],
                "_title.set_transform": [
                    1125
                ],
                "_title.set_clip_box": [
                    1126
                ],
                "prop_cycle": [
                    1200,
                    1196,
                    1198,
                    1199
                ],
                "self._get_lines.set_prop_cycle": [
                    1199
                ],
                "self._get_patches_for_fill.set_prop_cycle": [
                    1200
                ],
                "cbook._str_equal": [
                    1258,
                    1259,
                    1262
                ],
                "aspect": [
                    1472,
                    1481,
                    1258,
                    1259,
                    1260,
                    1262,
                    1465,
                    1274,
                    1467,
                    1502,
                    1471
                ],
                "self.name": [
                    2060,
                    1262
                ],
                "share": [
                    1281,
                    1319,
                    1267,
                    1395,
                    1278
                ],
                "ax._aspect": [
                    1274
                ],
                "adjustable": [
                    1318,
                    1324,
                    1333,
                    1276,
                    1277,
                    1278
                ],
                "self.set_adjustable": [
                    4341,
                    1278
                ],
                "anchor": [
                    1280,
                    1281,
                    1392,
                    1401
                ],
                "self.set_anchor": [
                    1281
                ],
                "cbook._check_in_list": [
                    2938,
                    2758,
                    1318
                ],
                "axs": [
                    1320,
                    1323,
                    2510,
                    1327,
                    1332,
                    2520,
                    2522
                ],
                "ax.get_data_ratio": [
                    1325
                ],
                "_AxesBase.get_data_ratio": [
                    1326
                ],
                "_AxesBase": [
                    1326
                ],
                "ax._adjustable": [
                    1333
                ],
                "mtransforms.Bbox.coefs": [
                    1392,
                    1394
                ],
                "ax._anchor": [
                    1401
                ],
                "trf_xmin": [
                    1417,
                    1413
                ],
                "trf_xmax": [
                    1417,
                    1413
                ],
                "transform": [
                    2435,
                    2436,
                    2531,
                    1510,
                    1414,
                    1416,
                    1511,
                    2438,
                    1547,
                    2536,
                    1552,
                    1938
                ],
                "self.get_xbound": [
                    1430,
                    3038,
                    1414,
                    1495
                ],
                "trf_ymin": [
                    1418,
                    1415
                ],
                "trf_ymax": [
                    1418,
                    1415
                ],
                "self.get_ybound": [
                    1416,
                    3435,
                    1496,
                    1431
                ],
                "xsize": [
                    1504,
                    1417,
                    1419,
                    1497,
                    1515,
                    1517,
                    1433,
                    1436
                ],
                "ysize": [
                    1504,
                    1418,
                    1419,
                    1516,
                    1518,
                    1434,
                    1498,
                    1436
                ],
                "xmin": [
                    3968,
                    1665,
                    3970,
                    1671,
                    1676,
                    1549,
                    1681,
                    1430,
                    1433,
                    1838,
                    1839,
                    3888,
                    3890,
                    3904,
                    3905,
                    1495,
                    1497,
                    3166,
                    3169,
                    3964
                ],
                "xmax": [
                    3968,
                    1665,
                    3970,
                    1672,
                    1676,
                    1549,
                    1681,
                    1430,
                    1433,
                    1838,
                    1839,
                    3888,
                    3890,
                    3904,
                    3905,
                    1495,
                    1497,
                    3170,
                    3173,
                    3965
                ],
                "ymin": [
                    1665,
                    3969,
                    3971,
                    1544,
                    1673,
                    1679,
                    1682,
                    1431,
                    1434,
                    1838,
                    1839,
                    3889,
                    3890,
                    3904,
                    3906,
                    1496,
                    3545,
                    1498,
                    3548,
                    2530,
                    2535,
                    2537,
                    3964
                ],
                "ymax": [
                    1665,
                    3969,
                    3971,
                    1544,
                    1674,
                    1679,
                    1682,
                    1431,
                    1434,
                    1838,
                    1839,
                    3889,
                    3890,
                    3904,
                    3906,
                    1496,
                    1498,
                    3549,
                    3552,
                    2540,
                    2544,
                    3965
                ],
                "math.log10": [
                    1433,
                    1434
                ],
                "math": [
                    1433,
                    1434
                ],
                "cbook.deprecated": [
                    1421
                ],
                "position": [
                    1482,
                    1491,
                    1462,
                    1463,
                    1500,
                    1468
                ],
                "self.get_position": [
                    4340,
                    1463
                ],
                "self.get_aspect": [
                    1465,
                    4158
                ],
                "fig_width": [
                    1474,
                    1475
                ],
                "fig_height": [
                    1474,
                    1475
                ],
                "get_size_inches": [
                    1474
                ],
                "self.get_figure": [
                    1474
                ],
                "fig_aspect": [
                    1475,
                    1501,
                    1483
                ],
                "box_aspect": [
                    1481,
                    1483,
                    1501,
                    1502
                ],
                "self.get_data_ratio": [
                    1481
                ],
                "pb": [
                    1482,
                    1483,
                    1484
                ],
                "position.frozen": [
                    1482
                ],
                "pb1": [
                    1483,
                    1484
                ],
                "pb.shrunk_to_aspect": [
                    1483
                ],
                "pb1.anchored": [
                    1484
                ],
                "self.get_anchor": [
                    1484
                ],
                "x_trf": [
                    1552,
                    1493,
                    1510,
                    1495
                ],
                "y_trf": [
                    1496,
                    1547,
                    1494,
                    1511
                ],
                "x_trf.transform": [
                    1495
                ],
                "y_trf.transform": [
                    1496
                ],
                "l": [
                    1500
                ],
                "b": [
                    3872,
                    2757,
                    2151,
                    2120,
                    2760,
                    2666,
                    2762,
                    4331,
                    3856,
                    2130,
                    2706,
                    1500,
                    2109,
                    2110
                ],
                "w": [
                    1500,
                    1501
                ],
                "h": [
                    1500,
                    1501
                ],
                "position.bounds": [
                    1500
                ],
                "data_ratio": [
                    1504,
                    1518,
                    1517,
                    1502
                ],
                "y_expander": [
                    1504,
                    1537,
                    1506,
                    1538,
                    1540
                ],
                "dL": [
                    1509,
                    1510,
                    1511
                ],
                "x_trf.inverted": [
                    1552,
                    1510
                ],
                "dL.intervalx": [
                    1510
                ],
                "y_trf.inverted": [
                    1547,
                    1511
                ],
                "dL.intervaly": [
                    1511
                ],
                "xr": [
                    1512,
                    1515,
                    1519
                ],
                "yr": [
                    1520,
                    1513,
                    1516
                ],
                "xmarg": [
                    1536,
                    1515
                ],
                "ymarg": [
                    1536,
                    1516
                ],
                "Ysize": [
                    1520,
                    1545,
                    1546,
                    1517
                ],
                "Xsize": [
                    1551,
                    1550,
                    1518,
                    1519
                ],
                "Xmarg": [
                    1538,
                    1519
                ],
                "Ymarg": [
                    1520,
                    1537
                ],
                "xm": [
                    1536,
                    1522
                ],
                "ym": [
                    1536,
                    1523
                ],
                "shared_x": [
                    1528,
                    1541,
                    1525
                ],
                "shared_y": [
                    1528,
                    1533,
                    1526
                ],
                "adjust_y": [
                    1541,
                    1534,
                    1543
                ],
                "adjy": [
                    1537,
                    1540,
                    1541
                ],
                "yc": [
                    1544,
                    1545,
                    1546
                ],
                "self.set_ybound": [
                    1547,
                    2460
                ],
                "xc": [
                    1549,
                    1550,
                    1551
                ],
                "self.set_xbound": [
                    1552,
                    2457
                ],
                "s": [
                    1611,
                    1612,
                    1613,
                    1614,
                    1615,
                    1616,
                    1617,
                    1619,
                    1621,
                    1623,
                    1631,
                    1633,
                    1636,
                    3814,
                    1639,
                    3815,
                    3817,
                    1643,
                    3819,
                    1655
                ],
                "s.lower": [
                    1616
                ],
                "self.set_axis_off": [
                    1620
                ],
                "self.set_autoscale_on": [
                    1635,
                    1638,
                    1641,
                    1645,
                    1627
                ],
                "self.set_aspect": [
                    1632,
                    1634,
                    1642,
                    1644,
                    1628
                ],
                "xlim": [
                    1648,
                    1649,
                    1646
                ],
                "self.get_xlim": [
                    3010,
                    1687,
                    3944,
                    3182,
                    1646,
                    3888,
                    3191
                ],
                "ylim": [
                    1648,
                    1651,
                    1647
                ],
                "self.get_ylim": [
                    3561,
                    3945,
                    3407,
                    1647,
                    3889,
                    3570,
                    1687
                ],
                "edge_size": [
                    1648,
                    1649,
                    1651
                ],
                "np.diff": [
                    1648
                ],
                "emit": [
                    3595,
                    3215,
                    1681,
                    1650,
                    1682,
                    1652
                ],
                "limits": [
                    1665,
                    1663
                ],
                "xauto": [
                    1681,
                    1675
                ],
                "yauto": [
                    1682,
                    1678
                ],
                "cbook.silent_list": [
                    1699,
                    1695
                ],
                "self.xaxis.get_gridlines": [
                    1707
                ],
                "self.xaxis.get_ticklines": [
                    1711
                ],
                "self.yaxis.get_gridlines": [
                    1719
                ],
                "self.yaxis.get_ticklines": [
                    1723
                ],
                "im": [
                    1737,
                    1740,
                    1734,
                    1735
                ],
                "mpl.contour.ContourSet": [
                    1734
                ],
                "mpl.contour": [
                    1734
                ],
                "im.collections": [
                    1735
                ],
                "self.artists.append": [
                    1777
                ],
                "a._remove_method": [
                    1778
                ],
                "self.artists.remove": [
                    1778
                ],
                "a.set_clip_path": [
                    1780
                ],
                "ax._axes": [
                    1794
                ],
                "ax.stale_callback": [
                    1795
                ],
                "martist._stale_axes_callback": [
                    1795
                ],
                "self.child_axes.append": [
                    1797
                ],
                "ax._remove_method": [
                    1798
                ],
                "self.child_axes.remove": [
                    1798
                ],
                "collection.get_label": [
                    1806
                ],
                "collection": [
                    1806,
                    1808,
                    1809,
                    1810,
                    1811,
                    1813,
                    1814,
                    1820,
                    1823
                ],
                "collection.set_label": [
                    1808
                ],
                "self.collections.append": [
                    1809
                ],
                "collection._remove_method": [
                    1810
                ],
                "self.collections.remove": [
                    1810
                ],
                "collection.get_clip_path": [
                    1813
                ],
                "collection.set_clip_path": [
                    1814
                ],
                "autolim": [
                    1816
                ],
                "self.update_datalim": [
                    1946,
                    1820
                ],
                "collection.get_datalim": [
                    1820
                ],
                "image": [
                    1829,
                    1830,
                    1831,
                    1832,
                    1833,
                    1835,
                    1838,
                    2004,
                    2005,
                    2006
                ],
                "image.get_label": [
                    1830
                ],
                "image.set_label": [
                    1831
                ],
                "self.images.append": [
                    1832
                ],
                "image._remove_method": [
                    1833
                ],
                "self.images.remove": [
                    1833
                ],
                "image.get_extent": [
                    1838
                ],
                "self.axes.update_datalim": [
                    1839
                ],
                "line.get_clip_path": [
                    1846
                ],
                "line.set_clip_path": [
                    1847
                ],
                "self._update_line_limits": [
                    1849,
                    1998
                ],
                "line.get_label": [
                    1850
                ],
                "line.set_label": [
                    1851
                ],
                "self.lines.append": [
                    1852
                ],
                "line._remove_method": [
                    1853
                ],
                "self.lines.remove": [
                    1853
                ],
                "txt": [
                    1865,
                    1861,
                    1862,
                    1863
                ],
                "self.texts.append": [
                    1862
                ],
                "txt._remove_method": [
                    1863
                ],
                "self.texts.remove": [
                    1863
                ],
                "path": [
                    1893,
                    1900,
                    1871,
                    1872,
                    1878
                ],
                "line.get_path": [
                    1871
                ],
                "path.vertices.size": [
                    1872
                ],
                "path.vertices": [
                    1872
                ],
                "line_trans": [
                    1903,
                    1875,
                    1877,
                    1880,
                    1883
                ],
                "line.get_transform": [
                    1875
                ],
                "data_path": [
                    1891,
                    1893,
                    1900,
                    1902,
                    1905,
                    1878
                ],
                "line_trans.contains_branch_seperately": [
                    1880,
                    1903
                ],
                "trans_to_data": [
                    1891,
                    1883,
                    1893
                ],
                "self.transData.is_affine": [
                    1888
                ],
                "line_trans_path": [
                    1889,
                    1890
                ],
                "line._get_transformed_path": [
                    1889
                ],
                "na_path": [
                    1890,
                    1891
                ],
                "_": [
                    1890,
                    2531,
                    2536,
                    2506,
                    2543
                ],
                "line_trans_path.get_transformed_path_and_affine": [
                    1890
                ],
                "trans_to_data.transform_path_affine": [
                    1891
                ],
                "trans_to_data.transform_path": [
                    1893
                ],
                "data_path.vertices.size": [
                    1902
                ],
                "data_path.vertices": [
                    1902
                ],
                "updatex": [
                    2030,
                    1903,
                    1907,
                    1944,
                    1946
                ],
                "updatey": [
                    2030,
                    1903,
                    1908,
                    1944,
                    1947
                ],
                "self.dataLim.update_from_path": [
                    1905
                ],
                "p.get_clip_path": [
                    1916
                ],
                "p.set_clip_path": [
                    1917
                ],
                "self._update_patch_limits": [
                    2002,
                    1918
                ],
                "self.patches.append": [
                    1919
                ],
                "p._remove_method": [
                    1920
                ],
                "self.patches.remove": [
                    1920
                ],
                "patch": [
                    1933,
                    1934,
                    1936,
                    1938,
                    1939,
                    1940,
                    1944
                ],
                "patch.get_width": [
                    1934
                ],
                "patch.get_height": [
                    1934
                ],
                "vertices": [
                    1936,
                    1937,
                    1938
                ],
                "patch.get_path": [
                    1936
                ],
                "vertices.size": [
                    1937
                ],
                "xys": [
                    2026,
                    2027,
                    2029,
                    1938,
                    1942,
                    1946
                ],
                "patch.get_patch_transform": [
                    1938
                ],
                "patch.get_data_transform": [
                    1939,
                    1940
                ],
                "patch_to_data": [
                    1940,
                    1942
                ],
                "patch_to_data.transform": [
                    1942
                ],
                "contains_branch_seperately": [
                    1944
                ],
                "patch.get_transform": [
                    1944
                ],
                "tab": [
                    1953,
                    1954,
                    1955,
                    1956,
                    1957
                ],
                "self.tables.append": [
                    1954
                ],
                "tab.set_clip_path": [
                    1955
                ],
                "tab._remove_method": [
                    1956
                ],
                "self.tables.remove": [
                    1956
                ],
                "container.get_label": [
                    1963
                ],
                "container": [
                    1963,
                    1965,
                    1966,
                    1967,
                    1968
                ],
                "container.set_label": [
                    1965
                ],
                "self.containers.append": [
                    1966
                ],
                "container._remove_method": [
                    1967
                ],
                "self.containers.remove": [
                    1967
                ],
                "self.relim": [
                    1976
                ],
                "self._request_autoscale_view": [
                    3648,
                    3268,
                    2329,
                    1977,
                    2874,
                    2271
                ],
                "self.dataLim.ignore": [
                    1992
                ],
                "self.dataLim.set_points": [
                    1993
                ],
                "get_points": [
                    1993
                ],
                "visible_only": [
                    2005,
                    2001,
                    1997
                ],
                "line.get_visible": [
                    1997
                ],
                "p.get_visible": [
                    2001
                ],
                "image.get_visible": [
                    2005
                ],
                "self._update_image_limits": [
                    2006
                ],
                "np.asarray": [
                    2026
                ],
                "self.dataLim.update_from_data_xy": [
                    2029
                ],
                "self.dataLim.set": [
                    2042
                ],
                "mtransforms.Bbox.union": [
                    2042,
                    4330
                ],
                "bounds": [
                    2042
                ],
                "axis": [
                    2049,
                    2818,
                    2435,
                    2820,
                    2437,
                    2054,
                    2055,
                    2822,
                    2824,
                    2826,
                    2059,
                    2828,
                    2830,
                    2319,
                    2064,
                    2065,
                    2322,
                    2069,
                    2715,
                    2716,
                    2868,
                    2869,
                    2758,
                    2759,
                    2761,
                    2946,
                    2418,
                    2807,
                    2938,
                    2939
                ],
                "axis.have_units": [
                    2054
                ],
                "axis.update_units": [
                    2069,
                    2055
                ],
                "units": [
                    2064,
                    2065,
                    2059,
                    2062
                ],
                "unit_name": [
                    2059,
                    2062
                ],
                "axis.units": [
                    2064,
                    2059
                ],
                "polar_units": [
                    2061,
                    2062
                ],
                "axis.set_units": [
                    2065
                ],
                "_process_single_axis": [
                    2072,
                    2073
                ],
                "xdata": [
                    2072
                ],
                "ydata": [
                    2073
                ],
                "self.patch.contains": [
                    2081,
                    4202
                ],
                "mouseevent": [
                    2081,
                    4202,
                    4199
                ],
                "use_sticky_edges.setter": [
                    2149
                ],
                "use_sticky_edges": [
                    2149
                ],
                "m": [
                    2193,
                    2195,
                    2810,
                    2171,
                    2173,
                    2811
                ],
                "margins": [
                    2250,
                    2253,
                    2254,
                    2255,
                    2256,
                    2257
                ],
                "self.set_xmargin": [
                    2267
                ],
                "self.set_ymargin": [
                    2269
                ],
                "z": [
                    2283
                ],
                "enable": [
                    2320,
                    2313,
                    2323
                ],
                "self.use_sticky_edges": [
                    2369
                ],
                "stickies": [
                    2372,
                    2374,
                    2375,
                    2376,
                    2426,
                    2427,
                    2429,
                    2430
                ],
                "artist.sticky_edges": [
                    2372
                ],
                "artist": [
                    4232,
                    2372,
                    4231
                ],
                "self.get_children": [
                    4220,
                    2571,
                    2372
                ],
                "x_stickies": [
                    2457,
                    2378,
                    2375
                ],
                "np.sort": [
                    2376,
                    2375
                ],
                "sticky": [
                    2376,
                    2375
                ],
                "sticky.x": [
                    2375
                ],
                "y_stickies": [
                    2376,
                    2460,
                    2380
                ],
                "sticky.y": [
                    2376
                ],
                "lower": [
                    2377,
                    2379,
                    3035,
                    3036,
                    3040,
                    3041,
                    3046,
                    3047,
                    3432,
                    3049,
                    3433,
                    3051,
                    3052,
                    3437,
                    3054,
                    3438,
                    3443,
                    3444,
                    3446,
                    3448,
                    3449,
                    3451
                ],
                "self.get_xscale": [
                    2377,
                    4044,
                    3188
                ],
                "self.get_yscale": [
                    2379,
                    4052,
                    3567
                ],
                "scale": [
                    3816,
                    2385,
                    3812,
                    3813
                ],
                "autoscaleon": [
                    2385
                ],
                "shared": [
                    2410,
                    2388,
                    2389,
                    2415
                ],
                "shared_axes.get_siblings": [
                    2388
                ],
                "shared_axes": [
                    2388
                ],
                "dl": [
                    2402,
                    2403,
                    2404,
                    2406,
                    2389,
                    2391,
                    2395,
                    2398
                ],
                "ax.dataLim": [
                    2389
                ],
                "finite_dl": [
                    2400,
                    2402,
                    2391,
                    2392,
                    2397
                ],
                "d": [
                    2400,
                    2476,
                    2480,
                    2481,
                    2391,
                    2395,
                    2396,
                    2397,
                    2398,
                    2399
                ],
                "np.isfinite": [
                    2440,
                    2409,
                    2412,
                    4172,
                    3092,
                    2391,
                    2396,
                    2399
                ],
                "x_finite": [
                    2403,
                    2395
                ],
                "d.intervalx": [
                    2396
                ],
                "y_finite": [
                    2404,
                    2398
                ],
                "d.intervaly": [
                    2399
                ],
                "dl.extend": [
                    2403,
                    2404
                ],
                "bb": [
                    2434,
                    4274,
                    4289,
                    4293,
                    4297,
                    4301,
                    4303,
                    4305,
                    4307,
                    2525,
                    2527,
                    2528,
                    2529,
                    2406,
                    2409,
                    4329,
                    2411,
                    2412,
                    4331,
                    2416,
                    2417
                ],
                "mtransforms.BboxBase.union": [
                    2410,
                    2414,
                    2406
                ],
                "vl": [
                    2408,
                    2410,
                    2411,
                    2413,
                    2414,
                    2416
                ],
                "bb.intervalx": [
                    2409,
                    2411
                ],
                "ax.viewLim": [
                    2410,
                    2415
                ],
                "vl.intervalx": [
                    2411
                ],
                "bb.intervaly": [
                    2416,
                    2412
                ],
                "vl.intervaly": [
                    2416
                ],
                "interval": [
                    2417
                ],
                "axis.get_major_locator": [
                    2418
                ],
                "locator.nonsingular": [
                    2419
                ],
                "i0": [
                    2426,
                    2427
                ],
                "stickies.searchsorted": [
                    2426,
                    2429
                ],
                "tol": [
                    2426,
                    2429
                ],
                "x0bound": [
                    2427,
                    2445,
                    2446
                ],
                "i1": [
                    2429,
                    2430
                ],
                "x1bound": [
                    2448,
                    2430,
                    2447
                ],
                "minpos": [
                    2434,
                    2437
                ],
                "axis.get_transform": [
                    2435
                ],
                "inverse_trans": [
                    2442,
                    2436
                ],
                "transform.inverted": [
                    2436
                ],
                "axis._scale.limit_range_for_scale": [
                    2437
                ],
                "axis._scale": [
                    2437
                ],
                "x0t": [
                    2442,
                    2438,
                    2439
                ],
                "x1t": [
                    2442,
                    2438,
                    2439
                ],
                "transform.transform": [
                    2438
                ],
                "delta": [
                    2440,
                    2441,
                    2442,
                    2439
                ],
                "margin": [
                    2439
                ],
                "inverse_trans.transform": [
                    2442
                ],
                "locator.view_limits": [
                    2451
                ],
                "set_bound": [
                    2452
                ],
                "handle_single_axis": [
                    2458,
                    2455
                ],
                "axis_list": [
                    2477,
                    2479
                ],
                "self._get_axis_list": [
                    2817,
                    4228,
                    2477,
                    2585,
                    2715,
                    4188
                ],
                "items": [
                    2816,
                    2478
                ],
                "k.endswith": [
                    2479
                ],
                "_log.debug": [
                    2490,
                    2500
                ],
                "titles": [
                    2496,
                    2505,
                    2540,
                    2541,
                    2493
                ],
                "title": [
                    2496,
                    2497,
                    2530,
                    2532,
                    2535,
                    2505,
                    2506,
                    2537,
                    2508,
                    2538,
                    2540,
                    2541,
                    2543,
                    2544
                ],
                "title.get_position": [
                    2497,
                    2506,
                    2540,
                    2543
                ],
                "np.isclose": [
                    2498
                ],
                "title.set_position": [
                    2544,
                    2538,
                    2508,
                    2532
                ],
                "ax.get_axes_locator": [
                    2514
                ],
                "renderer": [
                    2566,
                    2582,
                    2604,
                    2615,
                    4281,
                    2619,
                    2620,
                    2622,
                    4287,
                    2624,
                    4291,
                    4295,
                    4296,
                    4299,
                    4301,
                    4303,
                    4305,
                    4307,
                    2516,
                    2525,
                    2527,
                    2530,
                    4325,
                    2535,
                    2537,
                    2550,
                    2551,
                    2552,
                    2558
                ],
                "ax.apply_aspect": [
                    2517,
                    2519
                ],
                "top": [
                    3588,
                    3589,
                    3591,
                    3605,
                    3407,
                    3408,
                    3409,
                    3411,
                    3543,
                    3544,
                    2521,
                    3550,
                    3552,
                    2529,
                    2530,
                    2531,
                    3554,
                    3556,
                    3558,
                    2535,
                    2537,
                    3564,
                    3565,
                    3567,
                    3577,
                    3582,
                    3583
                ],
                "ax.xaxis.get_ticks_position": [
                    2523
                ],
                "ax.xaxis": [
                    3265,
                    2523,
                    2524,
                    2525
                ],
                "ax.xaxis.get_label_position": [
                    2524
                ],
                "ax.xaxis.get_tightbbox": [
                    2525
                ],
                "ax.get_window_extent": [
                    2527
                ],
                "bb.ymax": [
                    2529
                ],
                "title.get_window_extent": [
                    2537,
                    2530,
                    2535
                ],
                "self.transAxes.inverted": [
                    2536,
                    2531
                ],
                "self.figure._cachedRenderer": [
                    2551,
                    2633,
                    2636,
                    2644,
                    2647,
                    2650
                ],
                "self.get_visible": [
                    2554,
                    4276
                ],
                "renderer.open_group": [
                    2558
                ],
                "artists": [
                    4225,
                    2594,
                    2596,
                    4229,
                    4231,
                    2622,
                    2571,
                    2572,
                    2603,
                    2605,
                    2607,
                    2580,
                    2586,
                    4220,
                    2589,
                    2590,
                    2591
                ],
                "artists.remove": [
                    4225,
                    4229,
                    2572,
                    2580,
                    2586,
                    2589,
                    2590,
                    2591
                ],
                "self.axison": [
                    4227,
                    2960,
                    2578,
                    2614,
                    2584,
                    2969,
                    4286,
                    4222
                ],
                "self.spines.values": [
                    4224,
                    4187,
                    2579
                ],
                "self._update_title_position": [
                    4299,
                    2582,
                    4295
                ],
                "inframe": [
                    2584,
                    2588
                ],
                "_axis": [
                    2585,
                    2586,
                    4228,
                    4229
                ],
                "self.figure.canvas.is_saving": [
                    2593
                ],
                "self.figure.canvas": [
                    2593
                ],
                "a.get_animated": [
                    2595
                ],
                "attrgetter": [
                    2596
                ],
                "rasterization_zorder": [
                    2600,
                    2602,
                    2603,
                    2606,
                    2608
                ],
                "zorder": [
                    2603,
                    2708,
                    2710,
                    2712,
                    2716
                ],
                "renderer.start_rasterizing": [
                    2604
                ],
                "artists_rasterized": [
                    2617,
                    2610,
                    2618,
                    2605
                ],
                "a.zorder": [
                    2608,
                    2606
                ],
                "self.patch.draw": [
                    2615
                ],
                "a.draw": [
                    2619,
                    2636
                ],
                "renderer.stop_rasterizing": [
                    2620
                ],
                "mimage._draw_list_compositing_images": [
                    2622
                ],
                "mimage": [
                    2622
                ],
                "renderer.close_group": [
                    2624
                ],
                "martist.allow_rasterization": [
                    2547
                ],
                "self.draw": [
                    2647
                ],
                "self._axisbelow": [
                    2681,
                    2706
                ],
                "axisbelow": [
                    2706,
                    2707,
                    2709,
                    2711
                ],
                "validate_axisbelow": [
                    2706
                ],
                "axis.set_zorder": [
                    2716
                ],
                "self.xaxis.grid": [
                    2760
                ],
                "self.yaxis.grid": [
                    2762
                ],
                "docstring.dedent_interpd": [
                    2719
                ],
                "docstring": [
                    2719
                ],
                "style": [
                    2806,
                    2815
                ],
                "style.lower": [
                    2806
                ],
                "axis.lower": [
                    2807
                ],
                "scilimits": [
                    2808,
                    2824,
                    2810,
                    2823
                ],
                "n": [
                    2810,
                    2811
                ],
                "STYLES": [
                    2814,
                    2815
                ],
                "is_sci_style": [
                    2821,
                    2822,
                    2815
                ],
                "cbook._check_getitem": [
                    2818,
                    2815
                ],
                "axis_map": [
                    2816,
                    2818
                ],
                "self._get_axis_map": [
                    2816
                ],
                "axises": [
                    2818,
                    2820
                ],
                "axis.major.formatter.set_scientific": [
                    2822
                ],
                "axis.major.formatter": [
                    2822,
                    2824,
                    2826,
                    2828,
                    2830
                ],
                "axis.major": [
                    2822,
                    2824,
                    2826,
                    2828,
                    2830
                ],
                "axis.major.formatter.set_powerlimits": [
                    2824
                ],
                "useOffset": [
                    2825,
                    2826
                ],
                "axis.major.formatter.set_useOffset": [
                    2826
                ],
                "useLocale": [
                    2827,
                    2828
                ],
                "axis.major.formatter.set_useLocale": [
                    2828
                ],
                "useMathText": [
                    2829,
                    2830
                ],
                "axis.major.formatter.set_useMathText": [
                    2830
                ],
                "_x": [
                    2874,
                    2868,
                    2870
                ],
                "_y": [
                    2872,
                    2874,
                    2869
                ],
                "set_params": [
                    2873,
                    2871
                ],
                "self.xaxis.get_major_locator": [
                    3208,
                    2871
                ],
                "self.yaxis.get_major_locator": [
                    2873,
                    3588
                ],
                "xkw": [
                    2944,
                    2945,
                    2940,
                    2941,
                    2942,
                    2943
                ],
                "xkw.pop": [
                    2944,
                    2941,
                    2942,
                    2943
                ],
                "self.xaxis.set_tick_params": [
                    2945
                ],
                "ykw": [
                    2947,
                    2948,
                    2949,
                    2950,
                    2951,
                    2952
                ],
                "ykw.pop": [
                    2948,
                    2949,
                    2950,
                    2951
                ],
                "self.yaxis.set_tick_params": [
                    2952
                ],
                "self.xaxis.set_inverted": [
                    2984
                ],
                "self.xaxis.get_inverted": [
                    2984,
                    2998
                ],
                "left": [
                    3204,
                    3206,
                    3208,
                    3209,
                    3211,
                    3225,
                    3010,
                    3011,
                    3012,
                    3014,
                    3164,
                    3165,
                    3167,
                    3169,
                    3175,
                    3176,
                    3179,
                    3183,
                    3184,
                    3188,
                    3192,
                    3197
                ],
                "right": [
                    3203,
                    3204,
                    3208,
                    3209,
                    3211,
                    3225,
                    3010,
                    3011,
                    3012,
                    3014,
                    3164,
                    3165,
                    3171,
                    3173,
                    3175,
                    3177,
                    3179,
                    3185,
                    3186,
                    3188,
                    3198
                ],
                "upper": [
                    3035,
                    3036,
                    3042,
                    3043,
                    3046,
                    3047,
                    3432,
                    3049,
                    3433,
                    3051,
                    3052,
                    3054,
                    3439,
                    3440,
                    3443,
                    3444,
                    3446,
                    3448,
                    3449,
                    3451
                ],
                "np.iterable": [
                    3432,
                    3035,
                    3164,
                    3543
                ],
                "old_lower": [
                    3041,
                    3438,
                    3435,
                    3038
                ],
                "old_upper": [
                    3435,
                    3043,
                    3440,
                    3038
                ],
                "self.xaxis_inverted": [
                    3045
                ],
                "self.viewLim.intervalx": [
                    3220,
                    3077
                ],
                "self.viewLim": [
                    3077,
                    3600,
                    3474,
                    3220,
                    4086
                ],
                "limit": [
                    3089,
                    3090
                ],
                "converted_limit": [
                    3090,
                    3091,
                    3092,
                    3094
                ],
                "convert": [
                    3090
                ],
                "Real": [
                    3091
                ],
                "self._process_unit_info": [
                    3554,
                    3175
                ],
                "self._validate_converted_limits": [
                    3176,
                    3177,
                    3555,
                    3556
                ],
                "self.convert_xunits": [
                    3176,
                    3177
                ],
                "old_left": [
                    3184,
                    3197,
                    3182,
                    3191
                ],
                "old_right": [
                    3186,
                    3203,
                    3182,
                    3191
                ],
                "nonsingular": [
                    3208,
                    3588
                ],
                "self.xaxis.limit_range_for_scale": [
                    3209
                ],
                "self._viewLim.intervalx": [
                    3211
                ],
                "auto": [
                    3592,
                    3593,
                    3212,
                    3213,
                    3601,
                    3221
                ],
                "self.callbacks.process": [
                    3216,
                    3596
                ],
                "other": [
                    3598,
                    3599,
                    3600,
                    3218,
                    3219,
                    3220,
                    3602,
                    3222,
                    3223,
                    3603
                ],
                "other.set_xlim": [
                    3220
                ],
                "other.figure": [
                    3602,
                    3603,
                    3222,
                    3223
                ],
                "other.figure.canvas.draw_idle": [
                    3603,
                    3223
                ],
                "other.figure.canvas": [
                    3603,
                    3223
                ],
                "self.xaxis.get_scale": [
                    3235
                ],
                "g": [
                    3264,
                    3643,
                    3644,
                    3263
                ],
                "self.get_shared_x_axes": [
                    3263
                ],
                "g.get_siblings": [
                    3264,
                    3644
                ],
                "ax.xaxis._set_scale": [
                    3265
                ],
                "value": [
                    3265,
                    3645
                ],
                "ax._update_transScale": [
                    3266,
                    3646
                ],
                "ax.stale": [
                    3267,
                    3647
                ],
                "self.xaxis.get_ticklocs": [
                    3272
                ],
                "minor": [
                    3712,
                    3746,
                    3652,
                    3333,
                    3367,
                    3272,
                    3667,
                    3287
                ],
                "ret": [
                    3366,
                    3369,
                    3667,
                    3668,
                    3287,
                    3289
                ],
                "self.xaxis.set_ticks": [
                    3287
                ],
                "ticks": [
                    3667,
                    3287
                ],
                "self.xaxis.get_majorticklabels": [
                    3300
                ],
                "self.xaxis.get_minorticklabels": [
                    3311
                ],
                "self.xaxis.get_ticklabels": [
                    3333
                ],
                "fontdict": [
                    3744,
                    3364,
                    3365,
                    3743
                ],
                "kwargs.update": [
                    3744,
                    3365
                ],
                "self.xaxis.set_ticklabels": [
                    3366
                ],
                "labels": [
                    3745,
                    3366
                ],
                "self.yaxis.set_inverted": [
                    3381
                ],
                "self.yaxis.get_inverted": [
                    3395,
                    3381
                ],
                "bottom": [
                    3585,
                    3588,
                    3589,
                    3591,
                    3605,
                    3407,
                    3408,
                    3409,
                    3411,
                    3543,
                    3544,
                    3546,
                    3548,
                    3554,
                    3555,
                    3558,
                    3562,
                    3563,
                    3567,
                    3571,
                    3576,
                    3583
                ],
                "self.yaxis_inverted": [
                    3442
                ],
                "self.viewLim.intervaly": [
                    3600,
                    3474
                ],
                "self.convert_yunits": [
                    3555,
                    3556
                ],
                "old_bottom": [
                    3576,
                    3561,
                    3570,
                    3563
                ],
                "old_top": [
                    3561,
                    3570,
                    3565,
                    3582
                ],
                "self.yaxis.limit_range_for_scale": [
                    3589
                ],
                "self._viewLim.intervaly": [
                    3591
                ],
                "other.set_ylim": [
                    3600
                ],
                "self.yaxis.get_scale": [
                    3615
                ],
                "self.get_shared_y_axes": [
                    3643
                ],
                "ax.yaxis._set_scale": [
                    3645
                ],
                "ax.yaxis": [
                    3645
                ],
                "self.yaxis.get_ticklocs": [
                    3652
                ],
                "self.yaxis.set_ticks": [
                    3667
                ],
                "self.yaxis.get_majorticklabels": [
                    3679
                ],
                "self.yaxis.get_minorticklabels": [
                    3690
                ],
                "self.yaxis.get_ticklabels": [
                    3712
                ],
                "self.yaxis.set_ticklabels": [
                    3745
                ],
                "self.xaxis.axis_date": [
                    3759
                ],
                "tz": [
                    3770,
                    3759
                ],
                "self.yaxis.axis_date": [
                    3770
                ],
                "format_data_short": [
                    3780,
                    3790
                ],
                "self.xaxis.get_major_formatter": [
                    3780
                ],
                "self.yaxis.get_major_formatter": [
                    3790
                ],
                "xs": [
                    3802,
                    3795,
                    3797
                ],
                "self.format_xdata": [
                    3797
                ],
                "ys": [
                    3801,
                    3802,
                    3799
                ],
                "self.format_ydata": [
                    3801
                ],
                "ax.get_scale": [
                    3812
                ],
                "ax._scale": [
                    3817,
                    3814
                ],
                "ax.set_minor_locator": [
                    3818,
                    3821,
                    3815
                ],
                "mticker.LogLocator": [
                    3815
                ],
                "s.base": [
                    3815
                ],
                "s.subs": [
                    3819,
                    3815
                ],
                "mticker.SymmetricalLogLocator": [
                    3819
                ],
                "s._transform": [
                    3819
                ],
                "mticker.NullLocator": [
                    3825,
                    3826
                ],
                "self._navigate": [
                    3856,
                    3846
                ],
                "self._navigate_mode": [
                    3872,
                    3862
                ],
                "view": [
                    3904
                ],
                "Xmin": [
                    4000,
                    3944,
                    4008,
                    4009,
                    4045,
                    4046,
                    4047,
                    4049,
                    4050,
                    4051,
                    3992,
                    3994,
                    3964,
                    3999
                ],
                "Xmax": [
                    4001,
                    4002,
                    3944,
                    4010,
                    4011,
                    4045,
                    4047,
                    4049,
                    4051,
                    3992,
                    3994,
                    3965
                ],
                "Ymin": [
                    3945,
                    4014,
                    4016,
                    4055,
                    4021,
                    4022,
                    4053,
                    4054,
                    4057,
                    4058,
                    4059,
                    3964,
                    4030,
                    4031
                ],
                "Ymax": [
                    4032,
                    4033,
                    3945,
                    4014,
                    4016,
                    4055,
                    4053,
                    4023,
                    4024,
                    4057,
                    4059,
                    3965
                ],
                "bbox": [
                    4325,
                    4326,
                    3975,
                    4327,
                    3977,
                    4328,
                    3947,
                    4329,
                    3949,
                    3985
                ],
                "xp": [
                    3972,
                    3949
                ],
                "yp": [
                    3949,
                    3973
                ],
                "scl": [
                    3972,
                    3973,
                    3975,
                    3976,
                    3949,
                    3952,
                    3953,
                    3956,
                    3960
                ],
                "direction": [
                    4035,
                    3957,
                    4043,
                    3959
                ],
                "tranD2C": [
                    3963,
                    3964,
                    3965
                ],
                "self.transData.transform": [
                    3963
                ],
                "xwidth": [
                    3968,
                    3976,
                    3975
                ],
                "ywidth": [
                    3976,
                    3969,
                    3975
                ],
                "xcen": [
                    3970,
                    3972
                ],
                "ycen": [
                    3971,
                    3973
                ],
                "xzc": [
                    3976,
                    3972,
                    3975
                ],
                "yzc": [
                    3976,
                    3973,
                    3975
                ],
                "lastx": [
                    4004,
                    4005,
                    4007,
                    3985,
                    3989,
                    3995,
                    3996,
                    3998
                ],
                "lasty": [
                    3985,
                    4018,
                    4017,
                    4020,
                    3989,
                    4026,
                    4027,
                    4029
                ],
                "inverse": [
                    3988,
                    3989
                ],
                "self.transData.inverted": [
                    4088,
                    3988
                ],
                "inverse.transform": [
                    3989
                ],
                "twinx": [
                    3991
                ],
                "twiny": [
                    4013
                ],
                "mode": [
                    4036,
                    4061,
                    4038,
                    4063
                ],
                "alpha": [
                    4160,
                    4163,
                    4045,
                    4046,
                    4047,
                    4049,
                    4050,
                    4051,
                    4053,
                    4054,
                    4055,
                    4057,
                    4058,
                    4059
                ],
                "np.log": [
                    4053,
                    4045
                ],
                "rx1": [
                    4050,
                    4062,
                    4046,
                    4066
                ],
                "rx2": [
                    4066,
                    4051,
                    4062,
                    4047
                ],
                "ry1": [
                    4064,
                    4058,
                    4067,
                    4054
                ],
                "ry2": [
                    4064,
                    4059,
                    4067,
                    4055
                ],
                "self._pan_start": [
                    4145,
                    4085,
                    4103
                ],
                "types.SimpleNamespace": [
                    4085
                ],
                "types": [
                    4085
                ],
                "self.viewLim.frozen": [
                    4086
                ],
                "self.transData.frozen": [
                    4087
                ],
                "frozen": [
                    4088
                ],
                "self.bbox.frozen": [
                    4089
                ],
                "dx": [
                    4126,
                    4127,
                    4129,
                    4133,
                    4135,
                    4136,
                    4137,
                    4139,
                    4140,
                    4142,
                    4143,
                    4146,
                    4148,
                    4151,
                    4152,
                    4155,
                    4157,
                    4159,
                    4160
                ],
                "dy": [
                    4126,
                    4127,
                    4129,
                    4131,
                    4135,
                    4137,
                    4138,
                    4139,
                    4140,
                    4142,
                    4143,
                    4147,
                    4148,
                    4151,
                    4152,
                    4156,
                    4157,
                    4159,
                    4160
                ],
                "p.x": [
                    4161,
                    4146
                ],
                "p.y": [
                    4161,
                    4147
                ],
                "button": [
                    4153,
                    4150
                ],
                "format_deltas": [
                    4157,
                    4151
                ],
                "result": [
                    4152,
                    4164,
                    4173,
                    4172
                ],
                "transformed": [
                    4152,
                    4164
                ],
                "p.bbox.translated": [
                    4152
                ],
                "p.bbox": [
                    4152
                ],
                "p.trans_inverse": [
                    4152,
                    4165
                ],
                "self.bbox.width": [
                    4155
                ],
                "self.bbox.height": [
                    4156
                ],
                "np.power": [
                    4160
                ],
                "start": [
                    4161,
                    4163
                ],
                "np.array": [
                    4161
                ],
                "oldpoints": [
                    4162,
                    4163
                ],
                "p.lim.transformed": [
                    4162
                ],
                "p.lim": [
                    4162
                ],
                "p.trans": [
                    4162,
                    4172
                ],
                "newpoints": [
                    4163,
                    4164
                ],
                "valid": [
                    4172,
                    4175
                ],
                "result.transformed": [
                    4172
                ],
                "points": [
                    4176,
                    4177,
                    4173,
                    4175
                ],
                "astype": [
                    4173
                ],
                "result.get_points": [
                    4173
                ],
                "inside": [
                    4200,
                    4201,
                    4199
                ],
                "info": [
                    4201,
                    4199
                ],
                "self._default_contains": [
                    4199
                ],
                "self.patch.contains_point": [
                    4209
                ],
                "point": [
                    4209
                ],
                "artist.get_visible": [
                    4232
                ],
                "artist.get_in_layout": [
                    4232
                ],
                "call_axes_locator": [
                    4280
                ],
                "bb_xaxis": [
                    4288,
                    4289,
                    4287
                ],
                "self.xaxis.get_tightbbox": [
                    4287
                ],
                "bb.append": [
                    4289,
                    4293,
                    4297,
                    4329,
                    4301,
                    4303,
                    4305,
                    4307
                ],
                "bb_yaxis": [
                    4291,
                    4292,
                    4293
                ],
                "self.yaxis.get_tightbbox": [
                    4291
                ],
                "axbbox": [
                    4296,
                    4297,
                    4320,
                    4321
                ],
                "self.get_window_extent": [
                    4296,
                    4307
                ],
                "self.title.get_visible": [
                    4300
                ],
                "self.title.get_window_extent": [
                    4301
                ],
                "self._left_title.get_visible": [
                    4302
                ],
                "self._left_title.get_window_extent": [
                    4303
                ],
                "self._right_title.get_visible": [
                    4304
                ],
                "self._right_title.get_window_extent": [
                    4305
                ],
                "bbox_artists": [
                    4313,
                    4309,
                    4310,
                    4311
                ],
                "bbox_extra_artists": [
                    4309
                ],
                "self.get_default_bbox_extra_artists": [
                    4311
                ],
                "clip_extent": [
                    4321,
                    4317,
                    4318,
                    4319
                ],
                "a._get_clipping_extent_bbox": [
                    4317
                ],
                "mtransforms.Bbox.intersection": [
                    4319
                ],
                "np.all": [
                    4321
                ],
                "clip_extent.extents": [
                    4321
                ],
                "axbbox.extents": [
                    4321
                ],
                "a.get_tightbbox": [
                    4325
                ],
                "bbox.width": [
                    4327
                ],
                "np.inf": [
                    4328,
                    4327
                ],
                "bbox.height": [
                    4328
                ],
                "_bbox": [
                    4330,
                    4333
                ],
                "b.width": [
                    4331
                ],
                "b.height": [
                    4331
                ],
                "ax2": [
                    4366,
                    4367,
                    4368,
                    4369,
                    4370,
                    4372,
                    4373,
                    4374,
                    4396,
                    4397,
                    4398,
                    4399,
                    4401,
                    4402,
                    4403,
                    4340,
                    4342,
                    4343,
                    4344
                ],
                "self.figure.add_axes": [
                    4340
                ],
                "ax2.set_adjustable": [
                    4342
                ],
                "self._twinned_axes.join": [
                    4343
                ],
                "self._make_twin_axes": [
                    4396,
                    4366
                ],
                "ax2.yaxis.tick_right": [
                    4367
                ],
                "ax2.yaxis": [
                    4368,
                    4369,
                    4401,
                    4367
                ],
                "ax2.yaxis.set_label_position": [
                    4368
                ],
                "ax2.yaxis.set_offset_position": [
                    4369
                ],
                "ax2.set_autoscalex_on": [
                    4370
                ],
                "self.get_autoscalex_on": [
                    4370
                ],
                "self.yaxis.tick_left": [
                    4371
                ],
                "ax2.xaxis.set_visible": [
                    4372
                ],
                "ax2.xaxis": [
                    4372,
                    4397,
                    4398
                ],
                "ax2.patch.set_visible": [
                    4402,
                    4373
                ],
                "ax2.patch": [
                    4402,
                    4373
                ],
                "ax2.xaxis.tick_top": [
                    4397
                ],
                "ax2.xaxis.set_label_position": [
                    4398
                ],
                "ax2.set_autoscaley_on": [
                    4399
                ],
                "self.get_autoscaley_on": [
                    4399
                ],
                "self.xaxis.tick_bottom": [
                    4400
                ],
                "ax2.yaxis.set_visible": [
                    4401
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/matplotlib_23/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_aspect_nonlinear_adjustable_datalim",
                "test_function_code": "def test_aspect_nonlinear_adjustable_datalim():\n    fig = plt.figure(figsize=(10, 10))  # Square.\n\n    ax = fig.add_axes([.1, .1, .8, .8])  # Square.\n    ax.plot([.4, .6], [.4, .6])  # Set minpos to keep logit happy.\n    ax.set(xscale=\"log\", xlim=(1, 100),\n           yscale=\"logit\", ylim=(1 / 101, 1 / 11),\n           aspect=1, adjustable=\"datalim\")\n    ax.margins(0)\n    ax.apply_aspect()\n    # Currently the autoscaler chooses to reduce the x-limits by half a decade\n    # on each end, but this may change later.\n    assert ax.get_xlim() == pytest.approx([1*10**(1/2), 100/10**(1/2)])\n    assert ax.get_ylim() == (1 / 101, 1 / 11)",
                "test_error": "assert (1.0, 100.0) == approx([3.1622776601683795 \u00b1 3.2e-06, 31.622776601683793 \u00b1 3.2e-05])\n  comparison failed. Mismatched elements: 2 / 2:\n  Max absolute difference: 68.3772233983162\n  Max relative difference: 2.1622776601683795\n  Index | Obtained | Expected                    \n  0     | 1.0      | 3.1622776601683795 \u00b1 3.2e-06\n  1     | 100.0    | 31.622776601683793 \u00b1 3.2e-05",
                "full_test_error": "def test_aspect_nonlinear_adjustable_datalim():\n        fig = plt.figure(figsize=(10, 10))  # Square.\n    \n        ax = fig.add_axes([.1, .1, .8, .8])  # Square.\n        ax.plot([.4, .6], [.4, .6])  # Set minpos to keep logit happy.\n        ax.set(xscale=\"log\", xlim=(1, 100),\n               yscale=\"logit\", ylim=(1 / 101, 1 / 11),\n               aspect=1, adjustable=\"datalim\")\n        ax.margins(0)\n        ax.apply_aspect()\n        # Currently the autoscaler chooses to reduce the x-limits by half a decade\n        # on each end, but this may change later.\n>       assert ax.get_xlim() == pytest.approx([1*10**(1/2), 100/10**(1/2)])\nE       assert (1.0, 100.0) == approx([3.1622776601683795 \u00b1 3.2e-06, 31.622776601683793 \u00b1 3.2e-05])\nE         comparison failed. Mismatched elements: 2 / 2:\nE         Max absolute difference: 68.3772233983162\nE         Max relative difference: 2.1622776601683795\nE         Index | Obtained | Expected                    \nE         0     | 1.0      | 3.1622776601683795 \u00b1 3.2e-06\nE         1     | 100.0    | 31.622776601683793 \u00b1 3.2e-05\n\nlib/matplotlib/tests/test_axes.py:6564: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}