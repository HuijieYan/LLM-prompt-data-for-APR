{
    "scrapy:24": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_24/scrapy/core/downloader/handlers/http11.py": {
            "buggy_functions": [
                {
                    "function_name": "requestTunnel",
                    "function_code": "def requestTunnel(self, protocol):\n    \"\"\"Asks the proxy to open a tunnel.\"\"\"\n    tunnelReq = 'CONNECT %s:%s HTTP/1.1\\r\\n' % (self._tunneledHost,\n                                              self._tunneledPort)\n    if self._proxyAuthHeader:\n        tunnelReq += 'Proxy-Authorization: %s\\r\\n' % self._proxyAuthHeader\n    tunnelReq += '\\r\\n'\n    protocol.transport.write(tunnelReq)\n    self._protocolDataReceived = protocol.dataReceived\n    protocol.dataReceived = self.processProxyResponse\n    self._protocol = protocol\n    return protocol\n",
                    "decorators": [],
                    "docstring": "Asks the proxy to open a tunnel.",
                    "start_line": 93,
                    "end_line": 104,
                    "variables": {
                        "tunnelReq": [
                            98,
                            99,
                            100,
                            95
                        ],
                        "self._tunneledHost": [
                            95
                        ],
                        "self": [
                            96,
                            97,
                            98,
                            101,
                            102,
                            103,
                            95
                        ],
                        "self._tunneledPort": [
                            96
                        ],
                        "self._proxyAuthHeader": [
                            97,
                            98
                        ],
                        "protocol.transport.write": [
                            100
                        ],
                        "protocol.transport": [
                            100
                        ],
                        "protocol": [
                            100,
                            101,
                            102,
                            103,
                            104
                        ],
                        "self._protocolDataReceived": [
                            101
                        ],
                        "protocol.dataReceived": [
                            101,
                            102
                        ],
                        "self.processProxyResponse": [
                            102
                        ],
                        "self._protocol": [
                            103
                        ]
                    },
                    "filtered_variables": {
                        "tunnelReq": [
                            98,
                            99,
                            100,
                            95
                        ],
                        "self._tunneledHost": [
                            95
                        ],
                        "self": [
                            96,
                            97,
                            98,
                            101,
                            102,
                            103,
                            95
                        ],
                        "self._tunneledPort": [
                            96
                        ],
                        "self._proxyAuthHeader": [
                            97,
                            98
                        ],
                        "protocol.transport.write": [
                            100
                        ],
                        "protocol.transport": [
                            100
                        ],
                        "protocol": [
                            100,
                            101,
                            102,
                            103,
                            104
                        ],
                        "self._protocolDataReceived": [
                            101
                        ],
                        "protocol.dataReceived": [
                            101,
                            102
                        ],
                        "self.processProxyResponse": [
                            102
                        ],
                        "self._protocol": [
                            103
                        ]
                    },
                    "diff_line_number": 95,
                    "class_data": {
                        "signature": "class TunnelingTCP4ClientEndpoint(TCP4ClientEndpoint)",
                        "docstring": "An endpoint that tunnels through proxies to allow HTTPS downloads. To\naccomplish that, this endpoint sends an HTTP CONNECT to the proxy.\nThe HTTP CONNECT is always sent when using this endpoint, I think this could\nbe improved as the CONNECT will be redundant if the connection associated\nwith this endpoint comes from the pool and a CONNECT has already been issued\nfor it.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, reactor, host, port, proxyConf, contextFactory, timeout=30, bindAddress=None):\n    (proxyHost, proxyPort, self._proxyAuthHeader) = proxyConf\n    super(TunnelingTCP4ClientEndpoint, self).__init__(reactor, proxyHost, proxyPort, timeout, bindAddress)\n    self._tunnelReadyDeferred = defer.Deferred()\n    self._tunneledHost = host\n    self._tunneledPort = port\n    self._contextFactory = contextFactory",
                            "def requestTunnel(self, protocol):\n    \"\"\"Asks the proxy to open a tunnel.\"\"\"\n    tunnelReq = 'CONNECT %s:%s HTTP/1.1\\r\\n' % (self._tunneledHost, self._tunneledPort)\n    if self._proxyAuthHeader:\n        tunnelReq += 'Proxy-Authorization: %s\\r\\n' % self._proxyAuthHeader\n    tunnelReq += '\\r\\n'\n    protocol.transport.write(tunnelReq)\n    self._protocolDataReceived = protocol.dataReceived\n    protocol.dataReceived = self.processProxyResponse\n    self._protocol = protocol\n    return protocol",
                            "def processProxyResponse(self, bytes):\n    \"\"\"Processes the response from the proxy. If the tunnel is successfully\n    created, notifies the client that we are ready to send requests. If not\n    raises a TunnelError.\n    \"\"\"\n    self._protocol.dataReceived = self._protocolDataReceived\n    if TunnelingTCP4ClientEndpoint._responseMatcher.match(bytes):\n        self._protocol.transport.startTLS(self._contextFactory, self._protocolFactory)\n        self._tunnelReadyDeferred.callback(self._protocol)\n    else:\n        self._tunnelReadyDeferred.errback(TunnelError('Could not open CONNECT tunnel.'))",
                            "def connectFailed(self, reason):\n    \"\"\"Propagates the errback to the appropriate deferred.\"\"\"\n    self._tunnelReadyDeferred.errback(reason)",
                            "def connect(self, protocolFactory):\n    self._protocolFactory = protocolFactory\n    connectDeferred = super(TunnelingTCP4ClientEndpoint, self).connect(protocolFactory)\n    connectDeferred.addCallback(self.requestTunnel)\n    connectDeferred.addErrback(self.connectFailed)\n    return self._tunnelReadyDeferred"
                        ],
                        "constructor_variables": [
                            "self._tunnelReadyDeferred = defer.Deferred()",
                            "self._tunneledHost = host",
                            "self._tunneledPort = port",
                            "self._contextFactory = contextFactory"
                        ],
                        "class_level_variables": [
                            "_responseMatcher = re.compile('HTTP/1\\\\.. 200')"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, reactor, host, port, proxyConf, contextFactory, timeout=30, bindAddress=None)",
                            "requestTunnel(self, protocol)",
                            "processProxyResponse(self, bytes)",
                            "connectFailed(self, reason)",
                            "connect(self, protocolFactory)"
                        ],
                        "class_level_variable_names": [
                            "_responseMatcher"
                        ],
                        "constructor_variable_names": [
                            "_contextFactory",
                            "_tunneledHost",
                            "_tunneledPort",
                            "_tunnelReadyDeferred"
                        ]
                    },
                    "used_imports": [
                        "from twisted.internet import defer, reactor, protocol"
                    ],
                    "variable_values": [
                        [
                            {
                                "tunnelReq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._tunneledHost": {
                                    "variable_value": "b'no-such-domain.nosuch'",
                                    "variable_type": "bytes",
                                    "variable_shape": "21"
                                },
                                "self": {
                                    "variable_value": "<scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7fbc5b50c6a0>",
                                    "variable_type": "TunnelingTCP4ClientEndpoint",
                                    "variable_shape": null
                                },
                                "self._tunneledPort": {
                                    "variable_value": "443",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._proxyAuthHeader": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.transport.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.transport": {
                                    "variable_value": "<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 46575) at 7fbc5b50c2b0>",
                                    "variable_type": "Client",
                                    "variable_shape": null
                                },
                                "protocol": {
                                    "variable_value": "<twisted.web._newclient.HTTP11ClientProtocol object at 0x7fbc5b50c1c0>",
                                    "variable_type": "HTTP11ClientProtocol",
                                    "variable_shape": null
                                },
                                "self._protocolDataReceived": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.dataReceived": {
                                    "variable_value": "<bound method HTTP11ClientProtocol.dataReceived of <twisted.web._newclient.HTTP11ClientProtocol object at 0x7fbc5b50c1c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.processProxyResponse": {
                                    "variable_value": "<bound method TunnelingTCP4ClientEndpoint.processProxyResponse of <scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7fbc5b50c6a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._protocol": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "tunnelReq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._tunneledHost": {
                                    "variable_value": "b'no-such-domain.nosuch'",
                                    "variable_type": "bytes",
                                    "variable_shape": "21"
                                },
                                "self": {
                                    "variable_value": "<scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7f96abdcc640>",
                                    "variable_type": "TunnelingTCP4ClientEndpoint",
                                    "variable_shape": null
                                },
                                "self._tunneledPort": {
                                    "variable_value": "443",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._proxyAuthHeader": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.transport.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.transport": {
                                    "variable_value": "<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 36169) at 7f96abdcc250>",
                                    "variable_type": "Client",
                                    "variable_shape": null
                                },
                                "protocol": {
                                    "variable_value": "<twisted.web._newclient.HTTP11ClientProtocol object at 0x7f96abdcc1c0>",
                                    "variable_type": "HTTP11ClientProtocol",
                                    "variable_shape": null
                                },
                                "self._protocolDataReceived": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.dataReceived": {
                                    "variable_value": "<bound method HTTP11ClientProtocol.dataReceived of <twisted.web._newclient.HTTP11ClientProtocol object at 0x7f96abdcc1c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.processProxyResponse": {
                                    "variable_value": "<bound method TunnelingTCP4ClientEndpoint.processProxyResponse of <scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7f96abdcc640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._protocol": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tunnelReq": {
                                    "variable_value": "b'CONNECT no-such-domain.nosuch:443 HTTP/1.1\\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "46"
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._tunneledHost": {
                                    "variable_value": "b'no-such-domain.nosuch'",
                                    "variable_type": "bytes",
                                    "variable_shape": "21"
                                },
                                "self": {
                                    "variable_value": "<scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7f96abdcc640>",
                                    "variable_type": "TunnelingTCP4ClientEndpoint",
                                    "variable_shape": null
                                },
                                "self._tunneledPort": {
                                    "variable_value": "443",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._proxyAuthHeader": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.transport.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "protocol.transport": {
                                    "variable_value": "<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 36169) at 7f96abdcc250>",
                                    "variable_type": "Client",
                                    "variable_shape": null
                                },
                                "protocol": {
                                    "variable_value": "<twisted.web._newclient.HTTP11ClientProtocol object at 0x7f96abdcc1c0>",
                                    "variable_type": "HTTP11ClientProtocol",
                                    "variable_shape": null
                                },
                                "self._protocolDataReceived": {
                                    "variable_value": "<bound method HTTP11ClientProtocol.dataReceived of <twisted.web._newclient.HTTP11ClientProtocol object at 0x7f96abdcc1c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "protocol.dataReceived": {
                                    "variable_value": "<bound method TunnelingTCP4ClientEndpoint.processProxyResponse of <scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7f96abdcc640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.processProxyResponse": {
                                    "variable_value": "<bound method TunnelingTCP4ClientEndpoint.processProxyResponse of <scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint object at 0x7f96abdcc640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._protocol": {
                                    "variable_value": "<twisted.web._newclient.HTTP11ClientProtocol object at 0x7f96abdcc1c0>",
                                    "variable_type": "HTTP11ClientProtocol",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "_responseMatcher = re.compile('HTTP/1\\.. 200')",
                    "start_line": 81,
                    "end_line": 82
                }
            ],
            "inscope_functions": [
                "def __init__(self, settings):\n    self._pool = HTTPConnectionPool(reactor, persistent=True)\n    self._pool.maxPersistentPerHost = settings.getint('CONCURRENT_REQUESTS_PER_DOMAIN')\n    self._pool._factory.noisy = False\n    self._contextFactoryClass = load_object(settings['DOWNLOADER_CLIENTCONTEXTFACTORY'])\n    self._contextFactory = self._contextFactoryClass()\n    self._default_maxsize = settings.getint('DOWNLOAD_MAXSIZE')\n    self._default_warnsize = settings.getint('DOWNLOAD_WARNSIZE')\n    self._disconnect_timeout = 1",
                "def download_request(self, request, spider):\n    \"\"\"Return a deferred for the HTTP download\"\"\"\n    agent = ScrapyAgent(contextFactory=self._contextFactory, pool=self._pool,\n        maxsize=getattr(spider, 'download_maxsize', self._default_maxsize),\n        warnsize=getattr(spider, 'download_warnsize', self._default_warnsize))\n    return agent.download_request(request)",
                "def close(self):\n    d = self._pool.closeCachedConnections()\n    # closeCachedConnections will hang on network or server issues, so\n    # we'll manually timeout the deferred.\n    #\n    # Twisted issue addressing this problem can be found here:\n    # https://twistedmatrix.com/trac/ticket/7738.\n    #\n    # closeCachedConnections doesn't handle external errbacks, so we'll\n    # issue a callback after `_disconnect_timeout` seconds.\n    delayed_call = reactor.callLater(self._disconnect_timeout, d.callback, [])\n\n    def cancel_delayed_call(result):\n        if delayed_call.active():\n            delayed_call.cancel()\n        return result\n\n    d.addBoth(cancel_delayed_call)\n    return d",
                "def __init__(self, reactor, host, port, proxyConf, contextFactory,\n             timeout=30, bindAddress=None):\n    proxyHost, proxyPort, self._proxyAuthHeader = proxyConf\n    super(TunnelingTCP4ClientEndpoint, self).__init__(reactor, proxyHost,\n        proxyPort, timeout, bindAddress)\n    self._tunnelReadyDeferred = defer.Deferred()\n    self._tunneledHost = host\n    self._tunneledPort = port\n    self._contextFactory = contextFactory",
                "def requestTunnel(self, protocol):\n    \"\"\"Asks the proxy to open a tunnel.\"\"\"\n    tunnelReq = 'CONNECT %s:%s HTTP/1.1\\r\\n' % (self._tunneledHost,\n                                              self._tunneledPort)\n    if self._proxyAuthHeader:\n        tunnelReq += 'Proxy-Authorization: %s\\r\\n' % self._proxyAuthHeader\n    tunnelReq += '\\r\\n'\n    protocol.transport.write(tunnelReq)\n    self._protocolDataReceived = protocol.dataReceived\n    protocol.dataReceived = self.processProxyResponse\n    self._protocol = protocol\n    return protocol",
                "def processProxyResponse(self, bytes):\n    \"\"\"Processes the response from the proxy. If the tunnel is successfully\n    created, notifies the client that we are ready to send requests. If not\n    raises a TunnelError.\n    \"\"\"\n    self._protocol.dataReceived = self._protocolDataReceived\n    if  TunnelingTCP4ClientEndpoint._responseMatcher.match(bytes):\n        self._protocol.transport.startTLS(self._contextFactory,\n                                          self._protocolFactory)\n        self._tunnelReadyDeferred.callback(self._protocol)\n    else:\n        self._tunnelReadyDeferred.errback(\n            TunnelError('Could not open CONNECT tunnel.'))",
                "def connectFailed(self, reason):\n    \"\"\"Propagates the errback to the appropriate deferred.\"\"\"\n    self._tunnelReadyDeferred.errback(reason)",
                "def connect(self, protocolFactory):\n    self._protocolFactory = protocolFactory\n    connectDeferred = super(TunnelingTCP4ClientEndpoint,\n                            self).connect(protocolFactory)\n    connectDeferred.addCallback(self.requestTunnel)\n    connectDeferred.addErrback(self.connectFailed)\n    return self._tunnelReadyDeferred",
                "def __init__(self, reactor, proxyConf, contextFactory=None,\n             connectTimeout=None, bindAddress=None, pool=None):\n    super(TunnelingAgent, self).__init__(reactor, contextFactory,\n        connectTimeout, bindAddress, pool)\n    self._proxyConf = proxyConf\n    self._contextFactory = contextFactory",
                "def __init__(self, contextFactory=None, connectTimeout=10, bindAddress=None, pool=None,\n             maxsize=0, warnsize=0):\n    self._contextFactory = contextFactory\n    self._connectTimeout = connectTimeout\n    self._bindAddress = bindAddress\n    self._pool = pool\n    self._maxsize = maxsize\n    self._warnsize = warnsize",
                "def _get_agent(self, request, timeout):\n    bindaddress = request.meta.get('bindaddress') or self._bindAddress\n    proxy = request.meta.get('proxy')\n    if proxy:\n        _, _, proxyHost, proxyPort, proxyParams = _parse(proxy)\n        scheme = _parse(request.url)[0]\n        proxyHost = to_unicode(proxyHost)\n        omitConnectTunnel = proxyParams.find(b'noconnect') >= 0\n        if  scheme == b'https' and not omitConnectTunnel:\n            proxyConf = (proxyHost, proxyPort,\n                         request.headers.get(b'Proxy-Authorization', None))\n            return self._TunnelingAgent(reactor, proxyConf,\n                contextFactory=self._contextFactory, connectTimeout=timeout,\n                bindAddress=bindaddress, pool=self._pool)\n        else:\n            endpoint = TCP4ClientEndpoint(reactor, proxyHost, proxyPort,\n                timeout=timeout, bindAddress=bindaddress)\n            return self._ProxyAgent(endpoint)\n\n    return self._Agent(reactor, contextFactory=self._contextFactory,\n        connectTimeout=timeout, bindAddress=bindaddress, pool=self._pool)",
                "def download_request(self, request):\n    timeout = request.meta.get('download_timeout') or self._connectTimeout\n    agent = self._get_agent(request, timeout)\n\n    # request details\n    url = to_bytes(urldefrag(request.url)[0])\n    method = to_bytes(request.method)\n    headers = TxHeaders(request.headers)\n    if isinstance(agent, self._TunnelingAgent):\n        headers.removeHeader(b'Proxy-Authorization')\n    bodyproducer = _RequestBodyProducer(request.body) if request.body else None\n\n    start_time = time()\n    d = agent.request(method, url, headers, bodyproducer)\n    # set download latency\n    d.addCallback(self._cb_latency, request, start_time)\n    # response body is ready to be consumed\n    d.addCallback(self._cb_bodyready, request)\n    d.addCallback(self._cb_bodydone, request, url)\n    # check download timeout\n    self._timeout_cl = reactor.callLater(timeout, d.cancel)\n    d.addBoth(self._cb_timeout, request, url, timeout)\n    return d",
                "def _cb_timeout(self, result, request, url, timeout):\n    if self._timeout_cl.active():\n        self._timeout_cl.cancel()\n        return result\n    raise TimeoutError(\"Getting %s took longer than %s seconds.\" % (url, timeout))",
                "def _cb_latency(self, result, request, start_time):\n    request.meta['download_latency'] = time() - start_time\n    return result",
                "def _cb_bodyready(self, txresponse, request):\n    # deliverBody hangs for responses without body\n    if txresponse.length == 0:\n        return txresponse, b'', None\n\n    maxsize = request.meta.get('download_maxsize', self._maxsize)\n    warnsize = request.meta.get('download_warnsize', self._warnsize)\n    expected_size = txresponse.length if txresponse.length != UNKNOWN_LENGTH else -1\n\n    if maxsize and expected_size > maxsize:\n        logger.error(\"Expected response size (%(size)s) larger than \"\n                     \"download max size (%(maxsize)s).\",\n                     {'size': expected_size, 'maxsize': maxsize})\n        txresponse._transport._producer.loseConnection()\n        raise defer.CancelledError()\n\n    if warnsize and expected_size > warnsize:\n        logger.warning(\"Expected response size (%(size)s) larger than \"\n                       \"download warn size (%(warnsize)s).\",\n                       {'size': expected_size, 'warnsize': warnsize})\n\n    def _cancel(_):\n        txresponse._transport._producer.loseConnection()\n\n    d = defer.Deferred(_cancel)\n    txresponse.deliverBody(_ResponseReader(d, txresponse, request, maxsize, warnsize))\n    return d",
                "def _cb_bodydone(self, result, request, url):\n    txresponse, body, flags = result\n    status = int(txresponse.code)\n    headers = Headers(txresponse.headers.getAllRawHeaders())\n    url = to_unicode(url)\n    respcls = responsetypes.from_args(headers=headers, url=url)\n    return respcls(\n        url=url, status=status, headers=headers, body=body, flags=flags)",
                "def __init__(self, body):\n    self.body = body\n    self.length = len(body)",
                "def startProducing(self, consumer):\n    consumer.write(self.body)\n    return defer.succeed(None)",
                "def pauseProducing(self):\n    pass",
                "def stopProducing(self):\n    pass",
                "def __init__(self, finished, txresponse, request, maxsize, warnsize):\n    self._finished = finished\n    self._txresponse = txresponse\n    self._request = request\n    self._bodybuf = BytesIO()\n    self._maxsize  = maxsize\n    self._warnsize  = warnsize\n    self._bytes_received = 0",
                "def dataReceived(self, bodyBytes):\n    self._bodybuf.write(bodyBytes)\n    self._bytes_received += len(bodyBytes)\n\n    if self._maxsize and self._bytes_received > self._maxsize:\n        logger.error(\"Received (%(bytes)s) bytes larger than download \"\n                     \"max size (%(maxsize)s).\",\n                     {'bytes': self._bytes_received,\n                      'maxsize': self._maxsize})\n        self._finished.cancel()\n\n    if self._warnsize and self._bytes_received > self._warnsize:\n        logger.warning(\"Received (%(bytes)s) bytes larger than download \"\n                       \"warn size (%(warnsize)s).\",\n                       {'bytes': self._bytes_received,\n                        'warnsize': self._warnsize})",
                "def connectionLost(self, reason):\n    if self._finished.called:\n        return\n\n    body = self._bodybuf.getvalue()\n    if reason.check(ResponseDone):\n        self._finished.callback((self._txresponse, body, None))\n    elif reason.check(PotentialDataLoss):\n        self._finished.callback((self._txresponse, body, ['partial']))\n    else:\n        self._finished.errback(reason)",
                "def cancel_delayed_call(result):\n    if delayed_call.active():\n        delayed_call.cancel()\n    return result",
                "def _getEndpoint(self, uri):\n    return TunnelingTCP4ClientEndpoint(\n        self._reactor, uri.host, uri.port, self._proxyConf,\n        self._contextFactory, self._endpointFactory._connectTimeout,\n        self._endpointFactory._bindAddress)",
                "def _getEndpoint(self, scheme, host, port):\n    return TunnelingTCP4ClientEndpoint(\n        self._reactor, host, port, self._proxyConf,\n        self._contextFactory, self._connectTimeout,\n        self._bindAddress)",
                "def _cancel(_):\n    txresponse._transport._producer.loseConnection()"
            ],
            "inscope_function_signatures": [
                "__init__(self, settings)",
                "download_request(self, request, spider)",
                "close(self)",
                "__init__(self, reactor, host, port, proxyConf, contextFactory, timeout=30, bindAddress=None)",
                "requestTunnel(self, protocol)",
                "processProxyResponse(self, bytes)",
                "connectFailed(self, reason)",
                "connect(self, protocolFactory)",
                "__init__(self, reactor, proxyConf, contextFactory=None, connectTimeout=None, bindAddress=None, pool=None)",
                "__init__(self, contextFactory=None, connectTimeout=10, bindAddress=None, pool=None, maxsize=0, warnsize=0)",
                "_get_agent(self, request, timeout)",
                "download_request(self, request)",
                "_cb_timeout(self, result, request, url, timeout)",
                "_cb_latency(self, result, request, start_time)",
                "_cb_bodyready(self, txresponse, request)",
                "_cb_bodydone(self, result, request, url)",
                "__init__(self, body)",
                "startProducing(self, consumer)",
                "pauseProducing(self)",
                "stopProducing(self)",
                "__init__(self, finished, txresponse, request, maxsize, warnsize)",
                "dataReceived(self, bodyBytes)",
                "connectionLost(self, reason)",
                "cancel_delayed_call(result)",
                "_getEndpoint(self, uri)",
                "_getEndpoint(self, scheme, host, port)",
                "_cancel(_)"
            ],
            "variables_in_file": {
                "logger": [
                    313,
                    306,
                    244,
                    25,
                    251
                ],
                "logging.getLogger": [
                    25
                ],
                "logging": [
                    25
                ],
                "__name__": [
                    25
                ],
                "object": [
                    273,
                    163,
                    28
                ],
                "self._pool": [
                    32,
                    33,
                    191,
                    198,
                    42,
                    174,
                    48,
                    31
                ],
                "self": [
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    42,
                    43,
                    44,
                    48,
                    57,
                    85,
                    86,
                    88,
                    89,
                    90,
                    91,
                    95,
                    96,
                    97,
                    98,
                    101,
                    102,
                    103,
                    111,
                    113,
                    114,
                    115,
                    117,
                    122,
                    125,
                    127,
                    128,
                    129,
                    130,
                    143,
                    145,
                    146,
                    151,
                    152,
                    153,
                    157,
                    158,
                    159,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    179,
                    189,
                    190,
                    191,
                    195,
                    197,
                    198,
                    201,
                    202,
                    208,
                    215,
                    217,
                    218,
                    220,
                    221,
                    225,
                    226,
                    239,
                    240,
                    276,
                    277,
                    280,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    302,
                    303,
                    305,
                    308,
                    309,
                    310,
                    312,
                    315,
                    316,
                    319,
                    322,
                    324,
                    326,
                    328
                ],
                "HTTPConnectionPool": [
                    31
                ],
                "reactor": [
                    193,
                    197,
                    143,
                    86,
                    57,
                    220,
                    189,
                    31
                ],
                "self._pool.maxPersistentPerHost": [
                    32
                ],
                "settings.getint": [
                    32,
                    36,
                    37
                ],
                "settings": [
                    32,
                    34,
                    36,
                    37
                ],
                "self._pool._factory.noisy": [
                    33
                ],
                "self._pool._factory": [
                    33
                ],
                "self._contextFactoryClass": [
                    34,
                    35
                ],
                "load_object": [
                    34
                ],
                "self._contextFactory": [
                    35,
                    197,
                    42,
                    171,
                    113,
                    146,
                    152,
                    91,
                    190,
                    158
                ],
                "self._default_maxsize": [
                    43,
                    36
                ],
                "self._default_warnsize": [
                    44,
                    37
                ],
                "self._disconnect_timeout": [
                    57,
                    38
                ],
                "agent": [
                    202,
                    42,
                    45,
                    208,
                    213
                ],
                "ScrapyAgent": [
                    42
                ],
                "getattr": [
                    43,
                    44
                ],
                "spider": [
                    43,
                    44
                ],
                "agent.download_request": [
                    45
                ],
                "request": [
                    259,
                    295,
                    45,
                    179,
                    180,
                    183,
                    188,
                    201,
                    202,
                    205,
                    206,
                    207,
                    210,
                    215,
                    217,
                    218,
                    221,
                    231,
                    239,
                    240
                ],
                "d": [
                    64,
                    65,
                    258,
                    259,
                    217,
                    260,
                    48,
                    213,
                    215,
                    57,
                    218,
                    220,
                    221,
                    222
                ],
                "self._pool.closeCachedConnections": [
                    48
                ],
                "delayed_call": [
                    57,
                    60,
                    61
                ],
                "reactor.callLater": [
                    57,
                    220
                ],
                "d.callback": [
                    57
                ],
                "delayed_call.active": [
                    60
                ],
                "delayed_call.cancel": [
                    61
                ],
                "result": [
                    232,
                    227,
                    62,
                    263
                ],
                "d.addBoth": [
                    64,
                    221
                ],
                "cancel_delayed_call": [
                    64
                ],
                "Exception": [
                    68
                ],
                "TCP4ClientEndpoint": [
                    72,
                    193
                ],
                "_responseMatcher": [
                    81
                ],
                "re.compile": [
                    81
                ],
                "re": [
                    81
                ],
                "proxyHost": [
                    193,
                    85,
                    182,
                    86,
                    184,
                    187
                ],
                "proxyPort": [
                    193,
                    85,
                    182,
                    87,
                    187
                ],
                "self._proxyAuthHeader": [
                    97,
                    98,
                    85
                ],
                "proxyConf": [
                    145,
                    187,
                    85,
                    189
                ],
                "__init__": [
                    86,
                    143
                ],
                "super": [
                    126,
                    86,
                    143
                ],
                "TunnelingTCP4ClientEndpoint": [
                    112,
                    150,
                    86,
                    156,
                    126
                ],
                "timeout": [
                    194,
                    228,
                    198,
                    201,
                    202,
                    87,
                    220,
                    221,
                    190
                ],
                "bindAddress": [
                    144,
                    173,
                    87
                ],
                "self._tunnelReadyDeferred": [
                    130,
                    115,
                    117,
                    88,
                    122
                ],
                "defer.Deferred": [
                    88,
                    258
                ],
                "defer": [
                    88,
                    248,
                    258,
                    281
                ],
                "self._tunneledHost": [
                    89,
                    95
                ],
                "host": [
                    89,
                    157
                ],
                "self._tunneledPort": [
                    96,
                    90
                ],
                "port": [
                    90,
                    157
                ],
                "contextFactory": [
                    146,
                    91,
                    171,
                    143
                ],
                "tunnelReq": [
                    98,
                    99,
                    100,
                    95
                ],
                "protocol.transport.write": [
                    100
                ],
                "protocol.transport": [
                    100
                ],
                "protocol": [
                    290,
                    100,
                    101,
                    102,
                    103,
                    104
                ],
                "self._protocolDataReceived": [
                    101,
                    111
                ],
                "protocol.dataReceived": [
                    101,
                    102
                ],
                "self.processProxyResponse": [
                    102
                ],
                "self._protocol": [
                    113,
                    115,
                    111,
                    103
                ],
                "self._protocol.dataReceived": [
                    111
                ],
                "TunnelingTCP4ClientEndpoint._responseMatcher.match": [
                    112
                ],
                "TunnelingTCP4ClientEndpoint._responseMatcher": [
                    112
                ],
                "bytes": [
                    112
                ],
                "self._protocol.transport.startTLS": [
                    113
                ],
                "self._protocol.transport": [
                    113
                ],
                "self._protocolFactory": [
                    114,
                    125
                ],
                "self._tunnelReadyDeferred.callback": [
                    115
                ],
                "self._tunnelReadyDeferred.errback": [
                    122,
                    117
                ],
                "TunnelError": [
                    118
                ],
                "reason": [
                    328,
                    122,
                    323,
                    325
                ],
                "protocolFactory": [
                    125,
                    127
                ],
                "connectDeferred": [
                    128,
                    129,
                    126
                ],
                "connect": [
                    126
                ],
                "connectDeferred.addCallback": [
                    128
                ],
                "self.requestTunnel": [
                    128
                ],
                "connectDeferred.addErrback": [
                    129
                ],
                "self.connectFailed": [
                    129
                ],
                "Agent": [
                    133,
                    165
                ],
                "TunnelingAgent": [
                    167,
                    143
                ],
                "connectTimeout": [
                    144,
                    172
                ],
                "pool": [
                    144,
                    174
                ],
                "self._proxyConf": [
                    145,
                    157,
                    151
                ],
                "twisted_version": [
                    148
                ],
                "self._reactor": [
                    157,
                    151
                ],
                "uri.host": [
                    151
                ],
                "uri": [
                    151
                ],
                "uri.port": [
                    151
                ],
                "self._endpointFactory._connectTimeout": [
                    152
                ],
                "self._endpointFactory": [
                    152,
                    153
                ],
                "self._endpointFactory._bindAddress": [
                    153
                ],
                "self._connectTimeout": [
                    201,
                    172,
                    158
                ],
                "self._bindAddress": [
                    179,
                    173,
                    159
                ],
                "_Agent": [
                    165
                ],
                "_ProxyAgent": [
                    166
                ],
                "ProxyAgent": [
                    166
                ],
                "_TunnelingAgent": [
                    167
                ],
                "self._maxsize": [
                    297,
                    239,
                    175,
                    305,
                    309
                ],
                "maxsize": [
                    259,
                    297,
                    239,
                    175,
                    243,
                    246
                ],
                "self._warnsize": [
                    298,
                    176,
                    240,
                    312,
                    316
                ],
                "warnsize": [
                    259,
                    298,
                    176,
                    240,
                    250,
                    253
                ],
                "bindaddress": [
                    194,
                    179,
                    198,
                    191
                ],
                "request.meta.get": [
                    201,
                    239,
                    240,
                    179,
                    180
                ],
                "request.meta": [
                    231,
                    201,
                    239,
                    240,
                    179,
                    180
                ],
                "proxy": [
                    180,
                    181,
                    182
                ],
                "_": [
                    182
                ],
                "proxyParams": [
                    185,
                    182
                ],
                "_parse": [
                    182,
                    183
                ],
                "scheme": [
                    186,
                    183
                ],
                "request.url": [
                    205,
                    183
                ],
                "to_unicode": [
                    184,
                    266
                ],
                "omitConnectTunnel": [
                    185,
                    186
                ],
                "proxyParams.find": [
                    185
                ],
                "request.headers.get": [
                    188
                ],
                "request.headers": [
                    188,
                    207
                ],
                "self._TunnelingAgent": [
                    208,
                    189
                ],
                "endpoint": [
                    193,
                    195
                ],
                "self._ProxyAgent": [
                    195
                ],
                "self._Agent": [
                    197
                ],
                "self._get_agent": [
                    202
                ],
                "url": [
                    228,
                    266,
                    267,
                    205,
                    269,
                    213,
                    218,
                    221
                ],
                "to_bytes": [
                    205,
                    206
                ],
                "urldefrag": [
                    205
                ],
                "method": [
                    213,
                    206
                ],
                "request.method": [
                    206
                ],
                "headers": [
                    265,
                    267,
                    269,
                    207,
                    209,
                    213
                ],
                "TxHeaders": [
                    207
                ],
                "isinstance": [
                    208
                ],
                "headers.removeHeader": [
                    209
                ],
                "bodyproducer": [
                    210,
                    213
                ],
                "request.body": [
                    210
                ],
                "_RequestBodyProducer": [
                    210
                ],
                "start_time": [
                    231,
                    212,
                    215
                ],
                "time": [
                    212,
                    231
                ],
                "agent.request": [
                    213
                ],
                "d.addCallback": [
                    217,
                    218,
                    215
                ],
                "self._cb_latency": [
                    215
                ],
                "self._cb_bodyready": [
                    217
                ],
                "self._cb_bodydone": [
                    218
                ],
                "self._timeout_cl": [
                    225,
                    226,
                    220
                ],
                "d.cancel": [
                    220
                ],
                "self._cb_timeout": [
                    221
                ],
                "self._timeout_cl.active": [
                    225
                ],
                "self._timeout_cl.cancel": [
                    226
                ],
                "TimeoutError": [
                    228
                ],
                "txresponse.length": [
                    241,
                    236
                ],
                "txresponse": [
                    256,
                    259,
                    294,
                    263,
                    264,
                    265,
                    236,
                    237,
                    241,
                    247
                ],
                "expected_size": [
                    241,
                    243,
                    246,
                    250,
                    253
                ],
                "UNKNOWN_LENGTH": [
                    241
                ],
                "logger.error": [
                    306,
                    244
                ],
                "txresponse._transport._producer.loseConnection": [
                    256,
                    247
                ],
                "txresponse._transport._producer": [
                    256,
                    247
                ],
                "txresponse._transport": [
                    256,
                    247
                ],
                "defer.CancelledError": [
                    248
                ],
                "logger.warning": [
                    313,
                    251
                ],
                "_cancel": [
                    258
                ],
                "txresponse.deliverBody": [
                    259
                ],
                "_ResponseReader": [
                    259
                ],
                "body": [
                    322,
                    324,
                    326,
                    263,
                    269,
                    276,
                    277
                ],
                "flags": [
                    269,
                    263
                ],
                "status": [
                    264,
                    269
                ],
                "int": [
                    264
                ],
                "txresponse.code": [
                    264
                ],
                "Headers": [
                    265
                ],
                "txresponse.headers.getAllRawHeaders": [
                    265
                ],
                "txresponse.headers": [
                    265
                ],
                "respcls": [
                    267,
                    268
                ],
                "responsetypes.from_args": [
                    267
                ],
                "responsetypes": [
                    267
                ],
                "self.body": [
                    280,
                    276
                ],
                "self.length": [
                    277
                ],
                "len": [
                    277,
                    303
                ],
                "consumer.write": [
                    280
                ],
                "consumer": [
                    280
                ],
                "defer.succeed": [
                    281
                ],
                "implementer": [
                    272
                ],
                "IBodyProducer": [
                    272
                ],
                "protocol.Protocol": [
                    290
                ],
                "self._finished": [
                    324,
                    293,
                    326,
                    328,
                    310,
                    319
                ],
                "finished": [
                    293
                ],
                "self._txresponse": [
                    326,
                    324,
                    294
                ],
                "self._request": [
                    295
                ],
                "self._bodybuf": [
                    296,
                    322,
                    302
                ],
                "BytesIO": [
                    296
                ],
                "self._bytes_received": [
                    299,
                    303,
                    305,
                    308,
                    312,
                    315
                ],
                "self._bodybuf.write": [
                    302
                ],
                "bodyBytes": [
                    302,
                    303
                ],
                "self._finished.cancel": [
                    310
                ],
                "self._finished.called": [
                    319
                ],
                "self._bodybuf.getvalue": [
                    322
                ],
                "reason.check": [
                    323,
                    325
                ],
                "ResponseDone": [
                    323
                ],
                "self._finished.callback": [
                    324,
                    326
                ],
                "PotentialDataLoss": [
                    325
                ],
                "self._finished.errback": [
                    328
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    313,
                    306,
                    244,
                    25,
                    251
                ],
                "logging.getLogger": [
                    25
                ],
                "logging": [
                    25
                ],
                "self._pool": [
                    32,
                    33,
                    191,
                    198,
                    42,
                    174,
                    48,
                    31
                ],
                "self": [
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    42,
                    43,
                    44,
                    48,
                    57,
                    85,
                    86,
                    88,
                    89,
                    90,
                    91,
                    95,
                    96,
                    97,
                    98,
                    101,
                    102,
                    103,
                    111,
                    113,
                    114,
                    115,
                    117,
                    122,
                    125,
                    127,
                    128,
                    129,
                    130,
                    143,
                    145,
                    146,
                    151,
                    152,
                    153,
                    157,
                    158,
                    159,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    179,
                    189,
                    190,
                    191,
                    195,
                    197,
                    198,
                    201,
                    202,
                    208,
                    215,
                    217,
                    218,
                    220,
                    221,
                    225,
                    226,
                    239,
                    240,
                    276,
                    277,
                    280,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    302,
                    303,
                    305,
                    308,
                    309,
                    310,
                    312,
                    315,
                    316,
                    319,
                    322,
                    324,
                    326,
                    328
                ],
                "HTTPConnectionPool": [
                    31
                ],
                "reactor": [
                    193,
                    197,
                    143,
                    86,
                    57,
                    220,
                    189,
                    31
                ],
                "self._pool.maxPersistentPerHost": [
                    32
                ],
                "settings.getint": [
                    32,
                    36,
                    37
                ],
                "settings": [
                    32,
                    34,
                    36,
                    37
                ],
                "self._pool._factory.noisy": [
                    33
                ],
                "self._pool._factory": [
                    33
                ],
                "self._contextFactoryClass": [
                    34,
                    35
                ],
                "load_object": [
                    34
                ],
                "self._contextFactory": [
                    35,
                    197,
                    42,
                    171,
                    113,
                    146,
                    152,
                    91,
                    190,
                    158
                ],
                "self._default_maxsize": [
                    43,
                    36
                ],
                "self._default_warnsize": [
                    44,
                    37
                ],
                "self._disconnect_timeout": [
                    57,
                    38
                ],
                "agent": [
                    202,
                    42,
                    45,
                    208,
                    213
                ],
                "ScrapyAgent": [
                    42
                ],
                "spider": [
                    43,
                    44
                ],
                "agent.download_request": [
                    45
                ],
                "request": [
                    259,
                    295,
                    45,
                    179,
                    180,
                    183,
                    188,
                    201,
                    202,
                    205,
                    206,
                    207,
                    210,
                    215,
                    217,
                    218,
                    221,
                    231,
                    239,
                    240
                ],
                "d": [
                    64,
                    65,
                    258,
                    259,
                    217,
                    260,
                    48,
                    213,
                    215,
                    57,
                    218,
                    220,
                    221,
                    222
                ],
                "self._pool.closeCachedConnections": [
                    48
                ],
                "delayed_call": [
                    57,
                    60,
                    61
                ],
                "reactor.callLater": [
                    57,
                    220
                ],
                "d.callback": [
                    57
                ],
                "delayed_call.active": [
                    60
                ],
                "delayed_call.cancel": [
                    61
                ],
                "result": [
                    232,
                    227,
                    62,
                    263
                ],
                "d.addBoth": [
                    64,
                    221
                ],
                "cancel_delayed_call": [
                    64
                ],
                "TCP4ClientEndpoint": [
                    72,
                    193
                ],
                "_responseMatcher": [
                    81
                ],
                "re.compile": [
                    81
                ],
                "re": [
                    81
                ],
                "proxyHost": [
                    193,
                    85,
                    182,
                    86,
                    184,
                    187
                ],
                "proxyPort": [
                    193,
                    85,
                    182,
                    87,
                    187
                ],
                "self._proxyAuthHeader": [
                    97,
                    98,
                    85
                ],
                "proxyConf": [
                    145,
                    187,
                    85,
                    189
                ],
                "__init__": [
                    86,
                    143
                ],
                "TunnelingTCP4ClientEndpoint": [
                    112,
                    150,
                    86,
                    156,
                    126
                ],
                "timeout": [
                    194,
                    228,
                    198,
                    201,
                    202,
                    87,
                    220,
                    221,
                    190
                ],
                "bindAddress": [
                    144,
                    173,
                    87
                ],
                "self._tunnelReadyDeferred": [
                    130,
                    115,
                    117,
                    88,
                    122
                ],
                "defer.Deferred": [
                    88,
                    258
                ],
                "defer": [
                    88,
                    248,
                    258,
                    281
                ],
                "self._tunneledHost": [
                    89,
                    95
                ],
                "host": [
                    89,
                    157
                ],
                "self._tunneledPort": [
                    96,
                    90
                ],
                "port": [
                    90,
                    157
                ],
                "contextFactory": [
                    146,
                    91,
                    171,
                    143
                ],
                "tunnelReq": [
                    98,
                    99,
                    100,
                    95
                ],
                "protocol.transport.write": [
                    100
                ],
                "protocol.transport": [
                    100
                ],
                "protocol": [
                    290,
                    100,
                    101,
                    102,
                    103,
                    104
                ],
                "self._protocolDataReceived": [
                    101,
                    111
                ],
                "protocol.dataReceived": [
                    101,
                    102
                ],
                "self.processProxyResponse": [
                    102
                ],
                "self._protocol": [
                    113,
                    115,
                    111,
                    103
                ],
                "self._protocol.dataReceived": [
                    111
                ],
                "TunnelingTCP4ClientEndpoint._responseMatcher.match": [
                    112
                ],
                "TunnelingTCP4ClientEndpoint._responseMatcher": [
                    112
                ],
                "self._protocol.transport.startTLS": [
                    113
                ],
                "self._protocol.transport": [
                    113
                ],
                "self._protocolFactory": [
                    114,
                    125
                ],
                "self._tunnelReadyDeferred.callback": [
                    115
                ],
                "self._tunnelReadyDeferred.errback": [
                    122,
                    117
                ],
                "TunnelError": [
                    118
                ],
                "reason": [
                    328,
                    122,
                    323,
                    325
                ],
                "protocolFactory": [
                    125,
                    127
                ],
                "connectDeferred": [
                    128,
                    129,
                    126
                ],
                "connect": [
                    126
                ],
                "connectDeferred.addCallback": [
                    128
                ],
                "self.requestTunnel": [
                    128
                ],
                "connectDeferred.addErrback": [
                    129
                ],
                "self.connectFailed": [
                    129
                ],
                "Agent": [
                    133,
                    165
                ],
                "TunnelingAgent": [
                    167,
                    143
                ],
                "connectTimeout": [
                    144,
                    172
                ],
                "pool": [
                    144,
                    174
                ],
                "self._proxyConf": [
                    145,
                    157,
                    151
                ],
                "twisted_version": [
                    148
                ],
                "self._reactor": [
                    157,
                    151
                ],
                "uri.host": [
                    151
                ],
                "uri": [
                    151
                ],
                "uri.port": [
                    151
                ],
                "self._endpointFactory._connectTimeout": [
                    152
                ],
                "self._endpointFactory": [
                    152,
                    153
                ],
                "self._endpointFactory._bindAddress": [
                    153
                ],
                "self._connectTimeout": [
                    201,
                    172,
                    158
                ],
                "self._bindAddress": [
                    179,
                    173,
                    159
                ],
                "_Agent": [
                    165
                ],
                "_ProxyAgent": [
                    166
                ],
                "ProxyAgent": [
                    166
                ],
                "_TunnelingAgent": [
                    167
                ],
                "self._maxsize": [
                    297,
                    239,
                    175,
                    305,
                    309
                ],
                "maxsize": [
                    259,
                    297,
                    239,
                    175,
                    243,
                    246
                ],
                "self._warnsize": [
                    298,
                    176,
                    240,
                    312,
                    316
                ],
                "warnsize": [
                    259,
                    298,
                    176,
                    240,
                    250,
                    253
                ],
                "bindaddress": [
                    194,
                    179,
                    198,
                    191
                ],
                "request.meta.get": [
                    201,
                    239,
                    240,
                    179,
                    180
                ],
                "request.meta": [
                    231,
                    201,
                    239,
                    240,
                    179,
                    180
                ],
                "proxy": [
                    180,
                    181,
                    182
                ],
                "_": [
                    182
                ],
                "proxyParams": [
                    185,
                    182
                ],
                "_parse": [
                    182,
                    183
                ],
                "scheme": [
                    186,
                    183
                ],
                "request.url": [
                    205,
                    183
                ],
                "to_unicode": [
                    184,
                    266
                ],
                "omitConnectTunnel": [
                    185,
                    186
                ],
                "proxyParams.find": [
                    185
                ],
                "request.headers.get": [
                    188
                ],
                "request.headers": [
                    188,
                    207
                ],
                "self._TunnelingAgent": [
                    208,
                    189
                ],
                "endpoint": [
                    193,
                    195
                ],
                "self._ProxyAgent": [
                    195
                ],
                "self._Agent": [
                    197
                ],
                "self._get_agent": [
                    202
                ],
                "url": [
                    228,
                    266,
                    267,
                    205,
                    269,
                    213,
                    218,
                    221
                ],
                "to_bytes": [
                    205,
                    206
                ],
                "urldefrag": [
                    205
                ],
                "method": [
                    213,
                    206
                ],
                "request.method": [
                    206
                ],
                "headers": [
                    265,
                    267,
                    269,
                    207,
                    209,
                    213
                ],
                "TxHeaders": [
                    207
                ],
                "headers.removeHeader": [
                    209
                ],
                "bodyproducer": [
                    210,
                    213
                ],
                "request.body": [
                    210
                ],
                "_RequestBodyProducer": [
                    210
                ],
                "start_time": [
                    231,
                    212,
                    215
                ],
                "time": [
                    212,
                    231
                ],
                "agent.request": [
                    213
                ],
                "d.addCallback": [
                    217,
                    218,
                    215
                ],
                "self._cb_latency": [
                    215
                ],
                "self._cb_bodyready": [
                    217
                ],
                "self._cb_bodydone": [
                    218
                ],
                "self._timeout_cl": [
                    225,
                    226,
                    220
                ],
                "d.cancel": [
                    220
                ],
                "self._cb_timeout": [
                    221
                ],
                "self._timeout_cl.active": [
                    225
                ],
                "self._timeout_cl.cancel": [
                    226
                ],
                "txresponse.length": [
                    241,
                    236
                ],
                "txresponse": [
                    256,
                    259,
                    294,
                    263,
                    264,
                    265,
                    236,
                    237,
                    241,
                    247
                ],
                "expected_size": [
                    241,
                    243,
                    246,
                    250,
                    253
                ],
                "UNKNOWN_LENGTH": [
                    241
                ],
                "logger.error": [
                    306,
                    244
                ],
                "txresponse._transport._producer.loseConnection": [
                    256,
                    247
                ],
                "txresponse._transport._producer": [
                    256,
                    247
                ],
                "txresponse._transport": [
                    256,
                    247
                ],
                "defer.CancelledError": [
                    248
                ],
                "logger.warning": [
                    313,
                    251
                ],
                "_cancel": [
                    258
                ],
                "txresponse.deliverBody": [
                    259
                ],
                "_ResponseReader": [
                    259
                ],
                "body": [
                    322,
                    324,
                    326,
                    263,
                    269,
                    276,
                    277
                ],
                "flags": [
                    269,
                    263
                ],
                "status": [
                    264,
                    269
                ],
                "txresponse.code": [
                    264
                ],
                "Headers": [
                    265
                ],
                "txresponse.headers.getAllRawHeaders": [
                    265
                ],
                "txresponse.headers": [
                    265
                ],
                "respcls": [
                    267,
                    268
                ],
                "responsetypes.from_args": [
                    267
                ],
                "responsetypes": [
                    267
                ],
                "self.body": [
                    280,
                    276
                ],
                "self.length": [
                    277
                ],
                "consumer.write": [
                    280
                ],
                "consumer": [
                    280
                ],
                "defer.succeed": [
                    281
                ],
                "implementer": [
                    272
                ],
                "IBodyProducer": [
                    272
                ],
                "protocol.Protocol": [
                    290
                ],
                "self._finished": [
                    324,
                    293,
                    326,
                    328,
                    310,
                    319
                ],
                "finished": [
                    293
                ],
                "self._txresponse": [
                    326,
                    324,
                    294
                ],
                "self._request": [
                    295
                ],
                "self._bodybuf": [
                    296,
                    322,
                    302
                ],
                "BytesIO": [
                    296
                ],
                "self._bytes_received": [
                    299,
                    303,
                    305,
                    308,
                    312,
                    315
                ],
                "self._bodybuf.write": [
                    302
                ],
                "bodyBytes": [
                    302,
                    303
                ],
                "self._finished.cancel": [
                    310
                ],
                "self._finished.called": [
                    319
                ],
                "self._bodybuf.getvalue": [
                    322
                ],
                "reason.check": [
                    323,
                    325
                ],
                "ResponseDone": [
                    323
                ],
                "self._finished.callback": [
                    324,
                    326
                ],
                "PotentialDataLoss": [
                    325
                ],
                "self._finished.errback": [
                    328
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_24/tests/test_downloader_handlers.py",
                "test_function": "test_download_with_proxy_https_timeout",
                "test_function_code": "    @defer.inlineCallbacks\n    def test_download_with_proxy_https_timeout(self):\n        http_proxy = self.getURL('')\n        domain = 'https://no-such-domain.nosuch'\n        request = Request(\n            domain, meta={'proxy': http_proxy, 'download_timeout': 0.2})\n        d = self.download_request(request, Spider('foo'))\n        timeout = yield self.assertFailure(d, error.TimeoutError)\n        self.assertIn(domain, timeout.osError)",
                "test_error": "twisted.trial.unittest.FailTest:  Expected: (<class 'twisted.internet.error.TimeoutError'>,) Got: [Failure instance: Traceback: <class 'TypeError'>: Data must not be unicode /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/protocol.py:514:makeConnection /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/endpoints.py:125:connectionMade /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:460:callback /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:568:_startRunCallbacks --- <exception caught here> --- /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:654:_runCallbacks /home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_24/scrapy/core/downloader/handlers/http11.py:100:requestTunnel /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/_newtls.py:191:write /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/abstract.py:349:write ]",
                "full_test_error": "self = <tests.test_downloader_handlers.HttpProxyTestCase testMethod=test_download_with_proxy_https_timeout>\n\n    @defer.inlineCallbacks\n    def test_download_with_proxy_https_timeout(self):\n        http_proxy = self.getURL('')\n        domain = 'https://no-such-domain.nosuch'\n        request = Request(\n            domain, meta={'proxy': http_proxy, 'download_timeout': 0.2})\n        d = self.download_request(request, Spider('foo'))\n>       timeout = yield self.assertFailure(d, error.TimeoutError)\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_24/tests/test_downloader_handlers.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:654: in _runCallbacks\n    current.result = callback(current.result, *args, **kw)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfailure = <twisted.python.failure.Failure builtins.TypeError: Data must not be unicode>\n\n    def _eb(failure):\n        if failure.check(*expectedFailures):\n            return failure.value\n        else:\n            output = ('\\nExpected: %r\\nGot:\\n%s'\n                      % (expectedFailures, str(failure)))\n>           raise self.failureException(output)\nE           twisted.trial.unittest.FailTest: \nE           Expected: (<class 'twisted.internet.error.TimeoutError'>,)\nE           Got:\nE           [Failure instance: Traceback: <class 'TypeError'>: Data must not be unicode\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/protocol.py:514:makeConnection\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/endpoints.py:125:connectionMade\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:460:callback\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:568:_startRunCallbacks\nE           --- <exception caught here> ---\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:654:_runCallbacks\nE           /home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_24/scrapy/core/downloader/handlers/http11.py:100:requestTunnel\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/_newtls.py:191:write\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/abstract.py:349:write\nE           ]\n\n/home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/trial/_asynctest.py:75: FailTest",
                "traceback": "/home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:654: in _runCallbacks\n    current.result = callback(current.result, *args, **kw)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfailure = <twisted.python.failure.Failure builtins.TypeError: Data must not be unicode>\n\n    def _eb(failure):\n        if failure.check(*expectedFailures):\n            return failure.value\n        else:\n            output = ('\\nExpected: %r\\nGot:\\n%s'\n                      % (expectedFailures, str(failure)))\n>           raise self.failureException(output)\nE           twisted.trial.unittest.FailTest: \nE           Expected: (<class 'twisted.internet.error.TimeoutError'>,)\nE           Got:\nE           [Failure instance: Traceback: <class 'TypeError'>: Data must not be unicode\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/protocol.py:514:makeConnection\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/endpoints.py:125:connectionMade\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:460:callback\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:568:_startRunCallbacks\nE           --- <exception caught here> ---\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/defer.py:654:_runCallbacks\nE           /home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_24/scrapy/core/downloader/handlers/http11.py:100:requestTunnel\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/_newtls.py:191:write\nE           /home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/internet/abstract.py:349:write\nE           ]\n\n/home/ubuntu/Desktop/bgp_envs_local/envs/scrapy_24/lib/python3.8/site-packages/twisted/trial/_asynctest.py:75: FailTest",
                "test_function_decorators": [
                    "defer.inlineCallbacks"
                ]
            }
        ]
    }
}