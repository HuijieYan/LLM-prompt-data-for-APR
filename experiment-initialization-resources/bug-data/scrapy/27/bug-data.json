{
    "scrapy:27": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/scrapy/downloadermiddlewares/redirect.py": {
            "buggy_functions": [
                {
                    "function_name": "process_response",
                    "function_code": "def process_response(self, request, response, spider):\n    if (request.meta.get('dont_redirect', False) or\n           response.status in getattr(spider, 'handle_httpstatus_list', [])):\n        return response\n\n    if request.method == 'HEAD':\n        if response.status in [301, 302, 303, 307] and 'Location' in response.headers:\n            redirected_url = urljoin(request.url, response.headers['location'])\n            redirected = request.replace(url=redirected_url)\n            return self._redirect(redirected, request, spider, response.status)\n        else:\n            return response\n\n    if response.status in [302, 303] and 'Location' in response.headers:\n        redirected_url = urljoin(request.url, response.headers['location'])\n        redirected = self._redirect_request_using_get(request, redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n\n    if response.status in [301, 307] and 'Location' in response.headers:\n        redirected_url = urljoin(request.url, response.headers['location'])\n        redirected = request.replace(url=redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n\n    return response\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 56,
                    "end_line": 79,
                    "variables": {
                        "request.meta.get": [
                            57
                        ],
                        "request.meta": [
                            57
                        ],
                        "request": [
                            64,
                            65,
                            70,
                            71,
                            72,
                            75,
                            76,
                            77,
                            57,
                            61,
                            63
                        ],
                        "response.status": [
                            65,
                            69,
                            72,
                            74,
                            77,
                            58,
                            62
                        ],
                        "response": [
                            65,
                            67,
                            69,
                            70,
                            72,
                            74,
                            75,
                            77,
                            79,
                            58,
                            59,
                            62,
                            63
                        ],
                        "getattr": [
                            58
                        ],
                        "spider": [
                            72,
                            65,
                            58,
                            77
                        ],
                        "request.method": [
                            61
                        ],
                        "response.headers": [
                            69,
                            70,
                            74,
                            75,
                            62,
                            63
                        ],
                        "redirected_url": [
                            64,
                            70,
                            71,
                            75,
                            76,
                            63
                        ],
                        "urljoin": [
                            75,
                            70,
                            63
                        ],
                        "request.url": [
                            75,
                            70,
                            63
                        ],
                        "redirected": [
                            64,
                            65,
                            71,
                            72,
                            76,
                            77
                        ],
                        "request.replace": [
                            64,
                            76
                        ],
                        "self._redirect": [
                            72,
                            65,
                            77
                        ],
                        "self": [
                            72,
                            65,
                            77,
                            71
                        ],
                        "self._redirect_request_using_get": [
                            71
                        ]
                    },
                    "filtered_variables": {
                        "request.meta.get": [
                            57
                        ],
                        "request.meta": [
                            57
                        ],
                        "request": [
                            64,
                            65,
                            70,
                            71,
                            72,
                            75,
                            76,
                            77,
                            57,
                            61,
                            63
                        ],
                        "response.status": [
                            65,
                            69,
                            72,
                            74,
                            77,
                            58,
                            62
                        ],
                        "response": [
                            65,
                            67,
                            69,
                            70,
                            72,
                            74,
                            75,
                            77,
                            79,
                            58,
                            59,
                            62,
                            63
                        ],
                        "spider": [
                            72,
                            65,
                            58,
                            77
                        ],
                        "request.method": [
                            61
                        ],
                        "response.headers": [
                            69,
                            70,
                            74,
                            75,
                            62,
                            63
                        ],
                        "redirected_url": [
                            64,
                            70,
                            71,
                            75,
                            76,
                            63
                        ],
                        "urljoin": [
                            75,
                            70,
                            63
                        ],
                        "request.url": [
                            75,
                            70,
                            63
                        ],
                        "redirected": [
                            64,
                            65,
                            71,
                            72,
                            76,
                            77
                        ],
                        "request.replace": [
                            64,
                            76
                        ],
                        "self._redirect": [
                            72,
                            65,
                            77
                        ],
                        "self": [
                            72,
                            65,
                            77,
                            71
                        ],
                        "self._redirect_request_using_get": [
                            71
                        ]
                    },
                    "diff_line_number": 58,
                    "class_data": {
                        "signature": "class RedirectMiddleware(BaseRedirectMiddleware)",
                        "docstring": "Handle redirection of requests based on response status and meta-refresh html tag",
                        "constructor_docstring": null,
                        "functions": [
                            "def process_response(self, request, response, spider):\n    if request.meta.get('dont_redirect', False) or response.status in getattr(spider, 'handle_httpstatus_list', []):\n        return response\n    if request.method == 'HEAD':\n        if response.status in [301, 302, 303, 307] and 'Location' in response.headers:\n            redirected_url = urljoin(request.url, response.headers['location'])\n            redirected = request.replace(url=redirected_url)\n            return self._redirect(redirected, request, spider, response.status)\n        else:\n            return response\n    if response.status in [302, 303] and 'Location' in response.headers:\n        redirected_url = urljoin(request.url, response.headers['location'])\n        redirected = self._redirect_request_using_get(request, redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n    if response.status in [301, 307] and 'Location' in response.headers:\n        redirected_url = urljoin(request.url, response.headers['location'])\n        redirected = request.replace(url=redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n    return response"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "process_response(self, request, response, spider)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": []
                    },
                    "used_imports": [
                        "from six.moves.urllib.parse import urljoin"
                    ],
                    "variable_values": [
                        [
                            {
                                "request.meta.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.meta": {
                                    "variable_value": "{'handle_httpstatus_list': [404, 301, 302]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "request": {
                                    "variable_value": "<GET http://www.example.com/301>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "response.status": {
                                    "variable_value": "301",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "response": {
                                    "variable_value": "<301 http://www.example.com/301>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "spider": {
                                    "variable_value": "<Spider 'foo' at 0x7f6960af1ca0>",
                                    "variable_type": "Spider",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "response.headers": {
                                    "variable_value": "{b'Location': [b'http://www.example.com/redirected']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "redirected_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urljoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.url": {
                                    "variable_value": "'http://www.example.com/301'",
                                    "variable_type": "str",
                                    "variable_shape": "26"
                                },
                                "redirected": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.replace": {
                                    "variable_value": "<bound method Request.replace of <GET http://www.example.com/301>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._redirect": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7f6960af1be0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7f6960af1be0>",
                                    "variable_type": "RedirectMiddleware",
                                    "variable_shape": null
                                },
                                "self._redirect_request_using_get": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect_request_using_get of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7f6960af1be0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "request.meta.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.meta": {
                                    "variable_value": "{'handle_httpstatus_list': [404, 301, 302]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "request": {
                                    "variable_value": "<GET http://www.example.com/301>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "response.status": {
                                    "variable_value": "301",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "response": {
                                    "variable_value": "<301 http://www.example.com/301>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "spider": {
                                    "variable_value": "<Spider 'foo' at 0x7ff791d734f0>",
                                    "variable_type": "Spider",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "response.headers": {
                                    "variable_value": "{b'Location': [b'http://www.example.com/redirected']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "redirected_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urljoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.url": {
                                    "variable_value": "'http://www.example.com/301'",
                                    "variable_type": "str",
                                    "variable_shape": "26"
                                },
                                "redirected": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.replace": {
                                    "variable_value": "<bound method Request.replace of <GET http://www.example.com/301>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._redirect": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>",
                                    "variable_type": "RedirectMiddleware",
                                    "variable_shape": null
                                },
                                "self._redirect_request_using_get": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect_request_using_get of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "request.meta.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.meta": {
                                    "variable_value": "{'handle_httpstatus_list': [404, 301, 302]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "request": {
                                    "variable_value": "<GET http://www.example.com/301>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "response.status": {
                                    "variable_value": "301",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "response": {
                                    "variable_value": "<301 http://www.example.com/301>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "spider": {
                                    "variable_value": "<Spider 'foo' at 0x7ff791d734f0>",
                                    "variable_type": "Spider",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "response.headers": {
                                    "variable_value": "{b'Location': [b'http://www.example.com/redirected']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "redirected_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urljoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.url": {
                                    "variable_value": "'http://www.example.com/301'",
                                    "variable_type": "str",
                                    "variable_shape": "26"
                                },
                                "redirected": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.replace": {
                                    "variable_value": "<bound method Request.replace of <GET http://www.example.com/301>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._redirect": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>",
                                    "variable_type": "RedirectMiddleware",
                                    "variable_shape": null
                                },
                                "self._redirect_request_using_get": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect_request_using_get of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "request.meta.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.meta": {
                                    "variable_value": "{'handle_httpstatus_all': True}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "request": {
                                    "variable_value": "<GET http://www.example.com/301>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "response.status": {
                                    "variable_value": "301",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "response": {
                                    "variable_value": "<301 http://www.example.com/301>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "spider": {
                                    "variable_value": "<Spider 'foo' at 0x7ff791d734f0>",
                                    "variable_type": "Spider",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "response.headers": {
                                    "variable_value": "{b'Location': [b'http://www.example.com/redirected']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "redirected_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urljoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.url": {
                                    "variable_value": "'http://www.example.com/301'",
                                    "variable_type": "str",
                                    "variable_shape": "26"
                                },
                                "redirected": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.replace": {
                                    "variable_value": "<bound method Request.replace of <GET http://www.example.com/301>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._redirect": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>",
                                    "variable_type": "RedirectMiddleware",
                                    "variable_shape": null
                                },
                                "self._redirect_request_using_get": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect_request_using_get of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "request.meta.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.meta": {
                                    "variable_value": "{'handle_httpstatus_all': True}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "request": {
                                    "variable_value": "<GET http://www.example.com/301>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "response.status": {
                                    "variable_value": "301",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "response": {
                                    "variable_value": "<301 http://www.example.com/301>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "spider": {
                                    "variable_value": "<Spider 'foo' at 0x7ff791d734f0>",
                                    "variable_type": "Spider",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "response.headers": {
                                    "variable_value": "{b'Location': [b'http://www.example.com/redirected']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "redirected_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urljoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.url": {
                                    "variable_value": "'http://www.example.com/301'",
                                    "variable_type": "str",
                                    "variable_shape": "26"
                                },
                                "redirected": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.replace": {
                                    "variable_value": "<bound method Request.replace of <GET http://www.example.com/301>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._redirect": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>",
                                    "variable_type": "RedirectMiddleware",
                                    "variable_shape": null
                                },
                                "self._redirect_request_using_get": {
                                    "variable_value": "<bound method BaseRedirectMiddleware._redirect_request_using_get of <scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x7ff791d73430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, settings):\n    if not settings.getbool(self.enabled_setting):\n        raise NotConfigured\n\n    self.max_redirect_times = settings.getint('REDIRECT_MAX_TIMES')\n    self.priority_adjust = settings.getint('REDIRECT_PRIORITY_ADJUST')",
                "@classmethod\ndef from_crawler(cls, crawler):\n    return cls(crawler.settings)",
                "def _redirect(self, redirected, request, spider, reason):\n    ttl = request.meta.setdefault('redirect_ttl', self.max_redirect_times)\n    redirects = request.meta.get('redirect_times', 0) + 1\n\n    if ttl and redirects <= self.max_redirect_times:\n        redirected.meta['redirect_times'] = redirects\n        redirected.meta['redirect_ttl'] = ttl - 1\n        redirected.meta['redirect_urls'] = request.meta.get('redirect_urls', []) + \\\n            [request.url]\n        redirected.dont_filter = request.dont_filter\n        redirected.priority = request.priority + self.priority_adjust\n        logger.debug(\"Redirecting (%(reason)s) to %(redirected)s from %(request)s\",\n                     {'reason': reason, 'redirected': redirected, 'request': request},\n                     extra={'spider': spider})\n        return redirected\n    else:\n        logger.debug(\"Discarding %(request)s: max redirections reached\",\n                     {'request': request}, extra={'spider': spider})\n        raise IgnoreRequest(\"max redirections reached\")",
                "def _redirect_request_using_get(self, request, redirect_url):\n    redirected = request.replace(url=redirect_url, method='GET', body='')\n    redirected.headers.pop('Content-Type', None)\n    redirected.headers.pop('Content-Length', None)\n    return redirected",
                "def process_response(self, request, response, spider):\n    if (request.meta.get('dont_redirect', False) or\n           response.status in getattr(spider, 'handle_httpstatus_list', [])):\n        return response\n\n    if request.method == 'HEAD':\n        if response.status in [301, 302, 303, 307] and 'Location' in response.headers:\n            redirected_url = urljoin(request.url, response.headers['location'])\n            redirected = request.replace(url=redirected_url)\n            return self._redirect(redirected, request, spider, response.status)\n        else:\n            return response\n\n    if response.status in [302, 303] and 'Location' in response.headers:\n        redirected_url = urljoin(request.url, response.headers['location'])\n        redirected = self._redirect_request_using_get(request, redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n\n    if response.status in [301, 307] and 'Location' in response.headers:\n        redirected_url = urljoin(request.url, response.headers['location'])\n        redirected = request.replace(url=redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n\n    return response",
                "def __init__(self, settings):\n    super(MetaRefreshMiddleware, self).__init__(settings)\n    self._maxdelay = settings.getint('REDIRECT_MAX_METAREFRESH_DELAY',\n                                     settings.getint('METAREFRESH_MAXDELAY'))",
                "def process_response(self, request, response, spider):\n    if request.meta.get('dont_redirect', False) or request.method == 'HEAD' or \\\n            not isinstance(response, HtmlResponse):\n        return response\n\n    if isinstance(response, HtmlResponse):\n        interval, url = get_meta_refresh(response)\n        if url and interval < self._maxdelay:\n            redirected = self._redirect_request_using_get(request, url)\n            return self._redirect(redirected, request, spider, 'meta refresh')\n\n    return response"
            ],
            "inscope_function_signatures": [
                "__init__(self, settings)",
                "from_crawler(cls, crawler)",
                "_redirect(self, redirected, request, spider, reason)",
                "_redirect_request_using_get(self, request, redirect_url)",
                "process_response(self, request, response, spider)",
                "__init__(self, settings)",
                "process_response(self, request, response, spider)"
            ],
            "variables_in_file": {
                "logger": [
                    8,
                    42,
                    37
                ],
                "logging.getLogger": [
                    8
                ],
                "logging": [
                    8
                ],
                "__name__": [
                    8
                ],
                "object": [
                    11
                ],
                "enabled_setting": [
                    84,
                    13
                ],
                "settings.getbool": [
                    16
                ],
                "settings": [
                    16,
                    19,
                    20,
                    87,
                    88,
                    89
                ],
                "self.enabled_setting": [
                    16
                ],
                "self": [
                    65,
                    98,
                    99,
                    36,
                    100,
                    71,
                    72,
                    77,
                    16,
                    19,
                    20,
                    87,
                    88,
                    27,
                    30
                ],
                "NotConfigured": [
                    17
                ],
                "self.max_redirect_times": [
                    27,
                    19,
                    30
                ],
                "settings.getint": [
                    88,
                    89,
                    19,
                    20
                ],
                "self.priority_adjust": [
                    20,
                    36
                ],
                "cls": [
                    24
                ],
                "crawler.settings": [
                    24
                ],
                "crawler": [
                    24
                ],
                "classmethod": [
                    22
                ],
                "ttl": [
                    32,
                    27,
                    30
                ],
                "request.meta.setdefault": [
                    27
                ],
                "request.meta": [
                    33,
                    92,
                    57,
                    27,
                    28
                ],
                "request": [
                    27,
                    28,
                    33,
                    34,
                    35,
                    36,
                    38,
                    43,
                    47,
                    57,
                    61,
                    63,
                    64,
                    65,
                    70,
                    71,
                    72,
                    75,
                    76,
                    77,
                    92,
                    99,
                    100
                ],
                "redirects": [
                    28,
                    30,
                    31
                ],
                "request.meta.get": [
                    33,
                    28,
                    92,
                    57
                ],
                "redirected.meta": [
                    32,
                    33,
                    31
                ],
                "redirected": [
                    31,
                    32,
                    33,
                    35,
                    36,
                    38,
                    40,
                    47,
                    48,
                    49,
                    50,
                    64,
                    65,
                    71,
                    72,
                    76,
                    77,
                    99,
                    100
                ],
                "request.url": [
                    34,
                    75,
                    70,
                    63
                ],
                "redirected.dont_filter": [
                    35
                ],
                "request.dont_filter": [
                    35
                ],
                "redirected.priority": [
                    36
                ],
                "request.priority": [
                    36
                ],
                "logger.debug": [
                    42,
                    37
                ],
                "reason": [
                    38
                ],
                "spider": [
                    65,
                    100,
                    39,
                    72,
                    43,
                    77,
                    58
                ],
                "IgnoreRequest": [
                    44
                ],
                "request.replace": [
                    64,
                    76,
                    47
                ],
                "redirect_url": [
                    47
                ],
                "redirected.headers.pop": [
                    48,
                    49
                ],
                "redirected.headers": [
                    48,
                    49
                ],
                "BaseRedirectMiddleware": [
                    82,
                    53
                ],
                "response.status": [
                    65,
                    69,
                    72,
                    74,
                    77,
                    58,
                    62
                ],
                "response": [
                    96,
                    65,
                    97,
                    67,
                    69,
                    70,
                    102,
                    72,
                    74,
                    75,
                    77,
                    79,
                    94,
                    58,
                    59,
                    93,
                    62,
                    63
                ],
                "getattr": [
                    58
                ],
                "request.method": [
                    92,
                    61
                ],
                "response.headers": [
                    69,
                    70,
                    74,
                    75,
                    62,
                    63
                ],
                "redirected_url": [
                    64,
                    70,
                    71,
                    75,
                    76,
                    63
                ],
                "urljoin": [
                    75,
                    70,
                    63
                ],
                "self._redirect": [
                    72,
                    65,
                    100,
                    77
                ],
                "self._redirect_request_using_get": [
                    99,
                    71
                ],
                "__init__": [
                    87
                ],
                "super": [
                    87
                ],
                "MetaRefreshMiddleware": [
                    87
                ],
                "self._maxdelay": [
                    88,
                    98
                ],
                "isinstance": [
                    96,
                    93
                ],
                "HtmlResponse": [
                    96,
                    93
                ],
                "interval": [
                    97,
                    98
                ],
                "url": [
                    97,
                    98,
                    99
                ],
                "get_meta_refresh": [
                    97
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    8,
                    42,
                    37
                ],
                "logging.getLogger": [
                    8
                ],
                "logging": [
                    8
                ],
                "enabled_setting": [
                    84,
                    13
                ],
                "settings.getbool": [
                    16
                ],
                "settings": [
                    16,
                    19,
                    20,
                    87,
                    88,
                    89
                ],
                "self.enabled_setting": [
                    16
                ],
                "self": [
                    65,
                    98,
                    99,
                    36,
                    100,
                    71,
                    72,
                    77,
                    16,
                    19,
                    20,
                    87,
                    88,
                    27,
                    30
                ],
                "NotConfigured": [
                    17
                ],
                "self.max_redirect_times": [
                    27,
                    19,
                    30
                ],
                "settings.getint": [
                    88,
                    89,
                    19,
                    20
                ],
                "self.priority_adjust": [
                    20,
                    36
                ],
                "cls": [
                    24
                ],
                "crawler.settings": [
                    24
                ],
                "crawler": [
                    24
                ],
                "ttl": [
                    32,
                    27,
                    30
                ],
                "request.meta.setdefault": [
                    27
                ],
                "request.meta": [
                    33,
                    92,
                    57,
                    27,
                    28
                ],
                "request": [
                    27,
                    28,
                    33,
                    34,
                    35,
                    36,
                    38,
                    43,
                    47,
                    57,
                    61,
                    63,
                    64,
                    65,
                    70,
                    71,
                    72,
                    75,
                    76,
                    77,
                    92,
                    99,
                    100
                ],
                "redirects": [
                    28,
                    30,
                    31
                ],
                "request.meta.get": [
                    33,
                    28,
                    92,
                    57
                ],
                "redirected.meta": [
                    32,
                    33,
                    31
                ],
                "redirected": [
                    31,
                    32,
                    33,
                    35,
                    36,
                    38,
                    40,
                    47,
                    48,
                    49,
                    50,
                    64,
                    65,
                    71,
                    72,
                    76,
                    77,
                    99,
                    100
                ],
                "request.url": [
                    34,
                    75,
                    70,
                    63
                ],
                "redirected.dont_filter": [
                    35
                ],
                "request.dont_filter": [
                    35
                ],
                "redirected.priority": [
                    36
                ],
                "request.priority": [
                    36
                ],
                "logger.debug": [
                    42,
                    37
                ],
                "reason": [
                    38
                ],
                "spider": [
                    65,
                    100,
                    39,
                    72,
                    43,
                    77,
                    58
                ],
                "IgnoreRequest": [
                    44
                ],
                "request.replace": [
                    64,
                    76,
                    47
                ],
                "redirect_url": [
                    47
                ],
                "redirected.headers.pop": [
                    48,
                    49
                ],
                "redirected.headers": [
                    48,
                    49
                ],
                "BaseRedirectMiddleware": [
                    82,
                    53
                ],
                "response.status": [
                    65,
                    69,
                    72,
                    74,
                    77,
                    58,
                    62
                ],
                "response": [
                    96,
                    65,
                    97,
                    67,
                    69,
                    70,
                    102,
                    72,
                    74,
                    75,
                    77,
                    79,
                    94,
                    58,
                    59,
                    93,
                    62,
                    63
                ],
                "request.method": [
                    92,
                    61
                ],
                "response.headers": [
                    69,
                    70,
                    74,
                    75,
                    62,
                    63
                ],
                "redirected_url": [
                    64,
                    70,
                    71,
                    75,
                    76,
                    63
                ],
                "urljoin": [
                    75,
                    70,
                    63
                ],
                "self._redirect": [
                    72,
                    65,
                    100,
                    77
                ],
                "self._redirect_request_using_get": [
                    99,
                    71
                ],
                "__init__": [
                    87
                ],
                "MetaRefreshMiddleware": [
                    87
                ],
                "self._maxdelay": [
                    88,
                    98
                ],
                "HtmlResponse": [
                    96,
                    93
                ],
                "interval": [
                    97,
                    98
                ],
                "url": [
                    97,
                    98,
                    99
                ],
                "get_meta_refresh": [
                    97
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/tests/test_downloadermiddleware_redirect.py",
                "test_function": "test_request_meta_handling",
                "test_function_code": "    def test_request_meta_handling(self):\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        def _test_passthrough(req):\n            rsp = Response(url, headers={'Location': url2}, status=301, request=req)\n            r = self.mw.process_response(req, rsp, self.spider)\n            self.assertIs(r, rsp)\n        _test_passthrough(Request(url, meta={'handle_httpstatus_list':\n                                                           [404, 301, 302]}))\n        _test_passthrough(Request(url, meta={'handle_httpstatus_all': True}))",
                "test_error": "TypeError: Cannot mix str and non-str arguments",
                "full_test_error": "self = <tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest testMethod=test_request_meta_handling>\n\n    def test_request_meta_handling(self):\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        def _test_passthrough(req):\n            rsp = Response(url, headers={'Location': url2}, status=301, request=req)\n            r = self.mw.process_response(req, rsp, self.spider)\n            self.assertIs(r, rsp)\n>       _test_passthrough(Request(url, meta={'handle_httpstatus_list':\n                                                           [404, 301, 302]}))\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/tests/test_downloadermiddleware_redirect.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/tests/test_downloadermiddleware_redirect.py:147: in _test_passthrough\n    r = self.mw.process_response(req, rsp, self.spider)\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/scrapy/downloadermiddlewares/redirect.py:75: in process_response\n    redirected_url = urljoin(request.url, response.headers['location'])\n/usr/local/lib/python3.8/urllib/parse.py:522: in urljoin\n    base, url, _coerce_result = _coerce_args(base, url)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('http://www.example.com/301', b'http://www.example.com/redirected')\nstr_input = True, arg = b'http://www.example.com/redirected'\n\n    def _coerce_args(*args):\n        # Invokes decode if necessary to create str args\n        # and returns the coerced inputs along with\n        # an appropriate result coercion function\n        #   - noop for str inputs\n        #   - encoding function otherwise\n        str_input = isinstance(args[0], str)\n        for arg in args[1:]:\n            # We special-case the empty string to support the\n            # \"scheme=''\" default argument to some functions\n            if arg and isinstance(arg, str) != str_input:\n>               raise TypeError(\"Cannot mix str and non-str arguments\")\nE               TypeError: Cannot mix str and non-str arguments\n\n/usr/local/lib/python3.8/urllib/parse.py:124: TypeError",
                "traceback": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/tests/test_downloadermiddleware_redirect.py:147: in _test_passthrough\n    r = self.mw.process_response(req, rsp, self.spider)\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_27/scrapy/downloadermiddlewares/redirect.py:75: in process_response\n    redirected_url = urljoin(request.url, response.headers['location'])\n/usr/local/lib/python3.8/urllib/parse.py:522: in urljoin\n    base, url, _coerce_result = _coerce_args(base, url)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('http://www.example.com/301', b'http://www.example.com/redirected')\nstr_input = True, arg = b'http://www.example.com/redirected'\n\n    def _coerce_args(*args):\n        # Invokes decode if necessary to create str args\n        # and returns the coerced inputs along with\n        # an appropriate result coercion function\n        #   - noop for str inputs\n        #   - encoding function otherwise\n        str_input = isinstance(args[0], str)\n        for arg in args[1:]:\n            # We special-case the empty string to support the\n            # \"scheme=''\" default argument to some functions\n            if arg and isinstance(arg, str) != str_input:\n>               raise TypeError(\"Cannot mix str and non-str arguments\")\nE               TypeError: Cannot mix str and non-str arguments\n\n/usr/local/lib/python3.8/urllib/parse.py:124: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}