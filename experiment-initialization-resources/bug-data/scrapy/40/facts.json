{
    "1.1.1": "def _serialize_value(self, value):\n    if isinstance(value, BaseItem):\n        return self.export_item(value)\n    if isinstance(value, dict):\n        return dict(self._serialize_dict(value))\n    if is_listlike(value):\n        return [self._serialize_value(v) for v in value]\n    if self.binary:\n        return to_bytes(value, encoding=self.encoding)\n    else:\n        return to_unicode(value, encoding=self.encoding)\n",
    "1.1.2": null,
    "1.2.1": "class PythonItemExporter(BaseItemExporter)",
    "1.2.2": "The idea behind this exporter is to have a mechanism to serialize items\nto built-in python types so any serialization library (like\njson, msgpack, binc, etc) can be used on top of it. Its main goal is to\nseamless support what BaseItemExporter does plus nested items.",
    "1.2.3": [
        "_serialize_value(self, value)",
        "_serialize_dict(self, value)",
        "export_item(self, item)"
    ],
    "1.3.1": "scrapy/exporters.py",
    "1.3.2": [
        "export_item(self, item)",
        "export_item(self, item)",
        "export_item(self, item)",
        "export_item(self, item)",
        "export_item(self, item)",
        "export_item(self, item)",
        "export_item(self, item)",
        "export_item(self, item)",
        "_serialize_value(self, value)",
        "_serialize_dict(self, value)",
        "export_item(self, item)"
    ],
    "1.4.1": [
        "    def test_other_python_types_item(self):\n        from datetime import datetime\n        now = datetime.now()\n        item = {\n            'boolean': False,\n            'number': 22,\n            'time': now,\n            'float': 3.14,\n        }\n        ie = self._get_exporter()\n        exported = ie.export_item(item)\n        self.assertEqual(exported, item)"
    ],
    "1.4.2": [
        "tests/test_exporters.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: to_unicode must receive a bytes, str or unicode object, got bool"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_exporters.PythonItemExporterTest testMethod=test_other_python_types_item>\n\n    def test_other_python_types_item(self):\n        from datetime import datetime\n        now = datetime.now()\n        item = {\n            'boolean': False,\n            'number': 22,\n            'time': now,\n            'float': 3.14,\n        }\n        ie = self._get_exporter()\n>       exported = ie.export_item(item)\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_40/tests/test_exporters.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_40/scrapy/exporters.py:287: in export_item\n    result = dict(self._get_serialized_fields(item))\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_40/scrapy/exporters.py:75: in _get_serialized_fields\n    value = self.serialize_field(field, field_name, item[field_name])\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_40/scrapy/exporters.py:267: in serialize_field\n    return serializer(value)\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_40/scrapy/exporters.py:279: in _serialize_value\n    return to_unicode(value, encoding=self.encoding)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = False, encoding = 'utf-8', errors = 'strict'\n\n    def to_unicode(text, encoding=None, errors='strict'):\n        \"\"\"Return the unicode representation of a bytes object `text`. If `text`\n        is already an unicode object, return it as-is.\"\"\"\n        if isinstance(text, six.text_type):\n            return text\n        if not isinstance(text, (bytes, six.text_type)):\n>           raise TypeError('to_unicode must receive a bytes, str or unicode '\n                            'object, got %s' % type(text).__name__)",
            "\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_40/scrapy/utils/python.py:103: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "value": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.binary": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "value": "bool",
                "self.binary": "bool",
                "self.encoding": "str"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "value": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.binary": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "value": {
                    "value": "22",
                    "shape": null,
                    "omitted": false
                },
                "self.binary": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "value": {
                    "value": "datetime.datetime(2024, 1, 29, 17, 22, 54, 327549)",
                    "shape": null,
                    "omitted": false
                },
                "self.binary": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "value": {
                    "value": "3.14",
                    "shape": null,
                    "omitted": false
                },
                "self.binary": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "value": "bool",
                "self.binary": "bool",
                "self.encoding": "str"
            },
            {}
        ],
        [
            {
                "value": "int",
                "self.binary": "bool",
                "self.encoding": "str"
            },
            {}
        ],
        [
            {
                "value": "datetime",
                "self.binary": "bool",
                "self.encoding": "str"
            },
            {}
        ],
        [
            {
                "value": "float",
                "self.binary": "bool",
                "self.encoding": "str"
            },
            {}
        ]
    ],
    "3.1.1": null,
    "3.1.2": null,
    "used_imports": "from scrapy.utils.python import to_bytes, to_unicode, to_native_str, is_listlike\nfrom scrapy.item import BaseItem"
}