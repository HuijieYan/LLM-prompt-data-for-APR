{
    "1.1.1": "def _get_spider_loader(settings):\n    \n    if settings.get('SPIDER_MANAGER_CLASS'):\n        warnings.warn(\n            'SPIDER_MANAGER_CLASS option is deprecated. '\n            'Please use SPIDER_LOADER_CLASS.',\n            category=ScrapyDeprecationWarning, stacklevel=2\n        )\n    cls_path = settings.get('SPIDER_LOADER_CLASS',\n                            settings.get('SPIDER_MANAGER_CLASS'))\n    loader_cls = load_object(cls_path)\n    verifyClass(ISpiderLoader, loader_cls)\n    return loader_cls.from_settings(settings.frozencopy())\n",
    "1.1.2": "Get SpiderLoader instance from settings ",
    "1.2.1": "scrapy/crawler.py",
    "1.2.2": "import warnings\nfrom zope.interface.verify import verifyClass\nfrom scrapy.interfaces import ISpiderLoader\nfrom scrapy.exceptions import ScrapyDeprecationWarning\nfrom scrapy.utils.misc import load_object",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "    def test_spidermanager_deprecation(self):\n        with warnings.catch_warnings(record=True) as w:\n            runner = CrawlerRunner({\n                'SPIDER_MANAGER_CLASS': 'tests.test_crawler.CustomSpiderLoader'\n            })\n            self.assertIsInstance(runner.spider_loader, CustomSpiderLoader)\n            self.assertEqual(len(w), 1)\n            self.assertIn('Please use SPIDER_LOADER_CLASS', str(w[0].message))"
    ],
    "1.5.2": [
        "tests/test_crawler.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: <scrapy.spiderloader.SpiderLoader object at 0x7f76da592cd0> is not an instance of <class 'tests.test_crawler.CustomSpiderLoader'>"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_crawler.CrawlerRunnerTestCase testMethod=test_spidermanager_deprecation>\n\n    def test_spidermanager_deprecation(self):\n        with warnings.catch_warnings(record=True) as w:\n            runner = CrawlerRunner({\n                'SPIDER_MANAGER_CLASS': 'tests.test_crawler.CustomSpiderLoader'\n            })\n>           self.assertIsInstance(runner.spider_loader, CustomSpiderLoader)",
            "\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_35/tests/test_crawler.py:101: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {},
            {
                "cls_path": {
                    "value": "'scrapy.spiderloader.SpiderLoader'",
                    "shape": "32",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {},
            {
                "cls_path": "str"
            }
        ]
    ],
    "2.3.1": [
        [
            {},
            {
                "cls_path": {
                    "value": "'tests.test_crawler.CustomSpiderLoader'",
                    "shape": "37",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {},
            {
                "cls_path": "str"
            }
        ]
    ],
    "3.1.1": [
        "[MRG+1] rename SpiderManager to SpiderLoader\n"
    ],
    "3.1.2": [
        "As discussed in #873.\n\nspidermanager.SpiderManager is renamed to spiderloader.SpiderLoader;\ninterfaces.ISpiderManager is renamed to interfaces.ISpiderLoader;\nSPIDER_MANAGER_CLASS is renamed to SPIDER_LOADER_CLASS;\ninterface validation is added to deprecated Crawler._spider property;\ndocstrings are added to SpiderLoader and its methods;\ndef SpiderManagerWithWrongInterface(object) is changed to class SpiderLoaderWithWrongInterface(object);\nunfortunately I had to rename self.spiderman to self.spider_loader in tests;\nCrawlerRunner.spiders is renamed to CrawlerRunner.spider_loader;\n'spiders' is removed from telnet.\nWhat do you think about renaming CrawlerRunner.spiders to CrawlerRunner.spiderloader or CrawlerRunner.spider_loader? I'd remove it altogether, but that needs another discussion :)\n"
    ]
}