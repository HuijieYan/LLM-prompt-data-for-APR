{
    "scrapy:5": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_5/scrapy/http/response/__init__.py": {
            "buggy_functions": [
                {
                    "function_name": "follow",
                    "function_code": "def follow(self, url, callback=None, method='GET', headers=None, body=None,\n           cookies=None, meta=None, encoding='utf-8', priority=0,\n           dont_filter=False, errback=None):\n    # type: (...) -> Request\n    \"\"\"\n    Return a :class:`~.Request` instance to follow a link ``url``.\n    It accepts the same arguments as ``Request.__init__`` method,\n    but ``url`` can be a relative URL or a ``scrapy.link.Link`` object,\n    not only an absolute URL.\n    \n    :class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` \n    method which supports selectors in addition to absolute/relative URLs\n    and Link objects.\n    \"\"\"\n    if isinstance(url, Link):\n        url = url.url\n    url = self.urljoin(url)\n    return Request(url, callback,\n                   method=method,\n                   headers=headers,\n                   body=body,\n                   cookies=cookies,\n                   meta=meta,\n                   encoding=encoding,\n                   priority=priority,\n                   dont_filter=dont_filter,\n                   errback=errback)\n",
                    "decorators": [],
                    "docstring": "Return a :class:`~.Request` instance to follow a link ``url``.\nIt accepts the same arguments as ``Request.__init__`` method,\nbut ``url`` can be a relative URL or a ``scrapy.link.Link`` object,\nnot only an absolute URL.\n\n:class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` \nmethod which supports selectors in addition to absolute/relative URLs\nand Link objects.",
                    "start_line": 107,
                    "end_line": 133,
                    "variables": {
                        "isinstance": [
                            121
                        ],
                        "url": [
                            121,
                            122,
                            123,
                            124
                        ],
                        "Link": [
                            121
                        ],
                        "url.url": [
                            122
                        ],
                        "self.urljoin": [
                            123
                        ],
                        "self": [
                            123
                        ],
                        "Request": [
                            124
                        ],
                        "callback": [
                            124
                        ],
                        "method": [
                            125
                        ],
                        "headers": [
                            126
                        ],
                        "body": [
                            127
                        ],
                        "cookies": [
                            128
                        ],
                        "meta": [
                            129
                        ],
                        "encoding": [
                            130
                        ],
                        "priority": [
                            131
                        ],
                        "dont_filter": [
                            132
                        ],
                        "errback": [
                            133
                        ]
                    },
                    "filtered_variables": {
                        "url": [
                            121,
                            122,
                            123,
                            124
                        ],
                        "Link": [
                            121
                        ],
                        "url.url": [
                            122
                        ],
                        "self.urljoin": [
                            123
                        ],
                        "self": [
                            123
                        ],
                        "Request": [
                            124
                        ],
                        "callback": [
                            124
                        ],
                        "method": [
                            125
                        ],
                        "headers": [
                            126
                        ],
                        "body": [
                            127
                        ],
                        "cookies": [
                            128
                        ],
                        "meta": [
                            129
                        ],
                        "encoding": [
                            130
                        ],
                        "priority": [
                            131
                        ],
                        "dont_filter": [
                            132
                        ],
                        "errback": [
                            133
                        ]
                    },
                    "diff_line_number": 122,
                    "class_data": {
                        "signature": "class Response(object_ref)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, url, status=200, headers=None, body=b'', flags=None, request=None):\n    self.headers = Headers(headers or {})\n    self.status = int(status)\n    self._set_body(body)\n    self._set_url(url)\n    self.request = request\n    self.flags = [] if flags is None else list(flags)",
                            "@property\ndef meta(self):\n    try:\n        return self.request.meta\n    except AttributeError:\n        raise AttributeError('Response.meta not available, this response is not tied to any request')",
                            "def _get_url(self):\n    return self._url",
                            "def _set_url(self, url):\n    if isinstance(url, str):\n        self._url = url\n    else:\n        raise TypeError('%s url must be str, got %s:' % (type(self).__name__, type(url).__name__))",
                            "def _get_body(self):\n    return self._body",
                            "def _set_body(self, body):\n    if body is None:\n        self._body = b''\n    elif not isinstance(body, bytes):\n        raise TypeError('Response body must be bytes. If you want to pass unicode body use TextResponse or HtmlResponse.')\n    else:\n        self._body = body",
                            "def __str__(self):\n    return '<%d %s>' % (self.status, self.url)",
                            "def copy(self):\n    \"\"\"Return a copy of this Response\"\"\"\n    return self.replace()",
                            "def replace(self, *args, **kwargs):\n    \"\"\"Create a new Response with the same attributes except for those\n    given new values.\n    \"\"\"\n    for x in ['url', 'status', 'headers', 'body', 'request', 'flags']:\n        kwargs.setdefault(x, getattr(self, x))\n    cls = kwargs.pop('cls', self.__class__)\n    return cls(*args, **kwargs)",
                            "def urljoin(self, url):\n    \"\"\"Join this Response's url with a possible relative url to form an\n    absolute interpretation of the latter.\"\"\"\n    return urljoin(self.url, url)",
                            "@property\ndef text(self):\n    \"\"\"For subclasses of TextResponse, this will return the body\n    as text (unicode object in Python 2 and str in Python 3)\n    \"\"\"\n    raise AttributeError(\"Response content isn't text\")",
                            "def css(self, *a, **kw):\n    \"\"\"Shortcut method implemented only by responses whose content\n    is text (subclasses of TextResponse).\n    \"\"\"\n    raise NotSupported(\"Response content isn't text\")",
                            "def xpath(self, *a, **kw):\n    \"\"\"Shortcut method implemented only by responses whose content\n    is text (subclasses of TextResponse).\n    \"\"\"\n    raise NotSupported(\"Response content isn't text\")",
                            "def follow(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None):\n    \"\"\"\n    Return a :class:`~.Request` instance to follow a link ``url``.\n    It accepts the same arguments as ``Request.__init__`` method,\n    but ``url`` can be a relative URL or a ``scrapy.link.Link`` object,\n    not only an absolute URL.\n    \n    :class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` \n    method which supports selectors in addition to absolute/relative URLs\n    and Link objects.\n    \"\"\"\n    if isinstance(url, Link):\n        url = url.url\n    url = self.urljoin(url)\n    return Request(url, callback, method=method, headers=headers, body=body, cookies=cookies, meta=meta, encoding=encoding, priority=priority, dont_filter=dont_filter, errback=errback)"
                        ],
                        "constructor_variables": [
                            "self.headers = Headers(headers or {})",
                            "self.status = int(status)",
                            "self.request = request",
                            "self.flags = [] if flags is None else list(flags)"
                        ],
                        "class_level_variables": [
                            "url = property(_get_url, obsolete_setter(_set_url, 'url'))",
                            "body = property(_get_body, obsolete_setter(_set_body, 'body'))",
                            "__repr__ = __str__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, url, status=200, headers=None, body=b'', flags=None, request=None)",
                            "meta(self)",
                            "_get_url(self)",
                            "_set_url(self, url)",
                            "_get_body(self)",
                            "_set_body(self, body)",
                            "__str__(self)",
                            "copy(self)",
                            "replace(self, *args, **kwargs)",
                            "urljoin(self, url)",
                            "text(self)",
                            "css(self, *a, **kw)",
                            "xpath(self, *a, **kw)",
                            "follow(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None)"
                        ],
                        "class_level_variable_names": [
                            "url",
                            "body",
                            "__repr__"
                        ],
                        "constructor_variable_names": [
                            "headers",
                            "flags",
                            "status",
                            "request"
                        ]
                    },
                    "used_imports": [
                        "from scrapy.http.request import Request",
                        "from scrapy.link import Link"
                    ],
                    "variable_values": [
                        [
                            {
                                "url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Link": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.urljoin": {
                                    "variable_value": "<bound method Response.urljoin of <200 http://example.com>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<200 http://example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "body": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cookies": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "meta": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dont_filter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "errback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "url": {
                                    "variable_value": "'http://example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "Link": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.urljoin": {
                                    "variable_value": "<bound method Response.urljoin of <200 http://example.com>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<200 http://example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "body": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cookies": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "meta": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dont_filter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "errback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Link": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.urljoin": {
                                    "variable_value": "<bound method Response.urljoin of <200 http://example.com>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<200 http://example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "body": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cookies": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "meta": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dont_filter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "errback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, url, status=200, headers=None, body=b'', flags=None, request=None):\n    self.headers = Headers(headers or {})\n    self.status = int(status)\n    self._set_body(body)\n    self._set_url(url)\n    self.request = request\n    self.flags = [] if flags is None else list(flags)",
                "@property\ndef meta(self):\n    try:\n        return self.request.meta\n    except AttributeError:\n        raise AttributeError(\n            \"Response.meta not available, this response \"\n            \"is not tied to any request\"\n        )",
                "def _get_url(self):\n    return self._url",
                "def _set_url(self, url):\n    if isinstance(url, str):\n        self._url = url\n    else:\n        raise TypeError('%s url must be str, got %s:' % (type(self).__name__,\n            type(url).__name__))",
                "def _get_body(self):\n    return self._body",
                "def _set_body(self, body):\n    if body is None:\n        self._body = b''\n    elif not isinstance(body, bytes):\n        raise TypeError(\n            \"Response body must be bytes. \"\n            \"If you want to pass unicode body use TextResponse \"\n            \"or HtmlResponse.\")\n    else:\n        self._body = body",
                "def __str__(self):\n    return \"<%d %s>\" % (self.status, self.url)",
                "def copy(self):\n    \"\"\"Return a copy of this Response\"\"\"\n    return self.replace()",
                "def replace(self, *args, **kwargs):\n    \"\"\"Create a new Response with the same attributes except for those\n    given new values.\n    \"\"\"\n    for x in ['url', 'status', 'headers', 'body', 'request', 'flags']:\n        kwargs.setdefault(x, getattr(self, x))\n    cls = kwargs.pop('cls', self.__class__)\n    return cls(*args, **kwargs)",
                "def urljoin(self, url):\n    \"\"\"Join this Response's url with a possible relative url to form an\n    absolute interpretation of the latter.\"\"\"\n    return urljoin(self.url, url)",
                "@property\ndef text(self):\n    \"\"\"For subclasses of TextResponse, this will return the body\n    as text (unicode object in Python 2 and str in Python 3)\n    \"\"\"\n    raise AttributeError(\"Response content isn't text\")",
                "def css(self, *a, **kw):\n    \"\"\"Shortcut method implemented only by responses whose content\n    is text (subclasses of TextResponse).\n    \"\"\"\n    raise NotSupported(\"Response content isn't text\")",
                "def xpath(self, *a, **kw):\n    \"\"\"Shortcut method implemented only by responses whose content\n    is text (subclasses of TextResponse).\n    \"\"\"\n    raise NotSupported(\"Response content isn't text\")",
                "def follow(self, url, callback=None, method='GET', headers=None, body=None,\n           cookies=None, meta=None, encoding='utf-8', priority=0,\n           dont_filter=False, errback=None):\n    # type: (...) -> Request\n    \"\"\"\n    Return a :class:`~.Request` instance to follow a link ``url``.\n    It accepts the same arguments as ``Request.__init__`` method,\n    but ``url`` can be a relative URL or a ``scrapy.link.Link`` object,\n    not only an absolute URL.\n    \n    :class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` \n    method which supports selectors in addition to absolute/relative URLs\n    and Link objects.\n    \"\"\"\n    if isinstance(url, Link):\n        url = url.url\n    url = self.urljoin(url)\n    return Request(url, callback,\n                   method=method,\n                   headers=headers,\n                   body=body,\n                   cookies=cookies,\n                   meta=meta,\n                   encoding=encoding,\n                   priority=priority,\n                   dont_filter=dont_filter,\n                   errback=errback)"
            ],
            "inscope_function_signatures": [
                "__init__(self, url, status=200, headers=None, body=b'', flags=None, request=None)",
                "meta(self)",
                "_get_url(self)",
                "_set_url(self, url)",
                "_get_body(self)",
                "_set_body(self, body)",
                "__str__(self)",
                "copy(self)",
                "replace(self, *args, **kwargs)",
                "urljoin(self, url)",
                "text(self)",
                "css(self, *a, **kw)",
                "xpath(self, *a, **kw)",
                "follow(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None)"
            ],
            "variables_in_file": {
                "object_ref": [
                    17
                ],
                "self.headers": [
                    20
                ],
                "self": [
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    30,
                    38,
                    42,
                    44,
                    50,
                    54,
                    61,
                    66,
                    72,
                    79,
                    80,
                    86,
                    123
                ],
                "Headers": [
                    20
                ],
                "headers": [
                    20,
                    126
                ],
                "self.status": [
                    66,
                    21
                ],
                "int": [
                    21
                ],
                "status": [
                    21
                ],
                "self._set_body": [
                    22
                ],
                "body": [
                    53,
                    22,
                    55,
                    127,
                    61,
                    63
                ],
                "self._set_url": [
                    23
                ],
                "url": [
                    41,
                    42,
                    45,
                    47,
                    86,
                    23,
                    121,
                    122,
                    123,
                    124
                ],
                "self.request": [
                    24,
                    30
                ],
                "request": [
                    24
                ],
                "self.flags": [
                    25
                ],
                "flags": [
                    25
                ],
                "list": [
                    25
                ],
                "self.request.meta": [
                    30
                ],
                "AttributeError": [
                    32,
                    93,
                    31
                ],
                "property": [
                    88,
                    27,
                    63,
                    47
                ],
                "self._url": [
                    42,
                    38
                ],
                "isinstance": [
                    41,
                    121,
                    55
                ],
                "str": [
                    41
                ],
                "TypeError": [
                    56,
                    44
                ],
                "__name__": [
                    44,
                    45
                ],
                "type": [
                    44,
                    45
                ],
                "_get_url": [
                    47
                ],
                "obsolete_setter": [
                    63,
                    47
                ],
                "_set_url": [
                    47
                ],
                "self._body": [
                    50,
                    61,
                    54
                ],
                "bytes": [
                    55
                ],
                "_get_body": [
                    63
                ],
                "_set_body": [
                    63
                ],
                "self.url": [
                    66,
                    86
                ],
                "__repr__": [
                    68
                ],
                "__str__": [
                    68
                ],
                "self.replace": [
                    72
                ],
                "x": [
                    78,
                    79
                ],
                "kwargs.setdefault": [
                    79
                ],
                "kwargs": [
                    80,
                    81,
                    79
                ],
                "getattr": [
                    79
                ],
                "cls": [
                    80,
                    81
                ],
                "kwargs.pop": [
                    80
                ],
                "self.__class__": [
                    80
                ],
                "args": [
                    81
                ],
                "urljoin": [
                    86
                ],
                "NotSupported": [
                    105,
                    99
                ],
                "Link": [
                    121
                ],
                "url.url": [
                    122
                ],
                "self.urljoin": [
                    123
                ],
                "Request": [
                    124
                ],
                "callback": [
                    124
                ],
                "method": [
                    125
                ],
                "cookies": [
                    128
                ],
                "meta": [
                    129
                ],
                "encoding": [
                    130
                ],
                "priority": [
                    131
                ],
                "dont_filter": [
                    132
                ],
                "errback": [
                    133
                ]
            },
            "filtered_variables_in_file": {
                "object_ref": [
                    17
                ],
                "self.headers": [
                    20
                ],
                "self": [
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    30,
                    38,
                    42,
                    44,
                    50,
                    54,
                    61,
                    66,
                    72,
                    79,
                    80,
                    86,
                    123
                ],
                "Headers": [
                    20
                ],
                "headers": [
                    20,
                    126
                ],
                "self.status": [
                    66,
                    21
                ],
                "status": [
                    21
                ],
                "self._set_body": [
                    22
                ],
                "body": [
                    53,
                    22,
                    55,
                    127,
                    61,
                    63
                ],
                "self._set_url": [
                    23
                ],
                "url": [
                    41,
                    42,
                    45,
                    47,
                    86,
                    23,
                    121,
                    122,
                    123,
                    124
                ],
                "self.request": [
                    24,
                    30
                ],
                "request": [
                    24
                ],
                "self.flags": [
                    25
                ],
                "flags": [
                    25
                ],
                "self.request.meta": [
                    30
                ],
                "self._url": [
                    42,
                    38
                ],
                "_get_url": [
                    47
                ],
                "obsolete_setter": [
                    63,
                    47
                ],
                "_set_url": [
                    47
                ],
                "self._body": [
                    50,
                    61,
                    54
                ],
                "_get_body": [
                    63
                ],
                "_set_body": [
                    63
                ],
                "self.url": [
                    66,
                    86
                ],
                "__repr__": [
                    68
                ],
                "__str__": [
                    68
                ],
                "self.replace": [
                    72
                ],
                "x": [
                    78,
                    79
                ],
                "kwargs.setdefault": [
                    79
                ],
                "kwargs": [
                    80,
                    81,
                    79
                ],
                "cls": [
                    80,
                    81
                ],
                "kwargs.pop": [
                    80
                ],
                "self.__class__": [
                    80
                ],
                "args": [
                    81
                ],
                "urljoin": [
                    86
                ],
                "NotSupported": [
                    105,
                    99
                ],
                "Link": [
                    121
                ],
                "url.url": [
                    122
                ],
                "self.urljoin": [
                    123
                ],
                "Request": [
                    124
                ],
                "callback": [
                    124
                ],
                "method": [
                    125
                ],
                "cookies": [
                    128
                ],
                "meta": [
                    129
                ],
                "encoding": [
                    130
                ],
                "priority": [
                    131
                ],
                "dont_filter": [
                    132
                ],
                "errback": [
                    133
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_5/tests/test_http_response.py",
                "test_function": "test_follow_None_url",
                "test_function_code": "    def test_follow_None_url(self):\n        r = self.response_class(\"http://example.com\")\n        self.assertRaises(ValueError, r.follow, None)",
                "test_error": "AssertionError: ValueError not raised by follow",
                "full_test_error": "self = <tests.test_http_response.BaseResponseTest testMethod=test_follow_None_url>\n\n    def test_follow_None_url(self):\n        r = self.response_class(\"http://example.com\")\n>       self.assertRaises(ValueError, r.follow, None)\nE       AssertionError: ValueError not raised by follow\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_5/tests/test_http_response.py:160: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}