{
    "scrapy:19": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_19/scrapy/http/cookies.py": {
            "buggy_functions": [
                {
                    "function_name": "get_origin_req_host",
                    "function_code": "def get_origin_req_host(self):\n    return urlparse_cached(self.request).hostname\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 145,
                    "end_line": 146,
                    "variables": {
                        "hostname": [
                            146
                        ],
                        "urlparse_cached": [
                            146
                        ],
                        "self.request": [
                            146
                        ],
                        "self": [
                            146
                        ]
                    },
                    "filtered_variables": {
                        "hostname": [
                            146
                        ],
                        "urlparse_cached": [
                            146
                        ],
                        "self.request": [
                            146
                        ],
                        "self": [
                            146
                        ]
                    },
                    "diff_line_number": 145,
                    "class_data": {
                        "signature": "class WrappedRequest(object)",
                        "docstring": "Wraps a scrapy Request class with methods defined by urllib2.Request class to interact with CookieJar class\n\nsee http://docs.python.org/library/urllib2.html#urllib2.Request",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, request):\n    self.request = request",
                            "def get_full_url(self):\n    return self.request.url",
                            "def get_host(self):\n    return urlparse_cached(self.request).netloc",
                            "def get_type(self):\n    return urlparse_cached(self.request).scheme",
                            "def is_unverifiable(self):\n    \"\"\"Unverifiable should indicate whether the request is unverifiable, as defined by RFC 2965.\n\n    It defaults to False. An unverifiable request is one whose URL the user did not have the\n    option to approve. For example, if the request is for an image in an\n    HTML document, and the user had no option to approve the automatic\n    fetching of the image, this should be true.\n    \"\"\"\n    return self.request.meta.get('is_unverifiable', False)",
                            "@property\ndef unverifiable(self):\n    return self.is_unverifiable()",
                            "def get_origin_req_host(self):\n    return urlparse_cached(self.request).hostname",
                            "def has_header(self, name):\n    return name in self.request.headers",
                            "def get_header(self, name, default=None):\n    return to_native_str(self.request.headers.get(name, default), errors='replace')",
                            "def header_items(self):\n    return [(to_native_str(k, errors='replace'), [to_native_str(x, errors='replace') for x in v]) for (k, v) in self.request.headers.items()]",
                            "def add_unredirected_header(self, name, value):\n    self.request.headers.appendlist(name, value)"
                        ],
                        "constructor_variables": [
                            "self.request = request"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, request)",
                            "get_full_url(self)",
                            "get_host(self)",
                            "get_type(self)",
                            "is_unverifiable(self)",
                            "unverifiable(self)",
                            "get_origin_req_host(self)",
                            "has_header(self, name)",
                            "get_header(self, name, default=None)",
                            "header_items(self)",
                            "add_unredirected_header(self, name, value)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "request"
                        ]
                    },
                    "used_imports": [
                        "from scrapy.utils.httpobj import urlparse_cached"
                    ],
                    "variable_values": [
                        [
                            {
                                "hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "<GET http://www.example.com/page.html>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.http.cookies.WrappedRequest object at 0x7f3de259d430>",
                                    "variable_type": "WrappedRequest",
                                    "variable_shape": null
                                }
                            },
                            {
                                "hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "<GET http://www.example.com/page.html>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.http.cookies.WrappedRequest object at 0x7f3de259d430>",
                                    "variable_type": "WrappedRequest",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "<GET http://www.example.com/page.html>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.http.cookies.WrappedRequest object at 0x7f63abc41340>",
                                    "variable_type": "WrappedRequest",
                                    "variable_shape": null
                                }
                            },
                            {
                                "hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "<GET http://www.example.com/page.html>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.http.cookies.WrappedRequest object at 0x7f63abc41340>",
                                    "variable_type": "WrappedRequest",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "<GET http://www.example.com/page.html>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.http.cookies.WrappedRequest object at 0x7f63abc41340>",
                                    "variable_type": "WrappedRequest",
                                    "variable_shape": null
                                }
                            },
                            {
                                "hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "<GET http://www.example.com/page.html>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.http.cookies.WrappedRequest object at 0x7f63abc41340>",
                                    "variable_type": "WrappedRequest",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "# python3 uses request.unverifiable\n    @property",
                    "start_line": 140,
                    "end_line": 141
                }
            ],
            "inscope_functions": [
                "def potential_domain_matches(domain):\n    \"\"\"Potential domain matches for a cookie\n\n    >>> potential_domain_matches('www.example.com')\n    ['www.example.com', 'example.com', '.www.example.com', '.example.com']\n\n    \"\"\"\n    matches = [domain]\n    try:\n        start = domain.index('.') + 1\n        end = domain.rindex('.')\n        while start < end:\n            matches.append(domain[start:])\n            start = domain.index('.', start) + 1\n    except ValueError:\n        pass\n    return matches + ['.' + d for d in matches]",
                "def __init__(self, policy=None, check_expired_frequency=10000):\n    self.policy = policy or DefaultCookiePolicy()\n    self.jar = _CookieJar(self.policy)\n    self.jar._cookies_lock = _DummyLock()\n    self.check_expired_frequency = check_expired_frequency\n    self.processed = 0",
                "def extract_cookies(self, response, request):\n    wreq = WrappedRequest(request)\n    wrsp = WrappedResponse(response)\n    return self.jar.extract_cookies(wrsp, wreq)",
                "def add_cookie_header(self, request):\n    wreq = WrappedRequest(request)\n    self.policy._now = self.jar._now = int(time.time())\n\n    # the cookiejar implementation iterates through all domains\n    # instead we restrict to potential matches on the domain\n    req_host = urlparse_cached(request).hostname\n    if not req_host:\n        return\n\n    if not IPV4_RE.search(req_host):\n        hosts = potential_domain_matches(req_host)\n        if '.' not in req_host:\n            hosts += [req_host + \".local\"]\n    else:\n        hosts = [req_host]\n\n    cookies = []\n    for host in hosts:\n        if host in self.jar._cookies:\n            cookies += self.jar._cookies_for_domain(host, wreq)\n\n    attrs = self.jar._cookie_attrs(cookies)\n    if attrs:\n        if not wreq.has_header(\"Cookie\"):\n            wreq.add_unredirected_header(\"Cookie\", \"; \".join(attrs))\n\n    self.processed += 1\n    if self.processed % self.check_expired_frequency == 0:\n        # This is still quite inefficient for large number of cookies\n        self.jar.clear_expired_cookies()",
                "@property\ndef _cookies(self):\n    return self.jar._cookies",
                "def clear_session_cookies(self, *args, **kwargs):\n    return self.jar.clear_session_cookies(*args, **kwargs)",
                "def clear(self):\n    return self.jar.clear()",
                "def __iter__(self):\n    return iter(self.jar)",
                "def __len__(self):\n    return len(self.jar)",
                "def set_policy(self, pol):\n    return self.jar.set_policy(pol)",
                "def make_cookies(self, response, request):\n    wreq = WrappedRequest(request)\n    wrsp = WrappedResponse(response)\n    return self.jar.make_cookies(wrsp, wreq)",
                "def set_cookie(self, cookie):\n    self.jar.set_cookie(cookie)",
                "def set_cookie_if_ok(self, cookie, request):\n    self.jar.set_cookie_if_ok(cookie, WrappedRequest(request))",
                "def acquire(self):\n    pass",
                "def release(self):\n    pass",
                "def __init__(self, request):\n    self.request = request",
                "def get_full_url(self):\n    return self.request.url",
                "def get_host(self):\n    return urlparse_cached(self.request).netloc",
                "def get_type(self):\n    return urlparse_cached(self.request).scheme",
                "def is_unverifiable(self):\n    \"\"\"Unverifiable should indicate whether the request is unverifiable, as defined by RFC 2965.\n\n    It defaults to False. An unverifiable request is one whose URL the user did not have the\n    option to approve. For example, if the request is for an image in an\n    HTML document, and the user had no option to approve the automatic\n    fetching of the image, this should be true.\n    \"\"\"\n    return self.request.meta.get('is_unverifiable', False)",
                "@property\ndef unverifiable(self):\n    return self.is_unverifiable()",
                "def get_origin_req_host(self):\n    return urlparse_cached(self.request).hostname",
                "def has_header(self, name):\n    return name in self.request.headers",
                "def get_header(self, name, default=None):\n    return to_native_str(self.request.headers.get(name, default),\n                         errors='replace')",
                "def header_items(self):\n    return [\n        (to_native_str(k, errors='replace'),\n         [to_native_str(x, errors='replace') for x in v])\n        for k, v in self.request.headers.items()\n    ]",
                "def add_unredirected_header(self, name, value):\n    self.request.headers.appendlist(name, value)",
                "def __init__(self, response):\n    self.response = response",
                "def info(self):\n    return self",
                "def get_all(self, name, default=None):\n    return [to_native_str(v, errors='replace')\n            for v in self.response.headers.getlist(name)]"
            ],
            "inscope_function_signatures": [
                "potential_domain_matches(domain)",
                "__init__(self, policy=None, check_expired_frequency=10000)",
                "extract_cookies(self, response, request)",
                "add_cookie_header(self, request)",
                "_cookies(self)",
                "clear_session_cookies(self, *args, **kwargs)",
                "clear(self)",
                "__iter__(self)",
                "__len__(self)",
                "set_policy(self, pol)",
                "make_cookies(self, response, request)",
                "set_cookie(self, cookie)",
                "set_cookie_if_ok(self, cookie, request)",
                "acquire(self)",
                "release(self)",
                "__init__(self, request)",
                "get_full_url(self)",
                "get_host(self)",
                "get_type(self)",
                "is_unverifiable(self)",
                "unverifiable(self)",
                "get_origin_req_host(self)",
                "has_header(self, name)",
                "get_header(self, name, default=None)",
                "header_items(self)",
                "add_unredirected_header(self, name, value)",
                "__init__(self, response)",
                "info(self)",
                "get_all(self, name, default=None)"
            ],
            "variables_in_file": {
                "object": [
                    104,
                    9,
                    112,
                    166
                ],
                "self.policy": [
                    24,
                    11,
                    12
                ],
                "self": [
                    128,
                    138,
                    11,
                    12,
                    13,
                    14,
                    15,
                    143,
                    146,
                    20,
                    149,
                    24,
                    152,
                    159,
                    163,
                    41,
                    42,
                    169,
                    44,
                    172,
                    49,
                    50,
                    177,
                    52,
                    56,
                    59,
                    62,
                    65,
                    68,
                    71,
                    76,
                    79,
                    82,
                    119,
                    122,
                    125
                ],
                "policy": [
                    11
                ],
                "DefaultCookiePolicy": [
                    11
                ],
                "self.jar": [
                    65,
                    68,
                    71,
                    41,
                    42,
                    12,
                    13,
                    44,
                    76,
                    79,
                    82,
                    20,
                    52,
                    24,
                    56,
                    59,
                    62
                ],
                "_CookieJar": [
                    12
                ],
                "self.jar._cookies_lock": [
                    13
                ],
                "_DummyLock": [
                    13
                ],
                "self.check_expired_frequency": [
                    50,
                    14
                ],
                "check_expired_frequency": [
                    14
                ],
                "self.processed": [
                    49,
                    50,
                    15
                ],
                "wreq": [
                    42,
                    74,
                    76,
                    46,
                    47,
                    18,
                    20,
                    23
                ],
                "WrappedRequest": [
                    18,
                    82,
                    74,
                    23
                ],
                "request": [
                    74,
                    18,
                    82,
                    119,
                    23,
                    28
                ],
                "wrsp": [
                    75,
                    19,
                    20,
                    76
                ],
                "WrappedResponse": [
                    75,
                    19
                ],
                "response": [
                    169,
                    75,
                    19
                ],
                "self.jar.extract_cookies": [
                    20
                ],
                "self.policy._now": [
                    24
                ],
                "self.jar._now": [
                    24
                ],
                "int": [
                    24
                ],
                "time.time": [
                    24
                ],
                "time": [
                    24
                ],
                "req_host": [
                    32,
                    33,
                    34,
                    35,
                    37,
                    28,
                    29
                ],
                "hostname": [
                    146,
                    28
                ],
                "urlparse_cached": [
                    128,
                    146,
                    28,
                    125
                ],
                "IPV4_RE.search": [
                    32
                ],
                "IPV4_RE": [
                    32
                ],
                "hosts": [
                    40,
                    33,
                    35,
                    37
                ],
                "potential_domain_matches": [
                    33
                ],
                "cookies": [
                    42,
                    44,
                    39
                ],
                "host": [
                    40,
                    41,
                    42
                ],
                "self.jar._cookies": [
                    56,
                    41
                ],
                "self.jar._cookies_for_domain": [
                    42
                ],
                "attrs": [
                    44,
                    45,
                    47
                ],
                "self.jar._cookie_attrs": [
                    44
                ],
                "wreq.has_header": [
                    46
                ],
                "wreq.add_unredirected_header": [
                    47
                ],
                "join": [
                    47
                ],
                "self.jar.clear_expired_cookies": [
                    52
                ],
                "property": [
                    141,
                    54
                ],
                "self.jar.clear_session_cookies": [
                    59
                ],
                "args": [
                    59
                ],
                "kwargs": [
                    59
                ],
                "self.jar.clear": [
                    62
                ],
                "iter": [
                    65
                ],
                "len": [
                    68
                ],
                "self.jar.set_policy": [
                    71
                ],
                "pol": [
                    71
                ],
                "self.jar.make_cookies": [
                    76
                ],
                "self.jar.set_cookie": [
                    79
                ],
                "cookie": [
                    82,
                    79
                ],
                "self.jar.set_cookie_if_ok": [
                    82
                ],
                "matches": [
                    97,
                    92,
                    101
                ],
                "domain": [
                    97,
                    98,
                    92,
                    94,
                    95
                ],
                "start": [
                    96,
                    97,
                    98,
                    94
                ],
                "domain.index": [
                    98,
                    94
                ],
                "end": [
                    96,
                    95
                ],
                "domain.rindex": [
                    95
                ],
                "matches.append": [
                    97
                ],
                "ValueError": [
                    99
                ],
                "d": [
                    101
                ],
                "self.request": [
                    128,
                    163,
                    138,
                    146,
                    149,
                    119,
                    152,
                    122,
                    125,
                    159
                ],
                "self.request.url": [
                    122
                ],
                "netloc": [
                    125
                ],
                "scheme": [
                    128
                ],
                "self.request.meta.get": [
                    138
                ],
                "self.request.meta": [
                    138
                ],
                "self.is_unverifiable": [
                    143
                ],
                "name": [
                    152,
                    177,
                    163,
                    149
                ],
                "self.request.headers": [
                    152,
                    163,
                    149,
                    159
                ],
                "to_native_str": [
                    152,
                    157,
                    158,
                    176
                ],
                "self.request.headers.get": [
                    152
                ],
                "default": [
                    152
                ],
                "k": [
                    157,
                    159
                ],
                "x": [
                    158
                ],
                "v": [
                    176,
                    177,
                    158,
                    159
                ],
                "self.request.headers.items": [
                    159
                ],
                "self.request.headers.appendlist": [
                    163
                ],
                "value": [
                    163
                ],
                "self.response": [
                    169,
                    177
                ],
                "self.response.headers.getlist": [
                    177
                ],
                "self.response.headers": [
                    177
                ],
                "getheaders": [
                    179
                ],
                "get_all": [
                    179
                ]
            },
            "filtered_variables_in_file": {
                "self.policy": [
                    24,
                    11,
                    12
                ],
                "self": [
                    128,
                    138,
                    11,
                    12,
                    13,
                    14,
                    15,
                    143,
                    146,
                    20,
                    149,
                    24,
                    152,
                    159,
                    163,
                    41,
                    42,
                    169,
                    44,
                    172,
                    49,
                    50,
                    177,
                    52,
                    56,
                    59,
                    62,
                    65,
                    68,
                    71,
                    76,
                    79,
                    82,
                    119,
                    122,
                    125
                ],
                "policy": [
                    11
                ],
                "DefaultCookiePolicy": [
                    11
                ],
                "self.jar": [
                    65,
                    68,
                    71,
                    41,
                    42,
                    12,
                    13,
                    44,
                    76,
                    79,
                    82,
                    20,
                    52,
                    24,
                    56,
                    59,
                    62
                ],
                "_CookieJar": [
                    12
                ],
                "self.jar._cookies_lock": [
                    13
                ],
                "_DummyLock": [
                    13
                ],
                "self.check_expired_frequency": [
                    50,
                    14
                ],
                "check_expired_frequency": [
                    14
                ],
                "self.processed": [
                    49,
                    50,
                    15
                ],
                "wreq": [
                    42,
                    74,
                    76,
                    46,
                    47,
                    18,
                    20,
                    23
                ],
                "WrappedRequest": [
                    18,
                    82,
                    74,
                    23
                ],
                "request": [
                    74,
                    18,
                    82,
                    119,
                    23,
                    28
                ],
                "wrsp": [
                    75,
                    19,
                    20,
                    76
                ],
                "WrappedResponse": [
                    75,
                    19
                ],
                "response": [
                    169,
                    75,
                    19
                ],
                "self.jar.extract_cookies": [
                    20
                ],
                "self.policy._now": [
                    24
                ],
                "self.jar._now": [
                    24
                ],
                "time.time": [
                    24
                ],
                "time": [
                    24
                ],
                "req_host": [
                    32,
                    33,
                    34,
                    35,
                    37,
                    28,
                    29
                ],
                "hostname": [
                    146,
                    28
                ],
                "urlparse_cached": [
                    128,
                    146,
                    28,
                    125
                ],
                "IPV4_RE.search": [
                    32
                ],
                "IPV4_RE": [
                    32
                ],
                "hosts": [
                    40,
                    33,
                    35,
                    37
                ],
                "potential_domain_matches": [
                    33
                ],
                "cookies": [
                    42,
                    44,
                    39
                ],
                "host": [
                    40,
                    41,
                    42
                ],
                "self.jar._cookies": [
                    56,
                    41
                ],
                "self.jar._cookies_for_domain": [
                    42
                ],
                "attrs": [
                    44,
                    45,
                    47
                ],
                "self.jar._cookie_attrs": [
                    44
                ],
                "wreq.has_header": [
                    46
                ],
                "wreq.add_unredirected_header": [
                    47
                ],
                "join": [
                    47
                ],
                "self.jar.clear_expired_cookies": [
                    52
                ],
                "self.jar.clear_session_cookies": [
                    59
                ],
                "args": [
                    59
                ],
                "kwargs": [
                    59
                ],
                "self.jar.clear": [
                    62
                ],
                "self.jar.set_policy": [
                    71
                ],
                "pol": [
                    71
                ],
                "self.jar.make_cookies": [
                    76
                ],
                "self.jar.set_cookie": [
                    79
                ],
                "cookie": [
                    82,
                    79
                ],
                "self.jar.set_cookie_if_ok": [
                    82
                ],
                "matches": [
                    97,
                    92,
                    101
                ],
                "domain": [
                    97,
                    98,
                    92,
                    94,
                    95
                ],
                "start": [
                    96,
                    97,
                    98,
                    94
                ],
                "domain.index": [
                    98,
                    94
                ],
                "end": [
                    96,
                    95
                ],
                "domain.rindex": [
                    95
                ],
                "matches.append": [
                    97
                ],
                "d": [
                    101
                ],
                "self.request": [
                    128,
                    163,
                    138,
                    146,
                    149,
                    119,
                    152,
                    122,
                    125,
                    159
                ],
                "self.request.url": [
                    122
                ],
                "netloc": [
                    125
                ],
                "scheme": [
                    128
                ],
                "self.request.meta.get": [
                    138
                ],
                "self.request.meta": [
                    138
                ],
                "self.is_unverifiable": [
                    143
                ],
                "name": [
                    152,
                    177,
                    163,
                    149
                ],
                "self.request.headers": [
                    152,
                    163,
                    149,
                    159
                ],
                "to_native_str": [
                    152,
                    157,
                    158,
                    176
                ],
                "self.request.headers.get": [
                    152
                ],
                "default": [
                    152
                ],
                "k": [
                    157,
                    159
                ],
                "x": [
                    158
                ],
                "v": [
                    176,
                    177,
                    158,
                    159
                ],
                "self.request.headers.items": [
                    159
                ],
                "self.request.headers.appendlist": [
                    163
                ],
                "value": [
                    163
                ],
                "self.response": [
                    169,
                    177
                ],
                "self.response.headers.getlist": [
                    177
                ],
                "self.response.headers": [
                    177
                ],
                "getheaders": [
                    179
                ],
                "get_all": [
                    179
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_19/tests/test_http_cookies.py",
                "test_function": "test_get_origin_req_host",
                "test_function_code": "    def test_get_origin_req_host(self):\n        self.assertEqual(self.wrapped.get_origin_req_host(), 'www.example.com')\n        self.assertEqual(self.wrapped.origin_req_host, 'www.example.com')",
                "test_error": "AttributeError: 'WrappedRequest' object has no attribute 'origin_req_host'",
                "full_test_error": "self = <tests.test_http_cookies.WrappedRequestTest testMethod=test_get_origin_req_host>\n\n    def test_get_origin_req_host(self):\n        self.assertEqual(self.wrapped.get_origin_req_host(), 'www.example.com')\n>       self.assertEqual(self.wrapped.origin_req_host, 'www.example.com')\nE       AttributeError: 'WrappedRequest' object has no attribute 'origin_req_host'\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_19/tests/test_http_cookies.py:38: AttributeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}