{
    "scrapy:15": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/scrapy/utils/url.py": {
            "buggy_functions": [
                {
                    "function_name": "_safe_ParseResult",
                    "function_code": "def _safe_ParseResult(parts, encoding='utf8', path_encoding='utf8'):\n    return (\n        to_native_str(parts.scheme),\n        to_native_str(parts.netloc.encode('idna')),\n\n        # default encoding for path component SHOULD be UTF-8\n        quote(to_bytes(parts.path, path_encoding), _safe_chars),\n        quote(to_bytes(parts.params, path_encoding), _safe_chars),\n\n        # encoding of query and fragment follows page encoding\n        # or form-charset (if known and passed)\n        quote(to_bytes(parts.query, encoding), _safe_chars),\n        quote(to_bytes(parts.fragment, encoding), _safe_chars)\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 43,
                    "end_line": 56,
                    "variables": {
                        "to_native_str": [
                            45,
                            46
                        ],
                        "parts.scheme": [
                            45
                        ],
                        "parts": [
                            45,
                            46,
                            49,
                            50,
                            54,
                            55
                        ],
                        "parts.netloc.encode": [
                            46
                        ],
                        "parts.netloc": [
                            46
                        ],
                        "quote": [
                            49,
                            50,
                            54,
                            55
                        ],
                        "to_bytes": [
                            49,
                            50,
                            54,
                            55
                        ],
                        "parts.path": [
                            49
                        ],
                        "path_encoding": [
                            49,
                            50
                        ],
                        "_safe_chars": [
                            49,
                            50,
                            54,
                            55
                        ],
                        "parts.params": [
                            50
                        ],
                        "parts.query": [
                            54
                        ],
                        "encoding": [
                            54,
                            55
                        ],
                        "parts.fragment": [
                            55
                        ]
                    },
                    "filtered_variables": {
                        "to_native_str": [
                            45,
                            46
                        ],
                        "parts.scheme": [
                            45
                        ],
                        "parts": [
                            45,
                            46,
                            49,
                            50,
                            54,
                            55
                        ],
                        "parts.netloc.encode": [
                            46
                        ],
                        "parts.netloc": [
                            46
                        ],
                        "quote": [
                            49,
                            50,
                            54,
                            55
                        ],
                        "to_bytes": [
                            49,
                            50,
                            54,
                            55
                        ],
                        "parts.path": [
                            49
                        ],
                        "path_encoding": [
                            49,
                            50
                        ],
                        "_safe_chars": [
                            49,
                            50,
                            54,
                            55
                        ],
                        "parts.params": [
                            50
                        ],
                        "parts.query": [
                            54
                        ],
                        "encoding": [
                            54,
                            55
                        ],
                        "parts.fragment": [
                            55
                        ]
                    },
                    "diff_line_number": 43,
                    "class_data": null,
                    "used_imports": [
                        "from six.moves.urllib.parse import ParseResult, urlunparse, urldefrag, urlparse, parse_qsl, urlencode, quote, unquote",
                        "from w3lib.url import _safe_chars",
                        "from scrapy.utils.python import to_bytes, to_native_str, to_unicode"
                    ],
                    "variable_values": [
                        [
                            {
                                "to_native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "parts": {
                                    "variable_value": "ParseResult(scheme='http', netloc='.example.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "parts.netloc.encode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.netloc": {
                                    "variable_value": "'.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "quote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.path": {
                                    "variable_value": "'/r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "path_encoding": {
                                    "variable_value": "'utf8'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_safe_chars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parts.query": {
                                    "variable_value": "'q=r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "encoding": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.fragment": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "to_native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "parts": {
                                    "variable_value": "ParseResult(scheme='http', netloc='.example.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "parts.netloc.encode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.netloc": {
                                    "variable_value": "'.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "quote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.path": {
                                    "variable_value": "'/r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "path_encoding": {
                                    "variable_value": "'utf8'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_safe_chars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parts.query": {
                                    "variable_value": "'q=r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "encoding": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.fragment": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.netloc.encode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.netloc": {
                                    "variable_value": "'.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "parts": {
                                    "variable_value": "ParseResult(scheme='http', netloc='.example.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "to_native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "quote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.path": {
                                    "variable_value": "'/r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "path_encoding": {
                                    "variable_value": "'utf8'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_safe_chars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parts.query": {
                                    "variable_value": "'q=r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "encoding": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.fragment": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "netloc": {
                                    "variable_value": "'.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "parts.netloc.encode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.netloc": {
                                    "variable_value": "'.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "parts": {
                                    "variable_value": "ParseResult(scheme='http', netloc='.example.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "to_native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "quote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.path": {
                                    "variable_value": "'/r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "path_encoding": {
                                    "variable_value": "'utf8'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_safe_chars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parts.query": {
                                    "variable_value": "'q=r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "encoding": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.fragment": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.netloc.encode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.netloc": {
                                    "variable_value": "'www.exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com'",
                                    "variable_type": "str",
                                    "variable_shape": "85"
                                },
                                "parts": {
                                    "variable_value": "ParseResult(scheme='http', netloc='www.exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "to_native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "quote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.path": {
                                    "variable_value": "'/r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "path_encoding": {
                                    "variable_value": "'utf8'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_safe_chars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parts.query": {
                                    "variable_value": "'q=r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "encoding": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.fragment": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "netloc": {
                                    "variable_value": "'www.exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com'",
                                    "variable_type": "str",
                                    "variable_shape": "85"
                                },
                                "parts.netloc.encode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.netloc": {
                                    "variable_value": "'www.exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com'",
                                    "variable_type": "str",
                                    "variable_shape": "85"
                                },
                                "parts": {
                                    "variable_value": "ParseResult(scheme='http', netloc='www.exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "to_native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "quote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.path": {
                                    "variable_value": "'/r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "path_encoding": {
                                    "variable_value": "'utf8'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_safe_chars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parts.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parts.query": {
                                    "variable_value": "'q=r\u00e9sum\u00e9'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "encoding": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parts.fragment": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def url_is_from_any_domain(url, domains):\n    \"\"\"Return True if the url belongs to any of the given domains\"\"\"\n    host = parse_url(url).netloc.lower()\n    if not host:\n        return False\n    domains = [d.lower() for d in domains]\n    return any((host == d) or (host.endswith('.%s' % d)) for d in domains)",
                        "signature": "url_is_from_any_domain(url, domains)"
                    },
                    {
                        "code": "def url_is_from_spider(url, spider):\n    \"\"\"Return True if the url belongs to the given spider\"\"\"\n    return url_is_from_any_domain(url,\n        [spider.name] + list(getattr(spider, 'allowed_domains', [])))",
                        "signature": "url_is_from_spider(url, spider)"
                    },
                    {
                        "code": "def url_has_any_extension(url, extensions):\n    return posixpath.splitext(parse_url(url).path)[1].lower() in extensions",
                        "signature": "url_has_any_extension(url, extensions)"
                    },
                    {
                        "code": "def _safe_ParseResult(parts, encoding='utf8', path_encoding='utf8'):\n    return (\n        to_native_str(parts.scheme),\n        to_native_str(parts.netloc.encode('idna')),\n\n        # default encoding for path component SHOULD be UTF-8\n        quote(to_bytes(parts.path, path_encoding), _safe_chars),\n        quote(to_bytes(parts.params, path_encoding), _safe_chars),\n\n        # encoding of query and fragment follows page encoding\n        # or form-charset (if known and passed)\n        quote(to_bytes(parts.query, encoding), _safe_chars),\n        quote(to_bytes(parts.fragment, encoding), _safe_chars)\n    )",
                        "signature": "_safe_ParseResult(parts, encoding='utf8', path_encoding='utf8')"
                    },
                    {
                        "code": "def canonicalize_url(url, keep_blank_values=True, keep_fragments=False,\n                     encoding=None):\n    \"\"\"Canonicalize the given url by applying the following procedures:\n\n    - sort query arguments, first by key, then by value\n    - percent encode paths ; non-ASCII characters are percent-encoded\n      using UTF-8 (RFC-3986)\n    - percent encode query arguments ; non-ASCII characters are percent-encoded\n      using passed `encoding` (UTF-8 by default)\n    - normalize all spaces (in query arguments) '+' (plus symbol)\n    - normalize percent encodings case (%2f -> %2F)\n    - remove query arguments with blank values (unless `keep_blank_values` is True)\n    - remove fragments (unless `keep_fragments` is True)\n\n    The url passed can be bytes or unicode, while the url returned is\n    always a native str (bytes in Python 2, unicode in Python 3).\n\n    For examples see the tests in tests/test_utils_url.py\n    \"\"\"\n    # If supplied `encoding` is not compatible with all characters in `url`,\n    # fallback to UTF-8 as safety net.\n    # UTF-8 can handle all Unicode characters,\n    # so we should be covered regarding URL normalization,\n    # if not for proper URL expected by remote website.\n    try:\n        scheme, netloc, path, params, query, fragment = _safe_ParseResult(\n            parse_url(url), encoding=encoding)\n    except UnicodeEncodeError as e:\n        scheme, netloc, path, params, query, fragment = _safe_ParseResult(\n            parse_url(url), encoding='utf8')\n\n    # 1. decode query-string as UTF-8 (or keep raw bytes),\n    #    sort values,\n    #    and percent-encode them back\n    if six.PY2:\n        keyvals = parse_qsl(query, keep_blank_values)\n    else:\n        # Python3's urllib.parse.parse_qsl does not work as wanted\n        # for percent-encoded characters that do not match passed encoding,\n        # they get lost.\n        #\n        # e.g., 'q=b%a3' becomes [('q', 'b\\ufffd')]\n        # (ie. with 'REPLACEMENT CHARACTER' (U+FFFD),\n        #      instead of \\xa3 that you get with Python2's parse_qsl)\n        #\n        # what we want here is to keep raw bytes, and percent encode them\n        # so as to preserve whatever encoding what originally used.\n        #\n        # See https://tools.ietf.org/html/rfc3987#section-6.4:\n        #\n        # For example, it is possible to have a URI reference of\n        # \"http://www.example.org/r%E9sum%E9.xml#r%C3%A9sum%C3%A9\", where the\n        # document name is encoded in iso-8859-1 based on server settings, but\n        # where the fragment identifier is encoded in UTF-8 according to\n        # [XPointer]. The IRI corresponding to the above URI would be (in XML\n        # notation)\n        # \"http://www.example.org/r%E9sum%E9.xml#r&#xE9;sum&#xE9;\".\n        # Similar considerations apply to query parts.  The functionality of\n        # IRIs (namely, to be able to include non-ASCII characters) can only be\n        # used if the query part is encoded in UTF-8.\n        keyvals = parse_qsl_to_bytes(query, keep_blank_values)\n    keyvals.sort()\n    query = urlencode(keyvals)\n\n    # 2. decode percent-encoded sequences in path as UTF-8 (or keep raw bytes)\n    #    and percent-encode path again (this normalizes to upper-case %XX)\n    uqp = _unquotepath(path)\n    path = quote(uqp, _safe_chars) or '/'\n\n    fragment = '' if not keep_fragments else fragment\n\n    # every part should be safe already\n    return urlunparse((scheme, netloc.lower(), path, params, query, fragment))",
                        "signature": "canonicalize_url(url, keep_blank_values=True, keep_fragments=False, encoding=None)"
                    },
                    {
                        "code": "def _unquotepath(path):\n    for reserved in ('2f', '2F', '3f', '3F'):\n        path = path.replace('%' + reserved, '%25' + reserved.upper())\n\n    if six.PY2:\n        # in Python 2, '%a3' becomes '\\xa3', which is what we want\n        return unquote(path)\n    else:\n        # in Python 3,\n        # standard lib's unquote() does not work for non-UTF-8\n        # percent-escaped characters, they get lost.\n        # e.g., '%a3' becomes 'REPLACEMENT CHARACTER' (U+FFFD)\n        #\n        # unquote_to_bytes() returns raw bytes instead\n        return unquote_to_bytes(path)",
                        "signature": "_unquotepath(path)"
                    },
                    {
                        "code": "def parse_url(url, encoding=None):\n    \"\"\"Return urlparsed url from the given argument (which could be an already\n    parsed url)\n    \"\"\"\n    if isinstance(url, ParseResult):\n        return url\n    return urlparse(to_unicode(url, encoding))",
                        "signature": "parse_url(url, encoding=None)"
                    },
                    {
                        "code": "def escape_ajax(url):\n    \"\"\"\n    Return the crawleable url according to:\n    http://code.google.com/web/ajaxcrawling/docs/getting-started.html\n\n    >>> escape_ajax(\"www.example.com/ajax.html#!key=value\")\n    'www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue'\n    >>> escape_ajax(\"www.example.com/ajax.html?k1=v1&k2=v2#!key=value\")\n    'www.example.com/ajax.html?k1=v1&k2=v2&_escaped_fragment_=key%3Dvalue'\n    >>> escape_ajax(\"www.example.com/ajax.html?#!key=value\")\n    'www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue'\n    >>> escape_ajax(\"www.example.com/ajax.html#!\")\n    'www.example.com/ajax.html?_escaped_fragment_='\n\n    URLs that are not \"AJAX crawlable\" (according to Google) returned as-is:\n\n    >>> escape_ajax(\"www.example.com/ajax.html#key=value\")\n    'www.example.com/ajax.html#key=value'\n    >>> escape_ajax(\"www.example.com/ajax.html#\")\n    'www.example.com/ajax.html#'\n    >>> escape_ajax(\"www.example.com/ajax.html\")\n    'www.example.com/ajax.html'\n    \"\"\"\n    defrag, frag = urldefrag(url)\n    if not frag.startswith('!'):\n        return url\n    return add_or_replace_parameter(defrag, '_escaped_fragment_', frag[1:])",
                        "signature": "escape_ajax(url)"
                    },
                    {
                        "code": "def add_http_if_no_scheme(url):\n    \"\"\"Add http as the default scheme if it is missing from the url.\"\"\"\n    match = re.match(r\"^\\w+://\", url, flags=re.I)\n    if not match:\n        parts = urlparse(url)\n        scheme = \"http:\" if parts.netloc else \"http://\"\n        url = scheme + url\n\n    return url",
                        "signature": "add_http_if_no_scheme(url)"
                    },
                    {
                        "code": "def guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or http:// otherwise.\"\"\"\n    parts = urlparse(url)\n    if parts.scheme:\n        return url\n    # Note: this does not match Windows filepath\n    if re.match(r'''^                   # start with...\n                    (\n                        \\.              # ...a single dot,\n                        (\n                            \\. | [^/\\.]+  # optionally followed by\n                        )?                # either a second dot or some characters\n                    )?      # optional match of \".\", \"..\" or \".blabla\"\n                    /       # at least one \"/\" for a file path,\n                    .       # and something after the \"/\"\n                    ''', parts.path, flags=re.VERBOSE):\n        return any_to_uri(url)\n    else:\n        return add_http_if_no_scheme(url)",
                        "signature": "guess_scheme(url)"
                    },
                    {
                        "code": "def parse_qsl_to_bytes(qs, keep_blank_values=False, strict_parsing=False):\n    \"\"\"Parse a query given as a string argument.\n\n    Data are returned as a list of name, value pairs as bytes.\n\n    Arguments:\n\n    qs: percent-encoded query string to be parsed\n\n    keep_blank_values: flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.  A\n        true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n\n    strict_parsing: flag indicating what to do with parsing errors. If\n        false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n\n    \"\"\"\n    # This code is the same as Python3's parse_qsl()\n    # (at https://hg.python.org/cpython/rev/c38ac7ab8d9a)\n    # except for the unquote(s, encoding, errors) calls replaced\n    # with unquote_to_bytes(s)\n    qs, _coerce_result = _coerce_args(qs)\n    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n    r = []\n    for name_value in pairs:\n        if not name_value and not strict_parsing:\n            continue\n        nv = name_value.split('=', 1)\n        if len(nv) != 2:\n            if strict_parsing:\n                raise ValueError(\"bad query field: %r\" % (name_value,))\n            # Handle case of a control-name with no equal sign\n            if keep_blank_values:\n                nv.append('')\n            else:\n                continue\n        if len(nv[1]) or keep_blank_values:\n            name = nv[0].replace('+', ' ')\n            name = unquote_to_bytes(name)\n            name = _coerce_result(name)\n            value = nv[1].replace('+', ' ')\n            value = unquote_to_bytes(value)\n            value = _coerce_result(value)\n            r.append((name, value))\n    return r",
                        "signature": "parse_qsl_to_bytes(qs, keep_blank_values=False, strict_parsing=False)"
                    }
                ],
                "file_scope_classes": []
            },
            "variables_in_file": {
                "six.PY2": [
                    160,
                    138,
                    93,
                    14
                ],
                "six": [
                    160,
                    138,
                    93,
                    14
                ],
                "host": [
                    26,
                    27,
                    30
                ],
                "netloc.lower": [
                    26,
                    131
                ],
                "netloc": [
                    26,
                    131,
                    84,
                    87
                ],
                "parse_url": [
                    40,
                    26,
                    88,
                    85
                ],
                "url": [
                    248,
                    257,
                    35,
                    40,
                    250,
                    236,
                    269,
                    238,
                    271,
                    244,
                    85,
                    246,
                    88,
                    26,
                    155,
                    156,
                    157,
                    255
                ],
                "domains": [
                    29,
                    30
                ],
                "d.lower": [
                    29
                ],
                "d": [
                    29,
                    30
                ],
                "any": [
                    30
                ],
                "host.endswith": [
                    30
                ],
                "url_is_from_any_domain": [
                    35
                ],
                "spider.name": [
                    36
                ],
                "spider": [
                    36
                ],
                "list": [
                    36
                ],
                "getattr": [
                    36
                ],
                "lower": [
                    40
                ],
                "posixpath.splitext": [
                    40
                ],
                "posixpath": [
                    40
                ],
                "path": [
                    131,
                    40,
                    136,
                    140,
                    84,
                    148,
                    87,
                    125,
                    126
                ],
                "extensions": [
                    40
                ],
                "to_native_str": [
                    45,
                    46
                ],
                "parts.scheme": [
                    256,
                    45
                ],
                "parts": [
                    256,
                    268,
                    45,
                    46,
                    49,
                    50,
                    54,
                    55,
                    246,
                    247,
                    255
                ],
                "parts.netloc.encode": [
                    46
                ],
                "parts.netloc": [
                    46,
                    247
                ],
                "quote": [
                    49,
                    50,
                    54,
                    55,
                    126
                ],
                "to_bytes": [
                    49,
                    50,
                    54,
                    55
                ],
                "parts.path": [
                    49,
                    268
                ],
                "path_encoding": [
                    49,
                    50
                ],
                "_safe_chars": [
                    49,
                    50,
                    54,
                    55,
                    126
                ],
                "parts.params": [
                    50
                ],
                "parts.query": [
                    54
                ],
                "encoding": [
                    157,
                    85,
                    54,
                    55
                ],
                "parts.fragment": [
                    55
                ],
                "scheme": [
                    131,
                    84,
                    87,
                    247,
                    248
                ],
                "params": [
                    131,
                    84,
                    87
                ],
                "query": [
                    131,
                    84,
                    87,
                    119,
                    121,
                    94
                ],
                "fragment": [
                    128,
                    131,
                    84,
                    87
                ],
                "_safe_ParseResult": [
                    84,
                    87
                ],
                "UnicodeEncodeError": [
                    86
                ],
                "keyvals": [
                    120,
                    121,
                    94,
                    119
                ],
                "parse_qsl": [
                    94
                ],
                "keep_blank_values": [
                    202,
                    198,
                    94,
                    119
                ],
                "parse_qsl_to_bytes": [
                    119
                ],
                "keyvals.sort": [
                    120
                ],
                "urlencode": [
                    121
                ],
                "uqp": [
                    125,
                    126
                ],
                "_unquotepath": [
                    125
                ],
                "keep_fragments": [
                    128
                ],
                "urlunparse": [
                    131
                ],
                "reserved": [
                    136,
                    135
                ],
                "path.replace": [
                    136
                ],
                "reserved.upper": [
                    136
                ],
                "unquote": [
                    140
                ],
                "unquote_to_bytes": [
                    204,
                    148,
                    207
                ],
                "isinstance": [
                    155
                ],
                "ParseResult": [
                    155
                ],
                "urlparse": [
                    157,
                    246,
                    255
                ],
                "to_unicode": [
                    157
                ],
                "qs": [
                    187,
                    188
                ],
                "_coerce_result": [
                    208,
                    187,
                    205
                ],
                "_coerce_args": [
                    187
                ],
                "pairs": [
                    188,
                    190
                ],
                "s2": [
                    188
                ],
                "s1": [
                    188
                ],
                "qs.split": [
                    188
                ],
                "s1.split": [
                    188
                ],
                "r": [
                    209,
                    210,
                    189
                ],
                "name_value": [
                    193,
                    196,
                    190,
                    191
                ],
                "strict_parsing": [
                    195,
                    191
                ],
                "nv": [
                    193,
                    194,
                    199,
                    202,
                    203,
                    206
                ],
                "name_value.split": [
                    193
                ],
                "len": [
                    202,
                    194
                ],
                "ValueError": [
                    196
                ],
                "nv.append": [
                    199
                ],
                "name": [
                    209,
                    203,
                    204,
                    205
                ],
                "replace": [
                    203,
                    206
                ],
                "value": [
                    208,
                    209,
                    206,
                    207
                ],
                "r.append": [
                    209
                ],
                "defrag": [
                    236,
                    239
                ],
                "frag": [
                    236,
                    237,
                    239
                ],
                "urldefrag": [
                    236
                ],
                "frag.startswith": [
                    237
                ],
                "add_or_replace_parameter": [
                    239
                ],
                "match": [
                    244,
                    245
                ],
                "re.match": [
                    259,
                    244
                ],
                "re": [
                    259,
                    244,
                    268
                ],
                "re.I": [
                    244
                ],
                "re.VERBOSE": [
                    268
                ],
                "any_to_uri": [
                    269
                ],
                "add_http_if_no_scheme": [
                    271
                ]
            },
            "filtered_variables_in_file": {
                "six.PY2": [
                    160,
                    138,
                    93,
                    14
                ],
                "six": [
                    160,
                    138,
                    93,
                    14
                ],
                "host": [
                    26,
                    27,
                    30
                ],
                "netloc.lower": [
                    26,
                    131
                ],
                "netloc": [
                    26,
                    131,
                    84,
                    87
                ],
                "parse_url": [
                    40,
                    26,
                    88,
                    85
                ],
                "url": [
                    248,
                    257,
                    35,
                    40,
                    250,
                    236,
                    269,
                    238,
                    271,
                    244,
                    85,
                    246,
                    88,
                    26,
                    155,
                    156,
                    157,
                    255
                ],
                "domains": [
                    29,
                    30
                ],
                "d.lower": [
                    29
                ],
                "d": [
                    29,
                    30
                ],
                "host.endswith": [
                    30
                ],
                "url_is_from_any_domain": [
                    35
                ],
                "spider.name": [
                    36
                ],
                "spider": [
                    36
                ],
                "lower": [
                    40
                ],
                "posixpath.splitext": [
                    40
                ],
                "posixpath": [
                    40
                ],
                "path": [
                    131,
                    40,
                    136,
                    140,
                    84,
                    148,
                    87,
                    125,
                    126
                ],
                "extensions": [
                    40
                ],
                "to_native_str": [
                    45,
                    46
                ],
                "parts.scheme": [
                    256,
                    45
                ],
                "parts": [
                    256,
                    268,
                    45,
                    46,
                    49,
                    50,
                    54,
                    55,
                    246,
                    247,
                    255
                ],
                "parts.netloc.encode": [
                    46
                ],
                "parts.netloc": [
                    46,
                    247
                ],
                "quote": [
                    49,
                    50,
                    54,
                    55,
                    126
                ],
                "to_bytes": [
                    49,
                    50,
                    54,
                    55
                ],
                "parts.path": [
                    49,
                    268
                ],
                "path_encoding": [
                    49,
                    50
                ],
                "_safe_chars": [
                    49,
                    50,
                    54,
                    55,
                    126
                ],
                "parts.params": [
                    50
                ],
                "parts.query": [
                    54
                ],
                "encoding": [
                    157,
                    85,
                    54,
                    55
                ],
                "parts.fragment": [
                    55
                ],
                "scheme": [
                    131,
                    84,
                    87,
                    247,
                    248
                ],
                "params": [
                    131,
                    84,
                    87
                ],
                "query": [
                    131,
                    84,
                    87,
                    119,
                    121,
                    94
                ],
                "fragment": [
                    128,
                    131,
                    84,
                    87
                ],
                "_safe_ParseResult": [
                    84,
                    87
                ],
                "keyvals": [
                    120,
                    121,
                    94,
                    119
                ],
                "parse_qsl": [
                    94
                ],
                "keep_blank_values": [
                    202,
                    198,
                    94,
                    119
                ],
                "parse_qsl_to_bytes": [
                    119
                ],
                "keyvals.sort": [
                    120
                ],
                "urlencode": [
                    121
                ],
                "uqp": [
                    125,
                    126
                ],
                "_unquotepath": [
                    125
                ],
                "keep_fragments": [
                    128
                ],
                "urlunparse": [
                    131
                ],
                "reserved": [
                    136,
                    135
                ],
                "path.replace": [
                    136
                ],
                "reserved.upper": [
                    136
                ],
                "unquote": [
                    140
                ],
                "unquote_to_bytes": [
                    204,
                    148,
                    207
                ],
                "ParseResult": [
                    155
                ],
                "urlparse": [
                    157,
                    246,
                    255
                ],
                "to_unicode": [
                    157
                ],
                "qs": [
                    187,
                    188
                ],
                "_coerce_result": [
                    208,
                    187,
                    205
                ],
                "_coerce_args": [
                    187
                ],
                "pairs": [
                    188,
                    190
                ],
                "s2": [
                    188
                ],
                "s1": [
                    188
                ],
                "qs.split": [
                    188
                ],
                "s1.split": [
                    188
                ],
                "r": [
                    209,
                    210,
                    189
                ],
                "name_value": [
                    193,
                    196,
                    190,
                    191
                ],
                "strict_parsing": [
                    195,
                    191
                ],
                "nv": [
                    193,
                    194,
                    199,
                    202,
                    203,
                    206
                ],
                "name_value.split": [
                    193
                ],
                "nv.append": [
                    199
                ],
                "name": [
                    209,
                    203,
                    204,
                    205
                ],
                "replace": [
                    203,
                    206
                ],
                "value": [
                    208,
                    209,
                    206,
                    207
                ],
                "r.append": [
                    209
                ],
                "defrag": [
                    236,
                    239
                ],
                "frag": [
                    236,
                    237,
                    239
                ],
                "urldefrag": [
                    236
                ],
                "frag.startswith": [
                    237
                ],
                "add_or_replace_parameter": [
                    239
                ],
                "match": [
                    244,
                    245
                ],
                "re.match": [
                    259,
                    244
                ],
                "re": [
                    259,
                    244,
                    268
                ],
                "re.I": [
                    244
                ],
                "re.VERBOSE": [
                    268
                ],
                "any_to_uri": [
                    269
                ],
                "add_http_if_no_scheme": [
                    271
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/tests/test_utils_url.py",
                "test_function": "test_canonicalize_url_idna_exceptions",
                "test_function_code": "    def test_canonicalize_url_idna_exceptions(self):\n        # missing DNS label\n        self.assertEqual(\n            canonicalize_url(u\"http://.example.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\"),\n            \"http://.example.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\")\n\n        # DNS label too long\n        self.assertEqual(\n            canonicalize_url(\n                u\"http://www.{label}.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\".format(\n                    label=u\"example\"*11)),\n            \"http://www.{label}.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\".format(\n                    label=u\"example\"*11))",
                "test_error": "UnicodeError: encoding with 'idna' codec failed (UnicodeError: label empty or too long)",
                "full_test_error": "self = <encodings.idna.Codec object at 0x7fefa7ca29a0>, input = '.example.com'\nerrors = 'strict'\n\n    def encode(self, input, errors='strict'):\n    \n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n    \n        if not input:\n            return b'', 0\n    \n        try:\n            result = input.encode('ascii')\n        except UnicodeEncodeError:\n            pass\n        else:\n            # ASCII name: fast path\n            labels = result.split(b'.')\n            for label in labels[:-1]:\n                if not (0 < len(label) < 64):\n>                   raise UnicodeError(\"label empty or too long\")\nE                   UnicodeError: label empty or too long\n\n/usr/local/lib/python3.8/encodings/idna.py:165: UnicodeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_utils_url.CanonicalizeUrlTest testMethod=test_canonicalize_url_idna_exceptions>\n\n    def test_canonicalize_url_idna_exceptions(self):\n        # missing DNS label\n        self.assertEqual(\n>           canonicalize_url(u\"http://.example.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\"),\n            \"http://.example.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\")\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/tests/test_utils_url.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/scrapy/utils/url.py:84: in canonicalize_url\n    scheme, netloc, path, params, query, fragment = _safe_ParseResult(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparts = ParseResult(scheme='http', netloc='.example.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')\nencoding = None, path_encoding = 'utf8'\n\n    def _safe_ParseResult(parts, encoding='utf8', path_encoding='utf8'):\n        return (\n            to_native_str(parts.scheme),\n>           to_native_str(parts.netloc.encode('idna')),\n    \n            # default encoding for path component SHOULD be UTF-8\n            quote(to_bytes(parts.path, path_encoding), _safe_chars),\n            quote(to_bytes(parts.params, path_encoding), _safe_chars),\n    \n            # encoding of query and fragment follows page encoding\n            # or form-charset (if known and passed)\n            quote(to_bytes(parts.query, encoding), _safe_chars),\n            quote(to_bytes(parts.fragment, encoding), _safe_chars)\n        )\nE       UnicodeError: encoding with 'idna' codec failed (UnicodeError: label empty or too long)\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/scrapy/utils/url.py:46: UnicodeError",
                "traceback": "/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/scrapy/utils/url.py:84: in canonicalize_url\n    scheme, netloc, path, params, query, fragment = _safe_ParseResult(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparts = ParseResult(scheme='http', netloc='.example.com', path='/r\u00e9sum\u00e9', params='', query='q=r\u00e9sum\u00e9', fragment='')\nencoding = None, path_encoding = 'utf8'\n\n    def _safe_ParseResult(parts, encoding='utf8', path_encoding='utf8'):\n        return (\n            to_native_str(parts.scheme),\n>           to_native_str(parts.netloc.encode('idna')),\n    \n            # default encoding for path component SHOULD be UTF-8\n            quote(to_bytes(parts.path, path_encoding), _safe_chars),\n            quote(to_bytes(parts.params, path_encoding), _safe_chars),\n    \n            # encoding of query and fragment follows page encoding\n            # or form-charset (if known and passed)\n            quote(to_bytes(parts.query, encoding), _safe_chars),\n            quote(to_bytes(parts.fragment, encoding), _safe_chars)\n        )\nE       UnicodeError: encoding with 'idna' codec failed (UnicodeError: label empty or too long)\n\n/home/ubuntu/Desktop/bgp_envs_local/repos/scrapy_15/scrapy/utils/url.py:46: UnicodeError",
                "test_function_decorators": []
            }
        ]
    }
}