{
    "1.1.1": "def _realise(self):\n    \n    commands = self._remove_duplicates(self._commands)\n    self._cached = [self._cached[0]] + sorted(\n        commands, key=lambda corrected_command: corrected_command.priority)\n    self._realised = True\n    debug('SortedCommandsSequence was realised with: {}, after: {}'.format(\n        self._cached, '\\n'.join(format_stack())), self._settings)\n",
    "1.1.2": "Realises generator, removes duplicates and sorts commands.",
    "1.2.1": "thefuck/types.py",
    "1.2.2": "from traceback import format_stack\nfrom .logs import debug",
    "1.3.1": "class SortedCorrectedCommandsSequence(object)",
    "1.3.2": "List-like collection/wrapper around generator, that:\n\n- immediately gives access to the first commands through [];\n- realises generator and sorts commands on first access to other\n  commands through [], or when len called.",
    "1.4.1": [
        "_remove_duplicates(self, corrected_commands)"
    ],
    "1.4.2": [
        "_remove_duplicates(self, corrected_commands)"
    ],
    "1.5.1": [
        "    def test_with_blank(self, settings):\n        seq = SortedCorrectedCommandsSequence(iter([]), settings)\n        assert list(seq) == []"
    ],
    "1.5.2": [
        "tests/test_types.py"
    ],
    "2.1.1": [
        [
            "E       IndexError: list index out of range"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_types.TestSortedCorrectedCommandsSequence object at 0x7f4475b7aa10>\nsettings = <Mock id='139932009513104'>\n\n    def test_with_blank(self, settings):\n        seq = SortedCorrectedCommandsSequence(iter([]), settings)\n>       assert list(seq) == []\n\ntests/test_types.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nthefuck/types.py:106: in __iter__\n    self._realise()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <thefuck.types.SortedCorrectedCommandsSequence object at 0x7f4475b848d0>\n\n    def _realise(self):\n        \"\"\"Realises generator, removes duplicates and sorts commands.\"\"\"\n        commands = self._remove_duplicates(self._commands)\n>       self._cached = [self._cached[0]] + sorted(\n            commands, key=lambda corrected_command: corrected_command.priority)",
            "\nthefuck/types.py:85: IndexError"
        ]
    ],
    "2.2.1": null,
    "2.2.2": null,
    "2.3.1": [
        [
            {
                "self._cached": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "self._realised": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self._settings": {
                    "value": "<Mock id='140615671522448'>",
                    "shape": "<Mock name='mock.shape' id='140615694879568'>",
                    "omitted": false
                }
            },
            {
                "self._realised": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "self._cached": "list",
                "self._realised": "bool",
                "self._settings": "Mock"
            },
            {
                "self._realised": "bool"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}