{
    "1.1.1": "@memoize\ndef get_all_executables():\n    from thefuck.shells import shell\n\n    def _safe(fn, fallback):\n        try:\n            return fn()\n        except OSError:\n            return fallback\n\n    tf_alias = get_alias()\n    tf_entry_points = ['thefuck', 'fuck']\n\n    bins = [exe.name.decode('utf8') if six.PY2 else exe.name\n            for path in os.environ.get('PATH', '').split(':')\n            for exe in _safe(lambda: list(Path(path).iterdir()), [])\n            if not _safe(exe.is_dir, True)\n            and exe.name not in tf_entry_points]\n    aliases = [alias.decode('utf8') if six.PY2 else alias\n               for alias in shell.get_aliases() if alias != tf_alias]\n\n    return bins + aliases\n",
    "1.1.2": null,
    "1.2.1": "thefuck/utils.py",
    "1.2.2": "import os\nimport six\nfrom .system import Path\nfrom thefuck.shells import shell\nfrom thefuck.shells import shell",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": [
        "memoize(fn)",
        "get_alias()",
        "_safe(fn, fallback)"
    ],
    "1.5.1": [
        "@pytest.mark.usefixtures('no_memoize', 'os_environ_pathsep')\n@pytest.mark.parametrize('path, pathsep', [\n    ('/foo:/bar:/baz:/foo/bar', ':'),\n    (r'C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar', ';')])\ndef test_get_all_executables_pathsep(path, pathsep):\n    with patch('thefuck.utils.Path') as Path_mock:\n        get_all_executables()\n        Path_mock.assert_has_calls([call(p) for p in path.split(pathsep)], True)"
    ],
    "1.5.2": [
        "tests/test_utils.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: 'Path' does not contain all of (call('C:\\\\\\\\foo'), call('C:\\\\\\\\bar'), call('C:\\\\\\\\baz'), call('C:\\\\\\\\foo\\\\\\\\bar')) in its call list, found [call('C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\\\\\foo;C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\\\\\bar;C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\\\\\baz;C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\\\\\foo\\\\\\\\bar'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__()] instead"
        ]
    ],
    "2.1.2": [
        [
            "path = 'C:\\\\\\\\foo;C:\\\\\\\\bar;C:\\\\\\\\baz;C:\\\\\\\\foo\\\\\\\\bar', pathsep = ';'\n\n    @pytest.mark.usefixtures('no_memoize', 'os_environ_pathsep')\n    @pytest.mark.parametrize('path, pathsep', [\n        ('/foo:/bar:/baz:/foo/bar', ':'),\n        (r'C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar', ';')])\n    def test_get_all_executables_pathsep(path, pathsep):\n        with patch('thefuck.utils.Path') as Path_mock:\n            get_all_executables()\n>           Path_mock.assert_has_calls([call(p) for p in path.split(pathsep)], True)\n\ntests/test_utils.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='Path' id='140490630357712'>\ncalls = [call('C:\\\\\\\\foo'), call('C:\\\\\\\\bar'), call('C:\\\\\\\\baz'), call('C:\\\\\\\\foo\\\\\\\\bar')]\nany_order = True\n\n    def assert_has_calls(self, calls, any_order=False):\n        \"\"\"assert the mock has been called with the specified calls.\n        The `mock_calls` list is checked for the calls.\n    \n        If `any_order` is False (the default) then the calls must be\n        sequential. There can be extra calls before or after the\n        specified calls.\n    \n        If `any_order` is True then the calls can be in any order, but\n        they must all appear in `mock_calls`.\"\"\"\n        expected = [self._call_matcher(c) for c in calls]\n        cause = next((e for e in expected if isinstance(e, Exception)), None)\n        all_calls = _CallList(self._call_matcher(c) for c in self.mock_calls)\n        if not any_order:\n            if expected not in all_calls:\n                if cause is None:\n                    problem = 'Calls not found.'\n                else:\n                    problem = ('Error processing expected calls.\\n'\n                               'Errors: {}').format(\n                                   [e if isinstance(e, Exception) else None\n                                    for e in expected])\n                raise AssertionError(\n                    f'{problem}\\n'\n                    f'Expected: {_CallList(calls)}'\n                    f'{self._calls_repr(prefix=\"Actual\").rstrip(\".\")}'\n                ) from cause\n            return\n    \n        all_calls = list(all_calls)\n    \n        not_found = []\n        for kall in expected:\n            try:\n                all_calls.remove(kall)\n            except ValueError:\n                not_found.append(kall)\n        if not_found:\n            raise AssertionError(\n                '%r does not contain all of %r in its call list, '\n                'found %r instead' % (self._mock_name or 'mock',\n                                      tuple(not_found), all_calls)\n>           ) from cause",
            "\n../../envs/thefuck_2/lib/python3.7/site-packages/mock/mock.py:971: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {},
            {
                "fallback": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "tf_alias": {
                    "value": "'fuck'",
                    "shape": "4",
                    "omitted": false
                },
                "tf_entry_points": {
                    "value": "['thefuck', 'fuck']",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {},
            {
                "fallback": "list",
                "tf_alias": "str",
                "tf_entry_points": "list"
            }
        ]
    ],
    "2.3.1": [
        [
            {},
            {
                "fallback": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "tf_alias": {
                    "value": "'fuck'",
                    "shape": "4",
                    "omitted": false
                },
                "tf_entry_points": {
                    "value": "['thefuck', 'fuck']",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {},
            {
                "fallback": "list",
                "tf_alias": "str",
                "tf_entry_points": "list"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}