{
    "1.1.1": "def get_new_command(command, settings):\n    m = _search(command.stderr) or _search(command.stdout)\n\n    # Note: there does not seem to be a standard for columns, so they are just\n    # ignored for now\n    editor_call = '{} {} +{}'.format(os.environ['EDITOR'],\n                                     m.group('file'),\n                                     m.group('line'))\n    return shells.and_(editor_call, command.script)\n",
    "1.1.2": null,
    "1.2.1": "thefuck/rules/fix_file.py",
    "1.2.2": "import os\nfrom thefuck import shells",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": [
        "_search(stderr)"
    ],
    "1.5.1": [
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))"
    ],
    "1.5.2": [
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: assert 'dummy_editor...+3 && gcc a.c' == 'dummy_editor ...:1 && gcc a.c'\nE             - dummy_editor a.c +3 && gcc a.c\nE             + dummy_editor a.c +3:1 && gcc a.c\nE             ?                    ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor... && clang a.c' == 'dummy_editor ... && clang a.c'\nE             - dummy_editor a.c +3 && clang a.c\nE             + dummy_editor a.c +3:1 && clang a.c\nE             ?                    ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...&& rustc a.rs' == 'dummy_editor ...&& rustc a.rs'\nE             - dummy_editor a.rs +2 && rustc a.rs\nE             + dummy_editor a.rs +2:5 && rustc a.rs\nE             ?                     ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...& cargo build' == 'dummy_editor ...& cargo build'\nE             - dummy_editor src/lib.rs +3 && cargo build\nE             + dummy_editor src/lib.rs +3:5 && cargo build\nE             ?                           ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...1 && llc a.ll' == 'dummy_editor ...2 && llc a.ll'\nE             - dummy_editor a.ll +1 && llc a.ll\nE             + dummy_editor a.ll +1:2 && llc a.ll\nE             ?                     ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...go build a.go' == 'dummy_editor ...go build a.go'\nE             - dummy_editor a.go +1 && go build a.go\nE             + dummy_editor a.go +1:2 && go build a.go\nE             ?                     ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor....js asdf qwer' == 'dummy_editor ....js asdf qwer'\nE             - dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2 && node fuck.js asdf qwer\nE             + dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2:5 && node fuck.js asdf qwer\nE             ?                                                         ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...y +17 && pep8' == 'dummy_editor ...17:80 && pep8'\nE             - dummy_editor ./tests/rules/test_systemctl.py +17 && pep8\nE             + dummy_editor ./tests/rules/test_systemctl.py +17:80 && pep8\nE             ?                                                 +++"
        ]
    ],
    "2.1.2": [
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabec7d990>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabec7db10>\ntest = ('gcc a.c', 'a.c', 3, 1, '', \"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabec19ed0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabec19c10>\ntest = ('clang a.c', 'a.c', 3, 1, '', '\\na.c:3:1: error: expected expression\\n}\\n^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabeba4510>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabeba4490>\ntest = ('rustc a.rs', 'a.rs', 2, 5, '', '\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabebb9d90>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabebb9f50>\ntest = ('cargo build', 'src/lib.rs', 3, 5, '', '\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3...s:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabebc89d0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabec19310>\ntest = ('llc a.ll', 'a.ll', 1, 2, '', '\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabec7da10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabec7d690>\ntest = ('go build a.go', 'a.go', 1, 2, '', \"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabeb7cc50>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabeb7cb90>\ntest = ('node fuck.js asdf qwer', '/Users/pablo/Workspace/barebones/fuck.js', '2', 5, '', '\\n/Users/pablo/Workspace/barebones...s:310:12)\\n    at Function.Module.runMain (module.js:501:10)\\n    at startup (node.js:129:16)\\n    at node.js:814:3\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x7fbabeb7bad0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fbabeb7b8d0>\ntest = ('pep8', './tests/rules/test_systemctl.py', 17, 80, '\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 >... line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n', '')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "command.stderr": {
                    "value": "\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\"",
                    "shape": "86",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='gcc a.c', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'gcc a.c'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(26, 32), match='a.c:3:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.c +3'",
                    "shape": "19",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.c:3:1: error: expected expression\\n}\\n^\\n'",
                    "shape": "41",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='clang a.c', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'clang a.c'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 7), match='a.c:3:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.c +3'",
                    "shape": "19",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n'",
                    "shape": "90",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='perl a.pl', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'perl a.pl'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(14, 28), match='at a.pl line 3'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.pl +3'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nSearch pattern not terminated at a.pl line 2.\\n'",
                    "shape": "47",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='perl a.pl', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'perl a.pl'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(31, 45), match='at a.pl line 2'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.pl +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh: line 2: foo: command not found\\n'",
                    "shape": "38",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='sh a.sh', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'sh a.sh'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.sh +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh:2: command not found: foo\\n'",
                    "shape": "32",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='zsh a.sh', stdout='', stderr='\\na.sh:2: command not found: foo\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'zsh a.sh'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.sh:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.sh +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh: line 2: foo: command not found\\n'",
                    "shape": "38",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='bash a.sh', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'bash a.sh'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.sh +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n'",
                    "shape": "70",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='rustc a.rs', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'rustc a.rs'",
                    "shape": "10",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.rs:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.rs +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n'",
                    "shape": "231",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='cargo build', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'cargo build'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(55, 72), match='   src/lib.rs:3:5'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor src/lib.rs +3'",
                    "shape": "26",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n'",
                    "shape": "71",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='python a.py', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'python a.py'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 22), match='  File \"a.py\", line 2'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.py +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(\"foo\")\\n  File \"a.py\", line 5, in match\\n    m = re.search(None, command)\\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\\n    return _compile(pattern, flags).search(string)\\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\\n    raise TypeError(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n'",
                    "shape": "450",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='python a.py', stdout='', stderr='\\nTraceback (most recent call last) ... (\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n')",
                    "shape": "3",
                    "omitted": true
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'python a.py'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(36, 57), match='  File \"a.py\", line 8'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.py +8'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rb:3: syntax error, unexpected keyword_end\\n'",
                    "shape": "46",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='ruby a.rb', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'ruby a.rb'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.rb:3:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.rb +3'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\"",
                    "shape": "42",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='lua a.lua', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'lua a.lua'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 14), match='lua: a.lua:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.lua +2'",
                    "shape": "21",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\"",
                    "shape": "95",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='fish a.sh', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'fish a.sh'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(29, 58), match='/tmp/fix-error/a.sh (line 2):'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /tmp/fix-error/a.sh +2'",
                    "shape": "35",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n'",
                    "shape": "106",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='./a', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'./a'",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 12), match='awk: ./a:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor ./a +2'",
                    "shape": "19",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n'",
                    "shape": "53",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='llc a.ll', stdout='', stderr='\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'llc a.ll'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='llc: a.ll:1:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.ll +1'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\"",
                    "shape": "61",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='go build a.go', stdout='', stderr=\"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'go build a.go'",
                    "shape": "13",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(21, 28), match='a.go:1:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.go +1'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\"",
                    "shape": "115",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='make', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'make'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(40, 51), match='Makefile:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor Makefile +2'",
                    "shape": "24",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n'",
                    "shape": "66",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='git st', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'git st'",
                    "shape": "6",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 65), match='fatal: bad config file line 1 in /home/martin/.co>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /home/martin/.config/git/config +1'",
                    "shape": "47",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n'",
                    "shape": "583",
                    "omitted": true
                },
                "command": {
                    "value": "Command(script='node fuck.js asdf qwer', stdout='', stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n')",
                    "shape": "3",
                    "omitted": true
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command.script": {
                    "value": "'node fuck.js asdf qwer'",
                    "shape": "22",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(140, 191), match='    at /Users/pablo/Workspace/barebones/fuck.js:2>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2'",
                    "shape": "56",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='pep8', stdout='\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n', stderr='')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "'\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n'",
                    "shape": "310",
                    "omitted": false
                },
                "command.script": {
                    "value": "'pep8'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 36), match='./tests/rules/test_systemctl.py:17:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor ./tests/rules/test_systemctl.py +17'",
                    "shape": "48",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='py.test', stdout='\\nmonkeypatch = <_pytest.monkeypatch.monkeypatch object at 0x7fdb76a25b38>\\ntest = (\\'fish a.sh\\', \\'/tmp/fix-error/a.sh\\', 2, None, \\'\\', \"\\\\nfish: Unknown command \\'foo\\'\\\\n/tmp/fix-error/a.sh (line 2) ... (\\'os.path.isfile\\', return_value=True)\\nE       NameError: name \\'mocker\\' is not defined\\n\\n/home/thefuck/tests/rules/test_fix_file.py:218: NameError\\n', stderr='')",
                    "shape": "3",
                    "omitted": true
                },
                "command.stdout": {
                    "value": "'\\nmonkeypatch = <_pytest.monkeypatch.monkeypatch object at 0x7fdb76a25b38>\\ntest = (\\'fish a.sh\\', \\'/tmp/fix-error/a.sh\\', 2, None, \\'\\', \"\\\\nfish: Unknown command \\'foo\\'\\\\n/tmp/fix-error/a.sh (line 2) ... (\\'os.path.isfile\\', return_value=True)\\nE       NameError: name \\'mocker\\' is not defined\\n\\n/home/thefuck/tests/rules/test_fix_file.py:218: NameError\\n'",
                    "shape": "536",
                    "omitted": true
                },
                "command.script": {
                    "value": "'py.test'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(478, 525), match='/home/thefuck/tests/rules/test_fix_file.py:218:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /home/thefuck/tests/rules/test_fix_file.py +218'",
                    "shape": "60",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "command.stderr": {
                    "value": "\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\"",
                    "shape": "86",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='gcc a.c', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'gcc a.c'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(26, 33), match='a.c:3:1'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.c +3:1'",
                    "shape": "21",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.c:3:1: error: expected expression\\n}\\n^\\n'",
                    "shape": "41",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='clang a.c', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'clang a.c'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.c:3:1'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.c +3:1'",
                    "shape": "21",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n'",
                    "shape": "90",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='perl a.pl', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'perl a.pl'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(14, 28), match='at a.pl line 3'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.pl +3'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nSearch pattern not terminated at a.pl line 2.\\n'",
                    "shape": "47",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='perl a.pl', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'perl a.pl'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(31, 45), match='at a.pl line 2'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.pl +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh: line 2: foo: command not found\\n'",
                    "shape": "38",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='sh a.sh', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'sh a.sh'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.sh +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh:2: command not found: foo\\n'",
                    "shape": "32",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='zsh a.sh', stdout='', stderr='\\na.sh:2: command not found: foo\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'zsh a.sh'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.sh:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.sh +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh: line 2: foo: command not found\\n'",
                    "shape": "38",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='bash a.sh', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'bash a.sh'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.sh +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n'",
                    "shape": "70",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='rustc a.rs', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'rustc a.rs'",
                    "shape": "10",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 9), match='a.rs:2:5'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.rs +2:5'",
                    "shape": "22",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n'",
                    "shape": "231",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='cargo build', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'cargo build'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(55, 72), match='   src/lib.rs:3:5'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor src/lib.rs +3:5'",
                    "shape": "28",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n'",
                    "shape": "71",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='python a.py', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'python a.py'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 22), match='  File \"a.py\", line 2'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.py +2'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(\"foo\")\\n  File \"a.py\", line 5, in match\\n    m = re.search(None, command)\\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\\n    return _compile(pattern, flags).search(string)\\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\\n    raise TypeError(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n'",
                    "shape": "450",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='python a.py', stdout='', stderr='\\nTraceback (most recent call last) ... (\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n')",
                    "shape": "3",
                    "omitted": true
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'python a.py'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(36, 57), match='  File \"a.py\", line 8'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.py +8'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rb:3: syntax error, unexpected keyword_end\\n'",
                    "shape": "46",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='ruby a.rb', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'ruby a.rb'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.rb:3:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.rb +3'",
                    "shape": "20",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\"",
                    "shape": "42",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='lua a.lua', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'lua a.lua'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 14), match='lua: a.lua:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.lua +2'",
                    "shape": "21",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\"",
                    "shape": "95",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='fish a.sh', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'fish a.sh'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(29, 58), match='/tmp/fix-error/a.sh (line 2):'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /tmp/fix-error/a.sh +2'",
                    "shape": "35",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n'",
                    "shape": "106",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='./a', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'./a'",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 12), match='awk: ./a:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor ./a +2'",
                    "shape": "19",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n'",
                    "shape": "53",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='llc a.ll', stdout='', stderr='\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'llc a.ll'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='llc: a.ll:1:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.ll +1:2'",
                    "shape": "22",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\"",
                    "shape": "61",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='go build a.go', stdout='', stderr=\"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'go build a.go'",
                    "shape": "13",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(21, 29), match='a.go:1:2'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor a.go +1:2'",
                    "shape": "22",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\"",
                    "shape": "115",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='make', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'make'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(40, 51), match='Makefile:2:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor Makefile +2'",
                    "shape": "24",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n'",
                    "shape": "66",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='git st', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'git st'",
                    "shape": "6",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 65), match='fatal: bad config file line 1 in /home/martin/.co>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /home/martin/.config/git/config +1'",
                    "shape": "47",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n'",
                    "shape": "583",
                    "omitted": true
                },
                "command": {
                    "value": "Command(script='node fuck.js asdf qwer', stdout='', stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n')",
                    "shape": "3",
                    "omitted": true
                },
                "command.stdout": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'node fuck.js asdf qwer'",
                    "shape": "22",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(140, 191), match='    at /Users/pablo/Workspace/barebones/fuck.js:2>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2:5'",
                    "shape": "58",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='pep8', stdout='\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n', stderr='')",
                    "shape": "3",
                    "omitted": false
                },
                "command.stdout": {
                    "value": "'\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n'",
                    "shape": "310",
                    "omitted": false
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'pep8'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 38), match='./tests/rules/test_systemctl.py:17:80'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor ./tests/rules/test_systemctl.py +17:80'",
                    "shape": "51",
                    "omitted": false
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "command": {
                    "value": "Command(script='py.test', stdout='\\nmonkeypatch = <_pytest.monkeypatch.monkeypatch object at 0x7fdb76a25b38>\\ntest = (\\'fish a.sh\\', \\'/tmp/fix-error/a.sh\\', 2, None, \\'\\', \"\\\\nfish: Unknown command \\'foo\\'\\\\n/tmp/fix-error/a.sh (line 2) ... (\\'os.path.isfile\\', return_value=True)\\nE       NameError: name \\'mocker\\' is not defined\\n\\n/home/thefuck/tests/rules/test_fix_file.py:218: NameError\\n', stderr='')",
                    "shape": "3",
                    "omitted": true
                },
                "command.stdout": {
                    "value": "'\\nmonkeypatch = <_pytest.monkeypatch.monkeypatch object at 0x7fdb76a25b38>\\ntest = (\\'fish a.sh\\', \\'/tmp/fix-error/a.sh\\', 2, None, \\'\\', \"\\\\nfish: Unknown command \\'foo\\'\\\\n/tmp/fix-error/a.sh (line 2) ... (\\'os.path.isfile\\', return_value=True)\\nE       NameError: name \\'mocker\\' is not defined\\n\\n/home/thefuck/tests/rules/test_fix_file.py:218: NameError\\n'",
                    "shape": "536",
                    "omitted": true
                },
                "settings.fixcolcmd": {
                    "value": "'{editor} {file} +{line}:{col}'",
                    "shape": "29",
                    "omitted": false
                },
                "settings": {
                    "value": "{'fixlinecmd': '{editor} {file} +{line}', 'fixcolcmd': '{editor} {file} +{line}:{col}'}",
                    "shape": "2",
                    "omitted": false
                },
                "settings.fixlinecmd": {
                    "value": "'{editor} {file} +{line}'",
                    "shape": "23",
                    "omitted": false
                },
                "command.script": {
                    "value": "'py.test'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(478, 525), match='/home/thefuck/tests/rules/test_fix_file.py:218:'>",
                    "shape": null,
                    "omitted": false
                },
                "editor_call": {
                    "value": "'dummy_editor /home/thefuck/tests/rules/test_fix_file.py +218'",
                    "shape": "60",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "settings.fixcolcmd": "str",
                "settings": "Settings",
                "settings.fixlinecmd": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}