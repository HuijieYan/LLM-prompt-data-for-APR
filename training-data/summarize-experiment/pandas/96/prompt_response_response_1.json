{
    "pandas": [
        {
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        adjusted_time = other\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if adjusted_time.time() in self.end or not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time)\n        else:\n            if adjusted_time.time() in self.start:\n                # adjustment to move to previous business day\n                adjusted_time -= timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time)\n                adjusted_time = self._get_closing_time(adjusted_time)\n\n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            # midnight business hour may not be on BusinessDay\n            if not self.next_bday.is_on_offset(adjusted_time):\n                prev_open = self._prev_opening_time(adjusted_time)\n                remain = adjusted_time - prev_open\n                adjusted_time = prev_open + skip_bd + remain\n            else:\n                adjusted_time = adjusted_time + skip_bd\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                # business hour left in this business time interval\n                bhour = (\n                    self._get_closing_time(self._prev_opening_time(adjusted_time)) - adjusted_time\n                )\n                if bhour_remain < bhour:\n                    # finish adjusting if possible\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    adjusted_time = self._next_opening_time(adjusted_time + bhour)\n        else:\n            while bhour_remain != timedelta(0):\n                # business hour left in this business time interval\n                bhour = self._next_opening_time(adjusted_time) - adjusted_time\n                if (\n                    bhour_remain > bhour\n                    or bhour_remain == bhour\n                ):\n                    # finish adjusting if possible\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    adjusted_time = self._get_closing_time(\n                        self._next_opening_time(\n                            adjusted_time + bhour - timedelta(seconds=1)\n                        )\n                    )\n\n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}