{
    "pandas": [
        {
            "bugID": 145,
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    elif isinstance(right, (ABCDataFrame, ABCSeries)):\n        if axis == \"columns\":\n            if isinstance(right, ABCDataFrame) and not right._indexed_same(left):\n                raise ValueError(\"Index of right DataFrame must match with left DataFrame when axis is set to 'columns'\")\n            if isinstance(right, ABCSeries):\n                if not right.index.equals(left.columns):\n                    raise ValueError(\"Index of right Series must match with columns of left DataFrame when axis is set to 'columns'\")\n                right = pd.DataFrame({0: right.values}, index=left.index)  # Convert Series to DataFrame with the same index as left\n            column_op = lambda a, b: a.apply(func, b=b)\n\n        elif axis == \"index\" or axis == 0 or axis == 1:\n            if not right.index.equals(left.index):\n                raise ValueError(\"Index of right Series or DataFrame must match with index of left DataFrame when axis is set to 'index'\")\n            if isinstance(right, ABCSeries):\n                right = pd.DataFrame({0: right.values}, index=left.index)  # Convert Series to DataFrame with the same index as left\n            column_op = lambda a, b: a.apply(func, axis=axis, b=b)\n\n        else:\n            raise ValueError(\"Invalid value for axis. Expected None, 0, 1, 'index', or 'columns'\")\n\n    else:\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
            "import_list": [
                "import pandas.core.computation.expressions as expressions"
            ]
        }
    ]
}