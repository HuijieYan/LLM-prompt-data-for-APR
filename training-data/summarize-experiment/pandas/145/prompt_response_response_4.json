{
    "pandas": [
        {
            "bugID": 145,
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        def column_op(a, b):\n            return a.apply(lambda x: func(x, b))\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n        def column_op(a, b):\n            return a.apply(lambda x: func(x, b))\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        assert right.index.equals(left.columns)\n        def column_op(a, b):\n            return a.apply(lambda x: func(x, b))\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)\n        def column_op(a, b):\n            return a.apply(lambda x: func(x, b))\n\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = left.apply(column_op, b=right)\n    return new_data",
            "import_list": [
                "import pandas.core.computation.expressions as expressions"
            ]
        }
    ]
}