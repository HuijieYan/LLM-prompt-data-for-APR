{
    "pandas": [
        {
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # Generally if we have numeric_only=False and non-applicable functions,\n            # try to python agg\n\n            if alt is None:\n                # We cannot perform the operation in an alternate way, exclude the block\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            # Call our grouper again with only this block\n            obj = self.obj[data.items[locs]]\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                # We may have an exception in trying to aggregate, continue and exclude the block\n                deleted_items.append(locs)\n                continue\n\n        if result is not no_result:\n            # Cast the block using maybe_convert_objects\n            result = maybe_convert_objects(result, try_float=False, try_integer=False)\n\n            # Make a new Block from the result and add to agg_blocks\n            agg_block: Block = block.make_block(result)\n            agg_blocks.append(agg_block)\n            new_items.append(locs)\n\n    # The rest of the function remains unchanged\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}