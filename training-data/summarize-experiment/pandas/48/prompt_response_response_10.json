{
    "pandas": [
        {
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # Retrieve the data to aggregate\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.convert_dtypes()  # Convert to nullable integer types\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            # Perform aggregation\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # Handle non-applicable functions\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            # Call alternative aggregation function\n            obj = self.obj[data.items[locs]]\n            s = get_groupby(obj, self.grouper)\n            result = s.aggregate(lambda x: alt(x, axis=self.axis))\n\n            # Perform necessary data type conversions\n            result = maybe_convert_objects(result)\n\n        # Process the result and append to agg_blocks\n        agg_block: Block = block.make_block(result)\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Reset the locs in the blocks to correspond to our current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    # Reset locs in the blocks\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset: (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}