{
    "pandas": [
        {
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1) -> Tuple[List[Block], Index]:\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.select_dtypes(include=['number'])  # Filter only numeric data\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n\n        if block.is_numeric:  # Check if block is numeric\n            result = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n        else:  # Handle non-numeric blocks separately\n            result = block.values\n            split_items.append(locs)\n            split_frames.append(DataFrame(data=block.values, index=data.items[locs]))\n\n        if result is not no_result:\n            agg_block = block.make_block(result)\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Handling split blocks\n    for locs, result in zip(split_items, split_frames):\n        new_items.append(locs)\n        agg_blocks.append(result)\n\n    # Reset the locs in the blocks to correspond to the current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}