{
    "pandas": [
        {
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data._convert(datetime=False, numeric_only=numeric_only, copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n    no_result = object()\n    \n    block_mask = np.zeros(data.shape[0], dtype=bool)\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        \n        if block.is_datetime_or_timedelta:\n            errmsg = (\n                \"cannot perform {how} with this \"\n                \"method for blocks of dtype dtype:timedelta64\"\n            )\n            raise DataError(errmsg)\n        \n        locs = block.mgr_locs.as_array\n\n        # Cast the block values to float if they are of integer type\n        if block.dtype in ['Int8', 'Int16', 'Int32', 'Int64']:\n            block = block.astype('float64')\n\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # generally if we have numeric_only=False\n            # and non-applicable functions\n            # try to python agg\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n            \n            # Handle aggregation with an alternate function\n            result = self._aggregate_multiple_blocks(block, alt, axis)\n        \n        if isinstance(result, DataFrame):\n            result_blocks = result._data.blocks\n            if len(result_blocks) != 1:\n                split_items.append(locs)\n                split_frames.append(result)\n                continue\n            result = result_blocks[0].values\n\n        # Handling for nullable integer type\n        result = maybe_convert_objects(result, block, copy=False)\n        \n        agg_block: Block = make_block(result, locs, block.items)\n        agg_blocks.append(agg_block)\n        new_items.append(agg_block.mgr_locs.as_array)\n        block_mask[agg_block.mgr_locs.as_array] = True\n\n    # Handling of deleted items and split frames\n    deleted_items = [idx for idx in range(data.shape[0]) if not block_mask[idx]]\n    if deleted_items:\n        agg_blocks, new_items = self._cleanup_deleted(data, agg_blocks, new_items, split_items, split_frames, deleted_items)\n        \n    return agg_blocks, data.items.take(np.concatenate(new_items))",
            "import_list": []
        }
    ]
}