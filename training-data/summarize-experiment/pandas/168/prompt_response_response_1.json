{
    "pandas": [
        {
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if level not in group_axis.names:\n                raise ValueError(\"'level' must be a valid name in index\")\n\n            level = group_axis.get_level_values(level)\n            key = level\n\n    if axis == 1:\n        if isinstance(key, list) and len(key) == 1:\n            key = key[0]\n\n        if isinstance(key, str):\n            if key not in obj.columns:\n                raise KeyError(f\"Column '{key}' not found in DataFrame\")\n\n        # Convert single column key to list if not already a list\n        if not isinstance(key, list):\n            key = [key]\n\n    # Identifying and processing the provided column labels as keys when grouping along columns\n    keys = key if isinstance(key, list) else [key]\n    match_axis_length = len(keys) == len(group_axis)\n\n    groupings = []\n    exclusions = []\n\n    # Create Grouping objects based on the keys\n    for gpr in keys:\n        groupings.append(Grouping(group_axis, gpr, obj=obj, sort=sort, observed=observed))\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # Create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}