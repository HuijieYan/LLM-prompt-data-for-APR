{
    "pandas": [
        {
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # processing the key variable and handling different types of keys\n    if isinstance(key, (tuple, list)):\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n    else:\n        keys = [key]\n        match_axis_length = False\n\n    # checking for valid keys\n    if not all(is_hashable(k) or k in obj.columns or is_list_like(k) for k in keys):\n        raise ValueError(\"Invalid key passed!\")\n\n    # create the Grouping for each key\n    groupings = []\n    exclusions = []\n    for k in keys:\n        if is_hashable(k) and k not in obj:\n            if not validate or k in obj.columns:\n                exclusions.append(k)\n            else:\n                raise KeyError(k)\n        else:\n            gpr = Grouping(\n                group_axis,\n                k,\n                obj=obj,\n                name=None,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=True,\n            )\n            groupings.append(gpr)\n\n    if not groupings and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif not groupings:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}