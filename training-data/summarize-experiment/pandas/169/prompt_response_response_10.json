{
    "pandas": [
        {
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n        ...\n\n    Returns\n    -------\n    Series or DataFrame\n        ...\n\n    See Also\n    ...\n    Examples\n    ...\n    \"\"\"\n\n    # Validate and handle datetime data if numeric_only is False\n    if not numeric_only:\n        if self._data.dtypes.apply(pd.api.types.is_datetime64_any_dtype).any():\n            raise NotImplementedError(\"Quantile calculation for datetime data is not supported.\")\n\n    if len(self.index) == 0 or len(self.columns) == 0:\n        # Handle empty DataFrame scenario\n        if isinstance(q, float):\n            return pd.Series([], index=[], name=q)\n        elif isinstance(q, (list, np.ndarray)):\n            return pd.DataFrame([], index=q, columns=[])",
            "import_list": []
        }
    ]
}