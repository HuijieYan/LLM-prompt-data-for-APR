{
    "matplotlib": [
        {
            "bugID": 17,
            "start_line": 2758,
            "file_name": "lib/matplotlib/transforms.py",
            "replace_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    \"\"\"\n    Modify the endpoints of a range as needed to avoid singularities.\n\n    Parameters\n    ----------\n    vmin, vmax : float\n        The initial endpoints.\n    expander : float, default: 0.001\n        Fractional amount by which *vmin* and *vmax* are expanded if\n        the original interval is too small, based on *tiny*.\n    tiny : float, default: 1e-15\n        Threshold for the ratio of the interval to the maximum absolute\n        value of its endpoints.  If the interval is smaller than\n        this, it will be expanded.\n    increasing : bool, default: True\n        If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n\n    Returns\n    -------\n    vmin, vmax : float\n        Endpoints, expanded and/or swapped if necessary.\n        If either input is inf or NaN, or if both inputs are 0 or very\n        close to zero, it returns -*expander*, *expander*.\n    \"\"\"\n    \n    import numpy as np  # Import numpy module\n\n    # Cast input parameters to float\n    vmin, vmax = float(vmin), float(vmax)\n\n    if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n        return -expander, expander\n\n    # Swap vmin and vmax if necessary\n    if vmax < vmin:\n        vmin, vmax = vmax, vmin\n\n    maxabsvalue = max(abs(vmin), abs(vmax))  # Calculate maximum absolute value\n\n    if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:  # Check threshold condition\n        vmin = -expander  # Update vmin\n        vmax = expander  # Update vmax\n\n    elif vmax - vmin <= maxabsvalue * tiny:  # Check interval size condition\n        if vmax == 0 and vmin == 0:\n            vmin = -expander  # Update vmin\n            vmax = expander  # Update vmax\n        else:\n            vmin -= expander * abs(vmin)  # Update vmin\n            vmax += expander * abs(vmax)  # Update vmax\n\n    if vmax < vmin and not increasing:  # Swap back if necessary\n        vmin, vmax = vmax, vmin\n\n    return vmin, vmax",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}