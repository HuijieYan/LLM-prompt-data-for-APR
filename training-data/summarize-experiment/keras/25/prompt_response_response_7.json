{
    "keras": [
        {
            "bugID": 25,
            "start_line": 21,
            "file_name": "keras/applications/imagenet_utils.py",
            "replace_code": "def _preprocess_numpy_input(x, data_format, mode):\n    if mode == 'tf':\n        x = x.astype('float32')  # Explicitly cast to float32 before operation\n        x /= 127.5\n        x -= 1.\n        return x\n\n    if mode == 'torch':\n        x = x.astype('float32')  # Explicitly cast to float32 before operation\n        x /= 255.\n        mean = np.array([0.485, 0.456, 0.406], dtype='float32')\n        std = np.array([0.229, 0.224, 0.225], dtype='float32')\n    else:\n        if data_format == 'channels_first':\n            if x.ndim == 3:\n                x = x.astype('float32')  # Explicitly cast to float32 before operation\n                x = x[::-1, ...]\n            else:\n                x = x.astype('float32')  # Explicitly cast to float32 before operation\n                x = x[:, ::-1, ...]\n        else:\n            x = x.astype('float32')  # Explicitly cast to float32 before operation\n            x = x[..., ::-1]\n        mean = np.array([103.939, 116.779, 123.68], dtype='float32')\n        std = None\n\n    # Zero-center by mean pixel and handle data type inconsistencies\n    if x.dtype != 'float32':\n        x = x.astype('float32')  # Explicitly cast to float32 before operation\n\n    if data_format == 'channels_first':\n        x -= mean.reshape(1, 3, 1, 1)\n        if std is not None:\n            x /= std.reshape(1, 3, 1, 1)\n    else:\n        x -= mean\n        if std is not None:\n            x /= std\n\n    return x",
            "import_list": []
        }
    ]
}