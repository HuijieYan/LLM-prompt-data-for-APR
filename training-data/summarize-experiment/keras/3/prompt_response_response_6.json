{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.input_shape[1:]) for layer in model.layers if isinstance(layer, InputLayer)]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for orig_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[orig_input] = (new_input, None)  # Input tensors, no mask.\n\n    for layer in model.layers:\n        config = layer.get_config()\n        new_layer = layer.__class__.from_config(config)\n        layer_map[layer] = new_layer\n\n    new_outputs = [tensor_map[output][0] for output in model.outputs]\n\n    return Model(input_tensors, new_outputs, name=model.name)",
            "import_list": []
        }
    ]
}