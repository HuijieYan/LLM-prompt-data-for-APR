{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n    \n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n                         for layer in model._input_layers]\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        input_tensors = to_list(input_tensors)\n        input_layers = [x._keras_history[0] if K.is_keras_tensor(x) else Input(tensor=x, name='input_wrapper_for_' + model._input_layers[i].name)\n                        for i, x in enumerate(input_tensors)]\n        for orig, cloned in zip(model._input_layers, input_layers):\n            layer_map[orig] = cloned\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n                if isinstance(new_layer, InputLayer):\n                    continue\n            \n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n            \n            if len(computed_data) == len(reference_input_tensors):\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n                \n                computed_tensors, computed_masks = zip(*computed_data)\n                output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n                output_masks = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n                for x, y, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[x] = (y, mask)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}