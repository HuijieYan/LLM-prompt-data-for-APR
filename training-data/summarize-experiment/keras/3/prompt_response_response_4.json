{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    # Create placeholders to build the model on top of if input_tensors is not provided.\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in model._input_layers]\n        for original, cloned in zip(model._input_layers, input_tensors):\n            layer_map[original] = cloned\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_layer = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_tensors[i] = input_layer\n                layer_map[x._keras_history[0]] = input_layer._keras_history[0]\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterate over every node in the reference model, in depth order, and clone layers.\n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n\n            # Get or create layer.\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n                if isinstance(new_layer, InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n            computed_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments is not None else {}\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                if has_arg(new_layer.call, 'mask'):\n                    kwargs['mask'] = computed_masks if len(computed_data) > 1 else computed_masks[0]\n                output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n                for x, y, z in zip(node.output_tensors, output_tensors, new_layer.compute_mask(computed_tensors, computed_masks)):\n                    tensor_map[x] = (y, z)\n\n    # Check that we computed the model outputs and instantiate a new model from inputs and outputs.\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(to_list(input_tensors), to_list(output_tensors), name=model.name)",
            "import_list": []
        }
    ]
}