{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"\n    Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs, except that it creates new layers (and thus new weights) instead of sharing the weights of the existing layers.\n\n    Args:\n        model: Instance of `Model`.\n        input_tensors: Optional list of input tensors to build the model upon. If not provided, placeholders will be created.\n\n    Returns:\n        An instance of `Model` reproducing the behavior of the original model, on top of new inputs tensors, using newly instantiated weights.\n\n    Raises:\n        ValueError: In case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    input_layers = []  # List of input layers.\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        for layer in model.input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_layers.append(input_tensor)\n            # Cache newly created input layer.\n            layer_map[layer] = input_tensor\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model.input_layers[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_layers.append(input_tensor)\n                # Cache newly created input layer.\n                original_input_layer = x._keras_history[0]\n                layer_map[original_input_layer] = input_tensor\n            else:\n                input_layers.append(x)\n\n    for x, y in zip(model.inputs, input_layers):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterate over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            layer = node.outbound_layer\n\n            # Get or create layer.\n            if layer not in layer_map:\n                # Clone layer.\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                # Reuse previously cloned layer.\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(layer, InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map, then call node.inbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer.\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors = [x[0] for x in computed_data]\n                if has_arg(layer.call, 'mask') and any(x[1] is not None for x in computed_data):\n                    kwargs['mask'] = [x[1] for x in computed_data]\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n\n                # Update tensor_map.\n                for x, y in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)  # Update tensor_map with output tensors.\n\n    # Check that we did compute the model outputs, then instantiate a new model from inputs and outputs.\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_layers, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}