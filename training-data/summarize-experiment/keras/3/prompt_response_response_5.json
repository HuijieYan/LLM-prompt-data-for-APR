{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = [Input(batch_shape=layer_shape) for layer_shape in model.input_shape]\n        input_tensors = input_layers\n        for original, cloned in zip(model.inputs, input_layers):\n            layer_map[original] = cloned\n    else:\n        # Handle input tensors provided by the user.\n        input_tensors = to_list(input_tensors)\n        for original, cloned in zip(model.inputs, input_tensors):\n            layer_map[original] = cloned\n\n    for node in model._nodes:\n        for inbound_layer, node_data in node.inbound_layers:\n            if inbound_layer not in layer_map:\n                # Clone inbound layer.\n                new_inbound_layer = inbound_layer.__class__.from_config(inbound_layer.get_config())\n                layer_map[inbound_layer] = new_inbound_layer\n\n    # Update tensor map with input tensors and cloned layers.\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterate over every node in the reference model and compute outputs.\n    for node in model._nodes:\n        outbound_layer = node.outbound_layer\n        new_outbound_layer = layer_map[outbound_layer]\n\n        # Gather inputs to call the new layer.\n        reference_input_tensors = [tensor_map[x][0] for x in node.input_tensors]\n        computed_tensors = new_outbound_layer(reference_input_tensors)\n\n        # Update tensor_map with computed tensors.\n        for x, y in zip(node.output_tensors, computed_tensors):\n            tensor_map[x] = (y, None)  # tensor, mask\n\n    # Instantiate a new model from input and outputs.\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}