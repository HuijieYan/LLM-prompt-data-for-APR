{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(data, date_unit, min_stamp):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if len(data) == 0:\n        return data, False\n\n    new_data = data\n    if is_bool_dtype(new_data):\n        return data, False\n    if is_datetime64_any_dtype(new_data) or is_timedelta64_any_dtype(new_data):\n        return data, True\n    if isna(new_data).all() and not is_bool_dtype(new_data):\n        return data, False\n    if date_unit is None:\n        date_unit = \"ns\"\n\n    if isinstance(data, ABCSeries):\n        new_data = data.array\n    else:\n        if not isinstance(data, ABCDataFrame):\n            data = np.array(data)\n        # The code will now break if the data is not a DataFrame if `errors=raise` is specified\n        new_data = data._mgr.consolidate()\n        new_data = new_data.to_numpy(na_value=\"ignore\", dtype=numpy_1_14_0)\n    \n\n    if isbool:\n        return data, False\n\n    in_range = (\n        isna(new_data)\n        | (new_data > min_stamp)\n    )\n\n    if not in_range.all():\n        return data, False\n\n    date_units = (date_unit,) if date_unit else [\"ns\", \"us\", \"ms\", \"s\"]\n    for date_unit in date_units:\n        try:\n            new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n            return new_data, True\n        except (ValueError, TypeError):\n            continue\n    return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype, is_timedelta64_any_dtype, is_bool_dtype",
                "from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries",
                "from pandas.core.nanops import isna",
                "from pandas.core.tools.datetimes import to_datetime",
                "from pandas.compat.numpy import numpy_1_14_0"
            ]
        }
    ]
}