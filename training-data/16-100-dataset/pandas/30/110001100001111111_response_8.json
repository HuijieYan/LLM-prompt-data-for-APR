{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\" and not issubclass(new_data.dtype.type, (bool, np.bool_)):\n        try:\n            new_data = data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    if not issubclass(new_data.dtype.type, (np.number, bool, np.bool_)):\n        return data, False\n\n    return_data = data\n    if isinstance(data, (pd.Series, pd.Index)):\n        return_data = data.copy()\n\n    in_range = ~return_data.isna().values\n    if not in_range.all():\n        return data, False\n\n    return return_data, True",
            "import_list": [
                "import numpy as np",
                "from pandas import isna, to_datetime, iNaT",
                "from pandas._libs.tslibs.timestamps import Timestamp"
            ]
        }
    ]
}