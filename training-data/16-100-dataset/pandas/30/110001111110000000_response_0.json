{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a Series like into a date column.\n\n    Parameters\n    ----------\n    data : Series\n        The Series being parsed.\n\n    Returns\n    -------\n    data : Series\n        The converted Series if successful, original Series otherwise.\n    success : bool\n        True if successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    dtype = data.dtype\n    if dtype is not None:\n        if dtype == \"object\":\n            # try to coerce to int64, if that fails, fallback to object\n            try:\n                data = data.astype(np.int64)\n            except (TypeError, ValueError, OverflowError):\n                pass\n        elif issubclass(dtype.type, np.number):\n            # ignore numbers that are out of range\n            in_range = nanops.isfinite(data)\n            if not in_range.all():\n                return data, False\n        else:\n            pass  # we have a unit. So, we ignore\n\n    # tz-aware is okay here\n    parsed, _ = maybe_cast_to_datetime(data, errors=\"ignore\")\n\n    if parsed is not NotImplemented:\n        return parsed, True\n\n    return data, False",
            "imports": [
                "import numpy as np",
                "from pandas.core.nanops import nanops",
                "from pandas.core.dtypes.cast import maybe_cast_to_datetime",
                "from pandas._libs.tslibs import iNaT",
                "from pandas._typing import DateDtype",
                "from pandas._libs.tslibs import Timestamp, NaT",
                "from pandas.util._decorators import Appender"
            ]
        }
    ]
}