{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n            \"\"\"\n            Try to parse a ndarray like into a date column.\n\n            Try to coerce bools to bool, object in epoch/iso formats and integer/float in epoch\n            formats. Return a boolean if parsing was successful.\n            \"\"\"\n            if self.parse_nominal_values:\n                if not is_bool(data) and is_list_like(data):\n                    return data, False\n            new_data = data\n            if is_list_like(new_data):\n                new_data = np.array(new_data, dtype=np.object_)\n            else:\n                new_data = np.array([new_data], dtype=np.object_)\n            coerce_epoch = False\n            raise_missing = False\n            if new_data.dtype == \"bool\":\n                coerce_bool = True\n            else:\n                coerce_bool = False\n                if is_datetime64_any_dtype(new_data):\n                    raise_missing = True\n                elif new_data.dtype == \"object\":\n                    try:\n                        new_data = new_data.astype(\"int64\")\n                        coerce_epoch = True\n                    except (TypeError, ValueError, OverflowError):\n                        pass\n                    if not raise_missing and is_missing(new_data):\n                        raise_missing = True\n                elif is_missing(new_data):\n                    raise_missing = True\n            if any(is_scalar(val) for val in new_data) and not (\n                coerce_epoch or coerce_bool\n            ):\n                # no coercion on empty or non convertables\n                return data, False\n            in_range = np.ones(new_data.shape, dtype=bool)\n            if coerce_epoch:\n                new_data = np.array(new_data, copy=True)\n                in_range = (\n                    is_missing(new_data) | (new_data >= self.min_stamp)\n                )\n                in_range &= new_data != iNaT\n            if raise_missing and not in_range.all():\n                raise ValueError(\"ValueError: cannot assemble datetimes in this format\")\n            try:\n                new_data = Array._try_convert_to_values(\n                    new_data, DatePrecision(self.date_unit)\n                )\n                new_data = self._convert_to_values(new_data, in_range=in_range)\n            except ValueError as e:\n                raise e\n            except Exception as e:\n                return data, False\n            else:\n                return new_data, True",
            "imports": [
                "import numpy as np",
                "from pandas._libs.tslibs.nattype import NaTType",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype",
                "from pandas.api.types import is_bool, is_list_like, is_scalar, is_dict_like, is_missing",
                "from pandas.io.json.normalize import nested_to_record",
                "from pandas.io.json._json import Parser"
            ]
        }
    ]
}