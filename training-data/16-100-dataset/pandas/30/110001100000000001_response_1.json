{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\":\n        try:\n            if is_scalar(data):\n                new_data = to_datetime(data, errors=\"raise\", unit=self.date_unit)\n            elif needs_i8_conversion(new_data):\n                new_data = new_data.astype(\"int64\")\n            else:\n                raise ValueError(\"Could not convert to date\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    if is_integer(new_data) or is_datetime64_dtype(new_data):\n        if not np.issubdtype(new_data.dtype, np.integer):\n            if (new_data > self.min_stamp).any():\n                return data, False\n\n    try:\n        new_data = to_datetime(new_data, errors=\"raise\", unit=self.date_unit)\n        return new_data, True\n    except (ValueError, OverflowError):\n        return data, False",
            "imports": [
                "import numpy as np",
                "from pandas.api.types import is_scalar, is_datetime64_dtype, is_integer, needs_i8_conversion"
            ]
        }
    ]
}