{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        if not len(data):  # no conversion on empty\n            return data, False\n\n        new_data = data\n        if new_data.dtype == object:  # check if the data type is object\n            try:\n                new_data = new_data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n\n        if is_numeric_dtype(new_data):  # ignore numbers that are out of range\n            in_range = (\n                pd.isna(new_data)\n                | (new_data > self.min_stamp)\n            )\n            if not in_range.all():\n                return data, False\n\n        if is_datetime64_any_dtype(new_data):  # check if the data type is datetime\n            return new_data, True\n        return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype",
                "from pandas.errors import AbstractMethodError, NotImplementedError"
            ]
        }
    ]
}