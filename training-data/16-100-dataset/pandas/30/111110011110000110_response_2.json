{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n    \n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        if is_object_dtype(data):\n            try:\n                new_data = data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n        elif is_numeric_dtype(data):\n            in_range = (isna(data._values) |\n                        (data > self.min_stamp) |\n                        (data._values == iNaT))\n            if not in_range.all():\n                return data, False\n        elif all(date_unit in (\"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \"ps\") for date_unit in\n                ((self.date_unit,) if self.date_unit else [\"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \"ps\"])):\n            try:\n                new_data = to_datetime(data, errors=\"raise\", unit=date_unit)\n                return new_data, True\n            except (ValueError, OverflowError):\n                pass\n        return data, False",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_numeric_dtype, is_object_dtype",
                "from pandas.errors import UnsupportedFunctionCall",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas.tseries.algo import to_datetime",
                "from pandas.core.dtypes.missing import isna"
            ]
        }
    ]
}