{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = index + columns\n        grouped = data.groupby(keys, observed=observed)\n\n        for func in aggfunc:\n            agged = grouped.agg(func)\n            pieces.append(agged)\n\n        result = concat(pieces, keys=aggfunc, axis=1)\n\n        if margins:\n            result = _add_margins(\n                result,\n                data,\n                values,\n                rows=index,\n                cols=columns,\n                aggfunc=aggfunc,\n                observed=observed,\n                margins_name=margins_name,\n                fill_value=fill_value,\n            )\n\n        return result\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = [v.key if isinstance(v, Grouper) else v for v in keys + values]\n        data = data[to_filter]\n\n    else:\n        values = data.columns\n        values = values.drop(keys, errors='ignore', level=keys)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    result = agged\n\n    if result.index.nlevels > 1:\n        result = agged.unstack(keys[len(index):])\n    \n    if not dropna:\n        result = result.reindex(cartesian_product(*[lvl.values for lvl in result.index.levels]), axis=0)\n        result = result.reindex(cartesian_product(*[lvl.values for lvl in result.columns.levels]), axis=1)\n\n    if isinstance(result, ABCDataFrame):\n        result = result.sort_index(axis=1)\n\n    if fill_value is not None:\n        result = result.fillna(fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        result = _add_margins(\n            result,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if values_passed and not values_multi and not result.empty and result.columns.nlevels > 1:\n        result = result[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        result = result.T\n\n    if isinstance(result, ABCDataFrame) and dropna:\n        result = result.dropna(how=\"all\", axis=1)\n\n    return result",
            "imports": []
        }
    ]
}