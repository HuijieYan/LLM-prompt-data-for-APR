{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    # Ensure aggfunc is a list for handling multiple aggregation functions\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = data.pivot_table(\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    # Handle values parameter\n    if values is not None:\n        if isinstance(values, list):\n            values_multi = True\n        else:\n            values_multi = False\n            values = [values]\n\n            # Make sure value labels are in data\n            for i in values:\n                if i not in data:\n                    raise KeyError(i)\n\n        to_filter = [x for x in keys + values if isinstance(x, Grouper) or x in data]\n        data = data[to_filter]\n\n    else:\n        values = [col for col in data.columns if col not in keys]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    # Drop NaN values and handle integer data types\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        for v in values:\n            if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n                agged[v] = agged[v].astype(data[v].dtype)\n\n    table = agged\n\n    # Unstack the table if index has multiple levels\n    if table.index.nlevels > 1:\n        to_unstack = [i for i in range(len(index), len(keys)) if agged.index.names[i] not in index]\n        table = agged.unstack(to_unstack)\n\n    # Reindex if dropna is False\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_product(table.index.levels, names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_product(table.columns.levels, names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    # Sort the table if it's a DataFrame\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    # Fill NaN values with fill_value\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    # Add margins if required\n    if margins:\n        if dropna:\n            data = data.dropna(subset=keys)\n        table = _add_margins(\n            table,\n            data,\n            values,\n            index,\n            columns,\n            aggfunc,\n            observed,\n            margins_name,\n            fill_value,\n        )\n\n    # Return the final table\n    return table",
            "import_list": [
                "import pandas as pd",
                "from pandas import DataFrame, concat, MultiIndex",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.indexes.api import Index",
                "from pandas.core.groupby.generic import Grouper",
                "from pandas.core.groupby.groupby import DataFrameGroupBy",
                "from pandas.core.frame import ABCDataFrame",
                "from typing import List, Union"
            ]
        }
    ]
}