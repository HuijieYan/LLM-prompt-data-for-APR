{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data_only = data._try_coerce_to_numeric(copy=False)\n    else:\n        data_only = data\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n\n        try:\n            result, _ = self.grouper.aggregate(\n                data_only.get_values(blocs=[block.mgr_locs]), how, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            obj = block.get_values()\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.agg(alt)\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n            else:\n                if isinstance(result, DataFrame):\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n\n                result = result.values\n\n        if result is not no_result:\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if len(result) == 1:\n                result = result.squeeze()\n\n            new_block = block.make_block(result)\n            agg_blocks.append(new_block)\n            new_items.append(locs)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(indexer.astype(\"int64\"))\n\n    # reset the locs in the blocks to correspond to our current ordering\n    for i, block in enumerate(agg_blocks):\n        loc = len(block.mgr_locs.as_array)\n        block.mgr_locs = BlockPlacement(slice(i, i + 1, 1))\n\n    return agg_blocks, agg_items",
            "imports": []
        }
    ]
}