{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n    \n    data: BlockManager = self._get_data_to_aggregate()\n    copy_requested = self.obj._is_copy\n    new_blocks: List[Block] = []\n    for block in data.blocks:\n        try:\n            result = block.aggregate(how)\n        except NotImplementedError:\n            # Generally if we have numeric_only=False and non-applicable functions,\n            # we try to aggregate using the passed alternative aggregation functions\n            \n            if alt is None:\n                # we cannot perform the operation in an alternate way, exclude the block\n                raise\n            else:\n                result = alt(block.values, axis=self.axis)\n        except:\n            print(\"error aggregating: \", block)\n            raise\n\n        if isinstance(result, Series):\n            new_blocks.append(block.make_block_same_class(result, placement=block.mgr_locs))\n        else:\n            # ditto for the dtype\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if block.is_extension:\n                result = type(block.values)._from_sequence(result.ravel(), dtype=block.values.dtype)\n\n            new_blocks.append(block.make_block_same_class(\n                                            result,\n                                            placement=block.mgr_locs))\n\n    if numeric_only:\n        new_data = BlockManager(new_blocks, axes=data.axes)\n    else:\n        new_data = BlockManager(data.blocks, axes=data.axes)\n\n    if copy_requested and not numeric_only:\n        self.obj._data = new_data\n    else:\n        self._data = new_data",
            "imports": []
        }
    ]
}