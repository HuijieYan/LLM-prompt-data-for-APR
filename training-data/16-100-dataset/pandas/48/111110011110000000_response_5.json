{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.convert_dtypes(infer_objects=False).get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n\n        for block in data.blocks:\n            result = no_result\n            locs = block.mgr_locs\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=0, min_count=min_count\n                )\n            except NotImplementedError:\n                if alt is None:\n                    assert how == 'ohlc'\n                    continue\n\n                obj = self.obj._mgr.iget(block.number).copy()\n                result = self.grouper.get_result(\n                    obj, lambda x, axis=0: self.grouper._try_aggregate(\n                        obj,\n                        alt,\n                        axis=axis,\n                        min_count=min_count\n                    ),\n                )\n                result.columns = MultiIndex.from_product([result.columns, [block.name]], names=['function', ''])\n            except Exception as err:\n                raise err\n            if result is not no_result:\n                frame = result._data.blocks[0].get_values()\n\n                if result.ndim == 1:\n                    frame = frame.reshape(1, -1)\n\n                new_items.append(locs)\n                split_items.append(locs)\n                split_frames.append(frame)\n\n                agg_block = block.make_block_same_class(frame, placement=locs, ndim=2)\n                agg_blocks.append(agg_block)\n\n        if len(agg_blocks) == 0:\n            raise DataError(\"No numeric types to aggregate\")\n\n        return agg_blocks, None",
            "imports": []
        }
    ]
}