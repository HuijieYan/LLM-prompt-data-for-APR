{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.select_dtypes(include=np.number)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs.as_array)\n                continue\n            obj = self.obj[block.mgr_locs]\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n            s = obj.groupby(self.grouper).aggregate(lambda x: alt(x, axis=self.axis))\n            if isinstance(s, pd.Series):\n                s = s.reset_index(drop=True)\n            else:\n                s = s.reset_index()\n                s = s.drop(columns=s.columns[0])\n\n            if len(s.columns) != 1:\n                split_items.append(s)\n                continue\n\n            result = s.to_numpy()\n\n        if not isinstance(result, pd.DataFrame):\n            new_items.append(locs.as_array)\n            agg_block: Block = block.make_block(result)\n            agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(indexer)\n    delta = max(0, len(set(deleted_items)) - len(deleted_items))\n    indexer = [i - delta for i in indexer]\n\n    if split_items:\n        for s in split_items:\n            idx = pd.Int64Index(s[:, 0], name=\"index\")\n            for i in s[:, 1:]:\n                b = data.blocks[0].copy()\n                b.values = i\n                agg_blocks.append(b)\n                agg_items = agg_items.append(idx)\n    \n    remap_items = data.items.take(np.sort(indexer))\n    for block in agg_blocks:\n        n = len(block.mgr_locs)\n        locs = remap_items.get_indexer_for(block.mgr_locs)\n        block.set_ref_items(ref_items[idx:idx + n])\n        block.mgr_locs = np.arange(n)\n        idx += n\n\n    return agg_blocks, agg_items",
            "imports": []
        }
    ]
}