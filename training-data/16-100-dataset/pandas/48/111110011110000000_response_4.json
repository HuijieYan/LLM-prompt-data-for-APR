{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> Union[Tuple[List[pd.DataFrame], pd.Index], Tuple[List[np.ndarray], pd.Index]]:\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n    \n        data: pd.core.internals.BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.convert_objects(convert_numeric=True)\n    \n        agg_blocks: List[pd.DataFrame] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n    \n        for block in data.blocks:\n            locs = block.mgr_locs.as_array\n            block_data = data.get_block_values(block_id=block.mgr_locs, upcast=True)\n            agg_data = []\n            for row in block_data:\n                agg_value = np.mean(row) if how == \"mean\" else np.median(row) if how == \"median\" else np.var(row, ddof=1)\n                agg_data.append(agg_value)\n            agg_columns = [f\"{block.mgr_locs[i]}-{how}\" for i in range(len(block.mgr_locs))]\n            agg_df = pd.DataFrame(data=agg_data, columns=agg_columns, index=locs)\n            agg_blocks.append(agg_df)\n            new_items.append(locs)\n    \n        if not agg_blocks:\n            raise pd.core.base.DataError(\"No numeric types to aggregate\")\n    \n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n    \n        return agg_blocks, agg_items",
            "imports": [
                "from typing import List, Tuple, Union",
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}