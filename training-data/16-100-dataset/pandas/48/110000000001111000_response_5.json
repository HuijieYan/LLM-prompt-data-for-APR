{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, \n        how: str, \n        alt=None, \n        numeric_only: bool = True, \n        min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n    # Sample block data\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data._consolidate(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    \n    no_result = object()\n\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            result = block.values.aggregate(how)\n        \n        if result is not no_result:\n            # Adding agg block\n            agg_block = block.make_block(result)\n            new_items.append(np.array([block.mgr_locs]))\n\n    if notagg_blocks and split_frames:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Reset the locs in the blocks to correspond to our current ordering\n    indexer = np.concatenate(new_items).reshape(1, -1)[0]\n    agg_items = data.items.take(indexer)\n\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[:loc]\n        indexer = indexer[loc:]\n        \n    return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.internals.blocks import Block",
                "from pandas.core.internals.managers import BlockManager",
                "from pandas.core.indexes.base import Index",
                "from pandas.core.arrays.integer import IntegerArray",
                "from pandas.core.dtypes.dtypes import Int64Dtype",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.groupby.generic import BlockPlacement"
            ]
        }
    ]
}