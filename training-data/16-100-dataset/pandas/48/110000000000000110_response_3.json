{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    \n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n    \n    no_result = object()\n    for block, locs in zip(data.blocks, data._blknos):\n        result = no_result\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n            \n            obj = self.obj._mgr.getitem_array(data.items.get_indexer_for(locs))\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n            \n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n            else:\n                result = cast(DataFrame, result)\n                \n                split_blocks = result._split_op_result(locs)\n                if split_blocks is not None:\n                    split_items.append(locs)\n                    split_frames.extend(split_blocks)\n                    continue\n                \n                result = result.values\n    \n        if isinstance(result, DataFrame):\n            # We may have an exception in trying to aggregate\n            deleted_items.append(locs)\n            continue\n\n        if result is not no_result:\n            \n            if isinstance(result, ABCDataFrame):\n                result = cast(DataFrame, result)\n\n            agg_blocks.append(block.make_block(result))\n    \n    if len(agg_blocks) == 0 and len(split_frames) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    if len(split_items) > 0:\n        new_items = data.items.take(np.sort(np.concatenate(new_items)))\n    \n    if len(deleted_items) > 0:\n        indexer = np.arange(len(data))\n        indexer = np.delete(indexer, np.hstack(deleted_items)).argsort()\n        agg_blocks = [b for b in agg_blocks if len(b.mgr_locs) > 0]\n        new_items = data.items.take(indexer)\n    \n    for loc, blk in zip(new_items, agg_blocks):\n        loc.mgr_locs = blk.mgr_locs\n\n    return agg_blocks, new_items",
            "import_list": []
        }
    ]
}