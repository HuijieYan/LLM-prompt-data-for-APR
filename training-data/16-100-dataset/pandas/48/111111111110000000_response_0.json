{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.convert(numeric=True, copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n\n    no_result = object()\n    for block_id, block in data.items():\n        result = no_result\n        locs = np.array(block.mgr_locs, copy=False, dtype=block.mgr_locs.dtype)\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n            obj = self.obj[locs]\n            if isinstance(obj, DataFrame):\n                if len(obj.columns) == 1:\n                    obj = obj.iloc[:, 0]\n            else:\n                obj = obj.squeeze()\n            result = obj.groupby(self.grouper, sort=False).agg(alt)\n\n        if not isinstance(result, DataFrame):\n            if result is no_result:\n                deleted_items.append(locs)\n                continue\n            if len(result._data.blocks) != 1:\n                split_items.append(result._data.blocks[0].mgr_locs)\n                split_frames.append(result)\n                continue\n            result = result._data.blocks[0].values\n            if isinstance(result, np.ndarray) and result.ndim == 1:\n                result = result.reshape(1, -1)\n\n        if isinstance(result, DataFrame):\n            raise ValueError(\"aggregate returned a DataFrame\")\n\n        if result is not no_result:\n            result = maybe_downcast_numeric(result, block.dtype)\n            if is_extension_array_dtype(block.dtype) and isinstance(result, np.ndarray):\n                result = type(block.values)._from_sequence(\n                    result, dtype=block.dtype, copy=False\n                )\n                result, _ = make_block(result, locs, ndim=2)\n            else:\n                result, _ = make_block(result, locs, ndim=2)\n\n        new_items.append(locs)\n        agg_blocks.append(result)\n    \n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_items:\n        for split_locs, split_result in zip(split_items, split_frames):\n            new_items.append(split_locs)\n            split_result, _ = make_block(split_result, split_locs, ndim=2)\n            agg_blocks.append(split_result)\n\n    new_items = np.concatenate(new_items)\n\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        indexer = sorted(set(range(len(data))).difference(deleted))\n    else:\n        indexer = sorted(np.unique(new_items, return_index=True)[1])\n\n    if indexer.shape[0] < len(data.items):\n        data = data.reindex(item=new_items[indexer])\n        agg_blocks = data.blocks\n\n    return agg_blocks, data.items.take(indexer)",
            "import_list": []
        }
    ]
}