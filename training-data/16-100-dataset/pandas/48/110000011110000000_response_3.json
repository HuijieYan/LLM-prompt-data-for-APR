{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], Index]:\n    \"\"\"\n    Aggregate DataFrame blocks into new blocks.\n\n    Parameters:\n    - `how`: str, the aggregation function to be used.\n    - `alt`: Any, an alternative aggregation function.\n    - `numeric_only`: bool, whether to consider only numeric columns.\n    - `min_count`: int, the minimum number of items required for the aggregation.\n\n    Returns:\n    - A tuple containing the aggregated blocks and the index.\n\n    TODO: the actual managing of mgr_locs is a PITA\n    here, it should happen via BlockManager.combine\n    \"\"\"\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_items: List[np.ndarray] = []\n    agg_blocks: List[Block] = []\n\n    for block in data.blocks:\n        try:\n            # Attempt the aggregation with the primary function\n            result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n        except NotImplementedError:\n            if alt is None:\n                # If the primary function is not applicable and no alternate function is provided, raise an error\n                raise ValueError(\"No valid aggregation function found.\")\n\n            # If an alternate function is provided, attempt the aggregation with it\n            obj = self.obj[data.items[block.mgr_locs.as_array]]\n            s = get_groupby(obj, self.grouper)\n            result = s.agg(alt)\n\n        new_block = block.make_block(result)\n        agg_blocks.append(new_block)\n        agg_items.append(block.mgr_locs.as_array)\n\n    # Concatenate the new items\n    indexer = np.concatenate(agg_items)\n\n    # Retrieve the corresponding items based on the indexer\n    agg_items = data.items.take(indexer)\n\n    return agg_blocks, agg_items",
            "imports": [
                "from typing import List, Tuple, Union, cast"
            ]
        }
    ]
}