{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    if numeric_only:\n        data = data._ensure_valid_target(axis=1)._asdict().copy()\n    else:\n        data = data._asdict()\n\n    agg_blocks: List[Block] = []\n    agg_items = []\n\n    for block_id, block in data.items():\n        new_items = list(agg_items[-1]) if agg_items else []\n\n        try:\n            result, _ = self.grouper.aggregate(block, how, min_count=min_count)\n\n            if isinstance(result, DataFrame):\n                result = result._data.blocks[0].values\n\n            if block.is_extension and isinstance(result, np.ndarray):\n                result = type(block.values)._from_sequence(\n                    result.ravel(), dtype=block.dtype\n                )\n        except (NotImplementedError, TypeError):\n            deleted_items.extend(block)\n            continue\n\n        if result is None:\n            deleted_items.extend(block)\n            continue\n\n        result = maybe_downcast_numeric(result, block.dtype)\n        agg_block = block.make_block(result)\n        new_items.append(agg_block.mgr_locs)\n        agg_items.append(new_items)\n\n        agg_blocks.append(agg_block)\n\n    if (not agg_blocks) and (not split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    return agg_blocks, agg_items",
            "imports": []
        }
    ]
}