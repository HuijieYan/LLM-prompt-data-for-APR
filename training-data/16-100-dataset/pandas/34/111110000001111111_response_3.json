{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = DateRange(start=None, end=None, periods=1, freq=self.freq, tz=ax.tz, name=ax.name)\n            return binner, [], labels\n\n        first = ax.min()\n        last = ax.max()\n\n        bin_edges = (\n            first + DateOffset(days=1),\n            last + DateOffset(days=1)\n        )\n\n        binner = DateRange(start=first, end=last, freq=self.freq, tz=ax.tz, name=ax.name, closed=self.closed)\n        labels = DateRange(start=first, end=last, freq=self.freq, tz=ax.tz, name=ax.name, closed=self.closed)\n\n        for i, label in enumerate(labels):\n            if label in binner:\n                labels[i] = label\n            else:\n                labels[i] = NaT\n\n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        bins = lib.generate_bins_dt64(\n            ax.asi8, bin_edges, self.closed, hasnans=ax.hasnans\n        )\n\n        return binner, bins, labels",
            "imports": [
                "from pandas import DateOffset, Grouper, Timestamp, DateRange, NaT",
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}