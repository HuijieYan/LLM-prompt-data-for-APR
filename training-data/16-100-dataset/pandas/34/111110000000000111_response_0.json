{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n    \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n    \n        ax_localized = ax.tz_localize(None).tz_localize(ax.tz)  # Ensure localizing the timestamp in its original timezone\n        ax_shifted = ax_localized.shift(freq=self.freq)  # Shift the timestamp according to the frequency\n        \n        binner = labels = DatetimeIndex(data=[ax_localized[0]], freq=self.freq, name=ax.name)  # Initialize with the first timestamp\n        \n        while binner[-1] < ax_shifted[-1]:\n            binner = binner.append(DatetimeIndex(data=[binner[-1] + self.freq]))  # Add new bin edges\n            labels = labels.append(DatetimeIndex(data=[binner[-1]]))  # Add corresponding labels\n        \n        binner = binner[:-1]  # Remove the last edge to match the length of labels\n        labels = labels[1:] if self.label == \"right\" else labels[:-1]  # Adjust labels based on the label parameter\n    \n        return binner, [], labels",
            "imports": []
        }
    ]
}