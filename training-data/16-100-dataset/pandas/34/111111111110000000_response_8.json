{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n    \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n    \n        first = ax.min()\n        last = ax.max()\n        binner = labels = date_range(\n            start=first,\n            end=last,\n            freq=self.freq,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\"\n        )\n    \n        ax_values = ax.asi8\n        bin_edges = adjust_bin_edges(binner, ax_values)\n    \n        bins = [\n            (label, binner[i + 1] if i < len(binner) - 1 else binner[i] + self.freq)\n            for i, label in enumerate(labels)\n        ]\n    \n        if self.closed == \"right\":\n            bins[-1] = (bins[-1][0], bins[-1][1] + np.diff(bins[-2])[0])\n    \n        result = []\n        for bin in bins:\n            eq = (ax_values >= bin[0]) & (ax_values < bin[1])\n            result.append(np.asarray(eq))\n    \n        return result",
            "imports": [
                "from pandas import DatetimeIndex, date_range",
                "from pandas.core.resample import Grouper"
            ]
        }
    ]
}