{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, pd.DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        # Convert to day offset if freq is not a 'D' frequency\n        if get_offset(self.freq).name != \"D\":\n            self.freq = to_offset(self.freq).rule_code\n\n        if len(ax) == 0:\n            binner = labels = pd.DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        base = self.base if self.base is not None else 0\n        first = self.freq.rollback(ax.min())\n        last = self.freq.rollforward(ax.max())\n        binner = pd.date_range(start=first, end=last, freq=self.freq, tz=ax.tz, name=ax.name)\n        ax_values = ax.asi8\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n        # general version, knowing nothing about relative frequencies\n        bins = pd.Series(ax_values).sub(bin_edges[:, None])\n        bins = bins.where(self.closed == \"right\", bins + 1).astype(\"h\")\n\n        if self.closed == \"right\" and self.label == \"right\":\n            labels = binner[1:]\n        else:\n            labels = binner\n\n        if ax_values[0] < ax_values[-1]:\n            # GH4076\n            if len(bins) < len(labels):\n                labels = labels[: len(bins)]\n\n        if ax.hasnans:\n            binner = binner.insert(0, pd.NaT)\n            labels = labels.insert(0, pd.NaT)\n\n        return binner, bins, labels",
            "imports": [
                "import pandas as pd",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.frequencies import get_offset"
            ]
        }
    ]
}