{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n        \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name, tz=ax.tz)\n            return binner, [], labels\n    \n        first, last = ax.min(), ax.max()\n        \n        tz = first.tz\n\n        if self.closed == 'left':\n            # Adjusting the first timestamp based on the frequency\n            first = self.freq.rollback(first)\n        else:\n            # Adjusting the last timestamp based on the frequency\n            last = self.freq.rollback(last)\n    \n        binner = labels = date_range(\n            start=first,\n            end=last,\n            freq=self.freq,\n            tz=first.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n    \n        ax_values = np.array(ax, dtype=np.int64)\n        bin_edges = np.array(binner, dtype=np.int64)\n        \n        # Adjusting bin edges based on the closed end of the interval\n        if self.closed == 'right':\n            bin_edges -= 1\n        \n        bins = np.digitize(ax_values, bin_edges, right=True)\n            \n        return binner, bins, labels",
            "import_list": [
                "from pandas import DatetimeIndex, Timestamp, NaT, date_range",
                "from pandas.core.indexes.datetimes import DatetimeArray",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "import numpy as np"
            ]
        }
    ]
}