{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    # check if ax is an instance of DatetimeIndex\n    if not isinstance(ax, pd.DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    # check if length of ax is 0\n    if len(ax) == 0:\n        binner = labels = pd.DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    # Get the first and last timestamp range edges\n    first, last = self._get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n    \n    # Create binner and labels using date_range\n    binner = labels = pd.date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        closed=self.closed,\n    )\n\n    # Call _adjust_bin_edges to adjust the bin edges\n    ax_values = ax.values\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # Generate bins using lib.generate_bins_dt64\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, has_nans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, pd.NaT)\n        labels = labels.insert(0, pd.NaT)\n\n    # Adjust labels if there are more labels than bins\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels",
            "imports": []
        }
    ]
}