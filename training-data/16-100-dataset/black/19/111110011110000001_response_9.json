{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        should_have_empty_lines = current_line.depth > 0 and not current_line.is_decorator\n        extra_empty_lines_before = 0\n        extra_empty_lines_after = 0\n\n        if should_have_empty_lines and self.previous_line and not self.previous_line.is_decorator:\n            extra_empty_lines_after = 1\n\n        if current_line.is_flow_control:\n            extra_empty_lines_before = 1\n        elif (\n            self.previous_line\n            and self.previous_line.is_import\n            and not current_line.is_import\n            and current_line.depth == self.previous_line.depth\n        ):\n            extra_empty_lines_before = 1\n        elif (\n            self.previous_line\n            and self.previous_line.is_yield\n            and (not current_line.is_yield or current_line.depth != self.previous_line.depth)\n        ):\n            extra_empty_lines_before = 1\n\n        return extra_empty_lines_before, extra_empty_lines_after",
            "imports": [
                "from dataclasses import dataclass",
                "from typing import Tuple"
            ]
        }
    ]
}