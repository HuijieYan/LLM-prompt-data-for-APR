{
    "black": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 117,
            "file_name": "blib2to3/pgen2/driver.py",
            "replace_code": "def _partially_consume_prefix(self, prefix, column):\n    lines = []\n    current_line = \"\"\n    current_column = 0\n    wait_for_indent_end = False\n    for char in prefix:\n        if char == '\\n':\n            if current_column < column:\n                res = ''.join(lines)\n                return res, prefix[len(res):]\n\n            lines.append(current_line + '\\n')\n            current_line = \"\"\n            current_column = 0\n            wait_for_indent_end = True\n        elif char == ' ':\n            if wait_for_indent_end:\n                current_line += ' ' * (column - current_column)\n                current_column = column\n                wait_for_indent_end = False\n            else:\n                current_line += ' '\n                current_column += 1\n        elif char == '\\t':\n            if wait_for_indent_end:\n                current_line += '\\t' * ((column - current_column) // 4)\n                current_column += 4 * ((column - current_column) // 4)\n                wait_for_indent_end = False\n            else:\n                current_line += '\\t'\n                current_column += 4\n        else:\n            if wait_for_indent_end:\n                wait_for_indent_end = False\n            current_line += char\n            current_column += 1\n\n    res = ''.join(lines) + current_line\n    return res, prefix[len(res):]",
            "import_list": []
        }
    ]
}