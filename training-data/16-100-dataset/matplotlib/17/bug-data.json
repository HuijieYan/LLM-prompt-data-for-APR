{
    "matplotlib:17": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_17/lib/matplotlib/transforms.py": {
            "buggy_functions": [
                {
                    "function_name": "nonsingular",
                    "function_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    \"\"\"\n    Modify the endpoints of a range as needed to avoid singularities.\n\n    Parameters\n    ----------\n    vmin, vmax : float\n        The initial endpoints.\n    expander : float, default: 0.001\n        Fractional amount by which *vmin* and *vmax* are expanded if\n        the original interval is too small, based on *tiny*.\n    tiny : float, default: 1e-15\n        Threshold for the ratio of the interval to the maximum absolute\n        value of its endpoints.  If the interval is smaller than\n        this, it will be expanded.  This value should be around\n        1e-15 or larger; otherwise the interval will be approaching\n        the double precision resolution limit.\n    increasing : bool, default: True\n        If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n\n    Returns\n    -------\n    vmin, vmax : float\n        Endpoints, expanded and/or swapped if necessary.\n        If either input is inf or NaN, or if both inputs are 0 or very\n        close to zero, it returns -*expander*, *expander*.\n    \"\"\"\n\n    if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n        return -expander, expander\n\n    swapped = False\n    if vmax < vmin:\n        vmin, vmax = vmax, vmin\n        swapped = True\n\n    maxabsvalue = max(abs(vmin), abs(vmax))\n    if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n        vmin = -expander\n        vmax = expander\n\n    elif vmax - vmin <= maxabsvalue * tiny:\n        if vmax == 0 and vmin == 0:\n            vmin = -expander\n            vmax = expander\n        else:\n            vmin -= expander*abs(vmin)\n            vmax += expander*abs(vmax)\n\n    if swapped and not increasing:\n        vmin, vmax = vmax, vmin\n    return vmin, vmax\n",
                    "decorators": [],
                    "docstring": "Modify the endpoints of a range as needed to avoid singularities.\n\nParameters\n----------\nvmin, vmax : float\n    The initial endpoints.\nexpander : float, default: 0.001\n    Fractional amount by which *vmin* and *vmax* are expanded if\n    the original interval is too small, based on *tiny*.\ntiny : float, default: 1e-15\n    Threshold for the ratio of the interval to the maximum absolute\n    value of its endpoints.  If the interval is smaller than\n    this, it will be expanded.  This value should be around\n    1e-15 or larger; otherwise the interval will be approaching\n    the double precision resolution limit.\nincreasing : bool, default: True\n    If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n\nReturns\n-------\nvmin, vmax : float\n    Endpoints, expanded and/or swapped if necessary.\n    If either input is inf or NaN, or if both inputs are 0 or very\n    close to zero, it returns -*expander*, *expander*.",
                    "start_line": 2758,
                    "end_line": 2809,
                    "variables": {
                        "np.isfinite": [
                            2786
                        ],
                        "np": [
                            2786,
                            2795
                        ],
                        "vmin": [
                            2786,
                            2790,
                            2791,
                            2794,
                            2796,
                            2799,
                            2800,
                            2801,
                            2804,
                            2808,
                            2809
                        ],
                        "vmax": [
                            2786,
                            2790,
                            2791,
                            2794,
                            2797,
                            2799,
                            2800,
                            2802,
                            2805,
                            2808,
                            2809
                        ],
                        "expander": [
                            2787,
                            2796,
                            2797,
                            2801,
                            2802,
                            2804,
                            2805
                        ],
                        "swapped": [
                            2792,
                            2789,
                            2807
                        ],
                        "maxabsvalue": [
                            2794,
                            2795,
                            2799
                        ],
                        "max": [
                            2794
                        ],
                        "abs": [
                            2794,
                            2804,
                            2805
                        ],
                        "tiny": [
                            2795,
                            2799
                        ],
                        "np.finfo": [
                            2795
                        ],
                        "float": [
                            2795
                        ],
                        "increasing": [
                            2807
                        ]
                    },
                    "filtered_variables": {
                        "np.isfinite": [
                            2786
                        ],
                        "np": [
                            2786,
                            2795
                        ],
                        "vmin": [
                            2786,
                            2790,
                            2791,
                            2794,
                            2796,
                            2799,
                            2800,
                            2801,
                            2804,
                            2808,
                            2809
                        ],
                        "vmax": [
                            2786,
                            2790,
                            2791,
                            2794,
                            2797,
                            2799,
                            2800,
                            2802,
                            2805,
                            2808,
                            2809
                        ],
                        "expander": [
                            2787,
                            2796,
                            2797,
                            2801,
                            2802,
                            2804,
                            2805
                        ],
                        "swapped": [
                            2792,
                            2789,
                            2807
                        ],
                        "maxabsvalue": [
                            2794,
                            2795,
                            2799
                        ],
                        "tiny": [
                            2795,
                            2799
                        ],
                        "np.finfo": [
                            2795
                        ],
                        "increasing": [
                            2807
                        ]
                    },
                    "diff_line_number": 2793,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20000",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "vmax": {
                                    "variable_value": "20000",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "expander": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20000.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "vmax": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20000.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "vmax": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "20000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-32768",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "vmax": {
                                    "variable_value": "0",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "expander": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-32768.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "32768.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-32768.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "vmax": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-32768.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "32768.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-32768.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "vmax": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-32768.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "expander": {
                                    "variable_value": "0.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "swapped": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "maxabsvalue": {
                                    "variable_value": "32768.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "tiny": {
                                    "variable_value": "1e-15",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.finfo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "increasing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _indent_str(obj):  # textwrap.indent(str(obj), 4) on Py3.\n    return re.sub(\"(^|\\n)\", r\"\\1    \", str(obj))",
                "def blended_transform_factory(x_transform, y_transform):\n    \"\"\"\n    Create a new \"blended\" transform using *x_transform* to transform\n    the *x*-axis and *y_transform* to transform the *y*-axis.\n\n    A faster version of the blended transform is returned for the case\n    where both child transforms are affine.\n    \"\"\"\n    if (isinstance(x_transform, Affine2DBase)\n        and isinstance(y_transform, Affine2DBase)):\n        return BlendedAffine2D(x_transform, y_transform)\n    return BlendedGenericTransform(x_transform, y_transform)",
                "def composite_transform_factory(a, b):\n    \"\"\"\n    Create a new composite transform that is the result of applying\n    transform a then transform b.\n\n    Shortcut versions of the blended transform are provided for the\n    case where both child transforms are affine, or one or the other\n    is the identity transform.\n\n    Composite transforms may also be created using the '+' operator,\n    e.g.::\n\n      c = a + b\n    \"\"\"\n    # check to see if any of a or b are IdentityTransforms. We use\n    # isinstance here to guarantee that the transforms will *always*\n    # be IdentityTransforms. Since TransformWrappers are mutable,\n    # use of equality here would be wrong.\n    if isinstance(a, IdentityTransform):\n        return b\n    elif isinstance(b, IdentityTransform):\n        return a\n    elif isinstance(a, Affine2D) and isinstance(b, Affine2D):\n        return CompositeAffine2D(a, b)\n    return CompositeGenericTransform(a, b)",
                "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    \"\"\"\n    Modify the endpoints of a range as needed to avoid singularities.\n\n    Parameters\n    ----------\n    vmin, vmax : float\n        The initial endpoints.\n    expander : float, default: 0.001\n        Fractional amount by which *vmin* and *vmax* are expanded if\n        the original interval is too small, based on *tiny*.\n    tiny : float, default: 1e-15\n        Threshold for the ratio of the interval to the maximum absolute\n        value of its endpoints.  If the interval is smaller than\n        this, it will be expanded.  This value should be around\n        1e-15 or larger; otherwise the interval will be approaching\n        the double precision resolution limit.\n    increasing : bool, default: True\n        If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n\n    Returns\n    -------\n    vmin, vmax : float\n        Endpoints, expanded and/or swapped if necessary.\n        If either input is inf or NaN, or if both inputs are 0 or very\n        close to zero, it returns -*expander*, *expander*.\n    \"\"\"\n\n    if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n        return -expander, expander\n\n    swapped = False\n    if vmax < vmin:\n        vmin, vmax = vmax, vmin\n        swapped = True\n\n    maxabsvalue = max(abs(vmin), abs(vmax))\n    if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n        vmin = -expander\n        vmax = expander\n\n    elif vmax - vmin <= maxabsvalue * tiny:\n        if vmax == 0 and vmin == 0:\n            vmin = -expander\n            vmax = expander\n        else:\n            vmin -= expander*abs(vmin)\n            vmax += expander*abs(vmax)\n\n    if swapped and not increasing:\n        vmin, vmax = vmax, vmin\n    return vmin, vmax",
                "def interval_contains(interval, val):\n    \"\"\"\n    Check, inclusively, whether an interval includes a given value.\n\n    Parameters\n    ----------\n    interval : sequence of scalar\n        A 2-length sequence, endpoints that define the interval.\n    val : scalar\n        Value to check is within interval.\n\n    Returns\n    -------\n    bool\n        Returns *True* if given *val* is within the *interval*.\n    \"\"\"\n    a, b = interval\n    if a > b:\n        a, b = b, a\n    return a <= val <= b",
                "def _interval_contains_close(interval, val, rtol=1e-10):\n    \"\"\"\n    Check, inclusively, whether an interval includes a given value, with the\n    interval expanded by a small tolerance to admit floating point errors.\n\n    Parameters\n    ----------\n    interval : sequence of scalar\n        A 2-length sequence, endpoints that define the interval.\n    val : scalar\n        Value to check is within interval.\n    rtol : scalar\n        Tolerance slippage allowed outside of this interval.  Default\n        1e-10 * (b - a).\n\n    Returns\n    -------\n    bool\n        Returns *True* if given *val* is within the *interval* (with tolerance)\n    \"\"\"\n    a, b = interval\n    if a > b:\n        a, b = b, a\n    rtol = (b - a) * rtol\n    return a - rtol <= val <= b + rtol",
                "def interval_contains_open(interval, val):\n    \"\"\"\n    Check, excluding endpoints, whether an interval includes a given value.\n\n    Parameters\n    ----------\n    interval : sequence of scalar\n        A 2-length sequence, endpoints that define the interval.\n    val : scalar\n        Value to check is within interval.\n\n    Returns\n    -------\n    bool\n        Returns true if given val is within the interval.\n    \"\"\"\n    a, b = interval\n    return a < val < b or a > val > b",
                "def offset_copy(trans, fig=None, x=0.0, y=0.0, units='inches'):\n    \"\"\"\n    Return a new transform with an added offset.\n\n    Parameters\n    ----------\n    trans : `Transform` subclass\n        Any transform, to which offset will be applied.\n    fig : :class:`~matplotlib.figure.Figure`, default: None\n        Current figure. It can be None if *units* are 'dots'.\n    x, y : float, default: 0.0\n        The offset to apply.\n    units : {'inches', 'points', 'dots'}, default: 'inches'\n        Units of the offset.\n\n    Returns\n    -------\n    trans : `Transform` subclass\n        Transform with applied offset.\n    \"\"\"\n    if units == 'dots':\n        return trans + Affine2D().translate(x, y)\n    if fig is None:\n        raise ValueError('For units of inches or points a fig kwarg is needed')\n    if units == 'points':\n        x /= 72.0\n        y /= 72.0\n    elif units == 'inches':\n        pass\n    else:\n        cbook._check_in_list(['dots', 'points', 'inches'], units=units)\n    return trans + ScaledTranslation(x, y, fig.dpi_scale_trans)",
                "def __init__(self, shorthand_name=None):\n    \"\"\"\n    Parameters\n    ----------\n    shorthand_name : str\n        A string representing the \"name\" of the transform. The name carries\n        no significance other than to improve the readability of\n        ``str(transform)`` when DEBUG=True.\n    \"\"\"\n    self._parents = {}\n\n    # TransformNodes start out as invalid until their values are\n    # computed for the first time.\n    self._invalid = 1\n    self._shorthand_name = shorthand_name or ''",
                "def __getstate__(self):\n    # turn the dictionary with weak values into a normal dictionary\n    return {**self.__dict__,\n            '_parents': {k: v() for k, v in self._parents.items()}}",
                "def __setstate__(self, data_dict):\n    self.__dict__ = data_dict\n    # turn the normal dictionary back into a dictionary with weak values\n    # The extra lambda is to provide a callback to remove dead\n    # weakrefs from the dictionary when garbage collection is done.\n    self._parents = {k: weakref.ref(v, lambda ref, sid=k,\n                                              target=self._parents:\n                                                    target.pop(sid))\n                     for k, v in self._parents.items() if v is not None}",
                "def __copy__(self, *args):\n    raise NotImplementedError(\n        \"TransformNode instances can not be copied. \"\n        \"Consider using frozen() instead.\")",
                "def invalidate(self):\n    \"\"\"\n    Invalidate this `TransformNode` and triggers an invalidation of its\n    ancestors.  Should be called any time the transform changes.\n    \"\"\"\n    value = self.INVALID\n    if self.is_affine:\n        value = self.INVALID_AFFINE\n    return self._invalidate_internal(value, invalidating_node=self)",
                "def _invalidate_internal(self, value, invalidating_node):\n    \"\"\"\n    Called by :meth:`invalidate` and subsequently ascends the transform\n    stack calling each TransformNode's _invalidate_internal method.\n    \"\"\"\n    # determine if this call will be an extension to the invalidation\n    # status. If not, then a shortcut means that we needn't invoke an\n    # invalidation up the transform stack as it will already have been\n    # invalidated.\n\n    # N.B This makes the invalidation sticky, once a transform has been\n    # invalidated as NON_AFFINE, then it will always be invalidated as\n    # NON_AFFINE even when triggered with a AFFINE_ONLY invalidation.\n    # In most cases this is not a problem (i.e. for interactive panning and\n    # zooming) and the only side effect will be on performance.\n    status_changed = self._invalid < value\n\n    if self.pass_through or status_changed:\n        self._invalid = value\n\n        for parent in list(self._parents.values()):\n            # Dereference the weak reference\n            parent = parent()\n            if parent is not None:\n                parent._invalidate_internal(\n                    value=value, invalidating_node=self)",
                "def set_children(self, *children):\n    \"\"\"\n    Set the children of the transform, to let the invalidation\n    system know which transforms can invalidate this transform.\n    Should be called from the constructor of any transforms that\n    depend on other transforms.\n    \"\"\"\n    # Parents are stored as weak references, so that if the\n    # parents are destroyed, references from the children won't\n    # keep them alive.\n    for child in children:\n        # Use weak references so this dictionary won't keep obsolete nodes\n        # alive; the callback deletes the dictionary entry. This is a\n        # performance improvement over using WeakValueDictionary.\n        ref = weakref.ref(self, lambda ref, sid=id(self),\n                                    target=child._parents: target.pop(sid))\n        child._parents[id(self)] = ref",
                "def frozen(self):\n    \"\"\"\n    Returns a frozen copy of this transform node.  The frozen copy\n    will not update when its children change.  Useful for storing\n    a previously known state of a transform where\n    ``copy.deepcopy()`` might normally be used.\n    \"\"\"\n    return self",
                "def frozen(self):\n    return Bbox(self.get_points().copy())",
                "def __array__(self, *args, **kwargs):\n    return self.get_points()",
                "@cbook.deprecated(\"3.2\")\ndef is_unit(self):\n    \"\"\"Return whether this is the unit box (from (0, 0) to (1, 1)).\"\"\"\n    return self.get_points().tolist() == [[0., 0.], [1., 1.]]",
                "@property\ndef x0(self):\n    \"\"\"\n    The first of the pair of *x* coordinates that define the bounding box.\n\n    This is not guaranteed to be less than :attr:`x1` (for that, use\n    :attr:`xmin`).\n    \"\"\"\n    return self.get_points()[0, 0]",
                "@property\ndef y0(self):\n    \"\"\"\n    The first of the pair of *y* coordinates that define the bounding box.\n\n    This is not guaranteed to be less than :attr:`y1` (for that, use\n    :attr:`ymin`).\n    \"\"\"\n    return self.get_points()[0, 1]",
                "@property\ndef x1(self):\n    \"\"\"\n    The second of the pair of *x* coordinates that define the bounding box.\n\n    This is not guaranteed to be greater than :attr:`x0` (for that, use\n    :attr:`xmax`).\n    \"\"\"\n    return self.get_points()[1, 0]",
                "@property\ndef y1(self):\n    \"\"\"\n    The second of the pair of *y* coordinates that define the bounding box.\n\n    This is not guaranteed to be greater than :attr:`y0` (for that, use\n    :attr:`ymax`).\n    \"\"\"\n    return self.get_points()[1, 1]",
                "@property\ndef p0(self):\n    \"\"\"\n    The first pair of (*x*, *y*) coordinates that define the bounding box.\n\n    This is not guaranteed to be the bottom-left corner (for that, use\n    :attr:`min`).\n    \"\"\"\n    return self.get_points()[0]",
                "@property\ndef p1(self):\n    \"\"\"\n    The second pair of (*x*, *y*) coordinates that define the bounding box.\n\n    This is not guaranteed to be the top-right corner (for that, use\n    :attr:`max`).\n    \"\"\"\n    return self.get_points()[1]",
                "@property\ndef xmin(self):\n    \"\"\"The left edge of the bounding box.\"\"\"\n    return np.min(self.get_points()[:, 0])",
                "@property\ndef ymin(self):\n    \"\"\"The bottom edge of the bounding box.\"\"\"\n    return np.min(self.get_points()[:, 1])",
                "@property\ndef xmax(self):\n    \"\"\"The right edge of the bounding box.\"\"\"\n    return np.max(self.get_points()[:, 0])",
                "@property\ndef ymax(self):\n    \"\"\"The top edge of the bounding box.\"\"\"\n    return np.max(self.get_points()[:, 1])",
                "@property\ndef min(self):\n    \"\"\"The bottom-left corner of the bounding box.\"\"\"\n    return np.min(self.get_points(), axis=0)",
                "@property\ndef max(self):\n    \"\"\"The top-right corner of the bounding box.\"\"\"\n    return np.max(self.get_points(), axis=0)",
                "@property\ndef intervalx(self):\n    \"\"\"\n    The pair of *x* coordinates that define the bounding box.\n\n    This is not guaranteed to be sorted from left to right.\n    \"\"\"\n    return self.get_points()[:, 0]",
                "@property\ndef intervaly(self):\n    \"\"\"\n    The pair of *y* coordinates that define the bounding box.\n\n    This is not guaranteed to be sorted from bottom to top.\n    \"\"\"\n    return self.get_points()[:, 1]",
                "@property\ndef width(self):\n    \"\"\"The (signed) width of the bounding box.\"\"\"\n    points = self.get_points()\n    return points[1, 0] - points[0, 0]",
                "@property\ndef height(self):\n    \"\"\"The (signed) height of the bounding box.\"\"\"\n    points = self.get_points()\n    return points[1, 1] - points[0, 1]",
                "@property\ndef size(self):\n    \"\"\"The (signed) width and height of the bounding box.\"\"\"\n    points = self.get_points()\n    return points[1] - points[0]",
                "@property\ndef bounds(self):\n    \"\"\"Return (:attr:`x0`, :attr:`y0`, :attr:`width`, :attr:`height`).\"\"\"\n    (x0, y0), (x1, y1) = self.get_points()\n    return (x0, y0, x1 - x0, y1 - y0)",
                "@property\ndef extents(self):\n    \"\"\"Return (:attr:`x0`, :attr:`y0`, :attr:`x1`, :attr:`y1`).\"\"\"\n    return self.get_points().flatten()  # flatten returns a copy.",
                "def get_points(self):\n    raise NotImplementedError",
                "def containsx(self, x):\n    \"\"\"\n    Return whether *x* is in the closed (:attr:`x0`, :attr:`x1`) interval.\n    \"\"\"\n    x0, x1 = self.intervalx\n    return x0 <= x <= x1 or x0 >= x >= x1",
                "def containsy(self, y):\n    \"\"\"\n    Return whether *y* is in the closed (:attr:`y0`, :attr:`y1`) interval.\n    \"\"\"\n    y0, y1 = self.intervaly\n    return y0 <= y <= y1 or y0 >= y >= y1",
                "def contains(self, x, y):\n    \"\"\"\n    Return whether ``(x, y)`` is in the bounding box or on its edge.\n    \"\"\"\n    return self.containsx(x) and self.containsy(y)",
                "def overlaps(self, other):\n    \"\"\"\n    Return whether this bounding box overlaps with the other bounding box.\n\n    Parameters\n    ----------\n    other : `.BboxBase`\n    \"\"\"\n    ax1, ay1, ax2, ay2 = self.extents\n    bx1, by1, bx2, by2 = other.extents\n    if ax2 < ax1:\n        ax2, ax1 = ax1, ax2\n    if ay2 < ay1:\n        ay2, ay1 = ay1, ay2\n    if bx2 < bx1:\n        bx2, bx1 = bx1, bx2\n    if by2 < by1:\n        by2, by1 = by1, by2\n    return ax1 <= bx2 and bx1 <= ax2 and ay1 <= by2 and by1 <= ay2",
                "def fully_containsx(self, x):\n    \"\"\"\n    Return whether *x* is in the open (:attr:`x0`, :attr:`x1`) interval.\n    \"\"\"\n    x0, x1 = self.intervalx\n    return x0 < x < x1 or x0 > x > x1",
                "def fully_containsy(self, y):\n    \"\"\"\n    Return whether *y* is in the open (:attr:`y0`, :attr:`y1`) interval.\n    \"\"\"\n    y0, y1 = self.intervaly\n    return y0 < y < y1 or y0 > y > y1",
                "def fully_contains(self, x, y):\n    \"\"\"\n    Return whether ``x, y`` is in the bounding box, but not on its edge.\n    \"\"\"\n    return self.fully_containsx(x) and self.fully_containsy(y)",
                "def fully_overlaps(self, other):\n    \"\"\"\n    Return whether this bounding box overlaps with the other bounding box,\n    not including the edges.\n\n    Parameters\n    ----------\n    other : `.BboxBase`\n    \"\"\"\n    ax1, ay1, ax2, ay2 = self.extents\n    bx1, by1, bx2, by2 = other.extents\n    if ax2 < ax1:\n        ax2, ax1 = ax1, ax2\n    if ay2 < ay1:\n        ay2, ay1 = ay1, ay2\n    if bx2 < bx1:\n        bx2, bx1 = bx1, bx2\n    if by2 < by1:\n        by2, by1 = by1, by2\n    return ax1 < bx2 and bx1 < ax2 and ay1 < by2 and by1 < ay2",
                "def transformed(self, transform):\n    \"\"\"\n    Construct a `Bbox` by statically transforming this one by *transform*.\n    \"\"\"\n    pts = self.get_points()\n    ll, ul, lr = transform.transform(np.array([pts[0],\n        [pts[0, 0], pts[1, 1]], [pts[1, 0], pts[0, 1]]]))\n    return Bbox([ll, [lr[0], ul[1]]])",
                "def inverse_transformed(self, transform):\n    \"\"\"\n    Construct a `Bbox` by statically transforming this one by the inverse\n    of *transform*.\n    \"\"\"\n    return self.transformed(transform.inverted())",
                "def anchored(self, c, container=None):\n    \"\"\"\n    Return a copy of the `Bbox` shifted to position *c* within *container*.\n\n    Parameters\n    ----------\n    c : (float, float) or str\n        May be either:\n\n        * A sequence (*cx*, *cy*) where *cx* and *cy* range from 0\n          to 1, where 0 is left or bottom and 1 is right or top\n\n        * a string:\n          - 'C' for centered\n          - 'S' for bottom-center\n          - 'SE' for bottom-left\n          - 'E' for left\n          - etc.\n\n    container : Bbox, optional\n        The box within which the :class:`Bbox` is positioned; it defaults\n        to the initial :class:`Bbox`.\n    \"\"\"\n    if container is None:\n        container = self\n    l, b, w, h = container.bounds\n    if isinstance(c, str):\n        cx, cy = self.coefs[c]\n    else:\n        cx, cy = c\n    L, B, W, H = self.bounds\n    return Bbox(self._points +\n                [(l + cx * (w - W)) - L,\n                 (b + cy * (h - H)) - B])",
                "def shrunk(self, mx, my):\n    \"\"\"\n    Return a copy of the :class:`Bbox`, shrunk by the factor *mx*\n    in the *x* direction and the factor *my* in the *y* direction.\n    The lower left corner of the box remains unchanged.  Normally\n    *mx* and *my* will be less than 1, but this is not enforced.\n    \"\"\"\n    w, h = self.size\n    return Bbox([self._points[0],\n                self._points[0] + [mx * w, my * h]])",
                "def shrunk_to_aspect(self, box_aspect, container=None, fig_aspect=1.0):\n    \"\"\"\n    Return a copy of the :class:`Bbox`, shrunk so that it is as\n    large as it can be while having the desired aspect ratio,\n    *box_aspect*.  If the box coordinates are relative (i.e.\n    fractions of a larger box such as a figure) then the\n    physical aspect ratio of that figure is specified with\n    *fig_aspect*, so that *box_aspect* can also be given as a\n    ratio of the absolute dimensions, not the relative dimensions.\n    \"\"\"\n    if box_aspect <= 0 or fig_aspect <= 0:\n        raise ValueError(\"'box_aspect' and 'fig_aspect' must be positive\")\n    if container is None:\n        container = self\n    w, h = container.size\n    H = w * box_aspect / fig_aspect\n    if H <= h:\n        W = w\n    else:\n        W = h * fig_aspect / box_aspect\n        H = h\n    return Bbox([self._points[0],\n                 self._points[0] + (W, H)])",
                "def splitx(self, *args):\n    \"\"\"\n    Return a list of new `Bbox` objects formed by splitting the original\n    one with vertical lines at fractional positions given by *args*.\n    \"\"\"\n    xf = [0, *args, 1]\n    x0, y0, x1, y1 = self.extents\n    w = x1 - x0\n    return [Bbox([[x0 + xf0 * w, y0], [x0 + xf1 * w, y1]])\n            for xf0, xf1 in zip(xf[:-1], xf[1:])]",
                "def splity(self, *args):\n    \"\"\"\n    Return a list of new `Bbox` objects formed by splitting the original\n    one with horizontal lines at fractional positions given by *args*.\n    \"\"\"\n    yf = [0, *args, 1]\n    x0, y0, x1, y1 = self.extents\n    h = y1 - y0\n    return [Bbox([[x0, y0 + yf0 * h], [x1, y0 + yf1 * h]])\n            for yf0, yf1 in zip(yf[:-1], yf[1:])]",
                "def count_contains(self, vertices):\n    \"\"\"\n    Count the number of vertices contained in the :class:`Bbox`.\n    Any vertices with a non-finite x or y value are ignored.\n\n    Parameters\n    ----------\n    vertices : Nx2 Numpy array.\n    \"\"\"\n    if len(vertices) == 0:\n        return 0\n    vertices = np.asarray(vertices)\n    with np.errstate(invalid='ignore'):\n        return (((self.min < vertices) &\n                 (vertices < self.max)).all(axis=1).sum())",
                "def count_overlaps(self, bboxes):\n    \"\"\"\n    Count the number of bounding boxes that overlap this one.\n\n    Parameters\n    ----------\n    bboxes : sequence of `.BboxBase`\n    \"\"\"\n    return count_bboxes_overlapping_bbox(\n        self, np.atleast_3d([np.array(x) for x in bboxes]))",
                "def expanded(self, sw, sh):\n    \"\"\"\n    Construct a `Bbox` by expanding this one around its center by the\n    factors *sw* and *sh*.\n    \"\"\"\n    width = self.width\n    height = self.height\n    deltaw = (sw * width - width) / 2.0\n    deltah = (sh * height - height) / 2.0\n    a = np.array([[-deltaw, -deltah], [deltaw, deltah]])\n    return Bbox(self._points + a)",
                "def padded(self, p):\n    \"\"\"Construct a `Bbox` by padding this one on all four sides by *p*.\"\"\"\n    points = self.get_points()\n    return Bbox(points + [[-p, -p], [p, p]])",
                "def translated(self, tx, ty):\n    \"\"\"Construct a `Bbox` by translating this one by *tx* and *ty*.\"\"\"\n    return Bbox(self._points + (tx, ty))",
                "def corners(self):\n    \"\"\"\n    Return the corners of this rectangle as an array of points.\n\n    Specifically, this returns the array\n    ``[[x0, y0], [x0, y1], [x1, y0], [x1, y1]]``.\n    \"\"\"\n    (x0, y0), (x1, y1) = self.get_points()\n    return np.array([[x0, y0], [x0, y1], [x1, y0], [x1, y1]])",
                "def rotated(self, radians):\n    \"\"\"\n    Return a new bounding box that bounds a rotated version of\n    this bounding box by the given radians.  The new bounding box\n    is still aligned with the axes, of course.\n    \"\"\"\n    corners = self.corners()\n    corners_rotated = Affine2D().rotate(radians).transform(corners)\n    bbox = Bbox.unit()\n    bbox.update_from_data_xy(corners_rotated, ignore=True)\n    return bbox",
                "@staticmethod\ndef union(bboxes):\n    \"\"\"Return a `Bbox` that contains all of the given *bboxes*.\"\"\"\n    if not len(bboxes):\n        raise ValueError(\"'bboxes' cannot be empty\")\n    # needed for 1.14.4 < numpy_version < 1.15\n    # can remove once we are at numpy >= 1.15\n    with np.errstate(invalid='ignore'):\n        x0 = np.min([bbox.xmin for bbox in bboxes])\n        x1 = np.max([bbox.xmax for bbox in bboxes])\n        y0 = np.min([bbox.ymin for bbox in bboxes])\n        y1 = np.max([bbox.ymax for bbox in bboxes])\n    return Bbox([[x0, y0], [x1, y1]])",
                "@staticmethod\ndef intersection(bbox1, bbox2):\n    \"\"\"\n    Return the intersection of *bbox1* and *bbox2* if they intersect, or\n    None if they don't.\n    \"\"\"\n    x0 = np.maximum(bbox1.xmin, bbox2.xmin)\n    x1 = np.minimum(bbox1.xmax, bbox2.xmax)\n    y0 = np.maximum(bbox1.ymin, bbox2.ymin)\n    y1 = np.minimum(bbox1.ymax, bbox2.ymax)\n    return Bbox([[x0, y0], [x1, y1]]) if x0 <= x1 and y0 <= y1 else None",
                "def __init__(self, points, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    points : ndarray\n        A 2x2 numpy array of the form ``[[x0, y0], [x1, y1]]``.\n\n    Notes\n    -----\n    If you need to create a :class:`Bbox` object from another form\n    of data, consider the static methods :meth:`unit`,\n    :meth:`from_bounds` and :meth:`from_extents`.\n    \"\"\"\n    BboxBase.__init__(self, **kwargs)\n    points = np.asarray(points, float)\n    if points.shape != (2, 2):\n        raise ValueError('Bbox points must be of the form '\n                         '\"[[x0, y0], [x1, y1]]\".')\n    self._points = points\n    self._minpos = np.array([np.inf, np.inf])\n    self._ignore = True\n    # it is helpful in some contexts to know if the bbox is a\n    # default or has been mutated; we store the orig points to\n    # support the mutated methods\n    self._points_orig = self._points.copy()",
                "@staticmethod\ndef unit():\n    \"\"\"Create a new unit `Bbox` from (0, 0) to (1, 1).\"\"\"\n    return Bbox([[0, 0], [1, 1]])",
                "@staticmethod\ndef null():\n    \"\"\"Create a new null `Bbox` from (inf, inf) to (-inf, -inf).\"\"\"\n    return Bbox([[np.inf, np.inf], [-np.inf, -np.inf]])",
                "@staticmethod\ndef from_bounds(x0, y0, width, height):\n    \"\"\"\n    Create a new `Bbox` from *x0*, *y0*, *width* and *height*.\n\n    *width* and *height* may be negative.\n    \"\"\"\n    return Bbox.from_extents(x0, y0, x0 + width, y0 + height)",
                "@staticmethod\ndef from_extents(*args):\n    \"\"\"\n    Create a new Bbox from *left*, *bottom*, *right* and *top*.\n\n    The *y*-axis increases upwards.\n    \"\"\"\n    return Bbox(np.reshape(args, (2, 2)))",
                "def __format__(self, fmt):\n    return (\n        'Bbox(x0={0.x0:{1}}, y0={0.y0:{1}}, x1={0.x1:{1}}, y1={0.y1:{1}})'.\n        format(self, fmt))",
                "def __str__(self):\n    return format(self, '')",
                "def __repr__(self):\n    return 'Bbox([[{0.x0}, {0.y0}], [{0.x1}, {0.y1}]])'.format(self)",
                "def ignore(self, value):\n    \"\"\"\n    Set whether the existing bounds of the box should be ignored\n    by subsequent calls to :meth:`update_from_data_xy`.\n\n    value : bool\n       - When ``True``, subsequent calls to :meth:`update_from_data_xy`\n         will ignore the existing bounds of the :class:`Bbox`.\n\n       - When ``False``, subsequent calls to :meth:`update_from_data_xy`\n         will include the existing bounds of the :class:`Bbox`.\n    \"\"\"\n    self._ignore = value",
                "def update_from_path(self, path, ignore=None, updatex=True, updatey=True):\n    \"\"\"\n    Update the bounds of the :class:`Bbox` based on the passed in\n    data.  After updating, the bounds will have positive *width*\n    and *height*; *x0* and *y0* will be the minimal values.\n\n    Parameters\n    ----------\n    path : :class:`~matplotlib.path.Path`\n\n    ignore : bool, optional\n       - when ``True``, ignore the existing bounds of the :class:`Bbox`.\n       - when ``False``, include the existing bounds of the :class:`Bbox`.\n       - when ``None``, use the last value passed to :meth:`ignore`.\n\n    updatex, updatey : bool, optional\n        When ``True``, update the x/y values.\n    \"\"\"\n    if ignore is None:\n        ignore = self._ignore\n\n    if path.vertices.size == 0:\n        return\n\n    points, minpos, changed = update_path_extents(\n        path, None, self._points, self._minpos, ignore)\n\n    if changed:\n        self.invalidate()\n        if updatex:\n            self._points[:, 0] = points[:, 0]\n            self._minpos[0] = minpos[0]\n        if updatey:\n            self._points[:, 1] = points[:, 1]\n            self._minpos[1] = minpos[1]",
                "def update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True):\n    \"\"\"\n    Update the bounds of the :class:`Bbox` based on the passed in\n    data.  After updating, the bounds will have positive *width*\n    and *height*; *x0* and *y0* will be the minimal values.\n\n    Parameters\n    ----------\n    xy : ndarray\n        A numpy array of 2D points.\n\n    ignore : bool, optional\n       - When ``True``, ignore the existing bounds of the :class:`Bbox`.\n       - When ``False``, include the existing bounds of the :class:`Bbox`.\n       - When ``None``, use the last value passed to :meth:`ignore`.\n\n    updatex, updatey : bool, optional\n        When ``True``, update the x/y values.\n    \"\"\"\n    if len(xy) == 0:\n        return\n\n    path = Path(xy)\n    self.update_from_path(path, ignore=ignore,\n                          updatex=updatex, updatey=updatey)",
                "@BboxBase.x0.setter\ndef x0(self, val):\n    self._points[0, 0] = val\n    self.invalidate()",
                "@BboxBase.y0.setter\ndef y0(self, val):\n    self._points[0, 1] = val\n    self.invalidate()",
                "@BboxBase.x1.setter\ndef x1(self, val):\n    self._points[1, 0] = val\n    self.invalidate()",
                "@BboxBase.y1.setter\ndef y1(self, val):\n    self._points[1, 1] = val\n    self.invalidate()",
                "@BboxBase.p0.setter\ndef p0(self, val):\n    self._points[0] = val\n    self.invalidate()",
                "@BboxBase.p1.setter\ndef p1(self, val):\n    self._points[1] = val\n    self.invalidate()",
                "@BboxBase.intervalx.setter\ndef intervalx(self, interval):\n    self._points[:, 0] = interval\n    self.invalidate()",
                "@BboxBase.intervaly.setter\ndef intervaly(self, interval):\n    self._points[:, 1] = interval\n    self.invalidate()",
                "@BboxBase.bounds.setter\ndef bounds(self, bounds):\n    l, b, w, h = bounds\n    points = np.array([[l, b], [l + w, b + h]], float)\n    if np.any(self._points != points):\n        self._points = points\n        self.invalidate()",
                "@property\ndef minpos(self):\n    return self._minpos",
                "@property\ndef minposx(self):\n    return self._minpos[0]",
                "@property\ndef minposy(self):\n    return self._minpos[1]",
                "def get_points(self):\n    \"\"\"\n    Get the points of the bounding box directly as a numpy array\n    of the form: ``[[x0, y0], [x1, y1]]``.\n    \"\"\"\n    self._invalid = 0\n    return self._points",
                "def set_points(self, points):\n    \"\"\"\n    Set the points of the bounding box directly from a numpy array\n    of the form: ``[[x0, y0], [x1, y1]]``.  No error checking is\n    performed, as this method is mainly for internal use.\n    \"\"\"\n    if np.any(self._points != points):\n        self._points = points\n        self.invalidate()",
                "def set(self, other):\n    \"\"\"\n    Set this bounding box from the \"frozen\" bounds of another `Bbox`.\n    \"\"\"\n    if np.any(self._points != other.get_points()):\n        self._points = other.get_points()\n        self.invalidate()",
                "def mutated(self):\n    \"\"\"Return whether the bbox has changed since init.\"\"\"\n    return self.mutatedx() or self.mutatedy()",
                "def mutatedx(self):\n    \"\"\"Return whether the x-limits have changed since init.\"\"\"\n    return (self._points[0, 0] != self._points_orig[0, 0] or\n            self._points[1, 0] != self._points_orig[1, 0])",
                "def mutatedy(self):\n    \"\"\"Return whether the y-limits have changed since init.\"\"\"\n    return (self._points[0, 1] != self._points_orig[0, 1] or\n            self._points[1, 1] != self._points_orig[1, 1])",
                "def __init__(self, bbox, transform, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    bbox : :class:`Bbox`\n\n    transform : :class:`Transform`\n    \"\"\"\n    if not bbox.is_bbox:\n        raise ValueError(\"'bbox' is not a bbox\")\n    cbook._check_isinstance(Transform, transform=transform)\n    if transform.input_dims != 2 or transform.output_dims != 2:\n        raise ValueError(\n            \"The input and output dimensions of 'transform' must be 2\")\n\n    BboxBase.__init__(self, **kwargs)\n    self._bbox = bbox\n    self._transform = transform\n    self.set_children(bbox, transform)\n    self._points = None",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{},\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._bbox),\n                    _indent_str(self._transform)))",
                "def get_points(self):\n    # docstring inherited\n    if self._invalid:\n        p = self._bbox.get_points()\n        # Transform all four points, then make a new bounding box\n        # from the result, taking care to make the orientation the\n        # same.\n        points = self._transform.transform(\n            [[p[0, 0], p[0, 1]],\n             [p[1, 0], p[0, 1]],\n             [p[0, 0], p[1, 1]],\n             [p[1, 0], p[1, 1]]])\n        points = np.ma.filled(points, 0.0)\n\n        xs = min(points[:, 0]), max(points[:, 0])\n        if p[0, 0] > p[1, 0]:\n            xs = xs[::-1]\n\n        ys = min(points[:, 1]), max(points[:, 1])\n        if p[0, 1] > p[1, 1]:\n            ys = ys[::-1]\n\n        self._points = np.array([\n            [xs[0], ys[0]],\n            [xs[1], ys[1]]\n        ])\n\n        self._invalid = 0\n    return self._points",
                "def __init__(self, bbox, x0=None, y0=None, x1=None, y1=None, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    bbox : Bbox\n        The child bounding box to wrap.\n\n    x0 : float or None\n        The locked value for x0, or None to leave unlocked.\n\n    y0 : float or None\n        The locked value for y0, or None to leave unlocked.\n\n    x1 : float or None\n        The locked value for x1, or None to leave unlocked.\n\n    y1 : float or None\n        The locked value for y1, or None to leave unlocked.\n\n    \"\"\"\n    if not bbox.is_bbox:\n        raise ValueError(\"'bbox' is not a bbox\")\n\n    BboxBase.__init__(self, **kwargs)\n    self._bbox = bbox\n    self.set_children(bbox)\n    self._points = None\n    fp = [x0, y0, x1, y1]\n    mask = [val is None for val in fp]\n    self._locked_points = np.ma.array(fp, float, mask=mask).reshape((2, 2))",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{},\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._bbox),\n                    _indent_str(self._locked_points)))",
                "def get_points(self):\n    # docstring inherited\n    if self._invalid:\n        points = self._bbox.get_points()\n        self._points = np.where(self._locked_points.mask,\n                                points,\n                                self._locked_points)\n        self._invalid = 0\n    return self._points",
                "@property\ndef locked_x0(self):\n    \"\"\"\n    float or None: The value used for the locked x0.\n    \"\"\"\n    if self._locked_points.mask[0, 0]:\n        return None\n    else:\n        return self._locked_points[0, 0]",
                "@locked_x0.setter\ndef locked_x0(self, x0):\n    self._locked_points.mask[0, 0] = x0 is None\n    self._locked_points.data[0, 0] = x0\n    self.invalidate()",
                "@property\ndef locked_y0(self):\n    \"\"\"\n    float or None: The value used for the locked y0.\n    \"\"\"\n    if self._locked_points.mask[0, 1]:\n        return None\n    else:\n        return self._locked_points[0, 1]",
                "@locked_y0.setter\ndef locked_y0(self, y0):\n    self._locked_points.mask[0, 1] = y0 is None\n    self._locked_points.data[0, 1] = y0\n    self.invalidate()",
                "@property\ndef locked_x1(self):\n    \"\"\"\n    float or None: The value used for the locked x1.\n    \"\"\"\n    if self._locked_points.mask[1, 0]:\n        return None\n    else:\n        return self._locked_points[1, 0]",
                "@locked_x1.setter\ndef locked_x1(self, x1):\n    self._locked_points.mask[1, 0] = x1 is None\n    self._locked_points.data[1, 0] = x1\n    self.invalidate()",
                "@property\ndef locked_y1(self):\n    \"\"\"\n    float or None: The value used for the locked y1.\n    \"\"\"\n    if self._locked_points.mask[1, 1]:\n        return None\n    else:\n        return self._locked_points[1, 1]",
                "@locked_y1.setter\ndef locked_y1(self, y1):\n    self._locked_points.mask[1, 1] = y1 is None\n    self._locked_points.data[1, 1] = y1\n    self.invalidate()",
                "def __init_subclass__(cls):\n    # 1d transforms are always separable; we assume higher-dimensional ones\n    # are not but subclasses can also directly set is_separable -- this is\n    # verified by checking whether \"is_separable\" appears more than once in\n    # the class's MRO (it appears once in Transform).\n    if (sum(\"is_separable\" in vars(parent) for parent in cls.__mro__) == 1\n            and cls.input_dims == cls.output_dims == 1):\n        cls.is_separable = True\n    # Transform.inverted raises NotImplementedError; we assume that if this\n    # is overridden then the transform is invertible but subclass can also\n    # directly set has_inverse.\n    if (sum(\"has_inverse\" in vars(parent) for parent in cls.__mro__) == 1\n            and hasattr(cls, \"inverted\")\n            and cls.inverted is not Transform.inverted):\n        cls.has_inverse = True",
                "def __add__(self, other):\n    \"\"\"\n    Compose two transforms together so that *self* is followed by *other*.\n    \"\"\"\n    return (composite_transform_factory(self, other)\n            if isinstance(other, Transform) else\n            NotImplemented)",
                "def _iter_break_from_left_to_right(self):\n    \"\"\"\n    Returns an iterator breaking down this transform stack from left to\n    right recursively. If self == ((A, N), A) then the result will be an\n    iterator which yields I : ((A, N), A), followed by A : (N, A),\n    followed by (A, N) : (A), but not ((A, N), A) : I.\n\n    This is equivalent to flattening the stack then yielding\n    ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).\n\n    \"\"\"\n    yield IdentityTransform(), self",
                "@property\ndef depth(self):\n    \"\"\"\n    Returns the number of transforms which have been chained\n    together to form this Transform instance.\n\n    .. note::\n\n        For the special case of a Composite transform, the maximum depth\n        of the two is returned.\n\n    \"\"\"\n    return 1",
                "def contains_branch(self, other):\n    \"\"\"\n    Return whether the given transform is a sub-tree of this transform.\n\n    This routine uses transform equality to identify sub-trees, therefore\n    in many situations it is object id which will be used.\n\n    For the case where the given transform represents the whole\n    of this transform, returns True.\n\n    \"\"\"\n    if self.depth < other.depth:\n        return False\n\n    # check that a subtree is equal to other (starting from self)\n    for _, sub_tree in self._iter_break_from_left_to_right():\n        if sub_tree == other:\n            return True\n    return False",
                "def contains_branch_seperately(self, other_transform):\n    \"\"\"\n    Returns whether the given branch is a sub-tree of this transform on\n    each separate dimension.\n\n    A common use for this method is to identify if a transform is a blended\n    transform containing an axes' data transform. e.g.::\n\n        x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)\n\n    \"\"\"\n    if self.output_dims != 2:\n        raise ValueError('contains_branch_seperately only supports '\n                         'transforms with 2 output dimensions')\n    # for a non-blended transform each separate dimension is the same, so\n    # just return the appropriate shape.\n    return [self.contains_branch(other_transform)] * 2",
                "def __sub__(self, other):\n    \"\"\"\n    Returns a transform stack which goes all the way down self's transform\n    stack, and then ascends back up other's stack. If it can, this is\n    optimised::\n\n        # normally\n        A - B == a + b.inverted()\n\n        # sometimes, when A contains the tree B there is no need to\n        # descend all the way down to the base of A (via B), instead we\n        # can just stop at B.\n\n        (A + B) - (B)^-1 == A\n\n        # similarly, when B contains tree A, we can avoid descending A at\n        # all, basically:\n        A - (A + B) == ((B + A) - A).inverted() or B^-1\n\n    For clarity, the result of ``(A + B) - B + B == (A + B)``.\n\n    \"\"\"\n    # we only know how to do this operation if other is a Transform.\n    if not isinstance(other, Transform):\n        return NotImplemented\n\n    for remainder, sub_tree in self._iter_break_from_left_to_right():\n        if sub_tree == other:\n            return remainder\n\n    for remainder, sub_tree in other._iter_break_from_left_to_right():\n        if sub_tree == self:\n            if not remainder.has_inverse:\n                raise ValueError(\n                    \"The shortcut cannot be computed since 'other' \"\n                    \"includes a non-invertible component\")\n            return remainder.inverted()\n\n    # if we have got this far, then there was no shortcut possible\n    if other.has_inverse:\n        return self + other.inverted()\n    else:\n        raise ValueError('It is not possible to compute transA - transB '\n                         'since transB cannot be inverted and there is no '\n                         'shortcut possible.')",
                "def __array__(self, *args, **kwargs):\n    \"\"\"\n    Array interface to get at this Transform's affine matrix.\n    \"\"\"\n    return self.get_affine().get_matrix()",
                "def transform(self, values):\n    \"\"\"\n    Performs the transformation on the given array of values.\n\n    Accepts a numpy array of shape (N x :attr:`input_dims`) and\n    returns a numpy array of shape (N x :attr:`output_dims`).\n\n    Alternatively, accepts a numpy array of length :attr:`input_dims`\n    and returns a numpy array of length :attr:`output_dims`.\n    \"\"\"\n    # Ensure that values is a 2d array (but remember whether\n    # we started with a 1d or 2d array).\n    values = np.asanyarray(values)\n    ndim = values.ndim\n    values = values.reshape((-1, self.input_dims))\n\n    # Transform the values\n    res = self.transform_affine(self.transform_non_affine(values))\n\n    # Convert the result back to the shape of the input values.\n    if ndim == 0:\n        assert not np.ma.is_masked(res)  # just to be on the safe side\n        return res[0, 0]\n    if ndim == 1:\n        return res.reshape(-1)\n    elif ndim == 2:\n        return res\n    raise ValueError(\n        \"Input values must have shape (N x {dims}) \"\n        \"or ({dims}).\".format(dims=self.input_dims))",
                "def transform_affine(self, values):\n    \"\"\"\n    Performs only the affine part of this transformation on the\n    given array of values.\n\n    ``transform(values)`` is always equivalent to\n    ``transform_affine(transform_non_affine(values))``.\n\n    In non-affine transformations, this is generally a no-op.  In\n    affine transformations, this is equivalent to\n    ``transform(values)``.\n\n    Parameters\n    ----------\n    values : array\n        The input values as NumPy array of length :attr:`input_dims` or\n        shape (N x :attr:`input_dims`).\n\n    Returns\n    -------\n    values : array\n        The output values as NumPy array of length :attr:`input_dims` or\n        shape (N x :attr:`output_dims`), depending on the input.\n    \"\"\"\n    return self.get_affine().transform(values)",
                "def transform_non_affine(self, values):\n    \"\"\"\n    Performs only the non-affine part of the transformation.\n\n    ``transform(values)`` is always equivalent to\n    ``transform_affine(transform_non_affine(values))``.\n\n    In non-affine transformations, this is generally equivalent to\n    ``transform(values)``.  In affine transformations, this is\n    always a no-op.\n\n    Parameters\n    ----------\n    values : array\n        The input values as NumPy array of length :attr:`input_dims` or\n        shape (N x :attr:`input_dims`).\n\n    Returns\n    -------\n    values : array\n        The output values as NumPy array of length :attr:`input_dims` or\n        shape (N x :attr:`output_dims`), depending on the input.\n    \"\"\"\n    return values",
                "def transform_bbox(self, bbox):\n    \"\"\"\n    Transform the given bounding box.\n\n    Note, for smarter transforms including caching (a common\n    requirement for matplotlib figures), see :class:`TransformedBbox`.\n    \"\"\"\n    return Bbox(self.transform(bbox.get_points()))",
                "def get_affine(self):\n    \"\"\"\n    Get the affine part of this transform.\n    \"\"\"\n    return IdentityTransform()",
                "def get_matrix(self):\n    \"\"\"\n    Get the Affine transformation array for the affine part\n    of this transform.\n\n    \"\"\"\n    return self.get_affine().get_matrix()",
                "def transform_point(self, point):\n    \"\"\"\n    Return a transformed point.\n\n    This function is only kept for backcompatibility; the more general\n    `.transform` method is capable of transforming both a list of points\n    and a single point.\n\n    The point is given as a sequence of length :attr:`input_dims`.\n    The transformed point is returned as a sequence of length\n    :attr:`output_dims`.\n    \"\"\"\n    if len(point) != self.input_dims:\n        raise ValueError(\"The length of 'point' must be 'self.input_dims'\")\n    return self.transform(point)",
                "def transform_path(self, path):\n    \"\"\"\n    Returns a transformed path.\n\n    *path*: a :class:`~matplotlib.path.Path` instance.\n\n    In some cases, this transform may insert curves into the path\n    that began as line segments.\n    \"\"\"\n    return self.transform_path_affine(self.transform_path_non_affine(path))",
                "def transform_path_affine(self, path):\n    \"\"\"\n    Returns a path, transformed only by the affine part of\n    this transform.\n\n    *path*: a :class:`~matplotlib.path.Path` instance.\n\n    ``transform_path(path)`` is equivalent to\n    ``transform_path_affine(transform_path_non_affine(values))``.\n    \"\"\"\n    return self.get_affine().transform_path_affine(path)",
                "def transform_path_non_affine(self, path):\n    \"\"\"\n    Returns a path, transformed only by the non-affine\n    part of this transform.\n\n    *path*: a :class:`~matplotlib.path.Path` instance.\n\n    ``transform_path(path)`` is equivalent to\n    ``transform_path_affine(transform_path_non_affine(values))``.\n    \"\"\"\n    x = self.transform_non_affine(path.vertices)\n    return Path._fast_from_codes_and_verts(x, path.codes, path)",
                "def transform_angles(self, angles, pts, radians=False, pushoff=1e-5):\n    \"\"\"\n    Transforms a set of angles anchored at specific locations.\n\n    Parameters\n    ----------\n    angles : (N,) array-like\n        The angles to transform.\n    pts : (N, 2) array-like\n        The points where the angles are anchored.\n    radians : bool, default: False\n        Whether *angles* are radians or degrees.\n    pushoff : float\n        For each point in *pts* and angle in *angles*, the transformed\n        angle is computed by transforming a segment of length *pushoff*\n        starting at that point and making that angle relative to the\n        horizontal axis, and measuring the angle between the horizontal\n        axis and the transformed segment.\n\n    Returns\n    -------\n    transformed_angles : (N,) array\n    \"\"\"\n    # Must be 2D\n    if self.input_dims != 2 or self.output_dims != 2:\n        raise NotImplementedError('Only defined in 2D')\n    angles = np.asarray(angles)\n    pts = np.asarray(pts)\n    if angles.ndim != 1 or angles.shape[0] != pts.shape[0]:\n        raise ValueError(\"'angles' must be a column vector and have same \"\n                         \"number of rows as 'pts'\")\n    if pts.shape[1] != 2:\n        raise ValueError(\"'pts' must be array with 2 columns for x, y\")\n    # Convert to radians if desired\n    if not radians:\n        angles = np.deg2rad(angles)\n    # Move a short distance away\n    pts2 = pts + pushoff * np.column_stack([np.cos(angles),\n                                            np.sin(angles)])\n    # Transform both sets of points\n    tpts = self.transform(pts)\n    tpts2 = self.transform(pts2)\n    # Calculate transformed angles\n    d = tpts2 - tpts\n    a = np.arctan2(d[:, 1], d[:, 0])\n    # Convert back to degrees if desired\n    if not radians:\n        a = np.rad2deg(a)\n    return a",
                "def inverted(self):\n    \"\"\"\n    Return the corresponding inverse transformation.\n\n    It holds ``x == self.inverted().transform(self.transform(x))``.\n\n    The return value of this method should be treated as\n    temporary.  An update to *self* does not cause a corresponding\n    update to its inverted copy.\n    \"\"\"\n    raise NotImplementedError()",
                "def __init__(self, child):\n    \"\"\"\n    *child*: A class:`Transform` instance.  This child may later\n    be replaced with :meth:`set`.\n    \"\"\"\n    cbook._check_isinstance(Transform, child=child)\n    self._init(child)\n    self.set_children(child)",
                "def _init(self, child):\n    Transform.__init__(self)\n    self.input_dims = child.input_dims\n    self.output_dims = child.output_dims\n    self._set(child)\n    self._invalid = 0",
                "def __eq__(self, other):\n    return self._child.__eq__(other)",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._child)))",
                "def frozen(self):\n    # docstring inherited\n    return self._child.frozen()",
                "def _set(self, child):\n    self._child = child\n\n    self.transform = child.transform\n    self.transform_affine = child.transform_affine\n    self.transform_non_affine = child.transform_non_affine\n    self.transform_path = child.transform_path\n    self.transform_path_affine = child.transform_path_affine\n    self.transform_path_non_affine = child.transform_path_non_affine\n    self.get_affine = child.get_affine\n    self.inverted = child.inverted\n    self.get_matrix = child.get_matrix",
                "def set(self, child):\n    \"\"\"\n    Replace the current child of this transform with another one.\n\n    The new child must have the same number of input and output\n    dimensions as the current child.\n    \"\"\"\n    if (child.input_dims != self.input_dims or\n            child.output_dims != self.output_dims):\n        raise ValueError(\n            \"The new child must have the same number of input and output \"\n            \"dimensions as the current child\")\n\n    self.set_children(child)\n    self._set(child)\n\n    self._invalid = 0\n    self.invalidate()\n    self._invalid = 0",
                "def __init__(self, *args, **kwargs):\n    Transform.__init__(self, *args, **kwargs)\n    self._inverted = None",
                "def __array__(self, *args, **kwargs):\n    # optimises the access of the transform matrix vs. the superclass\n    return self.get_matrix()",
                "def __eq__(self, other):\n    if getattr(other, \"is_affine\", False):\n        return np.all(self.get_matrix() == other.get_matrix())\n    return NotImplemented",
                "def transform(self, values):\n    # docstring inherited\n    return self.transform_affine(values)",
                "def transform_affine(self, values):\n    # docstring inherited\n    raise NotImplementedError('Affine subclasses should override this '\n                              'method.')",
                "def transform_non_affine(self, points):\n    # docstring inherited\n    return points",
                "def transform_path(self, path):\n    # docstring inherited\n    return self.transform_path_affine(path)",
                "def transform_path_affine(self, path):\n    # docstring inherited\n    return Path(self.transform_affine(path.vertices),\n                path.codes, path._interpolation_steps)",
                "def transform_path_non_affine(self, path):\n    # docstring inherited\n    return path",
                "def get_affine(self):\n    # docstring inherited\n    return self",
                "def frozen(self):\n    # docstring inherited\n    return Affine2D(self.get_matrix().copy())",
                "@property\ndef is_separable(self):\n    mtx = self.get_matrix()\n    return mtx[0, 1] == mtx[1, 0] == 0.0",
                "def to_values(self):\n    \"\"\"\n    Return the values of the matrix as an ``(a, b, c, d, e, f)`` tuple.\n    \"\"\"\n    mtx = self.get_matrix()\n    return tuple(mtx[:2].swapaxes(0, 1).flat)",
                "@staticmethod\n@cbook.deprecated(\n    \"3.2\", alternative=\"Affine2D.from_values(...).get_matrix()\")\ndef matrix_from_values(a, b, c, d, e, f):\n    \"\"\"\n    Create a new transformation matrix as a 3x3 numpy array of the form::\n\n      a c e\n      b d f\n      0 0 1\n    \"\"\"\n    return np.array([[a, c, e], [b, d, f], [0.0, 0.0, 1.0]], float)",
                "def transform_affine(self, points):\n    mtx = self.get_matrix()\n    if isinstance(points, np.ma.MaskedArray):\n        tpoints = affine_transform(points.data, mtx)\n        return np.ma.MaskedArray(tpoints, mask=np.ma.getmask(points))\n    return affine_transform(points, mtx)",
                "def inverted(self):\n    # docstring inherited\n    if self._inverted is None or self._invalid:\n        mtx = self.get_matrix()\n        shorthand_name = None\n        if self._shorthand_name:\n            shorthand_name = '(%s)-1' % self._shorthand_name\n        self._inverted = Affine2D(inv(mtx), shorthand_name=shorthand_name)\n        self._invalid = 0\n    return self._inverted",
                "def __init__(self, matrix=None, **kwargs):\n    \"\"\"\n    Initialize an Affine transform from a 3x3 numpy float array::\n\n      a c e\n      b d f\n      0 0 1\n\n    If *matrix* is None, initialize with the identity transform.\n    \"\"\"\n    Affine2DBase.__init__(self, **kwargs)\n    if matrix is None:\n        # A bit faster than np.identity(3).\n        matrix = IdentityTransform._mtx.copy()\n    self._mtx = matrix\n    self._invalid = 0",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._mtx)))",
                "@staticmethod\ndef from_values(a, b, c, d, e, f):\n    \"\"\"\n    Create a new Affine2D instance from the given values::\n\n      a c e\n      b d f\n      0 0 1\n\n    .\n    \"\"\"\n    return Affine2D(\n        np.array([a, c, e, b, d, f, 0.0, 0.0, 1.0], float).reshape((3, 3)))",
                "def get_matrix(self):\n    \"\"\"\n    Get the underlying transformation matrix as a 3x3 numpy array::\n\n      a c e\n      b d f\n      0 0 1\n\n    .\n    \"\"\"\n    if self._invalid:\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def set_matrix(self, mtx):\n    \"\"\"\n    Set the underlying transformation matrix from a 3x3 numpy array::\n\n      a c e\n      b d f\n      0 0 1\n\n    .\n    \"\"\"\n    self._mtx = mtx\n    self.invalidate()",
                "def set(self, other):\n    \"\"\"\n    Set this transformation from the frozen copy of another\n    :class:`Affine2DBase` object.\n    \"\"\"\n    cbook._check_isinstance(Affine2DBase, other=other)\n    self._mtx = other.get_matrix()\n    self.invalidate()",
                "@staticmethod\ndef identity():\n    \"\"\"\n    Return a new `Affine2D` object that is the identity transform.\n\n    Unless this transform will be mutated later on, consider using\n    the faster :class:`IdentityTransform` class instead.\n    \"\"\"\n    return Affine2D()",
                "def clear(self):\n    \"\"\"\n    Reset the underlying matrix to the identity transform.\n    \"\"\"\n    # A bit faster than np.identity(3).\n    self._mtx = IdentityTransform._mtx.copy()\n    self.invalidate()\n    return self",
                "def rotate(self, theta):\n    \"\"\"\n    Add a rotation (in radians) to this transform in place.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    a = np.cos(theta)\n    b = np.sin(theta)\n    rotate_mtx = np.array([[a, -b, 0.0], [b, a, 0.0], [0.0, 0.0, 1.0]],\n                          float)\n    self._mtx = np.dot(rotate_mtx, self._mtx)\n    self.invalidate()\n    return self",
                "def rotate_deg(self, degrees):\n    \"\"\"\n    Add a rotation (in degrees) to this transform in place.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    return self.rotate(np.deg2rad(degrees))",
                "def rotate_around(self, x, y, theta):\n    \"\"\"\n    Add a rotation (in radians) around the point (x, y) in place.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    return self.translate(-x, -y).rotate(theta).translate(x, y)",
                "def rotate_deg_around(self, x, y, degrees):\n    \"\"\"\n    Add a rotation (in degrees) around the point (x, y) in place.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    # Cast to float to avoid wraparound issues with uint8's\n    x, y = float(x), float(y)\n    return self.translate(-x, -y).rotate_deg(degrees).translate(x, y)",
                "def translate(self, tx, ty):\n    \"\"\"\n    Adds a translation in place.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    translate_mtx = np.array(\n        [[1.0, 0.0, tx], [0.0, 1.0, ty], [0.0, 0.0, 1.0]], float)\n    self._mtx = np.dot(translate_mtx, self._mtx)\n    self.invalidate()\n    return self",
                "def scale(self, sx, sy=None):\n    \"\"\"\n    Adds a scale in place.\n\n    If *sy* is None, the same scale is applied in both the *x*- and\n    *y*-directions.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    if sy is None:\n        sy = sx\n    scale_mtx = np.array(\n        [[sx, 0.0, 0.0], [0.0, sy, 0.0], [0.0, 0.0, 1.0]], float)\n    self._mtx = np.dot(scale_mtx, self._mtx)\n    self.invalidate()\n    return self",
                "def skew(self, xShear, yShear):\n    \"\"\"\n    Adds a skew in place.\n\n    *xShear* and *yShear* are the shear angles along the *x*- and\n    *y*-axes, respectively, in radians.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    rotX = np.tan(xShear)\n    rotY = np.tan(yShear)\n    skew_mtx = np.array(\n        [[1.0, rotX, 0.0], [rotY, 1.0, 0.0], [0.0, 0.0, 1.0]], float)\n    self._mtx = np.dot(skew_mtx, self._mtx)\n    self.invalidate()\n    return self",
                "def skew_deg(self, xShear, yShear):\n    \"\"\"\n    Adds a skew in place.\n\n    *xShear* and *yShear* are the shear angles along the *x*- and\n    *y*-axes, respectively, in degrees.\n\n    Returns *self*, so this method can easily be chained with more\n    calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n    and :meth:`scale`.\n    \"\"\"\n    return self.skew(np.deg2rad(xShear), np.deg2rad(yShear))",
                "def frozen(self):\n    # docstring inherited\n    return self",
                "def __str__(self):\n    return (\"{}()\"\n            .format(type(self).__name__))",
                "def get_matrix(self):\n    # docstring inherited\n    return self._mtx",
                "def transform(self, points):\n    # docstring inherited\n    return np.asanyarray(points)",
                "def transform_affine(self, points):\n    # docstring inherited\n    return np.asanyarray(points)",
                "def transform_non_affine(self, points):\n    # docstring inherited\n    return np.asanyarray(points)",
                "def transform_path(self, path):\n    # docstring inherited\n    return path",
                "def transform_path_affine(self, path):\n    # docstring inherited\n    return path",
                "def transform_path_non_affine(self, path):\n    # docstring inherited\n    return path",
                "def get_affine(self):\n    # docstring inherited\n    return self",
                "def inverted(self):\n    # docstring inherited\n    return self",
                "def __eq__(self, other):\n    if isinstance(other, (BlendedAffine2D, BlendedGenericTransform)):\n        return (self._x == other._x) and (self._y == other._y)\n    elif self._x == self._y:\n        return self._x == other\n    else:\n        return NotImplemented",
                "def contains_branch_seperately(self, transform):\n    return (self._x.contains_branch(transform),\n            self._y.contains_branch(transform))",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{},\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._x),\n                    _indent_str(self._y)))",
                "def __init__(self, x_transform, y_transform, **kwargs):\n    \"\"\"\n    Create a new \"blended\" transform using *x_transform* to transform the\n    *x*-axis and *y_transform* to transform the *y*-axis.\n\n    You will generally not call this constructor directly but use the\n    `blended_transform_factory` function instead, which can determine\n    automatically which kind of blended transform to create.\n    \"\"\"\n    Transform.__init__(self, **kwargs)\n    self._x = x_transform\n    self._y = y_transform\n    self.set_children(x_transform, y_transform)\n    self._affine = None",
                "@property\ndef depth(self):\n    return max(self._x.depth, self._y.depth)",
                "def contains_branch(self, other):\n    # A blended transform cannot possibly contain a branch from two\n    # different transforms.\n    return False",
                "def frozen(self):\n    # docstring inherited\n    return blended_transform_factory(self._x.frozen(), self._y.frozen())",
                "def transform_non_affine(self, points):\n    # docstring inherited\n    if self._x.is_affine and self._y.is_affine:\n        return points\n    x = self._x\n    y = self._y\n\n    if x == y and x.input_dims == 2:\n        return x.transform_non_affine(points)\n\n    if x.input_dims == 2:\n        x_points = x.transform_non_affine(points)[:, 0:1]\n    else:\n        x_points = x.transform_non_affine(points[:, 0])\n        x_points = x_points.reshape((len(x_points), 1))\n\n    if y.input_dims == 2:\n        y_points = y.transform_non_affine(points)[:, 1:]\n    else:\n        y_points = y.transform_non_affine(points[:, 1])\n        y_points = y_points.reshape((len(y_points), 1))\n\n    if (isinstance(x_points, np.ma.MaskedArray) or\n            isinstance(y_points, np.ma.MaskedArray)):\n        return np.ma.concatenate((x_points, y_points), 1)\n    else:\n        return np.concatenate((x_points, y_points), 1)",
                "def inverted(self):\n    # docstring inherited\n    return BlendedGenericTransform(self._x.inverted(), self._y.inverted())",
                "def get_affine(self):\n    # docstring inherited\n    if self._invalid or self._affine is None:\n        if self._x == self._y:\n            self._affine = self._x.get_affine()\n        else:\n            x_mtx = self._x.get_affine().get_matrix()\n            y_mtx = self._y.get_affine().get_matrix()\n            # This works because we already know the transforms are\n            # separable, though normally one would want to set b and\n            # c to zero.\n            mtx = np.vstack((x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]))\n            self._affine = Affine2D(mtx)\n        self._invalid = 0\n    return self._affine",
                "def __init__(self, x_transform, y_transform, **kwargs):\n    \"\"\"\n    Create a new \"blended\" transform using *x_transform* to transform the\n    *x*-axis and *y_transform* to transform the *y*-axis.\n\n    Both *x_transform* and *y_transform* must be 2D affine transforms.\n\n    You will generally not call this constructor directly but use the\n    `blended_transform_factory` function instead, which can determine\n    automatically which kind of blended transform to create.\n    \"\"\"\n    is_affine = x_transform.is_affine and y_transform.is_affine\n    is_separable = x_transform.is_separable and y_transform.is_separable\n    is_correct = is_affine and is_separable\n    if not is_correct:\n        raise ValueError(\"Both *x_transform* and *y_transform* must be 2D \"\n                         \"affine transforms\")\n\n    Transform.__init__(self, **kwargs)\n    self._x = x_transform\n    self._y = y_transform\n    self.set_children(x_transform, y_transform)\n\n    Affine2DBase.__init__(self)\n    self._mtx = None",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        if self._x == self._y:\n            self._mtx = self._x.get_matrix()\n        else:\n            x_mtx = self._x.get_matrix()\n            y_mtx = self._y.get_matrix()\n            # This works because we already know the transforms are\n            # separable, though normally one would want to set b and\n            # c to zero.\n            self._mtx = np.vstack((x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]))\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def __init__(self, a, b, **kwargs):\n    \"\"\"\n    Create a new composite transform that is the result of\n    applying transform *a* then transform *b*.\n\n    You will generally not call this constructor directly but write ``a +\n    b`` instead, which will automatically choose the best kind of composite\n    transform instance to create.\n    \"\"\"\n    if a.output_dims != b.input_dims:\n        raise ValueError(\"The output dimension of 'a' must be equal to \"\n                         \"the input dimensions of 'b'\")\n    self.input_dims = a.input_dims\n    self.output_dims = b.output_dims\n\n    Transform.__init__(self, **kwargs)\n    self._a = a\n    self._b = b\n    self.set_children(a, b)",
                "def frozen(self):\n    # docstring inherited\n    self._invalid = 0\n    frozen = composite_transform_factory(\n        self._a.frozen(), self._b.frozen())\n    if not isinstance(frozen, CompositeGenericTransform):\n        return frozen.frozen()\n    return frozen",
                "def _invalidate_internal(self, value, invalidating_node):\n    # In some cases for a composite transform, an invalidating call to\n    # AFFINE_ONLY needs to be extended to invalidate the NON_AFFINE part\n    # too. These cases are when the right hand transform is non-affine and\n    # either:\n    # (a) the left hand transform is non affine\n    # (b) it is the left hand node which has triggered the invalidation\n    if value == Transform.INVALID_AFFINE \\\n        and not self._b.is_affine \\\n        and (not self._a.is_affine or invalidating_node is self._a):\n\n        value = Transform.INVALID\n\n    Transform._invalidate_internal(self, value=value,\n                                   invalidating_node=invalidating_node)",
                "def __eq__(self, other):\n    if isinstance(other, (CompositeGenericTransform, CompositeAffine2D)):\n        return self is other or (self._a == other._a\n                                 and self._b == other._b)\n    else:\n        return False",
                "def _iter_break_from_left_to_right(self):\n    for left, right in self._a._iter_break_from_left_to_right():\n        yield left, right + self._b\n    for left, right in self._b._iter_break_from_left_to_right():\n        yield self._a + left, right",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{},\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._a),\n                    _indent_str(self._b)))",
                "def transform_affine(self, points):\n    # docstring inherited\n    return self.get_affine().transform(points)",
                "def transform_non_affine(self, points):\n    # docstring inherited\n    if self._a.is_affine and self._b.is_affine:\n        return points\n    elif not self._a.is_affine and self._b.is_affine:\n        return self._a.transform_non_affine(points)\n    else:\n        return self._b.transform_non_affine(\n                            self._a.transform(points))",
                "def transform_path_non_affine(self, path):\n    # docstring inherited\n    if self._a.is_affine and self._b.is_affine:\n        return path\n    elif not self._a.is_affine and self._b.is_affine:\n        return self._a.transform_path_non_affine(path)\n    else:\n        return self._b.transform_path_non_affine(\n                                self._a.transform_path(path))",
                "def get_affine(self):\n    # docstring inherited\n    if not self._b.is_affine:\n        return self._b.get_affine()\n    else:\n        return Affine2D(np.dot(self._b.get_affine().get_matrix(),\n                            self._a.get_affine().get_matrix()))",
                "def inverted(self):\n    # docstring inherited\n    return CompositeGenericTransform(\n        self._b.inverted(), self._a.inverted())",
                "def __init__(self, a, b, **kwargs):\n    \"\"\"\n    Create a new composite transform that is the result of\n    applying `Affine2DBase` *a* then `Affine2DBase` *b*.\n\n    You will generally not call this constructor directly but write ``a +\n    b`` instead, which will automatically choose the best kind of composite\n    transform instance to create.\n    \"\"\"\n    if not a.is_affine or not b.is_affine:\n        raise ValueError(\"'a' and 'b' must be affine transforms\")\n    if a.output_dims != b.input_dims:\n        raise ValueError(\"The output dimension of 'a' must be equal to \"\n                         \"the input dimensions of 'b'\")\n    self.input_dims = a.input_dims\n    self.output_dims = b.output_dims\n\n    Affine2DBase.__init__(self, **kwargs)\n    self._a = a\n    self._b = b\n    self.set_children(a, b)\n    self._mtx = None",
                "@property\ndef depth(self):\n    return self._a.depth + self._b.depth",
                "def _iter_break_from_left_to_right(self):\n    for left, right in self._a._iter_break_from_left_to_right():\n        yield left, right + self._b\n    for left, right in self._b._iter_break_from_left_to_right():\n        yield self._a + left, right",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{},\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._a),\n                    _indent_str(self._b)))",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        self._mtx = np.dot(\n            self._b.get_matrix(),\n            self._a.get_matrix())\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def __init__(self, boxin, boxout, **kwargs):\n    \"\"\"\n    Create a new :class:`BboxTransform` that linearly transforms\n    points from *boxin* to *boxout*.\n    \"\"\"\n    if not boxin.is_bbox or not boxout.is_bbox:\n        raise ValueError(\"'boxin' and 'boxout' must be bbox\")\n\n    Affine2DBase.__init__(self, **kwargs)\n    self._boxin = boxin\n    self._boxout = boxout\n    self.set_children(boxin, boxout)\n    self._mtx = None\n    self._inverted = None",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{},\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._boxin),\n                    _indent_str(self._boxout)))",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        inl, inb, inw, inh = self._boxin.bounds\n        outl, outb, outw, outh = self._boxout.bounds\n        x_scale = outw / inw\n        y_scale = outh / inh\n        if DEBUG and (x_scale == 0 or y_scale == 0):\n            raise ValueError(\n                \"Transforming from or to a singular bounding box\")\n        self._mtx = np.array([[x_scale, 0.0    , (-inl*x_scale+outl)],\n                              [0.0    , y_scale, (-inb*y_scale+outb)],\n                              [0.0    , 0.0    , 1.0        ]],\n                             float)\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def __init__(self, boxout, **kwargs):\n    \"\"\"\n    Create a new :class:`BboxTransformTo` that linearly transforms\n    points from the unit bounding box to *boxout*.\n    \"\"\"\n    if not boxout.is_bbox:\n        raise ValueError(\"'boxout' must be bbox\")\n\n    Affine2DBase.__init__(self, **kwargs)\n    self._boxout = boxout\n    self.set_children(boxout)\n    self._mtx = None\n    self._inverted = None",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._boxout)))",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        outl, outb, outw, outh = self._boxout.bounds\n        if DEBUG and (outw == 0 or outh == 0):\n            raise ValueError(\"Transforming to a singular bounding box.\")\n        self._mtx = np.array([[outw,  0.0, outl],\n                              [ 0.0, outh, outb],\n                              [ 0.0,  0.0,  1.0]],\n                              float)\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        xmax, ymax = self._boxout.max\n        if DEBUG and (xmax == 0 or ymax == 0):\n            raise ValueError(\"Transforming to a singular bounding box.\")\n        self._mtx = np.array([[xmax,  0.0, 0.0],\n                              [ 0.0, ymax, 0.0],\n                              [ 0.0,  0.0, 1.0]],\n                             float)\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def __init__(self, boxin, **kwargs):\n    if not boxin.is_bbox:\n        raise ValueError(\"'boxin' must be bbox\")\n\n    Affine2DBase.__init__(self, **kwargs)\n    self._boxin = boxin\n    self.set_children(boxin)\n    self._mtx = None\n    self._inverted = None",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._boxin)))",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        inl, inb, inw, inh = self._boxin.bounds\n        if DEBUG and (inw == 0 or inh == 0):\n            raise ValueError(\"Transforming from a singular bounding box.\")\n        x_scale = 1.0 / inw\n        y_scale = 1.0 / inh\n        self._mtx = np.array([[x_scale, 0.0    , (-inl*x_scale)],\n                              [0.0    , y_scale, (-inb*y_scale)],\n                              [0.0    , 0.0    , 1.0        ]],\n                             float)\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def __init__(self, xt, yt, scale_trans, **kwargs):\n    Affine2DBase.__init__(self, **kwargs)\n    self._t = (xt, yt)\n    self._scale_trans = scale_trans\n    self.set_children(scale_trans)\n    self._mtx = None\n    self._inverted = None",
                "def __str__(self):\n    return (\"{}(\\n\"\n                \"{})\"\n            .format(type(self).__name__,\n                    _indent_str(self._t)))",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        # A bit faster than np.identity(3).\n        self._mtx = IdentityTransform._mtx.copy()\n        self._mtx[:2, 2] = self._scale_trans.transform(self._t)\n        self._invalid = 0\n        self._inverted = None\n    return self._mtx",
                "def __init__(self, path, transform):\n    \"\"\"\n    Parameters\n    ----------\n    path : `~.path.Path`\n    transform : `Transform`\n    \"\"\"\n    cbook._check_isinstance(Transform, transform=transform)\n    TransformNode.__init__(self)\n    self._path = path\n    self._transform = transform\n    self.set_children(transform)\n    self._transformed_path = None\n    self._transformed_points = None",
                "def _revalidate(self):\n    # only recompute if the invalidation includes the non_affine part of\n    # the transform\n    if (self._invalid & self.INVALID_NON_AFFINE == self.INVALID_NON_AFFINE\n        or self._transformed_path is None):\n        self._transformed_path = \\\n            self._transform.transform_path_non_affine(self._path)\n        self._transformed_points = \\\n            Path._fast_from_codes_and_verts(\n                self._transform.transform_non_affine(self._path.vertices),\n                None, self._path)\n    self._invalid = 0",
                "def get_transformed_points_and_affine(self):\n    \"\"\"\n    Return a copy of the child path, with the non-affine part of\n    the transform already applied, along with the affine part of\n    the path necessary to complete the transformation.  Unlike\n    :meth:`get_transformed_path_and_affine`, no interpolation will\n    be performed.\n    \"\"\"\n    self._revalidate()\n    return self._transformed_points, self.get_affine()",
                "def get_transformed_path_and_affine(self):\n    \"\"\"\n    Return a copy of the child path, with the non-affine part of\n    the transform already applied, along with the affine part of\n    the path necessary to complete the transformation.\n    \"\"\"\n    self._revalidate()\n    return self._transformed_path, self.get_affine()",
                "def get_fully_transformed_path(self):\n    \"\"\"\n    Return a fully-transformed copy of the child path.\n    \"\"\"\n    self._revalidate()\n    return self._transform.transform_path_affine(self._transformed_path)",
                "def get_affine(self):\n    return self._transform.get_affine()",
                "def __init__(self, patch):\n    \"\"\"\n    Parameters\n    ----------\n    patch : `~.patches.Patch`\n    \"\"\"\n    TransformNode.__init__(self)\n\n    transform = patch.get_transform()\n    self._patch = patch\n    self._transform = transform\n    self.set_children(transform)\n    self._path = patch.get_path()\n    self._transformed_path = None\n    self._transformed_points = None",
                "def _revalidate(self):\n    patch_path = self._patch.get_path()\n    # Only recompute if the invalidation includes the non_affine part of\n    # the transform, or the Patch's Path has changed.\n    if (self._transformed_path is None or self._path != patch_path or\n            (self._invalid & self.INVALID_NON_AFFINE ==\n                self.INVALID_NON_AFFINE)):\n        self._path = patch_path\n        self._transformed_path = \\\n            self._transform.transform_path_non_affine(patch_path)\n        self._transformed_points = \\\n            Path._fast_from_codes_and_verts(\n                self._transform.transform_non_affine(patch_path.vertices),\n                None, patch_path)\n    self._invalid = 0",
                "def __str__(self):\n    # either just return the name of this TransformNode, or its repr\n    return self._shorthand_name or repr(self)",
                "def set_children(self, *children):\n    self._set_children(*children)\n    self._children = children",
                "def write_graphviz(self, fobj, highlight=[]):\n    \"\"\"\n    For debugging purposes.\n\n    Writes the transform tree rooted at 'self' to a graphviz \"dot\"\n    format file.  This file can be run through the \"dot\" utility\n    to produce a graph of the transform tree.\n\n    Affine transforms are marked in blue.  Bounding boxes are\n    marked in yellow.\n\n    *fobj*: A Python file-like object\n\n    Once the \"dot\" file has been created, it can be turned into a\n    png easily with::\n\n        $> dot -Tpng -o $OUTPUT_FILE $DOT_FILE\n\n    \"\"\"\n    seen = set()\n\n    def recurse(root):\n        if root in seen:\n            return\n        seen.add(root)\n        props = {}\n        label = root.__class__.__name__\n        if root._invalid:\n            label = '[%s]' % label\n        if root in highlight:\n            props['style'] = 'bold'\n        props['shape'] = 'box'\n        props['label'] = '\"%s\"' % label\n        props = ' '.join(map('{0[0]}={0[1]}'.format, props.items()))\n\n        fobj.write('%s [%s];\\n' % (hash(root), props))\n\n        if hasattr(root, '_children'):\n            for child in root._children:\n                name = next((key for key, val in root.__dict__.items()\n                             if val is child), '?')\n                fobj.write('\"%s\" -> \"%s\" [label=\"%s\", fontsize=10];\\n'\n                            % (hash(root),\n                            hash(child),\n                            name))\n                recurse(child)\n\n    fobj.write(\"digraph G {\\n\")\n    recurse(self)\n    fobj.write(\"}\\n\")",
                "@staticmethod\ndef _check(points):\n    if isinstance(points, np.ma.MaskedArray):\n        cbook._warn_external(\"Bbox bounds are a masked array.\")\n    points = np.asarray(points)\n    if (points[1, 0] - points[0, 0] == 0 or\n        points[1, 1] - points[0, 1] == 0):\n        cbook._warn_external(\"Singular Bbox.\")",
                "def __init__(self, points, **kwargs):\n    self._check(points)\n    self.___init__(points, **kwargs)",
                "def invalidate(self):\n    self._check(self._points)\n    TransformNode.invalidate(self)",
                "def get_points(self):\n    points = self._get_points()\n    self._check(points)\n    return points",
                "def get_points(self):\n    points = self._get_points()\n    self._check(points)\n    return points",
                "def transform_affine(self, points):\n    # docstring inherited\n    # The major speed trap here is just converting to the\n    # points to an array in the first place.  If we can use\n    # more arrays upstream, that should help here.\n    if not isinstance(points, (np.ma.MaskedArray, np.ndarray)):\n        cbook._warn_external(\n            f'A non-numpy array of type {type(points)} was passed in '\n            f'for transformation, which results in poor performance.')\n    return self._transform_affine(points)",
                "def recurse(root):\n    if root in seen:\n        return\n    seen.add(root)\n    props = {}\n    label = root.__class__.__name__\n    if root._invalid:\n        label = '[%s]' % label\n    if root in highlight:\n        props['style'] = 'bold'\n    props['shape'] = 'box'\n    props['label'] = '\"%s\"' % label\n    props = ' '.join(map('{0[0]}={0[1]}'.format, props.items()))\n\n    fobj.write('%s [%s];\\n' % (hash(root), props))\n\n    if hasattr(root, '_children'):\n        for child in root._children:\n            name = next((key for key, val in root.__dict__.items()\n                         if val is child), '?')\n            fobj.write('\"%s\" -> \"%s\" [label=\"%s\", fontsize=10];\\n'\n                        % (hash(root),\n                        hash(child),\n                        name))\n            recurse(child)"
            ],
            "inscope_function_signatures": [
                "_indent_str(obj)",
                "blended_transform_factory(x_transform, y_transform)",
                "composite_transform_factory(a, b)",
                "nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True)",
                "interval_contains(interval, val)",
                "_interval_contains_close(interval, val, rtol=1e-10)",
                "interval_contains_open(interval, val)",
                "offset_copy(trans, fig=None, x=0.0, y=0.0, units='inches')",
                "__init__(self, shorthand_name=None)",
                "__getstate__(self)",
                "__setstate__(self, data_dict)",
                "__copy__(self, *args)",
                "invalidate(self)",
                "_invalidate_internal(self, value, invalidating_node)",
                "set_children(self, *children)",
                "frozen(self)",
                "frozen(self)",
                "__array__(self, *args, **kwargs)",
                "is_unit(self)",
                "x0(self)",
                "y0(self)",
                "x1(self)",
                "y1(self)",
                "p0(self)",
                "p1(self)",
                "xmin(self)",
                "ymin(self)",
                "xmax(self)",
                "ymax(self)",
                "min(self)",
                "max(self)",
                "intervalx(self)",
                "intervaly(self)",
                "width(self)",
                "height(self)",
                "size(self)",
                "bounds(self)",
                "extents(self)",
                "get_points(self)",
                "containsx(self, x)",
                "containsy(self, y)",
                "contains(self, x, y)",
                "overlaps(self, other)",
                "fully_containsx(self, x)",
                "fully_containsy(self, y)",
                "fully_contains(self, x, y)",
                "fully_overlaps(self, other)",
                "transformed(self, transform)",
                "inverse_transformed(self, transform)",
                "anchored(self, c, container=None)",
                "shrunk(self, mx, my)",
                "shrunk_to_aspect(self, box_aspect, container=None, fig_aspect=1.0)",
                "splitx(self, *args)",
                "splity(self, *args)",
                "count_contains(self, vertices)",
                "count_overlaps(self, bboxes)",
                "expanded(self, sw, sh)",
                "padded(self, p)",
                "translated(self, tx, ty)",
                "corners(self)",
                "rotated(self, radians)",
                "union(bboxes)",
                "intersection(bbox1, bbox2)",
                "__init__(self, points, **kwargs)",
                "unit()",
                "null()",
                "from_bounds(x0, y0, width, height)",
                "from_extents(*args)",
                "__format__(self, fmt)",
                "__str__(self)",
                "__repr__(self)",
                "ignore(self, value)",
                "update_from_path(self, path, ignore=None, updatex=True, updatey=True)",
                "update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True)",
                "x0(self, val)",
                "y0(self, val)",
                "x1(self, val)",
                "y1(self, val)",
                "p0(self, val)",
                "p1(self, val)",
                "intervalx(self, interval)",
                "intervaly(self, interval)",
                "bounds(self, bounds)",
                "minpos(self)",
                "minposx(self)",
                "minposy(self)",
                "get_points(self)",
                "set_points(self, points)",
                "set(self, other)",
                "mutated(self)",
                "mutatedx(self)",
                "mutatedy(self)",
                "__init__(self, bbox, transform, **kwargs)",
                "__str__(self)",
                "get_points(self)",
                "__init__(self, bbox, x0=None, y0=None, x1=None, y1=None, **kwargs)",
                "__str__(self)",
                "get_points(self)",
                "locked_x0(self)",
                "locked_x0(self, x0)",
                "locked_y0(self)",
                "locked_y0(self, y0)",
                "locked_x1(self)",
                "locked_x1(self, x1)",
                "locked_y1(self)",
                "locked_y1(self, y1)",
                "__init_subclass__(cls)",
                "__add__(self, other)",
                "_iter_break_from_left_to_right(self)",
                "depth(self)",
                "contains_branch(self, other)",
                "contains_branch_seperately(self, other_transform)",
                "__sub__(self, other)",
                "__array__(self, *args, **kwargs)",
                "transform(self, values)",
                "transform_affine(self, values)",
                "transform_non_affine(self, values)",
                "transform_bbox(self, bbox)",
                "get_affine(self)",
                "get_matrix(self)",
                "transform_point(self, point)",
                "transform_path(self, path)",
                "transform_path_affine(self, path)",
                "transform_path_non_affine(self, path)",
                "transform_angles(self, angles, pts, radians=False, pushoff=1e-05)",
                "inverted(self)",
                "__init__(self, child)",
                "_init(self, child)",
                "__eq__(self, other)",
                "__str__(self)",
                "frozen(self)",
                "_set(self, child)",
                "set(self, child)",
                "__init__(self, *args, **kwargs)",
                "__array__(self, *args, **kwargs)",
                "__eq__(self, other)",
                "transform(self, values)",
                "transform_affine(self, values)",
                "transform_non_affine(self, points)",
                "transform_path(self, path)",
                "transform_path_affine(self, path)",
                "transform_path_non_affine(self, path)",
                "get_affine(self)",
                "frozen(self)",
                "is_separable(self)",
                "to_values(self)",
                "matrix_from_values(a, b, c, d, e, f)",
                "transform_affine(self, points)",
                "inverted(self)",
                "__init__(self, matrix=None, **kwargs)",
                "__str__(self)",
                "from_values(a, b, c, d, e, f)",
                "get_matrix(self)",
                "set_matrix(self, mtx)",
                "set(self, other)",
                "identity()",
                "clear(self)",
                "rotate(self, theta)",
                "rotate_deg(self, degrees)",
                "rotate_around(self, x, y, theta)",
                "rotate_deg_around(self, x, y, degrees)",
                "translate(self, tx, ty)",
                "scale(self, sx, sy=None)",
                "skew(self, xShear, yShear)",
                "skew_deg(self, xShear, yShear)",
                "frozen(self)",
                "__str__(self)",
                "get_matrix(self)",
                "transform(self, points)",
                "transform_affine(self, points)",
                "transform_non_affine(self, points)",
                "transform_path(self, path)",
                "transform_path_affine(self, path)",
                "transform_path_non_affine(self, path)",
                "get_affine(self)",
                "inverted(self)",
                "__eq__(self, other)",
                "contains_branch_seperately(self, transform)",
                "__str__(self)",
                "__init__(self, x_transform, y_transform, **kwargs)",
                "depth(self)",
                "contains_branch(self, other)",
                "frozen(self)",
                "transform_non_affine(self, points)",
                "inverted(self)",
                "get_affine(self)",
                "__init__(self, x_transform, y_transform, **kwargs)",
                "get_matrix(self)",
                "__init__(self, a, b, **kwargs)",
                "frozen(self)",
                "_invalidate_internal(self, value, invalidating_node)",
                "__eq__(self, other)",
                "_iter_break_from_left_to_right(self)",
                "__str__(self)",
                "transform_affine(self, points)",
                "transform_non_affine(self, points)",
                "transform_path_non_affine(self, path)",
                "get_affine(self)",
                "inverted(self)",
                "__init__(self, a, b, **kwargs)",
                "depth(self)",
                "_iter_break_from_left_to_right(self)",
                "__str__(self)",
                "get_matrix(self)",
                "__init__(self, boxin, boxout, **kwargs)",
                "__str__(self)",
                "get_matrix(self)",
                "__init__(self, boxout, **kwargs)",
                "__str__(self)",
                "get_matrix(self)",
                "get_matrix(self)",
                "__init__(self, boxin, **kwargs)",
                "__str__(self)",
                "get_matrix(self)",
                "__init__(self, xt, yt, scale_trans, **kwargs)",
                "__str__(self)",
                "get_matrix(self)",
                "__init__(self, path, transform)",
                "_revalidate(self)",
                "get_transformed_points_and_affine(self)",
                "get_transformed_path_and_affine(self)",
                "get_fully_transformed_path(self)",
                "get_affine(self)",
                "__init__(self, patch)",
                "_revalidate(self)",
                "__str__(self)",
                "set_children(self, *children)",
                "write_graphviz(self, fobj, highlight=[])",
                "_check(points)",
                "__init__(self, points, **kwargs)",
                "invalidate(self)",
                "get_points(self)",
                "get_points(self)",
                "transform_affine(self, points)",
                "recurse(root)"
            ],
            "variables_in_file": {
                "DEBUG": [
                    98,
                    196,
                    262,
                    2567,
                    2504,
                    2605,
                    750,
                    47,
                    1042,
                    179,
                    1107,
                    2547,
                    1786
                ],
                "re.sub": [
                    51
                ],
                "re": [
                    51
                ],
                "str": [
                    51,
                    557
                ],
                "obj": [
                    51
                ],
                "_gid": [
                    62
                ],
                "INVALID_NON_AFFINE": [
                    67,
                    69
                ],
                "INVALID_AFFINE": [
                    68,
                    69
                ],
                "INVALID": [
                    69
                ],
                "is_affine": [
                    260,
                    2215,
                    73,
                    2217,
                    1675,
                    1685,
                    2137,
                    2330
                ],
                "is_bbox": [
                    74,
                    259
                ],
                "pass_through": [
                    2269,
                    76,
                    2111,
                    1607
                ],
                "self._parents": [
                    106,
                    113,
                    114,
                    116,
                    154,
                    91
                ],
                "self": [
                    2069,
                    2073,
                    2081,
                    2082,
                    2083,
                    2088,
                    2089,
                    2095,
                    2096,
                    2097,
                    2122,
                    2123,
                    2124,
                    2125,
                    2126,
                    2130,
                    2137,
                    91,
                    2139,
                    95,
                    96,
                    2143,
                    2147,
                    101,
                    2149,
                    2150,
                    105,
                    106,
                    109,
                    113,
                    114,
                    116,
                    2175,
                    129,
                    130,
                    131,
                    132,
                    2179,
                    2180,
                    2181,
                    2183,
                    2184,
                    2189,
                    2190,
                    2191,
                    149,
                    151,
                    152,
                    154,
                    159,
                    2222,
                    175,
                    2223,
                    177,
                    2224,
                    2225,
                    2227,
                    2228,
                    183,
                    184,
                    2232,
                    2233,
                    2234,
                    2236,
                    2237,
                    2241,
                    194,
                    2242,
                    2243,
                    2244,
                    2283,
                    2284,
                    2286,
                    2287,
                    2288,
                    2289,
                    245,
                    2293,
                    2295,
                    2308,
                    2309,
                    2313,
                    2318,
                    2319,
                    273,
                    2324,
                    277,
                    2325,
                    2326,
                    2327,
                    2329,
                    282,
                    2330,
                    2332,
                    2334,
                    292,
                    2340,
                    2341,
                    2342,
                    2346,
                    302,
                    2350,
                    2352,
                    2353,
                    2355,
                    2356,
                    312,
                    2360,
                    2362,
                    2363,
                    2365,
                    2366,
                    322,
                    2370,
                    2371,
                    2373,
                    2374,
                    2379,
                    332,
                    342,
                    347,
                    352,
                    2403,
                    2404,
                    357,
                    2406,
                    2407,
                    2408,
                    2409,
                    362,
                    2410,
                    2414,
                    367,
                    2417,
                    2418,
                    2419,
                    372,
                    2420,
                    2426,
                    2427,
                    2428,
                    381,
                    2432,
                    2433,
                    2434,
                    2435,
                    2436,
                    2437,
                    390,
                    2438,
                    395,
                    401,
                    407,
                    413,
                    419,
                    428,
                    2482,
                    435,
                    2483,
                    2484,
                    2485,
                    2486,
                    2487,
                    442,
                    2493,
                    2494,
                    2495,
                    2499,
                    452,
                    2500,
                    2501,
                    2507,
                    2511,
                    2512,
                    2513,
                    468,
                    475,
                    482,
                    2531,
                    2532,
                    2533,
                    2534,
                    2535,
                    2540,
                    493,
                    2541,
                    2545,
                    2546,
                    2549,
                    2553,
                    2554,
                    2555,
                    509,
                    2565,
                    2566,
                    519,
                    2569,
                    2573,
                    2574,
                    2575,
                    2589,
                    2590,
                    2591,
                    2592,
                    2593,
                    2598,
                    2599,
                    555,
                    2603,
                    2604,
                    558,
                    561,
                    562,
                    2609,
                    2613,
                    2614,
                    2615,
                    573,
                    574,
                    575,
                    2624,
                    2625,
                    2626,
                    2627,
                    2628,
                    2629,
                    2634,
                    2635,
                    590,
                    2639,
                    2641,
                    2642,
                    2643,
                    2644,
                    2645,
                    598,
                    599,
                    607,
                    618,
                    2668,
                    2669,
                    2670,
                    2671,
                    2672,
                    2673,
                    2678,
                    2679,
                    2680,
                    2681,
                    2682,
                    636,
                    637,
                    2684,
                    2685,
                    2686,
                    648,
                    2696,
                    2697,
                    655,
                    656,
                    2705,
                    2706,
                    660,
                    664,
                    2712,
                    2713,
                    2716,
                    669,
                    678,
                    2731,
                    2734,
                    687,
                    2735,
                    2736,
                    2737,
                    2738,
                    2739,
                    2742,
                    2745,
                    2746,
                    2747,
                    2748,
                    2749,
                    2750,
                    2751,
                    2753,
                    2755,
                    738,
                    743,
                    744,
                    745,
                    749,
                    754,
                    755,
                    758,
                    759,
                    792,
                    795,
                    798,
                    812,
                    833,
                    839,
                    842,
                    844,
                    845,
                    847,
                    848,
                    873,
                    878,
                    879,
                    883,
                    884,
                    888,
                    889,
                    893,
                    894,
                    898,
                    899,
                    903,
                    904,
                    908,
                    909,
                    913,
                    914,
                    920,
                    921,
                    922,
                    926,
                    930,
                    934,
                    941,
                    942,
                    950,
                    951,
                    952,
                    958,
                    959,
                    960,
                    964,
                    968,
                    969,
                    973,
                    974,
                    998,
                    999,
                    1000,
                    1001,
                    1002,
                    1008,
                    1009,
                    1010,
                    1014,
                    1015,
                    1019,
                    1034,
                    1039,
                    1040,
                    1046,
                    1047,
                    1081,
                    1082,
                    1083,
                    1084,
                    1087,
                    1093,
                    1094,
                    1095,
                    1099,
                    1100,
                    1101,
                    1103,
                    1104,
                    1105,
                    1111,
                    1112,
                    1120,
                    1123,
                    1127,
                    1128,
                    1129,
                    1136,
                    1139,
                    1143,
                    1144,
                    1145,
                    1152,
                    1155,
                    1159,
                    1160,
                    1161,
                    1168,
                    1171,
                    1175,
                    1176,
                    1177,
                    1248,
                    1267,
                    1294,
                    1298,
                    1314,
                    1319,
                    1347,
                    1352,
                    1361,
                    1371,
                    1387,
                    1390,
                    1402,
                    1428,
                    1462,
                    1476,
                    1490,
                    1492,
                    1503,
                    1515,
                    1527,
                    1554,
                    1570,
                    1571,
                    1615,
                    1616,
                    1619,
                    1620,
                    1621,
                    1622,
                    1623,
                    1626,
                    1631,
                    1632,
                    1636,
                    1639,
                    1641,
                    1642,
                    1643,
                    1644,
                    1645,
                    1646,
                    1647,
                    1648,
                    1649,
                    1662,
                    1663,
                    1668,
                    1669,
                    1671,
                    1672,
                    1673,
                    1675,
                    1676,
                    1677,
                    1688,
                    1689,
                    1693,
                    1697,
                    1702,
                    1715,
                    1719,
                    1728,
                    1752,
                    1756,
                    1763,
                    1780,
                    1798,
                    1802,
                    1803,
                    1805,
                    1806,
                    1807,
                    1808,
                    1809,
                    1827,
                    1831,
                    1832,
                    1837,
                    1838,
                    1864,
                    1865,
                    1866,
                    1867,
                    1879,
                    1880,
                    1888,
                    1889,
                    1906,
                    1907,
                    1908,
                    1922,
                    1923,
                    1924,
                    1934,
                    1944,
                    1956,
                    1968,
                    1969,
                    1970,
                    1987,
                    1988,
                    1989,
                    2006,
                    2007,
                    2008,
                    2021,
                    2033,
                    2037,
                    2041
                ],
                "self._invalid": [
                    2432,
                    2179,
                    2437,
                    2565,
                    1671,
                    1673,
                    1802,
                    2190,
                    1039,
                    1808,
                    2574,
                    149,
                    152,
                    1832,
                    2603,
                    941,
                    2614,
                    2232,
                    2746,
                    2243,
                    2499,
                    2755,
                    1864,
                    1866,
                    1099,
                    2639,
                    1104,
                    2512,
                    2643,
                    1623,
                    95,
                    2545,
                    2293,
                    1014,
                    2678,
                    2554,
                    2686
                ],
                "self._shorthand_name": [
                    96,
                    1805,
                    101,
                    1806
                ],
                "shorthand_name": [
                    96,
                    1804,
                    1806,
                    1807
                ],
                "repr": [
                    101
                ],
                "self.__dict__": [
                    105,
                    109
                ],
                "k": [
                    113,
                    106,
                    116
                ],
                "v": [
                    113,
                    106,
                    116
                ],
                "self._parents.items": [
                    106,
                    116
                ],
                "data_dict": [
                    109
                ],
                "weakref.ref": [
                    113,
                    175
                ],
                "weakref": [
                    113,
                    175
                ],
                "target.pop": [
                    176,
                    115
                ],
                "target": [
                    176,
                    115
                ],
                "sid": [
                    176,
                    115
                ],
                "NotImplementedError": [
                    422,
                    1706,
                    1555,
                    1590,
                    119
                ],
                "__deepcopy__": [
                    122
                ],
                "__copy__": [
                    122
                ],
                "value": [
                    129,
                    131,
                    132,
                    2307,
                    2311,
                    2313,
                    812,
                    149,
                    152,
                    159
                ],
                "self.INVALID": [
                    129
                ],
                "self.is_affine": [
                    130
                ],
                "self.INVALID_AFFINE": [
                    131
                ],
                "self._invalidate_internal": [
                    132
                ],
                "status_changed": [
                    149,
                    151
                ],
                "self.pass_through": [
                    151
                ],
                "parent": [
                    1233,
                    1239,
                    154,
                    156,
                    157,
                    158
                ],
                "list": [
                    154
                ],
                "self._parents.values": [
                    154
                ],
                "parent._invalidate_internal": [
                    158
                ],
                "child": [
                    1668,
                    1669,
                    171,
                    176,
                    177,
                    1614,
                    1615,
                    1616,
                    1620,
                    1621,
                    1622,
                    1639,
                    1641,
                    1642,
                    235,
                    1644,
                    237,
                    1643,
                    1645,
                    240,
                    1646,
                    242,
                    1647,
                    1648,
                    1649,
                    1662,
                    1663
                ],
                "children": [
                    184,
                    171,
                    183
                ],
                "ref": [
                    177,
                    175
                ],
                "id": [
                    177,
                    175
                ],
                "child._parents": [
                    176,
                    177
                ],
                "_set_children": [
                    185,
                    180
                ],
                "set_children": [
                    185,
                    180
                ],
                "self._set_children": [
                    183
                ],
                "self._children": [
                    184
                ],
                "set_children.__doc__": [
                    185
                ],
                "_set_children.__doc__": [
                    185
                ],
                "seen": [
                    216,
                    219,
                    221
                ],
                "set": [
                    216
                ],
                "root": [
                    224,
                    226,
                    232,
                    234,
                    235,
                    236,
                    239,
                    219,
                    221,
                    223
                ],
                "seen.add": [
                    221
                ],
                "props": [
                    227,
                    228,
                    229,
                    230,
                    232,
                    222
                ],
                "label": [
                    225,
                    229,
                    223
                ],
                "root.__class__.__name__": [
                    223
                ],
                "root.__class__": [
                    223
                ],
                "root._invalid": [
                    224
                ],
                "highlight": [
                    226
                ],
                "join": [
                    230
                ],
                "map": [
                    230
                ],
                "format": [
                    2337,
                    1090,
                    2596,
                    230,
                    2632,
                    2538,
                    1835,
                    2092,
                    1005,
                    2036,
                    791,
                    1401,
                    2490,
                    795,
                    1629,
                    798,
                    2423
                ],
                "props.items": [
                    230
                ],
                "fobj.write": [
                    232,
                    244,
                    238,
                    246
                ],
                "fobj": [
                    232,
                    244,
                    238,
                    246
                ],
                "hash": [
                    232,
                    240,
                    239
                ],
                "hasattr": [
                    1240,
                    234
                ],
                "root._children": [
                    235
                ],
                "name": [
                    241,
                    236
                ],
                "next": [
                    236
                ],
                "key": [
                    236
                ],
                "val": [
                    898,
                    903,
                    2858,
                    236,
                    237,
                    878,
                    2831,
                    2878,
                    883,
                    888,
                    893,
                    1086
                ],
                "root.__dict__.items": [
                    236
                ],
                "root.__dict__": [
                    236
                ],
                "recurse": [
                    242,
                    245
                ],
                "TransformNode": [
                    2731,
                    2668,
                    274,
                    759,
                    2648,
                    249,
                    1180
                ],
                "isinstance": [
                    1344,
                    1249,
                    1794,
                    2080,
                    2296,
                    265,
                    557,
                    2317,
                    2255,
                    2256,
                    1781,
                    2167,
                    2168,
                    2459,
                    2461,
                    2463
                ],
                "points": [
                    1024,
                    2049,
                    1026,
                    1794,
                    1796,
                    2053,
                    1030,
                    1798,
                    265,
                    395,
                    267,
                    268,
                    269,
                    396,
                    401,
                    402,
                    1046,
                    407,
                    664,
                    408,
                    665,
                    919,
                    920,
                    921,
                    1047,
                    1048,
                    2346,
                    1711,
                    2351,
                    2353,
                    2356,
                    950,
                    951,
                    838,
                    844,
                    1100,
                    1102,
                    847,
                    1111,
                    1112,
                    1113,
                    739,
                    740,
                    2148,
                    743,
                    2153,
                    2156,
                    2158,
                    754,
                    755,
                    2162,
                    1781,
                    1782,
                    1783,
                    1784,
                    2164,
                    1019,
                    2045
                ],
                "np.ma.MaskedArray": [
                    1794,
                    265,
                    1783,
                    1781,
                    2167,
                    2168
                ],
                "np.ma": [
                    1024,
                    1794,
                    265,
                    1394,
                    1781,
                    2167,
                    1783,
                    2168,
                    2169,
                    1087
                ],
                "np": [
                    1024,
                    2049,
                    2053,
                    2569,
                    1034,
                    1556,
                    1557,
                    1565,
                    1567,
                    1568,
                    1574,
                    1577,
                    2609,
                    1087,
                    1101,
                    2167,
                    2168,
                    2169,
                    634,
                    2171,
                    635,
                    648,
                    2188,
                    659,
                    1697,
                    679,
                    700,
                    701,
                    702,
                    703,
                    704,
                    2241,
                    713,
                    714,
                    715,
                    716,
                    2786,
                    739,
                    744,
                    2795,
                    1777,
                    1781,
                    1783,
                    769,
                    1794,
                    265,
                    267,
                    787,
                    1852,
                    2373,
                    347,
                    352,
                    357,
                    1385,
                    362,
                    367,
                    1394,
                    372,
                    1918,
                    1919,
                    1920,
                    2433,
                    1922,
                    1934,
                    919,
                    920,
                    1966,
                    1968,
                    950,
                    958,
                    1985,
                    1987,
                    2507,
                    2002,
                    2003,
                    2004,
                    2006,
                    2021,
                    2029,
                    2549,
                    2045,
                    510
                ],
                "cbook._warn_external": [
                    266,
                    1795,
                    270
                ],
                "cbook": [
                    993,
                    1795,
                    1767,
                    266,
                    2667,
                    1614,
                    270,
                    2911,
                    279,
                    1887
                ],
                "np.asarray": [
                    739,
                    267,
                    1556,
                    1557,
                    634
                ],
                "staticmethod": [
                    707,
                    771,
                    1891,
                    1766,
                    263,
                    780,
                    1840,
                    693,
                    761,
                    766
                ],
                "Bbox": [
                    512,
                    609,
                    705,
                    769,
                    778,
                    620,
                    717,
                    273,
                    562,
                    689,
                    660,
                    787,
                    598,
                    1462,
                    665,
                    764,
                    669,
                    574
                ],
                "copy": [
                    1752,
                    273
                ],
                "self.get_points": [
                    509,
                    390,
                    395,
                    273,
                    401,
                    277,
                    407,
                    664,
                    282,
                    413,
                    419,
                    292,
                    678,
                    302,
                    312,
                    322,
                    332,
                    342,
                    347,
                    352,
                    357,
                    362,
                    367,
                    372,
                    381
                ],
                "frozen.__doc__": [
                    274
                ],
                "frozen": [
                    274,
                    2294,
                    2296,
                    2297,
                    2298
                ],
                "TransformNode.__doc__": [
                    274
                ],
                "tolist": [
                    282
                ],
                "cbook.deprecated": [
                    1767,
                    279
                ],
                "property": [
                    392,
                    1163,
                    1675,
                    1676,
                    398,
                    1677,
                    404,
                    2329,
                    410,
                    2330,
                    284,
                    924,
                    2331,
                    2333,
                    416,
                    928,
                    932,
                    294,
                    304,
                    314,
                    324,
                    334,
                    2128,
                    344,
                    2137,
                    1754,
                    1115,
                    2138,
                    349,
                    354,
                    359,
                    1131,
                    364,
                    2412,
                    369,
                    1269,
                    374,
                    1147,
                    383
                ],
                "np.min": [
                    352,
                    367,
                    347,
                    701,
                    703
                ],
                "np.max": [
                    704,
                    357,
                    362,
                    372,
                    702
                ],
                "x0": [
                    778,
                    413,
                    414,
                    678,
                    679,
                    428,
                    429,
                    701,
                    1085,
                    705,
                    713,
                    717,
                    468,
                    469,
                    607,
                    608,
                    609,
                    1127,
                    1128,
                    618,
                    620
                ],
                "y0": [
                    778,
                    413,
                    414,
                    678,
                    679,
                    435,
                    436,
                    1085,
                    703,
                    705,
                    715,
                    717,
                    475,
                    476,
                    607,
                    609,
                    618,
                    619,
                    620,
                    1143,
                    1144
                ],
                "x1": [
                    1159,
                    1160,
                    413,
                    414,
                    678,
                    679,
                    428,
                    429,
                    1085,
                    702,
                    705,
                    714,
                    717,
                    468,
                    469,
                    607,
                    608,
                    618,
                    620
                ],
                "y1": [
                    1175,
                    1176,
                    413,
                    414,
                    678,
                    679,
                    435,
                    436,
                    1085,
                    704,
                    705,
                    716,
                    717,
                    475,
                    476,
                    607,
                    609,
                    618,
                    619
                ],
                "flatten": [
                    419
                ],
                "self.intervalx": [
                    468,
                    428
                ],
                "x": [
                    648,
                    1944,
                    1955,
                    1956,
                    429,
                    442,
                    469,
                    2902,
                    2906,
                    2912,
                    482,
                    2149,
                    2152,
                    2153,
                    2155,
                    2156,
                    2158,
                    1527,
                    1528
                ],
                "self.intervaly": [
                    435,
                    475
                ],
                "y": [
                    2912,
                    482,
                    1955,
                    1956,
                    2150,
                    2152,
                    2161,
                    2162,
                    436,
                    2164,
                    2902,
                    1944,
                    442,
                    2907,
                    476
                ],
                "self.containsx": [
                    442
                ],
                "self.containsy": [
                    442
                ],
                "ax1": [
                    452,
                    454,
                    455,
                    493,
                    462,
                    495,
                    496,
                    503
                ],
                "ay1": [
                    452,
                    456,
                    457,
                    493,
                    462,
                    497,
                    498,
                    503
                ],
                "ax2": [
                    452,
                    454,
                    455,
                    493,
                    462,
                    495,
                    496,
                    503
                ],
                "ay2": [
                    452,
                    456,
                    457,
                    493,
                    462,
                    497,
                    498,
                    503
                ],
                "self.extents": [
                    618,
                    452,
                    493,
                    607
                ],
                "bx1": [
                    453,
                    458,
                    459,
                    462,
                    494,
                    499,
                    500,
                    503
                ],
                "by1": [
                    453,
                    460,
                    461,
                    462,
                    494,
                    501,
                    502,
                    503
                ],
                "bx2": [
                    453,
                    458,
                    459,
                    462,
                    494,
                    499,
                    500,
                    503
                ],
                "by2": [
                    453,
                    460,
                    461,
                    462,
                    494,
                    501,
                    502,
                    503
                ],
                "other.extents": [
                    453,
                    494
                ],
                "other": [
                    2317,
                    1294,
                    2318,
                    2319,
                    1299,
                    1696,
                    1697,
                    2080,
                    2081,
                    2083,
                    958,
                    959,
                    1344,
                    1348,
                    453,
                    1351,
                    1360,
                    1361,
                    1626,
                    1887,
                    1248,
                    1249,
                    1888,
                    494
                ],
                "self.fully_containsx": [
                    482
                ],
                "self.fully_containsy": [
                    482
                ],
                "pts": [
                    1570,
                    1567,
                    1557,
                    1558,
                    1561,
                    509,
                    510,
                    511
                ],
                "ll": [
                    512,
                    510
                ],
                "ul": [
                    512,
                    510
                ],
                "lr": [
                    512,
                    510
                ],
                "transform.transform": [
                    510
                ],
                "transform": [
                    993,
                    994,
                    519,
                    1000,
                    1001,
                    2088,
                    2089,
                    2346,
                    2667,
                    2670,
                    2671,
                    688,
                    2733,
                    2735,
                    2736,
                    1428,
                    510
                ],
                "np.array": [
                    1920,
                    1985,
                    679,
                    648,
                    744,
                    1034,
                    2507,
                    2569,
                    1966,
                    1777,
                    2609,
                    659,
                    2004,
                    2549,
                    919,
                    1852,
                    510
                ],
                "self.transformed": [
                    519
                ],
                "transform.inverted": [
                    519
                ],
                "coefs": [
                    521
                ],
                "container": [
                    554,
                    555,
                    556,
                    589,
                    590,
                    591
                ],
                "l": [
                    563,
                    556,
                    918,
                    919
                ],
                "b": [
                    1920,
                    2828,
                    2829,
                    2830,
                    2831,
                    918,
                    919,
                    2460,
                    2461,
                    2463,
                    2464,
                    2465,
                    2854,
                    2855,
                    2856,
                    2857,
                    2858,
                    556,
                    564,
                    1852,
                    2877,
                    2878,
                    2398,
                    2400,
                    2404,
                    2280,
                    2408,
                    2409,
                    2284,
                    2288,
                    1777,
                    2289,
                    1919
                ],
                "w": [
                    608,
                    609,
                    556,
                    591,
                    592,
                    594,
                    563,
                    918,
                    919,
                    573,
                    575
                ],
                "h": [
                    619,
                    556,
                    620,
                    591,
                    919,
                    593,
                    564,
                    596,
                    597,
                    918,
                    573,
                    575
                ],
                "container.bounds": [
                    556
                ],
                "c": [
                    557,
                    558,
                    560,
                    1777,
                    1852
                ],
                "cx": [
                    560,
                    563,
                    558
                ],
                "cy": [
                    560,
                    564,
                    558
                ],
                "self.coefs": [
                    558
                ],
                "L": [
                    561,
                    563
                ],
                "B": [
                    561,
                    564
                ],
                "W": [
                    561,
                    594,
                    563,
                    596,
                    599
                ],
                "H": [
                    592,
                    561,
                    593,
                    564,
                    597,
                    599
                ],
                "self.bounds": [
                    561
                ],
                "self._points": [
                    898,
                    903,
                    1034,
                    908,
                    1040,
                    913,
                    660,
                    920,
                    921,
                    669,
                    942,
                    562,
                    950,
                    951,
                    1084,
                    574,
                    575,
                    958,
                    959,
                    839,
                    968,
                    969,
                    844,
                    973,
                    974,
                    847,
                    1101,
                    1105,
                    598,
                    599,
                    743,
                    1002,
                    749,
                    878,
                    883,
                    758,
                    888,
                    893
                ],
                "self.size": [
                    573
                ],
                "mx": [
                    575
                ],
                "my": [
                    575
                ],
                "box_aspect": [
                    592,
                    587,
                    596
                ],
                "fig_aspect": [
                    592,
                    587,
                    596
                ],
                "ValueError": [
                    1664,
                    2568,
                    1559,
                    1562,
                    2587,
                    1315,
                    2219,
                    2606,
                    2480,
                    1079,
                    697,
                    2505,
                    1354,
                    588,
                    1363,
                    1491,
                    2904,
                    2399,
                    992,
                    2401,
                    2529,
                    995,
                    741,
                    2281,
                    2548,
                    1400
                ],
                "container.size": [
                    591
                ],
                "xf": [
                    610,
                    606
                ],
                "args": [
                    1688,
                    617,
                    787,
                    606
                ],
                "xf0": [
                    609,
                    610
                ],
                "xf1": [
                    609,
                    610
                ],
                "zip": [
                    610,
                    621
                ],
                "yf": [
                    617,
                    621
                ],
                "yf0": [
                    620,
                    621
                ],
                "yf1": [
                    620,
                    621
                ],
                "len": [
                    869,
                    696,
                    2159,
                    1490,
                    2165,
                    632
                ],
                "vertices": [
                    632,
                    634,
                    636,
                    637
                ],
                "np.errstate": [
                    635,
                    700
                ],
                "sum": [
                    1233,
                    636,
                    1239
                ],
                "all": [
                    636
                ],
                "self.min": [
                    636
                ],
                "self.max": [
                    637
                ],
                "count_bboxes_overlapping_bbox": [
                    647
                ],
                "np.atleast_3d": [
                    648
                ],
                "bboxes": [
                    704,
                    648,
                    696,
                    701,
                    702,
                    703
                ],
                "width": [
                    657,
                    778,
                    655
                ],
                "self.width": [
                    655
                ],
                "height": [
                    656,
                    658,
                    778
                ],
                "self.height": [
                    656
                ],
                "deltaw": [
                    657,
                    659
                ],
                "sw": [
                    657
                ],
                "deltah": [
                    658,
                    659
                ],
                "sh": [
                    658
                ],
                "a": [
                    1920,
                    2828,
                    2829,
                    2830,
                    2831,
                    659,
                    660,
                    2459,
                    2462,
                    2463,
                    2464,
                    2465,
                    1574,
                    2854,
                    2855,
                    1577,
                    1578,
                    2856,
                    2857,
                    2858,
                    1852,
                    2877,
                    2878,
                    2398,
                    2400,
                    2403,
                    2407,
                    2280,
                    2409,
                    2283,
                    2287,
                    1777,
                    2289,
                    1918
                ],
                "p": [
                    1027,
                    1031,
                    1015,
                    665,
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "tx": [
                    669,
                    1967
                ],
                "ty": [
                    669,
                    1967
                ],
                "corners": [
                    688,
                    687
                ],
                "self.corners": [
                    687
                ],
                "corners_rotated": [
                    688,
                    690
                ],
                "rotate": [
                    688,
                    1944
                ],
                "Affine2D": [
                    2373,
                    1899,
                    2189,
                    1807,
                    688,
                    2902,
                    1752,
                    1851,
                    2463
                ],
                "radians": [
                    688,
                    1576,
                    1564
                ],
                "bbox": [
                    704,
                    1082,
                    999,
                    1001,
                    689,
                    690,
                    691,
                    1078,
                    1462,
                    991,
                    1083,
                    701,
                    702,
                    703
                ],
                "Bbox.unit": [
                    689
                ],
                "bbox.update_from_data_xy": [
                    690
                ],
                "bbox.xmin": [
                    701
                ],
                "bbox.xmax": [
                    702
                ],
                "bbox.ymin": [
                    703
                ],
                "bbox.ymax": [
                    704
                ],
                "np.maximum": [
                    713,
                    715
                ],
                "bbox1.xmin": [
                    713
                ],
                "bbox1": [
                    713,
                    714,
                    715,
                    716
                ],
                "bbox2.xmin": [
                    713
                ],
                "bbox2": [
                    713,
                    714,
                    715,
                    716
                ],
                "np.minimum": [
                    714,
                    716
                ],
                "bbox1.xmax": [
                    714
                ],
                "bbox2.xmax": [
                    714
                ],
                "bbox1.ymin": [
                    715
                ],
                "bbox2.ymin": [
                    715
                ],
                "bbox1.ymax": [
                    716
                ],
                "bbox2.ymax": [
                    716
                ],
                "BboxBase": [
                    896,
                    738,
                    901,
                    998,
                    1051,
                    906,
                    876,
                    911,
                    720,
                    881,
                    977,
                    916,
                    886,
                    1081,
                    891
                ],
                "BboxBase.__init__": [
                    1081,
                    738,
                    998
                ],
                "kwargs": [
                    2624,
                    738,
                    1827,
                    2531,
                    998,
                    2406,
                    2122,
                    2222,
                    2286,
                    2482,
                    755,
                    1688,
                    1081,
                    2589
                ],
                "float": [
                    1921,
                    1986,
                    739,
                    1955,
                    2795,
                    2572,
                    2510,
                    1967,
                    1777,
                    2612,
                    2005,
                    919,
                    2552,
                    1852,
                    1087
                ],
                "points.shape": [
                    740
                ],
                "self._minpos": [
                    930,
                    934,
                    839,
                    744,
                    845,
                    848,
                    926
                ],
                "np.inf": [
                    744,
                    769
                ],
                "self._ignore": [
                    833,
                    745,
                    812
                ],
                "self._points_orig": [
                    968,
                    969,
                    749,
                    974,
                    973
                ],
                "self._points.copy": [
                    749
                ],
                "___init__": [
                    751
                ],
                "__init__": [
                    751
                ],
                "self._check": [
                    1112,
                    754,
                    758,
                    1047
                ],
                "self.___init__": [
                    755
                ],
                "TransformNode.invalidate": [
                    759
                ],
                "Bbox.from_extents": [
                    778
                ],
                "np.reshape": [
                    787
                ],
                "fmt": [
                    792
                ],
                "ignore": [
                    832,
                    833,
                    873,
                    839
                ],
                "path.vertices.size": [
                    835
                ],
                "path.vertices": [
                    1719,
                    835,
                    1527
                ],
                "path": [
                    2057,
                    2061,
                    2065,
                    1715,
                    1719,
                    1720,
                    2361,
                    2363,
                    1724,
                    2366,
                    835,
                    839,
                    1503,
                    872,
                    873,
                    1515,
                    2669,
                    1527,
                    1528
                ],
                "minpos": [
                    848,
                    845,
                    838
                ],
                "changed": [
                    841,
                    838
                ],
                "update_path_extents": [
                    838
                ],
                "self.invalidate": [
                    899,
                    1923,
                    904,
                    1161,
                    1672,
                    909,
                    914,
                    1177,
                    922,
                    1969,
                    952,
                    960,
                    1988,
                    842,
                    2007,
                    1880,
                    889,
                    1889,
                    1129,
                    879,
                    1907,
                    884,
                    1145,
                    894
                ],
                "updatex": [
                    874,
                    843
                ],
                "updatey": [
                    874,
                    846
                ],
                "xy": [
                    872,
                    869
                ],
                "Path": [
                    2752,
                    872,
                    1719,
                    1528,
                    2683
                ],
                "self.update_from_path": [
                    873
                ],
                "BboxBase.x0.setter": [
                    876
                ],
                "BboxBase.x0": [
                    876
                ],
                "BboxBase.y0.setter": [
                    881
                ],
                "BboxBase.y0": [
                    881
                ],
                "BboxBase.x1.setter": [
                    886
                ],
                "BboxBase.x1": [
                    886
                ],
                "BboxBase.y1.setter": [
                    891
                ],
                "BboxBase.y1": [
                    891
                ],
                "BboxBase.p0.setter": [
                    896
                ],
                "BboxBase.p0": [
                    896
                ],
                "BboxBase.p1.setter": [
                    901
                ],
                "BboxBase.p1": [
                    901
                ],
                "interval": [
                    2854,
                    908,
                    2828,
                    913,
                    2877
                ],
                "BboxBase.intervalx.setter": [
                    906
                ],
                "BboxBase.intervalx": [
                    906
                ],
                "BboxBase.intervaly.setter": [
                    911
                ],
                "BboxBase.intervaly": [
                    911
                ],
                "bounds": [
                    918
                ],
                "np.any": [
                    920,
                    958,
                    950
                ],
                "BboxBase.bounds.setter": [
                    916
                ],
                "BboxBase.bounds": [
                    916
                ],
                "other.get_points": [
                    958,
                    959
                ],
                "self.mutatedx": [
                    964
                ],
                "self.mutatedy": [
                    964
                ],
                "bbox.is_bbox": [
                    1078,
                    991
                ],
                "cbook._check_isinstance": [
                    993,
                    2667,
                    1614,
                    1887
                ],
                "Transform": [
                    1344,
                    993,
                    1249,
                    2307,
                    2311,
                    2313,
                    2122,
                    2667,
                    1614,
                    1593,
                    1680,
                    2222,
                    2286,
                    1619,
                    2100,
                    2261,
                    1688,
                    1241
                ],
                "transform.input_dims": [
                    994
                ],
                "transform.output_dims": [
                    994
                ],
                "self._bbox": [
                    1094,
                    999,
                    1100,
                    1009,
                    1015,
                    1082
                ],
                "self._transform": [
                    2716,
                    2753,
                    1000,
                    2670,
                    2735,
                    1010,
                    2713,
                    2681,
                    1019,
                    2684,
                    2750
                ],
                "self.set_children": [
                    2627,
                    1668,
                    2533,
                    1001,
                    2409,
                    2125,
                    2671,
                    1616,
                    2225,
                    2289,
                    2736,
                    2485,
                    1083,
                    2591
                ],
                "__name__": [
                    2340,
                    1093,
                    2598,
                    2634,
                    2540,
                    1837,
                    2095,
                    1008,
                    2037,
                    2426,
                    2493,
                    1631
                ],
                "type": [
                    1796,
                    1093,
                    2340,
                    2598,
                    2634,
                    2540,
                    1837,
                    2095,
                    1008,
                    2037,
                    2426,
                    2493,
                    1631
                ],
                "_indent_str": [
                    1632,
                    2341,
                    1094,
                    1095,
                    2342,
                    2599,
                    2635,
                    2541,
                    1838,
                    2096,
                    1009,
                    1010,
                    2097,
                    2427,
                    2428,
                    2494,
                    2495
                ],
                "self._bbox.get_points": [
                    1100,
                    1015
                ],
                "self._transform.transform": [
                    1019
                ],
                "np.ma.filled": [
                    1024
                ],
                "xs": [
                    1026,
                    1035,
                    1028,
                    1036
                ],
                "min": [
                    1026,
                    1030
                ],
                "max": [
                    1026,
                    2794,
                    2130,
                    1030
                ],
                "ys": [
                    1032,
                    1035,
                    1036,
                    1030
                ],
                "_get_points": [
                    1043,
                    1108
                ],
                "get_points": [
                    1043,
                    1108
                ],
                "self._get_points": [
                    1046,
                    1111
                ],
                "fp": [
                    1085,
                    1086,
                    1087
                ],
                "mask": [
                    1086,
                    1087
                ],
                "self._locked_points": [
                    1152,
                    1155,
                    1159,
                    1160,
                    1168,
                    1171,
                    1175,
                    1176,
                    1087,
                    1095,
                    1101,
                    1103,
                    1120,
                    1123,
                    1127,
                    1128,
                    1136,
                    1139,
                    1143,
                    1144
                ],
                "reshape": [
                    1852,
                    1087
                ],
                "np.ma.array": [
                    1087
                ],
                "np.where": [
                    1101
                ],
                "self._locked_points.mask": [
                    1120,
                    1152,
                    1127,
                    1159,
                    1101,
                    1136,
                    1168,
                    1143,
                    1175
                ],
                "self._locked_points.data": [
                    1128,
                    1176,
                    1144,
                    1160
                ],
                "locked_x0.setter": [
                    1125
                ],
                "locked_x0": [
                    1125
                ],
                "locked_y0.setter": [
                    1141
                ],
                "locked_y0": [
                    1141
                ],
                "locked_x1.setter": [
                    1157
                ],
                "locked_x1": [
                    1157
                ],
                "locked_y1.setter": [
                    1173
                ],
                "locked_y1": [
                    1173
                ],
                "input_dims": [
                    1210,
                    1747,
                    2108
                ],
                "output_dims": [
                    1216,
                    1748,
                    2109
                ],
                "is_separable": [
                    1222,
                    2216,
                    2217,
                    2472,
                    1676,
                    2583,
                    2521,
                    2202,
                    2331,
                    2110
                ],
                "has_inverse": [
                    1225,
                    2138,
                    2333,
                    1677
                ],
                "vars": [
                    1233,
                    1239
                ],
                "cls.__mro__": [
                    1233,
                    1239
                ],
                "cls": [
                    1233,
                    1234,
                    1235,
                    1239,
                    1240,
                    1241,
                    1242
                ],
                "cls.input_dims": [
                    1234
                ],
                "cls.output_dims": [
                    1234
                ],
                "cls.is_separable": [
                    1235
                ],
                "cls.inverted": [
                    1241
                ],
                "Transform.inverted": [
                    1241
                ],
                "cls.has_inverse": [
                    1242
                ],
                "composite_transform_factory": [
                    1248,
                    2294
                ],
                "NotImplemented": [
                    1698,
                    1345,
                    1250,
                    2085
                ],
                "IdentityTransform": [
                    1830,
                    2641,
                    1906,
                    1267,
                    2459,
                    1468,
                    2461
                ],
                "self.depth": [
                    1294
                ],
                "other.depth": [
                    1294
                ],
                "_": [
                    1298
                ],
                "sub_tree": [
                    1347,
                    1348,
                    1351,
                    1352,
                    1298,
                    1299
                ],
                "self._iter_break_from_left_to_right": [
                    1298,
                    1347
                ],
                "self.output_dims": [
                    1314,
                    2404,
                    2284,
                    1554,
                    1621,
                    1663
                ],
                "self.contains_branch": [
                    1319
                ],
                "other_transform": [
                    1319
                ],
                "remainder": [
                    1347,
                    1349,
                    1351,
                    1353,
                    1357
                ],
                "other._iter_break_from_left_to_right": [
                    1351
                ],
                "remainder.has_inverse": [
                    1353
                ],
                "remainder.inverted": [
                    1357
                ],
                "other.has_inverse": [
                    1360
                ],
                "other.inverted": [
                    1361
                ],
                "get_matrix": [
                    1476,
                    2373,
                    2374,
                    2183,
                    2184,
                    1371
                ],
                "self.get_affine": [
                    1476,
                    2697,
                    2346,
                    1515,
                    1647,
                    2706,
                    1428,
                    1371
                ],
                "values": [
                    1702,
                    1385,
                    1386,
                    1387,
                    1453,
                    1390,
                    1428
                ],
                "np.asanyarray": [
                    1385,
                    2053,
                    2045,
                    2049
                ],
                "ndim": [
                    1393,
                    1386,
                    1396,
                    1398
                ],
                "values.ndim": [
                    1386
                ],
                "values.reshape": [
                    1387
                ],
                "self.input_dims": [
                    2403,
                    1387,
                    2283,
                    1490,
                    1554,
                    1620,
                    1402,
                    1662
                ],
                "res": [
                    1390,
                    1394,
                    1395,
                    1397,
                    1399
                ],
                "self.transform_affine": [
                    1642,
                    1702,
                    1390,
                    1719
                ],
                "self.transform_non_affine": [
                    1643,
                    1390,
                    1527
                ],
                "np.ma.is_masked": [
                    1394
                ],
                "res.reshape": [
                    1397
                ],
                "self.transform": [
                    1570,
                    1571,
                    1641,
                    1492,
                    1462
                ],
                "bbox.get_points": [
                    1462
                ],
                "point": [
                    1490,
                    1492
                ],
                "self.transform_path_affine": [
                    1715,
                    1645,
                    1503
                ],
                "self.transform_path_non_affine": [
                    1646,
                    1503
                ],
                "transform_path_affine": [
                    1515
                ],
                "Path._fast_from_codes_and_verts": [
                    1528,
                    2683,
                    2752
                ],
                "path.codes": [
                    1528,
                    1720
                ],
                "angles": [
                    1568,
                    1556,
                    1558,
                    1565,
                    1567
                ],
                "angles.ndim": [
                    1558
                ],
                "angles.shape": [
                    1558
                ],
                "pts.shape": [
                    1561,
                    1558
                ],
                "np.deg2rad": [
                    2021,
                    1565,
                    1934
                ],
                "pts2": [
                    1571,
                    1567
                ],
                "pushoff": [
                    1567
                ],
                "np.column_stack": [
                    1567
                ],
                "np.cos": [
                    1918,
                    1567
                ],
                "np.sin": [
                    1568,
                    1919
                ],
                "tpts": [
                    1570,
                    1573
                ],
                "tpts2": [
                    1571,
                    1573
                ],
                "d": [
                    1777,
                    1852,
                    1573,
                    1574
                ],
                "np.arctan2": [
                    1574
                ],
                "np.rad2deg": [
                    1577
                ],
                "self._init": [
                    1615
                ],
                "Transform.__init__": [
                    2122,
                    2286,
                    2222,
                    1619,
                    1688
                ],
                "child.input_dims": [
                    1620,
                    1662
                ],
                "child.output_dims": [
                    1621,
                    1663
                ],
                "self._set": [
                    1669,
                    1622
                ],
                "self._child.__eq__": [
                    1626
                ],
                "self._child": [
                    1632,
                    1636,
                    1639,
                    1675,
                    1676,
                    1677,
                    1626
                ],
                "self._child.frozen": [
                    1636
                ],
                "child.transform": [
                    1641
                ],
                "child.transform_affine": [
                    1642
                ],
                "child.transform_non_affine": [
                    1643
                ],
                "self.transform_path": [
                    1644
                ],
                "child.transform_path": [
                    1644
                ],
                "child.transform_path_affine": [
                    1645
                ],
                "child.transform_path_non_affine": [
                    1646
                ],
                "child.get_affine": [
                    1647
                ],
                "self.inverted": [
                    1648
                ],
                "child.inverted": [
                    1648
                ],
                "self.get_matrix": [
                    1697,
                    1763,
                    1803,
                    1649,
                    1780,
                    1752,
                    1756,
                    1693
                ],
                "child.get_matrix": [
                    1649
                ],
                "self._child.is_affine": [
                    1675
                ],
                "self._child.is_separable": [
                    1676
                ],
                "self._child.has_inverse": [
                    1677
                ],
                "self._inverted": [
                    2593,
                    2242,
                    2436,
                    2629,
                    2535,
                    1865,
                    1802,
                    2553,
                    2573,
                    1807,
                    2511,
                    1809,
                    2644,
                    2613,
                    2487,
                    1689
                ],
                "getattr": [
                    1696
                ],
                "np.all": [
                    1697
                ],
                "other.get_matrix": [
                    1888,
                    1697
                ],
                "path._interpolation_steps": [
                    1720
                ],
                "AffineBase": [
                    1731
                ],
                "mtx": [
                    1763,
                    1764,
                    1803,
                    2188,
                    2189,
                    1807,
                    1780,
                    1782,
                    1879,
                    1784,
                    1756,
                    1757
                ],
                "tuple": [
                    1764
                ],
                "flat": [
                    1764
                ],
                "swapaxes": [
                    1764
                ],
                "e": [
                    1777,
                    1852
                ],
                "f": [
                    1777,
                    1852
                ],
                "tpoints": [
                    1782,
                    1783
                ],
                "affine_transform": [
                    1784,
                    1782
                ],
                "points.data": [
                    1782
                ],
                "np.ma.getmask": [
                    1783
                ],
                "_transform_affine": [
                    1787
                ],
                "transform_affine": [
                    1787
                ],
                "np.ndarray": [
                    1794
                ],
                "self._transform_affine": [
                    1798
                ],
                "inv": [
                    1807
                ],
                "Affine2DBase": [
                    2624,
                    1827,
                    2468,
                    2531,
                    2406,
                    2024,
                    2382,
                    2255,
                    2256,
                    2194,
                    2227,
                    1812,
                    2482,
                    2516,
                    2578,
                    2618,
                    2589,
                    1887
                ],
                "Affine2DBase.__init__": [
                    2624,
                    1827,
                    2531,
                    2406,
                    2482,
                    2227,
                    2589
                ],
                "matrix": [
                    1828,
                    1830,
                    1831
                ],
                "IdentityTransform._mtx.copy": [
                    2641,
                    1906,
                    1830
                ],
                "IdentityTransform._mtx": [
                    2641,
                    1906,
                    1830
                ],
                "self._mtx": [
                    2433,
                    1922,
                    2438,
                    2569,
                    2575,
                    2592,
                    1831,
                    1838,
                    1968,
                    2609,
                    2228,
                    2486,
                    2615,
                    2234,
                    2241,
                    1987,
                    2244,
                    2628,
                    1867,
                    2507,
                    2513,
                    2641,
                    2642,
                    2645,
                    2006,
                    1879,
                    1888,
                    2534,
                    2410,
                    1906,
                    2549,
                    2041,
                    2555
                ],
                "theta": [
                    1944,
                    1918,
                    1919
                ],
                "rotate_mtx": [
                    1920,
                    1922
                ],
                "np.dot": [
                    2433,
                    1922,
                    1987,
                    2373,
                    1968,
                    2006
                ],
                "self.rotate": [
                    1934
                ],
                "degrees": [
                    1956,
                    1934
                ],
                "translate": [
                    1944,
                    1956,
                    2902
                ],
                "self.translate": [
                    1944,
                    1956
                ],
                "rotate_deg": [
                    1956
                ],
                "translate_mtx": [
                    1968,
                    1966
                ],
                "sy": [
                    1984,
                    1986,
                    1983
                ],
                "sx": [
                    1984,
                    1986
                ],
                "scale_mtx": [
                    1985,
                    1987
                ],
                "rotX": [
                    2002,
                    2005
                ],
                "np.tan": [
                    2002,
                    2003
                ],
                "xShear": [
                    2002,
                    2021
                ],
                "rotY": [
                    2003,
                    2005
                ],
                "yShear": [
                    2003,
                    2021
                ],
                "skew_mtx": [
                    2004,
                    2006
                ],
                "self.skew": [
                    2021
                ],
                "_mtx": [
                    2029
                ],
                "np.identity": [
                    2029
                ],
                "BlendedAffine2D": [
                    2080,
                    2257
                ],
                "BlendedGenericTransform": [
                    2080,
                    2258,
                    2175
                ],
                "self._x": [
                    2180,
                    2181,
                    2183,
                    2081,
                    2082,
                    2083,
                    2088,
                    2223,
                    2096,
                    2233,
                    2234,
                    2236,
                    2123,
                    2130,
                    2137,
                    2139,
                    2143,
                    2147,
                    2149,
                    2175
                ],
                "other._x": [
                    2081
                ],
                "self._y": [
                    2081,
                    2082,
                    2147,
                    2180,
                    2233,
                    2150,
                    2184,
                    2089,
                    2124,
                    2224,
                    2097,
                    2130,
                    2137,
                    2139,
                    2237,
                    2175,
                    2143
                ],
                "other._y": [
                    2081
                ],
                "self._x.contains_branch": [
                    2088
                ],
                "self._y.contains_branch": [
                    2089
                ],
                "_BlendedMixin": [
                    2194,
                    2100
                ],
                "x_transform": [
                    2215,
                    2216,
                    2123,
                    2125,
                    2223,
                    2255,
                    2225,
                    2257,
                    2258
                ],
                "y_transform": [
                    2215,
                    2216,
                    2124,
                    2125,
                    2224,
                    2225,
                    2256,
                    2257,
                    2258
                ],
                "self._affine": [
                    2179,
                    2181,
                    2189,
                    2126,
                    2191
                ],
                "self._x.depth": [
                    2130
                ],
                "self._y.depth": [
                    2130
                ],
                "self._x.is_affine": [
                    2137,
                    2147
                ],
                "self._y.is_affine": [
                    2137,
                    2147
                ],
                "self._x.has_inverse": [
                    2139
                ],
                "self._y.has_inverse": [
                    2139
                ],
                "blended_transform_factory": [
                    2143
                ],
                "self._x.frozen": [
                    2143
                ],
                "self._y.frozen": [
                    2143
                ],
                "x.input_dims": [
                    2152,
                    2155
                ],
                "x.transform_non_affine": [
                    2153,
                    2156,
                    2158
                ],
                "x_points": [
                    2156,
                    2158,
                    2159,
                    2167,
                    2169,
                    2171
                ],
                "x_points.reshape": [
                    2159
                ],
                "y.input_dims": [
                    2161
                ],
                "y_points": [
                    2162,
                    2164,
                    2165,
                    2168,
                    2169,
                    2171
                ],
                "y.transform_non_affine": [
                    2162,
                    2164
                ],
                "y_points.reshape": [
                    2165
                ],
                "np.ma.concatenate": [
                    2169
                ],
                "np.concatenate": [
                    2171
                ],
                "self._x.inverted": [
                    2175
                ],
                "self._y.inverted": [
                    2175
                ],
                "self._x.get_affine": [
                    2181,
                    2183
                ],
                "x_mtx": [
                    2241,
                    2236,
                    2188,
                    2183
                ],
                "y_mtx": [
                    2184,
                    2241,
                    2188,
                    2237
                ],
                "self._y.get_affine": [
                    2184
                ],
                "np.vstack": [
                    2241,
                    2188
                ],
                "x_transform.is_affine": [
                    2215
                ],
                "y_transform.is_affine": [
                    2215
                ],
                "x_transform.is_separable": [
                    2216
                ],
                "y_transform.is_separable": [
                    2216
                ],
                "is_correct": [
                    2217,
                    2218
                ],
                "self._x.get_matrix": [
                    2234,
                    2236
                ],
                "self._y.get_matrix": [
                    2237
                ],
                "a.output_dims": [
                    2280,
                    2400
                ],
                "b.input_dims": [
                    2280,
                    2400
                ],
                "a.input_dims": [
                    2403,
                    2283
                ],
                "b.output_dims": [
                    2404,
                    2284
                ],
                "self._a": [
                    2435,
                    2309,
                    2318,
                    2324,
                    2327,
                    2329,
                    2330,
                    2332,
                    2334,
                    2341,
                    2350,
                    2352,
                    2353,
                    2356,
                    2360,
                    2362,
                    2363,
                    2366,
                    2374,
                    2379,
                    2407,
                    2414,
                    2287,
                    2417,
                    2420,
                    2295,
                    2427
                ],
                "self._b": [
                    2434,
                    2308,
                    2319,
                    2325,
                    2326,
                    2329,
                    2330,
                    2332,
                    2334,
                    2342,
                    2350,
                    2352,
                    2355,
                    2360,
                    2362,
                    2365,
                    2370,
                    2371,
                    2373,
                    2379,
                    2408,
                    2414,
                    2288,
                    2418,
                    2419,
                    2295,
                    2428
                ],
                "self._a.frozen": [
                    2295
                ],
                "self._b.frozen": [
                    2295
                ],
                "CompositeGenericTransform": [
                    2296,
                    2465,
                    2378,
                    2317
                ],
                "frozen.frozen": [
                    2297
                ],
                "Transform.INVALID_AFFINE": [
                    2307
                ],
                "self._b.is_affine": [
                    2370,
                    2308,
                    2362,
                    2350,
                    2352,
                    2360,
                    2330
                ],
                "self._a.is_affine": [
                    2309,
                    2362,
                    2350,
                    2352,
                    2360,
                    2330
                ],
                "invalidating_node": [
                    2314,
                    2309
                ],
                "Transform.INVALID": [
                    2311
                ],
                "Transform._invalidate_internal": [
                    2313
                ],
                "CompositeAffine2D": [
                    2464,
                    2317
                ],
                "other._a": [
                    2318
                ],
                "other._b": [
                    2319
                ],
                "left": [
                    2417,
                    2418,
                    2419,
                    2324,
                    2325,
                    2326,
                    2327,
                    2420
                ],
                "right": [
                    2417,
                    2418,
                    2419,
                    2324,
                    2325,
                    2326,
                    2327,
                    2420
                ],
                "self._a._iter_break_from_left_to_right": [
                    2417,
                    2324
                ],
                "self._b._iter_break_from_left_to_right": [
                    2419,
                    2326
                ],
                "depth": [
                    2329
                ],
                "self._a.depth": [
                    2329,
                    2414
                ],
                "self._b.depth": [
                    2329,
                    2414
                ],
                "self._a.is_separable": [
                    2332
                ],
                "self._b.is_separable": [
                    2332
                ],
                "self._a.has_inverse": [
                    2334
                ],
                "self._b.has_inverse": [
                    2334
                ],
                "self._a.transform_non_affine": [
                    2353
                ],
                "self._b.transform_non_affine": [
                    2355
                ],
                "self._a.transform": [
                    2356
                ],
                "self._a.transform_path_non_affine": [
                    2363
                ],
                "self._b.transform_path_non_affine": [
                    2365
                ],
                "self._a.transform_path": [
                    2366
                ],
                "self._b.get_affine": [
                    2371,
                    2373
                ],
                "self._a.get_affine": [
                    2374
                ],
                "self._b.inverted": [
                    2379
                ],
                "self._a.inverted": [
                    2379
                ],
                "a.is_affine": [
                    2398
                ],
                "b.is_affine": [
                    2398
                ],
                "self._b.get_matrix": [
                    2434
                ],
                "self._a.get_matrix": [
                    2435
                ],
                "boxin.is_bbox": [
                    2586,
                    2479
                ],
                "boxin": [
                    2479,
                    2483,
                    2485,
                    2586,
                    2590,
                    2591
                ],
                "boxout.is_bbox": [
                    2528,
                    2479
                ],
                "boxout": [
                    2528,
                    2532,
                    2533,
                    2479,
                    2484,
                    2485
                ],
                "self._boxin": [
                    2500,
                    2599,
                    2590,
                    2604,
                    2483,
                    2494
                ],
                "self._boxout": [
                    2532,
                    2501,
                    2566,
                    2541,
                    2546,
                    2484,
                    2495
                ],
                "inl": [
                    2609,
                    2507,
                    2500,
                    2604
                ],
                "inb": [
                    2610,
                    2508,
                    2500,
                    2604
                ],
                "inw": [
                    2500,
                    2502,
                    2604,
                    2605,
                    2607
                ],
                "inh": [
                    2500,
                    2503,
                    2604,
                    2605,
                    2608
                ],
                "self._boxin.bounds": [
                    2500,
                    2604
                ],
                "outl": [
                    2549,
                    2546,
                    2507,
                    2501
                ],
                "outb": [
                    2546,
                    2508,
                    2501,
                    2550
                ],
                "outw": [
                    2501,
                    2502,
                    2546,
                    2547,
                    2549
                ],
                "outh": [
                    2501,
                    2503,
                    2546,
                    2547,
                    2550
                ],
                "self._boxout.bounds": [
                    2546,
                    2501
                ],
                "x_scale": [
                    2502,
                    2504,
                    2507,
                    2607,
                    2609
                ],
                "y_scale": [
                    2503,
                    2504,
                    2508,
                    2608,
                    2610
                ],
                "BboxTransformTo": [
                    2558
                ],
                "xmax": [
                    2569,
                    2566,
                    2567
                ],
                "ymax": [
                    2570,
                    2566,
                    2567
                ],
                "self._boxout.max": [
                    2566
                ],
                "self._t": [
                    2625,
                    2642,
                    2635
                ],
                "xt": [
                    2625
                ],
                "yt": [
                    2625
                ],
                "self._scale_trans": [
                    2626,
                    2642
                ],
                "scale_trans": [
                    2626,
                    2627
                ],
                "self._scale_trans.transform": [
                    2642
                ],
                "TransformNode.__init__": [
                    2731,
                    2668
                ],
                "self._path": [
                    2748,
                    2669,
                    2737,
                    2745,
                    2681,
                    2684,
                    2685
                ],
                "self._transformed_path": [
                    2672,
                    2706,
                    2738,
                    2745,
                    2679,
                    2680,
                    2713,
                    2749
                ],
                "self._transformed_points": [
                    2697,
                    2673,
                    2739,
                    2682,
                    2751
                ],
                "self.INVALID_NON_AFFINE": [
                    2746,
                    2747,
                    2678
                ],
                "self._transform.transform_path_non_affine": [
                    2681,
                    2750
                ],
                "self._transform.transform_non_affine": [
                    2753,
                    2684
                ],
                "self._path.vertices": [
                    2684
                ],
                "self._revalidate": [
                    2696,
                    2705,
                    2712
                ],
                "self._transform.transform_path_affine": [
                    2713
                ],
                "self._transform.get_affine": [
                    2716
                ],
                "TransformedPath": [
                    2719
                ],
                "patch.get_transform": [
                    2733
                ],
                "patch": [
                    2737,
                    2733,
                    2734
                ],
                "self._patch": [
                    2742,
                    2734
                ],
                "patch.get_path": [
                    2737
                ],
                "patch_path": [
                    2753,
                    2754,
                    2742,
                    2745,
                    2748,
                    2750
                ],
                "self._patch.get_path": [
                    2742
                ],
                "patch_path.vertices": [
                    2753
                ],
                "np.isfinite": [
                    2786
                ],
                "vmin": [
                    2786,
                    2790,
                    2791,
                    2794,
                    2796,
                    2799,
                    2800,
                    2801,
                    2804,
                    2808,
                    2809
                ],
                "vmax": [
                    2786,
                    2790,
                    2791,
                    2794,
                    2797,
                    2799,
                    2800,
                    2802,
                    2805,
                    2808,
                    2809
                ],
                "expander": [
                    2787,
                    2796,
                    2797,
                    2801,
                    2802,
                    2804,
                    2805
                ],
                "swapped": [
                    2792,
                    2789,
                    2807
                ],
                "maxabsvalue": [
                    2794,
                    2795,
                    2799
                ],
                "abs": [
                    2794,
                    2804,
                    2805
                ],
                "tiny": [
                    2795,
                    2799
                ],
                "np.finfo": [
                    2795
                ],
                "increasing": [
                    2807
                ],
                "rtol": [
                    2857,
                    2858
                ],
                "units": [
                    2905,
                    2908,
                    2901,
                    2911
                ],
                "trans": [
                    2912,
                    2902
                ],
                "fig": [
                    2912,
                    2903
                ],
                "cbook._check_in_list": [
                    2911
                ],
                "ScaledTranslation": [
                    2912
                ],
                "fig.dpi_scale_trans": [
                    2912
                ]
            },
            "filtered_variables_in_file": {
                "DEBUG": [
                    98,
                    196,
                    262,
                    2567,
                    2504,
                    2605,
                    750,
                    47,
                    1042,
                    179,
                    1107,
                    2547,
                    1786
                ],
                "re.sub": [
                    51
                ],
                "re": [
                    51
                ],
                "obj": [
                    51
                ],
                "_gid": [
                    62
                ],
                "INVALID_NON_AFFINE": [
                    67,
                    69
                ],
                "INVALID_AFFINE": [
                    68,
                    69
                ],
                "INVALID": [
                    69
                ],
                "is_affine": [
                    260,
                    2215,
                    73,
                    2217,
                    1675,
                    1685,
                    2137,
                    2330
                ],
                "is_bbox": [
                    74,
                    259
                ],
                "pass_through": [
                    2269,
                    76,
                    2111,
                    1607
                ],
                "self._parents": [
                    106,
                    113,
                    114,
                    116,
                    154,
                    91
                ],
                "self": [
                    2069,
                    2073,
                    2081,
                    2082,
                    2083,
                    2088,
                    2089,
                    2095,
                    2096,
                    2097,
                    2122,
                    2123,
                    2124,
                    2125,
                    2126,
                    2130,
                    2137,
                    91,
                    2139,
                    95,
                    96,
                    2143,
                    2147,
                    101,
                    2149,
                    2150,
                    105,
                    106,
                    109,
                    113,
                    114,
                    116,
                    2175,
                    129,
                    130,
                    131,
                    132,
                    2179,
                    2180,
                    2181,
                    2183,
                    2184,
                    2189,
                    2190,
                    2191,
                    149,
                    151,
                    152,
                    154,
                    159,
                    2222,
                    175,
                    2223,
                    177,
                    2224,
                    2225,
                    2227,
                    2228,
                    183,
                    184,
                    2232,
                    2233,
                    2234,
                    2236,
                    2237,
                    2241,
                    194,
                    2242,
                    2243,
                    2244,
                    2283,
                    2284,
                    2286,
                    2287,
                    2288,
                    2289,
                    245,
                    2293,
                    2295,
                    2308,
                    2309,
                    2313,
                    2318,
                    2319,
                    273,
                    2324,
                    277,
                    2325,
                    2326,
                    2327,
                    2329,
                    282,
                    2330,
                    2332,
                    2334,
                    292,
                    2340,
                    2341,
                    2342,
                    2346,
                    302,
                    2350,
                    2352,
                    2353,
                    2355,
                    2356,
                    312,
                    2360,
                    2362,
                    2363,
                    2365,
                    2366,
                    322,
                    2370,
                    2371,
                    2373,
                    2374,
                    2379,
                    332,
                    342,
                    347,
                    352,
                    2403,
                    2404,
                    357,
                    2406,
                    2407,
                    2408,
                    2409,
                    362,
                    2410,
                    2414,
                    367,
                    2417,
                    2418,
                    2419,
                    372,
                    2420,
                    2426,
                    2427,
                    2428,
                    381,
                    2432,
                    2433,
                    2434,
                    2435,
                    2436,
                    2437,
                    390,
                    2438,
                    395,
                    401,
                    407,
                    413,
                    419,
                    428,
                    2482,
                    435,
                    2483,
                    2484,
                    2485,
                    2486,
                    2487,
                    442,
                    2493,
                    2494,
                    2495,
                    2499,
                    452,
                    2500,
                    2501,
                    2507,
                    2511,
                    2512,
                    2513,
                    468,
                    475,
                    482,
                    2531,
                    2532,
                    2533,
                    2534,
                    2535,
                    2540,
                    493,
                    2541,
                    2545,
                    2546,
                    2549,
                    2553,
                    2554,
                    2555,
                    509,
                    2565,
                    2566,
                    519,
                    2569,
                    2573,
                    2574,
                    2575,
                    2589,
                    2590,
                    2591,
                    2592,
                    2593,
                    2598,
                    2599,
                    555,
                    2603,
                    2604,
                    558,
                    561,
                    562,
                    2609,
                    2613,
                    2614,
                    2615,
                    573,
                    574,
                    575,
                    2624,
                    2625,
                    2626,
                    2627,
                    2628,
                    2629,
                    2634,
                    2635,
                    590,
                    2639,
                    2641,
                    2642,
                    2643,
                    2644,
                    2645,
                    598,
                    599,
                    607,
                    618,
                    2668,
                    2669,
                    2670,
                    2671,
                    2672,
                    2673,
                    2678,
                    2679,
                    2680,
                    2681,
                    2682,
                    636,
                    637,
                    2684,
                    2685,
                    2686,
                    648,
                    2696,
                    2697,
                    655,
                    656,
                    2705,
                    2706,
                    660,
                    664,
                    2712,
                    2713,
                    2716,
                    669,
                    678,
                    2731,
                    2734,
                    687,
                    2735,
                    2736,
                    2737,
                    2738,
                    2739,
                    2742,
                    2745,
                    2746,
                    2747,
                    2748,
                    2749,
                    2750,
                    2751,
                    2753,
                    2755,
                    738,
                    743,
                    744,
                    745,
                    749,
                    754,
                    755,
                    758,
                    759,
                    792,
                    795,
                    798,
                    812,
                    833,
                    839,
                    842,
                    844,
                    845,
                    847,
                    848,
                    873,
                    878,
                    879,
                    883,
                    884,
                    888,
                    889,
                    893,
                    894,
                    898,
                    899,
                    903,
                    904,
                    908,
                    909,
                    913,
                    914,
                    920,
                    921,
                    922,
                    926,
                    930,
                    934,
                    941,
                    942,
                    950,
                    951,
                    952,
                    958,
                    959,
                    960,
                    964,
                    968,
                    969,
                    973,
                    974,
                    998,
                    999,
                    1000,
                    1001,
                    1002,
                    1008,
                    1009,
                    1010,
                    1014,
                    1015,
                    1019,
                    1034,
                    1039,
                    1040,
                    1046,
                    1047,
                    1081,
                    1082,
                    1083,
                    1084,
                    1087,
                    1093,
                    1094,
                    1095,
                    1099,
                    1100,
                    1101,
                    1103,
                    1104,
                    1105,
                    1111,
                    1112,
                    1120,
                    1123,
                    1127,
                    1128,
                    1129,
                    1136,
                    1139,
                    1143,
                    1144,
                    1145,
                    1152,
                    1155,
                    1159,
                    1160,
                    1161,
                    1168,
                    1171,
                    1175,
                    1176,
                    1177,
                    1248,
                    1267,
                    1294,
                    1298,
                    1314,
                    1319,
                    1347,
                    1352,
                    1361,
                    1371,
                    1387,
                    1390,
                    1402,
                    1428,
                    1462,
                    1476,
                    1490,
                    1492,
                    1503,
                    1515,
                    1527,
                    1554,
                    1570,
                    1571,
                    1615,
                    1616,
                    1619,
                    1620,
                    1621,
                    1622,
                    1623,
                    1626,
                    1631,
                    1632,
                    1636,
                    1639,
                    1641,
                    1642,
                    1643,
                    1644,
                    1645,
                    1646,
                    1647,
                    1648,
                    1649,
                    1662,
                    1663,
                    1668,
                    1669,
                    1671,
                    1672,
                    1673,
                    1675,
                    1676,
                    1677,
                    1688,
                    1689,
                    1693,
                    1697,
                    1702,
                    1715,
                    1719,
                    1728,
                    1752,
                    1756,
                    1763,
                    1780,
                    1798,
                    1802,
                    1803,
                    1805,
                    1806,
                    1807,
                    1808,
                    1809,
                    1827,
                    1831,
                    1832,
                    1837,
                    1838,
                    1864,
                    1865,
                    1866,
                    1867,
                    1879,
                    1880,
                    1888,
                    1889,
                    1906,
                    1907,
                    1908,
                    1922,
                    1923,
                    1924,
                    1934,
                    1944,
                    1956,
                    1968,
                    1969,
                    1970,
                    1987,
                    1988,
                    1989,
                    2006,
                    2007,
                    2008,
                    2021,
                    2033,
                    2037,
                    2041
                ],
                "self._invalid": [
                    2432,
                    2179,
                    2437,
                    2565,
                    1671,
                    1673,
                    1802,
                    2190,
                    1039,
                    1808,
                    2574,
                    149,
                    152,
                    1832,
                    2603,
                    941,
                    2614,
                    2232,
                    2746,
                    2243,
                    2499,
                    2755,
                    1864,
                    1866,
                    1099,
                    2639,
                    1104,
                    2512,
                    2643,
                    1623,
                    95,
                    2545,
                    2293,
                    1014,
                    2678,
                    2554,
                    2686
                ],
                "self._shorthand_name": [
                    96,
                    1805,
                    101,
                    1806
                ],
                "shorthand_name": [
                    96,
                    1804,
                    1806,
                    1807
                ],
                "self.__dict__": [
                    105,
                    109
                ],
                "k": [
                    113,
                    106,
                    116
                ],
                "v": [
                    113,
                    106,
                    116
                ],
                "self._parents.items": [
                    106,
                    116
                ],
                "data_dict": [
                    109
                ],
                "weakref.ref": [
                    113,
                    175
                ],
                "weakref": [
                    113,
                    175
                ],
                "target.pop": [
                    176,
                    115
                ],
                "target": [
                    176,
                    115
                ],
                "sid": [
                    176,
                    115
                ],
                "__deepcopy__": [
                    122
                ],
                "__copy__": [
                    122
                ],
                "value": [
                    129,
                    131,
                    132,
                    2307,
                    2311,
                    2313,
                    812,
                    149,
                    152,
                    159
                ],
                "self.INVALID": [
                    129
                ],
                "self.is_affine": [
                    130
                ],
                "self.INVALID_AFFINE": [
                    131
                ],
                "self._invalidate_internal": [
                    132
                ],
                "status_changed": [
                    149,
                    151
                ],
                "self.pass_through": [
                    151
                ],
                "parent": [
                    1233,
                    1239,
                    154,
                    156,
                    157,
                    158
                ],
                "self._parents.values": [
                    154
                ],
                "parent._invalidate_internal": [
                    158
                ],
                "child": [
                    1668,
                    1669,
                    171,
                    176,
                    177,
                    1614,
                    1615,
                    1616,
                    1620,
                    1621,
                    1622,
                    1639,
                    1641,
                    1642,
                    235,
                    1644,
                    237,
                    1643,
                    1645,
                    240,
                    1646,
                    242,
                    1647,
                    1648,
                    1649,
                    1662,
                    1663
                ],
                "children": [
                    184,
                    171,
                    183
                ],
                "ref": [
                    177,
                    175
                ],
                "child._parents": [
                    176,
                    177
                ],
                "_set_children": [
                    185,
                    180
                ],
                "set_children": [
                    185,
                    180
                ],
                "self._set_children": [
                    183
                ],
                "self._children": [
                    184
                ],
                "set_children.__doc__": [
                    185
                ],
                "_set_children.__doc__": [
                    185
                ],
                "seen": [
                    216,
                    219,
                    221
                ],
                "root": [
                    224,
                    226,
                    232,
                    234,
                    235,
                    236,
                    239,
                    219,
                    221,
                    223
                ],
                "seen.add": [
                    221
                ],
                "props": [
                    227,
                    228,
                    229,
                    230,
                    232,
                    222
                ],
                "label": [
                    225,
                    229,
                    223
                ],
                "root.__class__.__name__": [
                    223
                ],
                "root.__class__": [
                    223
                ],
                "root._invalid": [
                    224
                ],
                "highlight": [
                    226
                ],
                "join": [
                    230
                ],
                "props.items": [
                    230
                ],
                "fobj.write": [
                    232,
                    244,
                    238,
                    246
                ],
                "fobj": [
                    232,
                    244,
                    238,
                    246
                ],
                "root._children": [
                    235
                ],
                "name": [
                    241,
                    236
                ],
                "key": [
                    236
                ],
                "val": [
                    898,
                    903,
                    2858,
                    236,
                    237,
                    878,
                    2831,
                    2878,
                    883,
                    888,
                    893,
                    1086
                ],
                "root.__dict__.items": [
                    236
                ],
                "root.__dict__": [
                    236
                ],
                "recurse": [
                    242,
                    245
                ],
                "TransformNode": [
                    2731,
                    2668,
                    274,
                    759,
                    2648,
                    249,
                    1180
                ],
                "points": [
                    1024,
                    2049,
                    1026,
                    1794,
                    1796,
                    2053,
                    1030,
                    1798,
                    265,
                    395,
                    267,
                    268,
                    269,
                    396,
                    401,
                    402,
                    1046,
                    407,
                    664,
                    408,
                    665,
                    919,
                    920,
                    921,
                    1047,
                    1048,
                    2346,
                    1711,
                    2351,
                    2353,
                    2356,
                    950,
                    951,
                    838,
                    844,
                    1100,
                    1102,
                    847,
                    1111,
                    1112,
                    1113,
                    739,
                    740,
                    2148,
                    743,
                    2153,
                    2156,
                    2158,
                    754,
                    755,
                    2162,
                    1781,
                    1782,
                    1783,
                    1784,
                    2164,
                    1019,
                    2045
                ],
                "np.ma.MaskedArray": [
                    1794,
                    265,
                    1783,
                    1781,
                    2167,
                    2168
                ],
                "np.ma": [
                    1024,
                    1794,
                    265,
                    1394,
                    1781,
                    2167,
                    1783,
                    2168,
                    2169,
                    1087
                ],
                "np": [
                    1024,
                    2049,
                    2053,
                    2569,
                    1034,
                    1556,
                    1557,
                    1565,
                    1567,
                    1568,
                    1574,
                    1577,
                    2609,
                    1087,
                    1101,
                    2167,
                    2168,
                    2169,
                    634,
                    2171,
                    635,
                    648,
                    2188,
                    659,
                    1697,
                    679,
                    700,
                    701,
                    702,
                    703,
                    704,
                    2241,
                    713,
                    714,
                    715,
                    716,
                    2786,
                    739,
                    744,
                    2795,
                    1777,
                    1781,
                    1783,
                    769,
                    1794,
                    265,
                    267,
                    787,
                    1852,
                    2373,
                    347,
                    352,
                    357,
                    1385,
                    362,
                    367,
                    1394,
                    372,
                    1918,
                    1919,
                    1920,
                    2433,
                    1922,
                    1934,
                    919,
                    920,
                    1966,
                    1968,
                    950,
                    958,
                    1985,
                    1987,
                    2507,
                    2002,
                    2003,
                    2004,
                    2006,
                    2021,
                    2029,
                    2549,
                    2045,
                    510
                ],
                "cbook._warn_external": [
                    266,
                    1795,
                    270
                ],
                "cbook": [
                    993,
                    1795,
                    1767,
                    266,
                    2667,
                    1614,
                    270,
                    2911,
                    279,
                    1887
                ],
                "np.asarray": [
                    739,
                    267,
                    1556,
                    1557,
                    634
                ],
                "Bbox": [
                    512,
                    609,
                    705,
                    769,
                    778,
                    620,
                    717,
                    273,
                    562,
                    689,
                    660,
                    787,
                    598,
                    1462,
                    665,
                    764,
                    669,
                    574
                ],
                "copy": [
                    1752,
                    273
                ],
                "self.get_points": [
                    509,
                    390,
                    395,
                    273,
                    401,
                    277,
                    407,
                    664,
                    282,
                    413,
                    419,
                    292,
                    678,
                    302,
                    312,
                    322,
                    332,
                    342,
                    347,
                    352,
                    357,
                    362,
                    367,
                    372,
                    381
                ],
                "frozen.__doc__": [
                    274
                ],
                "frozen": [
                    274,
                    2294,
                    2296,
                    2297,
                    2298
                ],
                "TransformNode.__doc__": [
                    274
                ],
                "tolist": [
                    282
                ],
                "cbook.deprecated": [
                    1767,
                    279
                ],
                "np.min": [
                    352,
                    367,
                    347,
                    701,
                    703
                ],
                "np.max": [
                    704,
                    357,
                    362,
                    372,
                    702
                ],
                "x0": [
                    778,
                    413,
                    414,
                    678,
                    679,
                    428,
                    429,
                    701,
                    1085,
                    705,
                    713,
                    717,
                    468,
                    469,
                    607,
                    608,
                    609,
                    1127,
                    1128,
                    618,
                    620
                ],
                "y0": [
                    778,
                    413,
                    414,
                    678,
                    679,
                    435,
                    436,
                    1085,
                    703,
                    705,
                    715,
                    717,
                    475,
                    476,
                    607,
                    609,
                    618,
                    619,
                    620,
                    1143,
                    1144
                ],
                "x1": [
                    1159,
                    1160,
                    413,
                    414,
                    678,
                    679,
                    428,
                    429,
                    1085,
                    702,
                    705,
                    714,
                    717,
                    468,
                    469,
                    607,
                    608,
                    618,
                    620
                ],
                "y1": [
                    1175,
                    1176,
                    413,
                    414,
                    678,
                    679,
                    435,
                    436,
                    1085,
                    704,
                    705,
                    716,
                    717,
                    475,
                    476,
                    607,
                    609,
                    618,
                    619
                ],
                "flatten": [
                    419
                ],
                "self.intervalx": [
                    468,
                    428
                ],
                "x": [
                    648,
                    1944,
                    1955,
                    1956,
                    429,
                    442,
                    469,
                    2902,
                    2906,
                    2912,
                    482,
                    2149,
                    2152,
                    2153,
                    2155,
                    2156,
                    2158,
                    1527,
                    1528
                ],
                "self.intervaly": [
                    435,
                    475
                ],
                "y": [
                    2912,
                    482,
                    1955,
                    1956,
                    2150,
                    2152,
                    2161,
                    2162,
                    436,
                    2164,
                    2902,
                    1944,
                    442,
                    2907,
                    476
                ],
                "self.containsx": [
                    442
                ],
                "self.containsy": [
                    442
                ],
                "ax1": [
                    452,
                    454,
                    455,
                    493,
                    462,
                    495,
                    496,
                    503
                ],
                "ay1": [
                    452,
                    456,
                    457,
                    493,
                    462,
                    497,
                    498,
                    503
                ],
                "ax2": [
                    452,
                    454,
                    455,
                    493,
                    462,
                    495,
                    496,
                    503
                ],
                "ay2": [
                    452,
                    456,
                    457,
                    493,
                    462,
                    497,
                    498,
                    503
                ],
                "self.extents": [
                    618,
                    452,
                    493,
                    607
                ],
                "bx1": [
                    453,
                    458,
                    459,
                    462,
                    494,
                    499,
                    500,
                    503
                ],
                "by1": [
                    453,
                    460,
                    461,
                    462,
                    494,
                    501,
                    502,
                    503
                ],
                "bx2": [
                    453,
                    458,
                    459,
                    462,
                    494,
                    499,
                    500,
                    503
                ],
                "by2": [
                    453,
                    460,
                    461,
                    462,
                    494,
                    501,
                    502,
                    503
                ],
                "other.extents": [
                    453,
                    494
                ],
                "other": [
                    2317,
                    1294,
                    2318,
                    2319,
                    1299,
                    1696,
                    1697,
                    2080,
                    2081,
                    2083,
                    958,
                    959,
                    1344,
                    1348,
                    453,
                    1351,
                    1360,
                    1361,
                    1626,
                    1887,
                    1248,
                    1249,
                    1888,
                    494
                ],
                "self.fully_containsx": [
                    482
                ],
                "self.fully_containsy": [
                    482
                ],
                "pts": [
                    1570,
                    1567,
                    1557,
                    1558,
                    1561,
                    509,
                    510,
                    511
                ],
                "ll": [
                    512,
                    510
                ],
                "ul": [
                    512,
                    510
                ],
                "lr": [
                    512,
                    510
                ],
                "transform.transform": [
                    510
                ],
                "transform": [
                    993,
                    994,
                    519,
                    1000,
                    1001,
                    2088,
                    2089,
                    2346,
                    2667,
                    2670,
                    2671,
                    688,
                    2733,
                    2735,
                    2736,
                    1428,
                    510
                ],
                "np.array": [
                    1920,
                    1985,
                    679,
                    648,
                    744,
                    1034,
                    2507,
                    2569,
                    1966,
                    1777,
                    2609,
                    659,
                    2004,
                    2549,
                    919,
                    1852,
                    510
                ],
                "self.transformed": [
                    519
                ],
                "transform.inverted": [
                    519
                ],
                "coefs": [
                    521
                ],
                "container": [
                    554,
                    555,
                    556,
                    589,
                    590,
                    591
                ],
                "l": [
                    563,
                    556,
                    918,
                    919
                ],
                "b": [
                    1920,
                    2828,
                    2829,
                    2830,
                    2831,
                    918,
                    919,
                    2460,
                    2461,
                    2463,
                    2464,
                    2465,
                    2854,
                    2855,
                    2856,
                    2857,
                    2858,
                    556,
                    564,
                    1852,
                    2877,
                    2878,
                    2398,
                    2400,
                    2404,
                    2280,
                    2408,
                    2409,
                    2284,
                    2288,
                    1777,
                    2289,
                    1919
                ],
                "w": [
                    608,
                    609,
                    556,
                    591,
                    592,
                    594,
                    563,
                    918,
                    919,
                    573,
                    575
                ],
                "h": [
                    619,
                    556,
                    620,
                    591,
                    919,
                    593,
                    564,
                    596,
                    597,
                    918,
                    573,
                    575
                ],
                "container.bounds": [
                    556
                ],
                "c": [
                    557,
                    558,
                    560,
                    1777,
                    1852
                ],
                "cx": [
                    560,
                    563,
                    558
                ],
                "cy": [
                    560,
                    564,
                    558
                ],
                "self.coefs": [
                    558
                ],
                "L": [
                    561,
                    563
                ],
                "B": [
                    561,
                    564
                ],
                "W": [
                    561,
                    594,
                    563,
                    596,
                    599
                ],
                "H": [
                    592,
                    561,
                    593,
                    564,
                    597,
                    599
                ],
                "self.bounds": [
                    561
                ],
                "self._points": [
                    898,
                    903,
                    1034,
                    908,
                    1040,
                    913,
                    660,
                    920,
                    921,
                    669,
                    942,
                    562,
                    950,
                    951,
                    1084,
                    574,
                    575,
                    958,
                    959,
                    839,
                    968,
                    969,
                    844,
                    973,
                    974,
                    847,
                    1101,
                    1105,
                    598,
                    599,
                    743,
                    1002,
                    749,
                    878,
                    883,
                    758,
                    888,
                    893
                ],
                "self.size": [
                    573
                ],
                "mx": [
                    575
                ],
                "my": [
                    575
                ],
                "box_aspect": [
                    592,
                    587,
                    596
                ],
                "fig_aspect": [
                    592,
                    587,
                    596
                ],
                "container.size": [
                    591
                ],
                "xf": [
                    610,
                    606
                ],
                "args": [
                    1688,
                    617,
                    787,
                    606
                ],
                "xf0": [
                    609,
                    610
                ],
                "xf1": [
                    609,
                    610
                ],
                "yf": [
                    617,
                    621
                ],
                "yf0": [
                    620,
                    621
                ],
                "yf1": [
                    620,
                    621
                ],
                "vertices": [
                    632,
                    634,
                    636,
                    637
                ],
                "np.errstate": [
                    635,
                    700
                ],
                "self.min": [
                    636
                ],
                "self.max": [
                    637
                ],
                "count_bboxes_overlapping_bbox": [
                    647
                ],
                "np.atleast_3d": [
                    648
                ],
                "bboxes": [
                    704,
                    648,
                    696,
                    701,
                    702,
                    703
                ],
                "width": [
                    657,
                    778,
                    655
                ],
                "self.width": [
                    655
                ],
                "height": [
                    656,
                    658,
                    778
                ],
                "self.height": [
                    656
                ],
                "deltaw": [
                    657,
                    659
                ],
                "sw": [
                    657
                ],
                "deltah": [
                    658,
                    659
                ],
                "sh": [
                    658
                ],
                "a": [
                    1920,
                    2828,
                    2829,
                    2830,
                    2831,
                    659,
                    660,
                    2459,
                    2462,
                    2463,
                    2464,
                    2465,
                    1574,
                    2854,
                    2855,
                    1577,
                    1578,
                    2856,
                    2857,
                    2858,
                    1852,
                    2877,
                    2878,
                    2398,
                    2400,
                    2403,
                    2407,
                    2280,
                    2409,
                    2283,
                    2287,
                    1777,
                    2289,
                    1918
                ],
                "p": [
                    1027,
                    1031,
                    1015,
                    665,
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "tx": [
                    669,
                    1967
                ],
                "ty": [
                    669,
                    1967
                ],
                "corners": [
                    688,
                    687
                ],
                "self.corners": [
                    687
                ],
                "corners_rotated": [
                    688,
                    690
                ],
                "rotate": [
                    688,
                    1944
                ],
                "Affine2D": [
                    2373,
                    1899,
                    2189,
                    1807,
                    688,
                    2902,
                    1752,
                    1851,
                    2463
                ],
                "radians": [
                    688,
                    1576,
                    1564
                ],
                "bbox": [
                    704,
                    1082,
                    999,
                    1001,
                    689,
                    690,
                    691,
                    1078,
                    1462,
                    991,
                    1083,
                    701,
                    702,
                    703
                ],
                "Bbox.unit": [
                    689
                ],
                "bbox.update_from_data_xy": [
                    690
                ],
                "bbox.xmin": [
                    701
                ],
                "bbox.xmax": [
                    702
                ],
                "bbox.ymin": [
                    703
                ],
                "bbox.ymax": [
                    704
                ],
                "np.maximum": [
                    713,
                    715
                ],
                "bbox1.xmin": [
                    713
                ],
                "bbox1": [
                    713,
                    714,
                    715,
                    716
                ],
                "bbox2.xmin": [
                    713
                ],
                "bbox2": [
                    713,
                    714,
                    715,
                    716
                ],
                "np.minimum": [
                    714,
                    716
                ],
                "bbox1.xmax": [
                    714
                ],
                "bbox2.xmax": [
                    714
                ],
                "bbox1.ymin": [
                    715
                ],
                "bbox2.ymin": [
                    715
                ],
                "bbox1.ymax": [
                    716
                ],
                "bbox2.ymax": [
                    716
                ],
                "BboxBase": [
                    896,
                    738,
                    901,
                    998,
                    1051,
                    906,
                    876,
                    911,
                    720,
                    881,
                    977,
                    916,
                    886,
                    1081,
                    891
                ],
                "BboxBase.__init__": [
                    1081,
                    738,
                    998
                ],
                "kwargs": [
                    2624,
                    738,
                    1827,
                    2531,
                    998,
                    2406,
                    2122,
                    2222,
                    2286,
                    2482,
                    755,
                    1688,
                    1081,
                    2589
                ],
                "points.shape": [
                    740
                ],
                "self._minpos": [
                    930,
                    934,
                    839,
                    744,
                    845,
                    848,
                    926
                ],
                "np.inf": [
                    744,
                    769
                ],
                "self._ignore": [
                    833,
                    745,
                    812
                ],
                "self._points_orig": [
                    968,
                    969,
                    749,
                    974,
                    973
                ],
                "self._points.copy": [
                    749
                ],
                "___init__": [
                    751
                ],
                "__init__": [
                    751
                ],
                "self._check": [
                    1112,
                    754,
                    758,
                    1047
                ],
                "self.___init__": [
                    755
                ],
                "TransformNode.invalidate": [
                    759
                ],
                "Bbox.from_extents": [
                    778
                ],
                "np.reshape": [
                    787
                ],
                "fmt": [
                    792
                ],
                "ignore": [
                    832,
                    833,
                    873,
                    839
                ],
                "path.vertices.size": [
                    835
                ],
                "path.vertices": [
                    1719,
                    835,
                    1527
                ],
                "path": [
                    2057,
                    2061,
                    2065,
                    1715,
                    1719,
                    1720,
                    2361,
                    2363,
                    1724,
                    2366,
                    835,
                    839,
                    1503,
                    872,
                    873,
                    1515,
                    2669,
                    1527,
                    1528
                ],
                "minpos": [
                    848,
                    845,
                    838
                ],
                "changed": [
                    841,
                    838
                ],
                "update_path_extents": [
                    838
                ],
                "self.invalidate": [
                    899,
                    1923,
                    904,
                    1161,
                    1672,
                    909,
                    914,
                    1177,
                    922,
                    1969,
                    952,
                    960,
                    1988,
                    842,
                    2007,
                    1880,
                    889,
                    1889,
                    1129,
                    879,
                    1907,
                    884,
                    1145,
                    894
                ],
                "updatex": [
                    874,
                    843
                ],
                "updatey": [
                    874,
                    846
                ],
                "xy": [
                    872,
                    869
                ],
                "Path": [
                    2752,
                    872,
                    1719,
                    1528,
                    2683
                ],
                "self.update_from_path": [
                    873
                ],
                "BboxBase.x0.setter": [
                    876
                ],
                "BboxBase.x0": [
                    876
                ],
                "BboxBase.y0.setter": [
                    881
                ],
                "BboxBase.y0": [
                    881
                ],
                "BboxBase.x1.setter": [
                    886
                ],
                "BboxBase.x1": [
                    886
                ],
                "BboxBase.y1.setter": [
                    891
                ],
                "BboxBase.y1": [
                    891
                ],
                "BboxBase.p0.setter": [
                    896
                ],
                "BboxBase.p0": [
                    896
                ],
                "BboxBase.p1.setter": [
                    901
                ],
                "BboxBase.p1": [
                    901
                ],
                "interval": [
                    2854,
                    908,
                    2828,
                    913,
                    2877
                ],
                "BboxBase.intervalx.setter": [
                    906
                ],
                "BboxBase.intervalx": [
                    906
                ],
                "BboxBase.intervaly.setter": [
                    911
                ],
                "BboxBase.intervaly": [
                    911
                ],
                "bounds": [
                    918
                ],
                "np.any": [
                    920,
                    958,
                    950
                ],
                "BboxBase.bounds.setter": [
                    916
                ],
                "BboxBase.bounds": [
                    916
                ],
                "other.get_points": [
                    958,
                    959
                ],
                "self.mutatedx": [
                    964
                ],
                "self.mutatedy": [
                    964
                ],
                "bbox.is_bbox": [
                    1078,
                    991
                ],
                "cbook._check_isinstance": [
                    993,
                    2667,
                    1614,
                    1887
                ],
                "Transform": [
                    1344,
                    993,
                    1249,
                    2307,
                    2311,
                    2313,
                    2122,
                    2667,
                    1614,
                    1593,
                    1680,
                    2222,
                    2286,
                    1619,
                    2100,
                    2261,
                    1688,
                    1241
                ],
                "transform.input_dims": [
                    994
                ],
                "transform.output_dims": [
                    994
                ],
                "self._bbox": [
                    1094,
                    999,
                    1100,
                    1009,
                    1015,
                    1082
                ],
                "self._transform": [
                    2716,
                    2753,
                    1000,
                    2670,
                    2735,
                    1010,
                    2713,
                    2681,
                    1019,
                    2684,
                    2750
                ],
                "self.set_children": [
                    2627,
                    1668,
                    2533,
                    1001,
                    2409,
                    2125,
                    2671,
                    1616,
                    2225,
                    2289,
                    2736,
                    2485,
                    1083,
                    2591
                ],
                "_indent_str": [
                    1632,
                    2341,
                    1094,
                    1095,
                    2342,
                    2599,
                    2635,
                    2541,
                    1838,
                    2096,
                    1009,
                    1010,
                    2097,
                    2427,
                    2428,
                    2494,
                    2495
                ],
                "self._bbox.get_points": [
                    1100,
                    1015
                ],
                "self._transform.transform": [
                    1019
                ],
                "np.ma.filled": [
                    1024
                ],
                "xs": [
                    1026,
                    1035,
                    1028,
                    1036
                ],
                "ys": [
                    1032,
                    1035,
                    1036,
                    1030
                ],
                "_get_points": [
                    1043,
                    1108
                ],
                "get_points": [
                    1043,
                    1108
                ],
                "self._get_points": [
                    1046,
                    1111
                ],
                "fp": [
                    1085,
                    1086,
                    1087
                ],
                "mask": [
                    1086,
                    1087
                ],
                "self._locked_points": [
                    1152,
                    1155,
                    1159,
                    1160,
                    1168,
                    1171,
                    1175,
                    1176,
                    1087,
                    1095,
                    1101,
                    1103,
                    1120,
                    1123,
                    1127,
                    1128,
                    1136,
                    1139,
                    1143,
                    1144
                ],
                "reshape": [
                    1852,
                    1087
                ],
                "np.ma.array": [
                    1087
                ],
                "np.where": [
                    1101
                ],
                "self._locked_points.mask": [
                    1120,
                    1152,
                    1127,
                    1159,
                    1101,
                    1136,
                    1168,
                    1143,
                    1175
                ],
                "self._locked_points.data": [
                    1128,
                    1176,
                    1144,
                    1160
                ],
                "locked_x0.setter": [
                    1125
                ],
                "locked_x0": [
                    1125
                ],
                "locked_y0.setter": [
                    1141
                ],
                "locked_y0": [
                    1141
                ],
                "locked_x1.setter": [
                    1157
                ],
                "locked_x1": [
                    1157
                ],
                "locked_y1.setter": [
                    1173
                ],
                "locked_y1": [
                    1173
                ],
                "input_dims": [
                    1210,
                    1747,
                    2108
                ],
                "output_dims": [
                    1216,
                    1748,
                    2109
                ],
                "is_separable": [
                    1222,
                    2216,
                    2217,
                    2472,
                    1676,
                    2583,
                    2521,
                    2202,
                    2331,
                    2110
                ],
                "has_inverse": [
                    1225,
                    2138,
                    2333,
                    1677
                ],
                "cls.__mro__": [
                    1233,
                    1239
                ],
                "cls": [
                    1233,
                    1234,
                    1235,
                    1239,
                    1240,
                    1241,
                    1242
                ],
                "cls.input_dims": [
                    1234
                ],
                "cls.output_dims": [
                    1234
                ],
                "cls.is_separable": [
                    1235
                ],
                "cls.inverted": [
                    1241
                ],
                "Transform.inverted": [
                    1241
                ],
                "cls.has_inverse": [
                    1242
                ],
                "composite_transform_factory": [
                    1248,
                    2294
                ],
                "IdentityTransform": [
                    1830,
                    2641,
                    1906,
                    1267,
                    2459,
                    1468,
                    2461
                ],
                "self.depth": [
                    1294
                ],
                "other.depth": [
                    1294
                ],
                "_": [
                    1298
                ],
                "sub_tree": [
                    1347,
                    1348,
                    1351,
                    1352,
                    1298,
                    1299
                ],
                "self._iter_break_from_left_to_right": [
                    1298,
                    1347
                ],
                "self.output_dims": [
                    1314,
                    2404,
                    2284,
                    1554,
                    1621,
                    1663
                ],
                "self.contains_branch": [
                    1319
                ],
                "other_transform": [
                    1319
                ],
                "remainder": [
                    1347,
                    1349,
                    1351,
                    1353,
                    1357
                ],
                "other._iter_break_from_left_to_right": [
                    1351
                ],
                "remainder.has_inverse": [
                    1353
                ],
                "remainder.inverted": [
                    1357
                ],
                "other.has_inverse": [
                    1360
                ],
                "other.inverted": [
                    1361
                ],
                "get_matrix": [
                    1476,
                    2373,
                    2374,
                    2183,
                    2184,
                    1371
                ],
                "self.get_affine": [
                    1476,
                    2697,
                    2346,
                    1515,
                    1647,
                    2706,
                    1428,
                    1371
                ],
                "values": [
                    1702,
                    1385,
                    1386,
                    1387,
                    1453,
                    1390,
                    1428
                ],
                "np.asanyarray": [
                    1385,
                    2053,
                    2045,
                    2049
                ],
                "ndim": [
                    1393,
                    1386,
                    1396,
                    1398
                ],
                "values.ndim": [
                    1386
                ],
                "values.reshape": [
                    1387
                ],
                "self.input_dims": [
                    2403,
                    1387,
                    2283,
                    1490,
                    1554,
                    1620,
                    1402,
                    1662
                ],
                "res": [
                    1390,
                    1394,
                    1395,
                    1397,
                    1399
                ],
                "self.transform_affine": [
                    1642,
                    1702,
                    1390,
                    1719
                ],
                "self.transform_non_affine": [
                    1643,
                    1390,
                    1527
                ],
                "np.ma.is_masked": [
                    1394
                ],
                "res.reshape": [
                    1397
                ],
                "self.transform": [
                    1570,
                    1571,
                    1641,
                    1492,
                    1462
                ],
                "bbox.get_points": [
                    1462
                ],
                "point": [
                    1490,
                    1492
                ],
                "self.transform_path_affine": [
                    1715,
                    1645,
                    1503
                ],
                "self.transform_path_non_affine": [
                    1646,
                    1503
                ],
                "transform_path_affine": [
                    1515
                ],
                "Path._fast_from_codes_and_verts": [
                    1528,
                    2683,
                    2752
                ],
                "path.codes": [
                    1528,
                    1720
                ],
                "angles": [
                    1568,
                    1556,
                    1558,
                    1565,
                    1567
                ],
                "angles.ndim": [
                    1558
                ],
                "angles.shape": [
                    1558
                ],
                "pts.shape": [
                    1561,
                    1558
                ],
                "np.deg2rad": [
                    2021,
                    1565,
                    1934
                ],
                "pts2": [
                    1571,
                    1567
                ],
                "pushoff": [
                    1567
                ],
                "np.column_stack": [
                    1567
                ],
                "np.cos": [
                    1918,
                    1567
                ],
                "np.sin": [
                    1568,
                    1919
                ],
                "tpts": [
                    1570,
                    1573
                ],
                "tpts2": [
                    1571,
                    1573
                ],
                "d": [
                    1777,
                    1852,
                    1573,
                    1574
                ],
                "np.arctan2": [
                    1574
                ],
                "np.rad2deg": [
                    1577
                ],
                "self._init": [
                    1615
                ],
                "Transform.__init__": [
                    2122,
                    2286,
                    2222,
                    1619,
                    1688
                ],
                "child.input_dims": [
                    1620,
                    1662
                ],
                "child.output_dims": [
                    1621,
                    1663
                ],
                "self._set": [
                    1669,
                    1622
                ],
                "self._child.__eq__": [
                    1626
                ],
                "self._child": [
                    1632,
                    1636,
                    1639,
                    1675,
                    1676,
                    1677,
                    1626
                ],
                "self._child.frozen": [
                    1636
                ],
                "child.transform": [
                    1641
                ],
                "child.transform_affine": [
                    1642
                ],
                "child.transform_non_affine": [
                    1643
                ],
                "self.transform_path": [
                    1644
                ],
                "child.transform_path": [
                    1644
                ],
                "child.transform_path_affine": [
                    1645
                ],
                "child.transform_path_non_affine": [
                    1646
                ],
                "child.get_affine": [
                    1647
                ],
                "self.inverted": [
                    1648
                ],
                "child.inverted": [
                    1648
                ],
                "self.get_matrix": [
                    1697,
                    1763,
                    1803,
                    1649,
                    1780,
                    1752,
                    1756,
                    1693
                ],
                "child.get_matrix": [
                    1649
                ],
                "self._child.is_affine": [
                    1675
                ],
                "self._child.is_separable": [
                    1676
                ],
                "self._child.has_inverse": [
                    1677
                ],
                "self._inverted": [
                    2593,
                    2242,
                    2436,
                    2629,
                    2535,
                    1865,
                    1802,
                    2553,
                    2573,
                    1807,
                    2511,
                    1809,
                    2644,
                    2613,
                    2487,
                    1689
                ],
                "np.all": [
                    1697
                ],
                "other.get_matrix": [
                    1888,
                    1697
                ],
                "path._interpolation_steps": [
                    1720
                ],
                "AffineBase": [
                    1731
                ],
                "mtx": [
                    1763,
                    1764,
                    1803,
                    2188,
                    2189,
                    1807,
                    1780,
                    1782,
                    1879,
                    1784,
                    1756,
                    1757
                ],
                "flat": [
                    1764
                ],
                "swapaxes": [
                    1764
                ],
                "e": [
                    1777,
                    1852
                ],
                "f": [
                    1777,
                    1852
                ],
                "tpoints": [
                    1782,
                    1783
                ],
                "affine_transform": [
                    1784,
                    1782
                ],
                "points.data": [
                    1782
                ],
                "np.ma.getmask": [
                    1783
                ],
                "_transform_affine": [
                    1787
                ],
                "transform_affine": [
                    1787
                ],
                "np.ndarray": [
                    1794
                ],
                "self._transform_affine": [
                    1798
                ],
                "inv": [
                    1807
                ],
                "Affine2DBase": [
                    2624,
                    1827,
                    2468,
                    2531,
                    2406,
                    2024,
                    2382,
                    2255,
                    2256,
                    2194,
                    2227,
                    1812,
                    2482,
                    2516,
                    2578,
                    2618,
                    2589,
                    1887
                ],
                "Affine2DBase.__init__": [
                    2624,
                    1827,
                    2531,
                    2406,
                    2482,
                    2227,
                    2589
                ],
                "matrix": [
                    1828,
                    1830,
                    1831
                ],
                "IdentityTransform._mtx.copy": [
                    2641,
                    1906,
                    1830
                ],
                "IdentityTransform._mtx": [
                    2641,
                    1906,
                    1830
                ],
                "self._mtx": [
                    2433,
                    1922,
                    2438,
                    2569,
                    2575,
                    2592,
                    1831,
                    1838,
                    1968,
                    2609,
                    2228,
                    2486,
                    2615,
                    2234,
                    2241,
                    1987,
                    2244,
                    2628,
                    1867,
                    2507,
                    2513,
                    2641,
                    2642,
                    2645,
                    2006,
                    1879,
                    1888,
                    2534,
                    2410,
                    1906,
                    2549,
                    2041,
                    2555
                ],
                "theta": [
                    1944,
                    1918,
                    1919
                ],
                "rotate_mtx": [
                    1920,
                    1922
                ],
                "np.dot": [
                    2433,
                    1922,
                    1987,
                    2373,
                    1968,
                    2006
                ],
                "self.rotate": [
                    1934
                ],
                "degrees": [
                    1956,
                    1934
                ],
                "translate": [
                    1944,
                    1956,
                    2902
                ],
                "self.translate": [
                    1944,
                    1956
                ],
                "rotate_deg": [
                    1956
                ],
                "translate_mtx": [
                    1968,
                    1966
                ],
                "sy": [
                    1984,
                    1986,
                    1983
                ],
                "sx": [
                    1984,
                    1986
                ],
                "scale_mtx": [
                    1985,
                    1987
                ],
                "rotX": [
                    2002,
                    2005
                ],
                "np.tan": [
                    2002,
                    2003
                ],
                "xShear": [
                    2002,
                    2021
                ],
                "rotY": [
                    2003,
                    2005
                ],
                "yShear": [
                    2003,
                    2021
                ],
                "skew_mtx": [
                    2004,
                    2006
                ],
                "self.skew": [
                    2021
                ],
                "_mtx": [
                    2029
                ],
                "np.identity": [
                    2029
                ],
                "BlendedAffine2D": [
                    2080,
                    2257
                ],
                "BlendedGenericTransform": [
                    2080,
                    2258,
                    2175
                ],
                "self._x": [
                    2180,
                    2181,
                    2183,
                    2081,
                    2082,
                    2083,
                    2088,
                    2223,
                    2096,
                    2233,
                    2234,
                    2236,
                    2123,
                    2130,
                    2137,
                    2139,
                    2143,
                    2147,
                    2149,
                    2175
                ],
                "other._x": [
                    2081
                ],
                "self._y": [
                    2081,
                    2082,
                    2147,
                    2180,
                    2233,
                    2150,
                    2184,
                    2089,
                    2124,
                    2224,
                    2097,
                    2130,
                    2137,
                    2139,
                    2237,
                    2175,
                    2143
                ],
                "other._y": [
                    2081
                ],
                "self._x.contains_branch": [
                    2088
                ],
                "self._y.contains_branch": [
                    2089
                ],
                "_BlendedMixin": [
                    2194,
                    2100
                ],
                "x_transform": [
                    2215,
                    2216,
                    2123,
                    2125,
                    2223,
                    2255,
                    2225,
                    2257,
                    2258
                ],
                "y_transform": [
                    2215,
                    2216,
                    2124,
                    2125,
                    2224,
                    2225,
                    2256,
                    2257,
                    2258
                ],
                "self._affine": [
                    2179,
                    2181,
                    2189,
                    2126,
                    2191
                ],
                "self._x.depth": [
                    2130
                ],
                "self._y.depth": [
                    2130
                ],
                "self._x.is_affine": [
                    2137,
                    2147
                ],
                "self._y.is_affine": [
                    2137,
                    2147
                ],
                "self._x.has_inverse": [
                    2139
                ],
                "self._y.has_inverse": [
                    2139
                ],
                "blended_transform_factory": [
                    2143
                ],
                "self._x.frozen": [
                    2143
                ],
                "self._y.frozen": [
                    2143
                ],
                "x.input_dims": [
                    2152,
                    2155
                ],
                "x.transform_non_affine": [
                    2153,
                    2156,
                    2158
                ],
                "x_points": [
                    2156,
                    2158,
                    2159,
                    2167,
                    2169,
                    2171
                ],
                "x_points.reshape": [
                    2159
                ],
                "y.input_dims": [
                    2161
                ],
                "y_points": [
                    2162,
                    2164,
                    2165,
                    2168,
                    2169,
                    2171
                ],
                "y.transform_non_affine": [
                    2162,
                    2164
                ],
                "y_points.reshape": [
                    2165
                ],
                "np.ma.concatenate": [
                    2169
                ],
                "np.concatenate": [
                    2171
                ],
                "self._x.inverted": [
                    2175
                ],
                "self._y.inverted": [
                    2175
                ],
                "self._x.get_affine": [
                    2181,
                    2183
                ],
                "x_mtx": [
                    2241,
                    2236,
                    2188,
                    2183
                ],
                "y_mtx": [
                    2184,
                    2241,
                    2188,
                    2237
                ],
                "self._y.get_affine": [
                    2184
                ],
                "np.vstack": [
                    2241,
                    2188
                ],
                "x_transform.is_affine": [
                    2215
                ],
                "y_transform.is_affine": [
                    2215
                ],
                "x_transform.is_separable": [
                    2216
                ],
                "y_transform.is_separable": [
                    2216
                ],
                "is_correct": [
                    2217,
                    2218
                ],
                "self._x.get_matrix": [
                    2234,
                    2236
                ],
                "self._y.get_matrix": [
                    2237
                ],
                "a.output_dims": [
                    2280,
                    2400
                ],
                "b.input_dims": [
                    2280,
                    2400
                ],
                "a.input_dims": [
                    2403,
                    2283
                ],
                "b.output_dims": [
                    2404,
                    2284
                ],
                "self._a": [
                    2435,
                    2309,
                    2318,
                    2324,
                    2327,
                    2329,
                    2330,
                    2332,
                    2334,
                    2341,
                    2350,
                    2352,
                    2353,
                    2356,
                    2360,
                    2362,
                    2363,
                    2366,
                    2374,
                    2379,
                    2407,
                    2414,
                    2287,
                    2417,
                    2420,
                    2295,
                    2427
                ],
                "self._b": [
                    2434,
                    2308,
                    2319,
                    2325,
                    2326,
                    2329,
                    2330,
                    2332,
                    2334,
                    2342,
                    2350,
                    2352,
                    2355,
                    2360,
                    2362,
                    2365,
                    2370,
                    2371,
                    2373,
                    2379,
                    2408,
                    2414,
                    2288,
                    2418,
                    2419,
                    2295,
                    2428
                ],
                "self._a.frozen": [
                    2295
                ],
                "self._b.frozen": [
                    2295
                ],
                "CompositeGenericTransform": [
                    2296,
                    2465,
                    2378,
                    2317
                ],
                "frozen.frozen": [
                    2297
                ],
                "Transform.INVALID_AFFINE": [
                    2307
                ],
                "self._b.is_affine": [
                    2370,
                    2308,
                    2362,
                    2350,
                    2352,
                    2360,
                    2330
                ],
                "self._a.is_affine": [
                    2309,
                    2362,
                    2350,
                    2352,
                    2360,
                    2330
                ],
                "invalidating_node": [
                    2314,
                    2309
                ],
                "Transform.INVALID": [
                    2311
                ],
                "Transform._invalidate_internal": [
                    2313
                ],
                "CompositeAffine2D": [
                    2464,
                    2317
                ],
                "other._a": [
                    2318
                ],
                "other._b": [
                    2319
                ],
                "left": [
                    2417,
                    2418,
                    2419,
                    2324,
                    2325,
                    2326,
                    2327,
                    2420
                ],
                "right": [
                    2417,
                    2418,
                    2419,
                    2324,
                    2325,
                    2326,
                    2327,
                    2420
                ],
                "self._a._iter_break_from_left_to_right": [
                    2417,
                    2324
                ],
                "self._b._iter_break_from_left_to_right": [
                    2419,
                    2326
                ],
                "depth": [
                    2329
                ],
                "self._a.depth": [
                    2329,
                    2414
                ],
                "self._b.depth": [
                    2329,
                    2414
                ],
                "self._a.is_separable": [
                    2332
                ],
                "self._b.is_separable": [
                    2332
                ],
                "self._a.has_inverse": [
                    2334
                ],
                "self._b.has_inverse": [
                    2334
                ],
                "self._a.transform_non_affine": [
                    2353
                ],
                "self._b.transform_non_affine": [
                    2355
                ],
                "self._a.transform": [
                    2356
                ],
                "self._a.transform_path_non_affine": [
                    2363
                ],
                "self._b.transform_path_non_affine": [
                    2365
                ],
                "self._a.transform_path": [
                    2366
                ],
                "self._b.get_affine": [
                    2371,
                    2373
                ],
                "self._a.get_affine": [
                    2374
                ],
                "self._b.inverted": [
                    2379
                ],
                "self._a.inverted": [
                    2379
                ],
                "a.is_affine": [
                    2398
                ],
                "b.is_affine": [
                    2398
                ],
                "self._b.get_matrix": [
                    2434
                ],
                "self._a.get_matrix": [
                    2435
                ],
                "boxin.is_bbox": [
                    2586,
                    2479
                ],
                "boxin": [
                    2479,
                    2483,
                    2485,
                    2586,
                    2590,
                    2591
                ],
                "boxout.is_bbox": [
                    2528,
                    2479
                ],
                "boxout": [
                    2528,
                    2532,
                    2533,
                    2479,
                    2484,
                    2485
                ],
                "self._boxin": [
                    2500,
                    2599,
                    2590,
                    2604,
                    2483,
                    2494
                ],
                "self._boxout": [
                    2532,
                    2501,
                    2566,
                    2541,
                    2546,
                    2484,
                    2495
                ],
                "inl": [
                    2609,
                    2507,
                    2500,
                    2604
                ],
                "inb": [
                    2610,
                    2508,
                    2500,
                    2604
                ],
                "inw": [
                    2500,
                    2502,
                    2604,
                    2605,
                    2607
                ],
                "inh": [
                    2500,
                    2503,
                    2604,
                    2605,
                    2608
                ],
                "self._boxin.bounds": [
                    2500,
                    2604
                ],
                "outl": [
                    2549,
                    2546,
                    2507,
                    2501
                ],
                "outb": [
                    2546,
                    2508,
                    2501,
                    2550
                ],
                "outw": [
                    2501,
                    2502,
                    2546,
                    2547,
                    2549
                ],
                "outh": [
                    2501,
                    2503,
                    2546,
                    2547,
                    2550
                ],
                "self._boxout.bounds": [
                    2546,
                    2501
                ],
                "x_scale": [
                    2502,
                    2504,
                    2507,
                    2607,
                    2609
                ],
                "y_scale": [
                    2503,
                    2504,
                    2508,
                    2608,
                    2610
                ],
                "BboxTransformTo": [
                    2558
                ],
                "xmax": [
                    2569,
                    2566,
                    2567
                ],
                "ymax": [
                    2570,
                    2566,
                    2567
                ],
                "self._boxout.max": [
                    2566
                ],
                "self._t": [
                    2625,
                    2642,
                    2635
                ],
                "xt": [
                    2625
                ],
                "yt": [
                    2625
                ],
                "self._scale_trans": [
                    2626,
                    2642
                ],
                "scale_trans": [
                    2626,
                    2627
                ],
                "self._scale_trans.transform": [
                    2642
                ],
                "TransformNode.__init__": [
                    2731,
                    2668
                ],
                "self._path": [
                    2748,
                    2669,
                    2737,
                    2745,
                    2681,
                    2684,
                    2685
                ],
                "self._transformed_path": [
                    2672,
                    2706,
                    2738,
                    2745,
                    2679,
                    2680,
                    2713,
                    2749
                ],
                "self._transformed_points": [
                    2697,
                    2673,
                    2739,
                    2682,
                    2751
                ],
                "self.INVALID_NON_AFFINE": [
                    2746,
                    2747,
                    2678
                ],
                "self._transform.transform_path_non_affine": [
                    2681,
                    2750
                ],
                "self._transform.transform_non_affine": [
                    2753,
                    2684
                ],
                "self._path.vertices": [
                    2684
                ],
                "self._revalidate": [
                    2696,
                    2705,
                    2712
                ],
                "self._transform.transform_path_affine": [
                    2713
                ],
                "self._transform.get_affine": [
                    2716
                ],
                "TransformedPath": [
                    2719
                ],
                "patch.get_transform": [
                    2733
                ],
                "patch": [
                    2737,
                    2733,
                    2734
                ],
                "self._patch": [
                    2742,
                    2734
                ],
                "patch.get_path": [
                    2737
                ],
                "patch_path": [
                    2753,
                    2754,
                    2742,
                    2745,
                    2748,
                    2750
                ],
                "self._patch.get_path": [
                    2742
                ],
                "patch_path.vertices": [
                    2753
                ],
                "np.isfinite": [
                    2786
                ],
                "vmin": [
                    2786,
                    2790,
                    2791,
                    2794,
                    2796,
                    2799,
                    2800,
                    2801,
                    2804,
                    2808,
                    2809
                ],
                "vmax": [
                    2786,
                    2790,
                    2791,
                    2794,
                    2797,
                    2799,
                    2800,
                    2802,
                    2805,
                    2808,
                    2809
                ],
                "expander": [
                    2787,
                    2796,
                    2797,
                    2801,
                    2802,
                    2804,
                    2805
                ],
                "swapped": [
                    2792,
                    2789,
                    2807
                ],
                "maxabsvalue": [
                    2794,
                    2795,
                    2799
                ],
                "tiny": [
                    2795,
                    2799
                ],
                "np.finfo": [
                    2795
                ],
                "increasing": [
                    2807
                ],
                "rtol": [
                    2857,
                    2858
                ],
                "units": [
                    2905,
                    2908,
                    2901,
                    2911
                ],
                "trans": [
                    2912,
                    2902
                ],
                "fig": [
                    2912,
                    2903
                ],
                "cbook._check_in_list": [
                    2911
                ],
                "ScaledTranslation": [
                    2912
                ],
                "fig.dpi_scale_trans": [
                    2912
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_17/lib/matplotlib/tests/test_colorbar.py",
                "test_function": "test_colorbar_int",
                "test_function_code": "@pytest.mark.parametrize(\"clim\", [(-20000, 20000), (-32768, 0)])\ndef test_colorbar_int(clim):\n    # Check that we cast to float early enough to not\n    # overflow ``int16(20000) - int16(-20000)`` or\n    # run into ``abs(int16(-32768)) == -32768``.\n    fig, ax = plt.subplots()\n    im = ax.imshow([[*map(np.int16, clim)]])\n    fig.colorbar(im)\n    assert (im.norm.vmin, im.norm.vmax) == clim",
                "test_error": "RuntimeWarning: overflow encountered in scalar subtract",
                "full_test_error": "clim = (-20000, 20000)\n\n    @pytest.mark.parametrize(\"clim\", [(-20000, 20000), (-32768, 0)])\n    def test_colorbar_int(clim):\n        # Check that we cast to float early enough to not\n        # overflow ``int16(20000) - int16(-20000)`` or\n        # run into ``abs(int16(-32768)) == -32768``.\n        fig, ax = plt.subplots()\n        im = ax.imshow([[*map(np.int16, clim)]])\n>       fig.colorbar(im)\n\nlib/matplotlib/tests/test_colorbar.py:582: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/matplotlib/figure.py:2200: in colorbar\n    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)\nlib/matplotlib/colorbar.py:1707: in colorbar_factory\n    cb = Colorbar(cax, mappable, **kwargs)\nlib/matplotlib/colorbar.py:1231: in __init__\n    ColorbarBase.__init__(self, ax, **kwargs)\nlib/matplotlib/colorbar.py:472: in __init__\n    self.draw_all()\nlib/matplotlib/colorbar.py:495: in draw_all\n    self._process_values()\nlib/matplotlib/colorbar.py:961: in _process_values\n    self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvmin = -20000, vmax = 20000, expander = 0.1, tiny = 1e-15, increasing = True\n\n    def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n        \"\"\"\n        Modify the endpoints of a range as needed to avoid singularities.\n    \n        Parameters\n        ----------\n        vmin, vmax : float\n            The initial endpoints.\n        expander : float, default: 0.001\n            Fractional amount by which *vmin* and *vmax* are expanded if\n            the original interval is too small, based on *tiny*.\n        tiny : float, default: 1e-15\n            Threshold for the ratio of the interval to the maximum absolute\n            value of its endpoints.  If the interval is smaller than\n            this, it will be expanded.  This value should be around\n            1e-15 or larger; otherwise the interval will be approaching\n            the double precision resolution limit.\n        increasing : bool, default: True\n            If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n    \n        Returns\n        -------\n        vmin, vmax : float\n            Endpoints, expanded and/or swapped if necessary.\n            If either input is inf or NaN, or if both inputs are 0 or very\n            close to zero, it returns -*expander*, *expander*.\n        \"\"\"\n    \n        if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n            return -expander, expander\n    \n        swapped = False\n        if vmax < vmin:\n            vmin, vmax = vmax, vmin\n            swapped = True\n    \n        maxabsvalue = max(abs(vmin), abs(vmax))\n        if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n            vmin = -expander\n            vmax = expander\n    \n>       elif vmax - vmin <= maxabsvalue * tiny:\nE       RuntimeWarning: overflow encountered in scalar subtract\n\nlib/matplotlib/transforms.py:2799: RuntimeWarning",
                "traceback": "lib/matplotlib/figure.py:2200: in colorbar\n    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)\nlib/matplotlib/colorbar.py:1707: in colorbar_factory\n    cb = Colorbar(cax, mappable, **kwargs)\nlib/matplotlib/colorbar.py:1231: in __init__\n    ColorbarBase.__init__(self, ax, **kwargs)\nlib/matplotlib/colorbar.py:472: in __init__\n    self.draw_all()\nlib/matplotlib/colorbar.py:495: in draw_all\n    self._process_values()\nlib/matplotlib/colorbar.py:961: in _process_values\n    self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvmin = -20000, vmax = 20000, expander = 0.1, tiny = 1e-15, increasing = True\n\n    def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n        \"\"\"\n        Modify the endpoints of a range as needed to avoid singularities.\n    \n        Parameters\n        ----------\n        vmin, vmax : float\n            The initial endpoints.\n        expander : float, default: 0.001\n            Fractional amount by which *vmin* and *vmax* are expanded if\n            the original interval is too small, based on *tiny*.\n        tiny : float, default: 1e-15\n            Threshold for the ratio of the interval to the maximum absolute\n            value of its endpoints.  If the interval is smaller than\n            this, it will be expanded.  This value should be around\n            1e-15 or larger; otherwise the interval will be approaching\n            the double precision resolution limit.\n        increasing : bool, default: True\n            If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n    \n        Returns\n        -------\n        vmin, vmax : float\n            Endpoints, expanded and/or swapped if necessary.\n            If either input is inf or NaN, or if both inputs are 0 or very\n            close to zero, it returns -*expander*, *expander*.\n        \"\"\"\n    \n        if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n            return -expander, expander\n    \n        swapped = False\n        if vmax < vmin:\n            vmin, vmax = vmax, vmin\n            swapped = True\n    \n        maxabsvalue = max(abs(vmin), abs(vmax))\n        if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n            vmin = -expander\n            vmax = expander\n    \n>       elif vmax - vmin <= maxabsvalue * tiny:\nE       RuntimeWarning: overflow encountered in scalar subtract\n\nlib/matplotlib/transforms.py:2799: RuntimeWarning",
                "test_function_decorators": [
                    "pytest.mark.parametrize('clim', [(-20000, 20000), (-32768, 0)])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_17/lib/matplotlib/tests/test_colorbar.py",
                "test_function": "test_colorbar_int",
                "test_function_code": "@pytest.mark.parametrize(\"clim\", [(-20000, 20000), (-32768, 0)])\ndef test_colorbar_int(clim):\n    # Check that we cast to float early enough to not\n    # overflow ``int16(20000) - int16(-20000)`` or\n    # run into ``abs(int16(-32768)) == -32768``.\n    fig, ax = plt.subplots()\n    im = ax.imshow([[*map(np.int16, clim)]])\n    fig.colorbar(im)\n    assert (im.norm.vmin, im.norm.vmax) == clim",
                "test_error": "RuntimeWarning: overflow encountered in scalar absolute",
                "full_test_error": "clim = (-32768, 0)\n\n    @pytest.mark.parametrize(\"clim\", [(-20000, 20000), (-32768, 0)])\n    def test_colorbar_int(clim):\n        # Check that we cast to float early enough to not\n        # overflow ``int16(20000) - int16(-20000)`` or\n        # run into ``abs(int16(-32768)) == -32768``.\n        fig, ax = plt.subplots()\n        im = ax.imshow([[*map(np.int16, clim)]])\n>       fig.colorbar(im)\n\nlib/matplotlib/tests/test_colorbar.py:582: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/matplotlib/figure.py:2200: in colorbar\n    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)\nlib/matplotlib/colorbar.py:1707: in colorbar_factory\n    cb = Colorbar(cax, mappable, **kwargs)\nlib/matplotlib/colorbar.py:1231: in __init__\n    ColorbarBase.__init__(self, ax, **kwargs)\nlib/matplotlib/colorbar.py:472: in __init__\n    self.draw_all()\nlib/matplotlib/colorbar.py:495: in draw_all\n    self._process_values()\nlib/matplotlib/colorbar.py:961: in _process_values\n    self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvmin = -32768, vmax = 0, expander = 0.1, tiny = 1e-15, increasing = True\n\n    def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n        \"\"\"\n        Modify the endpoints of a range as needed to avoid singularities.\n    \n        Parameters\n        ----------\n        vmin, vmax : float\n            The initial endpoints.\n        expander : float, default: 0.001\n            Fractional amount by which *vmin* and *vmax* are expanded if\n            the original interval is too small, based on *tiny*.\n        tiny : float, default: 1e-15\n            Threshold for the ratio of the interval to the maximum absolute\n            value of its endpoints.  If the interval is smaller than\n            this, it will be expanded.  This value should be around\n            1e-15 or larger; otherwise the interval will be approaching\n            the double precision resolution limit.\n        increasing : bool, default: True\n            If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n    \n        Returns\n        -------\n        vmin, vmax : float\n            Endpoints, expanded and/or swapped if necessary.\n            If either input is inf or NaN, or if both inputs are 0 or very\n            close to zero, it returns -*expander*, *expander*.\n        \"\"\"\n    \n        if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n            return -expander, expander\n    \n        swapped = False\n        if vmax < vmin:\n            vmin, vmax = vmax, vmin\n            swapped = True\n    \n>       maxabsvalue = max(abs(vmin), abs(vmax))\nE       RuntimeWarning: overflow encountered in scalar absolute\n\nlib/matplotlib/transforms.py:2794: RuntimeWarning",
                "traceback": "lib/matplotlib/figure.py:2200: in colorbar\n    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)\nlib/matplotlib/colorbar.py:1707: in colorbar_factory\n    cb = Colorbar(cax, mappable, **kwargs)\nlib/matplotlib/colorbar.py:1231: in __init__\n    ColorbarBase.__init__(self, ax, **kwargs)\nlib/matplotlib/colorbar.py:472: in __init__\n    self.draw_all()\nlib/matplotlib/colorbar.py:495: in draw_all\n    self._process_values()\nlib/matplotlib/colorbar.py:961: in _process_values\n    self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvmin = -32768, vmax = 0, expander = 0.1, tiny = 1e-15, increasing = True\n\n    def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n        \"\"\"\n        Modify the endpoints of a range as needed to avoid singularities.\n    \n        Parameters\n        ----------\n        vmin, vmax : float\n            The initial endpoints.\n        expander : float, default: 0.001\n            Fractional amount by which *vmin* and *vmax* are expanded if\n            the original interval is too small, based on *tiny*.\n        tiny : float, default: 1e-15\n            Threshold for the ratio of the interval to the maximum absolute\n            value of its endpoints.  If the interval is smaller than\n            this, it will be expanded.  This value should be around\n            1e-15 or larger; otherwise the interval will be approaching\n            the double precision resolution limit.\n        increasing : bool, default: True\n            If True, swap *vmin*, *vmax* if *vmin* > *vmax*.\n    \n        Returns\n        -------\n        vmin, vmax : float\n            Endpoints, expanded and/or swapped if necessary.\n            If either input is inf or NaN, or if both inputs are 0 or very\n            close to zero, it returns -*expander*, *expander*.\n        \"\"\"\n    \n        if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n            return -expander, expander\n    \n        swapped = False\n        if vmax < vmin:\n            vmin, vmax = vmax, vmin\n            swapped = True\n    \n>       maxabsvalue = max(abs(vmin), abs(vmax))\nE       RuntimeWarning: overflow encountered in scalar absolute\n\nlib/matplotlib/transforms.py:2794: RuntimeWarning",
                "test_function_decorators": [
                    "pytest.mark.parametrize('clim', [(-20000, 20000), (-32768, 0)])"
                ]
            }
        ]
    }
}