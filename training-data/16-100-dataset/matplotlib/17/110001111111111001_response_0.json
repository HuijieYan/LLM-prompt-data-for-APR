{
    "matplotlib": [
        {
            "bugID": 17,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2758,
            "file_name": "lib/matplotlib/transforms.py",
            "replace_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    if not np.isfinite(vmin) or not np.isfinite(vmax):\n        return -expander, expander  # Return a default range if either input is inf or NaN\n\n    if vmax < vmin:\n        vmin, vmax = vmax, vmin  # Swap vmin and vmax if vmax is less than vmin\n\n    maxabsvalue = max(abs(vmin), abs(vmax))\n    if maxabsvalue < tiny:\n        # If the interval is smaller than the threshold, expand it\n        vmin = -expander\n        vmax = expander\n    else:\n        range_size = vmax - vmin\n        if range_size <= maxabsvalue * tiny:\n            # If the interval is still very small after expanding, adjust the range\n            if vmax == 0 and vmin == 0:\n                vmin = -expander\n                vmax = expander\n            else:\n                expansion_amount = range_size * expander / 2.0\n                vmin -= expansion_amount\n                vmax += expansion_amount\n\n    if not increasing:\n        vmin, vmax = vmax, vmin  # Swap vmin and vmax if increasing is set to False\n\n    return vmin, vmax",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}