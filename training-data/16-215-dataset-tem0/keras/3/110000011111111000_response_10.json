{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, keras.Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input.shape, dtype=layer.input.dtype, sparse=layer.input.sparse, name=layer.name) for layer in model.layers if isinstance(layer, InputLayer)]\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not isinstance(x, tf.Tensor):\n                name = model.layers[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_tensors[i] = input_tensor\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            continue\n\n        reference_input_tensors = layer.input\n        reference_output_tensors = layer.output\n\n        computed_data = []\n        for x in to_list(reference_input_tensors):\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(to_list(reference_input_tensors)):\n            kwargs = layer.get_config()\n            computed_tensors = [x[0] for x in computed_data]\n            computed_masks = [x[1] for x in computed_data]\n\n            if has_arg(layer.call, 'mask'):\n                kwargs['mask'] = computed_masks\n\n            output_tensors = to_list(layer(computed_tensors, **kwargs))\n            output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n\n            for x, y, mask in zip(to_list(reference_output_tensors), output_tensors, output_masks):\n                tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in to_list(model.outputs)]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "import numpy as np",
                "import tensorflow as tf",
                "from tensorflow import keras",
                "from tensorflow.keras import Model, Input",
                "from tensorflow.python.keras.layers import InputLayer",
                "from tensorflow.python.keras.utils import to_list",
                "from tensorflow.python.keras.utils.layer_utils import has_arg"
            ]
        }
    ]
}