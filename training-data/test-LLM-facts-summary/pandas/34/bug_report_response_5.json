{
    "pandas": [
        {
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n    \n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n    \n    ax_values = ax.asi8\n    bin_edges = ax.values\n    bin_edges = np.append(bin_edges, ax_values[-1] + np.timedelta64(1, 'D'))\n    binner, bin_edges = self._adjust_bin_edges(ax_values, bin_edges)\n    \n    # general version, knowing nothing about relative frequencies\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans, return_labels=True, return_bins=True\n    )\n    \n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n    \n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    \n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n    \n    return binner, bins, labels",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.offsets import DateOffset"
            ]
        }
    ]
}