{
    "pandas": [
        {
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data: DataFrame,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> Union[DataFrame, Series]:\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    if isinstance(values, list) and all(isinstance(val, str) for val in values):\n        values_list = list(values)\n    elif isinstance(values, str):\n        values_list = [values]\n    else:\n        raise ValueError(\"values should be a string or a list of strings\")\n\n    if isinstance(columns, list) and all(isinstance(col, str) for col in columns):\n        columns_list = list(columns)\n    elif isinstance(columns, str):\n        columns_list = [columns]\n    else:\n        raise ValueError(\"columns should be a string or a list of strings\")\n    \n    grouped = data.groupby(keys, observed=observed)\n\n    if isinstance(grouped, SeriesGroupBy):\n        table = grouped.agg(aggfunc)\n        if isinstance(table, Series):\n            table = table.to_frame()\n    else:\n        agged = grouped.agg(aggfunc)\n        columns_to_keep = [col for col in columns_list if col in agged.columns]\n        table = agged[columns_to_keep]\n\n    if isinstance(table, Series):\n        table = table.to_frame()\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values_list,\n            rows=index,\n            cols=columns_list,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and len(values_list) == 1\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values_list[0]]\n\n    if len(index) == 0 and len(columns_list) > 0:\n        table = table.T\n\n    return table",
            "import_list": [
                "from pandas import DataFrame, Series, MultiIndex",
                "from pandas.api.types import is_list_like",
                "from pandas.core.groupby.generic import SeriesGroupBy",
                "from typing import Union, List"
            ]
        }
    ]
}