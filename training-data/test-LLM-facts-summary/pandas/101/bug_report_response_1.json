{
    "pandas": [
        {
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if np.issubdtype(dtype, np.datetime64) or np.issubdtype(dtype, np.timedelta64):\n        if str(dtype) == 'datetime64' or str(dtype) == 'timedelta64':\n            raise ValueError(f\"The '{dtype}' dtype has no unit. Please pass in '{dtype}[ns]' instead.\")\n\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pd.api.types.pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return np.asarray(arr, dtype=dtype)\n\n    elif np.issubdtype(arr.dtype, np.datetime64):\n        if issubclass(dtype.type, np.integer):\n            return arr.view(dtype)\n        elif dtype.kind == \"M\":\n            return arr.astype(dtype)\n        else:\n            raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.timedelta64):\n        if issubclass(dtype.type, np.integer):\n            return arr.view(dtype)\n        elif dtype.kind == \"m\":\n            result = arr.astype(dtype, errors='ignore').astype(np.float64)\n            result[arr == np.datetime64('NaT')] = np.nan\n            return result\n        elif dtype == arr.dtype:\n            return arr.copy()\n        else:\n            raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif issubclass(arr.dtype.type, np.object_):\n        if issubclass(dtype.type, np.integer):\n            return np.asarray(arr, dtype=dtype)\n        elif np.issubdtype(dtype, np.datetime64):\n            return astype_nansafe(pd.to_datetime(arr).values, dtype, copy=copy)\n        elif np.issubdtype(dtype, np.timedelta64):\n            return astype_nansafe(pd.to_timedelta(arr).values, dtype, copy=copy)\n\n    if copy or issubclass(arr.dtype.type, np.object_) or issubclass(dtype.type, np.object_):\n        return np.asarray(arr, dtype=dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}