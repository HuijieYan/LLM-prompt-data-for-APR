{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n        self,\n        target: AnyArrayLike,\n        method: Optional[str] = None,\n        limit: Optional[int] = None,\n        tolerance: Optional[Any] = None,\n    ) -> np.ndarray:\n\n        self._check_method(method)\n\n        if self.is_overlapping():\n            msg = (\n                \"cannot handle overlapping indices; use \"\n                \"IntervalIndex.get_indexer_non_unique\"\n            )\n            raise InvalidIndexError(msg)\n\n        target_as_index = ensure_index(target)\n\n        if isinstance(target_as_index, IntervalIndex):\n            # ... (existing logic remains the same)\n            return ensure_platform_int(indexer)\n        \n        # Adding new logic to handle CategoricalIndex made from IntervalIndex\n        elif isinstance(target_as_index, CategoricalIndex) and isinstance(target_as_index.categories, IntervalIndex):\n            target_as_index = target_as_index.astype('interval')\n\n        # Re-attempt to ensure the target_as_index is IntervalIndex\n        if isinstance(target_as_index, IntervalIndex):\n            # ... (existing logic remains the same)\n            return ensure_platform_int(indexer)\n\n        # Code to handle non-IntervalIndex or CategoricalIndex not made from IntervalIndex\n        else:\n            target_as_index = target_as_index.astype('interval')\n\n            # Ensure that the target_as_index is now IntervalIndex\n            if isinstance(target_as_index, IntervalIndex):\n                # ... (existing logic remains the same)\n                return ensure_platform_int(indexer)\n            \n            # Handle other cases, if needed\n            else:\n                raise NotImplementedError(\"Unsupported index type\")",
            "import_list": []
        }
    ]
}