{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n    \n    index = data.index\n\n\n    if not isinstance(clocs, (list, tuple)):\n        clocs = [clocs]\n\n    to_unstack = clocs\n\n    colidxs = [index._get_level_number(name) for name in to_unstack]\n\n    mask = np.zeros(index.nlevels, dtype=bool)\n    mask[colidxs] = True\n\n    mask = np.logical_not(mask)\n\n    ridxs = np.where(mask)[0]\n\n    data_unstacked = data.unstack(level=to_unstack, fill_value=fill_value)\n    new_names = [data_unstacked.index.names[colidxs.index(i)] if i in colidxs else index.names[i] for i in range(index.nlevels)]\n    new_columns = data_unstacked.columns.insert(loc=0, item=new_names, value=new_names)\n\n    if isinstance(data, pd.Series):\n        data_unstacked = pd.DataFrame({0: data_unstacked})\n        new_columns = pd.MultiIndex(names=index.names, levels=index.levels, codes=index.codes)\n        new_columns = data_unstacked.columns.insert(loc=0, item=new_names, value=new_names)\n\n    data_unstacked.columns = new_columns\n    data_unstacked = data_unstacked.to_dense()\n\n    return data_unstacked",
            "import_list": []
        }
    ]
}