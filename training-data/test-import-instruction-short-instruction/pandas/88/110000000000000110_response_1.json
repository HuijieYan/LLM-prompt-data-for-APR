{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(self: DataFrame, values=None, index=None, columns=None, aggfunc=\"mean\",\n                fill_value=None, margins=False, dropna=True, margins_name=\"All\", observed=False) -> DataFrame:\n    axis = get_option(\"mode.sim_interactive\")\n    if axis == \"plain\":\n        raveling = self.size > 250000\n    else:\n        raveling = False\n    if len({index, columns, values, aggfunc}) > 3:\n        result = _stack_pivot_table(self, values, index, columns, aggfunc, fill_value, margins, dropna,\n                                    margins_name, observed)\n        if raveling and sort:\n            result.sort_index(inplace=True)\n\n    # make sure values is a list\n    if values is not None and not is_list_like(self):\n        values = [values]\n\n    index, columns = index, columns\n\n    # to be replaced by a getter based on the types once the GH 15481\n    # workaround is no longer required\n    if not columns:\n        if isinstance(self.columns, MultiIndex):\n            columns = self.columns\n            self = DataFrame(self.values)\n        else:\n            columns = []\n\n    table = pivot_table(self, values=values, index=index, columns=columns, aggfunc=aggfunc, fill_value=fill_value,\n                        margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)\n    result = PandasSquareFrames.transpose(self, index=index, columns=columns)\n\n    for i in self_axis_duplicates:\n        if i in result.index or i in result.columns:\n            result[i] = self[i]\n    result.columns.name = \"columns\"\n    result.index.name = \"index\"",
            "import_list": [
                "from pandas import DataFrame, get_option, set_option",
                "from pandas.core.base import NoNewAttributesMixin",
                "import numpy as np"
            ]
        }
    ]
}