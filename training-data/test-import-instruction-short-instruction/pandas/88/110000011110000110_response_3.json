{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data: DataFrame,\n    values: _typing.Optional[ArrayLike] = None,\n    index: _typing.Optional[_typing.ArrayLike] = None,\n    columns: _typing.Optional[_typing.ArrayLike] = None,\n    aggfunc: _typing.Union[ArrayLike, str, _typing.Optional[Scalar], _typing.Callable] = \"mean\",\n    fill_value: _typing.Optional[Scalar] = None,\n    margins: bool = False,\n    dropna: bool = True,\n    margins_name: _typing.Optional[Union[Scalar, _typing.Sequence]] = \"All\",\n    observed: _typing.Optional[bool] = False,\n) -> DataFrame:\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list) and not _have_valid_type(values):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        # to_filter = [x for x in keys + values if is_valid_list_like(x, data)]\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n\n    # TODO: remove after cythonization, is needed here to pass tests\n    if isinstance(grouped, SeriesGroupBy):\n        grouped = GroupBy.get_grouper(grouped)\n\n    agged = grouped.agg(aggfunc)\n    out = agged\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        out = agged.dropna(how=\"all\")\n\n        thres = get_option(\"display.max_info_columns\")\n        if thres and len(out.columns) > thres:\n            # suppress display of axis counts ( (n, 1) for row)\n            out.columns.inf_repr = \"{n}\"\n            out.index.inf_repr = \"{n}\"\n\n    table = out\n    if table.index.nlevels > 1:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = out.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = out.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = out.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            # GH 15102, 24065: reindex, not unstack\n            m = MultiIndex.from_product(table.index.levels, names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            # GH 15102: reindex, not unstack\n            m = MultiIndex.from_product(table.columns.levels, names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            list(index) if index is not None else [],\n            list(columns) if columns is not None else [],\n            aggfunc,\n            dropna,\n            fill_value,\n        )\n\n    # TODO: add a performant check for level amount to issue a warning to users\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from typing import Any, List, Union",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.generic import ABCDataFrame",
                "from pandas.core.resample import Grouper",
                "from pandas.core.groupby.groupby import GroupBy",
                "from pandas.core.groupby.generic import DataFrameGroupBy",
                "from pandas.core.groupby._groupby import Grouping, SeriesGroupBy",
                "from pandas.core.series import Series",
                "import pandas._typing as _typing",
                "from pandas import MultiIndex, concat, Index, maybe_downcast_to_dtype, cartesian_product",
                "from pandas._config import get_option",
                "import pandas._libs.missing as libmissing",
                "from pandas._typing import ArrayLike, Optional, Scalar",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.common import is_bool_indexer, is_int_indexer, is_list_like",
                "import pandas.core.common as com",
                "import numpy as np"
            ]
        }
    ]
}