{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = []\n        for func in aggfunc:\n            table = pivot.pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return pieces, keys\n\n    keys = index + columns\n\n    if values is not None:\n        values = list(values) if np.iterable(values) else [values]\n        if to_filter := [x for x in keys + values if x in data]:\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key, errors='ignore')\n            except TypeError:\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    table = grouped.agg(aggfunc)\n\n    if dropna and len(table.columns) > 0:\n        table = table.dropna(how=\"all\")\n\n    for v in values:\n        if (v in data) and (np.issubdtype(data[v].dtype, np.integer)) and (v in table) and (not np.issubdtype(table[v].dtype, np.integer)):\n            table[v] = table[v].apply(lambda x: x if not np.isnan(x) else None)\n\n    if table.index.nlevels > 1:\n        index_names = table.index.names[: len(index)]\n        to_unstack = [i for i in range(len(index), len(keys)) if table.index.names[i] is None or table.index.names[i] in index_names]\n        table = table.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            reindex = Index(map(tuple, np.array(np.meshgrid(*[level for level in table.index.levels])).T.reshape(-1, table.index.nlevels)))\n            table = table.reindex(reindex)\n\n        if table.columns.nlevels > 1:\n            reindex = Index(map(tuple, np.array(np.meshgrid(*[level for level in table.columns.levels])).T.reshape(-1, table.columns.nlevels)))\n            table = table.reindex(columns=reindex)\n\n    if isinstance(table, DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast='infer')\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if values and len(values) == 1 and table.columns.nlevels > 1:\n        table = table.xs(values[0], axis=1, level=-1)\n\n    return table",
            "import_list": [
                "from pandas.core.reshaping.pivot import _convert_by, _add_margins",
                "from pandas import DataFrame, Index, MultiIndex",
                "import pandas.core.reshaping.pivot as pivot",
                "import numpy as np"
            ]
        }
    ]
}