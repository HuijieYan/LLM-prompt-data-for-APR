{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(data, min_stamp, date_unit):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\":\n        try:\n            new_data = new_data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    if issubclass(new_data.dtype.type, np.number):\n        in_range = (\n            np.isnan(new_data) |\n            (new_data > min_stamp) |\n            (new_data == iNaT)\n        )\n        if not in_range.all():\n            return data, False\n\n    date_units = (date_unit,) if date_unit else ('s', 'ms', 'us', 'ns')\n    for date_unit in date_units:\n        try:\n            new_data = pd.to_datetime(new_data, errors=\"ignore\", unit=date_unit)\n            return new_data, True\n        except (ValueError, OverflowError):\n            continue\n    return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.io.json import json_normalize",
                "from pandas.core.dtypes.common import is_datetime64tz_dtype, is_datetime64_any_dtype",
                "from pandas.core.dtypes.missing import iNaT",
                "from pandas.core.config import get_option",
                "from pandas.util._exceptions import AbstractMethodError"
            ]
        }
    ]
}