{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        # Early return on empty data\n        if len(data) == 0:\n            return data, False\n\n        new_data = data\n        if is_object_dtype(new_data):\n            try:\n                new_data = new_data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n\n        # Convert integer-like types to datetime\n        if is_scalar(self.min_stamp):\n            invalid_int64 = np.iinfo(np.int64)\n            if np.isnan(self.min_stamp) or self.min_stamp <= invalid_int64.min or self.min_stamp >= invalid_int64.max:\n                raise OutOfBoundsDatetime(\"Out of bounds nanosecond timestamp: {self.min_stamp}\")\n\n        if is_integer_dtype(new_data):\n            invalid_int64 = np.iinfo(np.int64)\n            if new_data.min() < invalid_int64.min or new_data.max() > invalid_int64.max:\n                return data, False\n\n            # Convert to datetime\n            if self.min_stamp != 0:\n                new_data += self.min_stamp\n            result = DatetimeArray(new_data, dtype=\"datetime64[ns]\", freq=None, tz=None, copy=True)\n            return result, True\n\n        # Return false for unprocessable data\n        return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.common import is_integer_dtype, is_object_dtype",
                "from pandas.api.types import is_scalar",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas._libs.tslibs import NaT as iNaT",
                "from pandas._libs.tslibs import NaT",
                "from pandas.errors import OutOfBoundsDatetime"
            ]
        }
    ]
}