{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1) -> \"Tuple[List[Block], Index\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    agg_items: List[Index] = []\n    \n    for block in data.blocks:\n        if block.values.dtype.name == 'Int64':\n            result = block.values.astype('float64').mean(axis=1, skipna=True)\n        else:\n            result = block.values.agg(how)\n\n        if result is not None:\n            # Construct a new Block with the result and append it to the list\n            new_block = Block(result, ndim=2, axis=1, do_integrity_check=False)\n            agg_blocks.append(new_block)\n            agg_items.append(block.mgr_locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Construct the final agg_items and reset the locs in the blocks\n    agg_items = np.concatenate(agg_items)\n    offset = 0\n    for i, blk in enumerate(agg_blocks):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = agg_items[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}