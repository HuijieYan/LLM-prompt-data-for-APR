{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if is_categorical_dtype(arr):\n        return arr.astype(dtype)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if is_datetime64_dtype(arr):\n        if is_integer_dtype(dtype):\n            if skipna:\n                return Series(arr).fillna(NA).astype(dtype)\n            else:\n                raise ValueError(\"Cannot cast datetime to integer with NaN values\")\n        else:\n            return arr.astype(dtype)\n\n    elif is_timedelta64_dtype(arr):\n        if is_integer_dtype(dtype):\n            if skipna:\n                return Series(arr).fillna(NA).astype(dtype)\n            else:\n                raise ValueError(\"Cannot cast timedelta to integer with NaN values\")\n        else:\n            return arr.astype(dtype)\n\n    elif is_object_dtype(arr) and is_object_dtype(dtype):\n        return arr.astype(dtype)\n\n    else:\n        return arr.astype(dtype, copy=copy)",
            "import_list": [
                "import numpy as np",
                "from pandas.api.types import is_datetime64_dtype, is_timedelta64_dtype, is_integer_dtype, is_categorical_dtype",
                "from pandas.core.dtypes.common import is_object_dtype, pandas_dtype",
                "from pandas.core.missing import isna",
                "from pandas import Series, NA"
            ]
        }
    ]
}