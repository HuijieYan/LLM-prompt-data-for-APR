{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    if pd.isna(arr).any():\n        return np.full_like(arr, np.nan, dtype=dtype)\n    \n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pd.api.types.pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return np.array([str(x) for x in arr])\n\n    elif is_datetime64_dtype(arr):\n        # Handling of datetime64 arrays\n        if is_object_dtype(dtype):\n            return pd.to_datetime(arr).astype(dtype)\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif dtype.kind == \"M\":\n            return arr.astype(dtype)\n        else:\n            raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        # Handling of timedelta64 arrays\n        if is_object_dtype(dtype):\n            return pd.to_timedelta(arr).astype(dtype)\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif dtype.kind == \"m\":\n            return arr.astype(dtype)\n        else:\n            raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif pd.api.types.is_object_dtype(arr) and pd.api.types.is_integer(dtype):\n        return arr.astype(dtype)\n\n    elif dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or pd.api.types.is_object_dtype(arr) or pd.api.types.is_object_dtype(dtype):\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}