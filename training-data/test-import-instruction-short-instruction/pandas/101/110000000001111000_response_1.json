{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if isinstance(dtype, (dtypes.DatetimeTZDtype, dtypes.TimedeltaTZDtype)):\n        return arr.astype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n    \n    elif issubclass(dtype.type, np.datetime64):\n        if isinstance(dtype, dtypes.DatetimeTZDtype):\n            return arr.astype(dtype)\n\n        if issubclass(arr.dtype.type, np.datetime64):\n            if dtype.kind != \"M\":\n                raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n            return arr.astype(dtype)\n\n        return arr.view(dtype)\n\n    elif issubclass(dtype.type, np.timedelta64):\n        if isinstance(dtype, dtypes.TimedeltaTZDtype):\n            return arr.astype(dtype)\n\n        elif dtype.kind == \"m\":\n            mask = lib.isna(arr)\n            result = arr.astype(dtype).astype(np.float64)\n            result[mask] = np.nan\n            return result\n\n        elif dtype != np.int64 and dtype != dtype.Timedelta:\n            raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif isinstance(arr, dtypes.ObjectDtype):\n        if isinstance(dtype, (dtypes.DatetimeTZDtype, dtypes.TimedeltaTZDtype)):\n            if com.is_datetime64_any_dtype(arr) or com.is_timedelta64_dtype(arr):\n                from pandas import to_datetime, to_timedelta\n                if isinstance(dtype, dtypes.DatetimeTZDtype):\n                    return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n                else:\n                    return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n        else:\n            if np.issubdtype(dtype.type, np.integer):\n                return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n    if isinstance(dtype, (dtypes.DatetimeTZDtype, dtypes.TimedeltaTZDtype)):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or isinstance(arr, dtypes.ObjectDtype) or isinstance(dtype, dtypes.ObjectDtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas._libs.lib as lib",
                "import pandas.core.arrays._mixins as mixins",
                "import pandas.core.common as com",
                "import pandas.core.dtypes.common as dtype",
                "import pandas.core.dtypes.dtypes as dtypes",
                "import pandas.core.nanops as libnanops",
                "from pandas import to_datetime, to_timedelta"
            ]
        }
    ]
}