{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  \n    tensor_map = {}  \n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.input.shape) for layer in model.layers if hasattr(layer, 'input')]\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        input_tensors = [Input(tensor=x) if not K.is_keras_tensor(x) else x for x in input_tensors]\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  \n\n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            continue\n\n        if layer in layer_map:\n            continue\n\n        # Clone layer.\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    for x, y in tensor_map.items():\n        if y[0] in layer_map:\n            tensor_map[x] = (layer_map[y[0]], y[1])\n\n    # Instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for x in model.outputs:\n        if x not in tensor_map:\n            raise ValueError('Could not compute output ' + str(x))\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n    \n    new_model = Model(input_tensors, output_tensors, name=model.name)\n    return new_model",
            "import_list": []
        }
    ]
}