{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    from keras.engine.network import Network\n    if not isinstance(model, Network):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if model._is_graph_network:\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    # Clean validation and changes from here\n\n    if input_tensors is None:\n        input_tensors = [None] * len(model.inputs)\n\n    print('Cloning model.')\n    cloned_model = model.__class__.from_config(model.get_config())\n\n    if input_tensors is not None:\n\t    model_inputs = []\n\t    for x in input_tensors:\n\t        if x is None:\n\t            input_layer = Input(batch_shape=(None,) + (model.input_shape[1:]))\n\t            model_inputs.append(input_layer)\n\t        else:\n\t            if K.is_keras_tensor(x):\n\t                model_inputs.append(x)\n\t            else:\n\t                input_layer = Input(tensor=x)\n\t                model_inputs.append(input_layer)\n\t    outputs = cloned_model(model_inputs)\n    else:\n\t    outputs = cloned_model(model.inputs)\n\n    print('Cloned model.')\n    return Network(model_inputs, outputs, name='cloned_'+model.name)",
            "import_list": [
                "from keras.engine.network import Network"
            ]
        }
    ]
}