{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if model.__class__.__name__ == 'Sequential':\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    input_layers = model.inputs\n    output_tensors = []\n    for layer in input_layers:\n        input_shape = layer.shape.as_list()  # get input shape\n        input_tensor = Input(shape=input_shape[1:])  # create new input tensor\n        output_tensors.append(input_tensor)\n\n    output_layers = model.layers[1: ]  # exclude the input layer\n\n    for layer in output_layers:\n        previous_tensor = layer.input  # get the input tensor of the layer\n        inputs = [tensor for tensor in output_tensors if tensor.name == previous_tensor.name]  # find the corresponding input tensor\n        if len(inputs) > 0:  # if input tensor found\n            input_tensor = inputs[0]\n            layer_output = layer(input_tensor)  # call the layer with the corresponding input tensor\n            output_tensors.append(layer_output)  # append the output tensor\n        else:\n            raise ValueError('Could not find input tensor for layer:', layer.name)\n\n    new_model = Model(inputs=input_layers, outputs=output_tensors, name=model.name)\n    return new_model",
            "import_list": [
                "from keras.layers import Input, Lambda",
                "from keras.models import Model",
                "import numpy as np"
            ]
        }
    ]
}