{
    "black": [
        {
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n\n    result = (0, 0)\n\n    if current_line.leaves:\n        first_leaf = current_line.leaves[0]\n        before = min(first_leaf.prefix.count(\"\\n\"), max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n\n    depth = current_line.depth\n\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        before = 1 if depth else 2\n\n    is_decorator = current_line.is_decorator\n\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:\n            self.previous_defs.append(depth)\n        if self.previous_line is None:\n            return (0, 0)\n        \n        if self.previous_line.is_decorator:\n            return (0, 0)\n\n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n\n        result = (newlines, 0)\n    else:\n        if current_line.is_flow_control:\n            result = (before, 1)\n        elif (\n            self.previous_line\n            and self.previous_line.is_import\n            and not current_line.is_import\n            and depth == self.previous_line.depth\n        ):\n            result = (before or 1, 0)\n        elif (\n            self.previous_line\n            and self.previous_line.is_yield\n            and not current_line.is_yield\n            or depth != self.previous_line.depth\n        ):\n            result = (before or 1, 0)\n        else:\n            result = (before, 0)\n\n    return result",
            "import_list": []
        }
    ]
}