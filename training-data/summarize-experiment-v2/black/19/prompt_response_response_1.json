{
    "black": [
        {
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    \n    depth = current_line.depth\n    newlines_before = 0\n    newlines_after = 0\n\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        if depth == 0:\n            newlines_before = max(1, newlines_before)\n        else:\n            newlines_before = max(0, newlines_before-1)\n    \n    is_decorator = current_line.is_decorator\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:\n            self.previous_defs.append(depth)\n        if self.previous_line is None:\n            # Don't insert empty lines before the first line in the file.\n            return newlines_before, newlines_after\n\n        if self.previous_line.is_decorator:\n            # Don't insert empty lines between decorators.\n            return newlines_before, newlines_after\n        \n        if depth:\n            newlines_before = max(0, newlines_before-1)\n    \n    if current_line.is_flow_control:\n        newlines_before = max(before, 1)\n        return newlines_before, 1\n\n    if self.previous_line and self.previous_line.is_import and not current_line.is_import and depth == self.previous_line.depth:\n        newlines_before = max(before or 1, newlines_before)\n        return newlines_before, newlines_after\n\n    if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or depth != self.previous_line.depth):\n        newlines_before = max(before or 1, newlines_before)\n        return newlines_before, newlines_after\n\n    return newlines_before, newlines_after",
            "import_list": []
        }
    ]
}