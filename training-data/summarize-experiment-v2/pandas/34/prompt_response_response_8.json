{
    "pandas": [
        {
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name, tz=ax.tz)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n\n    # Ensure that first and last have the same time zone as ax\n    first = first.tz_convert(ax.tz)\n    last = last.tz_convert(ax.tz)\n\n    bins = date_range(\n        start=first,\n        end=last,\n        freq=self.freq,\n        tz=ax.tz,\n        closed=self.closed,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(bins, ax_values)\n\n    labels = binner\n    if self.closed == \"right\" or self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    if len(bin_edges) < len(labels):\n        labels = labels[:len(bin_edges)]\n\n    return binner, bins, labels",
            "import_list": []
        }
    ]
}