{
    "pandas": [
        {
            "bugID": 112,
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n        self,\n        target: AnyArrayLike,\n        method: Optional[str] = None,\n        limit: Optional[int] = None,\n        tolerance: Optional[Any] = None,\n    ) -> np.ndarray:\n    \n        self._check_method(method)\n    \n        if self.is_overlapping:\n            msg = (\n                \"cannot handle overlapping indices; use \"\n                \"IntervalIndex.get_indexer_non_unique\"\n            )\n            raise InvalidIndexError(msg)\n    \n        target_as_index = ensure_index(target)\n    \n        if isinstance(target_as_index, IntervalIndex):\n            # equal indexes -> 1:1 positional match\n            if self.equals(target_as_index):\n                return np.arange(len(self), dtype=\"intp\")\n    \n            # different closed or incompatible subtype -> no matches\n            common_subtype = find_common_type(\n                [self.dtype.subtype, target_as_index.dtype.subtype]\n            )\n            if self.closed != target_as_index.closed or is_object_dtype(common_subtype):\n                return np.repeat(np.intp(-1), len(target_as_index))\n    \n            # non-overlapping -> at most one match per interval in target_as_index\n            # want exact matches -> need both left/right to match, so defer to\n            # left/right get_indexer, compare elementwise, equality -> match\n            left_indexer = self.left.get_indexer(target_as_index.left)\n            right_indexer = self.right.get_indexer(target_as_index.right)\n            indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n            \n            return ensure_platform_int(indexer)\n        else:\n            # Handle other cases or return a default value\n            return np.array([])",
            "import_list": []
        }
    ]
}