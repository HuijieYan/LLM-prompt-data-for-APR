{
    "pandas": [
        {
            "bugID": 112,
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n    self,\n    target: AnyArrayLike,\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> np.ndarray:\n\n    self._check_method(method)\n\n    if self.is_overlapping:\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n\n    target_as_index = ensure_index(target)\n\n    if isinstance(target_as_index, IntervalIndex):\n        common_subtype = find_common_type([self.dtype.subtype, target_as_index.dtype.subtype])\n        if self.equals(target_as_index) and self.closed == target_as_index.closed and not is_object_dtype(common_subtype):\n            return np.arange(len(self), dtype=\"intp\")\n        else:\n            return np.repeat(-1, len(target_as_index))\n    elif not is_object_dtype(target_as_index):\n        target_as_index = self._maybe_convert_i8(target_as_index)\n        return self._engine.get_indexer(target_as_index.values)\n    else:\n        indexer = [self.get_loc(key) if key in self else -1 for key in target_as_index]\n        return np.array(indexer, dtype='intp')",
            "import_list": []
        }
    ]
}