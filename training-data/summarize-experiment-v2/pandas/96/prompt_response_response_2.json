{
    "pandas": [
        {
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            if self.n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            # Add adjustment for holidays\n            if self.holidays:\n                curr_date = other.date()\n                while curr_date in self.holidays:\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n                    curr_date = other.date()\n\n            bd, r = divmod(abs(self.n * 60), businesshours // 60)\n            if self.n < 0:\n                bd, r = -bd, -r\n\n            # Adjust by business days first\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            # Remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n\n            if self.n >= 0:\n                while bhour_remain != timedelta(0):\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(other)) - other\n                    )\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != timedelta(0):\n                    bhour = self._next_opening_time(other) - other\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and getattr(other, \"nanosecond\", 0) != 0\n                    ):\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(\n                            self._next_opening_time(other + bhour - timedelta(seconds=1))\n                        )\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}