{
    "pandas": [
        {
            "bugID": 145,
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries):\n        if right.isna().any():\n            # Handle the case where the Series contains NaT values\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) if not pd.isna(b.iloc[i]) else pd.NaT for i in range(len(a.columns))}\n        else:\n            # Handle other cases where the Series does not contain NaT values\n            assert right.index.equals(left.index)\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
            "import_list": [
                "import pandas.core.computation.expressions as expressions"
            ]
        }
    ]
}