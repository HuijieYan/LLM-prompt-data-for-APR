{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n                \n                if value is None:\n                    if field.required:\n                        errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                    else:\n                        values[field.name] = deepcopy(field.default)\n                else:\n                    if (\n                        isinstance(field_info, params.File)\n                        and lenient_issubclass(field.type_, bytes)\n                        and isinstance(value, UploadFile)\n                    ):\n                        value = await value.read()\n                    elif (\n                        field.shape in sequence_shapes\n                        and isinstance(value, sequence_types)\n                    ):\n                        value = sequence_shape_to_type[field.shape](value)\n                    v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                    if isinstance(errors_, ErrorWrapper):\n                        errors.append(errors_)\n                    elif isinstance(errors_, list):\n                        errors.extend(errors_)\n                    else:\n                        values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}