{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n            if (\n                value is None\n                or (isinstance(field, ModelField) and isinstance(value, list))\n                or (isinstance(field, ModelField) and isinstance(value, set))\n                or (isinstance(field, ModelField) and isinstance(value, tuple))\n            ):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field, ModelField)\n                and isinstance(value, list)\n                and field.sub_fields\n            ):\n                v_list = []\n                errors_list = []\n                for item in value:\n                    v, v_errors = field.sub_fields[0].validate(\n                        item, values, loc=(\"body\", field.alias)\n                    )\n                    if isinstance(v_errors, ErrorWrapper):\n                        errors_list.append(v_errors)\n                    elif isinstance(v_errors, list):\n                        errors_list.extend(v_errors)\n                    else:\n                        v_list.append(v)\n                values[field.name] = v_list\n                errors.extend(errors_list)\n            else:\n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.alias] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}