{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.alias in received_body:\n                    value = received_body.get(field.alias)\n            if (\n                value is None\n                or (isinstance(field, params.Form) and value == \"\")\n                or (\n                    isinstance(field, params.Form)\n                    and field.shape in sequence_shapes\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}