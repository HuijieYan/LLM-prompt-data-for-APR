{
    "keras": [
        {
            "bugID": 25,
            "start_line": 21,
            "file_name": "keras/applications/imagenet_utils.py",
            "replace_code": "def test_preprocess_input():\n    # Test image batch with float and int image input\n    x = np.random.uniform(0, 255, (2, 10, 10, 3))\n    xint = x.astype('int32')\n    assert np.allclose(_preprocess_numpy_input(x, 'channels_last', 'tf'), _preprocess_numpy_input(x, 'channels_last', 'tf'))\n    assert np.allclose(_preprocess_numpy_input(xint, 'channels_last', 'tf'), _preprocess_numpy_input(xint, 'channels_last', 'tf'))\n\n    out1 = _preprocess_numpy_input(x, 'channels_last', 'tf')\n    out1int = _preprocess_numpy_input(xint, 'channels_last', 'tf')\n    out2 = _preprocess_numpy_input(np.transpose(x, (0, 3, 1, 2)), 'channels_first', 'tf')\n    out2int = _preprocess_numpy_input(np.transpose(xint, (0, 3, 1, 2)), 'channels_first', 'tf')\n    assert np.allclose(out1, out2.transpose(0, 2, 3, 1))\n    assert np.allclose(out1int, out2int.transpose(0, 2, 3, 1))\n\n    # Test single image\n    x = np.random.uniform(0, 255, (10, 10, 3))\n    xint = x.astype('int32')\n    assert np.allclose(_preprocess_numpy_input(x, 'channels_last', 'tf'), _preprocess_numpy_input(x, 'channels_last', 'tf'))\n    assert np.allclose(_preprocess_numpy_input(xint, 'channels_last', 'tf'), _preprocess_numpy_input(xint, 'channels_last', 'tf'))\n\n    out1 = _preprocess_numpy_input(x, 'channels_last', 'tf')\n    out1int = _preprocess_numpy_input(xint, 'channels_last', 'tf')\n    out2 = _preprocess_numpy_input(np.transpose(x, (2, 0, 1)), 'channels_first', 'tf')\n    out2int = _preprocess_numpy_input(np.transpose(xint, (2, 0, 1)), 'channels_first', 'tf')\n    assert np.allclose(out1, out2.transpose(1, 2, 0))\n    assert np.allclose(out1int, out2int.transpose(1, 2, 0))",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}