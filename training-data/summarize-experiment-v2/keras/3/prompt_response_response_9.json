{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model.inputs:\n            input_tensor = Input(batch_shape=layer.get_shape(),\n                                 dtype=layer.dtype,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n    else:\n        for i, x in enumerate(input_tensors):\n            name = model.inputs[i].name\n            input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n            input_tensors[i] = input_tensor\n            # Cache newly created input layer.\n            original_input_layer = x._keras_history[0]\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[original_input_layer] = newly_created_input_layer\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = y\n\n    # Create output tensors\n    output_tensors = []\n    for layer in model.outputs:\n        output_tensor = layer\n        output_tensors.append(output_tensor)\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}