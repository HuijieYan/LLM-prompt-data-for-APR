{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    input_layers = []\n    layer_map = {}\n    tensor_map = {}\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input.shape[1:], dtype=layer.input.dtype) for layer in model.input_layers]\n\n    for original_layer, input_tensor in zip(model.input_layers, input_tensors):\n        layer_map[original_layer] = input_tensor\n\n    for node in model.nodes:\n        layer = node.outbound_layer\n\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n            \n        layer = layer_map[layer]\n        if isinstance(layer, InputLayer):\n            continue\n        \n        reference_input_tensors = node.input_tensors\n        computed_data = []\n        \n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n\n            output_tensors = to_list(layer(*[x[0] for x in computed_data], **kwargs))\n            for x, y in zip(node.output_tensors, output_tensors):\n                tensor_map[x] = y\n\n    output_tensors = [tensor_map[x] for x in model.output_tensors]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}