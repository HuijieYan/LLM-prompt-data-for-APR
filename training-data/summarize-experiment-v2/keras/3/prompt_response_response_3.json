{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    input_layers = model._input_layers\n\n    if input_tensors is None:\n        for layer in input_layers:\n            input_tensor = Input(shape=layer.input_shape[1:])\n            layer_map[layer] = input_tensor\n            input_tensors = input_tensor\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_tensors[i] = input_tensor\n                layer_map[input_layers[i]] = input_tensor\n            else:\n                layer_map[input_layers[i]] = x\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n        else:\n            layer_map[layer] = layer_map[layer]\n\n    for node in model._nodes_by_depth:\n        layer = node.outbound_layer\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n        else:\n            new_layer = layer_map[layer]\n            if isinstance(new_layer, InputLayer):\n                continue\n\n        reference_input_tensors = node.input_tensors\n        computed_data = []\n\n        for x in reference_input_tensors:\n            computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n\n            computed_tensors = [x[0] for x in computed_data]\n            output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n\n            for x, y in zip(node.output_tensors, output_tensors):\n                tensor_map[x] = y\n\n    output_tensors = [tensor_map[x] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}