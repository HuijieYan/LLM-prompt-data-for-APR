{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n\n    tensor_map = dict(zip(model.inputs, input_tensors))\n    \n    cloned_layers = {}\n    for layer in model.layers:\n        config = layer.get_config()\n        new_layer = layer.__class__.from_config(config)\n        new_layer.build(layer.input_shape)\n        cloned_layers[layer] = new_layer\n\n    for layer in model.layers:\n        new_layer = cloned_layers[layer]\n        if isinstance(layer, InputLayer):\n            continue\n        inbound_tensors = [tensor_map[x] for x in layer._inbound_nodes[0].input_tensors]\n        kwargs = layer._inbound_nodes[0].arguments\n        new_output_tensors = new_layer(inbound_tensors, **kwargs)\n        for orig, new in zip(layer._inbound_nodes[0].output_tensors, new_output_tensors):\n            tensor_map[orig] = new\n\n    cloned_inputs = [tensor_map[x] for x in model.inputs]\n    cloned_outputs = [tensor_map[x] for x in model.outputs]\n\n    return Model(cloned_inputs, cloned_outputs, name=model.name)",
            "import_list": []
        }
    ]
}