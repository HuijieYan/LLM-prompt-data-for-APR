{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}\n    tensor_map = {}\n\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            layer_map[layer] = input_tensor._keras_history[0]\n\n    for x in model.inputs:\n        tensor_map[x] = (layer_map[x], None)\n\n    for layer in model.layers:\n        layer_config = layer.get_config()\n        new_layer = layer.__class__.from_config(layer_config)\n        layer_map[layer] = new_layer\n\n    for node in model._nodes_by_depth:\n        inbound_layers = [layer_map[layer] for layer in node.inbound_layers]\n        kwargs = node.arguments if node.arguments else {}\n\n        if len(inbound_layers) == 1:\n            output_tensors = to_list(layer(inbound_layers[0], **kwargs))\n\n        else:\n            output_tensors = to_list(layer(inbound_layers, **kwargs))\n\n        for idx, tensor in enumerate(node.outbound_layer.inbound_nodes):\n            tensor_map[node.output_tensors[idx]] = (output_tensors[idx], None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}