{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  \n    tensor_map = {}  \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n\n    for original_input_layer, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[original_input_layer] = input_tensor\n\n    tensor_map = {x: y for x, y in zip(model.inputs, input_tensors)}\n\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                layer_map[layer] = layer.__class__.from_config(layer.get_config())\n\n            layer = layer_map[layer]\n            if isinstance(layer, InputLayer):\n                continue\n\n            reference_input_tensors = node.input_tensors\n            computed_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n                computed_tensors = [x[0] for x in computed_data]\n                output_tensors = layer(computed_tensors, **kwargs)\n                for x, y in zip(node.output_tensors, output_tensors):\n                    tensor_map[x] = y\n\n    output_tensors = [tensor_map[x] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}