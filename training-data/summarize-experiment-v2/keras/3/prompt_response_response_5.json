{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.input_shape[1:]) for layer in model.layers]\n    else:\n        # Cache input tensors.\n        for original_input, new_input in zip(model.inputs, input_tensors):\n            tensor_map[original_input] = (new_input, None)\n\n    for layer in model.layers:\n        # Get or create layer.\n        if layer not in layer_map:\n            # Clone layer and update layer mapping.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n        else:\n            # Reuse previously cloned layer.\n            new_layer = layer_map[layer]\n\n    # Map input tensors to the corresponding layer's input.\n    for original_node, new_node in zip(model.nodes, model._input_layers):\n        for original_input, new_input in zip(original_node, new_node):\n            tensor_map[original_input] = (new_input, None)\n\n    # Map input tensors to the corresponding layer's output.\n    for original_node, new_node in zip(model.nodes, model._output_layers):\n        for original_output, new_output in zip(original_node.outbound_layer.output, new_node.outbound_layer.output):\n            tensor_map[original_output] = (new_output, None)\n\n    # Build the output_tensors list for the new model.\n    output_tensors = [tensor_map[output_tensor][0] for output_tensor in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}