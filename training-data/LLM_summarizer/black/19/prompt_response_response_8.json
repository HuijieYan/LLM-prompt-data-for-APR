{
    "black": [
        {
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n\n    depth = current_line.depth\n    if depth:\n        newlines = 1\n    else:\n        newlines = 2\n\n    if current_line.is_decorator:\n        if self.previous_line is None or self.previous_line.is_decorator:\n            return 0, 0\n        if depth:\n            return newlines - 1, 0\n        return newlines, 0\n\n    if current_line.is_flow_control:\n        return before, 1\n\n    if self.previous_line and self.previous_line.is_import and not current_line.is_import and depth == self.previous_line.depth:\n        return before or 1, 0\n\n    if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or depth != self.previous_line.depth):\n        return before or 1, 0\n\n    return before, 0",
            "import_list": []
        }
    ]
}