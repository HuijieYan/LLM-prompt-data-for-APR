{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n            if value is None and field.required:\n                errors.append(\n                    ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                )\n            else:\n                if field.shape in sequence_shapes:\n                    if lenient_issubclass(field.type_, list):\n                        value = [value] if not isinstance(value, list) else value\n                    elif lenient_issubclass(field.type_, set):\n                        value = {value} if not isinstance(value, set) else value\n                    elif lenient_issubclass(field.type_, tuple):\n                        value = tuple(value) if not isinstance(value, tuple) else value\n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}