{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n                if not value:  # Handle the case where value is empty\n                    if field.required:\n                        if PYDANTIC_1:\n                            errors.append(\n                                ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                            )\n                        else:  \n                            errors.append(\n                                ErrorWrapper(\n                                    MissingError(),\n                                    loc=(\"body\", field.alias),\n                                    config=BaseConfig,\n                                )\n                            )\n                    else:\n                        values[field.name] = deepcopy(field.default)\n                else:\n                    if field.shape in sequence_shapes and len(value) > 1:  # Handle repeated key-value pairs\n                        if isinstance(field.type_, list):\n                            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                            if isinstance(errors_, ErrorWrapper):\n                                errors.append(errors_)\n                            elif isinstance(errors_, list):\n                                errors.extend(errors_)\n                            else:\n                                values[field.name] = v_\n                        else:\n                            errors.append(ErrorWrapper(ValueError(f\"Value for {field.alias} should be a list\"), loc=(\"body\", field.alias)))\n                    else:\n                        v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                        if isinstance(errors_, ErrorWrapper):\n                            errors.append(errors_)\n                        elif isinstance(errors_, list):\n                            errors.extend(errors_)\n                        else:\n                            values[field.name] = v_\n            else:\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  \n                        errors.append(\n                            ErrorWrapper(\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n    return values, errors",
            "import_list": []
        }
    ]
}