{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (previous implementation)\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            layer = node.outbound_layer\n\n            # Get or create layer.\n            if layer not in layer_map:\n                # Clone layer.\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                # Reuse previously cloned layer.\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(layer, InputLayer):\n                    continue\n\n            # ... (previous implementation)\n\n            # If all previous input tensors are available in tensor_map, then call node.inbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer.\n                computed_tensors = [x[0] for x in computed_data]\n                if has_arg(layer.call, 'mask'):\n                    computed_masks = [x[1] for x in computed_data]\n                    kwargs = {} if node.arguments is None else node.arguments\n                    if 'mask' not in kwargs and computed_masks and any(computed_masks):\n                        kwargs['mask'] = computed_masks\n                    outputs = layer(computed_tensors, **kwargs)\n                    if isinstance(outputs, list):\n                        output_tensors = outputs[0]  # Handle multiple output tensors\n                    else:\n                        output_tensors = outputs\n                    # Update tensor_map.\n                    for x, y in zip(reference_output_tensors, to_list(output_tensors)):\n                        tensor_map[x] = (y, None)\n                else:\n                    output_tensors = layer(computed_tensors, **kwargs)\n                    for x, y in zip(reference_output_tensors, to_list(output_tensors)):\n                        tensor_map[x] = (y, None)\n\n    # ... (post-iteration implementation)\n\n    return Model(input_tensors, to_list(output_tensors), name=model.name)",
            "import_list": []
        }
    ]
}