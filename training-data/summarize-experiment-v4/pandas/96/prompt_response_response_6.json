{
    "pandas": [
        {
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    \n    # Adjusting the timezone and nanosecond\n    other = as_datetime(other).replace(tzinfo=None, microsecond=0)\n\n    n = self.n\n\n    if n >= 0 and (other.time() in self.end or not self.is_on_offset(other)):\n        other = self._next_opening_time(other)\n    elif n < 0 and (other.time() in self.start or not self.is_on_offset(other)):\n        other = self._prev_opening_time(other) - timedelta(seconds=1)\n        other = self._next_opening_time(self._get_closing_time(other))\n\n    # Get total business hours by sec in one business day\n    businesshours = sum(\n        self._get_business_hours_by_sec(st, en)\n        for st, en in zip(self.start, self.end)\n    )\n\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    # Adjust by business days first\n    if bd != 0:\n        business_day_offset = BusinessDay(n=bd)\n        other = business_day_offset.rollforward(other)\n\n    # Remaining business hours to adjust\n    bhour_remain = timedelta(minutes=r)\n\n    # Adjust based on business hours\n    while bhour_remain > timedelta(0):\n        closing_time = self._get_closing_time(other)\n        opening_time = self._next_opening_time(other)\n        if n >= 0:\n            bhour = closing_time - other\n        else:\n            bhour = opening_time - other\n\n        if bhour_remain < bhour:\n            other += bhour_remain\n            break\n        else:\n            bhour_remain -= bhour\n            other = self._next_opening_time(other + bhour)\n\n    return other",
            "import_list": []
        }
    ]
}