{
    "pandas": [
        {
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # existing code remains same...\n    \n    for block in data.blocks:\n        # existing code for preceding logic...\n\n        if result is not no_result:\n            # Updated logic to handle Extension Blocks\n            if block.is_extension and isinstance(result, np.ndarray):\n                if result.ndim == 1 or result.shape[0] == 1:\n                    try:\n                        # Cast back if feasible for Extension Blocks\n                        if len(result.shape) == 1:\n                            result = type(block.values)._from_sequence(\n                                result, dtype=block.values.dtype\n                            )\n                        else:\n                            result = type(block.values)._from_sequence(\n                                result.ravel(), dtype=block.values.dtype\n                            )\n                    except ValueError:\n                        # If unable to cast, reshape the result\n                        if len(result.shape) == 1:\n                            result = result.reshape(1, -1)\n                else:\n                    # Handle the case where Extension Blocks do not meet the expected dimensions\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n            else:\n                # Original logic for non-Extension Blocks\n                result = maybe_downcast_numeric(result, block.dtype)\n            \n            agg_block: Block = block.make_block(result)\n\n        # existing code...\n        \n    # existing code...\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}