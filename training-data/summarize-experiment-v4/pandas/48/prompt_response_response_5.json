{
    "pandas": [
        {
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        result, _ = self.grouper.aggregate(\n            block.values, how, axis=1, min_count=min_count\n        )\n\n        if result is None:\n            deleted_items.append(locs)\n        else:\n            agg_blocks.append(block.make_block(result))\n            new_items.append(locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        indexer = np.array([i for i in indexer if i not in deleted])\n\n    offset = 0\n    for i, blk in enumerate(agg_blocks):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : offset + loc]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}