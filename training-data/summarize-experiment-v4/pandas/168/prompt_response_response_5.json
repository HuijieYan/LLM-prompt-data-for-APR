{
    "pandas": [
        {
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n\n    if level is not None:\n        if not isinstance(group_axis, (Index, MultiIndex)):\n            raise TypeError(\"level is not valid with non-Index objects\")\n\n        # Ensure level is a list for consistency\n        if not is_list_like(level):\n            level = [level]\n\n        # Validate levels and create key from them\n        if len(level) == 1:\n            level = level[0]\n            if validate:\n                if level not in group_axis.names:\n                    raise ValueError(\n                        \"Level name {} is not the name of the index\".format(level)\n                    )\n        else:\n            if validate:\n                if not group_axis.is_type_compatible_with_indexer(\"level\", level):\n                    raise ValueError(\"key/level overlap\")\n\n        key = group_axis.get_level_values(level)\n\n    elif key is not None:\n\n        # Validate the presence of the key in group_axis\n        if key not in group_axis:\n            raise ValueError(f\"Key '{key}' not found in the index or columns\")",
            "import_list": []
        }
    ]
}