{
    "pandas": [
        {
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() >= self.end[0] or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                if other in self._holidays:\n                    other = self._next_opening_time(other)\n        else:\n            if other.time() <= self.start[-1]:\n                # adjustment to move to previous business day\n                other = self._prev_opening_time(other)\n                if other in self._holidays:\n                    other = self._prev_opening_time(other)\n\n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, remainder = divmod(abs(n), businesshours / 60)\n        if n < 0:\n            bd, remainder = -bd, -remainder\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            other += skip_bd\n            while other in self._holidays:\n                other = self._next_opening_time(other)\n\n        # remaining business hours to adjust\n        minutes_left = int(remainder)\n\n        if n >= 0:\n            while minutes_left > 0:\n                closing_time = self._get_closing_time(other)\n                time_diff = (closing_time - other).seconds // 60\n                if minutes_left < time_diff:\n                    # finish adjusting if possible\n                    other += timedelta(minutes=minutes_left)\n                    minutes_left = 0\n                else:\n                    # go to next business time interval\n                    minutes_left -= time_diff\n                    other = self._next_opening_time(closing_time)\n                    if other in self._holidays:\n                        other = self._next_opening_time(other)\n        else:\n            while minutes_left < 0:\n                opening_time = self._prev_opening_time(other)\n                time_diff = (other - opening_time).seconds // 60\n                if abs(minutes_left) < time_diff or (abs(minutes_left) == time_diff and nanosecond != 0):\n                    # finish adjusting if possible\n                    other -= timedelta(minutes=abs(minutes_left))\n                    minutes_left = 0\n                else:\n                    # go to next business time interval\n                    minutes_left += time_diff\n                    closing_prev_opening = self._get_closing_time(opening_time)\n                    other = self._prev_opening_time(closing_prev_opening)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}