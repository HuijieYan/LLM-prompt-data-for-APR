{
    "pandas": [
        {
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hour_seconds = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = other.replace(hour=15, minute=0)  # Set time to opening hour for business day\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Adjust business days\n        business_days, remaining_hours_seconds = divmod(abs(n * 60), business_hour_seconds // 60)\n        if n < 0:\n            business_days, remaining_hours_seconds = -business_days, -remaining_hours_seconds\n\n        if business_days != 0:\n            business_day_offset = timedelta(days=business_days)\n            if not self._is_on_offset(other + business_day_offset):\n                prev_open = self._prev_opening_time(other)\n                remaining_time = other - prev_open\n                other = prev_open.replace(hour=15, minute=0) + business_day_offset + remaining_time\n            else:\n                other += business_day_offset\n\n        remaining_hours_delta = timedelta(seconds=remaining_hours_seconds * 60)\n\n        if n >= 0:\n            while remaining_hours_delta != timedelta(0):\n                closing_time = self._get_closing_time(self._prev_opening_time(other))\n                business_hours_remaining = closing_time - other\n                if remaining_hours_delta <= business_hours_remaining:\n                    other += remaining_hours_delta\n                    remaining_hours_delta = timedelta(0)\n                else:\n                    remaining_hours_delta -= business_hours_remaining\n                    other = self._next_opening_time(other + business_hours_remaining)\n        else:\n            while remaining_hours_delta != timedelta(0):\n                opening_time = self._next_opening_time(other)\n                business_hours_remaining = opening_time - other\n                if remaining_hours_delta >= business_hours_remaining:\n                    if remaining_hours_delta > business_hours_remaining or (remaining_hours_delta == business_hours_remaining and getattr(other, \"nanosecond\", 0) != 0):\n                        other += remaining_hours_delta\n                        remaining_hours_delta = timedelta(0)\n                else:\n                    remaining_hours_delta -= business_hours_remaining\n                    other = self._get_closing_time(self._next_opening_time(other + business_hours_remaining - timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import apply_wraps"
            ]
        }
    ]
}