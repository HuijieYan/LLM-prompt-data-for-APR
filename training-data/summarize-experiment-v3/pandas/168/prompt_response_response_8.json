{
    "pandas": [
        {
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if isinstance(level, list):\n                if len(level) == 1:\n                    level = level[0]\n                else:\n                    raise ValueError(\"Only one level is allowed with MultiIndex\")\n            else:\n                if is_scalar(level):\n                    # Get the level values from group_axis\n                    key = group_axis.get_level_values(level)\n                    level = None\n        else:\n            if is_list_like(level):\n                if len(level) == 1:\n                    level = level[0]\n                else:\n                    raise ValueError(\"Only one level is allowed with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    # additional code for handling key parameter\n\n    if isinstance(key, str):\n        if key in obj.columns:\n            key = obj[key]\n        else:\n            raise KeyError(\"Column '{}' not found in DataFrame\".format(key))\n    elif isinstance(key, (list, tuple)):\n        new_key = []\n        for k in key:\n            if k in obj.columns:\n                new_key.append(obj[k])\n            else:\n                raise KeyError(\"Column '{}' not found in DataFrame\".format(k))\n        key = new_key\n\n    # rest of the unmodified code...\n\n    # create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}