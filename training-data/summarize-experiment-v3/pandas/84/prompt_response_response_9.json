{
    "pandas": [
        {
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Get the index and its levels, codes, and names\n    index = data.index\n    levels = [index.levels[i] for i in range(index.nlevels)]\n    codes = [index.codes[i] for i in range(index.nlevels)]\n    names = [index.names[i] for i in range(index.nlevels)]\n\n    cloc_indices = []  # Stores the indices of the specified clocs\n    for i in clocs:\n        try:\n            cloc_indices.append(names.index(i))\n        except ValueError:  # Handle the case where the level is not found\n            raise KeyError(f'Level {i} not found')\n\n    rloc_indices = [i for i in range(index.nlevels) if i not in cloc_indices]\n\n    # Construct the new index\n    new_index_levels = [levels[i] for i in rloc_indices] + [get_compressed_ids(codes, cloc_indices)]\n    new_index_codes = [codes[i] for i in rloc_indices] + [compress_group_index(get_group_index(codes, cloc_indices, sort=False, xnull=False), sort=False)[0]]\n\n    new_index_names = [names[i] for i in rloc_indices] + [\"__placeholder__\"]\n\n    dummy_index = MultiIndex(\n        levels=new_index_levels,\n        codes=new_index_codes,\n        names=new_index_names,\n        verify_integrity=False,\n    )\n\n    # Perform unstacking\n    dummy = data.copy()\n    dummy.index = dummy_index\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    # Update the unstacked index\n    unstacked_index = unstacked.index if isinstance(unstacked, Series) else unstacked.columns\n\n    new_levels = [unstacked_index.levels[0]] + [levels[i] for i in cloc_indices]\n    new_names = [data.columns.names[0]] + [names[i] for i in cloc_indices]\n    new_codes = [unstacked_index.codes[0]] + [recons_codes.take(unstacked_index.codes[-1]) for recons_codes in decons_obs_group_ids(compress_group_index(get_group_index(codes, cloc_indices, sort=False, xnull=False), sort=False)[0], compress_group_index(get_group_index(codes, cloc_indices, sort=False, xnull=False), sort=False)[1], [len(x) for x in [levels[i] for i in cloc_indices]], codes, xnull=False)]\n\n    new_index = MultiIndex(\n        levels=new_levels,\n        codes=new_codes,\n        names=new_names,\n        verify_integrity=False,\n    )\n\n    # Update the unstacked DataFrame/Series with the new index\n    if isinstance(unstacked, Series):\n        unstacked.index = new_index\n    else:\n        unstacked.columns = new_index\n\n    return unstacked",
            "import_list": []
        }
    ]
}