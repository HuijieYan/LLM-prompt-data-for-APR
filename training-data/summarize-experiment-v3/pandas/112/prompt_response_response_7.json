{
    "pandas": [
        {
            "bugID": 112,
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n    self,\n    target: AnyArrayLike,\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> np.ndarray:\n    self._check_method(method)\n\n    if self.is_overlapping:\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n\n    target_as_index = ensure_index(target)\n\n    if isinstance(target_as_index, IntervalIndex):\n        # equal indexes -> 1:1 positional match\n        if self.equals(target_as_index):\n            return np.arange(len(self), dtype=\"intp\")\n\n        # different closed or incompatible subtype -> no matches\n        common_subtype = find_common_type(\n            [self.dtype.subtype, target_as_index.dtype.subtype]\n        )\n        if self.closed != target_as_index.closed or is_object_dtype(common_subtype):\n            return np.repeat(np.intp(-1), len(target_as_index))\n\n        # non-categorical index, use IntervalTree\n        if not isinstance(target_as_index, CategoricalIndex):\n            target_as_index = self._maybe_convert_i8(target_as_index)\n            indexer = self._engine.get_indexer(target_as_index.values)\n        else:\n            # categorical index, defer elementwise to get_loc\n            # (non-overlapping so get_loc guarantees scalar of KeyError)\n            indexer = []\n            for key in target_as_index:\n                try:\n                    loc = self.get_loc(key)\n                except KeyError:\n                    loc = -1\n                indexer.append(loc)\n    else:\n        # fallback to IntervalTree for other non-object dtype indices\n        if not is_object_dtype(target_as_index):\n            target_as_index = self._maybe_convert_i8(target_as_index)\n            indexer = self._engine.get_indexer(target_as_index.values)\n        else:\n            # defer elementwise to get_loc\n            indexer = []\n            for key in target_as_index:\n                try:\n                    loc = self.get_loc(key)\n                except KeyError:\n                    loc = -1\n                indexer.append(loc)\n\n    return ensure_platform_int(indexer)",
            "import_list": []
        }
    ]
}