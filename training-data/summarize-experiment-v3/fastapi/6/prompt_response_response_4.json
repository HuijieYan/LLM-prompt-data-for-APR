{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n                if value is None:\n                    if field.required:\n                        if PYDANTIC_1:\n                            errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                        else:  \n                            errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias), config=BaseConfig))\n                    else:\n                        values[field.alias] = field.default if field.default is not None else []\n                    continue\n                if isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and isinstance(value, UploadFile):\n                    value = await value.read()\n                if field.shape in sequence_shapes:\n                    if field.type_ in {list, set}:\n                        values[field.alias] = value\n                    elif field.type_ == tuple:\n                        values[field.alias] = tuple(value)\n                else:\n                    v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                    if isinstance(errors_, ErrorWrapper):\n                        errors.append(errors_)\n                    elif isinstance(errors_, list):\n                        errors.extend(errors_)\n                    else:\n                        values[field.alias] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}