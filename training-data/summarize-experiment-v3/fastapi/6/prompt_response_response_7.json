{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    if field.shape == sequence_shapes.LIST:  # Check if the shape is a list\n                        # Convert the received body for the field alias into a list\n                        value = [received_body.get(item) for item in received_body.keys() if item == field.alias]\n                    elif field.shape == sequence_shapes.SET:  # Check if the shape is a set\n                        # Convert the received body for the field alias into a set\n                        value = {received_body.get(item) for item in received_body.keys() if item == field.alias}\n                    elif field.shape == sequence_shapes.TUPLE:  # Check if the shape is a tuple\n                        # Convert the received body for the field alias into a tuple\n                        value = tuple(received_body.get(item) for item in received_body.keys() if item == field.alias)\n                else:\n                    value = received_body.get(field.alias)",
            "import_list": []
        }
    ]
}