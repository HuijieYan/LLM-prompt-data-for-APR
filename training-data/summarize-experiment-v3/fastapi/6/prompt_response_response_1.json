{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            alias = field.alias\n            value = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                    value = received_body.getlist(alias)\n                else:\n                    value = received_body.get(alias)\n            if value is None or (isinstance(field_info, params.Form) and value == \"\"):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(ErrorWrapper(MissingError(), loc=(\"body\", alias)))\n                    else:\n                        errors.append(\n                            ErrorWrapper(\n                                MissingError(),\n                                loc=(\"body\", alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                field.shape in sequence_shapes\n                and isinstance(value, sequence_types)\n            ):\n                if isinstance(field.type_, list):\n                    value = list(value)\n                elif isinstance(field.type_, set):\n                    value = set(value)\n                elif isinstance(field.type_, tuple):\n                    value = tuple(value)\n            v_, errors_ = field.validate(value, values, loc=(\"body\", alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}