{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        value: Any = None\n        if received_body is not None:\n            value = received_body.getlist(field.alias) if isinstance(received_body, FormData) else received_body.get(field.alias)\n        if value is None:\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(\n                        ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                    )\n                else:  \n                    errors.append(\n                        ErrorWrapper(  \n                            MissingError(),\n                            loc=(\"body\", field.alias),\n                            config=BaseConfig,\n                        )\n                    )\n            else:\n                values[field.name] = deepcopy(field.default)\n        else:\n            values[field.name], errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n    return values, errors",
            "import_list": [
                "import asyncio",
                "from copy import deepcopy",
                "from typing import Any, Callable, Dict, List, Mapping, Optional, Sequence, Tuple, Type, Union, cast",
                "from fastapi import params",
                "from fastapi.utils import PYDANTIC_1, get_field_info, get_path_param_names",
                "from pydantic import BaseConfig, BaseModel, create_model",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.errors import MissingError",
                "from pydantic.utils import lenient_issubclass",
                "from starlette.datastructures import FormData, Headers, QueryParams, UploadFile",
                "from pydantic.fields import Field as ModelField"
            ]
        }
    ]
}