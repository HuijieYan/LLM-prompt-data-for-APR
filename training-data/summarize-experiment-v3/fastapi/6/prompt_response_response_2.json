{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if isinstance(field.type_, set):\n                    value = set(received_body.get(field.alias))\n                elif isinstance(field.type_, list):\n                    value = received_body.getlist(field.alias)\n                elif isinstance(field.type_, tuple):\n                    value = tuple(received_body.getlist(field.alias))\n                else:\n                    value = received_body.get(field.alias)\n\n            if (\n                value is None\n                or (isinstance(field_info, params.Form) and value == \"\")\n                or (\n                    isinstance(field_info, params.Form)\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(  # type: ignore\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n\n            if (\n                isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n\n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors",
            "import_list": [
                "import asyncio",
                "from copy import deepcopy",
                "from typing import Any, Callable, Dict, List, Mapping, Optional, Sequence, Tuple, Type, Union, cast",
                "from fastapi import params",
                "from fastapi.utils import PYDANTIC_1, get_field_info, get_path_param_names",
                "from pydantic import BaseConfig, BaseModel, create_model",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.errors import MissingError",
                "from pydantic.utils import lenient_issubclass",
                "from starlette.datastructures import FormData, Headers, QueryParams, UploadFile",
                "from pydantic.fields import Field as ModelField"
            ]
        }
    ]
}