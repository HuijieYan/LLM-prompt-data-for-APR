{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    if current_line.depth == 0:\n        max_allowed = 2\n    else:\n        max_allowed = 1\n\n    before = 0\n    if current_line.leaves:\n        first_leaf = current_line.leaves[0]\n        before = min(first_leaf.prefix.count(\"\\n\"), max_allowed)\n        first_leaf.prefix = \"\"\n\n    if current_line.is_def or current_line.is_class:\n        newlines = 1\n        if self.previous_line is not None and self.previous_line.is_decorator:\n            newlines = 0\n        return newlines, 0\n\n    if current_line.is_flow_control:\n        return before, 1\n\n    if self.previous_line and self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n        return before or 1, 0\n\n    if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n        return before or 1, 0\n\n    return before, 0",
            "import_list": []
        }
    ]
}