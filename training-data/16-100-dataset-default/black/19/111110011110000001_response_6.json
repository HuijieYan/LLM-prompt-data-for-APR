{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        before = 0\n        newlines = 0\n        \n        if current_line.is_decorator:\n            return 0, 0\n        \n        if current_line.is_def or current_line.is_class:\n            if self.previous_line is None:\n                # Don't insert empty lines before the first line in the file.\n                return 0, 0\n            \n            if self.previous_line.is_decorator:\n                # Don't insert empty lines between decorators.\n                return 0, 0\n            \n            if self.previous_line.depth == current_line.depth:\n                newlines = 2 if current_line.depth else 1\n                return newlines, 0\n        \n        if current_line.is_flow_control:\n            return before, 1\n        \n        if self.previous_line and self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n            return 1, 0\n        \n        if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n            return 1, 0\n        \n        return 0, 0",
            "import_list": []
        }
    ]
}