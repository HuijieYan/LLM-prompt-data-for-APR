{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        return np.ones_like(data, dtype=bool)\n\n    # ignore numbers that are out of range\n        out_of_range = False\n        for date_string in date_strings:\n            for unit in self._STAMP_UNITS:\n                new_data = DateConverter(date_string, format=self.dateFormat, unit=unit)\n                if not new_data.in_range:\n                    out_of_range = True\n                    break\n\n        if len(data) == 0:\n            return np.empty(0, dtype=\"datetime64[ns]\"), False\n\n        new_data = data\n        if new_data.dtype == \"object\":\n            try:\n                new_data = data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n\n        date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n        for date_unit in date_units:\n            try:\n                new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n            except (ValueError, OverflowError):\n                continue\n            return new_data, True\n        return data, False",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.api.types import is_integer, is_integer_dtype, is_float_dtype",
                "from pandas.util._decorators import Appender",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas._libs.tslibs.timestamps import Timestamp",
                "from pandas.compat import lmap, dateutil",
                "from pandas.errors import OutOfBoundsDatetime",
                "from pandas.io.common import AbstractBP",
                "from pandas.io.formats.printing import pprint_thing",
                "from pandas.util import is_list_like, is_bool_indexer",
                "from pandas.util._decorators import doc",
                "from pandas.core.dtypes.inference import is_integer",
                "from pandas.core import nanops",
                "from pandas.util import InvalidArgumentException, is_array_like, is_bool_indexer",
                "from pandas.util._decorators import Appender, Substitution, verify_is_callable",
                "from pandas.errors import ParserError, OutOfBoundsDatetime",
                "from pandas.io.common import is_file_like",
                "from pandas.io.json._normalize import nested_to_record",
                "from pandas.io.json._table_schema import schemas",
                "from pandas.io.json._json import maybe_convert_iNat, Timestamp, TimestampArr, ensure_str, make_dataoffset",
                "from pandas.io.json._json import sanitize_and_check",
                "import json"
            ]
        }
    ]
}