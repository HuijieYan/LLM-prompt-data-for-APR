{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.convert(numeric=True, copy=False)\n    \n    agg_blocks: List[Block] = []\n    \n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        result, _ = self.grouper.aggregate(block.values, how, axis=0, min_count=min_count)\n    \n        if alt is not None:\n            obj = self.obj[data.items[locs]]\n            s = self.grouper.get_grouper(obj)\n            result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            result = result.values if isinstance(result, pd.Series) else result\n\n        agg_block = block.make_block(result)\n        agg_blocks.append(agg_block)\n    \n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    indexer = np.concatenate([blk.mgr_locs.as_array for blk in agg_blocks])\n    agg_items = data.items.take(np.sort(indexer))\n\n    for i, blk in enumerate(agg_blocks):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : offset + loc]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}