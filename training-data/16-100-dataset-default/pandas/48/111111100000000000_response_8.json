{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], pd.Index]:\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.select_dtypes(include=[np.number])\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        split_items: List[np.ndarray] = []\n        split_frames: List[NDFrame] = []\n\n        no_result = object()\n        for block in data.blocks:\n            result = no_result\n            locs = block.mgr_locs\n\n            try:\n                result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n            except NotImplementedError:\n                if alt is None:\n                    assert how == \"ohlc\"\n                    deleted_items.append(locs)\n                    continue\n                obj = self.obj._slice((slice(None), locs))\n                s = self.grouper.transform(obj, axis=1)\n                result = alt(s)\n                result = result.values.squeeze()\n\n            if not isinstance(result, NDFrame):\n                result = self._sanitize_values(result, box=True, copy=False)\n                result = maybe_downcast_numeric(result, block.dtype)\n                agg_block: Block = block.make_block(result)\n            \n                new_items.append(locs)\n                agg_blocks.append(agg_block)\n            \n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n        \n        indexer = np.concatenate(new_items)\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            indexer_slice = indexer[offset:(offset + loc)]\n            indexer_array = np.sort(indexer_slice)\n            blk.mgr_locs = indexer_array\n            offset += loc\n\n        agg_items = data.items.take(indexer)\n        return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.groupby.groupby import DataError",
                "from pandas.core.internals.blocks import Block",
                "from pandas.core.internals.managers import BlockManager",
                "from pandas.core.generic import NDFrame"
            ]
        }
    ]
}