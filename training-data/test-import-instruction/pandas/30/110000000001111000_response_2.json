{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    if is_integer_dtype(data) or data.dtype == \"int64\":\n        in_range = (isna(data) | (data > self.min_stamp) | (data == iNaT))\n        if not in_range.all():\n            return data, False\n        return data.astype('datetime64[ns]'), True\n\n    elif is_datetime64_any_dtype(data) or is_datetime64tz_any_dtype(data):\n        return data, True\n\n    try:\n        data = to_datetime(data, errors=\"raise\")\n        return data, True\n    except (ValueError, OutOfBoundsDatetime):\n        return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.api.types import is_integer_dtype, is_datetime64_any_dtype",
                "from pandas.core.dtypes.common import is_datetime64tz_any_dtype",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas._libs.tslibs.timestamps import Timestamp",
                "from pandas.errors import OutOfBoundsDatetime"
            ]
        }
    ]
}