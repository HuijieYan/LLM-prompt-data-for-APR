{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == bool:\n        new_data = new_data.astype(\"int64\")\n\n    # ignore numbers that are out of range\n    if isinstance(self.min_stamp, object):\n        if notna(new_data).any():\n            needs_i8 = notna(\n                to_datetime(\n                    new_data.take(~notna(new_data)), errors=\"ignore\", unit=self.date_unit\n                )\n            )\n        else:\n            needs_i8 = False\n        needs_i8 |= isinstance(self.date_unit, _period)\n        needs_i8 &= is_datetime64_any_dtype(new_data)\n        if needs_i8:\n            new_data = new_data.astype(np.int64)\n\n    date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n    for date_unit in date_units:\n        try:\n            data, result = to_datetime(\n                new_data, errors=\"raise\", unit=date_unit\n            )\n            if isinstance(result, np.ndarray):\n                na_mask = isna(result)\n                date_ok = ~na_mask\n                if needs_i8 and not date_ok.any():\n                    return data, False\n                elif date_ok.all():\n                    return data, True\n                else:\n                    return data, False\n            else:\n                if needs_i8 and isna(result):\n                    return data, False\n                else:\n                    return data, True\n        except (ValueError, OverflowError):\n            continue\n    return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype",
                "from pandas.core.arrays._mixins import _flex_and_with_internals, _period",
                "from pandas.core.dtypes.cast import (\n    notna,\n    ensure_utc,\n    conform_period_to_time_rule,\n    construct_1d_object_array_from_strings,\n)"
            ]
        }
    ]
}