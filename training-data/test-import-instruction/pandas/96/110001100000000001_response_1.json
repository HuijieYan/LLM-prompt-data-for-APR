{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # Adjust the timezone and nanosecond of the input datetime\n        other = other.replace(tzinfo=None, microsecond=0)\n\n        # Calculate the number of business days and remaining business hours\n        businessdays = n // (len(self.start) * 60)\n        remaining_minutes = n % (len(self.start) * 60)\n        \n        # Adjust the input datetime based on the business days offset\n        if businessdays != 0:\n            other += BDay(n=businessdays)\n        \n        # Adjust the input datetime based on the remaining business hours offset\n        businesshour_remain = timedelta(minutes=remaining_minutes)\n        for i in range(len(self.start)):\n            start_time = self.start[i]\n            end_time = self.end[i]\n            working_time = end_time - start_time\n            if n >= 0:\n                if other.time() < start_time or other.time() > end_time:\n                    # Adjust to the next business day\n                    other = other + BDay(1)\n                    other = datetime(other.year, other.month, other.day, start_time.hour, start_time.minute, 0)\n            else:\n                if other.time() < start_time:\n                    other = datetime(other.year, other.month, other.day, end_time.hour, end_time.minute, 0)\n                    other = other - BDay(1)\n        \n            # Check if there are remaining business hours to be adjusted\n            if businesshour_remain > timedelta(0):\n                time_remaining = end_time - other.time()\n                if time_remaining >= businesshour_remain:\n                    other += businesshour_remain\n                    break\n                else:\n                    businesshour_remain -= time_remaining\n                    # Move to the next business day\n                    other = datetime(other.year, other.month, other.day, start_time.hour, start_time.minute, 0) + BDay(1)\n            \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}