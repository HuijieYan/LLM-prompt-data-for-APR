{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n    \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name, tz=ax.tz)\n            return binner, [], labels\n    \n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n        \n        ax_as_datetime = pd.to_datetime(ax, utc=True)  # Convert to UTC\n        \n        binner = date_range(\n            start=first, end=last, freq=self.freq, tz=ax.tz,\n            name=ax.name, ambiguous=\"infer\", nonexistent=\"shift_forward\"\n        )\n        \n        ax_values = ax_as_datetime.values\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n        bins = pd.cut(ax_as_datetime, bin_edges, right=self.closed == 'right')\n\n        if self.closed == \"right\" and self.label == \"right\":\n            labels = bins.categories.values[1:]\n        else:\n            labels = bins.categories.values\n\n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n        \n        return binner, bins.codes, labels",
            "import_list": [
                "import pytz",
                "import pandas as pd",
                "from pandas import DataFrame, date_range, DatetimeIndex, Timestamp, NaT",
                "from pandas.core.resample import _get_timestamp_range_edges"
            ]
        }
    ]
}