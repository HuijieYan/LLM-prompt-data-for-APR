{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            agg_result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n            result = np.array(agg_result)  # Force to be ndarray type for consistency\n        except NotImplementedError:\n            alt_result = alt(data.items[locs], axis=self.axis)\n            if isinstance(alt_result, pd.Series):\n                result = np.array(alt_result)  # Force to be ndarray type for consistency\n        finally:\n            if not isinstance(result, np.ndarray):\n                result = np.array(result)  # Force to be ndarray type for consistency\n            if result is not no_result:\n                # see if we can cast the block back to the original dtype\n                result = maybe_downcast_numeric(result, block.dtype)\n                agg_block: Block = block.make_block(result)\n                new_items.append(locs)\n                agg_blocks.append(agg_block)\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(indexer)\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = BlockPlacement(np.array(indexer[offset:offset+loc], dtype=locs.dtype))\n        offset += loc\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}