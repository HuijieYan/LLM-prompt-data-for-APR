{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate().apply('get_numeric_data', axis=1)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    agg_items = np.array([], dtype=int)\n    no_result = object()\n\n    for idx, block in enumerate(data.blocks):\n        locs = block.mgr_locs.as_array\n        objs = self._get_result_for_block(block, how, alt, min_count)\n        \n        if objs.empty:\n            continue\n        \n        resulting_obj = pd.concat(objs, axis=1)\n        resulting_block = pd.Series(resulting_obj.to_numpy(dtype='float64'), name=idx)\n\n        agg_blocks.append(resulting_block)\n        new_items.append(locs)\n        agg_items = np.append(agg_items, locs)\n\n    if not (agg_blocks):\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Resetting the index\n    indexer = pd.Index(np.sort(agg_items)).get_indexer(agg_items)\n    for blk, item in zip(agg_blocks, new_items):\n        loc = len(blk)\n        blk.index = indexer[:loc]\n        indexer = indexer[loc:]\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from pandas.core.internals.construction import _stringify_path"
            ]
        }
    ]
}