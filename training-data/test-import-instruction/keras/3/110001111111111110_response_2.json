{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for original_layer in model._input_layers:\n            input_tensor = Input(batch_shape=original_layer.shape,\n                                 dtype=original_layer.dtype,\n                                 sparse=original_layer.sparse,\n                                 name=original_layer.name)\n\n            input_layers.append(input_tensor)\n            # Cache newly created input layer.\n            layer_map[original_layer] = input_tensor\n\n        input_tensors = input_layers\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        # If tensor comes from an input layer: cache the input layer.\n        input_tensors = to_list(input_tensors)\n        new_input_tensors = []\n        for i, new_tensor in enumerate(input_tensors):\n            if not K.is_keras_tensor(new_tensor):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=new_tensor, name='input_wrapper_for_' + name)\n                new_input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                original_input_layer = input_tensors[i]._keras_history[0]\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                new_input_tensors.append(new_tensor)\n        input_tensors = new_input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            outbound_layer = node.outbound_layer\n\n            # Get or create layer.\n            if outbound_layer not in layer_map:\n                # Clone layer.\n                new_outbound_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n                layer_map[outbound_layer] = new_outbound_layer\n            else:\n                # Reuse previously cloned layer.\n                new_outbound_layer = layer_map[outbound_layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(new_outbound_layer, InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map,\n            # then call node.outbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for ref_tensor in reference_input_tensors:\n                if ref_tensor in tensor_map:\n                    computed_data.append(tensor_map[ref_tensor])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer.\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n\n                computed_tensors = [item[0] for item in computed_data]\n                computed_masks = [item[1] for item in computed_data]\n                if has_arg(new_outbound_layer.call, 'mask'):\n                    if 'mask' not in kwargs:\n                        kwargs['mask'] = computed_masks\n\n                # Handle single or multiple input tensors\n                if len(computed_data) == 1:\n                    computed_tensor, _ = computed_data[0]\n                    output_tensors = to_list(new_outbound_layer(computed_tensor, **kwargs))\n                else:\n                    output_tensors = to_list(new_outbound_layer(computed_tensors, **kwargs))\n\n                # Update tensor_map.\n                for ref_tensor, out_tensor in zip(reference_output_tensors, output_tensors):\n                    tensor_map[ref_tensor] = (out_tensor, None)\n\n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for out_tensor in model.outputs:\n        assert out_tensor in tensor_map, 'Could not compute output ' + str(out_tensor)\n        tensor = tensor_map[out_tensor][0]\n        output_tensors.append(tensor)\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}