{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (existing function code)\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # ... (existing code for recovering layers etc.)\n\n            if has_arg(layer.call, 'mask'):\n                computed_data = []  # List of tuples (input, mask).\n                for x in reference_input_tensors:\n                    if x in tensor_map:\n                        computed_data.append(tensor_map[x])\n\n                if len(computed_data) == len(reference_input_tensors):\n                    if len(computed_data) == 1:\n                        computed_tensor, computed_mask = computed_data[0]\n                    else:\n                        computed_tensors = [x[0] for x in computed_data]\n                        computed_masks = [x[1] for x in computed_data]\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_masks\n\n                    output_tensors = to_list(\n                        layer(computed_tensors, **kwargs))\n                    output_masks = to_list(\n                        layer.compute_mask(computed_tensors,\n                                           computed_masks))\n\n                    # Update tensor_map.\n                    for x, y, mask in zip(reference_output_tensors,\n                                          output_tensors,\n                                          output_masks):\n                        tensor_map[x] = (y, mask)\n                else:\n                    # Set output_masks to None if compute_mask is not supported\n                    output_tensors = to_list(\n                        layer(computed_tensors, **kwargs))\n                    tensor_map[x] = (y, None)\n            else:\n                # Set output_masks to None if compute_mask is not supported\n                output_tensors = to_list(\n                    layer(computed_tensors, **kwargs))\n                tensor_map[x] = (y, None)",
            "import_list": []
        }
    ]
}