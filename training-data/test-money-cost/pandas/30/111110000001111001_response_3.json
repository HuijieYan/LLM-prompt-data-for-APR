{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse an ndarray-like into a date column.\n    \n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        if isinstance(data, pd.Series):\n            new_data = data\n            if is_numeric_dtype(new_data):\n                in_range = (\n                    new_data > self.min_stamp\n                )\n                if not in_range.all():\n                    return data, False\n                \n                try:\n                    new_data = pd.to_datetime(new_data, errors=\"raise\", unit=self.date_unit)\n                    return new_data, True\n                except (ValueError, OverflowError):\n                    return data, False\n            elif is_datetime64_any_dtype(new_data):\n                return new_data, True\n            else:\n                return data, False\n        else:\n            return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype"
            ]
        }
    ]
}