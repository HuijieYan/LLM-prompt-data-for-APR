{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    def isna(obj):\n        # Check isna for arrays of string-like dtypes\n        if is_string_dtype(data):\n            return isna_real(data)\n        if is_bool_dtype(data) or is_string_dtype(data):\n            na_values = self.na_values\n        else:\n            na_values = self.na_values\n            result = construct_decoded_array(data, convert_dates=self.convert_dates)\n            if len(data) == 0:\n                return data, False\n            new_data = data\n            if new_data.dtype == \"object\":\n                try:\n                    new_data = data.astype(\"int64\")\n                except (TypeError, ValueError, OverflowError):\n                    pass\n            if issubclass(new_data.dtype.type, np.number):\n                if not in_range.all():\n                    return data, False\n                date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n                for date_unit in date_units:\n                    try:\n                        new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n                    except (ValueError, OverflowError):\n                        continue\n                    return new_data, True\n            return data, False",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.api.types import is_string_dtype, is_bool_dtype",
                "from pandas.core.dtypes.cast import construct_decoded_array"
            ]
        }
    ]
}