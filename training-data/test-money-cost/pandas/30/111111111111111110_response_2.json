{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n    \n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        # no conversion on empty\n        if not len(data):\n            return data, False\n    \n        new_data = data\n        if isna(new_data).any():\n            return data, False\n        if is_datetime64_any_dtype(new_data.dtype):\n            return data, True\n        \n        if not is_integer_or_boolean_dtype(new_data):\n            return data, False\n\n        try:        \n            new_data = new_data.astype(\"datetime64[ns]\")\n            in_range = (\n                isna(new_data._data)\n                | (new_data > self.min_stamp)\n                | isin(new_data._data, [iNaT])\n            )\n            if not in_range.all():\n                return data, False\n            return new_data, True\n        except (TypeError, ValueError, OverflowError):\n            return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas import to_datetime",
                "from pandas._libs.tslibs.nattype import NaTType",
                "from pandas.compat import range",
                "from pandas.core.algorithms import isin",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype, is_integer_or_boolean_dtype",
                "from pandas.core.missing import isna",
                "from pandas.tseries.api import iNaT"
            ]
        }
    ]
}