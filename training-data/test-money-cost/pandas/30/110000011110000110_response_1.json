{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if is_object_dtype(new_data):\n        try:\n            new_data = new_data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    # ignore numbers that are out of range\n    if issubclass(new_data.dtype.type, np.number):\n        in_range = (\n            isna(new_data._values)\n            | (new_data > self.min_stamp)\n            | (new_data._values == iNaT)\n        )\n        if not in_range.all():\n            return data, False\n\n    date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n    for date_unit in date_units:\n        try:\n            new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit, infer_datetime_format=True)\n        except (ValueError, OverflowError):\n            continue\n        return new_data, True\n    return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.common import is_object_dtype, is_list_like",
                "from pandas.io.json import json_normalize",
                "from pandas.io.json._json import (json_normalize, read_json, _json)",
                "from pandas.core.arrays import ExtensionArray",
                "from pandas.core.arrays._mixins import NDArrayBackedExtensionArray",
                "from pandas.core.dtypes.base import ExtensionDtype",
                "from pandas.core.dtypes.dtypes import register_extension_dtype",
                "from pandas.core.indexing import convert_to_index_sliceable",
                "from pandas.core.indexes import extension",
                "from pandas.core.accessor import register_series_accessor, register_index_accessor",
                "from pandas.core import ops",
                "from pandas.core.base import PandasObject, NoNewAttributesMixin, _shared_docs",
                "from pandas.core.base import IndexOpsMixin, d, s, E, _U, IndexOpsMixinData, ExtensionOpsMixin",
                "from pandas._types import DataType",
                "from pandas._libs.config import get_option",
                "from pandas.util._decorators import Appender, Substitution",
                "from pandas.core.api import range",
                "from pandas.compat import set_function_name",
                "from pandas.io.json import json_normalize",
                "from pandas.io.json._json import json_normalize, read_json, _json"
            ]
        }
    ]
}