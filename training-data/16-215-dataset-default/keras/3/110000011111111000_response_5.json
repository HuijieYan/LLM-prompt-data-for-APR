{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_layers = model.inputs\n        input_tensors = [Input(batch_shape=layer._keras_shape, dtype=layer.dtype)\n                         for layer in input_layers]\n        for original, cloned in zip(model.input, input_tensors):\n            layer_map[original] = cloned\n            tensor_map[original] = (cloned, None)\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(model.inputs):\n            if not K.is_keras_tensor(input_tensors[i]):\n                original_input_layer = x._keras_history[0]\n                input_tensor = Input(tensor=input_tensors[i],\n                                     name='input_wrapper_for_' + original_input_layer.name)\n                layer_map[original_input_layer] = input_tensor\n                tensor_map[original_input_layer] = (input_tensor, None)\n            else:\n                tensor_map[x] = (input_tensors[i], None)\n    \n    layers = model.layers\n    for layer in layers:\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n    \n    for node in model._nodes_by_depth[0]:\n        for idx, input_tensor in enumerate(node.input_tensors):\n            tensor_map[input_tensor] = (input_tensors[idx], None)\n\n    output_tensors = [tensor_map[out_tensor][0] for out_tensor in model.outputs]\n    return Model(inputs=input_tensors, outputs=output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}