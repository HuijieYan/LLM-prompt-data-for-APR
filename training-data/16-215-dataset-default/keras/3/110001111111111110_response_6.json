{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    from keras.models import Model, Sequential\n    from keras.layers import Input, InputLayer\n    import keras.backend as K\n    import numpy as np\n\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n\n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            raise ValueError('Expected `model` argument '\n                             'to be a functional `Model` instance')\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name)\n                         for layer in model.layers if isinstance(layer, InputLayer)]\n    else:\n        input_tensors = [Input(tensor=x) if not K.is_keras_tensor(x) else x\n                         for x in input_tensors]\n\n    for original_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[original_input] = (new_input, None)  # tensor, mask\n\n    for depth in sorted(model._nodes_by_depth, reverse=True):\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            outbound_layer = node.outbound_layer\n\n            if outbound_layer not in layer_map:\n                new_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n                layer_map[outbound_layer] = new_layer\n            else:\n                new_layer = layer_map[outbound_layer]\n                if isinstance(new_layer, InputLayer):\n                    continue\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            computed_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                if len(computed_data) == 1:\n                    computed_tensor, _ = computed_data[0]\n                    output_tensors = to_list(new_layer(computed_tensor, **kwargs))\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n\n                for x, y in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "from keras.models import Model, Sequential",
                "from keras.layers import Input, InputLayer",
                "import keras.backend as K",
                "import numpy as np"
            ]
        }
    ]
}