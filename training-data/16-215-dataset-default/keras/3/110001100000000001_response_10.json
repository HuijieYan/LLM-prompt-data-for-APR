{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in model._input_layers]\n        \n        for original, cloned in zip(model._input_layers, input_tensors):\n            layer_map[original] = cloned\n    else:\n        # Create InputLayer for non-Keras input tensors\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_tensors[i] = input_tensor\n                layer_map[x] = input_tensor\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Clone the layers and update tensor_map\n    for input_layer, node in model._iterate_graph(reverse=True):\n        layer = node.outbound_layer\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n            layer = new_layer\n        else:\n            layer = layer_map[layer]\n            if isinstance(layer, InputLayer):\n                continue\n\n        reference_input_tensors = node.input_tensors\n        computed_data = [tensor_map[x] for x in reference_input_tensors if x in tensor_map]\n\n        if len(computed_data) == len(reference_input_tensors):\n            kwargs = node.arguments if node.arguments else {}\n            computed_tensors, computed_masks = zip(*computed_data)\n            output_tensors = to_list(layer(computed_tensors, **kwargs))\n            output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n            \n            for x, y, mask in zip(node.output_tensors, output_tensors, output_masks):\n                tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "from tensorflow.keras.models import Model",
                "from tensorflow.keras.layers import Input, InputLayer",
                "from tensorflow.python.keras.utils import to_list, has_arg",
                "import tensorflow.keras.backend as K"
            ]
        }
    ]
}