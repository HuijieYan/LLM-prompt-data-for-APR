{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, keras.Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, keras.Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = keras.Input(batch_shape=layer.batch_input_shape,\n                                      dtype=layer.dtype,\n                                      sparse=layer.sparse,\n                                      name=layer.name)\n            input_tensors.append(input_tensor)\n            layer_map[layer] = input_tensor\n    else:\n        # Update the tensor_map with the provided input_tensors\n        for orig_input, new_input in zip(model.inputs, input_tensors):\n            tensor_map[orig_input] = (new_input, None)\n\n    # Iterate over every layer in the model\n    for layer in model.layers:\n        # Create and add new layers to the layer_map\n        new_layer = keras.layers.deserialize({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n        layer_map[layer] = new_layer\n\n    # Build the new model with the mapped input and output tensors\n    output_tensors = []\n    for output in model.outputs:\n        if output in tensor_map:\n            output_tensors.append(tensor_map[output][0])\n        else:\n            raise ValueError('Could not compute output ' + str(output))\n\n    return keras.Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}