{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_layers=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_layers: optional list of input layers\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new input layers,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n\n    # Check if the model is an instance of Model or Sequential\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got {}'.format(model))\n\n    # Check if the model is an instance of Sequential\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead: {}'.format(model))\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    # Create placeholders to build the model on top of if no input layers are provided\n    if input_layers is None:\n        input_layers = [Input(batch_shape=layer.input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n\n        for original, cloned in zip(model._input_layers, input_layers):\n            layer_map[original] = cloned\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            # Clone layer\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    for original, cloned in zip(model._input_layers, input_layers):\n        layer_map[original] = cloned\n\n    # Iterate over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                # Clone layer\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n\n            reference_input_layers = node.inbound_layers\n\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_layers:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_layers):\n                input_data = [x[0] for x in computed_data]\n                kwargs = {} if not node.arguments else node.arguments\n\n                output_tensor = layer(input_data, **kwargs)\n                tensor_map[layer] = output_tensor\n\n    # Check that we did compute the model outputs, then instantiate a new model from inputs and outputs.\n    output_tensors = [tensor_map[x] for x in model.outputs]\n    return Model(input_layers, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}