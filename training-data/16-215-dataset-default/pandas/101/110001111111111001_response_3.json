{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n        Input array to be casted.\n    dtype : np.dtype\n        Desired data-type for the array.\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not to skip NaN when casting as a string-type.\n\n    Returns\n    -------\n    ndarray\n        Returns the array casted to the specified type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    if hasattr(dtype, 'type'):\n        dtype_type = dtype.type\n    else:\n        dtype_type = dtype\n\n    if dtype_type == int:\n        return arr.view(dtype)\n\n    if is_datetime64_dtype(arr) and dtype_type == int:\n        data = pd.to_datetime(arr, errors='coerce')\n        if pd.isnull(data).any():\n            raise ValueError(\"Cannot convert NaT values to integer\")\n        return data.view('int64')\n\n    elif is_timedelta64_dtype(arr) and dtype_type == int:\n        data = pd.to_timedelta(arr, errors='coerce')\n        if pd.isnull(data).any():\n            raise ValueError(\"Cannot convert NaT values to integer\")\n        return data.view('int64')\n\n    return arr.astype(dtype, copy=copy)",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.dtypes import pandas_dtype, is_datetime64_dtype, is_timedelta64_dtype"
            ]
        }
    ]
}