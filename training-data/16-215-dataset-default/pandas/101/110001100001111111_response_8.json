{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # code for handling extension dtype omitted for brevity\n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n\n    if is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return arr.astype('M8[ns]').view(dtype)\n        elif np.issubdtype(dtype, np.integer):\n            return arr.astype('M8[ns]').view(dtype)\n        elif dtype.kind == \"M\":\n            return arr.astype(dtype)\n        else:\n            raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return arr.astype('m8[ns]').view(dtype)\n        elif np.issubdtype(dtype, np.integer):\n            return arr.astype('m8[ns]').view(dtype)\n        elif dtype.kind == \"m\":\n            mask = pd.isna(arr)\n            result = arr.astype(dtype).astype(np.float64)\n            result[mask] = np.nan\n            return result\n        else:\n            raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    # code for handling floating and object dtypes omitted for brevity\n\n    if dtype.kind in [\"i\", \"u\"]:\n        if pd.isna(arr).any():\n            return pd.array(arr, dtype=pd.Int64Dtype())\n\n    return arr.astype(dtype, copy=copy)",
            "import_list": []
        }
    ]
}