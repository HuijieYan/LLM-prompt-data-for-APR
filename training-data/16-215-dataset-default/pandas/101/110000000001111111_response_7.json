{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr: ndarray, dtype: dtype, copy: bool = True, skipna: bool = False) -> ndarray:\n    if \"datetime64\" in str(dtype) or \"timedelta64\" in str(dtype):\n        if arr.dtype == dtype:  # if the array already has the desired dtype, return it directly\n            return arr\n        elif dtype == np.int64:  # if the desired dtype is int64\n            if skipna:  # check if skipna is True\n                if np.isnan(arr).any():  # if there are NaN values in the array, convert them to NaN in int64\n                    result = arr.astype(dtype)\n                    result[np.isnan(arr)] = np.nan\n                    return result\n                else:  # if there are no NaN values, perform the conversion\n                    return arr.astype(dtype)\n            else:  # if skipna is False, convert NaN values to 0 in int64\n                result = arr.astype(dtype)\n                result[np.isnan(arr)] = 0\n                return result\n        else:  # for other datetime64 and timedelta64 conversions, simply perform the casting\n            return arr.astype(dtype)\n    else:  # for other data types, directly perform the casting\n        return arr.astype(dtype, copy=copy)",
            "import_list": [
                "import numpy as np",
                "from numpy import datetime64, timedelta64, ndarray, dtype"
            ]
        }
    ]
}