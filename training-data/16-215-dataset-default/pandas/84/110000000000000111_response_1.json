{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    if isinstance(index, MultiIndex) and isinstance(index.names, FrozenList):\n        levels = index.levels\n        codes = index.codes\n    else:\n        levels = [index.get_level_values(i).unique() for i in range(index.nlevels)]\n        # as the references provided, may need to get correct codes\n        # based on the example, here get the group_index\n        _, c = get_group_index([index.get_level_values(i) for i in range(index.nlevels)], sort=False, xnull=False)\n        codes = [c[0]]\n\n\n    if len(set(clocs) - set(range(index.nlevels))) == 0:\n        # All requested levels are in current index\n        clevel_codes = [codes[i] for i in clocs]\n        clevels = [levels[i] for i in clocs]\n        cnames = [index.names[i] for i in clocs]\n        shape = [len(x) for x in clevels]\n\n        group_index = get_group_index(clevel_codes, shape, sort=False, xnull=False)\n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, clevel_codes, xnull=False)\n\n        # Create a dummy index to unstack against\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        # Some levels are unstacked, so we need a MultiIndex\n        clevels = None  # removed clevels definition from here coz empty list is used as default\n\n        # In this alternative approach, we reuse the flattened codes from\n        # .unstack() and recreate the MultiIndex structure within func:\n        recons_codes = objed_codes  # replace with correct codes\n\n        # Create a MultiIndex with the required new shape\n        rlevels = [index.levels[i] for i in range(index.nlevels) if i not in clocs]\n        rcodes = [index.codes[i] for i in range(index.nlevels) if i not in clocs]\n        rnames = [index.names[i] for i in range(index.nlevels) if i not in clocs]\n        dummy_index = MultiIndex(levels=rlevels + [\"__placeholder__\"], codes=rcodes + [comp_ids], names=rnames + [\"__placeholder__\"])\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": [
                "import pandas as pd",
                "from pandas.core.arrays.categorical import compress_group_index, get_group_index, decons_obs_group_ids",
                "from pandas.core.indexes.base import Index",
                "from pandas.core.indexes.frozen import FrozenList",
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.series import Series",
                "from pandas.core.arrays.categorical import compress_group_index, get_group_index, decons_obs_group_ids"
            ]
        }
    ]
}