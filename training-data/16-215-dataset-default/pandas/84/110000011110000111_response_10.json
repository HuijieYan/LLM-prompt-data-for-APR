{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    if isinstance(index, MultiIndex):\n        levels = [index.get_level_values(i) for i in range(index.nlevels)]\n        level_names = index.names\n\n        new_clocs = []\n        for cloc in clocs:\n            if isinstance(cloc, tuple):\n                cloc = tuple(index.names.index(name) if isinstance(name, tuple) else name for name in cloc)\n                new_clocs.append(cloc)\n            else:\n                new_clocs.append(index.names.index(cloc))\n\n        result = data\n\n        for cloc in new_clocs:\n            result = result.unstack(cloc, fill_value=fill_value)\n\n        # Recreate the MultiIndex with proper names\n        new_levels = [levels[cloc] for cloc in new_clocs]\n        new_level_names = [level_names[cloc] if isinstance(clocs[cloc], tuple) else None for cloc in new_clocs]\n\n        new_index = MultiIndex.from_arrays(new_levels, names=new_level_names)\n\n        if isinstance(data, Series):\n            result.index = new_index\n        else:\n            result.columns = new_index\n\n        return result\n    else:\n        return data.unstack(clocs, fill_value=fill_value)",
            "import_list": []
        }
    ]
}