{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    import numpy as np\n    import pandas.core.computation.expressions as expressions\n\n    if axis not in [None, 0, 1, \"index\", \"columns\"]:\n        raise ValueError(\"Invalid value for axis\")\n\n    def mask_and_calculate(x, y, op):\n        xrav = x.ravel()\n        mask = ~pd.isna(xrav) & ~pd.isna(y)\n        result = np.empty(x.size, dtype=x.dtype)\n        with np.errstate(all=\"ignore\"):\n            result[mask] = op(xrav[mask], y)\n        return result.reshape(x.shape)\n\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        column_op = lambda a, b: func(a, b)\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n        column_op = lambda a, b: func(a, b)\n\n    elif isinstance(right, ABCSeries) and axis in [None, 1, \"columns\"]:\n        assert right.index.equals(left.columns)\n        column_op = lambda a, b: mask_and_calculate(a, b.values, func)\n\n    elif isinstance(right, ABCSeries) and axis in [0, \"index\"]:\n        assert right.index.equals(left.index)\n        column_op = lambda a, b: mask_and_calculate(a, np.broadcast_to(b.values, (len(a), len(b))), func)\n\n    else:\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
            "import_list": [
                "import numpy as np",
                "import pandas.core.computation.expressions as expressions"
            ]
        }
    ]
}