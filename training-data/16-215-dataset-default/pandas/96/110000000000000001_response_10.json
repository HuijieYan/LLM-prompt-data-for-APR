{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # ... (same as before)\n\n        # Adjusting by business days first\n        if bd != 0:\n            if not self._is_on_offset(other):  # Check if the datetime is on a business day\n                if n >= 0:\n                    other = self._next_opening_time(other)  # Move to the next opening time\n                else:\n                    other = self._prev_opening_time(other)  # Move to the previous opening time\n            other = other + timedelta(days=bd)  # Adjust by the number of business days\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain > timedelta(0):\n            if n >= 0:\n                bhour = self._get_closing_time(other) - other  # Get the remaining business hour in this time interval\n            else:\n                bhour = other - self._next_opening_time(other)  # Get the remaining business hour in this time interval\n\n            if bhour_remain < bhour:\n                other += bhour_remain  # Finish adjusting if possible\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                if n >= 0:\n                    other = self._next_opening_time(other + timedelta(days=1))  # Go to next business time interval\n                else:\n                    other = self._prev_opening_time(other - timedelta(seconds=1))  # Go to next business time interval\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}