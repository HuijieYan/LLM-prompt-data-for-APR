{
    "pandas": [
        {
            "bugID": 169,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over the requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n    \"\"\"\n    self._check_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n\n    # Check if data contains datetime or timedelta data\n    if not data.select_dtypes(include='datetime64').empty:\n        # Process datetime data\n        result = data.select_dtypes(include='datetime64').quantile(q, interpolation=interpolation)\n    elif not data.select_dtypes(include='timedelta64').empty:\n        # Process timedelta data\n        result = data.select_dtypes(include='timedelta64').quantile(q, interpolation=interpolation)\n    else:\n        # No datetime or timedelta data, proceed as usual\n        result = data.quantile(q, axis=axis, interpolation=interpolation)\n\n    return result",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}