{
    "1.1.1": "def does_table_exist(self, connection):\n    \n\n    if '.' in self.table:\n        query = (\"select 1 as table_exists \"\n                 \"from information_schema.tables \"\n                 \"where table_schema = %s and table_name = %s limit 1\")\n    else:\n        query = (\"select 1 as table_exists \"\n                 \"from pg_table_def \"\n                 \"where tablename = %s limit 1\")\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query, tuple(self.table.split('.')))\n        result = cursor.fetchone()\n        return bool(result)\n    finally:\n        cursor.close()\n",
    "1.1.2": "Determine whether the table already exists.",
    "1.2.1": "class S3CopyToTable(rdbms.CopyToTable)",
    "1.2.2": "Template task for inserting a data set into Redshift from s3.\n\nUsage:\n\n* Subclass and override the required attributes:\n\n  * `host`,\n  * `database`,\n  * `user`,\n  * `password`,\n  * `table`,\n  * `columns`,\n  * `aws_access_key_id`,\n  * `aws_secret_access_key`,\n  * `s3_load_path`.",
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_8/luigi/contrib/redshift.py",
    "1.3.2": null,
    "1.4.1": [
        "    @mock.patch(\"luigi.contrib.redshift.S3CopyToTable.copy\")\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):\n        task = DummyS3CopyToTableKey()\n        task.run()\n\n        # The mocked connection cursor passed to\n        # S3CopyToTable.copy(self, cursor, f).\n        mock_cursor = (mock_redshift_target.return_value\n                                           .connect\n                                           .return_value\n                                           .cursor\n                                           .return_value)\n\n        # `mock_redshift_target` is the mocked `RedshiftTarget` object\n        # returned by S3CopyToTable.output(self).\n        mock_redshift_target.assert_called_with(database=task.database,\n                                                host=task.host,\n                                                update_id=task.task_id,\n                                                user=task.user,\n                                                table=task.table,\n                                                password=task.password)\n\n        # Check if the `S3CopyToTable.s3_load_path` class attribute was\n        # successfully referenced in the `S3CopyToTable.run` method, which is\n        # in-turn passed to `S3CopyToTable.copy` and other functions in `run`\n        # (see issue #995).\n        mock_copy.assert_called_with(mock_cursor, task.s3_load_path())\n\n        # Check the SQL query in `S3CopyToTable.does_table_exist`.\n        mock_cursor.execute.assert_called_with(\"select 1 as table_exists \"\n                                               \"from pg_table_def \"\n                                               \"where tablename = lower(%s) limit 1\",\n                                               (task.table,))\n\n        return"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_8/test/contrib/redshift_test.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: expected call not found.\nE           Expected: execute('select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1', ('dummy_schema', 'dummy_table'))\nE           Actual: execute('select 1 as table_exists from information_schema.tables where table_schema = %s and table_name = %s limit 1', ('dummy_schema', 'dummy_table'))"
        ]
    ],
    "2.1.2": [
        [
            "self = <contrib.redshift_test.TestS3CopyToSchemaTable testMethod=test_s3_copy_to_table>\nmock_redshift_target = <MagicMock name='RedshiftTarget' id='4576402304'>\nmock_copy = <MagicMock name='copy' id='4577041136'>\n\n    @mock.patch(\"luigi.contrib.redshift.S3CopyToTable.copy\")\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):\n        task = DummyS3CopyToTableKey(table='dummy_schema.dummy_table')\n        task.run()\n    \n        # The mocked connection cursor passed to\n        # S3CopyToTable.copy(self, cursor, f).\n        mock_cursor = (mock_redshift_target.return_value\n                                           .connect\n                                           .return_value\n                                           .cursor\n                                           .return_value)\n    \n        # Check the SQL query in `S3CopyToTable.does_table_exist`.\n>       mock_cursor.execute.assert_called_with(\n            \"select 1 as table_exists \"\n            \"from information_schema.tables \"\n            \"where table_schema = lower(%s) and \"\n            \"table_name = lower(%s) limit 1\",\n            tuple(task.table.split('.')),\n        )\n\ntest/contrib/redshift_test.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n_mock_self = <MagicMock name='RedshiftTarget().connect().cursor().execute' id='4577158720'>\nargs = ('select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1', ('dummy_schema', 'dummy_table'))\nkwargs = {}\nexpected = call('select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1', ('dummy_schema', 'dummy_table'))\nactual = call('select 1 as table_exists from information_schema.tables where table_schema = %s and table_name = %s limit 1', ('dummy_schema', 'dummy_table'))\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x11079e4c0>\ncause = None\n\n    def assert_called_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        self = _mock_self\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\nActual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause",
            "\n../../envs/luigi_8/lib/python3.8/site-packages/mock/mock.py:913: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.table": "'dummy_schema.dummy_table'",
                "self": "DummyS3CopyToTableKey(table=dummy_schema.dummy_table)",
                "connection.cursor": "<MagicMock name='RedshiftTarget().connect().cursor' id='4539545200'>",
                "connection": "<MagicMock name='RedshiftTarget().connect()' id='4539529104'>"
            },
            {
                "query": "'select 1 as table_exists from information_schema.tables where table_schema = %s and table_name = %s limit 1'",
                "cursor": "<MagicMock name='RedshiftTarget().connect().cursor()' id='4539561584'>",
                "cursor.execute": "<MagicMock name='RedshiftTarget().connect().cursor().execute' id='4539640080'>",
                "result": "<MagicMock name='RedshiftTarget().connect().cursor().fetchone()' id='4539688128'>",
                "cursor.fetchone": "<MagicMock name='RedshiftTarget().connect().cursor().fetchone' id='4539671648'>",
                "cursor.close": "<MagicMock name='RedshiftTarget().connect().cursor().close' id='4539830816'>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.table": "str",
                "self": "DummyS3CopyToTableKey",
                "connection.cursor": "MagicMock",
                "connection": "MagicMock"
            },
            {
                "query": "str",
                "cursor": "MagicMock",
                "cursor.execute": "MagicMock",
                "result": "MagicMock",
                "cursor.fetchone": "MagicMock",
                "cursor.close": "MagicMock"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.table": "'dummy_schema.dummy_table'",
                "self": "DummyS3CopyToTableKey(table=dummy_schema.dummy_table)",
                "connection.cursor": "<MagicMock name='RedshiftTarget().connect().cursor' id='4386653712'>",
                "connection": "<MagicMock name='RedshiftTarget().connect()' id='4386638000'>"
            },
            {
                "query": "'select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1'",
                "cursor": "<MagicMock name='RedshiftTarget().connect().cursor()' id='4386666000'>",
                "cursor.execute": "<MagicMock name='RedshiftTarget().connect().cursor().execute' id='4386744496'>",
                "result": "<MagicMock name='RedshiftTarget().connect().cursor().fetchone()' id='4386796640'>",
                "cursor.fetchone": "<MagicMock name='RedshiftTarget().connect().cursor().fetchone' id='4386784256'>",
                "cursor.close": "<MagicMock name='RedshiftTarget().connect().cursor().close' id='4386935232'>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.table": "str",
                "self": "DummyS3CopyToTableKey",
                "connection.cursor": "MagicMock",
                "connection": "MagicMock"
            },
            {
                "query": "str",
                "cursor": "MagicMock",
                "cursor.execute": "MagicMock",
                "result": "MagicMock",
                "cursor.fetchone": "MagicMock",
                "cursor.close": "MagicMock"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}