{
    "1.1.1": "def create_local_scheduler(self):\n    return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\n",
    "1.1.2": null,
    "1.2.1": "class _WorkerSchedulerFactory(object)",
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_17/luigi/interface.py",
    "1.3.2": null,
    "1.4.1": [
        "    @with_config({'scheduler': {'record_task_history': 'True'},\n                  'task_history': {'db_connection': 'sqlite:////none/existing/path/hist.db'}})\n    def test_local_scheduler_task_history_status(self):\n        ls = luigi.interface._WorkerSchedulerFactory().create_local_scheduler()\n        self.assertEqual(False, ls._config.record_task_history)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_17/test/scheduler_test.py"
    ],
    "2.1.1": [
        [
            "E   ModuleNotFoundError: No module named 'sqlalchemy'"
        ]
    ],
    "2.1.2": [
        [
            "self = <scheduler_test.SchedulerTest testMethod=test_local_scheduler_task_history_status>\n\n    @with_config({'scheduler': {'record_task_history': 'True'},\n                  'task_history': {'db_connection': 'sqlite:////none/existing/path/hist.db'}})\n    def test_local_scheduler_task_history_status(self):\n>       ls = luigi.interface._WorkerSchedulerFactory().create_local_scheduler()\n\ntest/scheduler_test.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/interface.py:134: in create_local_scheduler\n    return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\nluigi/scheduler.py:533: in __init__\n    from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    \"\"\"\n    Provides a database backend to the central scheduler. This lets you see historical runs.\n    See :ref:`TaskHistory` for information about how to turn out the task history feature.\n    \"\"\"\n    #\n    # Description: Added codes for visualization of how long each task takes\n    # running-time until it reaches the next status (failed or done)\n    # At \"{base_url}/tasklist\", all completed(failed or done) tasks are shown.\n    # At \"{base_url}/tasklist\", a user can select one specific task to see\n    # how its running-time has changed over time.\n    # At \"{base_url}/tasklist/{task_name}\", it visualizes a multi-bar graph\n    # that represents the changes of the running-time for a selected task\n    # up to the next status (failed or done).\n    # This visualization let us know how the running-time of the specific task\n    # has changed over time.\n    #\n    # Copyright 2015 Naver Corp.\n    # Author Yeseul Park (yeseul.park@navercorp.com)\n    #\n    \n    import datetime\n    import logging\n    from contextlib import contextmanager\n    \n    from luigi import six\n    \n    from luigi import configuration\n    from luigi import task_history\n    from luigi.task_status import DONE, FAILED, PENDING, RUNNING\n    \n>   import sqlalchemy",
            "\nluigi/db_task_history.py:48: ModuleNotFoundError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}