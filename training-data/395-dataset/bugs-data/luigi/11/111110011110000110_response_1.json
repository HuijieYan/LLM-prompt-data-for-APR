{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n\n    if self._config.prune_on_get_work:\n        self.prune()\n    \n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    \n    relevant_tasks = self._state.get_pending_tasks()\n    relevant_tasks.sort(key=self._rank, reverse=True)\n    \n    reply = {\n        'n_pending_tasks': 0,\n        'running_tasks': [],\n        'task_id': None,\n        'n_unique_pending': 0\n    }\n    \n    response_params = {}\n    \n    for task in relevant_tasks:\n        if task.status == PENDING:\n            reply['n_pending_tasks'] += 1\n            if len(task.workers) == 1 and not assistant:\n                reply['n_unique_pending'] += 1\n    \n        if task.status == RUNNING:\n            other_worker = self._state.get_worker(task.worker_running)\n            if other_worker:\n                more_info = {'task_id': task.id, 'worker': str(other_worker)}\n                more_info.update(other_worker.info)\n                reply['running_tasks'].append(more_info)\n    \n        if self._schedulable(task):\n            if self._has_resources(task.resources, self._used_resources()):\n                reply['task_id'] = task.id\n                reply['task_family'] = task.family\n                reply['task_module'] = getattr(task, 'module', None)\n                reply['task_params'] = task.params\n                break\n    \n    if reply['task_id'] is None:\n        for param in relevant_tasks[0].params:\n            response_params[param] = [task.params[param] for task in relevant_tasks]\n    \n        reply['task_params'] = response_params\n    \n    return reply"
        }
    ]
}