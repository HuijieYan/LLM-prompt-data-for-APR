{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n\n    if self._config.prune_on_get_work:\n        self.prune()\n    \n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    \n    relevant_tasks = self._state.get_pending_tasks()\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n    \n    best_task = None\n    for task in tasks:\n        if task.status == PENDING and (assistant or worker_id in task.workers):\n            if self._schedulable(task) and self._has_resources(task.resources, self._used_resources()):\n                best_task = task\n                break\n    \n    if best_task:\n        if best_task.is_batchable() and len(current_tasks) > 1:\n            self._reset_orphaned_batch_running_tasks(worker_id)\n    \n            batched_params = None\n            for t in current_tasks:\n                if t.family == best_task.family and t.is_batchable() and all(t.params.get(name) == best_task.params.get(name) for name in best_task.params):\n                    batched_params = t.params\n    \n            if batched_params:\n                batch_id = hashlib.md5(\"\".join(t.id for t in current_tasks).encode('utf-8')).hexdigest()\n                reply = {\n                    'task_id': None,\n                    'task_family': best_task.family,\n                    'task_module': getattr(best_task, 'module', None),\n                    'task_params': {**best_task.params, **batched_params},\n                    'batch_id': batch_id,\n                    'batch_task_ids': [t.id for t in current_tasks]\n                }\n                for t in [best_task, *current_tasks]:\n                    self._state.set_batch_running(t, batch_id, worker_id)\n            else:\n                self._state.set_status(best_task, RUNNING, self._config)\n                best_task.worker_running = worker_id\n                best_task.time_running = time.time()\n                self._update_task_history(best_task, RUNNING, host=host)\n                reply = {\n                    'task_id': best_task.id,\n                    'task_family': best_task.family,\n                    'task_module': getattr(best_task, 'module', None),\n                    'task_params': best_task.params\n                }\n        else:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task, RUNNING, host=host)\n            reply = {\n                'task_id': best_task.id,\n                'task_family': best_task.family,\n                'task_module': getattr(best_task, 'module', None),\n                'task_params': best_task.params\n            }\n    else:\n        reply = {\n            'n_pending_tasks': len(relevant_tasks),\n            'running_tasks': self._state.get_running_tasks(),\n            'task_id': None,\n            'n_unique_pending': sum(1 for task in relevant_tasks if len(task.workers) == 1 and not task.rerun)\n        }\n    \n    return reply"
        }
    ]
}