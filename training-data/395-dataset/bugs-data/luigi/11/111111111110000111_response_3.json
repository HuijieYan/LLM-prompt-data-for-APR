{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n\n    if self._config.prune_on_get_work:\n        self.prune()\n    \n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    \n    pending_tasks = self._state.get_pending_tasks()\n    pending_ready_tasks = []\n    \n    # Filter out the tasks that are not yet ready or have failed\n    for task in pending_tasks:\n        if task.status == PENDING and (assistant and getattr(task, 'runnable', bool(task.workers)) or worker_id in task.workers):\n            upstream_status = self._upstream_status(task.id, {})\n            if upstream_status != UPSTREAM_DISABLED:\n                pending_ready_tasks.append(task)\n    \n    reply = {'n_pending_tasks': len(pending_ready_tasks),\n             'running_tasks': [],\n             'task_id': None,\n             'n_unique_pending': len(set(pending_ready_tasks))}\n    \n    if pending_ready_tasks:\n        best_task = pending_ready_tasks[0]  # Get the task with highest priority\n    \n        # Create the response only with parameters of pending and ready tasks\n        if len(pending_ready_tasks) > 1:\n            params = {name: [task.params[name] for task in pending_ready_tasks] for name in pending_ready_tasks[0].params}\n            reply['task_params'] = params\n        else:\n            reply['task_params'] = pending_ready_tasks[0].params\n    \n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['batch_id'] = None\n    \n    return reply"
        }
    ]
}