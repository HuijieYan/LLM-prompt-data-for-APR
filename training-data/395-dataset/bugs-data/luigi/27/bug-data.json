{
    "luigi:27": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_27/luigi/parameter.py": {
            "buggy_functions": [
                {
                    "function_name": "parse_from_input",
                    "function_code": "def parse_from_input(self, param_name, x):\n    \"\"\"\n    Parses the parameter value from input ``x``, handling defaults and is_list.\n\n    :param param_name: the name of the parameter. This is used for the message in\n                       ``MissingParameterException``.\n    :param x: the input value to parse.\n    :raises MissingParameterException: if x is false-y and no default is specified.\n    \"\"\"\n    if not x:\n        if self.has_value:\n            return self.value\n        elif self.is_bool:\n            return False\n        elif self.is_list:\n            return []\n        else:\n            raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" %\n                                            (param_name, \"--\" + param_name.replace('_', '-')))\n    elif self.is_list:\n        return tuple(self.parse(p) for p in x)\n    else:\n        return self.parse(x)\n",
                    "decorators": [],
                    "docstring": "Parses the parameter value from input ``x``, handling defaults and is_list.\n\n:param param_name: the name of the parameter. This is used for the message in\n                   ``MissingParameterException``.\n:param x: the input value to parse.\n:raises MissingParameterException: if x is false-y and no default is specified.",
                    "start_line": 282,
                    "end_line": 304,
                    "variables": {
                        "x": [
                            304,
                            291,
                            302
                        ],
                        "self.has_value": [
                            292
                        ],
                        "self": [
                            292,
                            293,
                            294,
                            296,
                            301,
                            302,
                            304
                        ],
                        "self.value": [
                            293
                        ],
                        "self.is_bool": [
                            294
                        ],
                        "self.is_list": [
                            296,
                            301
                        ],
                        "MissingParameterException": [
                            299
                        ],
                        "param_name": [
                            300
                        ],
                        "param_name.replace": [
                            300
                        ],
                        "tuple": [
                            302
                        ],
                        "self.parse": [
                            304,
                            302
                        ],
                        "p": [
                            302
                        ]
                    },
                    "filtered_variables": {
                        "x": [
                            304,
                            291,
                            302
                        ],
                        "self.has_value": [
                            292
                        ],
                        "self": [
                            292,
                            293,
                            294,
                            296,
                            301,
                            302,
                            304
                        ],
                        "self.value": [
                            293
                        ],
                        "self.is_bool": [
                            294
                        ],
                        "self.is_list": [
                            296,
                            301
                        ],
                        "MissingParameterException": [
                            299
                        ],
                        "param_name": [
                            300
                        ],
                        "param_name.replace": [
                            300
                        ],
                        "self.parse": [
                            304,
                            302
                        ],
                        "p": [
                            302
                        ]
                    },
                    "diff_line_number": 282,
                    "class_data": {
                        "signature": "class Parameter(object)",
                        "docstring": "An untyped Parameter\n\nParameters are objects set on the Task class level to make it possible to parameterize tasks.\nFor instance:\n\n    class MyTask(luigi.Task):\n        foo = luigi.Parameter()\n\nThis makes it possible to instantiate multiple tasks, eg ``MyTask(foo='bar')`` and\n``My(foo='baz')``. The task will then have the ``foo`` attribute set appropriately.\n\nThere are subclasses of ``Parameter`` that define what type the parameter has. This is not\nenforced within Python, but are used for command line interaction.\n\nThe ``config_path`` argument lets you specify a place where the parameter is read from config\nin case no value is provided.\n\nWhen a task is instantiated, it will first use any argument as the value of the parameter, eg.\nif you instantiate a = TaskA(x=44) then a.x == 44. If this does not exist, it will use the value\nof the Parameter object, which is defined on a class level. This will be resolved in this\norder of falling priority:\n\n* Any value provided on the command line on the class level (eg. ``--TaskA-param xyz``)\n* Any value provided via config (using the ``config_path`` argument)\n* Any default value set using the ``default`` flag.",
                        "constructor_docstring": ":param default: the default value for this parameter. This should match the type of the\n                Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                ``IntParameter``. By default, no default is stored and\n                the value must be specified at runtime.\n:param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                     than a single value. Default: ``False``. A list has an implicit default\n                     value of ``[]``.\n:param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                        ``False``. Bool's have an implicit default value of ``False``.\n:param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                       Tasks). Default: ``False``. DEPRECATED.\n:param bool significant: specify ``False`` if the parameter should not be treated as part of\n                         the unique identifier for a Task. An insignificant Parameter might\n                         also be used to specify a password or other sensitive information\n                         that should not be made public via the scheduler. Default:\n                         ``True``.\n:param str description: A human-readable string describing the purpose of this Parameter.\n                        For command-line invocations, this will be used as the `help` string\n                        shown to users. Default: ``None``.\n:param dict config_path: a dictionary with entries ``section`` and ``name``\n                         specifying a config file entry from which to read the\n                         default value for this parameter. DEPRECATED.\n                         Default: ``None``.",
                        "functions": [
                            "@deprecate_kwarg('is_boolean', 'is_bool', False)\ndef __init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None):\n    \"\"\"\n    :param default: the default value for this parameter. This should match the type of the\n                    Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                    ``IntParameter``. By default, no default is stored and\n                    the value must be specified at runtime.\n    :param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                         than a single value. Default: ``False``. A list has an implicit default\n                         value of ``[]``.\n    :param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                            ``False``. Bool's have an implicit default value of ``False``.\n    :param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                           Tasks). Default: ``False``. DEPRECATED.\n    :param bool significant: specify ``False`` if the parameter should not be treated as part of\n                             the unique identifier for a Task. An insignificant Parameter might\n                             also be used to specify a password or other sensitive information\n                             that should not be made public via the scheduler. Default:\n                             ``True``.\n    :param str description: A human-readable string describing the purpose of this Parameter.\n                            For command-line invocations, this will be used as the `help` string\n                            shown to users. Default: ``None``.\n    :param dict config_path: a dictionary with entries ``section`` and ``name``\n                             specifying a config file entry from which to read the\n                             default value for this parameter. DEPRECATED.\n                             Default: ``None``.\n    \"\"\"\n    self.__default = default\n    self.__global = _no_value\n    self.is_list = is_list\n    self.is_bool = is_boolean and (not is_list)\n    self.is_global = is_global\n    self.significant = significant\n    if is_global:\n        warnings.warn('is_global is deprecated and will be removed. Please use either  (a) class level config (eg. --MyTask-my-param 42) (b) a separate Config class with global settings on it', DeprecationWarning, stacklevel=2)\n    if is_global and default == _no_value and (config_path is None):\n        raise ParameterException('Global parameters need default values')\n    self.description = description\n    if config_path is not None and ('section' not in config_path or 'name' not in config_path):\n        raise ParameterException('config_path must be a hash containing entries for section and name')\n    self.__config = config_path\n    self.counter = Parameter.counter\n    Parameter.counter += 1",
                            "def _get_value_from_config(self, section, name):\n    \"\"\"Loads the default from the config. Returns _no_value if it doesn't exist\"\"\"\n    conf = configuration.get_config()\n    try:\n        value = conf.get(section, name)\n    except (NoSectionError, NoOptionError):\n        return _no_value\n    if self.is_list:\n        return tuple((self.parse(p.strip()) for p in value.strip().split('\\n')))\n    else:\n        return self.parse(value)",
                            "def _get_value(self, task_name=None, param_name=None):\n    if self.__global != _no_value:\n        return self.__global\n    if task_name and param_name:\n        v = self._get_value_from_config(task_name, param_name)\n        if v != _no_value:\n            return v\n        v = self._get_value_from_config(task_name, param_name.replace('_', '-'))\n        if v != _no_value:\n            warnings.warn('The use of the configuration [%s] %s (with dashes) should be avoided. Please use underscores.' % (task_name, param_name), DeprecationWarning, stacklevel=2)\n            return v\n    if self.__config:\n        v = self._get_value_from_config(self.__config['section'], self.__config['name'])\n        if v != _no_value and task_name and param_name:\n            warnings.warn('The use of the configuration [%s] %s is deprecated. Please use [%s] %s' % (self.__config['section'], self.__config['name'], task_name, param_name), DeprecationWarning, stacklevel=2)\n        if v != _no_value:\n            return v\n    if self.__default != _no_value:\n        return self.__default\n    return _no_value",
                            "@property\ndef has_value(self):\n    \"\"\"\n    ``True`` if a default was specified or if config_path references a valid entry in the conf.\n\n    Note that \"value\" refers to the Parameter object itself - it can be either\n\n    1. The default value for this parameter\n    2. A value read from the config\n    3. A global value\n\n    Any Task instance can have its own value set that overrides this.\n    \"\"\"\n    return self._get_value() != _no_value",
                            "@property\ndef value(self):\n    \"\"\"\n    The value for this Parameter.\n\n    This refers to any value defined by a default, a config option, or\n    a global value.\n\n    :raises MissingParameterException: if a value is not set.\n    :return: the parsed value.\n    \"\"\"\n    value = self._get_value()\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def has_task_value(self, task_name, param_name):\n    return self._get_value(task_name, param_name) != _no_value",
                            "def task_value(self, task_name, param_name):\n    value = self._get_value(task_name, param_name)\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def set_global(self, value):\n    \"\"\"\n    Set the global value of this Parameter.\n\n    :param value: the new global value.\n    \"\"\"\n    self.__global = value",
                            "def reset_global(self):\n    self.__global = _no_value",
                            "def parse(self, x):\n    \"\"\"\n    Parse an individual value from the input.\n\n    The default implementation is an identify (it returns ``x``), but subclasses should override\n    this method for specialized parsing. This method is called by :py:meth:`parse_from_input`\n    if ``x`` exists. If this Parameter was specified with ``is_list=True``, then ``parse`` is\n    called once for each item in the list.\n\n    :param str x: the value to parse.\n    :return: the parsed value.\n    \"\"\"\n    return x",
                            "def serialize(self, x):\n    \"\"\"\n    Opposite of :py:meth:`parse`.\n\n    Converts the value ``x`` to a string.\n\n    :param x: the value to serialize.\n    \"\"\"\n    if self.is_list:\n        return [str(v) for v in x]\n    return str(x)",
                            "def parse_from_input(self, param_name, x):\n    \"\"\"\n    Parses the parameter value from input ``x``, handling defaults and is_list.\n\n    :param param_name: the name of the parameter. This is used for the message in\n                       ``MissingParameterException``.\n    :param x: the input value to parse.\n    :raises MissingParameterException: if x is false-y and no default is specified.\n    \"\"\"\n    if not x:\n        if self.has_value:\n            return self.value\n        elif self.is_bool:\n            return False\n        elif self.is_list:\n            return []\n        else:\n            raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" % (param_name, '--' + param_name.replace('_', '-')))\n    elif self.is_list:\n        return tuple((self.parse(p) for p in x))\n    else:\n        return self.parse(x)",
                            "def serialize_to_input(self, x):\n    if self.is_list:\n        return tuple((self.serialize(p) for p in x))\n    else:\n        return self.serialize(x)",
                            "def parser_dest(self, param_name, task_name, glob=False, is_without_section=False):\n    if self.is_global or is_without_section:\n        if glob:\n            return param_name\n        else:\n            return None\n    elif glob:\n        return task_name + '_' + param_name\n    else:\n        return param_name",
                            "def add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob, is_without_section=is_without_section)\n    if not dest:\n        return\n    flag = '--' + dest.replace('_', '-')\n    description = []\n    description.append('%s.%s' % (task_name, param_name))\n    if glob:\n        description.append('for all instances of class %s' % task_name)\n    elif self.description:\n        description.append(self.description)\n    if self.has_value:\n        description.append(' [default: %s]' % (self.value,))\n    if self.is_list:\n        action = 'append'\n    elif self.is_bool:\n        action = 'store_true'\n    else:\n        action = 'store'\n    if optparse:\n        f = parser.add_option\n    else:\n        f = parser.add_argument\n    f(flag, help=' '.join(description), action=action, dest=dest)",
                            "def parse_from_args(self, param_name, task_name, args, params):\n    dest = self.parser_dest(param_name, task_name, glob=False)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        params[param_name] = self.parse_from_input(param_name, value)",
                            "def set_global_from_args(self, param_name, task_name, args, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob=True, is_without_section=is_without_section)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        if value:\n            self.set_global(self.parse_from_input(param_name, value))\n        else:\n            self.reset_global()"
                        ],
                        "constructor_variables": [
                            "significant",
                            "is_global",
                            "is_bool",
                            "description",
                            "counter",
                            "__default",
                            "__global",
                            "is_list",
                            "__config"
                        ],
                        "class_level_variables": [
                            "counter"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None)",
                            "_get_value_from_config(self, section, name)",
                            "_get_value(self, task_name=None, param_name=None)",
                            "has_value(self)",
                            "value(self)",
                            "has_task_value(self, task_name, param_name)",
                            "task_value(self, task_name, param_name)",
                            "set_global(self, value)",
                            "reset_global(self)",
                            "parse(self, x)",
                            "serialize(self, x)",
                            "parse_from_input(self, param_name, x)",
                            "serialize_to_input(self, x)",
                            "parser_dest(self, param_name, task_name, glob=False, is_without_section=False)",
                            "add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False)",
                            "parse_from_args(self, param_name, task_name, args, params)",
                            "set_global_from_args(self, param_name, task_name, args, is_without_section=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_value": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x108a0d790>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "self.value": {
                                    "variable_value": "'banana'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x108887df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x108a0d790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_value": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x108a0d790>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "self.value": {
                                    "variable_value": "'banana'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x108887df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x108a0d790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10d486820>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d556d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10d486820>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d556d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10d486820>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d556d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10d486820>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d556d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10d486820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10dabd850>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d553a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10dabd850>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d553a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10dabd850>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d553a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10dabd850>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "MissingParameterException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_name.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d553a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.parse": {
                                    "variable_value": "<bound method Parameter.parse of <luigi.parameter.Parameter object at 0x10dabd850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "add_to_cmdline_parser",
                    "function_code": "def add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob, is_without_section=is_without_section)\n    if not dest:\n        return\n    flag = '--' + dest.replace('_', '-')\n\n    description = []\n    description.append('%s.%s' % (task_name, param_name))\n    if glob:\n        description.append('for all instances of class %s' % task_name)\n    elif self.description:\n        description.append(self.description)\n    if self.has_value:\n        description.append(\" [default: %s]\" % (self.value,))\n\n    if self.is_list:\n        action = \"append\"\n    elif self.is_bool:\n        action = \"store_true\"\n    else:\n        action = \"store\"\n    if optparse:\n        f = parser.add_option\n    else:\n        f = parser.add_argument\n    f(flag,\n      help=' '.join(description),\n      action=action,\n      dest=dest)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 324,
                    "end_line": 352,
                    "variables": {
                        "dest": [
                            328,
                            352,
                            325,
                            326
                        ],
                        "self.parser_dest": [
                            325
                        ],
                        "self": [
                            325,
                            334,
                            335,
                            336,
                            337,
                            339,
                            341
                        ],
                        "param_name": [
                            331,
                            325
                        ],
                        "task_name": [
                            331,
                            333,
                            325
                        ],
                        "glob": [
                            332,
                            325
                        ],
                        "is_without_section": [
                            325
                        ],
                        "flag": [
                            328,
                            349
                        ],
                        "dest.replace": [
                            328
                        ],
                        "description": [
                            330,
                            331,
                            333,
                            335,
                            337,
                            350
                        ],
                        "description.append": [
                            337,
                            331,
                            333,
                            335
                        ],
                        "self.description": [
                            334,
                            335
                        ],
                        "self.has_value": [
                            336
                        ],
                        "self.value": [
                            337
                        ],
                        "self.is_list": [
                            339
                        ],
                        "action": [
                            344,
                            340,
                            342,
                            351
                        ],
                        "self.is_bool": [
                            341
                        ],
                        "optparse": [
                            345
                        ],
                        "f": [
                            346,
                            348,
                            349
                        ],
                        "parser.add_option": [
                            346
                        ],
                        "parser": [
                            346,
                            348
                        ],
                        "parser.add_argument": [
                            348
                        ],
                        "join": [
                            350
                        ]
                    },
                    "filtered_variables": {
                        "dest": [
                            328,
                            352,
                            325,
                            326
                        ],
                        "self.parser_dest": [
                            325
                        ],
                        "self": [
                            325,
                            334,
                            335,
                            336,
                            337,
                            339,
                            341
                        ],
                        "param_name": [
                            331,
                            325
                        ],
                        "task_name": [
                            331,
                            333,
                            325
                        ],
                        "glob": [
                            332,
                            325
                        ],
                        "is_without_section": [
                            325
                        ],
                        "flag": [
                            328,
                            349
                        ],
                        "dest.replace": [
                            328
                        ],
                        "description": [
                            330,
                            331,
                            333,
                            335,
                            337,
                            350
                        ],
                        "description.append": [
                            337,
                            331,
                            333,
                            335
                        ],
                        "self.description": [
                            334,
                            335
                        ],
                        "self.has_value": [
                            336
                        ],
                        "self.value": [
                            337
                        ],
                        "self.is_list": [
                            339
                        ],
                        "action": [
                            344,
                            340,
                            342,
                            351
                        ],
                        "self.is_bool": [
                            341
                        ],
                        "optparse": [
                            345
                        ],
                        "f": [
                            346,
                            348,
                            349
                        ],
                        "parser.add_option": [
                            346
                        ],
                        "parser": [
                            346,
                            348
                        ],
                        "parser.add_argument": [
                            348
                        ],
                        "join": [
                            350
                        ]
                    },
                    "diff_line_number": 336,
                    "class_data": {
                        "signature": "class Parameter(object)",
                        "docstring": "An untyped Parameter\n\nParameters are objects set on the Task class level to make it possible to parameterize tasks.\nFor instance:\n\n    class MyTask(luigi.Task):\n        foo = luigi.Parameter()\n\nThis makes it possible to instantiate multiple tasks, eg ``MyTask(foo='bar')`` and\n``My(foo='baz')``. The task will then have the ``foo`` attribute set appropriately.\n\nThere are subclasses of ``Parameter`` that define what type the parameter has. This is not\nenforced within Python, but are used for command line interaction.\n\nThe ``config_path`` argument lets you specify a place where the parameter is read from config\nin case no value is provided.\n\nWhen a task is instantiated, it will first use any argument as the value of the parameter, eg.\nif you instantiate a = TaskA(x=44) then a.x == 44. If this does not exist, it will use the value\nof the Parameter object, which is defined on a class level. This will be resolved in this\norder of falling priority:\n\n* Any value provided on the command line on the class level (eg. ``--TaskA-param xyz``)\n* Any value provided via config (using the ``config_path`` argument)\n* Any default value set using the ``default`` flag.",
                        "constructor_docstring": ":param default: the default value for this parameter. This should match the type of the\n                Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                ``IntParameter``. By default, no default is stored and\n                the value must be specified at runtime.\n:param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                     than a single value. Default: ``False``. A list has an implicit default\n                     value of ``[]``.\n:param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                        ``False``. Bool's have an implicit default value of ``False``.\n:param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                       Tasks). Default: ``False``. DEPRECATED.\n:param bool significant: specify ``False`` if the parameter should not be treated as part of\n                         the unique identifier for a Task. An insignificant Parameter might\n                         also be used to specify a password or other sensitive information\n                         that should not be made public via the scheduler. Default:\n                         ``True``.\n:param str description: A human-readable string describing the purpose of this Parameter.\n                        For command-line invocations, this will be used as the `help` string\n                        shown to users. Default: ``None``.\n:param dict config_path: a dictionary with entries ``section`` and ``name``\n                         specifying a config file entry from which to read the\n                         default value for this parameter. DEPRECATED.\n                         Default: ``None``.",
                        "functions": [
                            "@deprecate_kwarg('is_boolean', 'is_bool', False)\ndef __init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None):\n    \"\"\"\n    :param default: the default value for this parameter. This should match the type of the\n                    Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                    ``IntParameter``. By default, no default is stored and\n                    the value must be specified at runtime.\n    :param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                         than a single value. Default: ``False``. A list has an implicit default\n                         value of ``[]``.\n    :param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                            ``False``. Bool's have an implicit default value of ``False``.\n    :param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                           Tasks). Default: ``False``. DEPRECATED.\n    :param bool significant: specify ``False`` if the parameter should not be treated as part of\n                             the unique identifier for a Task. An insignificant Parameter might\n                             also be used to specify a password or other sensitive information\n                             that should not be made public via the scheduler. Default:\n                             ``True``.\n    :param str description: A human-readable string describing the purpose of this Parameter.\n                            For command-line invocations, this will be used as the `help` string\n                            shown to users. Default: ``None``.\n    :param dict config_path: a dictionary with entries ``section`` and ``name``\n                             specifying a config file entry from which to read the\n                             default value for this parameter. DEPRECATED.\n                             Default: ``None``.\n    \"\"\"\n    self.__default = default\n    self.__global = _no_value\n    self.is_list = is_list\n    self.is_bool = is_boolean and (not is_list)\n    self.is_global = is_global\n    self.significant = significant\n    if is_global:\n        warnings.warn('is_global is deprecated and will be removed. Please use either  (a) class level config (eg. --MyTask-my-param 42) (b) a separate Config class with global settings on it', DeprecationWarning, stacklevel=2)\n    if is_global and default == _no_value and (config_path is None):\n        raise ParameterException('Global parameters need default values')\n    self.description = description\n    if config_path is not None and ('section' not in config_path or 'name' not in config_path):\n        raise ParameterException('config_path must be a hash containing entries for section and name')\n    self.__config = config_path\n    self.counter = Parameter.counter\n    Parameter.counter += 1",
                            "def _get_value_from_config(self, section, name):\n    \"\"\"Loads the default from the config. Returns _no_value if it doesn't exist\"\"\"\n    conf = configuration.get_config()\n    try:\n        value = conf.get(section, name)\n    except (NoSectionError, NoOptionError):\n        return _no_value\n    if self.is_list:\n        return tuple((self.parse(p.strip()) for p in value.strip().split('\\n')))\n    else:\n        return self.parse(value)",
                            "def _get_value(self, task_name=None, param_name=None):\n    if self.__global != _no_value:\n        return self.__global\n    if task_name and param_name:\n        v = self._get_value_from_config(task_name, param_name)\n        if v != _no_value:\n            return v\n        v = self._get_value_from_config(task_name, param_name.replace('_', '-'))\n        if v != _no_value:\n            warnings.warn('The use of the configuration [%s] %s (with dashes) should be avoided. Please use underscores.' % (task_name, param_name), DeprecationWarning, stacklevel=2)\n            return v\n    if self.__config:\n        v = self._get_value_from_config(self.__config['section'], self.__config['name'])\n        if v != _no_value and task_name and param_name:\n            warnings.warn('The use of the configuration [%s] %s is deprecated. Please use [%s] %s' % (self.__config['section'], self.__config['name'], task_name, param_name), DeprecationWarning, stacklevel=2)\n        if v != _no_value:\n            return v\n    if self.__default != _no_value:\n        return self.__default\n    return _no_value",
                            "@property\ndef has_value(self):\n    \"\"\"\n    ``True`` if a default was specified or if config_path references a valid entry in the conf.\n\n    Note that \"value\" refers to the Parameter object itself - it can be either\n\n    1. The default value for this parameter\n    2. A value read from the config\n    3. A global value\n\n    Any Task instance can have its own value set that overrides this.\n    \"\"\"\n    return self._get_value() != _no_value",
                            "@property\ndef value(self):\n    \"\"\"\n    The value for this Parameter.\n\n    This refers to any value defined by a default, a config option, or\n    a global value.\n\n    :raises MissingParameterException: if a value is not set.\n    :return: the parsed value.\n    \"\"\"\n    value = self._get_value()\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def has_task_value(self, task_name, param_name):\n    return self._get_value(task_name, param_name) != _no_value",
                            "def task_value(self, task_name, param_name):\n    value = self._get_value(task_name, param_name)\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def set_global(self, value):\n    \"\"\"\n    Set the global value of this Parameter.\n\n    :param value: the new global value.\n    \"\"\"\n    self.__global = value",
                            "def reset_global(self):\n    self.__global = _no_value",
                            "def parse(self, x):\n    \"\"\"\n    Parse an individual value from the input.\n\n    The default implementation is an identify (it returns ``x``), but subclasses should override\n    this method for specialized parsing. This method is called by :py:meth:`parse_from_input`\n    if ``x`` exists. If this Parameter was specified with ``is_list=True``, then ``parse`` is\n    called once for each item in the list.\n\n    :param str x: the value to parse.\n    :return: the parsed value.\n    \"\"\"\n    return x",
                            "def serialize(self, x):\n    \"\"\"\n    Opposite of :py:meth:`parse`.\n\n    Converts the value ``x`` to a string.\n\n    :param x: the value to serialize.\n    \"\"\"\n    if self.is_list:\n        return [str(v) for v in x]\n    return str(x)",
                            "def parse_from_input(self, param_name, x):\n    \"\"\"\n    Parses the parameter value from input ``x``, handling defaults and is_list.\n\n    :param param_name: the name of the parameter. This is used for the message in\n                       ``MissingParameterException``.\n    :param x: the input value to parse.\n    :raises MissingParameterException: if x is false-y and no default is specified.\n    \"\"\"\n    if not x:\n        if self.has_value:\n            return self.value\n        elif self.is_bool:\n            return False\n        elif self.is_list:\n            return []\n        else:\n            raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" % (param_name, '--' + param_name.replace('_', '-')))\n    elif self.is_list:\n        return tuple((self.parse(p) for p in x))\n    else:\n        return self.parse(x)",
                            "def serialize_to_input(self, x):\n    if self.is_list:\n        return tuple((self.serialize(p) for p in x))\n    else:\n        return self.serialize(x)",
                            "def parser_dest(self, param_name, task_name, glob=False, is_without_section=False):\n    if self.is_global or is_without_section:\n        if glob:\n            return param_name\n        else:\n            return None\n    elif glob:\n        return task_name + '_' + param_name\n    else:\n        return param_name",
                            "def add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob, is_without_section=is_without_section)\n    if not dest:\n        return\n    flag = '--' + dest.replace('_', '-')\n    description = []\n    description.append('%s.%s' % (task_name, param_name))\n    if glob:\n        description.append('for all instances of class %s' % task_name)\n    elif self.description:\n        description.append(self.description)\n    if self.has_value:\n        description.append(' [default: %s]' % (self.value,))\n    if self.is_list:\n        action = 'append'\n    elif self.is_bool:\n        action = 'store_true'\n    else:\n        action = 'store'\n    if optparse:\n        f = parser.add_option\n    else:\n        f = parser.add_argument\n    f(flag, help=' '.join(description), action=action, dest=dest)",
                            "def parse_from_args(self, param_name, task_name, args, params):\n    dest = self.parser_dest(param_name, task_name, glob=False)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        params[param_name] = self.parse_from_input(param_name, value)",
                            "def set_global_from_args(self, param_name, task_name, args, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob=True, is_without_section=is_without_section)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        if value:\n            self.set_global(self.parse_from_input(param_name, value))\n        else:\n            self.reset_global()"
                        ],
                        "constructor_variables": [
                            "significant",
                            "is_global",
                            "is_bool",
                            "description",
                            "counter",
                            "__default",
                            "__global",
                            "is_list",
                            "__config"
                        ],
                        "class_level_variables": [
                            "counter"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None)",
                            "_get_value_from_config(self, section, name)",
                            "_get_value(self, task_name=None, param_name=None)",
                            "has_value(self)",
                            "value(self)",
                            "has_task_value(self, task_name, param_name)",
                            "task_value(self, task_name, param_name)",
                            "set_global(self, value)",
                            "reset_global(self)",
                            "parse(self, x)",
                            "serialize(self, x)",
                            "parse_from_input(self, param_name, x)",
                            "serialize_to_input(self, x)",
                            "parser_dest(self, param_name, task_name, glob=False, is_without_section=False)",
                            "add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False)",
                            "parse_from_args(self, param_name, task_name, args, params)",
                            "set_global_from_args(self, param_name, task_name, args, is_without_section=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "dest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser_dest": {
                                    "variable_value": "<bound method Parameter.parser_dest of <luigi.parameter.BoolParameter object at 0x108fce580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.BoolParameter object at 0x108fce580>",
                                    "variable_type": "BoolParameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'assistant'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "task_name": {
                                    "variable_value": "'core'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "glob": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_without_section": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "flag": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "description.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.description": {
                                    "variable_value": "'Run any task from the scheduler.'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "self.has_value": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.value": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "action": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "optparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parser.add_option": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parser": {
                                    "variable_value": "ArgumentParser(prog='__main__.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)",
                                    "variable_type": "ArgumentParser",
                                    "variable_shape": null
                                },
                                "parser.add_argument": {
                                    "variable_value": "<bound method _ActionsContainer.add_argument of ArgumentParser(prog='__main__.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "dest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser_dest": {
                                    "variable_value": "<bound method Parameter.parser_dest of <luigi.parameter.Parameter object at 0x10bcaadc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10bcaadc0>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "glob": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_without_section": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "flag": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "description.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.description": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.has_task_value": {
                                    "variable_value": "<bound method Parameter.has_task_value of <luigi.parameter.Parameter object at 0x10bcaadc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_value": {
                                    "variable_value": "<bound method Parameter.task_value of <luigi.parameter.Parameter object at 0x10bcaadc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "action": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_bool": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "optparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parser.add_option": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parser": {
                                    "variable_value": "ArgumentParser(prog='__main__.py MyClass2', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)",
                                    "variable_type": "ArgumentParser",
                                    "variable_shape": null
                                },
                                "parser.add_argument": {
                                    "variable_value": "<bound method _ActionsContainer.add_argument of ArgumentParser(prog='__main__.py MyClass2', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "parse_from_args",
                    "function_code": "def parse_from_args(self, param_name, task_name, args, params):\n    # Note: modifies arguments\n    dest = self.parser_dest(param_name, task_name, glob=False)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        params[param_name] = self.parse_from_input(param_name, value)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 354,
                    "end_line": 359,
                    "variables": {
                        "dest": [
                            356,
                            357,
                            358
                        ],
                        "self.parser_dest": [
                            356
                        ],
                        "self": [
                            356,
                            359
                        ],
                        "param_name": [
                            356,
                            359
                        ],
                        "task_name": [
                            356
                        ],
                        "value": [
                            358,
                            359
                        ],
                        "getattr": [
                            358
                        ],
                        "args": [
                            358
                        ],
                        "params": [
                            359
                        ],
                        "self.parse_from_input": [
                            359
                        ]
                    },
                    "filtered_variables": {
                        "dest": [
                            356,
                            357,
                            358
                        ],
                        "self.parser_dest": [
                            356
                        ],
                        "self": [
                            356,
                            359
                        ],
                        "param_name": [
                            356,
                            359
                        ],
                        "task_name": [
                            356
                        ],
                        "value": [
                            358,
                            359
                        ],
                        "args": [
                            358
                        ],
                        "params": [
                            359
                        ],
                        "self.parse_from_input": [
                            359
                        ]
                    },
                    "diff_line_number": 359,
                    "class_data": {
                        "signature": "class Parameter(object)",
                        "docstring": "An untyped Parameter\n\nParameters are objects set on the Task class level to make it possible to parameterize tasks.\nFor instance:\n\n    class MyTask(luigi.Task):\n        foo = luigi.Parameter()\n\nThis makes it possible to instantiate multiple tasks, eg ``MyTask(foo='bar')`` and\n``My(foo='baz')``. The task will then have the ``foo`` attribute set appropriately.\n\nThere are subclasses of ``Parameter`` that define what type the parameter has. This is not\nenforced within Python, but are used for command line interaction.\n\nThe ``config_path`` argument lets you specify a place where the parameter is read from config\nin case no value is provided.\n\nWhen a task is instantiated, it will first use any argument as the value of the parameter, eg.\nif you instantiate a = TaskA(x=44) then a.x == 44. If this does not exist, it will use the value\nof the Parameter object, which is defined on a class level. This will be resolved in this\norder of falling priority:\n\n* Any value provided on the command line on the class level (eg. ``--TaskA-param xyz``)\n* Any value provided via config (using the ``config_path`` argument)\n* Any default value set using the ``default`` flag.",
                        "constructor_docstring": ":param default: the default value for this parameter. This should match the type of the\n                Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                ``IntParameter``. By default, no default is stored and\n                the value must be specified at runtime.\n:param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                     than a single value. Default: ``False``. A list has an implicit default\n                     value of ``[]``.\n:param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                        ``False``. Bool's have an implicit default value of ``False``.\n:param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                       Tasks). Default: ``False``. DEPRECATED.\n:param bool significant: specify ``False`` if the parameter should not be treated as part of\n                         the unique identifier for a Task. An insignificant Parameter might\n                         also be used to specify a password or other sensitive information\n                         that should not be made public via the scheduler. Default:\n                         ``True``.\n:param str description: A human-readable string describing the purpose of this Parameter.\n                        For command-line invocations, this will be used as the `help` string\n                        shown to users. Default: ``None``.\n:param dict config_path: a dictionary with entries ``section`` and ``name``\n                         specifying a config file entry from which to read the\n                         default value for this parameter. DEPRECATED.\n                         Default: ``None``.",
                        "functions": [
                            "@deprecate_kwarg('is_boolean', 'is_bool', False)\ndef __init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None):\n    \"\"\"\n    :param default: the default value for this parameter. This should match the type of the\n                    Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                    ``IntParameter``. By default, no default is stored and\n                    the value must be specified at runtime.\n    :param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                         than a single value. Default: ``False``. A list has an implicit default\n                         value of ``[]``.\n    :param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                            ``False``. Bool's have an implicit default value of ``False``.\n    :param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                           Tasks). Default: ``False``. DEPRECATED.\n    :param bool significant: specify ``False`` if the parameter should not be treated as part of\n                             the unique identifier for a Task. An insignificant Parameter might\n                             also be used to specify a password or other sensitive information\n                             that should not be made public via the scheduler. Default:\n                             ``True``.\n    :param str description: A human-readable string describing the purpose of this Parameter.\n                            For command-line invocations, this will be used as the `help` string\n                            shown to users. Default: ``None``.\n    :param dict config_path: a dictionary with entries ``section`` and ``name``\n                             specifying a config file entry from which to read the\n                             default value for this parameter. DEPRECATED.\n                             Default: ``None``.\n    \"\"\"\n    self.__default = default\n    self.__global = _no_value\n    self.is_list = is_list\n    self.is_bool = is_boolean and (not is_list)\n    self.is_global = is_global\n    self.significant = significant\n    if is_global:\n        warnings.warn('is_global is deprecated and will be removed. Please use either  (a) class level config (eg. --MyTask-my-param 42) (b) a separate Config class with global settings on it', DeprecationWarning, stacklevel=2)\n    if is_global and default == _no_value and (config_path is None):\n        raise ParameterException('Global parameters need default values')\n    self.description = description\n    if config_path is not None and ('section' not in config_path or 'name' not in config_path):\n        raise ParameterException('config_path must be a hash containing entries for section and name')\n    self.__config = config_path\n    self.counter = Parameter.counter\n    Parameter.counter += 1",
                            "def _get_value_from_config(self, section, name):\n    \"\"\"Loads the default from the config. Returns _no_value if it doesn't exist\"\"\"\n    conf = configuration.get_config()\n    try:\n        value = conf.get(section, name)\n    except (NoSectionError, NoOptionError):\n        return _no_value\n    if self.is_list:\n        return tuple((self.parse(p.strip()) for p in value.strip().split('\\n')))\n    else:\n        return self.parse(value)",
                            "def _get_value(self, task_name=None, param_name=None):\n    if self.__global != _no_value:\n        return self.__global\n    if task_name and param_name:\n        v = self._get_value_from_config(task_name, param_name)\n        if v != _no_value:\n            return v\n        v = self._get_value_from_config(task_name, param_name.replace('_', '-'))\n        if v != _no_value:\n            warnings.warn('The use of the configuration [%s] %s (with dashes) should be avoided. Please use underscores.' % (task_name, param_name), DeprecationWarning, stacklevel=2)\n            return v\n    if self.__config:\n        v = self._get_value_from_config(self.__config['section'], self.__config['name'])\n        if v != _no_value and task_name and param_name:\n            warnings.warn('The use of the configuration [%s] %s is deprecated. Please use [%s] %s' % (self.__config['section'], self.__config['name'], task_name, param_name), DeprecationWarning, stacklevel=2)\n        if v != _no_value:\n            return v\n    if self.__default != _no_value:\n        return self.__default\n    return _no_value",
                            "@property\ndef has_value(self):\n    \"\"\"\n    ``True`` if a default was specified or if config_path references a valid entry in the conf.\n\n    Note that \"value\" refers to the Parameter object itself - it can be either\n\n    1. The default value for this parameter\n    2. A value read from the config\n    3. A global value\n\n    Any Task instance can have its own value set that overrides this.\n    \"\"\"\n    return self._get_value() != _no_value",
                            "@property\ndef value(self):\n    \"\"\"\n    The value for this Parameter.\n\n    This refers to any value defined by a default, a config option, or\n    a global value.\n\n    :raises MissingParameterException: if a value is not set.\n    :return: the parsed value.\n    \"\"\"\n    value = self._get_value()\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def has_task_value(self, task_name, param_name):\n    return self._get_value(task_name, param_name) != _no_value",
                            "def task_value(self, task_name, param_name):\n    value = self._get_value(task_name, param_name)\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def set_global(self, value):\n    \"\"\"\n    Set the global value of this Parameter.\n\n    :param value: the new global value.\n    \"\"\"\n    self.__global = value",
                            "def reset_global(self):\n    self.__global = _no_value",
                            "def parse(self, x):\n    \"\"\"\n    Parse an individual value from the input.\n\n    The default implementation is an identify (it returns ``x``), but subclasses should override\n    this method for specialized parsing. This method is called by :py:meth:`parse_from_input`\n    if ``x`` exists. If this Parameter was specified with ``is_list=True``, then ``parse`` is\n    called once for each item in the list.\n\n    :param str x: the value to parse.\n    :return: the parsed value.\n    \"\"\"\n    return x",
                            "def serialize(self, x):\n    \"\"\"\n    Opposite of :py:meth:`parse`.\n\n    Converts the value ``x`` to a string.\n\n    :param x: the value to serialize.\n    \"\"\"\n    if self.is_list:\n        return [str(v) for v in x]\n    return str(x)",
                            "def parse_from_input(self, param_name, x):\n    \"\"\"\n    Parses the parameter value from input ``x``, handling defaults and is_list.\n\n    :param param_name: the name of the parameter. This is used for the message in\n                       ``MissingParameterException``.\n    :param x: the input value to parse.\n    :raises MissingParameterException: if x is false-y and no default is specified.\n    \"\"\"\n    if not x:\n        if self.has_value:\n            return self.value\n        elif self.is_bool:\n            return False\n        elif self.is_list:\n            return []\n        else:\n            raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" % (param_name, '--' + param_name.replace('_', '-')))\n    elif self.is_list:\n        return tuple((self.parse(p) for p in x))\n    else:\n        return self.parse(x)",
                            "def serialize_to_input(self, x):\n    if self.is_list:\n        return tuple((self.serialize(p) for p in x))\n    else:\n        return self.serialize(x)",
                            "def parser_dest(self, param_name, task_name, glob=False, is_without_section=False):\n    if self.is_global or is_without_section:\n        if glob:\n            return param_name\n        else:\n            return None\n    elif glob:\n        return task_name + '_' + param_name\n    else:\n        return param_name",
                            "def add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob, is_without_section=is_without_section)\n    if not dest:\n        return\n    flag = '--' + dest.replace('_', '-')\n    description = []\n    description.append('%s.%s' % (task_name, param_name))\n    if glob:\n        description.append('for all instances of class %s' % task_name)\n    elif self.description:\n        description.append(self.description)\n    if self.has_value:\n        description.append(' [default: %s]' % (self.value,))\n    if self.is_list:\n        action = 'append'\n    elif self.is_bool:\n        action = 'store_true'\n    else:\n        action = 'store'\n    if optparse:\n        f = parser.add_option\n    else:\n        f = parser.add_argument\n    f(flag, help=' '.join(description), action=action, dest=dest)",
                            "def parse_from_args(self, param_name, task_name, args, params):\n    dest = self.parser_dest(param_name, task_name, glob=False)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        params[param_name] = self.parse_from_input(param_name, value)",
                            "def set_global_from_args(self, param_name, task_name, args, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob=True, is_without_section=is_without_section)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        if value:\n            self.set_global(self.parse_from_input(param_name, value))\n        else:\n            self.reset_global()"
                        ],
                        "constructor_variables": [
                            "significant",
                            "is_global",
                            "is_bool",
                            "description",
                            "counter",
                            "__default",
                            "__global",
                            "is_list",
                            "__config"
                        ],
                        "class_level_variables": [
                            "counter"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None)",
                            "_get_value_from_config(self, section, name)",
                            "_get_value(self, task_name=None, param_name=None)",
                            "has_value(self)",
                            "value(self)",
                            "has_task_value(self, task_name, param_name)",
                            "task_value(self, task_name, param_name)",
                            "set_global(self, value)",
                            "reset_global(self)",
                            "parse(self, x)",
                            "serialize(self, x)",
                            "parse_from_input(self, param_name, x)",
                            "serialize_to_input(self, x)",
                            "parser_dest(self, param_name, task_name, glob=False, is_without_section=False)",
                            "add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False)",
                            "parse_from_args(self, param_name, task_name, args, params)",
                            "set_global_from_args(self, param_name, task_name, args, is_without_section=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "dest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser_dest": {
                                    "variable_value": "<bound method Parameter.parser_dest of <luigi.parameter.Parameter object at 0x10bad5b20>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10bad5b20>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "Namespace(A_p=None, BananaDep_x=None, BananaDep_y=None, Banana_style=None, Banana_x=None, Banana_y=None, Bar_multibool=None, Baz_bool=False, Dummy2Task_p=None, DynamicDummyTask_p=None, DynamicRequiresOtherModule_p=None, DynamicRequires_p=None, DynamicRequires_use_banana_task=False, Foo_bar=None, Foo_multi=None, Foo_p2=None, ForgotParam_param=None, ForkBombTask_breadth=None, ForkBombTask_depth=None, ForkBombTask_p=None, HasGlobalParamDep_x=None, HasGlobalParam_x=None, HungWorker_worker_timeout=None, MyClass2_p_not_global_no_default=None, MyClass_p_not_global=None, MyConfig_mc_p=None, MyConfig_mc_q=None, RangeBase_now=None, RangeBase_of=None, RangeBase_reverse=False, RangeBase_start=None, RangeBase_stop=None, RangeBase_task_limit=None, RangeDailyBase_days_back=None, RangeDailyBase_days_forward=None, RangeDailyBase_start=None, RangeDailyBase_stop=None, RangeHourlyBase_hours_back=None, RangeHourlyBase_hours_forward=None, RangeHourlyBase_start=None, RangeHourlyBase_stop=None, SuicidalWorker_signal=None, WithDefault_x=None, assistant=False, command='MyClass2', global_bool_param=False, global_param=None, local_scheduler=True, lock_pid_dir=None, lock_size=None, logging_conf_file=None, mc_r=None, mc_s=None, module=None, no_lock=True, parallel_scheduling=False, scheduler_disable_failures=None, scheduler_disable_hard_timeout=None, scheduler_disable_persist=None, scheduler_disable_window=None, scheduler_host=None, scheduler_max_shown_tasks=None, scheduler_port=None, scheduler_prune_done_tasks=False, scheduler_record_task_history=False, scheduler_remove_delay=None, scheduler_retry_delay=None, scheduler_state_path=None, scheduler_visualization_graph=None, scheduler_worker_disconnect_delay=None, shared_global_param=None, worker_count_uniques=False, worker_keep_alive=False, worker_max_reschedules=None, worker_ping_interval=None, worker_task_limit=None, worker_timeout=None, worker_wait_interval=None, workers=None)",
                                    "variable_type": "Namespace",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.parse_from_input": {
                                    "variable_value": "<bound method Parameter.parse_from_input of <luigi.parameter.Parameter object at 0x10bad5b20>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "dest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser_dest": {
                                    "variable_value": "<bound method Parameter.parser_dest of <luigi.parameter.Parameter object at 0x112064580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x112064580>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "Namespace(A_p=None, BananaDep_x=None, BananaDep_y=None, Banana_style=None, Banana_x=None, Banana_y=None, Bar_multibool=None, Baz_bool=False, Dummy2Task_p=None, DynamicDummyTask_p=None, DynamicRequiresOtherModule_p=None, DynamicRequires_p=None, DynamicRequires_use_banana_task=False, Foo_bar=None, Foo_multi=None, Foo_p2=None, ForgotParam_param=None, ForkBombTask_breadth=None, ForkBombTask_depth=None, ForkBombTask_p=None, HasGlobalParamDep_x=None, HasGlobalParam_x=None, HungWorker_worker_timeout=None, MyClass2_p_not_global_no_default='124', MyClass_p_not_global=None, MyConfig_mc_p=None, MyConfig_mc_q=None, RangeBase_now=None, RangeBase_of=None, RangeBase_reverse=False, RangeBase_start=None, RangeBase_stop=None, RangeBase_task_limit=None, RangeDailyBase_days_back=None, RangeDailyBase_days_forward=None, RangeDailyBase_start=None, RangeDailyBase_stop=None, RangeHourlyBase_hours_back=None, RangeHourlyBase_hours_forward=None, RangeHourlyBase_start=None, RangeHourlyBase_stop=None, SuicidalWorker_signal=None, WithDefault_x=None, assistant=False, command='MyClass2', global_bool_param=False, global_param=None, local_scheduler=True, lock_pid_dir=None, lock_size=None, logging_conf_file=None, mc_r=None, mc_s=None, module=None, no_lock=True, parallel_scheduling=False, scheduler_disable_failures=None, scheduler_disable_hard_timeout=None, scheduler_disable_persist=None, scheduler_disable_window=None, scheduler_host=None, scheduler_max_shown_tasks=None, scheduler_port=None, scheduler_prune_done_tasks=False, scheduler_record_task_history=False, scheduler_remove_delay=None, scheduler_retry_delay=None, scheduler_state_path=None, scheduler_visualization_graph=None, scheduler_worker_disconnect_delay=None, shared_global_param=None, worker_count_uniques=False, worker_keep_alive=False, worker_max_reschedules=None, worker_ping_interval=None, worker_task_limit=None, worker_timeout=None, worker_wait_interval=None, workers=None)",
                                    "variable_type": "Namespace",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.parse_from_input": {
                                    "variable_value": "<bound method Parameter.parse_from_input of <luigi.parameter.Parameter object at 0x112064580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "set_global_from_args",
                    "function_code": "def set_global_from_args(self, param_name, task_name, args, is_without_section=False):\n    # Note: side effects\n    dest = self.parser_dest(param_name, task_name, glob=True, is_without_section=is_without_section)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        if value:\n            self.set_global(self.parse_from_input(param_name, value))\n        else:  # either False (bools) or None (everything else)\n            self.reset_global()\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 361,
                    "end_line": 369,
                    "variables": {
                        "dest": [
                            363,
                            364,
                            365
                        ],
                        "self.parser_dest": [
                            363
                        ],
                        "self": [
                            369,
                            363,
                            367
                        ],
                        "param_name": [
                            363,
                            367
                        ],
                        "task_name": [
                            363
                        ],
                        "is_without_section": [
                            363
                        ],
                        "value": [
                            365,
                            366,
                            367
                        ],
                        "getattr": [
                            365
                        ],
                        "args": [
                            365
                        ],
                        "self.set_global": [
                            367
                        ],
                        "self.parse_from_input": [
                            367
                        ],
                        "self.reset_global": [
                            369
                        ]
                    },
                    "filtered_variables": {
                        "dest": [
                            363,
                            364,
                            365
                        ],
                        "self.parser_dest": [
                            363
                        ],
                        "self": [
                            369,
                            363,
                            367
                        ],
                        "param_name": [
                            363,
                            367
                        ],
                        "task_name": [
                            363
                        ],
                        "is_without_section": [
                            363
                        ],
                        "value": [
                            365,
                            366,
                            367
                        ],
                        "args": [
                            365
                        ],
                        "self.set_global": [
                            367
                        ],
                        "self.parse_from_input": [
                            367
                        ],
                        "self.reset_global": [
                            369
                        ]
                    },
                    "diff_line_number": 367,
                    "class_data": {
                        "signature": "class Parameter(object)",
                        "docstring": "An untyped Parameter\n\nParameters are objects set on the Task class level to make it possible to parameterize tasks.\nFor instance:\n\n    class MyTask(luigi.Task):\n        foo = luigi.Parameter()\n\nThis makes it possible to instantiate multiple tasks, eg ``MyTask(foo='bar')`` and\n``My(foo='baz')``. The task will then have the ``foo`` attribute set appropriately.\n\nThere are subclasses of ``Parameter`` that define what type the parameter has. This is not\nenforced within Python, but are used for command line interaction.\n\nThe ``config_path`` argument lets you specify a place where the parameter is read from config\nin case no value is provided.\n\nWhen a task is instantiated, it will first use any argument as the value of the parameter, eg.\nif you instantiate a = TaskA(x=44) then a.x == 44. If this does not exist, it will use the value\nof the Parameter object, which is defined on a class level. This will be resolved in this\norder of falling priority:\n\n* Any value provided on the command line on the class level (eg. ``--TaskA-param xyz``)\n* Any value provided via config (using the ``config_path`` argument)\n* Any default value set using the ``default`` flag.",
                        "constructor_docstring": ":param default: the default value for this parameter. This should match the type of the\n                Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                ``IntParameter``. By default, no default is stored and\n                the value must be specified at runtime.\n:param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                     than a single value. Default: ``False``. A list has an implicit default\n                     value of ``[]``.\n:param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                        ``False``. Bool's have an implicit default value of ``False``.\n:param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                       Tasks). Default: ``False``. DEPRECATED.\n:param bool significant: specify ``False`` if the parameter should not be treated as part of\n                         the unique identifier for a Task. An insignificant Parameter might\n                         also be used to specify a password or other sensitive information\n                         that should not be made public via the scheduler. Default:\n                         ``True``.\n:param str description: A human-readable string describing the purpose of this Parameter.\n                        For command-line invocations, this will be used as the `help` string\n                        shown to users. Default: ``None``.\n:param dict config_path: a dictionary with entries ``section`` and ``name``\n                         specifying a config file entry from which to read the\n                         default value for this parameter. DEPRECATED.\n                         Default: ``None``.",
                        "functions": [
                            "@deprecate_kwarg('is_boolean', 'is_bool', False)\ndef __init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None):\n    \"\"\"\n    :param default: the default value for this parameter. This should match the type of the\n                    Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                    ``IntParameter``. By default, no default is stored and\n                    the value must be specified at runtime.\n    :param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                         than a single value. Default: ``False``. A list has an implicit default\n                         value of ``[]``.\n    :param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                            ``False``. Bool's have an implicit default value of ``False``.\n    :param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                           Tasks). Default: ``False``. DEPRECATED.\n    :param bool significant: specify ``False`` if the parameter should not be treated as part of\n                             the unique identifier for a Task. An insignificant Parameter might\n                             also be used to specify a password or other sensitive information\n                             that should not be made public via the scheduler. Default:\n                             ``True``.\n    :param str description: A human-readable string describing the purpose of this Parameter.\n                            For command-line invocations, this will be used as the `help` string\n                            shown to users. Default: ``None``.\n    :param dict config_path: a dictionary with entries ``section`` and ``name``\n                             specifying a config file entry from which to read the\n                             default value for this parameter. DEPRECATED.\n                             Default: ``None``.\n    \"\"\"\n    self.__default = default\n    self.__global = _no_value\n    self.is_list = is_list\n    self.is_bool = is_boolean and (not is_list)\n    self.is_global = is_global\n    self.significant = significant\n    if is_global:\n        warnings.warn('is_global is deprecated and will be removed. Please use either  (a) class level config (eg. --MyTask-my-param 42) (b) a separate Config class with global settings on it', DeprecationWarning, stacklevel=2)\n    if is_global and default == _no_value and (config_path is None):\n        raise ParameterException('Global parameters need default values')\n    self.description = description\n    if config_path is not None and ('section' not in config_path or 'name' not in config_path):\n        raise ParameterException('config_path must be a hash containing entries for section and name')\n    self.__config = config_path\n    self.counter = Parameter.counter\n    Parameter.counter += 1",
                            "def _get_value_from_config(self, section, name):\n    \"\"\"Loads the default from the config. Returns _no_value if it doesn't exist\"\"\"\n    conf = configuration.get_config()\n    try:\n        value = conf.get(section, name)\n    except (NoSectionError, NoOptionError):\n        return _no_value\n    if self.is_list:\n        return tuple((self.parse(p.strip()) for p in value.strip().split('\\n')))\n    else:\n        return self.parse(value)",
                            "def _get_value(self, task_name=None, param_name=None):\n    if self.__global != _no_value:\n        return self.__global\n    if task_name and param_name:\n        v = self._get_value_from_config(task_name, param_name)\n        if v != _no_value:\n            return v\n        v = self._get_value_from_config(task_name, param_name.replace('_', '-'))\n        if v != _no_value:\n            warnings.warn('The use of the configuration [%s] %s (with dashes) should be avoided. Please use underscores.' % (task_name, param_name), DeprecationWarning, stacklevel=2)\n            return v\n    if self.__config:\n        v = self._get_value_from_config(self.__config['section'], self.__config['name'])\n        if v != _no_value and task_name and param_name:\n            warnings.warn('The use of the configuration [%s] %s is deprecated. Please use [%s] %s' % (self.__config['section'], self.__config['name'], task_name, param_name), DeprecationWarning, stacklevel=2)\n        if v != _no_value:\n            return v\n    if self.__default != _no_value:\n        return self.__default\n    return _no_value",
                            "@property\ndef has_value(self):\n    \"\"\"\n    ``True`` if a default was specified or if config_path references a valid entry in the conf.\n\n    Note that \"value\" refers to the Parameter object itself - it can be either\n\n    1. The default value for this parameter\n    2. A value read from the config\n    3. A global value\n\n    Any Task instance can have its own value set that overrides this.\n    \"\"\"\n    return self._get_value() != _no_value",
                            "@property\ndef value(self):\n    \"\"\"\n    The value for this Parameter.\n\n    This refers to any value defined by a default, a config option, or\n    a global value.\n\n    :raises MissingParameterException: if a value is not set.\n    :return: the parsed value.\n    \"\"\"\n    value = self._get_value()\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def has_task_value(self, task_name, param_name):\n    return self._get_value(task_name, param_name) != _no_value",
                            "def task_value(self, task_name, param_name):\n    value = self._get_value(task_name, param_name)\n    if value == _no_value:\n        raise MissingParameterException('No default specified')\n    else:\n        return value",
                            "def set_global(self, value):\n    \"\"\"\n    Set the global value of this Parameter.\n\n    :param value: the new global value.\n    \"\"\"\n    self.__global = value",
                            "def reset_global(self):\n    self.__global = _no_value",
                            "def parse(self, x):\n    \"\"\"\n    Parse an individual value from the input.\n\n    The default implementation is an identify (it returns ``x``), but subclasses should override\n    this method for specialized parsing. This method is called by :py:meth:`parse_from_input`\n    if ``x`` exists. If this Parameter was specified with ``is_list=True``, then ``parse`` is\n    called once for each item in the list.\n\n    :param str x: the value to parse.\n    :return: the parsed value.\n    \"\"\"\n    return x",
                            "def serialize(self, x):\n    \"\"\"\n    Opposite of :py:meth:`parse`.\n\n    Converts the value ``x`` to a string.\n\n    :param x: the value to serialize.\n    \"\"\"\n    if self.is_list:\n        return [str(v) for v in x]\n    return str(x)",
                            "def parse_from_input(self, param_name, x):\n    \"\"\"\n    Parses the parameter value from input ``x``, handling defaults and is_list.\n\n    :param param_name: the name of the parameter. This is used for the message in\n                       ``MissingParameterException``.\n    :param x: the input value to parse.\n    :raises MissingParameterException: if x is false-y and no default is specified.\n    \"\"\"\n    if not x:\n        if self.has_value:\n            return self.value\n        elif self.is_bool:\n            return False\n        elif self.is_list:\n            return []\n        else:\n            raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" % (param_name, '--' + param_name.replace('_', '-')))\n    elif self.is_list:\n        return tuple((self.parse(p) for p in x))\n    else:\n        return self.parse(x)",
                            "def serialize_to_input(self, x):\n    if self.is_list:\n        return tuple((self.serialize(p) for p in x))\n    else:\n        return self.serialize(x)",
                            "def parser_dest(self, param_name, task_name, glob=False, is_without_section=False):\n    if self.is_global or is_without_section:\n        if glob:\n            return param_name\n        else:\n            return None\n    elif glob:\n        return task_name + '_' + param_name\n    else:\n        return param_name",
                            "def add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob, is_without_section=is_without_section)\n    if not dest:\n        return\n    flag = '--' + dest.replace('_', '-')\n    description = []\n    description.append('%s.%s' % (task_name, param_name))\n    if glob:\n        description.append('for all instances of class %s' % task_name)\n    elif self.description:\n        description.append(self.description)\n    if self.has_value:\n        description.append(' [default: %s]' % (self.value,))\n    if self.is_list:\n        action = 'append'\n    elif self.is_bool:\n        action = 'store_true'\n    else:\n        action = 'store'\n    if optparse:\n        f = parser.add_option\n    else:\n        f = parser.add_argument\n    f(flag, help=' '.join(description), action=action, dest=dest)",
                            "def parse_from_args(self, param_name, task_name, args, params):\n    dest = self.parser_dest(param_name, task_name, glob=False)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        params[param_name] = self.parse_from_input(param_name, value)",
                            "def set_global_from_args(self, param_name, task_name, args, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob=True, is_without_section=is_without_section)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        if value:\n            self.set_global(self.parse_from_input(param_name, value))\n        else:\n            self.reset_global()"
                        ],
                        "constructor_variables": [
                            "significant",
                            "is_global",
                            "is_bool",
                            "description",
                            "counter",
                            "__default",
                            "__global",
                            "is_list",
                            "__config"
                        ],
                        "class_level_variables": [
                            "counter"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None)",
                            "_get_value_from_config(self, section, name)",
                            "_get_value(self, task_name=None, param_name=None)",
                            "has_value(self)",
                            "value(self)",
                            "has_task_value(self, task_name, param_name)",
                            "task_value(self, task_name, param_name)",
                            "set_global(self, value)",
                            "reset_global(self)",
                            "parse(self, x)",
                            "serialize(self, x)",
                            "parse_from_input(self, param_name, x)",
                            "serialize_to_input(self, x)",
                            "parser_dest(self, param_name, task_name, glob=False, is_without_section=False)",
                            "add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False)",
                            "parse_from_args(self, param_name, task_name, args, params)",
                            "set_global_from_args(self, param_name, task_name, args, is_without_section=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "dest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser_dest": {
                                    "variable_value": "<bound method Parameter.parser_dest of <luigi.parameter.Parameter object at 0x1074d4b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x1074d4b50>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "is_without_section": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "Namespace(A_p=None, BananaDep_x=None, BananaDep_y=None, Banana_style=None, Banana_x=None, Banana_y=None, Bar_multibool=None, Baz_bool=False, Dummy2Task_p=None, DynamicDummyTask_p=None, DynamicRequiresOtherModule_p=None, DynamicRequires_p=None, DynamicRequires_use_banana_task=False, Foo_bar=None, Foo_multi=None, Foo_p2=None, ForgotParam_param=None, ForkBombTask_breadth=None, ForkBombTask_depth=None, ForkBombTask_p=None, HasGlobalParamDep_x=None, HasGlobalParam_x=None, HungWorker_worker_timeout=None, MyClass2_p_not_global_no_default=None, MyClass_p_not_global=None, MyConfig_mc_p=None, MyConfig_mc_q=None, RangeBase_now=None, RangeBase_of=None, RangeBase_reverse=False, RangeBase_start=None, RangeBase_stop=None, RangeBase_task_limit=None, RangeDailyBase_days_back=None, RangeDailyBase_days_forward=None, RangeDailyBase_start=None, RangeDailyBase_stop=None, RangeHourlyBase_hours_back=None, RangeHourlyBase_hours_forward=None, RangeHourlyBase_start=None, RangeHourlyBase_stop=None, SuicidalWorker_signal=None, WithDefault_x=None, assistant=False, command='MyClass2', global_bool_param=False, global_param=None, local_scheduler=True, lock_pid_dir=None, lock_size=None, logging_conf_file=None, mc_r=None, mc_s=None, module=None, no_lock=True, parallel_scheduling=False, scheduler_disable_failures=None, scheduler_disable_hard_timeout=None, scheduler_disable_persist=None, scheduler_disable_window=None, scheduler_host=None, scheduler_max_shown_tasks=None, scheduler_port=None, scheduler_prune_done_tasks=False, scheduler_record_task_history=False, scheduler_remove_delay=None, scheduler_retry_delay=None, scheduler_state_path=None, scheduler_visualization_graph=None, scheduler_worker_disconnect_delay=None, shared_global_param=None, worker_count_uniques=False, worker_keep_alive=False, worker_max_reschedules=None, worker_ping_interval=None, worker_task_limit=None, worker_timeout=None, worker_wait_interval=None, workers=None)",
                                    "variable_type": "Namespace",
                                    "variable_shape": null
                                },
                                "self.set_global": {
                                    "variable_value": "<bound method Parameter.set_global of <luigi.parameter.Parameter object at 0x1074d4b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.parse_from_input": {
                                    "variable_value": "<bound method Parameter.parse_from_input of <luigi.parameter.Parameter object at 0x1074d4b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.reset_global": {
                                    "variable_value": "<bound method Parameter.reset_global of <luigi.parameter.Parameter object at 0x1074d4b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "dest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser_dest": {
                                    "variable_value": "<bound method Parameter.parser_dest of <luigi.parameter.Parameter object at 0x10da58c40>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.parameter.Parameter object at 0x10da58c40>",
                                    "variable_type": "Parameter",
                                    "variable_shape": null
                                },
                                "param_name": {
                                    "variable_value": "'p_not_global_no_default'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "task_name": {
                                    "variable_value": "'MyClass2'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "is_without_section": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "Namespace(A_p=None, BananaDep_x=None, BananaDep_y=None, Banana_style=None, Banana_x=None, Banana_y=None, Bar_multibool=None, Baz_bool=False, Dummy2Task_p=None, DynamicDummyTask_p=None, DynamicRequiresOtherModule_p=None, DynamicRequires_p=None, DynamicRequires_use_banana_task=False, Foo_bar=None, Foo_multi=None, Foo_p2=None, ForgotParam_param=None, ForkBombTask_breadth=None, ForkBombTask_depth=None, ForkBombTask_p=None, HasGlobalParamDep_x=None, HasGlobalParam_x=None, HungWorker_worker_timeout=None, MyClass2_p_not_global_no_default='124', MyClass_p_not_global=None, MyConfig_mc_p=None, MyConfig_mc_q=None, RangeBase_now=None, RangeBase_of=None, RangeBase_reverse=False, RangeBase_start=None, RangeBase_stop=None, RangeBase_task_limit=None, RangeDailyBase_days_back=None, RangeDailyBase_days_forward=None, RangeDailyBase_start=None, RangeDailyBase_stop=None, RangeHourlyBase_hours_back=None, RangeHourlyBase_hours_forward=None, RangeHourlyBase_start=None, RangeHourlyBase_stop=None, SuicidalWorker_signal=None, WithDefault_x=None, assistant=False, command='MyClass2', global_bool_param=False, global_param=None, local_scheduler=True, lock_pid_dir=None, lock_size=None, logging_conf_file=None, mc_r=None, mc_s=None, module=None, no_lock=True, parallel_scheduling=False, scheduler_disable_failures=None, scheduler_disable_hard_timeout=None, scheduler_disable_persist=None, scheduler_disable_window=None, scheduler_host=None, scheduler_max_shown_tasks=None, scheduler_port=None, scheduler_prune_done_tasks=False, scheduler_record_task_history=False, scheduler_remove_delay=None, scheduler_retry_delay=None, scheduler_state_path=None, scheduler_visualization_graph=None, scheduler_worker_disconnect_delay=None, shared_global_param=None, worker_count_uniques=False, worker_keep_alive=False, worker_max_reschedules=None, worker_ping_interval=None, worker_task_limit=None, worker_timeout=None, worker_wait_interval=None, workers=None)",
                                    "variable_type": "Namespace",
                                    "variable_shape": null
                                },
                                "self.set_global": {
                                    "variable_value": "<bound method Parameter.set_global of <luigi.parameter.Parameter object at 0x10da58c40>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.parse_from_input": {
                                    "variable_value": "<bound method Parameter.parse_from_input of <luigi.parameter.Parameter object at 0x10da58c40>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.reset_global": {
                                    "variable_value": "<bound method Parameter.reset_global of <luigi.parameter.Parameter object at 0x10da58c40>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@deprecate_kwarg('is_boolean', 'is_bool', False)\ndef __init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None,\n             config_path=None):\n    \"\"\"\n    :param default: the default value for this parameter. This should match the type of the\n                    Parameter, i.e. ``datetime.date`` for ``DateParameter`` or ``int`` for\n                    ``IntParameter``. By default, no default is stored and\n                    the value must be specified at runtime.\n    :param bool is_list: specify ``True`` if the parameter should allow a list of values rather\n                         than a single value. Default: ``False``. A list has an implicit default\n                         value of ``[]``.\n    :param bool is_bool: specify ``True`` if the parameter is a bool value. Default:\n                            ``False``. Bool's have an implicit default value of ``False``.\n    :param bool is_global: specify ``True`` if the parameter is global (i.e. used by multiple\n                           Tasks). Default: ``False``. DEPRECATED.\n    :param bool significant: specify ``False`` if the parameter should not be treated as part of\n                             the unique identifier for a Task. An insignificant Parameter might\n                             also be used to specify a password or other sensitive information\n                             that should not be made public via the scheduler. Default:\n                             ``True``.\n    :param str description: A human-readable string describing the purpose of this Parameter.\n                            For command-line invocations, this will be used as the `help` string\n                            shown to users. Default: ``None``.\n    :param dict config_path: a dictionary with entries ``section`` and ``name``\n                             specifying a config file entry from which to read the\n                             default value for this parameter. DEPRECATED.\n                             Default: ``None``.\n    \"\"\"\n    # The default default is no default\n    self.__default = default\n    self.__global = _no_value\n\n    self.is_list = is_list\n    self.is_bool = is_boolean and not is_list  # Only BoolParameter should ever use this. TODO(erikbern): should we raise some kind of exception?\n    self.is_global = is_global  # It just means that the default value is exposed and you can override it\n    self.significant = significant  # Whether different values for this parameter will differentiate otherwise equal tasks\n\n    if is_global:\n        warnings.warn(\n            'is_global is deprecated and will be removed. Please use either '\n            ' (a) class level config (eg. --MyTask-my-param 42)'\n            ' (b) a separate Config class with global settings on it',\n            DeprecationWarning,\n            stacklevel=2)\n\n    if is_global and default == _no_value and config_path is None:\n        raise ParameterException('Global parameters need default values')\n\n    self.description = description\n\n    if config_path is not None and ('section' not in config_path or 'name' not in config_path):\n        raise ParameterException('config_path must be a hash containing entries for section and name')\n    self.__config = config_path\n\n    self.counter = Parameter.counter  # We need to keep track of this to get the order right (see Task class)\n    Parameter.counter += 1",
                "def _get_value_from_config(self, section, name):\n    \"\"\"Loads the default from the config. Returns _no_value if it doesn't exist\"\"\"\n\n    conf = configuration.get_config()\n\n    try:\n        value = conf.get(section, name)\n    except (NoSectionError, NoOptionError):\n        return _no_value\n\n    if self.is_list:\n        return tuple(self.parse(p.strip()) for p in value.strip().split('\\n'))\n    else:\n        return self.parse(value)",
                "def _get_value(self, task_name=None, param_name=None):\n    if self.__global != _no_value:\n        return self.__global\n    if task_name and param_name:\n        v = self._get_value_from_config(task_name, param_name)\n        if v != _no_value:\n            return v\n        v = self._get_value_from_config(task_name, param_name.replace('_', '-'))\n        if v != _no_value:\n            warnings.warn(\n                'The use of the configuration [%s] %s (with dashes) should be avoided. Please use underscores.' %\n                (task_name, param_name), DeprecationWarning, stacklevel=2)\n            return v\n    if self.__config:\n        v = self._get_value_from_config(self.__config['section'], self.__config['name'])\n        if v != _no_value and task_name and param_name:\n            warnings.warn(\n                'The use of the configuration [%s] %s is deprecated. Please use [%s] %s' %\n                (self.__config['section'], self.__config['name'], task_name, param_name),\n                DeprecationWarning, stacklevel=2)\n        if v != _no_value:\n            return v\n    if self.__default != _no_value:\n        return self.__default\n\n    return _no_value",
                "@property\ndef has_value(self):\n    \"\"\"\n    ``True`` if a default was specified or if config_path references a valid entry in the conf.\n\n    Note that \"value\" refers to the Parameter object itself - it can be either\n\n    1. The default value for this parameter\n    2. A value read from the config\n    3. A global value\n\n    Any Task instance can have its own value set that overrides this.\n    \"\"\"\n    return self._get_value() != _no_value",
                "@property\ndef value(self):\n    \"\"\"\n    The value for this Parameter.\n\n    This refers to any value defined by a default, a config option, or\n    a global value.\n\n    :raises MissingParameterException: if a value is not set.\n    :return: the parsed value.\n    \"\"\"\n    value = self._get_value()\n    if value == _no_value:\n        raise MissingParameterException(\"No default specified\")\n    else:\n        return value",
                "def has_task_value(self, task_name, param_name):\n    return self._get_value(task_name, param_name) != _no_value",
                "def task_value(self, task_name, param_name):\n    value = self._get_value(task_name, param_name)\n    if value == _no_value:\n        raise MissingParameterException(\"No default specified\")\n    else:\n        return value",
                "def set_global(self, value):\n    \"\"\"\n    Set the global value of this Parameter.\n\n    :param value: the new global value.\n    \"\"\"\n    self.__global = value",
                "def reset_global(self):\n    self.__global = _no_value",
                "def parse(self, x):\n    \"\"\"\n    Parse an individual value from the input.\n\n    The default implementation is an identify (it returns ``x``), but subclasses should override\n    this method for specialized parsing. This method is called by :py:meth:`parse_from_input`\n    if ``x`` exists. If this Parameter was specified with ``is_list=True``, then ``parse`` is\n    called once for each item in the list.\n\n    :param str x: the value to parse.\n    :return: the parsed value.\n    \"\"\"\n    return x  # default impl",
                "def serialize(self, x):  # opposite of parse\n    \"\"\"\n    Opposite of :py:meth:`parse`.\n\n    Converts the value ``x`` to a string.\n\n    :param x: the value to serialize.\n    \"\"\"\n    if self.is_list:\n        return [str(v) for v in x]\n    return str(x)",
                "def parse_from_input(self, param_name, x):\n    \"\"\"\n    Parses the parameter value from input ``x``, handling defaults and is_list.\n\n    :param param_name: the name of the parameter. This is used for the message in\n                       ``MissingParameterException``.\n    :param x: the input value to parse.\n    :raises MissingParameterException: if x is false-y and no default is specified.\n    \"\"\"\n    if not x:\n        if self.has_value:\n            return self.value\n        elif self.is_bool:\n            return False\n        elif self.is_list:\n            return []\n        else:\n            raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" %\n                                            (param_name, \"--\" + param_name.replace('_', '-')))\n    elif self.is_list:\n        return tuple(self.parse(p) for p in x)\n    else:\n        return self.parse(x)",
                "def serialize_to_input(self, x):\n    if self.is_list:\n        return tuple(self.serialize(p) for p in x)\n    else:\n        return self.serialize(x)",
                "def parser_dest(self, param_name, task_name, glob=False, is_without_section=False):\n    if self.is_global or is_without_section:\n        if glob:\n            return param_name\n        else:\n            return None\n    else:\n        if glob:\n            return task_name + '_' + param_name\n        else:\n            return param_name",
                "def add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False):\n    dest = self.parser_dest(param_name, task_name, glob, is_without_section=is_without_section)\n    if not dest:\n        return\n    flag = '--' + dest.replace('_', '-')\n\n    description = []\n    description.append('%s.%s' % (task_name, param_name))\n    if glob:\n        description.append('for all instances of class %s' % task_name)\n    elif self.description:\n        description.append(self.description)\n    if self.has_value:\n        description.append(\" [default: %s]\" % (self.value,))\n\n    if self.is_list:\n        action = \"append\"\n    elif self.is_bool:\n        action = \"store_true\"\n    else:\n        action = \"store\"\n    if optparse:\n        f = parser.add_option\n    else:\n        f = parser.add_argument\n    f(flag,\n      help=' '.join(description),\n      action=action,\n      dest=dest)",
                "def parse_from_args(self, param_name, task_name, args, params):\n    # Note: modifies arguments\n    dest = self.parser_dest(param_name, task_name, glob=False)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        params[param_name] = self.parse_from_input(param_name, value)",
                "def set_global_from_args(self, param_name, task_name, args, is_without_section=False):\n    # Note: side effects\n    dest = self.parser_dest(param_name, task_name, glob=True, is_without_section=is_without_section)\n    if dest is not None:\n        value = getattr(args, dest, None)\n        if value:\n            self.set_global(self.parse_from_input(param_name, value))\n        else:  # either False (bools) or None (everything else)\n            self.reset_global()",
                "def parse(self, s):\n    \"\"\"\n    Parses a string to a :py:class:`~datetime.datetime` using the format string ``%Y-%m-%dT%H``.\n    \"\"\"\n    # TODO(erikbern): we should probably use an internal class for arbitary\n    # time intervals (similar to date_interval). Or what do you think?\n    return datetime.datetime.strptime(s, self.date_format)",
                "def serialize(self, dt):\n    \"\"\"\n    Converts the datetime to a string usnig the format string ``%Y-%m-%dT%H``.\n    \"\"\"\n    if dt is None:\n        return str(dt)\n    return dt.strftime(self.date_format)",
                "def parse(self, s):\n    \"\"\"Parses a date string formatted as ``YYYY-MM-DD``.\"\"\"\n    return datetime.date(*map(int, s.split('-')))",
                "def parse(self, s):\n    \"\"\"\n    Parses an ``int`` from the string using ``int()``.\n    \"\"\"\n    return int(s)",
                "def parse(self, s):\n    \"\"\"\n    Parses a ``float`` from the string using ``float()``.\n    \"\"\"\n    return float(s)",
                "def __init__(self, *args, **kwargs):\n    \"\"\"\n    This constructor passes along args and kwargs to ctor for :py:class:`Parameter` but\n    specifies ``is_bool=True``.\n    \"\"\"\n    super(BoolParameter, self).__init__(*args, is_bool=True, **kwargs)",
                "def parse(self, s):\n    \"\"\"\n    Parses a ``bool`` from the string, matching 'true' or 'false' ignoring case.\n    \"\"\"\n    return {'true': True, 'false': False}[str(s).lower()]",
                "def __init__(self, *args, **kwargs):\n    warnings.warn(\n        'BooleanParameter is deprecated, use BoolParameter instead',\n        DeprecationWarning,\n        stacklevel=2\n    )\n    super(BooleanParameter, self).__init__(*args, **kwargs)",
                "def parse(self, s):\n    \"\"\"\n    Parses a `:py:class:`~luigi.date_interval.DateInterval` from the input.\n\n    see :py:mod:`luigi.date_interval`\n      for details on the parsing of DateIntervals.\n    \"\"\"\n    # TODO: can we use xml.utils.iso8601 or something similar?\n\n    from luigi import date_interval as d\n\n    for cls in [d.Year, d.Month, d.Week, d.Date, d.Custom]:\n        i = cls.parse(s)\n        if i:\n            return i\n    else:\n        raise ValueError('Invalid date interval - could not be parsed')",
                "def _apply_regex(self, regex, input):\n    from datetime import timedelta\n    import re\n    re_match = re.match(regex, input)\n    if re_match:\n        kwargs = {}\n        has_val = False\n        for k, v in six.iteritems(re_match.groupdict(default=\"0\")):\n            val = int(v)\n            has_val = has_val or val != 0\n            kwargs[k] = val\n        if has_val:\n            return timedelta(**kwargs)",
                "def _parseIso8601(self, input):\n    def field(key):\n        return \"(?P<%s>\\d+)%s\" % (key, key[0].upper())\n\n    def optional_field(key):\n        return \"(%s)?\" % field(key)\n    # A little loose: ISO 8601 does not allow weeks in combination with other fields, but this regex does (as does python timedelta)\n    regex = \"P(%s|%s(T%s)?)\" % (field(\"weeks\"), optional_field(\"days\"), \"\".join([optional_field(key) for key in [\"hours\", \"minutes\", \"seconds\"]]))\n    return self._apply_regex(regex, input)",
                "def _parseSimple(self, input):\n    keys = [\"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\"]\n    # Give the digits a regex group name from the keys, then look for text with the first letter of the key,\n    # optionally followed by the rest of the word, with final char (the \"s\") optional\n    regex = \"\".join([\"((?P<%s>\\d+) ?%s(%s)?(%s)? ?)?\" % (k, k[0], k[1:-1], k[-1]) for k in keys])\n    return self._apply_regex(regex, input)",
                "def parse(self, input):\n    \"\"\"\n    Parses a time delta from the input.\n\n    See :py:class:`TimeDeltaParameter` for details on supported formats.\n    \"\"\"\n    result = self._parseIso8601(input)\n    if not result:\n        result = self._parseSimple(input)\n    if result:\n        return result\n    else:\n        raise ParameterException(\"Invalid time delta - could not parse %s\" % input)",
                "def field(key):\n    return \"(?P<%s>\\d+)%s\" % (key, key[0].upper())",
                "def optional_field(key):\n    return \"(%s)?\" % field(key)"
            ],
            "inscope_function_signatures": [
                "__init__(self, default=_no_value, is_list=False, is_boolean=False, is_global=False, significant=True, description=None, config_path=None)",
                "_get_value_from_config(self, section, name)",
                "_get_value(self, task_name=None, param_name=None)",
                "has_value(self)",
                "value(self)",
                "has_task_value(self, task_name, param_name)",
                "task_value(self, task_name, param_name)",
                "set_global(self, value)",
                "reset_global(self)",
                "parse(self, x)",
                "serialize(self, x)",
                "parse_from_input(self, param_name, x)",
                "serialize_to_input(self, x)",
                "parser_dest(self, param_name, task_name, glob=False, is_without_section=False)",
                "add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False)",
                "parse_from_args(self, param_name, task_name, args, params)",
                "set_global_from_args(self, param_name, task_name, args, is_without_section=False)",
                "parse(self, s)",
                "serialize(self, dt)",
                "parse(self, s)",
                "parse(self, s)",
                "parse(self, s)",
                "__init__(self, *args, **kwargs)",
                "parse(self, s)",
                "__init__(self, *args, **kwargs)",
                "parse(self, s)",
                "_apply_regex(self, regex, input)",
                "_parseIso8601(self, input)",
                "_parseSimple(self, input)",
                "parse(self, input)",
                "field(key)",
                "optional_field(key)"
            ],
            "variables_in_file": {
                "ImportError": [
                    27
                ],
                "_no_value": [
                    35,
                    196,
                    134,
                    198,
                    230,
                    169,
                    105,
                    201,
                    236,
                    240,
                    177,
                    149,
                    181,
                    184,
                    216,
                    254,
                    191
                ],
                "object": [
                    73,
                    35
                ],
                "Exception": [
                    38
                ],
                "ParameterException": [
                    66,
                    155,
                    45,
                    563,
                    52,
                    150,
                    59
                ],
                "counter": [
                    101
                ],
                "self.__default": [
                    133,
                    198,
                    199
                ],
                "self": [
                    133,
                    134,
                    389,
                    136,
                    137,
                    138,
                    139,
                    397,
                    278,
                    152,
                    156,
                    158,
                    542,
                    292,
                    293,
                    294,
                    549,
                    296,
                    171,
                    172,
                    301,
                    174,
                    302,
                    304,
                    177,
                    178,
                    307,
                    180,
                    308,
                    310,
                    183,
                    559,
                    313,
                    189,
                    190,
                    194,
                    325,
                    198,
                    199,
                    459,
                    334,
                    335,
                    336,
                    337,
                    339,
                    341,
                    216,
                    476,
                    356,
                    229,
                    359,
                    363,
                    236,
                    239,
                    367,
                    369,
                    557,
                    251,
                    254
                ],
                "default": [
                    133,
                    149
                ],
                "self.__global": [
                    134,
                    177,
                    178,
                    251,
                    254
                ],
                "self.is_list": [
                    136,
                    296,
                    171,
                    301,
                    307,
                    339,
                    278
                ],
                "is_list": [
                    136,
                    137
                ],
                "self.is_bool": [
                    137,
                    341,
                    294
                ],
                "is_boolean": [
                    137
                ],
                "self.is_global": [
                    313,
                    138
                ],
                "is_global": [
                    138,
                    141,
                    149
                ],
                "self.significant": [
                    139
                ],
                "significant": [
                    139
                ],
                "warnings.warn": [
                    192,
                    185,
                    142,
                    471
                ],
                "warnings": [
                    192,
                    185,
                    142,
                    471
                ],
                "DeprecationWarning": [
                    473,
                    146,
                    187,
                    195
                ],
                "config_path": [
                    154,
                    156,
                    149
                ],
                "self.description": [
                    152,
                    334,
                    335
                ],
                "description": [
                    330,
                    331,
                    333,
                    335,
                    337,
                    152,
                    350
                ],
                "self.__config": [
                    194,
                    156,
                    189,
                    190
                ],
                "self.counter": [
                    158
                ],
                "Parameter.counter": [
                    158,
                    159
                ],
                "Parameter": [
                    449,
                    425,
                    479,
                    508,
                    372,
                    437,
                    412,
                    158,
                    159
                ],
                "deprecate_kwarg": [
                    104
                ],
                "conf": [
                    164,
                    167
                ],
                "configuration.get_config": [
                    164
                ],
                "configuration": [
                    164
                ],
                "value": [
                    229,
                    230,
                    167,
                    358,
                    233,
                    359,
                    172,
                    365,
                    174,
                    239,
                    240,
                    366,
                    367,
                    243,
                    251
                ],
                "conf.get": [
                    167
                ],
                "section": [
                    167
                ],
                "name": [
                    167
                ],
                "NoSectionError": [
                    168
                ],
                "NoOptionError": [
                    168
                ],
                "tuple": [
                    172,
                    302,
                    308
                ],
                "self.parse": [
                    302,
                    304,
                    172,
                    174
                ],
                "p.strip": [
                    172
                ],
                "p": [
                    172,
                    302,
                    308
                ],
                "split": [
                    172
                ],
                "value.strip": [
                    172
                ],
                "task_name": [
                    320,
                    194,
                    356,
                    325,
                    331,
                    236,
                    333,
                    363,
                    239,
                    179,
                    180,
                    183,
                    187,
                    191
                ],
                "param_name": [
                    320,
                    194,
                    322,
                    356,
                    325,
                    359,
                    331,
                    236,
                    300,
                    363,
                    239,
                    367,
                    315,
                    179,
                    180,
                    183,
                    187,
                    191
                ],
                "v": [
                    196,
                    197,
                    279,
                    527,
                    528,
                    180,
                    181,
                    182,
                    183,
                    184,
                    188,
                    190,
                    191
                ],
                "self._get_value_from_config": [
                    180,
                    190,
                    183
                ],
                "param_name.replace": [
                    300,
                    183
                ],
                "self._get_value": [
                    216,
                    236,
                    229,
                    239
                ],
                "property": [
                    218,
                    203
                ],
                "MissingParameterException": [
                    241,
                    299,
                    231
                ],
                "x": [
                    291,
                    268,
                    302,
                    304,
                    308,
                    310,
                    279,
                    280
                ],
                "str": [
                    280,
                    465,
                    396,
                    279
                ],
                "self.has_value": [
                    336,
                    292
                ],
                "self.value": [
                    337,
                    293
                ],
                "self.serialize": [
                    308,
                    310
                ],
                "is_without_section": [
                    313,
                    363,
                    325
                ],
                "glob": [
                    314,
                    332,
                    325,
                    319
                ],
                "dest": [
                    352,
                    356,
                    325,
                    326,
                    357,
                    328,
                    358,
                    363,
                    364,
                    365
                ],
                "self.parser_dest": [
                    363,
                    356,
                    325
                ],
                "flag": [
                    328,
                    349
                ],
                "dest.replace": [
                    328
                ],
                "description.append": [
                    337,
                    331,
                    333,
                    335
                ],
                "action": [
                    344,
                    340,
                    342,
                    351
                ],
                "optparse": [
                    345
                ],
                "f": [
                    346,
                    348,
                    349
                ],
                "parser.add_option": [
                    346
                ],
                "parser": [
                    346,
                    348
                ],
                "parser.add_argument": [
                    348
                ],
                "join": [
                    548,
                    541,
                    350
                ],
                "getattr": [
                    365,
                    358
                ],
                "args": [
                    459,
                    476,
                    365,
                    358
                ],
                "params": [
                    359
                ],
                "self.parse_from_input": [
                    367,
                    359
                ],
                "self.set_global": [
                    367
                ],
                "self.reset_global": [
                    369
                ],
                "date_format": [
                    409,
                    381
                ],
                "datetime.datetime.strptime": [
                    389
                ],
                "datetime.datetime": [
                    389
                ],
                "datetime": [
                    389,
                    422
                ],
                "s": [
                    389,
                    422,
                    465,
                    434,
                    501,
                    446
                ],
                "self.date_format": [
                    389,
                    397
                ],
                "dt": [
                    395,
                    396,
                    397
                ],
                "dt.strftime": [
                    397
                ],
                "DateHourParameter": [
                    400
                ],
                "datetime.date": [
                    422
                ],
                "map": [
                    422
                ],
                "int": [
                    528,
                    434,
                    422
                ],
                "s.split": [
                    422
                ],
                "float": [
                    446
                ],
                "__init__": [
                    459,
                    476
                ],
                "super": [
                    459,
                    476
                ],
                "BoolParameter": [
                    459,
                    468
                ],
                "kwargs": [
                    459,
                    525,
                    530,
                    532,
                    476
                ],
                "lower": [
                    465
                ],
                "BooleanParameter": [
                    476
                ],
                "cls": [
                    500,
                    501
                ],
                "d.Year": [
                    500
                ],
                "d": [
                    500
                ],
                "d.Month": [
                    500
                ],
                "d.Week": [
                    500
                ],
                "d.Date": [
                    500
                ],
                "d.Custom": [
                    500
                ],
                "i": [
                    501,
                    502,
                    503
                ],
                "cls.parse": [
                    501
                ],
                "ValueError": [
                    505
                ],
                "re_match": [
                    523,
                    524,
                    527
                ],
                "re.match": [
                    523
                ],
                "re": [
                    523
                ],
                "regex": [
                    548,
                    549,
                    523,
                    541,
                    542
                ],
                "input": [
                    549,
                    523,
                    557,
                    559,
                    563,
                    542
                ],
                "has_val": [
                    529,
                    531,
                    526
                ],
                "k": [
                    530,
                    548,
                    527
                ],
                "six.iteritems": [
                    527
                ],
                "six": [
                    527
                ],
                "re_match.groupdict": [
                    527
                ],
                "val": [
                    528,
                    529,
                    530
                ],
                "timedelta": [
                    532
                ],
                "key": [
                    536,
                    539,
                    541
                ],
                "upper": [
                    536
                ],
                "field": [
                    539,
                    541
                ],
                "optional_field": [
                    541
                ],
                "self._apply_regex": [
                    549,
                    542
                ],
                "keys": [
                    545,
                    548
                ],
                "result": [
                    557,
                    558,
                    559,
                    560,
                    561
                ],
                "self._parseIso8601": [
                    557
                ],
                "self._parseSimple": [
                    559
                ]
            },
            "filtered_variables_in_file": {
                "_no_value": [
                    35,
                    196,
                    134,
                    198,
                    230,
                    169,
                    105,
                    201,
                    236,
                    240,
                    177,
                    149,
                    181,
                    184,
                    216,
                    254,
                    191
                ],
                "ParameterException": [
                    66,
                    155,
                    45,
                    563,
                    52,
                    150,
                    59
                ],
                "counter": [
                    101
                ],
                "self.__default": [
                    133,
                    198,
                    199
                ],
                "self": [
                    133,
                    134,
                    389,
                    136,
                    137,
                    138,
                    139,
                    397,
                    278,
                    152,
                    156,
                    158,
                    542,
                    292,
                    293,
                    294,
                    549,
                    296,
                    171,
                    172,
                    301,
                    174,
                    302,
                    304,
                    177,
                    178,
                    307,
                    180,
                    308,
                    310,
                    183,
                    559,
                    313,
                    189,
                    190,
                    194,
                    325,
                    198,
                    199,
                    459,
                    334,
                    335,
                    336,
                    337,
                    339,
                    341,
                    216,
                    476,
                    356,
                    229,
                    359,
                    363,
                    236,
                    239,
                    367,
                    369,
                    557,
                    251,
                    254
                ],
                "default": [
                    133,
                    149
                ],
                "self.__global": [
                    134,
                    177,
                    178,
                    251,
                    254
                ],
                "self.is_list": [
                    136,
                    296,
                    171,
                    301,
                    307,
                    339,
                    278
                ],
                "is_list": [
                    136,
                    137
                ],
                "self.is_bool": [
                    137,
                    341,
                    294
                ],
                "is_boolean": [
                    137
                ],
                "self.is_global": [
                    313,
                    138
                ],
                "is_global": [
                    138,
                    141,
                    149
                ],
                "self.significant": [
                    139
                ],
                "significant": [
                    139
                ],
                "warnings.warn": [
                    192,
                    185,
                    142,
                    471
                ],
                "warnings": [
                    192,
                    185,
                    142,
                    471
                ],
                "config_path": [
                    154,
                    156,
                    149
                ],
                "self.description": [
                    152,
                    334,
                    335
                ],
                "description": [
                    330,
                    331,
                    333,
                    335,
                    337,
                    152,
                    350
                ],
                "self.__config": [
                    194,
                    156,
                    189,
                    190
                ],
                "self.counter": [
                    158
                ],
                "Parameter.counter": [
                    158,
                    159
                ],
                "Parameter": [
                    449,
                    425,
                    479,
                    508,
                    372,
                    437,
                    412,
                    158,
                    159
                ],
                "deprecate_kwarg": [
                    104
                ],
                "conf": [
                    164,
                    167
                ],
                "configuration.get_config": [
                    164
                ],
                "configuration": [
                    164
                ],
                "value": [
                    229,
                    230,
                    167,
                    358,
                    233,
                    359,
                    172,
                    365,
                    174,
                    239,
                    240,
                    366,
                    367,
                    243,
                    251
                ],
                "conf.get": [
                    167
                ],
                "section": [
                    167
                ],
                "name": [
                    167
                ],
                "NoSectionError": [
                    168
                ],
                "NoOptionError": [
                    168
                ],
                "self.parse": [
                    302,
                    304,
                    172,
                    174
                ],
                "p.strip": [
                    172
                ],
                "p": [
                    172,
                    302,
                    308
                ],
                "split": [
                    172
                ],
                "value.strip": [
                    172
                ],
                "task_name": [
                    320,
                    194,
                    356,
                    325,
                    331,
                    236,
                    333,
                    363,
                    239,
                    179,
                    180,
                    183,
                    187,
                    191
                ],
                "param_name": [
                    320,
                    194,
                    322,
                    356,
                    325,
                    359,
                    331,
                    236,
                    300,
                    363,
                    239,
                    367,
                    315,
                    179,
                    180,
                    183,
                    187,
                    191
                ],
                "v": [
                    196,
                    197,
                    279,
                    527,
                    528,
                    180,
                    181,
                    182,
                    183,
                    184,
                    188,
                    190,
                    191
                ],
                "self._get_value_from_config": [
                    180,
                    190,
                    183
                ],
                "param_name.replace": [
                    300,
                    183
                ],
                "self._get_value": [
                    216,
                    236,
                    229,
                    239
                ],
                "MissingParameterException": [
                    241,
                    299,
                    231
                ],
                "x": [
                    291,
                    268,
                    302,
                    304,
                    308,
                    310,
                    279,
                    280
                ],
                "self.has_value": [
                    336,
                    292
                ],
                "self.value": [
                    337,
                    293
                ],
                "self.serialize": [
                    308,
                    310
                ],
                "is_without_section": [
                    313,
                    363,
                    325
                ],
                "glob": [
                    314,
                    332,
                    325,
                    319
                ],
                "dest": [
                    352,
                    356,
                    325,
                    326,
                    357,
                    328,
                    358,
                    363,
                    364,
                    365
                ],
                "self.parser_dest": [
                    363,
                    356,
                    325
                ],
                "flag": [
                    328,
                    349
                ],
                "dest.replace": [
                    328
                ],
                "description.append": [
                    337,
                    331,
                    333,
                    335
                ],
                "action": [
                    344,
                    340,
                    342,
                    351
                ],
                "optparse": [
                    345
                ],
                "f": [
                    346,
                    348,
                    349
                ],
                "parser.add_option": [
                    346
                ],
                "parser": [
                    346,
                    348
                ],
                "parser.add_argument": [
                    348
                ],
                "join": [
                    548,
                    541,
                    350
                ],
                "args": [
                    459,
                    476,
                    365,
                    358
                ],
                "params": [
                    359
                ],
                "self.parse_from_input": [
                    367,
                    359
                ],
                "self.set_global": [
                    367
                ],
                "self.reset_global": [
                    369
                ],
                "date_format": [
                    409,
                    381
                ],
                "datetime.datetime.strptime": [
                    389
                ],
                "datetime.datetime": [
                    389
                ],
                "datetime": [
                    389,
                    422
                ],
                "s": [
                    389,
                    422,
                    465,
                    434,
                    501,
                    446
                ],
                "self.date_format": [
                    389,
                    397
                ],
                "dt": [
                    395,
                    396,
                    397
                ],
                "dt.strftime": [
                    397
                ],
                "DateHourParameter": [
                    400
                ],
                "datetime.date": [
                    422
                ],
                "s.split": [
                    422
                ],
                "__init__": [
                    459,
                    476
                ],
                "BoolParameter": [
                    459,
                    468
                ],
                "kwargs": [
                    459,
                    525,
                    530,
                    532,
                    476
                ],
                "lower": [
                    465
                ],
                "BooleanParameter": [
                    476
                ],
                "cls": [
                    500,
                    501
                ],
                "d.Year": [
                    500
                ],
                "d": [
                    500
                ],
                "d.Month": [
                    500
                ],
                "d.Week": [
                    500
                ],
                "d.Date": [
                    500
                ],
                "d.Custom": [
                    500
                ],
                "i": [
                    501,
                    502,
                    503
                ],
                "cls.parse": [
                    501
                ],
                "re_match": [
                    523,
                    524,
                    527
                ],
                "re.match": [
                    523
                ],
                "re": [
                    523
                ],
                "regex": [
                    548,
                    549,
                    523,
                    541,
                    542
                ],
                "has_val": [
                    529,
                    531,
                    526
                ],
                "k": [
                    530,
                    548,
                    527
                ],
                "six.iteritems": [
                    527
                ],
                "six": [
                    527
                ],
                "re_match.groupdict": [
                    527
                ],
                "val": [
                    528,
                    529,
                    530
                ],
                "timedelta": [
                    532
                ],
                "key": [
                    536,
                    539,
                    541
                ],
                "upper": [
                    536
                ],
                "field": [
                    539,
                    541
                ],
                "optional_field": [
                    541
                ],
                "self._apply_regex": [
                    549,
                    542
                ],
                "keys": [
                    545,
                    548
                ],
                "result": [
                    557,
                    558,
                    559,
                    560,
                    561
                ],
                "self._parseIso8601": [
                    557
                ],
                "self._parseSimple": [
                    559
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_27/test/parameter_test.py",
                "test_function": "testCommandLineWithDefault",
                "test_function_code": "    @with_config({\"MyClass\": {\"p_not_global\": \"123\"}})\n    def testCommandLineWithDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass(luigi.Task):\n            p_not_global = luigi.Parameter(default='banana')\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_and_check(['MyClass']))\n        self.assertFalse(self.run_and_check(['MyClass', '--p-not-global', '124']))\n        self.assertFalse(self.run_and_check(['MyClass', '--MyClass-p-not-global', '124']))",
                "test_error": "AssertionError: False is not true",
                "full_test_error": "self = <parameter_test.TestParamWithDefaultFromConfig testMethod=testCommandLineWithDefault>\n\n    @with_config({\"MyClass\": {\"p_not_global\": \"123\"}})\n    def testCommandLineWithDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass(luigi.Task):\n            p_not_global = luigi.Parameter(default='banana')\n    \n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n    \n            def run(self):\n                pass\n    \n>       self.assertTrue(self.run_and_check(['MyClass']))\nE       AssertionError: False is not true\n\ntest/parameter_test.py:680: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "with_config({'MyClass': {'p_not_global': '123'}})"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_27/test/parameter_test.py",
                "test_function": "testCommandLineNoDefault",
                "test_function_code": "    @with_config({\"MyClass2\": {\"p_not_global_no_default\": \"123\"}})\n    def testCommandLineNoDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass2(luigi.Task):\n            \"\"\" TODO: Make luigi clean it's register for tests. Hate this 2 dance. \"\"\"\n            p_not_global_no_default = luigi.Parameter()\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_and_check(['MyClass2']))\n        self.assertFalse(self.run_and_check(['MyClass2', '--p-not-global-no-default', '124']))\n        self.assertFalse(self.run_and_check(['MyClass2', '--MyClass2-p-not-global-no-default', '124']))",
                "test_error": "luigi.parameter.MissingParameterException: No value for 'p_not_global_no_default' (--p-not-global-no-default) submitted and no default value has been assigned.",
                "full_test_error": "self = <parameter_test.TestParamWithDefaultFromConfig testMethod=testCommandLineNoDefault>\n\n    @with_config({\"MyClass2\": {\"p_not_global_no_default\": \"123\"}})\n    def testCommandLineNoDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass2(luigi.Task):\n            \"\"\" TODO: Make luigi clean it's register for tests. Hate this 2 dance. \"\"\"\n            p_not_global_no_default = luigi.Parameter()\n    \n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n    \n            def run(self):\n                pass\n    \n>       self.assertTrue(self.run_and_check(['MyClass2']))\n\ntest/parameter_test.py:705: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/parameter_test.py:478: in run_and_check\n    run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\nluigi/interface.py:421: in run\n    tasks = interface.parse(cmdline_args, main_task_cls=main_task_cls)\nluigi/interface.py:302: in parse\n    return self.parse_task(cmdline_args, main_task_cls)\nluigi/interface.py:297: in parse_task\n    task_params = get_task_parameters(task_cls, args)\nluigi/interface.py:232: in get_task_parameters\n    param.parse_from_args(param_name, task_cls.task_family, args, params)\nluigi/parameter.py:359: in parse_from_args\n    params[param_name] = self.parse_from_input(param_name, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <luigi.parameter.Parameter object at 0x11068aeb0>\nparam_name = 'p_not_global_no_default', x = None\n\n    def parse_from_input(self, param_name, x):\n        \"\"\"\n        Parses the parameter value from input ``x``, handling defaults and is_list.\n    \n        :param param_name: the name of the parameter. This is used for the message in\n                           ``MissingParameterException``.\n        :param x: the input value to parse.\n        :raises MissingParameterException: if x is false-y and no default is specified.\n        \"\"\"\n        if not x:\n            if self.has_value:\n                return self.value\n            elif self.is_bool:\n                return False\n            elif self.is_list:\n                return []\n            else:\n>               raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" %\nE               luigi.parameter.MissingParameterException: No value for 'p_not_global_no_default' (--p-not-global-no-default) submitted and no default value has been assigned.\n\nluigi/parameter.py:299: MissingParameterException",
                "traceback": "test/parameter_test.py:478: in run_and_check\n    run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\nluigi/interface.py:421: in run\n    tasks = interface.parse(cmdline_args, main_task_cls=main_task_cls)\nluigi/interface.py:302: in parse\n    return self.parse_task(cmdline_args, main_task_cls)\nluigi/interface.py:297: in parse_task\n    task_params = get_task_parameters(task_cls, args)\nluigi/interface.py:232: in get_task_parameters\n    param.parse_from_args(param_name, task_cls.task_family, args, params)\nluigi/parameter.py:359: in parse_from_args\n    params[param_name] = self.parse_from_input(param_name, value)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <luigi.parameter.Parameter object at 0x11068aeb0>\nparam_name = 'p_not_global_no_default', x = None\n\n    def parse_from_input(self, param_name, x):\n        \"\"\"\n        Parses the parameter value from input ``x``, handling defaults and is_list.\n    \n        :param param_name: the name of the parameter. This is used for the message in\n                           ``MissingParameterException``.\n        :param x: the input value to parse.\n        :raises MissingParameterException: if x is false-y and no default is specified.\n        \"\"\"\n        if not x:\n            if self.has_value:\n                return self.value\n            elif self.is_bool:\n                return False\n            elif self.is_list:\n                return []\n            else:\n>               raise MissingParameterException(\"No value for '%s' (%s) submitted and no default value has been assigned.\" %\nE               luigi.parameter.MissingParameterException: No value for 'p_not_global_no_default' (--p-not-global-no-default) submitted and no default value has been assigned.\n\nluigi/parameter.py:299: MissingParameterException",
                "test_function_decorators": [
                    "with_config({'MyClass2': {'p_not_global_no_default': '123'}})"
                ]
            }
        ]
    }
}