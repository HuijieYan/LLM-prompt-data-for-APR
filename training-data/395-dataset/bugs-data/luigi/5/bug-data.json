{
    "luigi:5": {
        "/Volumes/SSD2T/bgp_envs/repos/luigi_5/luigi/util.py": {
            "buggy_functions": [
                {
                    "function_name": "__call__",
                    "function_code": "def __call__(self, task_that_inherits):\n    for param_name, param_obj in self.task_to_inherit.get_params():\n        if not hasattr(task_that_inherits, param_name):\n            setattr(task_that_inherits, param_name, param_obj)\n\n    # Modify task_that_inherits by subclassing it and adding methods\n    @task._task_wraps(task_that_inherits)\n    class Wrapped(task_that_inherits):\n\n        def clone_parent(_self, **args):\n            return _self.clone(cls=self.task_to_inherit, **args)\n\n    return Wrapped\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 276,
                    "end_line": 288,
                    "variables": {
                        "param_name": [
                            277,
                            278,
                            279
                        ],
                        "param_obj": [
                            277,
                            279
                        ],
                        "self.task_to_inherit.get_params": [
                            277
                        ],
                        "self.task_to_inherit": [
                            277,
                            286
                        ],
                        "self": [
                            277,
                            286
                        ],
                        "hasattr": [
                            278
                        ],
                        "task_that_inherits": [
                            282,
                            283,
                            278,
                            279
                        ],
                        "setattr": [
                            279
                        ],
                        "_self.clone": [
                            286
                        ],
                        "_self": [
                            286
                        ],
                        "args": [
                            286
                        ],
                        "task._task_wraps": [
                            282
                        ],
                        "task": [
                            282
                        ],
                        "Wrapped": [
                            288
                        ]
                    },
                    "filtered_variables": {
                        "param_name": [
                            277,
                            278,
                            279
                        ],
                        "param_obj": [
                            277,
                            279
                        ],
                        "self.task_to_inherit.get_params": [
                            277
                        ],
                        "self.task_to_inherit": [
                            277,
                            286
                        ],
                        "self": [
                            277,
                            286
                        ],
                        "task_that_inherits": [
                            282,
                            283,
                            278,
                            279
                        ],
                        "_self.clone": [
                            286
                        ],
                        "_self": [
                            286
                        ],
                        "args": [
                            286
                        ],
                        "task._task_wraps": [
                            282
                        ],
                        "task": [
                            282
                        ],
                        "Wrapped": [
                            288
                        ]
                    },
                    "diff_line_number": 276,
                    "class_data": {
                        "signature": "class inherits(object)",
                        "docstring": "Task inheritance.\n\nUsage:\n\n.. code-block:: python\n\n    class AnotherTask(luigi.Task):\n        n = luigi.IntParameter()\n        # ...\n\n    @inherits(AnotherTask):\n    class MyTask(luigi.Task):\n        def requires(self):\n           return self.clone_parent()\n\n        def run(self):\n           print self.n # this will be defined\n           # ...",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, task_to_inherit):\n    super(inherits, self).__init__()\n    self.task_to_inherit = task_to_inherit",
                            "def __call__(self, task_that_inherits):\n    for param_name, param_obj in self.task_to_inherit.get_params():\n        if not hasattr(task_that_inherits, param_name):\n            setattr(task_that_inherits, param_name, param_obj)\n\n    @task._task_wraps(task_that_inherits)\n    class Wrapped(task_that_inherits):\n\n        def clone_parent(_self, **args):\n            return _self.clone(cls=self.task_to_inherit, **args)\n    return Wrapped",
                            "def clone_parent(_self, **args):\n    return _self.clone(cls=self.task_to_inherit, **args)"
                        ],
                        "constructor_variables": [
                            "task_to_inherit"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, task_to_inherit)",
                            "__call__(self, task_that_inherits)",
                            "clone_parent(_self, **args)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.InheritedTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x1049e18e0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task._task_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.InheritedTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x1049e18e0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task._task_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Wrapped": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.RequiredTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x1049e1430>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task._task_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.RequiredTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x1049e1430>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task._task_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Wrapped": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.InheritedTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x10a5a1ca0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_that_inherits.clone_parent": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "clone_parent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.InheritedTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x10a5a1ca0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_that_inherits.clone_parent": {
                                    "variable_value": "<function inherits.__call__.<locals>.clone_parent at 0x10a76f790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "clone_parent": {
                                    "variable_value": "<function inherits.__call__.<locals>.clone_parent at 0x10a76f790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.RequiredTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x10a5c91f0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_that_inherits.clone_parent": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "clone_parent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "param_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit.get_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.task_to_inherit": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.RequiredTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.inherits object at 0x10a5c91f0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "task_that_inherits": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "_self.clone": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_that_inherits.clone_parent": {
                                    "variable_value": "<function inherits.__call__.<locals>.clone_parent at 0x10a76ff70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "clone_parent": {
                                    "variable_value": "<function inherits.__call__.<locals>.clone_parent at 0x10a76ff70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "task_that_requires": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self.inherit_decorator": {
                                    "variable_value": "<luigi.util.inherits object at 0x1097d3910>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.requires object at 0x1097d39a0>",
                                    "variable_type": "requires",
                                    "variable_shape": null
                                },
                                "_self.clone_parent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_that_requires.requires": {
                                    "variable_value": "<function Task.requires at 0x109846040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "requires": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "task_that_requires": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self.inherit_decorator": {
                                    "variable_value": "<luigi.util.inherits object at 0x1097d3910>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.requires object at 0x1097d39a0>",
                                    "variable_type": "requires",
                                    "variable_shape": null
                                },
                                "_self.clone_parent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_that_requires.requires": {
                                    "variable_value": "<function requires.__call__.<locals>.requires at 0x109d9d8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "requires": {
                                    "variable_value": "<function requires.__call__.<locals>.requires at 0x109d9d8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "__call__",
                    "function_code": "def __call__(self, task_that_requires):\n    task_that_requires = self.inherit_decorator(task_that_requires)\n\n    # Modify task_that_requres by subclassing it and adding methods\n    @task._task_wraps(task_that_requires)\n    class Wrapped(task_that_requires):\n\n        def requires(_self):\n            return _self.clone_parent()\n\n    return Wrapped\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 300,
                    "end_line": 310,
                    "variables": {
                        "task_that_requires": [
                            304,
                            305,
                            301
                        ],
                        "self.inherit_decorator": [
                            301
                        ],
                        "self": [
                            301
                        ],
                        "_self.clone_parent": [
                            308
                        ],
                        "_self": [
                            308
                        ],
                        "task._task_wraps": [
                            304
                        ],
                        "task": [
                            304
                        ],
                        "Wrapped": [
                            310
                        ]
                    },
                    "filtered_variables": {
                        "task_that_requires": [
                            304,
                            305,
                            301
                        ],
                        "self.inherit_decorator": [
                            301
                        ],
                        "self": [
                            301
                        ],
                        "_self.clone_parent": [
                            308
                        ],
                        "_self": [
                            308
                        ],
                        "task._task_wraps": [
                            304
                        ],
                        "task": [
                            304
                        ],
                        "Wrapped": [
                            310
                        ]
                    },
                    "diff_line_number": 303,
                    "class_data": {
                        "signature": "class requires(object)",
                        "docstring": "Same as @inherits, but also auto-defines the requires method.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, task_to_require):\n    super(requires, self).__init__()\n    self.inherit_decorator = inherits(task_to_require)",
                            "def __call__(self, task_that_requires):\n    task_that_requires = self.inherit_decorator(task_that_requires)\n\n    @task._task_wraps(task_that_requires)\n    class Wrapped(task_that_requires):\n\n        def requires(_self):\n            return _self.clone_parent()\n    return Wrapped",
                            "def requires(_self):\n    return _self.clone_parent()"
                        ],
                        "constructor_variables": [
                            "inherit_decorator"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, task_to_require)",
                            "__call__(self, task_that_requires)",
                            "requires(_self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "task_that_requires": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self.inherit_decorator": {
                                    "variable_value": "<luigi.util.inherits object at 0x1051777c0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.requires object at 0x105177430>",
                                    "variable_type": "requires",
                                    "variable_shape": null
                                },
                                "_self.clone_parent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task._task_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "task_that_requires": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "self.inherit_decorator": {
                                    "variable_value": "<luigi.util.inherits object at 0x1051777c0>",
                                    "variable_type": "inherits",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.util.requires object at 0x105177430>",
                                    "variable_type": "requires",
                                    "variable_shape": null
                                },
                                "_self.clone_parent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task._task_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Wrapped": {
                                    "variable_value": "<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def common_params(task_instance, task_cls):\n    \"\"\"\n    Grab all the values in task_instance that are found in task_cls.\n    \"\"\"\n    if not isinstance(task_cls, task.Register):\n        raise TypeError(\"task_cls must be an uninstantiated Task\")\n\n    task_instance_param_names = dict(task_instance.get_params()).keys()\n    task_cls_params_dict = dict(task_cls.get_params())\n    task_cls_param_names = task_cls_params_dict.keys()\n    common_param_names = set(task_instance_param_names).intersection(set(task_cls_param_names))\n    common_param_vals = [(key, task_cls_params_dict[key]) for key in common_param_names]\n    common_kwargs = dict((key, task_instance.param_kwargs[key]) for key in common_param_names)\n    vals = dict(task_instance.get_param_values(common_param_vals, [], common_kwargs))\n    return vals",
                "def delegates(task_that_delegates):\n    \"\"\" Lets a task call methods on subtask(s).\n\n    The way this works is that the subtask is run as a part of the task, but\n    the task itself doesn't have to care about the requirements of the subtasks.\n    The subtask doesn't exist from the scheduler's point of view, and\n    its dependencies are instead required by the main task.\n\n    Example:\n\n    .. code-block:: python\n\n        class PowersOfN(luigi.Task):\n            n = luigi.IntParameter()\n            def f(self, x): return x ** self.n\n\n        @delegates\n        class T(luigi.Task):\n            def subtasks(self): return PowersOfN(5)\n            def run(self): print self.subtasks().f(42)\n    \"\"\"\n    if not hasattr(task_that_delegates, 'subtasks'):\n        # This method can (optionally) define a couple of delegate tasks that\n        # will be accessible as interfaces, meaning that the task can access\n        # those tasks and run methods defined on them, etc\n        raise AttributeError('%s needs to implement the method \"subtasks\"' % task_that_delegates)\n\n    @task._task_wraps(task_that_delegates)\n    class Wrapped(task_that_delegates):\n\n        def deps(self):\n            # Overrides method in base class\n            return task.flatten(self.requires()) + task.flatten([t.deps() for t in task.flatten(self.subtasks())])\n\n        def run(self):\n            for t in task.flatten(self.subtasks()):\n                t.run()\n            task_that_delegates.run(self)\n\n    return Wrapped",
                "def previous(task):\n    \"\"\"\n    Return a previous Task of the same family.\n\n    By default checks if this task family only has one non-global parameter and if\n    it is a DateParameter, DateHourParameter or DateIntervalParameter in which case\n    it returns with the time decremented by 1 (hour, day or interval)\n    \"\"\"\n    params = task.get_params()\n    previous_params = {}\n    previous_date_params = {}\n\n    for param_name, param_obj in params:\n        param_value = getattr(task, param_name)\n\n        if isinstance(param_obj, parameter.DateParameter):\n            previous_date_params[param_name] = param_value - datetime.timedelta(days=1)\n        elif isinstance(param_obj, parameter.DateSecondParameter):\n            previous_date_params[param_name] = param_value - datetime.timedelta(seconds=1)\n        elif isinstance(param_obj, parameter.DateMinuteParameter):\n            previous_date_params[param_name] = param_value - datetime.timedelta(minutes=1)\n        elif isinstance(param_obj, parameter.DateHourParameter):\n            previous_date_params[param_name] = param_value - datetime.timedelta(hours=1)\n        elif isinstance(param_obj, parameter.DateIntervalParameter):\n            previous_date_params[param_name] = param_value.prev()\n        else:\n            previous_params[param_name] = param_value\n\n    previous_params.update(previous_date_params)\n\n    if len(previous_date_params) == 0:\n        raise NotImplementedError(\"No task parameter - can't determine previous task\")\n    elif len(previous_date_params) > 1:\n        raise NotImplementedError(\"Too many date-related task parameters - can't determine previous task\")\n    else:\n        return task.clone(**previous_params)",
                "def get_previous_completed(task, max_steps=10):\n    prev = task\n    for _ in xrange(max_steps):\n        prev = previous(prev)\n        logger.debug(\"Checking if %s is complete\", prev)\n        if prev.complete():\n            return prev\n    return None",
                "def __init__(self, task_to_inherit):\n    super(inherits, self).__init__()\n    self.task_to_inherit = task_to_inherit",
                "def __call__(self, task_that_inherits):\n    for param_name, param_obj in self.task_to_inherit.get_params():\n        if not hasattr(task_that_inherits, param_name):\n            setattr(task_that_inherits, param_name, param_obj)\n\n    # Modify task_that_inherits by subclassing it and adding methods\n    @task._task_wraps(task_that_inherits)\n    class Wrapped(task_that_inherits):\n\n        def clone_parent(_self, **args):\n            return _self.clone(cls=self.task_to_inherit, **args)\n\n    return Wrapped",
                "def __init__(self, task_to_require):\n    super(requires, self).__init__()\n    self.inherit_decorator = inherits(task_to_require)",
                "def __call__(self, task_that_requires):\n    task_that_requires = self.inherit_decorator(task_that_requires)\n\n    # Modify task_that_requres by subclassing it and adding methods\n    @task._task_wraps(task_that_requires)\n    class Wrapped(task_that_requires):\n\n        def requires(_self):\n            return _self.clone_parent()\n\n    return Wrapped",
                "def __init__(self, task_to_copy):\n    super(copies, self).__init__()\n    self.requires_decorator = requires(task_to_copy)",
                "def __call__(self, task_that_copies):\n    task_that_copies = self.requires_decorator(task_that_copies)\n\n    # Modify task_that_copies by subclassing it and adding methods\n    @task._task_wraps(task_that_copies)\n    class Wrapped(task_that_copies):\n\n        def run(_self):\n            i, o = _self.input(), _self.output()\n            f = o.open('w')  # TODO: assert that i, o are Target objects and not complex datastructures\n            for line in i.open('r'):\n                f.write(line)\n            f.close()\n\n    return Wrapped",
                "def deps(self):\n    # Overrides method in base class\n    return task.flatten(self.requires()) + task.flatten([t.deps() for t in task.flatten(self.subtasks())])",
                "def run(self):\n    for t in task.flatten(self.subtasks()):\n        t.run()\n    task_that_delegates.run(self)",
                "def clone_parent(_self, **args):\n    return _self.clone(cls=self.task_to_inherit, **args)",
                "def requires(_self):\n    return _self.clone_parent()",
                "def run(_self):\n    i, o = _self.input(), _self.output()\n    f = o.open('w')  # TODO: assert that i, o are Target objects and not complex datastructures\n    for line in i.open('r'):\n        f.write(line)\n    f.close()"
            ],
            "inscope_function_signatures": [
                "common_params(task_instance, task_cls)",
                "delegates(task_that_delegates)",
                "previous(task)",
                "get_previous_completed(task, max_steps=10)",
                "__init__(self, task_to_inherit)",
                "__call__(self, task_that_inherits)",
                "__init__(self, task_to_require)",
                "__call__(self, task_that_requires)",
                "__init__(self, task_to_copy)",
                "__call__(self, task_that_copies)",
                "deps(self)",
                "run(self)",
                "clone_parent(_self, **args)",
                "requires(_self)",
                "run(_self)"
            ],
            "variables_in_file": {
                "six.PY3": [
                    227
                ],
                "six": [
                    227
                ],
                "xrange": [
                    228,
                    430
                ],
                "range": [
                    228
                ],
                "logger": [
                    432,
                    230
                ],
                "logging.getLogger": [
                    230
                ],
                "logging": [
                    230
                ],
                "isinstance": [
                    237,
                    405,
                    407,
                    409,
                    411,
                    413
                ],
                "task_cls": [
                    241,
                    237
                ],
                "task.Register": [
                    237
                ],
                "task": [
                    425,
                    237,
                    398,
                    335,
                    304,
                    429,
                    403,
                    375,
                    282,
                    380,
                    383
                ],
                "TypeError": [
                    238
                ],
                "task_instance_param_names": [
                    240,
                    243
                ],
                "keys": [
                    240
                ],
                "dict": [
                    240,
                    241,
                    245,
                    246
                ],
                "task_instance.get_params": [
                    240
                ],
                "task_instance": [
                    240,
                    245,
                    246
                ],
                "task_cls_params_dict": [
                    241,
                    242,
                    244
                ],
                "task_cls.get_params": [
                    241
                ],
                "task_cls_param_names": [
                    242,
                    243
                ],
                "task_cls_params_dict.keys": [
                    242
                ],
                "common_param_names": [
                    243,
                    244,
                    245
                ],
                "intersection": [
                    243
                ],
                "set": [
                    243
                ],
                "common_param_vals": [
                    244,
                    246
                ],
                "key": [
                    244,
                    245
                ],
                "common_kwargs": [
                    245,
                    246
                ],
                "task_instance.param_kwargs": [
                    245
                ],
                "vals": [
                    246,
                    247
                ],
                "task_instance.get_param_values": [
                    246
                ],
                "object": [
                    313,
                    250,
                    291
                ],
                "__init__": [
                    328,
                    273,
                    297
                ],
                "super": [
                    328,
                    273,
                    297
                ],
                "inherits": [
                    273,
                    298
                ],
                "self": [
                    385,
                    328,
                    297,
                    298,
                    329,
                    332,
                    301,
                    273,
                    274,
                    277,
                    380,
                    286,
                    383
                ],
                "self.task_to_inherit": [
                    274,
                    277,
                    286
                ],
                "task_to_inherit": [
                    274
                ],
                "param_name": [
                    416,
                    408,
                    402,
                    403,
                    277,
                    278,
                    279,
                    406,
                    410,
                    412,
                    414
                ],
                "param_obj": [
                    402,
                    277,
                    405,
                    407,
                    409,
                    411,
                    279,
                    413
                ],
                "self.task_to_inherit.get_params": [
                    277
                ],
                "hasattr": [
                    369,
                    278
                ],
                "task_that_inherits": [
                    282,
                    283,
                    278,
                    279
                ],
                "setattr": [
                    279
                ],
                "_self.clone": [
                    286
                ],
                "_self": [
                    339,
                    308,
                    286
                ],
                "args": [
                    286
                ],
                "task._task_wraps": [
                    304,
                    282,
                    375,
                    335
                ],
                "Wrapped": [
                    288,
                    345,
                    387,
                    310
                ],
                "requires": [
                    329,
                    297
                ],
                "self.inherit_decorator": [
                    298,
                    301
                ],
                "task_to_require": [
                    298
                ],
                "task_that_requires": [
                    304,
                    305,
                    301
                ],
                "_self.clone_parent": [
                    308
                ],
                "copies": [
                    328
                ],
                "self.requires_decorator": [
                    329,
                    332
                ],
                "task_to_copy": [
                    329
                ],
                "task_that_copies": [
                    336,
                    332,
                    335
                ],
                "i": [
                    339,
                    341
                ],
                "o": [
                    339,
                    340
                ],
                "_self.input": [
                    339
                ],
                "_self.output": [
                    339
                ],
                "f": [
                    340,
                    342,
                    343
                ],
                "o.open": [
                    340
                ],
                "line": [
                    341,
                    342
                ],
                "i.open": [
                    341
                ],
                "f.write": [
                    342
                ],
                "f.close": [
                    343
                ],
                "task_that_delegates": [
                    385,
                    369,
                    373,
                    375,
                    376
                ],
                "AttributeError": [
                    373
                ],
                "task.flatten": [
                    380,
                    383
                ],
                "self.requires": [
                    380
                ],
                "t.deps": [
                    380
                ],
                "t": [
                    384,
                    380,
                    383
                ],
                "self.subtasks": [
                    380,
                    383
                ],
                "t.run": [
                    384
                ],
                "task_that_delegates.run": [
                    385
                ],
                "params": [
                    402,
                    398
                ],
                "task.get_params": [
                    398
                ],
                "previous_params": [
                    416,
                    425,
                    418,
                    399
                ],
                "previous_date_params": [
                    418,
                    420,
                    422,
                    400,
                    406,
                    408,
                    410,
                    412,
                    414
                ],
                "param_value": [
                    416,
                    403,
                    406,
                    408,
                    410,
                    412,
                    414
                ],
                "getattr": [
                    403
                ],
                "parameter.DateParameter": [
                    405
                ],
                "parameter": [
                    405,
                    407,
                    409,
                    411,
                    413
                ],
                "datetime.timedelta": [
                    408,
                    410,
                    412,
                    406
                ],
                "datetime": [
                    408,
                    410,
                    412,
                    406
                ],
                "parameter.DateSecondParameter": [
                    407
                ],
                "parameter.DateMinuteParameter": [
                    409
                ],
                "parameter.DateHourParameter": [
                    411
                ],
                "parameter.DateIntervalParameter": [
                    413
                ],
                "param_value.prev": [
                    414
                ],
                "previous_params.update": [
                    418
                ],
                "len": [
                    420,
                    422
                ],
                "NotImplementedError": [
                    421,
                    423
                ],
                "task.clone": [
                    425
                ],
                "prev": [
                    429,
                    431,
                    432,
                    433,
                    434
                ],
                "_": [
                    430
                ],
                "max_steps": [
                    430
                ],
                "previous": [
                    431
                ],
                "logger.debug": [
                    432
                ],
                "prev.complete": [
                    433
                ]
            },
            "filtered_variables_in_file": {
                "six.PY3": [
                    227
                ],
                "six": [
                    227
                ],
                "xrange": [
                    228,
                    430
                ],
                "logger": [
                    432,
                    230
                ],
                "logging.getLogger": [
                    230
                ],
                "logging": [
                    230
                ],
                "task_cls": [
                    241,
                    237
                ],
                "task.Register": [
                    237
                ],
                "task": [
                    425,
                    237,
                    398,
                    335,
                    304,
                    429,
                    403,
                    375,
                    282,
                    380,
                    383
                ],
                "task_instance_param_names": [
                    240,
                    243
                ],
                "keys": [
                    240
                ],
                "task_instance.get_params": [
                    240
                ],
                "task_instance": [
                    240,
                    245,
                    246
                ],
                "task_cls_params_dict": [
                    241,
                    242,
                    244
                ],
                "task_cls.get_params": [
                    241
                ],
                "task_cls_param_names": [
                    242,
                    243
                ],
                "task_cls_params_dict.keys": [
                    242
                ],
                "common_param_names": [
                    243,
                    244,
                    245
                ],
                "intersection": [
                    243
                ],
                "common_param_vals": [
                    244,
                    246
                ],
                "key": [
                    244,
                    245
                ],
                "common_kwargs": [
                    245,
                    246
                ],
                "task_instance.param_kwargs": [
                    245
                ],
                "vals": [
                    246,
                    247
                ],
                "task_instance.get_param_values": [
                    246
                ],
                "__init__": [
                    328,
                    273,
                    297
                ],
                "inherits": [
                    273,
                    298
                ],
                "self": [
                    385,
                    328,
                    297,
                    298,
                    329,
                    332,
                    301,
                    273,
                    274,
                    277,
                    380,
                    286,
                    383
                ],
                "self.task_to_inherit": [
                    274,
                    277,
                    286
                ],
                "task_to_inherit": [
                    274
                ],
                "param_name": [
                    416,
                    408,
                    402,
                    403,
                    277,
                    278,
                    279,
                    406,
                    410,
                    412,
                    414
                ],
                "param_obj": [
                    402,
                    277,
                    405,
                    407,
                    409,
                    411,
                    279,
                    413
                ],
                "self.task_to_inherit.get_params": [
                    277
                ],
                "task_that_inherits": [
                    282,
                    283,
                    278,
                    279
                ],
                "_self.clone": [
                    286
                ],
                "_self": [
                    339,
                    308,
                    286
                ],
                "args": [
                    286
                ],
                "task._task_wraps": [
                    304,
                    282,
                    375,
                    335
                ],
                "Wrapped": [
                    288,
                    345,
                    387,
                    310
                ],
                "requires": [
                    329,
                    297
                ],
                "self.inherit_decorator": [
                    298,
                    301
                ],
                "task_to_require": [
                    298
                ],
                "task_that_requires": [
                    304,
                    305,
                    301
                ],
                "_self.clone_parent": [
                    308
                ],
                "copies": [
                    328
                ],
                "self.requires_decorator": [
                    329,
                    332
                ],
                "task_to_copy": [
                    329
                ],
                "task_that_copies": [
                    336,
                    332,
                    335
                ],
                "i": [
                    339,
                    341
                ],
                "o": [
                    339,
                    340
                ],
                "_self.input": [
                    339
                ],
                "_self.output": [
                    339
                ],
                "f": [
                    340,
                    342,
                    343
                ],
                "o.open": [
                    340
                ],
                "line": [
                    341,
                    342
                ],
                "i.open": [
                    341
                ],
                "f.write": [
                    342
                ],
                "f.close": [
                    343
                ],
                "task_that_delegates": [
                    385,
                    369,
                    373,
                    375,
                    376
                ],
                "task.flatten": [
                    380,
                    383
                ],
                "self.requires": [
                    380
                ],
                "t.deps": [
                    380
                ],
                "t": [
                    384,
                    380,
                    383
                ],
                "self.subtasks": [
                    380,
                    383
                ],
                "t.run": [
                    384
                ],
                "task_that_delegates.run": [
                    385
                ],
                "params": [
                    402,
                    398
                ],
                "task.get_params": [
                    398
                ],
                "previous_params": [
                    416,
                    425,
                    418,
                    399
                ],
                "previous_date_params": [
                    418,
                    420,
                    422,
                    400,
                    406,
                    408,
                    410,
                    412,
                    414
                ],
                "param_value": [
                    416,
                    403,
                    406,
                    408,
                    410,
                    412,
                    414
                ],
                "parameter.DateParameter": [
                    405
                ],
                "parameter": [
                    405,
                    407,
                    409,
                    411,
                    413
                ],
                "datetime.timedelta": [
                    408,
                    410,
                    412,
                    406
                ],
                "datetime": [
                    408,
                    410,
                    412,
                    406
                ],
                "parameter.DateSecondParameter": [
                    407
                ],
                "parameter.DateMinuteParameter": [
                    409
                ],
                "parameter.DateHourParameter": [
                    411
                ],
                "parameter.DateIntervalParameter": [
                    413
                ],
                "param_value.prev": [
                    414
                ],
                "previous_params.update": [
                    418
                ],
                "task.clone": [
                    425
                ],
                "prev": [
                    429,
                    431,
                    432,
                    433,
                    434
                ],
                "_": [
                    430
                ],
                "max_steps": [
                    430
                ],
                "previous": [
                    431
                ],
                "logger.debug": [
                    432
                ],
                "prev.complete": [
                    433
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/luigi_5/test/util_test.py",
                "test_function": "test_inherits_has_effect_MRO",
                "test_function_code": "    def test_inherits_has_effect_MRO(self):\n        ChildTask = self._setup_inherits_inheritence()\n        self.assertNotEqual(str(ChildTask.__mro__[0]),\n                            str(ChildTask.__mro__[1]))",
                "test_error": "AssertionError: \"<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>\" == \"<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>\"",
                "full_test_error": "self = <util_test.BasicsTest testMethod=test_inherits_has_effect_MRO>\n\n    def test_inherits_has_effect_MRO(self):\n        ChildTask = self._setup_inherits_inheritence()\n>       self.assertNotEqual(str(ChildTask.__mro__[0]),\n                            str(ChildTask.__mro__[1]))\nE       AssertionError: \"<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>\" == \"<class 'util_test.BasicsTest._setup_inherits_inheritence.<locals>.ChildTask'>\"\n\ntest/util_test.py:100: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/luigi_5/test/util_test.py",
                "test_function": "test_requires_has_effect_MRO",
                "test_function_code": "    def test_requires_has_effect_MRO(self):\n        ChildTask = self._setup_requires_inheritence()\n        self.assertNotEqual(str(ChildTask.__mro__[0]),\n                            str(ChildTask.__mro__[1]))",
                "test_error": "AssertionError: \"<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>\" == \"<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>\"",
                "full_test_error": "self = <util_test.BasicsTest testMethod=test_requires_has_effect_MRO>\n\n    def test_requires_has_effect_MRO(self):\n        ChildTask = self._setup_requires_inheritence()\n>       self.assertNotEqual(str(ChildTask.__mro__[0]),\n                            str(ChildTask.__mro__[1]))\nE       AssertionError: \"<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>\" == \"<class 'util_test.BasicsTest._setup_requires_inheritence.<locals>.ChildTask'>\"\n\ntest/util_test.py:175: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}