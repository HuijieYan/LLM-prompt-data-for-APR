{
    "luigi:23": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_23/luigi/interface.py": {
            "buggy_functions": [
                {
                    "function_name": "create_local_scheduler",
                    "function_code": "def create_local_scheduler(self):\n    return scheduler.CentralPlannerScheduler()\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 111,
                    "end_line": 112,
                    "variables": {
                        "scheduler.CentralPlannerScheduler": [
                            112
                        ],
                        "scheduler": [
                            112
                        ]
                    },
                    "filtered_variables": {
                        "scheduler.CentralPlannerScheduler": [
                            112
                        ],
                        "scheduler": [
                            112
                        ]
                    },
                    "diff_line_number": 112,
                    "class_data": {
                        "signature": "class WorkerSchedulerFactory(object)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def create_local_scheduler(self):\n    return scheduler.CentralPlannerScheduler()",
                            "def create_remote_scheduler(self, host, port):\n    return rpc.RemoteScheduler(host=host, port=port)",
                            "def create_worker(self, scheduler, worker_processes, assistant=False):\n    return worker.Worker(scheduler=scheduler, worker_processes=worker_processes, assistant=assistant)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "create_local_scheduler(self)",
                            "create_remote_scheduler(self, host, port)",
                            "create_worker(self, scheduler, worker_processes, assistant=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def setup_interface_logging(conf_file=None):\n    # use a variable in the function object to determine if it has run before\n    if getattr(setup_interface_logging, \"has_run\", False):\n        return\n\n    if conf_file is None:\n        logger = logging.getLogger('luigi-interface')\n        logger.setLevel(logging.DEBUG)\n\n        stream_handler = logging.StreamHandler()\n        stream_handler.setLevel(logging.DEBUG)\n\n        formatter = logging.Formatter('%(levelname)s: %(message)s')\n        stream_handler.setFormatter(formatter)\n\n        logger.addHandler(stream_handler)\n    else:\n        logging.config.fileConfig(conf_file, disable_existing_loggers=False)\n\n    setup_interface_logging.has_run = True",
                "def _editdistance(a, b):\n    r0 = range(0, len(b) + 1)\n    r1 = [0] * (len(b) + 1)\n\n    for i in range(0, len(a)):\n        r1[0] = i + 1\n\n        for j in range(0, len(b)):\n            c = 0 if a[i] is b[j] else 1\n            r1[j + 1] = min(r1[j] + 1, r0[j + 1] + 1, r0[j] + c)\n\n        r0 = r1[:]\n\n    return r1[len(b)]",
                "def error_task_names(task_name, task_names):\n    weighted_tasks = [(_editdistance(task_name, task_name_2), task_name_2) for task_name_2 in task_names]\n    ordered_tasks = sorted(weighted_tasks, key=lambda pair: pair[0])\n    candidates = [task for (dist, task) in ordered_tasks if dist <= 5 and dist < len(task)]\n    display_string = \"\"\n    if candidates:\n        display_string = \"No task %s. Did you mean:\\n%s\" % (task_name, '\\n'.join(candidates))\n    else:\n        display_string = \"No task %s.\" % task_name\n\n    raise SystemExit(display_string)",
                "def add_task_parameters(parser, task_cls, optparse=False):\n    for param_name, param in task_cls.get_params():\n        param.add_to_cmdline_parser(parser, param_name, task_cls.task_family, optparse=optparse, glob=False)",
                "def get_global_parameters():\n    seen_params = set()\n    for task_name, is_without_section, param_name, param in Register.get_all_params():\n        if param in seen_params:\n            continue\n        seen_params.add(param)\n        yield task_name, is_without_section, param_name, param",
                "def add_global_parameters(parser, optparse=False):\n    for task_name, is_without_section, param_name, param in get_global_parameters():\n        param.add_to_cmdline_parser(parser, param_name, task_name, optparse=optparse, glob=True, is_without_section=is_without_section)",
                "def get_task_parameters(task_cls, args):\n    # Parse a str->str dict to the correct types\n    params = {}\n    for param_name, param in task_cls.get_params():\n        param.parse_from_args(param_name, task_cls.task_family, args, params)\n    return params",
                "def set_global_parameters(args):\n    # Note that this is not side effect free\n    for task_name, is_without_section, param_name, param in get_global_parameters():\n        param.set_global_from_args(param_name, task_name, args, is_without_section=is_without_section)",
                "def run(cmdline_args=None, existing_optparse=None, use_optparse=False, main_task_cls=None,\n        worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False):\n    \"\"\"\n    Run from cmdline.\n\n    The default parser uses argparse however, for legacy reasons,\n    we support optparse that optionally allows for overriding an existing option parser with new args.\n\n    :param cmdline_args:\n    :param existing_optparse:\n    :param use_optparse:\n    :param main_task_cls:\n    :param worker_scheduler_factory:\n    :param use_dynamic_argparse:\n    :param local_scheduler:\n    \"\"\"\n    if use_optparse:\n        interface = OptParseInterface(existing_optparse)\n    elif use_dynamic_argparse:\n        interface = DynamicArgParseInterface()\n    else:\n        interface = ArgParseInterface()\n    tasks = interface.parse(cmdline_args, main_task_cls=main_task_cls)\n    override_defaults = {}\n    if local_scheduler:\n        override_defaults['local_scheduler'] = True\n    return interface.run(tasks, worker_scheduler_factory, override_defaults=override_defaults)",
                "def build(tasks, worker_scheduler_factory=None, **env_params):\n    \"\"\"\n    Run internally, bypassing the cmdline parsing.\n\n    Useful if you have some luigi code that you want to run internally.\n    Example:\n\n    .. code-block:: python\n\n        luigi.build([MyTask1(), MyTask2()], local_scheduler=True)\n\n    One notable difference is that `build` defaults to not using\n    the identical process lock. Otherwise, `build` would only be\n    callable once from each process.\n\n    :param tasks:\n    :param worker_scheduler_factory:\n    :param env_params:\n    :return:\n    \"\"\"\n    if \"no_lock\" not in env_params:\n        # TODO(erikbern): should we really override args here?\n        env_params[\"no_lock\"] = True\n\n    Interface.run(tasks, worker_scheduler_factory, env_params)",
                "def create_local_scheduler(self):\n    return scheduler.CentralPlannerScheduler()",
                "def create_remote_scheduler(self, host, port):\n    return rpc.RemoteScheduler(host=host, port=port)",
                "def create_worker(self, scheduler, worker_processes, assistant=False):\n    return worker.Worker(\n        scheduler=scheduler, worker_processes=worker_processes, assistant=assistant)",
                "def parse(self):\n    raise NotImplementedError",
                "@staticmethod\ndef run(tasks, worker_scheduler_factory=None, override_defaults=None):\n    \"\"\"\n    :param tasks:\n    :param worker_scheduler_factory:\n    :param override_defaults:\n    :return: True if all tasks and their dependencies were successfully run (or already completed);\n             False if any error occurred.\n    \"\"\"\n\n    if worker_scheduler_factory is None:\n        worker_scheduler_factory = WorkerSchedulerFactory()\n    if override_defaults is None:\n        override_defaults = {}\n    env_params = core(**override_defaults)\n    # search for logging configuration path first on the command line, then\n    # in the application config file\n    logging_conf = env_params.logging_conf_file\n    if logging_conf is not None and not os.path.exists(logging_conf):\n        raise Exception(\n            \"Error: Unable to locate specified logging configuration file!\"\n        )\n\n    if not configuration.get_config().getboolean(\n            'core', 'no_configure_logging', False):\n        setup_interface_logging(logging_conf)\n\n    if (not env_params.no_lock and\n            not(lock.acquire_for(env_params.lock_pid_dir, env_params.lock_size))):\n        sys.exit(1)\n\n    if env_params.local_scheduler:\n        sch = worker_scheduler_factory.create_local_scheduler()\n    else:\n        sch = worker_scheduler_factory.create_remote_scheduler(\n            host=env_params.scheduler_host,\n            port=env_params.scheduler_port)\n\n    w = worker_scheduler_factory.create_worker(\n        scheduler=sch, worker_processes=env_params.workers, assistant=env_params.assistant)\n\n    success = True\n    for t in tasks:\n        success &= w.add(t, env_params.parallel_scheduling)\n    logger = logging.getLogger('luigi-interface')\n    logger.info('Done scheduling tasks')\n    if env_params.workers != 0:\n        success &= w.run()\n    w.stop()\n    return success",
                "def parse_task(self, cmdline_args=None, main_task_cls=None):\n    if cmdline_args is None:\n        cmdline_args = sys.argv[1:]\n\n    parser = argparse.ArgumentParser()\n\n    add_global_parameters(parser)\n\n    if main_task_cls:\n        add_task_parameters(parser, main_task_cls)\n\n        args = parser.parse_args(args=cmdline_args)\n        task_cls = main_task_cls\n    else:\n        task_names = Register.task_names()\n\n        # Parse global arguments and pull out the task name.\n        # We used to do this using subparsers+command, but some issues with\n        # argparse across different versions of Python (2.7.9) made it hard.\n        args, unknown = parser.parse_known_args(args=[a for a in cmdline_args if a != '--help'])\n        if len(unknown) == 0:\n            # In case it included a --help argument, run again\n            parser.parse_known_args(args=cmdline_args)\n            raise SystemExit('No task specified')\n\n        task_name = unknown[0]\n        if task_name not in task_names:\n            error_task_names(task_name, task_names)\n\n        task_cls = Register.get_task_cls(task_name)\n\n        # Add a subparser to parse task-specific arguments\n        subparsers = parser.add_subparsers(dest='command')\n        subparser = subparsers.add_parser(task_name)\n\n        # Add both task and global params here so that we can support both:\n        # test.py --global-param xyz Test --n 42\n        # test.py Test --n 42 --global-param xyz\n        add_global_parameters(subparser)\n        add_task_parameters(subparser, task_cls)\n\n        # Workaround for bug in argparse for Python 2.7.9\n        # See https://mail.python.org/pipermail/python-dev/2015-January/137699.html\n        subargs = parser.parse_args(args=cmdline_args)\n        for key, value in vars(subargs).items():\n            if value:  # Either True (for boolean args) or non-None (everything else)\n                setattr(args, key, value)\n\n    # Notice that this is not side effect free because it might set global params\n    set_global_parameters(args)\n    task_params = get_task_parameters(task_cls, args)\n\n    return [task_cls(**task_params)]",
                "def parse(self, cmdline_args=None, main_task_cls=None):\n    return self.parse_task(cmdline_args, main_task_cls)",
                "def parse(self, cmdline_args=None, main_task_cls=None):\n    if cmdline_args is None:\n        cmdline_args = sys.argv[1:]\n\n    parser = argparse.ArgumentParser()\n\n    add_global_parameters(parser)\n\n    args, unknown = parser.parse_known_args(args=[a for a in cmdline_args if a != '--help'])\n    module = args.module\n\n    __import__(module)\n\n    return self.parse_task(cmdline_args, main_task_cls)",
                "def _process_args(self, largs, rargs, values):\n    while rargs:\n        try:\n            optparse.OptionParser._process_args(self, largs, rargs, values)\n        except (optparse.BadOptionError, optparse.AmbiguousOptionError) as e:\n            largs.append(e.opt_str)",
                "def __init__(self, existing_optparse):\n    self.__existing_optparse = existing_optparse",
                "def parse(self, cmdline_args=None, main_task_cls=None):\n    parser = PassThroughOptionParser()\n\n    def add_task_option(p):\n        if main_task_cls:\n            p.add_option('--task', help='Task to run (one of ' + Register.tasks_str() + ') [default: %default]', default=main_task_cls.task_family)\n        else:\n            p.add_option('--task', help='Task to run (one of %s)' % Register.tasks_str())\n\n    add_global_parameters(parser, optparse=True)\n\n    add_task_option(parser)\n    options, args = parser.parse_args(args=cmdline_args)\n\n    task_cls_name = options.task\n    if self.__existing_optparse:\n        parser = self.__existing_optparse\n    else:\n        parser = optparse.OptionParser()\n    add_task_option(parser)\n\n    task_cls = Register.get_task_cls(task_cls_name)\n\n    # Register all parameters as a big mess\n    add_global_parameters(parser, optparse=True)\n    add_task_parameters(parser, task_cls, optparse=True)\n\n    # Parse and run\n    options, args = parser.parse_args(args=cmdline_args)\n\n    set_global_parameters(options)\n    task_params = get_task_parameters(task_cls, options)\n\n    return [task_cls(**task_params)]",
                "def add_task_option(p):\n    if main_task_cls:\n        p.add_option('--task', help='Task to run (one of ' + Register.tasks_str() + ') [default: %default]', default=main_task_cls.task_family)\n    else:\n        p.add_option('--task', help='Task to run (one of %s)' % Register.tasks_str())"
            ],
            "inscope_function_signatures": [
                "setup_interface_logging(conf_file=None)",
                "_editdistance(a, b)",
                "error_task_names(task_name, task_names)",
                "add_task_parameters(parser, task_cls, optparse=False)",
                "get_global_parameters()",
                "add_global_parameters(parser, optparse=False)",
                "get_task_parameters(task_cls, args)",
                "set_global_parameters(args)",
                "run(cmdline_args=None, existing_optparse=None, use_optparse=False, main_task_cls=None, worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False)",
                "build(tasks, worker_scheduler_factory=None, **env_params)",
                "create_local_scheduler(self)",
                "create_remote_scheduler(self, host, port)",
                "create_worker(self, scheduler, worker_processes, assistant=False)",
                "parse(self)",
                "run(tasks, worker_scheduler_factory=None, override_defaults=None)",
                "parse_task(self, cmdline_args=None, main_task_cls=None)",
                "parse(self, cmdline_args=None, main_task_cls=None)",
                "parse(self, cmdline_args=None, main_task_cls=None)",
                "_process_args(self, largs, rargs, values)",
                "__init__(self, existing_optparse)",
                "parse(self, cmdline_args=None, main_task_cls=None)",
                "add_task_option(p)"
            ],
            "variables_in_file": {
                "getattr": [
                    41
                ],
                "setup_interface_logging": [
                    152,
                    41,
                    58
                ],
                "conf_file": [
                    56,
                    44
                ],
                "logger": [
                    171,
                    172,
                    45,
                    46,
                    54
                ],
                "logging.getLogger": [
                    171,
                    45
                ],
                "logging": [
                    171,
                    45,
                    46,
                    48,
                    49,
                    51,
                    56
                ],
                "logger.setLevel": [
                    46
                ],
                "logging.DEBUG": [
                    49,
                    46
                ],
                "stream_handler": [
                    48,
                    49,
                    52,
                    54
                ],
                "logging.StreamHandler": [
                    48
                ],
                "stream_handler.setLevel": [
                    49
                ],
                "formatter": [
                    51,
                    52
                ],
                "logging.Formatter": [
                    51
                ],
                "stream_handler.setFormatter": [
                    52
                ],
                "logger.addHandler": [
                    54
                ],
                "logging.config.fileConfig": [
                    56
                ],
                "logging.config": [
                    56
                ],
                "setup_interface_logging.has_run": [
                    58
                ],
                "task.Config": [
                    61
                ],
                "task": [
                    61,
                    199
                ],
                "use_cmdline_section": [
                    70
                ],
                "local_scheduler": [
                    72,
                    423
                ],
                "parameter.BoolParameter": [
                    72,
                    104,
                    101,
                    86
                ],
                "parameter": [
                    98,
                    101,
                    72,
                    104,
                    75,
                    79,
                    83,
                    86,
                    89,
                    92,
                    95
                ],
                "scheduler_host": [
                    75
                ],
                "parameter.Parameter": [
                    89,
                    98,
                    75,
                    95
                ],
                "dict": [
                    82,
                    78
                ],
                "scheduler_port": [
                    79
                ],
                "parameter.IntParameter": [
                    83,
                    92,
                    79
                ],
                "lock_size": [
                    83
                ],
                "no_lock": [
                    86
                ],
                "lock_pid_dir": [
                    89
                ],
                "os.path.join": [
                    90
                ],
                "os.path": [
                    145,
                    90
                ],
                "os": [
                    145,
                    90
                ],
                "tempfile.gettempdir": [
                    90
                ],
                "tempfile": [
                    90
                ],
                "workers": [
                    92
                ],
                "logging_conf_file": [
                    95
                ],
                "module": [
                    329,
                    98,
                    327
                ],
                "parallel_scheduling": [
                    101
                ],
                "assistant": [
                    104,
                    119
                ],
                "object": [
                    122,
                    109
                ],
                "scheduler.CentralPlannerScheduler": [
                    112
                ],
                "scheduler": [
                    112,
                    119
                ],
                "rpc.RemoteScheduler": [
                    115
                ],
                "rpc": [
                    115
                ],
                "host": [
                    115
                ],
                "port": [
                    115
                ],
                "worker.Worker": [
                    118
                ],
                "worker": [
                    118
                ],
                "worker_processes": [
                    119
                ],
                "NotImplementedError": [
                    125
                ],
                "worker_scheduler_factory": [
                    161,
                    452,
                    165,
                    137,
                    138,
                    425,
                    159
                ],
                "WorkerSchedulerFactory": [
                    138
                ],
                "override_defaults": [
                    422,
                    424,
                    425,
                    139,
                    140,
                    141
                ],
                "env_params": [
                    448,
                    162,
                    163,
                    450,
                    452,
                    166,
                    170,
                    141,
                    173,
                    144,
                    154,
                    155,
                    158
                ],
                "core": [
                    141
                ],
                "logging_conf": [
                    144,
                    145,
                    152
                ],
                "env_params.logging_conf_file": [
                    144
                ],
                "os.path.exists": [
                    145
                ],
                "Exception": [
                    146
                ],
                "getboolean": [
                    150
                ],
                "configuration.get_config": [
                    150
                ],
                "configuration": [
                    150
                ],
                "env_params.no_lock": [
                    154
                ],
                "lock.acquire_for": [
                    155
                ],
                "lock": [
                    155
                ],
                "env_params.lock_pid_dir": [
                    155
                ],
                "env_params.lock_size": [
                    155
                ],
                "sys.exit": [
                    156
                ],
                "sys": [
                    320,
                    249,
                    156
                ],
                "env_params.local_scheduler": [
                    158
                ],
                "sch": [
                    161,
                    166,
                    159
                ],
                "worker_scheduler_factory.create_local_scheduler": [
                    159
                ],
                "worker_scheduler_factory.create_remote_scheduler": [
                    161
                ],
                "env_params.scheduler_host": [
                    162
                ],
                "env_params.scheduler_port": [
                    163
                ],
                "w": [
                    170,
                    165,
                    174,
                    175
                ],
                "worker_scheduler_factory.create_worker": [
                    165
                ],
                "env_params.workers": [
                    173,
                    166
                ],
                "env_params.assistant": [
                    166
                ],
                "success": [
                    168,
                    170,
                    174,
                    176
                ],
                "t": [
                    169,
                    170
                ],
                "tasks": [
                    169,
                    425,
                    452,
                    421
                ],
                "w.add": [
                    170
                ],
                "env_params.parallel_scheduling": [
                    170
                ],
                "logger.info": [
                    172
                ],
                "w.run": [
                    174
                ],
                "w.stop": [
                    175
                ],
                "staticmethod": [
                    127
                ],
                "r0": [
                    191,
                    181,
                    189
                ],
                "range": [
                    184,
                    187,
                    181
                ],
                "len": [
                    193,
                    199,
                    267,
                    181,
                    182,
                    184,
                    187
                ],
                "b": [
                    193,
                    181,
                    182,
                    187,
                    188
                ],
                "r1": [
                    193,
                    182,
                    185,
                    189,
                    191
                ],
                "i": [
                    184,
                    185,
                    188
                ],
                "a": [
                    184,
                    266,
                    188,
                    326
                ],
                "j": [
                    187,
                    188,
                    189
                ],
                "c": [
                    188,
                    189
                ],
                "min": [
                    189
                ],
                "weighted_tasks": [
                    197,
                    198
                ],
                "_editdistance": [
                    197
                ],
                "task_name": [
                    224,
                    225,
                    280,
                    197,
                    202,
                    204,
                    238,
                    239,
                    272,
                    273,
                    274,
                    276,
                    216,
                    220
                ],
                "task_name_2": [
                    197
                ],
                "task_names": [
                    273,
                    261,
                    274,
                    197
                ],
                "ordered_tasks": [
                    198,
                    199
                ],
                "sorted": [
                    198
                ],
                "pair": [
                    198
                ],
                "candidates": [
                    201,
                    202,
                    199
                ],
                "dist": [
                    199
                ],
                "display_string": [
                    200,
                    202,
                    204,
                    206
                ],
                "join": [
                    202
                ],
                "SystemExit": [
                    206,
                    270
                ],
                "param_name": [
                    224,
                    225,
                    231,
                    232,
                    238,
                    239,
                    210,
                    211,
                    216,
                    220
                ],
                "param": [
                    224,
                    225,
                    231,
                    232,
                    238,
                    239,
                    210,
                    211,
                    216,
                    217,
                    219,
                    220
                ],
                "task_cls.get_params": [
                    210,
                    231
                ],
                "task_cls": [
                    384,
                    259,
                    388,
                    231,
                    232,
                    297,
                    394,
                    299,
                    396,
                    210,
                    211,
                    276,
                    286
                ],
                "param.add_to_cmdline_parser": [
                    225,
                    211
                ],
                "parser": [
                    256,
                    258,
                    387,
                    388,
                    391,
                    266,
                    269,
                    279,
                    290,
                    322,
                    324,
                    326,
                    211,
                    225,
                    364,
                    251,
                    372,
                    374,
                    375,
                    253,
                    379,
                    381,
                    382
                ],
                "task_cls.task_family": [
                    232,
                    211
                ],
                "optparse": [
                    225,
                    334,
                    211,
                    347,
                    348,
                    381
                ],
                "seen_params": [
                    217,
                    219,
                    215
                ],
                "set": [
                    215
                ],
                "is_without_section": [
                    224,
                    225,
                    238,
                    239,
                    216,
                    220
                ],
                "Register.get_all_params": [
                    216
                ],
                "Register": [
                    384,
                    261,
                    368,
                    370,
                    276,
                    216
                ],
                "seen_params.add": [
                    219
                ],
                "get_global_parameters": [
                    224,
                    238
                ],
                "params": [
                    232,
                    233,
                    230
                ],
                "param.parse_from_args": [
                    232
                ],
                "args": [
                    258,
                    293,
                    326,
                    327,
                    232,
                    296,
                    266,
                    297,
                    391,
                    239,
                    375
                ],
                "param.set_global_from_args": [
                    239
                ],
                "Interface": [
                    352,
                    242,
                    452
                ],
                "cmdline_args": [
                    320,
                    258,
                    290,
                    421,
                    326,
                    391,
                    266,
                    331,
                    269,
                    302,
                    375,
                    248,
                    249,
                    319
                ],
                "sys.argv": [
                    320,
                    249
                ],
                "argparse.ArgumentParser": [
                    322,
                    251
                ],
                "argparse": [
                    322,
                    251
                ],
                "add_global_parameters": [
                    387,
                    324,
                    372,
                    253,
                    285
                ],
                "main_task_cls": [
                    256,
                    259,
                    421,
                    331,
                    302,
                    367,
                    368,
                    255
                ],
                "add_task_parameters": [
                    256,
                    388,
                    286
                ],
                "parser.parse_args": [
                    391,
                    258,
                    290,
                    375
                ],
                "Register.task_names": [
                    261
                ],
                "unknown": [
                    272,
                    266,
                    267,
                    326
                ],
                "parser.parse_known_args": [
                    266,
                    269,
                    326
                ],
                "error_task_names": [
                    274
                ],
                "Register.get_task_cls": [
                    384,
                    276
                ],
                "subparsers": [
                    280,
                    279
                ],
                "parser.add_subparsers": [
                    279
                ],
                "subparser": [
                    280,
                    285,
                    286
                ],
                "subparsers.add_parser": [
                    280
                ],
                "subargs": [
                    290,
                    291
                ],
                "key": [
                    291,
                    293
                ],
                "value": [
                    291,
                    292,
                    293
                ],
                "items": [
                    291
                ],
                "vars": [
                    291
                ],
                "setattr": [
                    293
                ],
                "set_global_parameters": [
                    296,
                    393
                ],
                "task_params": [
                    297,
                    394,
                    299,
                    396
                ],
                "get_task_parameters": [
                    297,
                    394
                ],
                "self.parse_task": [
                    331,
                    302
                ],
                "self": [
                    361,
                    331,
                    302,
                    379,
                    378,
                    347
                ],
                "ArgParseInterface": [
                    305,
                    420
                ],
                "args.module": [
                    327
                ],
                "__import__": [
                    329
                ],
                "optparse.OptionParser": [
                    347,
                    381,
                    334
                ],
                "rargs": [
                    345,
                    347
                ],
                "optparse.OptionParser._process_args": [
                    347
                ],
                "largs": [
                    347,
                    349
                ],
                "values": [
                    347
                ],
                "optparse.BadOptionError": [
                    348
                ],
                "optparse.AmbiguousOptionError": [
                    348
                ],
                "largs.append": [
                    349
                ],
                "e.opt_str": [
                    349
                ],
                "e": [
                    349
                ],
                "self.__existing_optparse": [
                    361,
                    378,
                    379
                ],
                "existing_optparse": [
                    416,
                    361
                ],
                "PassThroughOptionParser": [
                    364
                ],
                "p.add_option": [
                    368,
                    370
                ],
                "p": [
                    368,
                    370
                ],
                "Register.tasks_str": [
                    368,
                    370
                ],
                "main_task_cls.task_family": [
                    368
                ],
                "add_task_option": [
                    382,
                    374
                ],
                "options": [
                    391,
                    393,
                    394,
                    375,
                    377
                ],
                "task_cls_name": [
                    384,
                    377
                ],
                "options.task": [
                    377
                ],
                "use_optparse": [
                    415
                ],
                "interface": [
                    416,
                    418,
                    420,
                    421,
                    425
                ],
                "OptParseInterface": [
                    416
                ],
                "use_dynamic_argparse": [
                    417
                ],
                "DynamicArgParseInterface": [
                    418
                ],
                "interface.parse": [
                    421
                ],
                "interface.run": [
                    425
                ],
                "Interface.run": [
                    452
                ]
            },
            "filtered_variables_in_file": {
                "setup_interface_logging": [
                    152,
                    41,
                    58
                ],
                "conf_file": [
                    56,
                    44
                ],
                "logger": [
                    171,
                    172,
                    45,
                    46,
                    54
                ],
                "logging.getLogger": [
                    171,
                    45
                ],
                "logging": [
                    171,
                    45,
                    46,
                    48,
                    49,
                    51,
                    56
                ],
                "logger.setLevel": [
                    46
                ],
                "logging.DEBUG": [
                    49,
                    46
                ],
                "stream_handler": [
                    48,
                    49,
                    52,
                    54
                ],
                "logging.StreamHandler": [
                    48
                ],
                "stream_handler.setLevel": [
                    49
                ],
                "formatter": [
                    51,
                    52
                ],
                "logging.Formatter": [
                    51
                ],
                "stream_handler.setFormatter": [
                    52
                ],
                "logger.addHandler": [
                    54
                ],
                "logging.config.fileConfig": [
                    56
                ],
                "logging.config": [
                    56
                ],
                "setup_interface_logging.has_run": [
                    58
                ],
                "task.Config": [
                    61
                ],
                "task": [
                    61,
                    199
                ],
                "use_cmdline_section": [
                    70
                ],
                "local_scheduler": [
                    72,
                    423
                ],
                "parameter.BoolParameter": [
                    72,
                    104,
                    101,
                    86
                ],
                "parameter": [
                    98,
                    101,
                    72,
                    104,
                    75,
                    79,
                    83,
                    86,
                    89,
                    92,
                    95
                ],
                "scheduler_host": [
                    75
                ],
                "parameter.Parameter": [
                    89,
                    98,
                    75,
                    95
                ],
                "scheduler_port": [
                    79
                ],
                "parameter.IntParameter": [
                    83,
                    92,
                    79
                ],
                "lock_size": [
                    83
                ],
                "no_lock": [
                    86
                ],
                "lock_pid_dir": [
                    89
                ],
                "os.path.join": [
                    90
                ],
                "os.path": [
                    145,
                    90
                ],
                "os": [
                    145,
                    90
                ],
                "tempfile.gettempdir": [
                    90
                ],
                "tempfile": [
                    90
                ],
                "workers": [
                    92
                ],
                "logging_conf_file": [
                    95
                ],
                "module": [
                    329,
                    98,
                    327
                ],
                "parallel_scheduling": [
                    101
                ],
                "assistant": [
                    104,
                    119
                ],
                "scheduler.CentralPlannerScheduler": [
                    112
                ],
                "scheduler": [
                    112,
                    119
                ],
                "rpc.RemoteScheduler": [
                    115
                ],
                "rpc": [
                    115
                ],
                "host": [
                    115
                ],
                "port": [
                    115
                ],
                "worker.Worker": [
                    118
                ],
                "worker": [
                    118
                ],
                "worker_processes": [
                    119
                ],
                "worker_scheduler_factory": [
                    161,
                    452,
                    165,
                    137,
                    138,
                    425,
                    159
                ],
                "WorkerSchedulerFactory": [
                    138
                ],
                "override_defaults": [
                    422,
                    424,
                    425,
                    139,
                    140,
                    141
                ],
                "env_params": [
                    448,
                    162,
                    163,
                    450,
                    452,
                    166,
                    170,
                    141,
                    173,
                    144,
                    154,
                    155,
                    158
                ],
                "core": [
                    141
                ],
                "logging_conf": [
                    144,
                    145,
                    152
                ],
                "env_params.logging_conf_file": [
                    144
                ],
                "os.path.exists": [
                    145
                ],
                "getboolean": [
                    150
                ],
                "configuration.get_config": [
                    150
                ],
                "configuration": [
                    150
                ],
                "env_params.no_lock": [
                    154
                ],
                "lock.acquire_for": [
                    155
                ],
                "lock": [
                    155
                ],
                "env_params.lock_pid_dir": [
                    155
                ],
                "env_params.lock_size": [
                    155
                ],
                "sys.exit": [
                    156
                ],
                "sys": [
                    320,
                    249,
                    156
                ],
                "env_params.local_scheduler": [
                    158
                ],
                "sch": [
                    161,
                    166,
                    159
                ],
                "worker_scheduler_factory.create_local_scheduler": [
                    159
                ],
                "worker_scheduler_factory.create_remote_scheduler": [
                    161
                ],
                "env_params.scheduler_host": [
                    162
                ],
                "env_params.scheduler_port": [
                    163
                ],
                "w": [
                    170,
                    165,
                    174,
                    175
                ],
                "worker_scheduler_factory.create_worker": [
                    165
                ],
                "env_params.workers": [
                    173,
                    166
                ],
                "env_params.assistant": [
                    166
                ],
                "success": [
                    168,
                    170,
                    174,
                    176
                ],
                "t": [
                    169,
                    170
                ],
                "tasks": [
                    169,
                    425,
                    452,
                    421
                ],
                "w.add": [
                    170
                ],
                "env_params.parallel_scheduling": [
                    170
                ],
                "logger.info": [
                    172
                ],
                "w.run": [
                    174
                ],
                "w.stop": [
                    175
                ],
                "r0": [
                    191,
                    181,
                    189
                ],
                "b": [
                    193,
                    181,
                    182,
                    187,
                    188
                ],
                "r1": [
                    193,
                    182,
                    185,
                    189,
                    191
                ],
                "i": [
                    184,
                    185,
                    188
                ],
                "a": [
                    184,
                    266,
                    188,
                    326
                ],
                "j": [
                    187,
                    188,
                    189
                ],
                "c": [
                    188,
                    189
                ],
                "weighted_tasks": [
                    197,
                    198
                ],
                "_editdistance": [
                    197
                ],
                "task_name": [
                    224,
                    225,
                    280,
                    197,
                    202,
                    204,
                    238,
                    239,
                    272,
                    273,
                    274,
                    276,
                    216,
                    220
                ],
                "task_name_2": [
                    197
                ],
                "task_names": [
                    273,
                    261,
                    274,
                    197
                ],
                "ordered_tasks": [
                    198,
                    199
                ],
                "pair": [
                    198
                ],
                "candidates": [
                    201,
                    202,
                    199
                ],
                "dist": [
                    199
                ],
                "display_string": [
                    200,
                    202,
                    204,
                    206
                ],
                "join": [
                    202
                ],
                "param_name": [
                    224,
                    225,
                    231,
                    232,
                    238,
                    239,
                    210,
                    211,
                    216,
                    220
                ],
                "param": [
                    224,
                    225,
                    231,
                    232,
                    238,
                    239,
                    210,
                    211,
                    216,
                    217,
                    219,
                    220
                ],
                "task_cls.get_params": [
                    210,
                    231
                ],
                "task_cls": [
                    384,
                    259,
                    388,
                    231,
                    232,
                    297,
                    394,
                    299,
                    396,
                    210,
                    211,
                    276,
                    286
                ],
                "param.add_to_cmdline_parser": [
                    225,
                    211
                ],
                "parser": [
                    256,
                    258,
                    387,
                    388,
                    391,
                    266,
                    269,
                    279,
                    290,
                    322,
                    324,
                    326,
                    211,
                    225,
                    364,
                    251,
                    372,
                    374,
                    375,
                    253,
                    379,
                    381,
                    382
                ],
                "task_cls.task_family": [
                    232,
                    211
                ],
                "optparse": [
                    225,
                    334,
                    211,
                    347,
                    348,
                    381
                ],
                "seen_params": [
                    217,
                    219,
                    215
                ],
                "is_without_section": [
                    224,
                    225,
                    238,
                    239,
                    216,
                    220
                ],
                "Register.get_all_params": [
                    216
                ],
                "Register": [
                    384,
                    261,
                    368,
                    370,
                    276,
                    216
                ],
                "seen_params.add": [
                    219
                ],
                "get_global_parameters": [
                    224,
                    238
                ],
                "params": [
                    232,
                    233,
                    230
                ],
                "param.parse_from_args": [
                    232
                ],
                "args": [
                    258,
                    293,
                    326,
                    327,
                    232,
                    296,
                    266,
                    297,
                    391,
                    239,
                    375
                ],
                "param.set_global_from_args": [
                    239
                ],
                "Interface": [
                    352,
                    242,
                    452
                ],
                "cmdline_args": [
                    320,
                    258,
                    290,
                    421,
                    326,
                    391,
                    266,
                    331,
                    269,
                    302,
                    375,
                    248,
                    249,
                    319
                ],
                "sys.argv": [
                    320,
                    249
                ],
                "argparse.ArgumentParser": [
                    322,
                    251
                ],
                "argparse": [
                    322,
                    251
                ],
                "add_global_parameters": [
                    387,
                    324,
                    372,
                    253,
                    285
                ],
                "main_task_cls": [
                    256,
                    259,
                    421,
                    331,
                    302,
                    367,
                    368,
                    255
                ],
                "add_task_parameters": [
                    256,
                    388,
                    286
                ],
                "parser.parse_args": [
                    391,
                    258,
                    290,
                    375
                ],
                "Register.task_names": [
                    261
                ],
                "unknown": [
                    272,
                    266,
                    267,
                    326
                ],
                "parser.parse_known_args": [
                    266,
                    269,
                    326
                ],
                "error_task_names": [
                    274
                ],
                "Register.get_task_cls": [
                    384,
                    276
                ],
                "subparsers": [
                    280,
                    279
                ],
                "parser.add_subparsers": [
                    279
                ],
                "subparser": [
                    280,
                    285,
                    286
                ],
                "subparsers.add_parser": [
                    280
                ],
                "subargs": [
                    290,
                    291
                ],
                "key": [
                    291,
                    293
                ],
                "value": [
                    291,
                    292,
                    293
                ],
                "items": [
                    291
                ],
                "set_global_parameters": [
                    296,
                    393
                ],
                "task_params": [
                    297,
                    394,
                    299,
                    396
                ],
                "get_task_parameters": [
                    297,
                    394
                ],
                "self.parse_task": [
                    331,
                    302
                ],
                "self": [
                    361,
                    331,
                    302,
                    379,
                    378,
                    347
                ],
                "ArgParseInterface": [
                    305,
                    420
                ],
                "args.module": [
                    327
                ],
                "optparse.OptionParser": [
                    347,
                    381,
                    334
                ],
                "rargs": [
                    345,
                    347
                ],
                "optparse.OptionParser._process_args": [
                    347
                ],
                "largs": [
                    347,
                    349
                ],
                "values": [
                    347
                ],
                "optparse.BadOptionError": [
                    348
                ],
                "optparse.AmbiguousOptionError": [
                    348
                ],
                "largs.append": [
                    349
                ],
                "e.opt_str": [
                    349
                ],
                "e": [
                    349
                ],
                "self.__existing_optparse": [
                    361,
                    378,
                    379
                ],
                "existing_optparse": [
                    416,
                    361
                ],
                "PassThroughOptionParser": [
                    364
                ],
                "p.add_option": [
                    368,
                    370
                ],
                "p": [
                    368,
                    370
                ],
                "Register.tasks_str": [
                    368,
                    370
                ],
                "main_task_cls.task_family": [
                    368
                ],
                "add_task_option": [
                    382,
                    374
                ],
                "options": [
                    391,
                    393,
                    394,
                    375,
                    377
                ],
                "task_cls_name": [
                    384,
                    377
                ],
                "options.task": [
                    377
                ],
                "use_optparse": [
                    415
                ],
                "interface": [
                    416,
                    418,
                    420,
                    421,
                    425
                ],
                "OptParseInterface": [
                    416
                ],
                "use_dynamic_argparse": [
                    417
                ],
                "DynamicArgParseInterface": [
                    418
                ],
                "interface.parse": [
                    421
                ],
                "interface.run": [
                    425
                ],
                "Interface.run": [
                    452
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_23/luigi/scheduler.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active  # seconds since epoch\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 227,
                    "end_line": 233,
                    "variables": {
                        "self.id": [
                            228
                        ],
                        "self": [
                            228,
                            229,
                            230,
                            231,
                            232,
                            233
                        ],
                        "worker_id": [
                            228
                        ],
                        "self.reference": [
                            229
                        ],
                        "self.last_active": [
                            230
                        ],
                        "last_active": [
                            230
                        ],
                        "self.started": [
                            231
                        ],
                        "time.time": [
                            231
                        ],
                        "time": [
                            231
                        ],
                        "self.tasks": [
                            232
                        ],
                        "set": [
                            232
                        ],
                        "self.info": [
                            233
                        ]
                    },
                    "filtered_variables": {
                        "self.id": [
                            228
                        ],
                        "self": [
                            228,
                            229,
                            230,
                            231,
                            232,
                            233
                        ],
                        "worker_id": [
                            228
                        ],
                        "self.reference": [
                            229
                        ],
                        "self.last_active": [
                            230
                        ],
                        "last_active": [
                            230
                        ],
                        "self.started": [
                            231
                        ],
                        "time.time": [
                            231
                        ],
                        "time": [
                            231
                        ],
                        "self.tasks": [
                            232
                        ],
                        "self.info": [
                            233
                        ]
                    },
                    "diff_line_number": 230,
                    "class_data": {
                        "signature": "class Worker(object)",
                        "docstring": "Structure for tracking worker activity and keeping their references.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None\n    self.last_active = last_active\n    self.started = time.time()\n    self.tasks = set()\n    self.info = {}",
                            "def add_info(self, info):\n    self.info.update(info)",
                            "def update(self, worker_reference):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()",
                            "def prune(self, config):\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                            "def get_pending_tasks(self, state):\n    \"\"\"\n    Get PENDING (and RUNNING) tasks for this worker.\n\n    You have to pass in the state for optimization reasons.\n    \"\"\"\n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], self.tasks)\n    else:\n        return state.get_pending_tasks()",
                            "def is_trivial_worker(self, state):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements.\n\n    We have to pass the state parameter for optimization reasons.\n    \"\"\"\n    if self.assistant:\n        return False\n    return all((not task.resources for task in self.get_pending_tasks(state)))",
                            "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                            "def __str__(self):\n    return self.id"
                        ],
                        "constructor_variables": [
                            "reference",
                            "last_active",
                            "tasks",
                            "info",
                            "started",
                            "id"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, worker_id, last_active=None)",
                            "add_info(self, info)",
                            "update(self, worker_reference)",
                            "prune(self, config)",
                            "get_pending_tasks(self, state)",
                            "is_trivial_worker(self, state)",
                            "assistant(self)",
                            "__str__(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x106469a60>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Worker(salt=744568786, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14403)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "self.reference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.started": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.info": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get_work",
                    "function_code": "def get_work(self, host=None, assistant=False, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    worker_id = kwargs['worker']\n    # Return remaining tasks that have no FAILED descendents\n    self.update(worker_id, {'host': host})\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    best_task = None\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in self._state.get_active_workers())\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n\n    for task in tasks:\n        upstream_status = self._upstream_status(task.id, upstream_table)\n        in_workers = (assistant and task.workers) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n            locally_pending_tasks += 1\n            if len(task.workers) == 1 and not assistant:\n                n_unique_pending += 1\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task.id, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 699,
                    "end_line": 793,
                    "variables": {
                        "worker_id": [
                            741,
                            713,
                            715,
                            717,
                            784,
                            726,
                            765
                        ],
                        "kwargs": [
                            713
                        ],
                        "self.update": [
                            715
                        ],
                        "self": [
                            737,
                            740,
                            745,
                            715,
                            717,
                            783,
                            786,
                            726,
                            727,
                            728,
                            761,
                            762,
                            732,
                            733,
                            735
                        ],
                        "host": [
                            786,
                            715
                        ],
                        "assistant": [
                            741,
                            716,
                            717,
                            753,
                            765
                        ],
                        "self.add_worker": [
                            717
                        ],
                        "best_task": [
                            718,
                            783,
                            782,
                            784,
                            785,
                            786,
                            788,
                            789,
                            790,
                            791,
                            761,
                            763
                        ],
                        "locally_pending_tasks": [
                            752,
                            777,
                            719
                        ],
                        "running_tasks": [
                            720,
                            778,
                            749
                        ],
                        "upstream_table": [
                            721,
                            740
                        ],
                        "greedy_resources": [
                            761,
                            723,
                            773,
                            759
                        ],
                        "collections.defaultdict": [
                            729,
                            723
                        ],
                        "collections": [
                            729,
                            723
                        ],
                        "int": [
                            729,
                            723
                        ],
                        "n_unique_pending": [
                            754,
                            724,
                            780
                        ],
                        "worker": [
                            726,
                            727,
                            728,
                            734,
                            735
                        ],
                        "self._state.get_worker": [
                            745,
                            726
                        ],
                        "self._state": [
                            745,
                            783,
                            726,
                            727,
                            728,
                            732,
                            735
                        ],
                        "worker.is_trivial_worker": [
                            727
                        ],
                        "relevant_tasks": [
                            728,
                            736,
                            732
                        ],
                        "worker.get_pending_tasks": [
                            728
                        ],
                        "used_resources": [
                            729,
                            762,
                            733
                        ],
                        "greedy_workers": [
                            769,
                            756,
                            757,
                            730,
                            734,
                            767
                        ],
                        "dict": [
                            730,
                            734
                        ],
                        "self._state.get_pending_tasks": [
                            732
                        ],
                        "self._used_resources": [
                            733
                        ],
                        "worker.id": [
                            734
                        ],
                        "worker.info.get": [
                            734
                        ],
                        "worker.info": [
                            734
                        ],
                        "self._state.get_active_workers": [
                            735
                        ],
                        "tasks": [
                            736,
                            737,
                            739
                        ],
                        "list": [
                            736
                        ],
                        "tasks.sort": [
                            737
                        ],
                        "self._rank": [
                            737
                        ],
                        "task": [
                            739,
                            740,
                            741,
                            742,
                            772,
                            745,
                            746,
                            751,
                            753,
                            756,
                            757,
                            758,
                            761,
                            762,
                            763,
                            765
                        ],
                        "upstream_status": [
                            740,
                            751
                        ],
                        "self._upstream_status": [
                            740
                        ],
                        "task.id": [
                            746,
                            740
                        ],
                        "in_workers": [
                            762,
                            741,
                            742,
                            751
                        ],
                        "task.workers": [
                            753,
                            741,
                            765
                        ],
                        "task.status": [
                            756,
                            742,
                            751
                        ],
                        "RUNNING": [
                            786,
                            756,
                            742,
                            783
                        ],
                        "other_worker": [
                            745,
                            746,
                            747,
                            748
                        ],
                        "task.worker_running": [
                            745,
                            756,
                            757
                        ],
                        "more_info": [
                            746,
                            748,
                            749
                        ],
                        "str": [
                            746
                        ],
                        "more_info.update": [
                            748
                        ],
                        "other_worker.info": [
                            748
                        ],
                        "running_tasks.append": [
                            749
                        ],
                        "PENDING": [
                            751
                        ],
                        "UPSTREAM_DISABLED": [
                            751
                        ],
                        "len": [
                            753
                        ],
                        "resource": [
                            772,
                            773,
                            758,
                            759
                        ],
                        "amount": [
                            772,
                            773,
                            758,
                            759
                        ],
                        "six.iteritems": [
                            772,
                            758
                        ],
                        "six": [
                            772,
                            758
                        ],
                        "task.resources": [
                            761,
                            762,
                            772,
                            758
                        ],
                        "self._schedulable": [
                            761
                        ],
                        "self._has_resources": [
                            761,
                            762
                        ],
                        "workers": [
                            765,
                            766
                        ],
                        "itertools.chain": [
                            765
                        ],
                        "itertools": [
                            765
                        ],
                        "task_worker": [
                            769,
                            766,
                            767
                        ],
                        "greedy_workers.get": [
                            767
                        ],
                        "reply": [
                            777,
                            788,
                            789,
                            790,
                            791,
                            793
                        ],
                        "self._state.set_status": [
                            783
                        ],
                        "self._config": [
                            783
                        ],
                        "best_task.worker_running": [
                            784
                        ],
                        "best_task.time_running": [
                            785
                        ],
                        "time.time": [
                            785
                        ],
                        "time": [
                            785
                        ],
                        "self._update_task_history": [
                            786
                        ],
                        "best_task.id": [
                            786,
                            788
                        ],
                        "best_task.family": [
                            789
                        ],
                        "getattr": [
                            790
                        ],
                        "best_task.params": [
                            791
                        ]
                    },
                    "filtered_variables": {
                        "worker_id": [
                            741,
                            713,
                            715,
                            717,
                            784,
                            726,
                            765
                        ],
                        "kwargs": [
                            713
                        ],
                        "self.update": [
                            715
                        ],
                        "self": [
                            737,
                            740,
                            745,
                            715,
                            717,
                            783,
                            786,
                            726,
                            727,
                            728,
                            761,
                            762,
                            732,
                            733,
                            735
                        ],
                        "host": [
                            786,
                            715
                        ],
                        "assistant": [
                            741,
                            716,
                            717,
                            753,
                            765
                        ],
                        "self.add_worker": [
                            717
                        ],
                        "best_task": [
                            718,
                            783,
                            782,
                            784,
                            785,
                            786,
                            788,
                            789,
                            790,
                            791,
                            761,
                            763
                        ],
                        "locally_pending_tasks": [
                            752,
                            777,
                            719
                        ],
                        "running_tasks": [
                            720,
                            778,
                            749
                        ],
                        "upstream_table": [
                            721,
                            740
                        ],
                        "greedy_resources": [
                            761,
                            723,
                            773,
                            759
                        ],
                        "collections.defaultdict": [
                            729,
                            723
                        ],
                        "collections": [
                            729,
                            723
                        ],
                        "n_unique_pending": [
                            754,
                            724,
                            780
                        ],
                        "worker": [
                            726,
                            727,
                            728,
                            734,
                            735
                        ],
                        "self._state.get_worker": [
                            745,
                            726
                        ],
                        "self._state": [
                            745,
                            783,
                            726,
                            727,
                            728,
                            732,
                            735
                        ],
                        "worker.is_trivial_worker": [
                            727
                        ],
                        "relevant_tasks": [
                            728,
                            736,
                            732
                        ],
                        "worker.get_pending_tasks": [
                            728
                        ],
                        "used_resources": [
                            729,
                            762,
                            733
                        ],
                        "greedy_workers": [
                            769,
                            756,
                            757,
                            730,
                            734,
                            767
                        ],
                        "self._state.get_pending_tasks": [
                            732
                        ],
                        "self._used_resources": [
                            733
                        ],
                        "worker.id": [
                            734
                        ],
                        "worker.info.get": [
                            734
                        ],
                        "worker.info": [
                            734
                        ],
                        "self._state.get_active_workers": [
                            735
                        ],
                        "tasks": [
                            736,
                            737,
                            739
                        ],
                        "tasks.sort": [
                            737
                        ],
                        "self._rank": [
                            737
                        ],
                        "task": [
                            739,
                            740,
                            741,
                            742,
                            772,
                            745,
                            746,
                            751,
                            753,
                            756,
                            757,
                            758,
                            761,
                            762,
                            763,
                            765
                        ],
                        "upstream_status": [
                            740,
                            751
                        ],
                        "self._upstream_status": [
                            740
                        ],
                        "task.id": [
                            746,
                            740
                        ],
                        "in_workers": [
                            762,
                            741,
                            742,
                            751
                        ],
                        "task.workers": [
                            753,
                            741,
                            765
                        ],
                        "task.status": [
                            756,
                            742,
                            751
                        ],
                        "RUNNING": [
                            786,
                            756,
                            742,
                            783
                        ],
                        "other_worker": [
                            745,
                            746,
                            747,
                            748
                        ],
                        "task.worker_running": [
                            745,
                            756,
                            757
                        ],
                        "more_info": [
                            746,
                            748,
                            749
                        ],
                        "more_info.update": [
                            748
                        ],
                        "other_worker.info": [
                            748
                        ],
                        "running_tasks.append": [
                            749
                        ],
                        "PENDING": [
                            751
                        ],
                        "UPSTREAM_DISABLED": [
                            751
                        ],
                        "resource": [
                            772,
                            773,
                            758,
                            759
                        ],
                        "amount": [
                            772,
                            773,
                            758,
                            759
                        ],
                        "six.iteritems": [
                            772,
                            758
                        ],
                        "six": [
                            772,
                            758
                        ],
                        "task.resources": [
                            761,
                            762,
                            772,
                            758
                        ],
                        "self._schedulable": [
                            761
                        ],
                        "self._has_resources": [
                            761,
                            762
                        ],
                        "workers": [
                            765,
                            766
                        ],
                        "itertools.chain": [
                            765
                        ],
                        "itertools": [
                            765
                        ],
                        "task_worker": [
                            769,
                            766,
                            767
                        ],
                        "greedy_workers.get": [
                            767
                        ],
                        "reply": [
                            777,
                            788,
                            789,
                            790,
                            791,
                            793
                        ],
                        "self._state.set_status": [
                            783
                        ],
                        "self._config": [
                            783
                        ],
                        "best_task.worker_running": [
                            784
                        ],
                        "best_task.time_running": [
                            785
                        ],
                        "time.time": [
                            785
                        ],
                        "time": [
                            785
                        ],
                        "self._update_task_history": [
                            786
                        ],
                        "best_task.id": [
                            786,
                            788
                        ],
                        "best_task.family": [
                            789
                        ],
                        "best_task.params": [
                            791
                        ]
                    },
                    "diff_line_number": 712,
                    "class_data": {
                        "signature": "class CentralPlannerScheduler(Scheduler)",
                        "docstring": "Async scheduler that can handle multiple workers, etc.\n\nCan be run locally or on a server (using RemoteScheduler + server.Server).",
                        "constructor_docstring": "Keyword Arguments:\n:param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n:param resources: a dict of str->int constraints\n:param task_history_override: ignore config and use this object as the task history",
                        "functions": [
                            "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_override: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')\n    self._make_task = functools.partial(Task, disable_failures=self._config.disable_failures, disable_hard_timeout=self._config.disable_hard_timeout, disable_window=self._config.disable_window)",
                            "def load(self):\n    self._state.load()",
                            "def dump(self):\n    self._state.dump()",
                            "def prune(self):\n    logger.info('Starting pruning of task graph')\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.info('Worker %s timed out (no contact for >=%ss)', worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n    self._state.inactivate_workers(remove_workers)\n    assistant_ids = set((w.id for w in self._state.get_assistants()))\n    remove_tasks = []\n    if assistant_ids:\n        necessary_tasks = self._state.get_necessary_tasks()\n    else:\n        necessary_tasks = ()\n    for task in self._state.get_active_tasks():\n        if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n            remove_tasks.append(task.id)\n    self._state.inactivate_tasks(remove_tasks)\n    logger.info('Done pruning task graph')",
                            "def update(self, worker_id, worker_reference=None):\n    \"\"\"\n    Keep track of whenever the worker was last active.\n    \"\"\"\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference)",
                            "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                            "def add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    worker_id = kwargs['worker']\n    self.update(worker_id)\n    task = self._state.get_task(task_id, setdefault=self._make_task(task_id=task_id, status=PENDING, deps=deps, resources=resources, priority=priority, family=family, module=module, params=params))\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n    if task.remove is not None:\n        task.remove = None\n    if not (task.status == RUNNING and status == PENDING):\n        if status == PENDING or status != task.status:\n            self._update_task_history(task_id, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n        if status == FAILED:\n            task.retry = time.time() + self._config.retry_delay\n    if deps is not None:\n        task.deps = set(deps)\n    if new_deps is not None:\n        task.deps.update(new_deps)\n    if resources is not None:\n        task.resources = resources\n    if not assistant:\n        task.stakeholders.add(worker_id)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n    self._update_priority(task, priority, worker_id)\n    if runnable:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n    if expl is not None:\n        task.expl = expl",
                            "def add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                            "def update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                            "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                            "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks():\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    used_resources[resource] += amount\n    return used_resources",
                            "def _rank(self, among_tasks):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n    dependents = collections.defaultdict(int)\n\n    def not_done(t):\n        task = self._state.get_task(t, default=None)\n        return task is None or task.status != DONE\n    for task in among_tasks:\n        if task.status != DONE:\n            deps = list(filter(not_done, task.deps))\n            inverse_num_deps = 1.0 / max(len(deps), 1)\n            for dep in deps:\n                dependents[dep] += inverse_num_deps\n    return lambda task: (task.priority, dependents[task.id], -task.time)",
                            "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                            "def get_work(self, host=None, assistant=False, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id, {'host': host})\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    best_task = None\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        greedy_workers = dict(((worker.id, worker.info.get('workers', 1)) for worker in self._state.get_active_workers()))\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n    for task in tasks:\n        upstream_status = self._upstream_status(task.id, upstream_table)\n        in_workers = assistant and task.workers or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n        if task.status == PENDING and in_workers and (upstream_status != UPSTREAM_DISABLED):\n            locally_pending_tasks += 1\n            if len(task.workers) == 1 and (not assistant):\n                n_unique_pending += 1\n        if task.status == RUNNING and task.worker_running in greedy_workers:\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems(task.resources or {}):\n                greedy_resources[resource] += amount\n        if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        greedy_workers[task_worker] -= 1\n                        for resource, amount in six.iteritems(task.resources or {}):\n                            greedy_resources[resource] += amount\n                        break\n    reply = {'n_pending_tasks': locally_pending_tasks, 'running_tasks': running_tasks, 'task_id': None, 'n_unique_pending': n_unique_pending}\n    if best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task.id, RUNNING, host=host)\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n    return reply",
                            "def ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id)",
                            "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n        while task_stack:\n            dep_id = task_stack.pop()\n            if self._state.has_task(dep_id):\n                dep = self._state.get_task(dep_id)\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack = task_stack + [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                    upstream_status.append('')\n                    status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                            "def _serialize_task(self, task_id, include_deps=True):\n    task = self._state.get_task(task_id)\n    ret = {'status': task.status, 'workers': list(task.workers), 'worker_running': task.worker_running, 'time_running': getattr(task, 'time_running', None), 'start_time': task.time, 'params': task.params, 'name': task.family, 'priority': task.priority, 'resources': task.resources}\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps)\n    return ret",
                            "def graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    for task in self._state.get_active_tasks():\n        serialized[task.id] = self._serialize_task(task.id)\n    return serialized",
                            "def _recurse_deps(self, task_id, serialized):\n    if task_id not in serialized:\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.warn('Missing task for id [%s]', task_id)\n            try:\n                family, _, param_str = task_id.rstrip(')').partition('(')\n                params = dict((param.split('=') for param in param_str.split(', ')))\n            except BaseException:\n                family, params = ('', {})\n            serialized[task_id] = {'deps': [], 'status': UNKNOWN, 'workers': [], 'start_time': UNKNOWN, 'params': params, 'name': family, 'priority': 0}\n        else:\n            serialized[task_id] = self._serialize_task(task_id)\n            for dep in task.deps:\n                self._recurse_deps(dep, serialized)",
                            "def dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._recurse_deps(task_id, serialized)\n    return serialized",
                            "def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}\n    if search is None:\n        filter_func = lambda _: True\n    else:\n        terms = search.split()\n        filter_func = lambda t: all((term in t.id for term in terms))\n    for task in filter(filter_func, self._state.get_active_tasks(status)):\n        if task.status != PENDING or not upstream_status or upstream_status == self._upstream_status(task.id, upstream_status_table):\n            serialized = self._serialize_task(task.id, False)\n            result[task.id] = serialized\n    if limit and len(result) > self._config.max_shown_tasks:\n        return {'num_tasks': len(result)}\n    return result",
                            "def worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [dict(name=worker.id, last_active=worker.last_active, started=getattr(worker, 'started', None), **worker.info) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_pending_tasks():\n            if task.status == RUNNING and task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n            elif task.status == PENDING:\n                for worker in task.workers:\n                    num_pending[worker] += 1\n                if len(task.workers) == 1:\n                    num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                            "def inverse_dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._traverse_inverse_deps(task_id, serialized)\n    return serialized",
                            "def _traverse_inverse_deps(self, task_id, serialized):\n    stack = [task_id]\n    serialized[task_id] = self._serialize_task(task_id)\n    while len(stack) > 0:\n        curr_id = stack.pop()\n        for task in self._state.get_active_tasks():\n            if curr_id in task.deps:\n                serialized[curr_id]['deps'].append(task.id)\n                if task.id not in serialized:\n                    serialized[task.id] = self._serialize_task(task.id)\n                    serialized[task.id]['deps'] = []\n                    stack.append(task.id)",
                            "def task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, False)\n            result[task.status][task.id] = serialized\n    return result",
                            "def re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                            "def fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        return {'taskId': task_id, 'error': self._state.get_task(task_id).expl}\n    else:\n        return {'taskId': task_id, 'error': ''}",
                            "def _update_task_history(self, task_id, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = status == DONE\n            self._task_history.task_finished(task_id, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task_id)\n        elif status == RUNNING:\n            self._task_history.task_started(task_id, host)\n    except BaseException:\n        logger.warning('Error saving Task history', exc_info=True)",
                            "@property\ndef task_history(self):\n    return self._task_history",
                            "def not_done(t):\n    task = self._state.get_task(t, default=None)\n    return task is None or task.status != DONE"
                        ],
                        "constructor_variables": [
                            "_make_task",
                            "_state",
                            "_resources",
                            "_task_history",
                            "_config"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)",
                            "load(self)",
                            "dump(self)",
                            "prune(self)",
                            "update(self, worker_id, worker_reference=None)",
                            "_update_priority(self, task, prio, worker)",
                            "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, **kwargs)",
                            "add_worker(self, worker, info, **kwargs)",
                            "update_resources(self, **resources)",
                            "_has_resources(self, needed_resources, used_resources)",
                            "_used_resources(self)",
                            "_rank(self, among_tasks)",
                            "_schedulable(self, task)",
                            "get_work(self, host=None, assistant=False, **kwargs)",
                            "ping(self, **kwargs)",
                            "_upstream_status(self, task_id, upstream_status_table)",
                            "_serialize_task(self, task_id, include_deps=True)",
                            "graph(self, **kwargs)",
                            "_recurse_deps(self, task_id, serialized)",
                            "dep_graph(self, task_id, **kwargs)",
                            "task_list(self, status, upstream_status, limit=True, search=None, **kwargs)",
                            "worker_list(self, include_running=True, **kwargs)",
                            "inverse_dep_graph(self, task_id, **kwargs)",
                            "_traverse_inverse_deps(self, task_id, serialized)",
                            "task_search(self, task_str, **kwargs)",
                            "re_enable_task(self, task_id)",
                            "fetch_error(self, task_id, **kwargs)",
                            "_update_task_history(self, task_id, status, host=None)",
                            "task_history(self)",
                            "not_done(t)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "Task({'id': 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': set(), 'status': 'RUNNING', 'time': 1702229487.299409, 'retry': None, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229487.3026292, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestExternalFileTask', 'module': 'worker_external_task_test', 'params': {'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x107964070>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)': 'UPSTREAM_MISSING_INPUT', 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)': 'UPSTREAM_MISSING_INPUT'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x10794feb0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x1079646d0>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{'salt': '857383262', 'workers': 1, 'host': 'boyudeMacBook-Pro.local', 'username': 'jerry', 'pid': 14414, 'first_task': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[Task({'id': 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': set(), 'status': 'RUNNING', 'time': 1702229487.299409, 'retry': None, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229487.3026292, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestExternalFileTask', 'module': 'worker_external_task_test', 'params': {'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x107964070>, 'scheduler_disable_time': None}), Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'PENDING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x10796c7c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'PENDING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": "'UPSTREAM_MISSING_INPUT'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "104"
                                },
                                "in_workers": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "{'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x10792d580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10796c780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 2, 'running_tasks': [], 'task_id': 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)', 'n_unique_pending': 2, 'task_family': 'TestExternalFileTask', 'task_module': 'worker_external_task_test', 'task_params': {'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "7"
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "best_task.time_running": {
                                    "variable_value": "1702229487.3026292",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "121"
                                },
                                "best_task.family": {
                                    "variable_value": "'TestExternalFileTask'",
                                    "variable_type": "str",
                                    "variable_shape": "20"
                                },
                                "best_task.params": {
                                    "variable_value": "{'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)': 'UPSTREAM_FAILED', 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)': 'UPSTREAM_FAILED'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x10794feb0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x1079852b0>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{'salt': '857383262', 'workers': 1, 'host': 'boyudeMacBook-Pro.local', 'username': 'jerry', 'pid': 14414, 'first_task': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'PENDING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x10797ae80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'PENDING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": "'UPSTREAM_FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "104"
                                },
                                "in_workers": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "{'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x1079657c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10797af00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 1, 'running_tasks': [], 'task_id': None, 'n_unique_pending': 1}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "Task({'id': 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': set(), 'status': 'RUNNING', 'time': 1702229487.299409, 'retry': 1702229487.315174, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229488.424544, 'expl': '', 'priority': 0, 'resources': {}, 'family': 'TestExternalFileTask', 'module': 'worker_external_task_test', 'params': {'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x107964070>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)': 'UPSTREAM_MISSING_INPUT', 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)': 'UPSTREAM_MISSING_INPUT'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x10794feb0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x107985b50>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{'salt': '857383262', 'workers': 1, 'host': 'boyudeMacBook-Pro.local', 'username': 'jerry', 'pid': 14414, 'first_task': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[Task({'id': 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': set(), 'status': 'RUNNING', 'time': 1702229487.299409, 'retry': 1702229487.315174, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229488.424544, 'expl': '', 'priority': 0, 'resources': {}, 'family': 'TestExternalFileTask', 'module': 'worker_external_task_test', 'params': {'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x107964070>, 'scheduler_disable_time': None}), Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'PENDING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x107987880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'PENDING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": "'UPSTREAM_MISSING_INPUT'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "104"
                                },
                                "in_workers": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "{'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x107963780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x1079877c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 2, 'running_tasks': [], 'task_id': 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)', 'n_unique_pending': 2, 'task_family': 'TestExternalFileTask', 'task_module': 'worker_external_task_test', 'task_params': {'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "7"
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "best_task.time_running": {
                                    "variable_value": "1702229488.424544",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "121"
                                },
                                "best_task.family": {
                                    "variable_value": "'TestExternalFileTask'",
                                    "variable_type": "str",
                                    "variable_shape": "20"
                                },
                                "best_task.params": {
                                    "variable_value": "{'path': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep', 'times_to_call': '3'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'RUNNING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229488.434415, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)': '', 'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)': ''}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x10794feb0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x10798e3d0>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{'salt': '857383262', 'workers': 1, 'host': 'boyudeMacBook-Pro.local', 'username': 'jerry', 'pid': 14414, 'first_task': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'RUNNING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229488.434415, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x1079921c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'stakeholders': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'workers': {'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}, 'deps': {'TestExternalFileTask(path=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka/test.dep, times_to_call=3)'}, 'status': 'RUNNING', 'time': 1702229487.299317, 'retry': None, 'remove': None, 'worker_running': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)', 'time_running': 1702229488.434415, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'TestTask', 'module': 'worker_external_task_test', 'params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}, 'disable_failures': 2, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x10794ffd0>, 'scheduler_disable_time': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "104"
                                },
                                "in_workers": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "{'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task.status": {
                                    "variable_value": "'RUNNING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x107963800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x107992140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 1, 'running_tasks': [], 'task_id': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)', 'n_unique_pending': 1, 'task_family': 'TestTask', 'task_module': 'worker_external_task_test', 'task_params': {'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "7"
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "best_task.time_running": {
                                    "variable_value": "1702229488.434415",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'",
                                    "variable_type": "str",
                                    "variable_shape": "104"
                                },
                                "best_task.family": {
                                    "variable_value": "'TestTask'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "best_task.params": {
                                    "variable_value": "{'tempdir': '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka', 'complete_after': '3'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=0.01, remove_delay=3, worker_disconnect_delay=3, state_path=/var/lib/luigi-server/state.pickle, disable_window=5, disable_failures=2, disable_hard_timeout=None, disable_persist=3, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, visualization_graph=svg, prune_on_get_work=True)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>",
                                    "variable_type": "CentralPlannerScheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method CentralPlannerScheduler.prune of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "kwargs": {
                                    "variable_value": "{'worker': 'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.update": {
                                    "variable_value": "<bound method CentralPlannerScheduler.update of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'boyudeMacBook-Pro.local'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method CentralPlannerScheduler.add_worker of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x10794feb0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x107761f40>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x107985730>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x10794feb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._used_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'Worker(salt=857383262, workers=1, host=boyudeMacBook-Pro.local, username=jerry, pid=14414)'",
                                    "variable_type": "str",
                                    "variable_shape": "90"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{'salt': '857383262', 'workers': 1, 'host': 'boyudeMacBook-Pro.local', 'username': 'jerry', 'pid': 14414, 'first_task': 'TestTask(tempdir=/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/luigi-test-h47bjwka, complete_after=3)'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x107999580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method CentralPlannerScheduler._rank of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method CentralPlannerScheduler._upstream_status of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x10797adc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method CentralPlannerScheduler._schedulable of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method CentralPlannerScheduler._has_resources of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x107999500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 0, 'running_tasks': [], 'task_id': None, 'n_unique_pending': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method CentralPlannerScheduler._update_task_history of <luigi.scheduler.CentralPlannerScheduler object at 0x1078dcdc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x",
                "def _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default",
                "def __init__(self, window):\n    \"\"\"\n    Initialize with the given window.\n\n    :param window: how long to track failures for, as a float (number of seconds).\n    \"\"\"\n    self.window = window\n    self.failures = collections.deque()\n    self.first_failure_time = None",
                "def add_failure(self):\n    \"\"\"\n    Add a failure event with the current timestamp.\n    \"\"\"\n    failure_time = time.time()\n\n    if not self.first_failure_time:\n        self.first_failure_time = failure_time\n\n    self.failures.append(failure_time)",
                "def num_failures(self):\n    \"\"\"\n    Return the number of failures in the window.\n    \"\"\"\n    min_time = time.time() - self.window\n\n    while self.failures and fix_time(self.failures[0]) < min_time:\n        self.failures.popleft()\n\n    return len(self.failures)",
                "def clear(self):\n    \"\"\"\n    Clear the failure queue.\n    \"\"\"\n    self.failures.clear()",
                "def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n             params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None):\n    self.id = task_id\n    self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n    self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n    if deps is None:\n        self.deps = set()\n    else:\n        self.deps = set(deps)\n    self.status = status  # PENDING, RUNNING, FAILED or DONE\n    self.time = time.time()  # Timestamp when task was first added\n    self.retry = None\n    self.remove = None\n    self.worker_running = None  # the worker id that is currently running the task or None\n    self.time_running = None  # Timestamp when picked up by worker\n    self.expl = None\n    self.priority = priority\n    self.resources = _get_default(resources, {})\n    self.family = family\n    self.module = module\n    self.params = _get_default(params, {})\n    self.disable_failures = disable_failures\n    self.disable_hard_timeout = disable_hard_timeout\n    self.failures = Failures(disable_window)\n    self.scheduler_disable_time = None",
                "def __repr__(self):\n    return \"Task(%r)\" % vars(self)",
                "def add_failure(self):\n    self.failures.add_failure()",
                "def has_excessive_failures(self):\n\n    excessive_failures = False\n\n    if (self.failures.first_failure_time is not None and\n            self.disable_hard_timeout):\n        if (time.time() >= self.failures.first_failure_time +\n                self.disable_hard_timeout):\n            excessive_failures = True\n\n    if self.failures.num_failures() >= self.disable_failures:\n        excessive_failures = True\n\n    return excessive_failures",
                "def can_disable(self):\n    return (self.disable_failures is not None or\n            self.disable_hard_timeout is not None)",
                "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active  # seconds since epoch\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}",
                "def add_info(self, info):\n    self.info.update(info)",
                "def update(self, worker_reference):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()",
                "def prune(self, config):\n    # Delete workers that haven't said anything for a while (probably killed)\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                "def get_pending_tasks(self, state):\n    \"\"\"\n    Get PENDING (and RUNNING) tasks for this worker.\n\n    You have to pass in the state for optimization reasons.\n    \"\"\"\n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n    else:\n        return state.get_pending_tasks()",
                "def is_trivial_worker(self, state):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements.\n\n    We have to pass the state parameter for optimization reasons.\n    \"\"\"\n    if self.assistant:\n        return False\n    return all(not task.resources for task in self.get_pending_tasks(state))",
                "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                "def __str__(self):\n    return self.id",
                "def __init__(self, state_path):\n    self._state_path = state_path\n    self._tasks = {}  # map from id to a Task object\n    self._status_tasks = collections.defaultdict(dict)\n    self._active_workers = {}  # map from id to a Worker object",
                "def dump(self):\n    state = (self._tasks, self._active_workers)\n    try:\n        with open(self._state_path, 'wb') as fobj:\n            pickle.dump(state, fobj)\n    except IOError:\n        logger.warning(\"Failed saving scheduler state\", exc_info=1)\n    else:\n        logger.info(\"Saved state in %s\", self._state_path)",
                "def load(self):\n    if os.path.exists(self._state_path):\n        logger.info(\"Attempting to load state from %s\", self._state_path)\n        try:\n            with open(self._state_path, 'rb') as fobj:\n                state = pickle.load(fobj)\n        except BaseException:\n            logger.exception(\"Error when loading state. Starting from clean slate.\")\n            return\n\n        self._tasks, self._active_workers = state\n        self._status_tasks = collections.defaultdict(dict)\n        for task in six.itervalues(self._tasks):\n            self._status_tasks[task.status][task.id] = task\n\n        # Convert from old format\n        # TODO: this is really ugly, we need something more future-proof\n        # Every time we add an attribute to the Worker class, this code needs to be updated\n        for k, v in six.iteritems(self._active_workers):\n            if isinstance(v, float):\n                self._active_workers[k] = Worker(worker_id=k, last_active=v)\n\n        if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n            # If you load from an old format where Workers don't contain tasks.\n            for k, worker in six.iteritems(self._active_workers):\n                worker.tasks = set()\n            for task in six.itervalues(self._tasks):\n                for worker_id in task.workers:\n                    self._active_workers[worker_id].tasks.add(task)\n    else:\n        logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)",
                "def get_active_tasks(self, status=None):\n    if status:\n        for task in six.itervalues(self._status_tasks[status]):\n            yield task\n    else:\n        for task in six.itervalues(self._tasks):\n            yield task",
                "def get_running_tasks(self):\n    return six.itervalues(self._status_tasks[RUNNING])",
                "def get_pending_tasks(self):\n    return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                         for status in [PENDING, RUNNING])",
                "def num_pending_tasks(self):\n    \"\"\"\n    Return how many tasks are PENDING + RUNNING. O(1).\n    \"\"\"\n    return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])",
                "def get_task(self, task_id, default=None, setdefault=None):\n    if setdefault:\n        task = self._tasks.setdefault(task_id, setdefault)\n        self._status_tasks[task.status][task.id] = task\n        return task\n    else:\n        return self._tasks.get(task_id, default)",
                "def has_task(self, task_id):\n    return task_id in self._tasks",
                "def re_enable(self, task, config=None):\n    task.scheduler_disable_time = None\n    task.failures.clear()\n    if config:\n        self.set_status(task, FAILED, config)\n        task.failures.clear()",
                "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    # not sure why we have SUSPENDED, as it can never be set\n    if new_status == SUSPENDED:\n        new_status = PENDING\n\n    if new_status == DISABLED and task.status == RUNNING:\n        return\n\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n\n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None:\n            return\n\n    if new_status == FAILED and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n\n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status",
                "def prune(self, task, config, assistants):\n    remove = False\n\n    # Mark tasks with no remaining active stakeholders for deletion\n    if not task.stakeholders:\n        if task.remove is None:\n            logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                        \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n            task.remove = time.time() + config.remove_delay\n\n    # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n    if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n        logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                    \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                    config.retry_delay)\n        task.worker_running = None\n        self.set_status(task, FAILED, config)\n        task.retry = time.time() + config.retry_delay\n\n    # Re-enable task after the disable time expires\n    if task.status == DISABLED and task.scheduler_disable_time:\n        if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n            self.re_enable(task, config)\n\n    # Remove tasks that have no stakeholders\n    if task.remove and time.time() > task.remove:\n        logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n        remove = True\n\n    # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n        self.set_status(task, PENDING, config)\n\n    return remove",
                "def inactivate_tasks(self, delete_tasks):\n    # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n    # but with a pluggable state storage, you might very well want to keep some history of\n    # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n    for task in delete_tasks:\n        task_obj = self._tasks.pop(task)\n        self._status_tasks[task_obj.status].pop(task)",
                "def get_active_workers(self, last_active_lt=None):\n    for worker in six.itervalues(self._active_workers):\n        if last_active_lt is not None and worker.last_active >= last_active_lt:\n            continue\n        yield worker",
                "def get_assistants(self, last_active_lt=None):\n    return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))",
                "def get_worker_ids(self):\n    return self._active_workers.keys()  # only used for unit tests",
                "def get_worker(self, worker_id):\n    return self._active_workers.setdefault(worker_id, Worker(worker_id))",
                "def inactivate_workers(self, delete_workers):\n    # Mark workers as inactive\n    for worker in delete_workers:\n        self._active_workers.pop(worker)\n\n    # remove workers from tasks\n    for task in self.get_active_tasks():\n        task.stakeholders.difference_update(delete_workers)\n        task.workers.difference_update(delete_workers)",
                "def get_necessary_tasks(self):\n    necessary_tasks = set()\n    for task in self.get_active_tasks():\n        if task.status not in (DONE, DISABLED) or \\\n                getattr(task, 'scheduler_disable_time', None) is not None:\n            necessary_tasks.update(task.deps)\n            necessary_tasks.add(task.id)\n    return necessary_tasks",
                "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_override: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n    self._make_task = functools.partial(\n        Task, disable_failures=self._config.disable_failures,\n        disable_hard_timeout=self._config.disable_hard_timeout,\n        disable_window=self._config.disable_window)",
                "def load(self):\n    self._state.load()",
                "def dump(self):\n    self._state.dump()",
                "def prune(self):\n    logger.info(\"Starting pruning of task graph\")\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    self._state.inactivate_workers(remove_workers)\n\n    assistant_ids = set(w.id for w in self._state.get_assistants())\n    remove_tasks = []\n\n    if assistant_ids:\n        necessary_tasks = self._state.get_necessary_tasks()\n    else:\n        necessary_tasks = ()\n\n    for task in self._state.get_active_tasks():\n        if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n            remove_tasks.append(task.id)\n\n    self._state.inactivate_tasks(remove_tasks)\n\n    logger.info(\"Done pruning task graph\")",
                "def update(self, worker_id, worker_reference=None):\n    \"\"\"\n    Keep track of whenever the worker was last active.\n    \"\"\"\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference)",
                "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                "def add_task(self, task_id=None, status=PENDING, runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    worker_id = kwargs['worker']\n    self.update(worker_id)\n\n    task = self._state.get_task(task_id, setdefault=self._make_task(\n        task_id=task_id, status=PENDING, deps=deps, resources=resources,\n        priority=priority, family=family, module=module, params=params))\n\n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n\n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n\n    if not (task.status == RUNNING and status == PENDING):\n        # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n        if status == PENDING or status != task.status:\n            # Update the DB only if there was a acctual change, to prevent noise.\n            # We also check for status == PENDING b/c that's the default value\n            # (so checking for status != task.status woule lie)\n            self._update_task_history(task_id, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n        if status == FAILED:\n            task.retry = time.time() + self._config.retry_delay\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if not assistant:\n        task.stakeholders.add(worker_id)\n\n        # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n        # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    if runnable:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n\n    if expl is not None:\n        task.expl = expl",
                "def add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                "def update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks():\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    used_resources[resource] += amount\n    return used_resources",
                "def _rank(self, among_tasks):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n    dependents = collections.defaultdict(int)\n\n    def not_done(t):\n        task = self._state.get_task(t, default=None)\n        return task is None or task.status != DONE\n    for task in among_tasks:\n        if task.status != DONE:\n            deps = list(filter(not_done, task.deps))\n            inverse_num_deps = 1.0 / max(len(deps), 1)\n            for dep in deps:\n                dependents[dep] += inverse_num_deps\n\n    return lambda task: (task.priority, dependents[task.id], -task.time)",
                "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                "def get_work(self, host=None, assistant=False, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    worker_id = kwargs['worker']\n    # Return remaining tasks that have no FAILED descendents\n    self.update(worker_id, {'host': host})\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    best_task = None\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in self._state.get_active_workers())\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n\n    for task in tasks:\n        upstream_status = self._upstream_status(task.id, upstream_table)\n        in_workers = (assistant and task.workers) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n            locally_pending_tasks += 1\n            if len(task.workers) == 1 and not assistant:\n                n_unique_pending += 1\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task.id, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply",
                "def ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id)",
                "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n\n        while task_stack:\n            dep_id = task_stack.pop()\n            if self._state.has_task(dep_id):\n                dep = self._state.get_task(dep_id)\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack = task_stack + [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''  # will be updated postorder\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    # This is the postorder update step when we set the\n                    # status based on the previously calculated child elements\n                    upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                    upstream_status.append('')  # to handle empty list\n                    status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                "def _serialize_task(self, task_id, include_deps=True):\n    task = self._state.get_task(task_id)\n    ret = {\n        'status': task.status,\n        'workers': list(task.workers),\n        'worker_running': task.worker_running,\n        'time_running': getattr(task, \"time_running\", None),\n        'start_time': task.time,\n        'params': task.params,\n        'name': task.family,\n        'priority': task.priority,\n        'resources': task.resources,\n    }\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps)\n    return ret",
                "def graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    for task in self._state.get_active_tasks():\n        serialized[task.id] = self._serialize_task(task.id)\n    return serialized",
                "def _recurse_deps(self, task_id, serialized):\n    if task_id not in serialized:\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.warn('Missing task for id [%s]', task_id)\n\n            # try to infer family and params from task_id\n            try:\n                family, _, param_str = task_id.rstrip(')').partition('(')\n                params = dict(param.split('=') for param in param_str.split(', '))\n            except BaseException:\n                family, params = '', {}\n            serialized[task_id] = {\n                'deps': [],\n                'status': UNKNOWN,\n                'workers': [],\n                'start_time': UNKNOWN,\n                'params': params,\n                'name': family,\n                'priority': 0,\n            }\n        else:\n            serialized[task_id] = self._serialize_task(task_id)\n            for dep in task.deps:\n                self._recurse_deps(dep, serialized)",
                "def dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._recurse_deps(task_id, serialized)\n    return serialized",
                "def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}  # used to memoize upstream status\n    if search is None:\n        filter_func = lambda _: True\n    else:\n        terms = search.split()\n        filter_func = lambda t: all(term in t.id for term in terms)\n    for task in filter(filter_func, self._state.get_active_tasks(status)):\n        if (task.status != PENDING or not upstream_status or\n                upstream_status == self._upstream_status(task.id, upstream_status_table)):\n            serialized = self._serialize_task(task.id, False)\n            result[task.id] = serialized\n    if limit and len(result) > self._config.max_shown_tasks:\n        return {'num_tasks': len(result)}\n    return result",
                "def worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [\n        dict(\n            name=worker.id,\n            last_active=worker.last_active,\n            started=getattr(worker, 'started', None),\n            **worker.info\n        ) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_pending_tasks():\n            if task.status == RUNNING and task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n            elif task.status == PENDING:\n                for worker in task.workers:\n                    num_pending[worker] += 1\n                if len(task.workers) == 1:\n                    num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                "def inverse_dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._traverse_inverse_deps(task_id, serialized)\n    return serialized",
                "def _traverse_inverse_deps(self, task_id, serialized):\n    stack = [task_id]\n    serialized[task_id] = self._serialize_task(task_id)\n    while len(stack) > 0:\n        curr_id = stack.pop()\n        for task in self._state.get_active_tasks():\n            if curr_id in task.deps:\n                serialized[curr_id][\"deps\"].append(task.id)\n                if task.id not in serialized:\n                    serialized[task.id] = self._serialize_task(task.id)\n                    serialized[task.id][\"deps\"] = []\n                    stack.append(task.id)",
                "def task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, False)\n            result[task.status][task.id] = serialized\n    return result",
                "def re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                "def fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n    else:\n        return {\"taskId\": task_id, \"error\": \"\"}",
                "def _update_task_history(self, task_id, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = (status == DONE)\n            self._task_history.task_finished(task_id, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task_id)\n        elif status == RUNNING:\n            self._task_history.task_started(task_id, host)\n    except BaseException:\n        logger.warning(\"Error saving Task history\", exc_info=True)",
                "@property\ndef task_history(self):\n    # Used by server.py to expose the calls\n    return self._task_history",
                "def not_done(t):\n    task = self._state.get_task(t, default=None)\n    return task is None or task.status != DONE"
            ],
            "inscope_function_signatures": [
                "fix_time(x)",
                "_get_default(x, default)",
                "__init__(self, window)",
                "add_failure(self)",
                "num_failures(self)",
                "clear(self)",
                "__init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None, params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None)",
                "__repr__(self)",
                "add_failure(self)",
                "has_excessive_failures(self)",
                "can_disable(self)",
                "__init__(self, worker_id, last_active=None)",
                "add_info(self, info)",
                "update(self, worker_reference)",
                "prune(self, config)",
                "get_pending_tasks(self, state)",
                "is_trivial_worker(self, state)",
                "assistant(self)",
                "__str__(self)",
                "__init__(self, state_path)",
                "dump(self)",
                "load(self)",
                "get_active_tasks(self, status=None)",
                "get_running_tasks(self)",
                "get_pending_tasks(self)",
                "num_pending_tasks(self)",
                "get_task(self, task_id, default=None, setdefault=None)",
                "has_task(self, task_id)",
                "re_enable(self, task, config=None)",
                "set_status(self, task, new_status, config=None)",
                "prune(self, task, config, assistants)",
                "inactivate_tasks(self, delete_tasks)",
                "get_active_workers(self, last_active_lt=None)",
                "get_assistants(self, last_active_lt=None)",
                "get_worker_ids(self)",
                "get_worker(self, worker_id)",
                "inactivate_workers(self, delete_workers)",
                "get_necessary_tasks(self)",
                "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)",
                "load(self)",
                "dump(self)",
                "prune(self)",
                "update(self, worker_id, worker_reference=None)",
                "_update_priority(self, task, prio, worker)",
                "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, **kwargs)",
                "add_worker(self, worker, info, **kwargs)",
                "update_resources(self, **resources)",
                "_has_resources(self, needed_resources, used_resources)",
                "_used_resources(self)",
                "_rank(self, among_tasks)",
                "_schedulable(self, task)",
                "get_work(self, host=None, assistant=False, **kwargs)",
                "ping(self, **kwargs)",
                "_upstream_status(self, task_id, upstream_status_table)",
                "_serialize_task(self, task_id, include_deps=True)",
                "graph(self, **kwargs)",
                "_recurse_deps(self, task_id, serialized)",
                "dep_graph(self, task_id, **kwargs)",
                "task_list(self, status, upstream_status, limit=True, search=None, **kwargs)",
                "worker_list(self, include_running=True, **kwargs)",
                "inverse_dep_graph(self, task_id, **kwargs)",
                "_traverse_inverse_deps(self, task_id, serialized)",
                "task_search(self, task_str, **kwargs)",
                "re_enable_task(self, task_id)",
                "fetch_error(self, task_id, **kwargs)",
                "_update_task_history(self, task_id, status, host=None)",
                "task_history(self)",
                "not_done(t)"
            ],
            "variables_in_file": {
                "ImportError": [
                    27
                ],
                "logger": [
                    994,
                    422,
                    554,
                    300,
                    45,
                    302,
                    335,
                    428,
                    855,
                    307,
                    531,
                    535,
                    312,
                    442
                ],
                "logging.getLogger": [
                    45
                ],
                "logging": [
                    45
                ],
                "object": [
                    168,
                    48,
                    114,
                    279,
                    222
                ],
                "add_task": [
                    54
                ],
                "NotImplemented": [
                    56,
                    54,
                    55
                ],
                "get_work": [
                    55
                ],
                "ping": [
                    56
                ],
                "UPSTREAM_RUNNING": [
                    73,
                    65,
                    58
                ],
                "UPSTREAM_MISSING_INPUT": [
                    66,
                    59,
                    74
                ],
                "UPSTREAM_FAILED": [
                    72,
                    67,
                    60
                ],
                "UPSTREAM_DISABLED": [
                    75,
                    68,
                    61,
                    751
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    70,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    821,
                    70
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    70
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    814,
                    71
                ],
                "FAILED": [
                    613,
                    72,
                    395,
                    432,
                    373,
                    377,
                    986,
                    446
                ],
                "RUNNING": [
                    384,
                    991,
                    356,
                    742,
                    73,
                    427,
                    783,
                    786,
                    756,
                    920,
                    665,
                    346,
                    605,
                    350,
                    255
                ],
                "PENDING": [
                    576,
                    350,
                    897,
                    356,
                    612,
                    447,
                    74,
                    810,
                    607,
                    591,
                    751,
                    989,
                    691,
                    922,
                    605,
                    382,
                    255
                ],
                "DISABLED": [
                    384,
                    387,
                    838,
                    487,
                    75,
                    973,
                    399,
                    436,
                    409
                ],
                "Config": [
                    79
                ],
                "retry_delay": [
                    82
                ],
                "parameter.FloatParameter": [
                    82,
                    83,
                    84
                ],
                "parameter": [
                    97,
                    98,
                    100,
                    102,
                    82,
                    83,
                    84,
                    85,
                    89,
                    91,
                    93,
                    95
                ],
                "remove_delay": [
                    83
                ],
                "worker_disconnect_delay": [
                    84
                ],
                "state_path": [
                    289,
                    85
                ],
                "parameter.Parameter": [
                    85,
                    102
                ],
                "disable_window": [
                    89,
                    193
                ],
                "parameter.IntParameter": [
                    97,
                    89,
                    91,
                    93,
                    95
                ],
                "dict": [
                    96,
                    291,
                    963,
                    102,
                    860,
                    908,
                    734,
                    916,
                    316,
                    730,
                    90,
                    92,
                    94
                ],
                "disable_failures": [
                    91,
                    191
                ],
                "disable_hard_timeout": [
                    192,
                    93
                ],
                "disable_persist": [
                    95
                ],
                "max_shown_tasks": [
                    97
                ],
                "prune_done_tasks": [
                    98
                ],
                "parameter.BoolParameter": [
                    98,
                    100
                ],
                "record_task_history": [
                    100
                ],
                "visualization_graph": [
                    102
                ],
                "isinstance": [
                    108,
                    324
                ],
                "x": [
                    162,
                    163,
                    108,
                    109,
                    111
                ],
                "datetime.datetime": [
                    108
                ],
                "datetime": [
                    108
                ],
                "time.mktime": [
                    109
                ],
                "time": [
                    614,
                    231,
                    136,
                    424,
                    109,
                    398,
                    208,
                    241,
                    433,
                    147,
                    180,
                    245,
                    437,
                    785,
                    441,
                    446
                ],
                "x.timetuple": [
                    109
                ],
                "self.window": [
                    128,
                    147
                ],
                "self": [
                    512,
                    513,
                    515,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    525,
                    528,
                    533,
                    534,
                    535,
                    538,
                    540,
                    544,
                    548,
                    549,
                    552,
                    560,
                    572,
                    574,
                    588,
                    590,
                    611,
                    612,
                    614,
                    631,
                    634,
                    638,
                    128,
                    129,
                    130,
                    644,
                    647,
                    648,
                    649,
                    138,
                    139,
                    141,
                    655,
                    147,
                    149,
                    150,
                    663,
                    152,
                    664,
                    158,
                    679,
                    172,
                    173,
                    174,
                    176,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    197,
                    200,
                    715,
                    717,
                    206,
                    207,
                    208,
                    209,
                    212,
                    726,
                    727,
                    728,
                    218,
                    219,
                    732,
                    733,
                    735,
                    737,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    740,
                    745,
                    236,
                    240,
                    241,
                    245,
                    761,
                    762,
                    254,
                    256,
                    267,
                    269,
                    783,
                    273,
                    786,
                    276,
                    797,
                    289,
                    290,
                    291,
                    292,
                    802,
                    295,
                    807,
                    297,
                    808,
                    302,
                    306,
                    307,
                    309,
                    826,
                    315,
                    316,
                    317,
                    318,
                    323,
                    325,
                    327,
                    329,
                    331,
                    333,
                    845,
                    335,
                    847,
                    848,
                    339,
                    853,
                    342,
                    346,
                    349,
                    356,
                    360,
                    361,
                    873,
                    875,
                    364,
                    878,
                    367,
                    880,
                    881,
                    373,
                    888,
                    896,
                    898,
                    899,
                    389,
                    901,
                    906,
                    913,
                    919,
                    921,
                    412,
                    413,
                    694,
                    936,
                    938,
                    939,
                    432,
                    944,
                    947,
                    438,
                    951,
                    447,
                    962,
                    964,
                    966,
                    456,
                    457,
                    460,
                    972,
                    974,
                    975,
                    466,
                    979,
                    980,
                    469,
                    472,
                    988,
                    477,
                    990,
                    480,
                    992,
                    486,
                    999,
                    508,
                    509
                ],
                "window": [
                    128
                ],
                "self.failures": [
                    129,
                    193,
                    200,
                    141,
                    206,
                    208,
                    212,
                    149,
                    150,
                    152,
                    158
                ],
                "collections.deque": [
                    129
                ],
                "collections": [
                    129,
                    291,
                    676,
                    963,
                    723,
                    916,
                    917,
                    662,
                    918,
                    729,
                    316
                ],
                "self.first_failure_time": [
                    130,
                    139,
                    138
                ],
                "failure_time": [
                    136,
                    139,
                    141
                ],
                "time.time": [
                    614,
                    231,
                    136,
                    424,
                    398,
                    208,
                    241,
                    433,
                    147,
                    180,
                    245,
                    437,
                    785,
                    441,
                    446
                ],
                "self.failures.append": [
                    141
                ],
                "min_time": [
                    147,
                    149
                ],
                "fix_time": [
                    149,
                    437
                ],
                "self.failures.popleft": [
                    150
                ],
                "len": [
                    929,
                    356,
                    901,
                    902,
                    684,
                    753,
                    945,
                    152,
                    925,
                    254
                ],
                "self.failures.clear": [
                    158
                ],
                "default": [
                    364,
                    165
                ],
                "self.id": [
                    276,
                    172,
                    228
                ],
                "task_id": [
                    800,
                    801,
                    802,
                    803,
                    938,
                    939,
                    172,
                    943,
                    944,
                    819,
                    826,
                    972,
                    590,
                    591,
                    975,
                    979,
                    852,
                    853,
                    980,
                    855,
                    982,
                    859,
                    988,
                    990,
                    863,
                    992,
                    611,
                    360,
                    873,
                    364,
                    367,
                    880,
                    881
                ],
                "self.stakeholders": [
                    173
                ],
                "set": [
                    485,
                    232,
                    617,
                    330,
                    173,
                    174,
                    176,
                    178,
                    540
                ],
                "self.workers": [
                    174
                ],
                "deps": [
                    616,
                    617,
                    683,
                    684,
                    685,
                    591,
                    175,
                    178
                ],
                "self.deps": [
                    176,
                    178
                ],
                "self.status": [
                    179
                ],
                "status": [
                    896,
                    611,
                    605,
                    612,
                    613,
                    991,
                    989,
                    338,
                    339,
                    179,
                    821,
                    822,
                    986,
                    987,
                    349,
                    350,
                    607
                ],
                "self.time": [
                    180
                ],
                "self.retry": [
                    181
                ],
                "self.remove": [
                    182
                ],
                "self.worker_running": [
                    183
                ],
                "self.time_running": [
                    184
                ],
                "self.expl": [
                    185
                ],
                "self.priority": [
                    186
                ],
                "priority": [
                    592,
                    186,
                    634,
                    631
                ],
                "self.resources": [
                    187
                ],
                "_get_default": [
                    600,
                    187,
                    190
                ],
                "resources": [
                    518,
                    649,
                    622,
                    623,
                    591,
                    187
                ],
                "self.family": [
                    188
                ],
                "family": [
                    869,
                    592,
                    596,
                    859,
                    188,
                    862
                ],
                "self.module": [
                    189
                ],
                "module": [
                    592,
                    189,
                    598
                ],
                "self.params": [
                    190
                ],
                "params": [
                    868,
                    190,
                    592,
                    600,
                    860,
                    862
                ],
                "self.disable_failures": [
                    218,
                    212,
                    191
                ],
                "self.disable_hard_timeout": [
                    192,
                    209,
                    219,
                    207
                ],
                "Failures": [
                    193
                ],
                "self.scheduler_disable_time": [
                    194
                ],
                "vars": [
                    197
                ],
                "self.failures.add_failure": [
                    200
                ],
                "excessive_failures": [
                    210,
                    204,
                    213,
                    215
                ],
                "self.failures.first_failure_time": [
                    208,
                    206
                ],
                "self.failures.num_failures": [
                    212
                ],
                "worker_id": [
                    637,
                    784,
                    796,
                    797,
                    560,
                    713,
                    587,
                    332,
                    333,
                    588,
                    715,
                    717,
                    726,
                    472,
                    228,
                    741,
                    626,
                    632,
                    634,
                    765,
                    638
                ],
                "self.reference": [
                    240,
                    229
                ],
                "self.last_active": [
                    241,
                    245,
                    230
                ],
                "last_active": [
                    230
                ],
                "self.started": [
                    231
                ],
                "self.tasks": [
                    232,
                    256,
                    254
                ],
                "self.info": [
                    233,
                    236,
                    273
                ],
                "self.info.update": [
                    236
                ],
                "info": [
                    644,
                    236
                ],
                "worker_reference": [
                    240,
                    561,
                    239
                ],
                "config.worker_disconnect_delay": [
                    245
                ],
                "config": [
                    407,
                    423,
                    424,
                    430,
                    432,
                    433,
                    404,
                    373,
                    372,
                    245,
                    406,
                    437,
                    378,
                    438,
                    508,
                    446,
                    447
                ],
                "state.num_pending_tasks": [
                    254
                ],
                "state": [
                    258,
                    295,
                    298,
                    269,
                    310,
                    315,
                    254
                ],
                "six.moves.filter": [
                    255
                ],
                "six.moves": [
                    255
                ],
                "six": [
                    323,
                    772,
                    327,
                    329,
                    331,
                    460,
                    656,
                    339,
                    342,
                    666,
                    758,
                    346,
                    349,
                    317,
                    255
                ],
                "task.status": [
                    384,
                    897,
                    387,
                    920,
                    665,
                    922,
                    412,
                    414,
                    680,
                    682,
                    427,
                    691,
                    436,
                    828,
                    446,
                    318,
                    838,
                    967,
                    973,
                    605,
                    607,
                    742,
                    487,
                    361,
                    751,
                    756,
                    255
                ],
                "task": [
                    548,
                    549,
                    550,
                    570,
                    571,
                    590,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    602,
                    603,
                    605,
                    607,
                    612,
                    614,
                    617,
                    620,
                    623,
                    626,
                    630,
                    634,
                    637,
                    638,
                    641,
                    664,
                    665,
                    666,
                    679,
                    680,
                    681,
                    682,
                    683,
                    688,
                    691,
                    693,
                    739,
                    740,
                    741,
                    742,
                    745,
                    746,
                    751,
                    753,
                    756,
                    757,
                    758,
                    761,
                    762,
                    763,
                    765,
                    255,
                    772,
                    269,
                    826,
                    828,
                    317,
                    318,
                    829,
                    830,
                    831,
                    832,
                    833,
                    834,
                    835,
                    836,
                    838,
                    839,
                    841,
                    331,
                    332,
                    333,
                    847,
                    848,
                    339,
                    340,
                    853,
                    342,
                    343,
                    854,
                    360,
                    361,
                    362,
                    874,
                    370,
                    371,
                    373,
                    374,
                    384,
                    896,
                    897,
                    387,
                    898,
                    389,
                    899,
                    900,
                    392,
                    395,
                    396,
                    397,
                    398,
                    401,
                    405,
                    919,
                    920,
                    921,
                    410,
                    922,
                    412,
                    413,
                    414,
                    923,
                    925,
                    926,
                    420,
                    421,
                    423,
                    424,
                    427,
                    429,
                    431,
                    432,
                    433,
                    947,
                    436,
                    437,
                    438,
                    948,
                    949,
                    441,
                    442,
                    950,
                    951,
                    952,
                    446,
                    447,
                    953,
                    964,
                    965,
                    966,
                    455,
                    456,
                    457,
                    967,
                    972,
                    973,
                    974,
                    480,
                    481,
                    482,
                    486,
                    487,
                    488,
                    489,
                    490
                ],
                "state.get_pending_tasks": [
                    258
                ],
                "self.assistant": [
                    267
                ],
                "all": [
                    269,
                    895
                ],
                "task.resources": [
                    762,
                    772,
                    836,
                    269,
                    623,
                    761,
                    758,
                    665,
                    666
                ],
                "self.get_pending_tasks": [
                    269
                ],
                "self.info.get": [
                    273
                ],
                "property": [
                    996,
                    271
                ],
                "self._state_path": [
                    289,
                    297,
                    302,
                    335,
                    306,
                    307,
                    309
                ],
                "self._tasks": [
                    290,
                    295,
                    360,
                    456,
                    331,
                    364,
                    367,
                    342,
                    315,
                    317
                ],
                "self._status_tasks": [
                    291,
                    356,
                    361,
                    457,
                    339,
                    413,
                    412,
                    346,
                    316,
                    349,
                    318
                ],
                "collections.defaultdict": [
                    291,
                    676,
                    963,
                    723,
                    916,
                    917,
                    662,
                    918,
                    729,
                    316
                ],
                "self._active_workers": [
                    323,
                    292,
                    325,
                    295,
                    327,
                    329,
                    460,
                    333,
                    469,
                    472,
                    315,
                    477
                ],
                "open": [
                    297,
                    309
                ],
                "fobj": [
                    297,
                    298,
                    309,
                    310
                ],
                "pickle.dump": [
                    298
                ],
                "pickle": [
                    298,
                    310
                ],
                "IOError": [
                    299
                ],
                "logger.warning": [
                    994,
                    300
                ],
                "logger.info": [
                    422,
                    554,
                    428,
                    302,
                    335,
                    307,
                    531,
                    535,
                    442
                ],
                "os.path.exists": [
                    306
                ],
                "os.path": [
                    306
                ],
                "os": [
                    306
                ],
                "pickle.load": [
                    310
                ],
                "BaseException": [
                    993,
                    861,
                    311
                ],
                "logger.exception": [
                    312
                ],
                "six.itervalues": [
                    331,
                    460,
                    339,
                    342,
                    346,
                    349,
                    317
                ],
                "task.id": [
                    898,
                    899,
                    900,
                    401,
                    405,
                    921,
                    412,
                    413,
                    549,
                    550,
                    423,
                    429,
                    688,
                    949,
                    950,
                    951,
                    952,
                    953,
                    442,
                    318,
                    965,
                    966,
                    967,
                    848,
                    740,
                    361,
                    490,
                    746
                ],
                "k": [
                    329,
                    323,
                    325,
                    327
                ],
                "v": [
                    323,
                    324,
                    325
                ],
                "six.iteritems": [
                    323,
                    772,
                    327,
                    329,
                    656,
                    758,
                    666
                ],
                "float": [
                    324
                ],
                "Worker": [
                    472,
                    325
                ],
                "any": [
                    327
                ],
                "hasattr": [
                    327
                ],
                "w": [
                    466,
                    540,
                    327
                ],
                "worker": [
                    644,
                    909,
                    910,
                    911,
                    912,
                    913,
                    914,
                    533,
                    534,
                    535,
                    536,
                    923,
                    924,
                    927,
                    928,
                    929,
                    930,
                    931,
                    932,
                    560,
                    561,
                    574,
                    329,
                    330,
                    460,
                    461,
                    463,
                    726,
                    727,
                    728,
                    476,
                    477,
                    734,
                    735
                ],
                "worker.tasks": [
                    330
                ],
                "task.workers": [
                    482,
                    741,
                    765,
                    829,
                    332,
                    925,
                    753,
                    923,
                    637,
                    926
                ],
                "tasks.add": [
                    333,
                    638
                ],
                "tasks": [
                    736,
                    737,
                    928,
                    739,
                    929,
                    932,
                    333,
                    638
                ],
                "itertools.chain.from_iterable": [
                    349
                ],
                "itertools.chain": [
                    765,
                    349
                ],
                "itertools": [
                    765,
                    349
                ],
                "setdefault": [
                    360,
                    359
                ],
                "self._tasks.setdefault": [
                    360
                ],
                "self._tasks.get": [
                    364
                ],
                "task.scheduler_disable_time": [
                    839,
                    392,
                    973,
                    398,
                    370,
                    436,
                    437,
                    410
                ],
                "task.failures.clear": [
                    371,
                    374
                ],
                "task.failures": [
                    371,
                    374
                ],
                "self.set_status": [
                    432,
                    373,
                    447
                ],
                "new_status": [
                    384,
                    414,
                    388,
                    409,
                    395,
                    399,
                    413,
                    377,
                    381,
                    382
                ],
                "SUSPENDED": [
                    612,
                    381
                ],
                "DONE": [
                    388,
                    487,
                    680,
                    682,
                    695,
                    986,
                    987
                ],
                "self.re_enable": [
                    389,
                    438
                ],
                "task.can_disable": [
                    395
                ],
                "task.add_failure": [
                    396
                ],
                "task.has_excessive_failures": [
                    397
                ],
                "notifications.send_error_email": [
                    400
                ],
                "notifications": [
                    400
                ],
                "format": [
                    401,
                    402
                ],
                "config.disable_failures": [
                    404
                ],
                "config.disable_window": [
                    406
                ],
                "config.disable_persist": [
                    437,
                    407
                ],
                "pop": [
                    457,
                    412
                ],
                "remove": [
                    417,
                    443,
                    449
                ],
                "task.stakeholders": [
                    481,
                    420,
                    423,
                    427,
                    626
                ],
                "task.remove": [
                    421,
                    424,
                    441,
                    602,
                    603
                ],
                "config.remove_delay": [
                    424,
                    423
                ],
                "task.worker_running": [
                    745,
                    427,
                    429,
                    431,
                    756,
                    757,
                    920,
                    921,
                    830
                ],
                "assistants": [
                    427
                ],
                "config.retry_delay": [
                    433,
                    446,
                    430
                ],
                "task.retry": [
                    433,
                    614,
                    446
                ],
                "delete_tasks": [
                    455
                ],
                "task_obj": [
                    456,
                    457
                ],
                "self._tasks.pop": [
                    456
                ],
                "task_obj.status": [
                    457
                ],
                "last_active_lt": [
                    466,
                    461
                ],
                "worker.last_active": [
                    461,
                    910
                ],
                "filter": [
                    896,
                    466,
                    683
                ],
                "w.assistant": [
                    466
                ],
                "self.get_active_workers": [
                    466
                ],
                "self._active_workers.keys": [
                    469
                ],
                "self._active_workers.setdefault": [
                    472
                ],
                "delete_workers": [
                    481,
                    482,
                    476
                ],
                "self._active_workers.pop": [
                    477
                ],
                "self.get_active_tasks": [
                    480,
                    486
                ],
                "task.stakeholders.difference_update": [
                    481
                ],
                "task.workers.difference_update": [
                    482
                ],
                "necessary_tasks": [
                    544,
                    546,
                    485,
                    549,
                    489,
                    490,
                    491
                ],
                "getattr": [
                    488,
                    911,
                    597,
                    790,
                    831
                ],
                "necessary_tasks.update": [
                    489
                ],
                "task.deps": [
                    489,
                    617,
                    683,
                    620,
                    841,
                    874,
                    948,
                    693,
                    630,
                    571
                ],
                "necessary_tasks.add": [
                    490
                ],
                "Scheduler": [
                    494
                ],
                "self._config": [
                    513,
                    612,
                    549,
                    614,
                    901,
                    520,
                    521,
                    522,
                    974,
                    783,
                    534,
                    535,
                    508,
                    509
                ],
                "scheduler": [
                    508
                ],
                "kwargs": [
                    713,
                    587,
                    508,
                    796
                ],
                "self._state": [
                    896,
                    644,
                    525,
                    783,
                    528,
                    913,
                    533,
                    919,
                    664,
                    538,
                    540,
                    544,
                    802,
                    548,
                    549,
                    679,
                    552,
                    807,
                    808,
                    938,
                    560,
                    947,
                    694,
                    826,
                    572,
                    964,
                    972,
                    590,
                    847,
                    974,
                    979,
                    980,
                    853,
                    726,
                    727,
                    728,
                    732,
                    735,
                    612,
                    745,
                    880,
                    631,
                    509,
                    638
                ],
                "SimpleTaskState": [
                    509
                ],
                "self._config.state_path": [
                    509
                ],
                "task_history_impl": [
                    512,
                    511
                ],
                "self._task_history": [
                    512,
                    992,
                    515,
                    517,
                    999,
                    988,
                    990
                ],
                "self._config.record_task_history": [
                    513
                ],
                "db_task_history.DbTaskHistory": [
                    515
                ],
                "db_task_history": [
                    515
                ],
                "history.NopHistory": [
                    517
                ],
                "history": [
                    517
                ],
                "self._resources": [
                    518,
                    647,
                    648,
                    649,
                    655,
                    663
                ],
                "getintdict": [
                    518
                ],
                "configuration.get_config": [
                    518
                ],
                "configuration": [
                    518
                ],
                "self._make_task": [
                    631,
                    590,
                    519
                ],
                "functools.partial": [
                    519
                ],
                "functools": [
                    519
                ],
                "Task": [
                    520
                ],
                "self._config.disable_failures": [
                    520
                ],
                "self._config.disable_hard_timeout": [
                    521
                ],
                "self._config.disable_window": [
                    522
                ],
                "self._state.load": [
                    525
                ],
                "self._state.dump": [
                    528
                ],
                "remove_workers": [
                    536,
                    538,
                    532
                ],
                "self._state.get_active_workers": [
                    913,
                    533,
                    735
                ],
                "worker.prune": [
                    534
                ],
                "self._config.worker_disconnect_delay": [
                    535
                ],
                "remove_workers.append": [
                    536
                ],
                "worker.id": [
                    536,
                    909,
                    734
                ],
                "self._state.inactivate_workers": [
                    538
                ],
                "assistant_ids": [
                    540,
                    549,
                    543
                ],
                "w.id": [
                    540
                ],
                "self._state.get_assistants": [
                    540
                ],
                "remove_tasks": [
                    552,
                    541,
                    550
                ],
                "self._state.get_necessary_tasks": [
                    544
                ],
                "self._state.get_active_tasks": [
                    896,
                    548,
                    964,
                    847,
                    947,
                    664
                ],
                "self._state.prune": [
                    549
                ],
                "remove_tasks.append": [
                    550
                ],
                "self._state.inactivate_tasks": [
                    552
                ],
                "self._state.get_worker": [
                    644,
                    745,
                    560,
                    726,
                    638
                ],
                "worker.update": [
                    561
                ],
                "task.priority": [
                    688,
                    570,
                    835
                ],
                "prio": [
                    570,
                    573,
                    574
                ],
                "max": [
                    570,
                    684,
                    821
                ],
                "dep": [
                    808,
                    810,
                    811,
                    874,
                    685,
                    686,
                    814,
                    816,
                    875,
                    819,
                    693,
                    630,
                    631,
                    694,
                    571,
                    572
                ],
                "t": [
                    679,
                    631,
                    632,
                    572,
                    573,
                    574,
                    895
                ],
                "self._state.get_task": [
                    679,
                    808,
                    972,
                    590,
                    980,
                    853,
                    694,
                    631,
                    826,
                    572
                ],
                "t.priority": [
                    573
                ],
                "self._update_priority": [
                    634,
                    574
                ],
                "self.update": [
                    715,
                    588,
                    797
                ],
                "task.family": [
                    834,
                    595,
                    596,
                    854
                ],
                "task.module": [
                    598
                ],
                "task.params": [
                    600,
                    833,
                    599
                ],
                "self._update_task_history": [
                    786,
                    611
                ],
                "self._state.set_status": [
                    612,
                    783
                ],
                "self._config.retry_delay": [
                    614
                ],
                "new_deps": [
                    619,
                    620
                ],
                "task.deps.update": [
                    620
                ],
                "assistant": [
                    741,
                    716,
                    717,
                    625,
                    753,
                    765
                ],
                "task.stakeholders.add": [
                    626
                ],
                "UNKNOWN": [
                    865,
                    867,
                    631
                ],
                "t.stakeholders.add": [
                    632
                ],
                "t.stakeholders": [
                    632
                ],
                "runnable": [
                    636
                ],
                "task.workers.add": [
                    637
                ],
                "expl": [
                    640,
                    641,
                    980
                ],
                "task.expl": [
                    641
                ],
                "add_info": [
                    644
                ],
                "self._resources.update": [
                    649
                ],
                "needed_resources": [
                    656,
                    652
                ],
                "available_resources": [
                    657,
                    655
                ],
                "resource": [
                    772,
                    773,
                    656,
                    657,
                    758,
                    759,
                    666,
                    667
                ],
                "amount": [
                    772,
                    773,
                    656,
                    657,
                    758,
                    759,
                    666,
                    667
                ],
                "used_resources": [
                    657,
                    662,
                    729,
                    762,
                    667,
                    668,
                    733
                ],
                "available_resources.get": [
                    657
                ],
                "int": [
                    676,
                    723,
                    917,
                    662,
                    918,
                    729
                ],
                "dependents": [
                    688,
                    676,
                    686
                ],
                "among_tasks": [
                    681
                ],
                "list": [
                    736,
                    841,
                    811,
                    683,
                    829,
                    926
                ],
                "not_done": [
                    683
                ],
                "inverse_num_deps": [
                    684,
                    686
                ],
                "task.time": [
                    688,
                    832
                ],
                "dep_task": [
                    694,
                    695
                ],
                "dep_task.status": [
                    695
                ],
                "host": [
                    992,
                    786,
                    715
                ],
                "self.add_worker": [
                    717
                ],
                "best_task": [
                    718,
                    783,
                    782,
                    784,
                    785,
                    786,
                    788,
                    789,
                    790,
                    791,
                    761,
                    763
                ],
                "locally_pending_tasks": [
                    752,
                    777,
                    719
                ],
                "running_tasks": [
                    720,
                    778,
                    749
                ],
                "upstream_table": [
                    721,
                    740
                ],
                "greedy_resources": [
                    761,
                    723,
                    773,
                    759
                ],
                "n_unique_pending": [
                    754,
                    724,
                    780
                ],
                "worker.is_trivial_worker": [
                    727
                ],
                "relevant_tasks": [
                    728,
                    736,
                    732
                ],
                "worker.get_pending_tasks": [
                    728
                ],
                "greedy_workers": [
                    769,
                    756,
                    757,
                    730,
                    734,
                    767
                ],
                "self._state.get_pending_tasks": [
                    732,
                    919
                ],
                "self._used_resources": [
                    733
                ],
                "worker.info.get": [
                    734
                ],
                "worker.info": [
                    912,
                    734
                ],
                "tasks.sort": [
                    737
                ],
                "self._rank": [
                    737
                ],
                "upstream_status": [
                    897,
                    898,
                    740,
                    751,
                    819,
                    820,
                    821
                ],
                "self._upstream_status": [
                    898,
                    740
                ],
                "in_workers": [
                    762,
                    741,
                    742,
                    751
                ],
                "other_worker": [
                    745,
                    746,
                    747,
                    748
                ],
                "more_info": [
                    746,
                    748,
                    749
                ],
                "str": [
                    746
                ],
                "more_info.update": [
                    748
                ],
                "other_worker.info": [
                    748
                ],
                "running_tasks.append": [
                    749
                ],
                "self._schedulable": [
                    761
                ],
                "self._has_resources": [
                    761,
                    762
                ],
                "workers": [
                    933,
                    907,
                    914,
                    765,
                    766,
                    927
                ],
                "task_worker": [
                    769,
                    766,
                    767
                ],
                "greedy_workers.get": [
                    767
                ],
                "reply": [
                    777,
                    788,
                    789,
                    790,
                    791,
                    793
                ],
                "best_task.worker_running": [
                    784
                ],
                "best_task.time_running": [
                    785
                ],
                "best_task.id": [
                    786,
                    788
                ],
                "best_task.family": [
                    789
                ],
                "best_task.params": [
                    791
                ],
                "upstream_status_table": [
                    800,
                    801,
                    898,
                    809,
                    812,
                    815,
                    816,
                    819,
                    822,
                    823,
                    890
                ],
                "self._state.has_task": [
                    802,
                    807,
                    938,
                    880,
                    979
                ],
                "task_stack": [
                    811,
                    803,
                    805,
                    806
                ],
                "dep_id": [
                    806,
                    807,
                    808,
                    809,
                    811,
                    812,
                    815,
                    816,
                    822,
                    823
                ],
                "task_stack.pop": [
                    806
                ],
                "dep.status": [
                    810,
                    814
                ],
                "dep.deps": [
                    816,
                    819,
                    810,
                    811
                ],
                "dep_status": [
                    814,
                    815
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    814
                ],
                "upstream_status_table.get": [
                    819
                ],
                "upstream_status.append": [
                    820
                ],
                "ret": [
                    841,
                    842,
                    827,
                    839
                ],
                "include_deps": [
                    840
                ],
                "self.prune": [
                    962,
                    936,
                    906,
                    845,
                    878,
                    888
                ],
                "serialized": [
                    899,
                    900,
                    937,
                    939,
                    940,
                    944,
                    949,
                    950,
                    951,
                    952,
                    966,
                    967,
                    971,
                    846,
                    975,
                    848,
                    849,
                    976,
                    852,
                    863,
                    873,
                    875,
                    879,
                    881,
                    882
                ],
                "self._serialize_task": [
                    899,
                    966,
                    873,
                    975,
                    848,
                    944,
                    951,
                    921
                ],
                "logger.warn": [
                    855
                ],
                "_": [
                    859
                ],
                "param_str": [
                    859,
                    860
                ],
                "partition": [
                    859
                ],
                "task_id.rstrip": [
                    859
                ],
                "param.split": [
                    860
                ],
                "param": [
                    860
                ],
                "param_str.split": [
                    860
                ],
                "self._recurse_deps": [
                    881,
                    875
                ],
                "result": [
                    963,
                    900,
                    901,
                    902,
                    903,
                    967,
                    968,
                    889
                ],
                "search": [
                    891,
                    894
                ],
                "filter_func": [
                    896,
                    892,
                    895
                ],
                "terms": [
                    894,
                    895
                ],
                "search.split": [
                    894
                ],
                "term": [
                    895
                ],
                "t.id": [
                    895
                ],
                "limit": [
                    901
                ],
                "self._config.max_shown_tasks": [
                    901
                ],
                "workers.sort": [
                    914
                ],
                "include_running": [
                    915
                ],
                "running": [
                    928,
                    921,
                    916
                ],
                "num_pending": [
                    930,
                    924,
                    917
                ],
                "num_uniques": [
                    926,
                    931,
                    918
                ],
                "self._traverse_inverse_deps": [
                    939
                ],
                "stack": [
                    945,
                    946,
                    953,
                    943
                ],
                "curr_id": [
                    946,
                    948,
                    949
                ],
                "stack.pop": [
                    946
                ],
                "append": [
                    949
                ],
                "stack.append": [
                    953
                ],
                "task.id.find": [
                    965
                ],
                "task_str": [
                    965
                ],
                "self._state.re_enable": [
                    974
                ],
                "successful": [
                    987,
                    988
                ],
                "self._task_history.task_finished": [
                    988
                ],
                "self._task_history.task_scheduled": [
                    990
                ],
                "self._task_history.task_started": [
                    992
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    994,
                    422,
                    554,
                    300,
                    45,
                    302,
                    335,
                    428,
                    855,
                    307,
                    531,
                    535,
                    312,
                    442
                ],
                "logging.getLogger": [
                    45
                ],
                "logging": [
                    45
                ],
                "add_task": [
                    54
                ],
                "get_work": [
                    55
                ],
                "ping": [
                    56
                ],
                "UPSTREAM_RUNNING": [
                    73,
                    65,
                    58
                ],
                "UPSTREAM_MISSING_INPUT": [
                    66,
                    59,
                    74
                ],
                "UPSTREAM_FAILED": [
                    72,
                    67,
                    60
                ],
                "UPSTREAM_DISABLED": [
                    75,
                    68,
                    61,
                    751
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    70,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    821,
                    70
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    70
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    814,
                    71
                ],
                "FAILED": [
                    613,
                    72,
                    395,
                    432,
                    373,
                    377,
                    986,
                    446
                ],
                "RUNNING": [
                    384,
                    991,
                    356,
                    742,
                    73,
                    427,
                    783,
                    786,
                    756,
                    920,
                    665,
                    346,
                    605,
                    350,
                    255
                ],
                "PENDING": [
                    576,
                    350,
                    897,
                    356,
                    612,
                    447,
                    74,
                    810,
                    607,
                    591,
                    751,
                    989,
                    691,
                    922,
                    605,
                    382,
                    255
                ],
                "DISABLED": [
                    384,
                    387,
                    838,
                    487,
                    75,
                    973,
                    399,
                    436,
                    409
                ],
                "Config": [
                    79
                ],
                "retry_delay": [
                    82
                ],
                "parameter.FloatParameter": [
                    82,
                    83,
                    84
                ],
                "parameter": [
                    97,
                    98,
                    100,
                    102,
                    82,
                    83,
                    84,
                    85,
                    89,
                    91,
                    93,
                    95
                ],
                "remove_delay": [
                    83
                ],
                "worker_disconnect_delay": [
                    84
                ],
                "state_path": [
                    289,
                    85
                ],
                "parameter.Parameter": [
                    85,
                    102
                ],
                "disable_window": [
                    89,
                    193
                ],
                "parameter.IntParameter": [
                    97,
                    89,
                    91,
                    93,
                    95
                ],
                "disable_failures": [
                    91,
                    191
                ],
                "disable_hard_timeout": [
                    192,
                    93
                ],
                "disable_persist": [
                    95
                ],
                "max_shown_tasks": [
                    97
                ],
                "prune_done_tasks": [
                    98
                ],
                "parameter.BoolParameter": [
                    98,
                    100
                ],
                "record_task_history": [
                    100
                ],
                "visualization_graph": [
                    102
                ],
                "x": [
                    162,
                    163,
                    108,
                    109,
                    111
                ],
                "datetime.datetime": [
                    108
                ],
                "datetime": [
                    108
                ],
                "time.mktime": [
                    109
                ],
                "time": [
                    614,
                    231,
                    136,
                    424,
                    109,
                    398,
                    208,
                    241,
                    433,
                    147,
                    180,
                    245,
                    437,
                    785,
                    441,
                    446
                ],
                "x.timetuple": [
                    109
                ],
                "self.window": [
                    128,
                    147
                ],
                "self": [
                    512,
                    513,
                    515,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    525,
                    528,
                    533,
                    534,
                    535,
                    538,
                    540,
                    544,
                    548,
                    549,
                    552,
                    560,
                    572,
                    574,
                    588,
                    590,
                    611,
                    612,
                    614,
                    631,
                    634,
                    638,
                    128,
                    129,
                    130,
                    644,
                    647,
                    648,
                    649,
                    138,
                    139,
                    141,
                    655,
                    147,
                    149,
                    150,
                    663,
                    152,
                    664,
                    158,
                    679,
                    172,
                    173,
                    174,
                    176,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    197,
                    200,
                    715,
                    717,
                    206,
                    207,
                    208,
                    209,
                    212,
                    726,
                    727,
                    728,
                    218,
                    219,
                    732,
                    733,
                    735,
                    737,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    740,
                    745,
                    236,
                    240,
                    241,
                    245,
                    761,
                    762,
                    254,
                    256,
                    267,
                    269,
                    783,
                    273,
                    786,
                    276,
                    797,
                    289,
                    290,
                    291,
                    292,
                    802,
                    295,
                    807,
                    297,
                    808,
                    302,
                    306,
                    307,
                    309,
                    826,
                    315,
                    316,
                    317,
                    318,
                    323,
                    325,
                    327,
                    329,
                    331,
                    333,
                    845,
                    335,
                    847,
                    848,
                    339,
                    853,
                    342,
                    346,
                    349,
                    356,
                    360,
                    361,
                    873,
                    875,
                    364,
                    878,
                    367,
                    880,
                    881,
                    373,
                    888,
                    896,
                    898,
                    899,
                    389,
                    901,
                    906,
                    913,
                    919,
                    921,
                    412,
                    413,
                    694,
                    936,
                    938,
                    939,
                    432,
                    944,
                    947,
                    438,
                    951,
                    447,
                    962,
                    964,
                    966,
                    456,
                    457,
                    460,
                    972,
                    974,
                    975,
                    466,
                    979,
                    980,
                    469,
                    472,
                    988,
                    477,
                    990,
                    480,
                    992,
                    486,
                    999,
                    508,
                    509
                ],
                "window": [
                    128
                ],
                "self.failures": [
                    129,
                    193,
                    200,
                    141,
                    206,
                    208,
                    212,
                    149,
                    150,
                    152,
                    158
                ],
                "collections.deque": [
                    129
                ],
                "collections": [
                    129,
                    291,
                    676,
                    963,
                    723,
                    916,
                    917,
                    662,
                    918,
                    729,
                    316
                ],
                "self.first_failure_time": [
                    130,
                    139,
                    138
                ],
                "failure_time": [
                    136,
                    139,
                    141
                ],
                "time.time": [
                    614,
                    231,
                    136,
                    424,
                    398,
                    208,
                    241,
                    433,
                    147,
                    180,
                    245,
                    437,
                    785,
                    441,
                    446
                ],
                "self.failures.append": [
                    141
                ],
                "min_time": [
                    147,
                    149
                ],
                "fix_time": [
                    149,
                    437
                ],
                "self.failures.popleft": [
                    150
                ],
                "self.failures.clear": [
                    158
                ],
                "default": [
                    364,
                    165
                ],
                "self.id": [
                    276,
                    172,
                    228
                ],
                "task_id": [
                    800,
                    801,
                    802,
                    803,
                    938,
                    939,
                    172,
                    943,
                    944,
                    819,
                    826,
                    972,
                    590,
                    591,
                    975,
                    979,
                    852,
                    853,
                    980,
                    855,
                    982,
                    859,
                    988,
                    990,
                    863,
                    992,
                    611,
                    360,
                    873,
                    364,
                    367,
                    880,
                    881
                ],
                "self.stakeholders": [
                    173
                ],
                "self.workers": [
                    174
                ],
                "deps": [
                    616,
                    617,
                    683,
                    684,
                    685,
                    591,
                    175,
                    178
                ],
                "self.deps": [
                    176,
                    178
                ],
                "self.status": [
                    179
                ],
                "status": [
                    896,
                    611,
                    605,
                    612,
                    613,
                    991,
                    989,
                    338,
                    339,
                    179,
                    821,
                    822,
                    986,
                    987,
                    349,
                    350,
                    607
                ],
                "self.time": [
                    180
                ],
                "self.retry": [
                    181
                ],
                "self.remove": [
                    182
                ],
                "self.worker_running": [
                    183
                ],
                "self.time_running": [
                    184
                ],
                "self.expl": [
                    185
                ],
                "self.priority": [
                    186
                ],
                "priority": [
                    592,
                    186,
                    634,
                    631
                ],
                "self.resources": [
                    187
                ],
                "_get_default": [
                    600,
                    187,
                    190
                ],
                "resources": [
                    518,
                    649,
                    622,
                    623,
                    591,
                    187
                ],
                "self.family": [
                    188
                ],
                "family": [
                    869,
                    592,
                    596,
                    859,
                    188,
                    862
                ],
                "self.module": [
                    189
                ],
                "module": [
                    592,
                    189,
                    598
                ],
                "self.params": [
                    190
                ],
                "params": [
                    868,
                    190,
                    592,
                    600,
                    860,
                    862
                ],
                "self.disable_failures": [
                    218,
                    212,
                    191
                ],
                "self.disable_hard_timeout": [
                    192,
                    209,
                    219,
                    207
                ],
                "Failures": [
                    193
                ],
                "self.scheduler_disable_time": [
                    194
                ],
                "self.failures.add_failure": [
                    200
                ],
                "excessive_failures": [
                    210,
                    204,
                    213,
                    215
                ],
                "self.failures.first_failure_time": [
                    208,
                    206
                ],
                "self.failures.num_failures": [
                    212
                ],
                "worker_id": [
                    637,
                    784,
                    796,
                    797,
                    560,
                    713,
                    587,
                    332,
                    333,
                    588,
                    715,
                    717,
                    726,
                    472,
                    228,
                    741,
                    626,
                    632,
                    634,
                    765,
                    638
                ],
                "self.reference": [
                    240,
                    229
                ],
                "self.last_active": [
                    241,
                    245,
                    230
                ],
                "last_active": [
                    230
                ],
                "self.started": [
                    231
                ],
                "self.tasks": [
                    232,
                    256,
                    254
                ],
                "self.info": [
                    233,
                    236,
                    273
                ],
                "self.info.update": [
                    236
                ],
                "info": [
                    644,
                    236
                ],
                "worker_reference": [
                    240,
                    561,
                    239
                ],
                "config.worker_disconnect_delay": [
                    245
                ],
                "config": [
                    407,
                    423,
                    424,
                    430,
                    432,
                    433,
                    404,
                    373,
                    372,
                    245,
                    406,
                    437,
                    378,
                    438,
                    508,
                    446,
                    447
                ],
                "state.num_pending_tasks": [
                    254
                ],
                "state": [
                    258,
                    295,
                    298,
                    269,
                    310,
                    315,
                    254
                ],
                "six.moves.filter": [
                    255
                ],
                "six.moves": [
                    255
                ],
                "six": [
                    323,
                    772,
                    327,
                    329,
                    331,
                    460,
                    656,
                    339,
                    342,
                    666,
                    758,
                    346,
                    349,
                    317,
                    255
                ],
                "task.status": [
                    384,
                    897,
                    387,
                    920,
                    665,
                    922,
                    412,
                    414,
                    680,
                    682,
                    427,
                    691,
                    436,
                    828,
                    446,
                    318,
                    838,
                    967,
                    973,
                    605,
                    607,
                    742,
                    487,
                    361,
                    751,
                    756,
                    255
                ],
                "task": [
                    548,
                    549,
                    550,
                    570,
                    571,
                    590,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    602,
                    603,
                    605,
                    607,
                    612,
                    614,
                    617,
                    620,
                    623,
                    626,
                    630,
                    634,
                    637,
                    638,
                    641,
                    664,
                    665,
                    666,
                    679,
                    680,
                    681,
                    682,
                    683,
                    688,
                    691,
                    693,
                    739,
                    740,
                    741,
                    742,
                    745,
                    746,
                    751,
                    753,
                    756,
                    757,
                    758,
                    761,
                    762,
                    763,
                    765,
                    255,
                    772,
                    269,
                    826,
                    828,
                    317,
                    318,
                    829,
                    830,
                    831,
                    832,
                    833,
                    834,
                    835,
                    836,
                    838,
                    839,
                    841,
                    331,
                    332,
                    333,
                    847,
                    848,
                    339,
                    340,
                    853,
                    342,
                    343,
                    854,
                    360,
                    361,
                    362,
                    874,
                    370,
                    371,
                    373,
                    374,
                    384,
                    896,
                    897,
                    387,
                    898,
                    389,
                    899,
                    900,
                    392,
                    395,
                    396,
                    397,
                    398,
                    401,
                    405,
                    919,
                    920,
                    921,
                    410,
                    922,
                    412,
                    413,
                    414,
                    923,
                    925,
                    926,
                    420,
                    421,
                    423,
                    424,
                    427,
                    429,
                    431,
                    432,
                    433,
                    947,
                    436,
                    437,
                    438,
                    948,
                    949,
                    441,
                    442,
                    950,
                    951,
                    952,
                    446,
                    447,
                    953,
                    964,
                    965,
                    966,
                    455,
                    456,
                    457,
                    967,
                    972,
                    973,
                    974,
                    480,
                    481,
                    482,
                    486,
                    487,
                    488,
                    489,
                    490
                ],
                "state.get_pending_tasks": [
                    258
                ],
                "self.assistant": [
                    267
                ],
                "task.resources": [
                    762,
                    772,
                    836,
                    269,
                    623,
                    761,
                    758,
                    665,
                    666
                ],
                "self.get_pending_tasks": [
                    269
                ],
                "self.info.get": [
                    273
                ],
                "self._state_path": [
                    289,
                    297,
                    302,
                    335,
                    306,
                    307,
                    309
                ],
                "self._tasks": [
                    290,
                    295,
                    360,
                    456,
                    331,
                    364,
                    367,
                    342,
                    315,
                    317
                ],
                "self._status_tasks": [
                    291,
                    356,
                    361,
                    457,
                    339,
                    413,
                    412,
                    346,
                    316,
                    349,
                    318
                ],
                "collections.defaultdict": [
                    291,
                    676,
                    963,
                    723,
                    916,
                    917,
                    662,
                    918,
                    729,
                    316
                ],
                "self._active_workers": [
                    323,
                    292,
                    325,
                    295,
                    327,
                    329,
                    460,
                    333,
                    469,
                    472,
                    315,
                    477
                ],
                "fobj": [
                    297,
                    298,
                    309,
                    310
                ],
                "pickle.dump": [
                    298
                ],
                "pickle": [
                    298,
                    310
                ],
                "logger.warning": [
                    994,
                    300
                ],
                "logger.info": [
                    422,
                    554,
                    428,
                    302,
                    335,
                    307,
                    531,
                    535,
                    442
                ],
                "os.path.exists": [
                    306
                ],
                "os.path": [
                    306
                ],
                "os": [
                    306
                ],
                "pickle.load": [
                    310
                ],
                "logger.exception": [
                    312
                ],
                "six.itervalues": [
                    331,
                    460,
                    339,
                    342,
                    346,
                    349,
                    317
                ],
                "task.id": [
                    898,
                    899,
                    900,
                    401,
                    405,
                    921,
                    412,
                    413,
                    549,
                    550,
                    423,
                    429,
                    688,
                    949,
                    950,
                    951,
                    952,
                    953,
                    442,
                    318,
                    965,
                    966,
                    967,
                    848,
                    740,
                    361,
                    490,
                    746
                ],
                "k": [
                    329,
                    323,
                    325,
                    327
                ],
                "v": [
                    323,
                    324,
                    325
                ],
                "six.iteritems": [
                    323,
                    772,
                    327,
                    329,
                    656,
                    758,
                    666
                ],
                "Worker": [
                    472,
                    325
                ],
                "w": [
                    466,
                    540,
                    327
                ],
                "worker": [
                    644,
                    909,
                    910,
                    911,
                    912,
                    913,
                    914,
                    533,
                    534,
                    535,
                    536,
                    923,
                    924,
                    927,
                    928,
                    929,
                    930,
                    931,
                    932,
                    560,
                    561,
                    574,
                    329,
                    330,
                    460,
                    461,
                    463,
                    726,
                    727,
                    728,
                    476,
                    477,
                    734,
                    735
                ],
                "worker.tasks": [
                    330
                ],
                "task.workers": [
                    482,
                    741,
                    765,
                    829,
                    332,
                    925,
                    753,
                    923,
                    637,
                    926
                ],
                "tasks.add": [
                    333,
                    638
                ],
                "tasks": [
                    736,
                    737,
                    928,
                    739,
                    929,
                    932,
                    333,
                    638
                ],
                "itertools.chain.from_iterable": [
                    349
                ],
                "itertools.chain": [
                    765,
                    349
                ],
                "itertools": [
                    765,
                    349
                ],
                "setdefault": [
                    360,
                    359
                ],
                "self._tasks.setdefault": [
                    360
                ],
                "self._tasks.get": [
                    364
                ],
                "task.scheduler_disable_time": [
                    839,
                    392,
                    973,
                    398,
                    370,
                    436,
                    437,
                    410
                ],
                "task.failures.clear": [
                    371,
                    374
                ],
                "task.failures": [
                    371,
                    374
                ],
                "self.set_status": [
                    432,
                    373,
                    447
                ],
                "new_status": [
                    384,
                    414,
                    388,
                    409,
                    395,
                    399,
                    413,
                    377,
                    381,
                    382
                ],
                "SUSPENDED": [
                    612,
                    381
                ],
                "DONE": [
                    388,
                    487,
                    680,
                    682,
                    695,
                    986,
                    987
                ],
                "self.re_enable": [
                    389,
                    438
                ],
                "task.can_disable": [
                    395
                ],
                "task.add_failure": [
                    396
                ],
                "task.has_excessive_failures": [
                    397
                ],
                "notifications.send_error_email": [
                    400
                ],
                "notifications": [
                    400
                ],
                "config.disable_failures": [
                    404
                ],
                "config.disable_window": [
                    406
                ],
                "config.disable_persist": [
                    437,
                    407
                ],
                "pop": [
                    457,
                    412
                ],
                "remove": [
                    417,
                    443,
                    449
                ],
                "task.stakeholders": [
                    481,
                    420,
                    423,
                    427,
                    626
                ],
                "task.remove": [
                    421,
                    424,
                    441,
                    602,
                    603
                ],
                "config.remove_delay": [
                    424,
                    423
                ],
                "task.worker_running": [
                    745,
                    427,
                    429,
                    431,
                    756,
                    757,
                    920,
                    921,
                    830
                ],
                "assistants": [
                    427
                ],
                "config.retry_delay": [
                    433,
                    446,
                    430
                ],
                "task.retry": [
                    433,
                    614,
                    446
                ],
                "delete_tasks": [
                    455
                ],
                "task_obj": [
                    456,
                    457
                ],
                "self._tasks.pop": [
                    456
                ],
                "task_obj.status": [
                    457
                ],
                "last_active_lt": [
                    466,
                    461
                ],
                "worker.last_active": [
                    461,
                    910
                ],
                "w.assistant": [
                    466
                ],
                "self.get_active_workers": [
                    466
                ],
                "self._active_workers.keys": [
                    469
                ],
                "self._active_workers.setdefault": [
                    472
                ],
                "delete_workers": [
                    481,
                    482,
                    476
                ],
                "self._active_workers.pop": [
                    477
                ],
                "self.get_active_tasks": [
                    480,
                    486
                ],
                "task.stakeholders.difference_update": [
                    481
                ],
                "task.workers.difference_update": [
                    482
                ],
                "necessary_tasks": [
                    544,
                    546,
                    485,
                    549,
                    489,
                    490,
                    491
                ],
                "necessary_tasks.update": [
                    489
                ],
                "task.deps": [
                    489,
                    617,
                    683,
                    620,
                    841,
                    874,
                    948,
                    693,
                    630,
                    571
                ],
                "necessary_tasks.add": [
                    490
                ],
                "Scheduler": [
                    494
                ],
                "self._config": [
                    513,
                    612,
                    549,
                    614,
                    901,
                    520,
                    521,
                    522,
                    974,
                    783,
                    534,
                    535,
                    508,
                    509
                ],
                "scheduler": [
                    508
                ],
                "kwargs": [
                    713,
                    587,
                    508,
                    796
                ],
                "self._state": [
                    896,
                    644,
                    525,
                    783,
                    528,
                    913,
                    533,
                    919,
                    664,
                    538,
                    540,
                    544,
                    802,
                    548,
                    549,
                    679,
                    552,
                    807,
                    808,
                    938,
                    560,
                    947,
                    694,
                    826,
                    572,
                    964,
                    972,
                    590,
                    847,
                    974,
                    979,
                    980,
                    853,
                    726,
                    727,
                    728,
                    732,
                    735,
                    612,
                    745,
                    880,
                    631,
                    509,
                    638
                ],
                "SimpleTaskState": [
                    509
                ],
                "self._config.state_path": [
                    509
                ],
                "task_history_impl": [
                    512,
                    511
                ],
                "self._task_history": [
                    512,
                    992,
                    515,
                    517,
                    999,
                    988,
                    990
                ],
                "self._config.record_task_history": [
                    513
                ],
                "db_task_history.DbTaskHistory": [
                    515
                ],
                "db_task_history": [
                    515
                ],
                "history.NopHistory": [
                    517
                ],
                "history": [
                    517
                ],
                "self._resources": [
                    518,
                    647,
                    648,
                    649,
                    655,
                    663
                ],
                "getintdict": [
                    518
                ],
                "configuration.get_config": [
                    518
                ],
                "configuration": [
                    518
                ],
                "self._make_task": [
                    631,
                    590,
                    519
                ],
                "functools.partial": [
                    519
                ],
                "functools": [
                    519
                ],
                "Task": [
                    520
                ],
                "self._config.disable_failures": [
                    520
                ],
                "self._config.disable_hard_timeout": [
                    521
                ],
                "self._config.disable_window": [
                    522
                ],
                "self._state.load": [
                    525
                ],
                "self._state.dump": [
                    528
                ],
                "remove_workers": [
                    536,
                    538,
                    532
                ],
                "self._state.get_active_workers": [
                    913,
                    533,
                    735
                ],
                "worker.prune": [
                    534
                ],
                "self._config.worker_disconnect_delay": [
                    535
                ],
                "remove_workers.append": [
                    536
                ],
                "worker.id": [
                    536,
                    909,
                    734
                ],
                "self._state.inactivate_workers": [
                    538
                ],
                "assistant_ids": [
                    540,
                    549,
                    543
                ],
                "w.id": [
                    540
                ],
                "self._state.get_assistants": [
                    540
                ],
                "remove_tasks": [
                    552,
                    541,
                    550
                ],
                "self._state.get_necessary_tasks": [
                    544
                ],
                "self._state.get_active_tasks": [
                    896,
                    548,
                    964,
                    847,
                    947,
                    664
                ],
                "self._state.prune": [
                    549
                ],
                "remove_tasks.append": [
                    550
                ],
                "self._state.inactivate_tasks": [
                    552
                ],
                "self._state.get_worker": [
                    644,
                    745,
                    560,
                    726,
                    638
                ],
                "worker.update": [
                    561
                ],
                "task.priority": [
                    688,
                    570,
                    835
                ],
                "prio": [
                    570,
                    573,
                    574
                ],
                "dep": [
                    808,
                    810,
                    811,
                    874,
                    685,
                    686,
                    814,
                    816,
                    875,
                    819,
                    693,
                    630,
                    631,
                    694,
                    571,
                    572
                ],
                "t": [
                    679,
                    631,
                    632,
                    572,
                    573,
                    574,
                    895
                ],
                "self._state.get_task": [
                    679,
                    808,
                    972,
                    590,
                    980,
                    853,
                    694,
                    631,
                    826,
                    572
                ],
                "t.priority": [
                    573
                ],
                "self._update_priority": [
                    634,
                    574
                ],
                "self.update": [
                    715,
                    588,
                    797
                ],
                "task.family": [
                    834,
                    595,
                    596,
                    854
                ],
                "task.module": [
                    598
                ],
                "task.params": [
                    600,
                    833,
                    599
                ],
                "self._update_task_history": [
                    786,
                    611
                ],
                "self._state.set_status": [
                    612,
                    783
                ],
                "self._config.retry_delay": [
                    614
                ],
                "new_deps": [
                    619,
                    620
                ],
                "task.deps.update": [
                    620
                ],
                "assistant": [
                    741,
                    716,
                    717,
                    625,
                    753,
                    765
                ],
                "task.stakeholders.add": [
                    626
                ],
                "UNKNOWN": [
                    865,
                    867,
                    631
                ],
                "t.stakeholders.add": [
                    632
                ],
                "t.stakeholders": [
                    632
                ],
                "runnable": [
                    636
                ],
                "task.workers.add": [
                    637
                ],
                "expl": [
                    640,
                    641,
                    980
                ],
                "task.expl": [
                    641
                ],
                "add_info": [
                    644
                ],
                "self._resources.update": [
                    649
                ],
                "needed_resources": [
                    656,
                    652
                ],
                "available_resources": [
                    657,
                    655
                ],
                "resource": [
                    772,
                    773,
                    656,
                    657,
                    758,
                    759,
                    666,
                    667
                ],
                "amount": [
                    772,
                    773,
                    656,
                    657,
                    758,
                    759,
                    666,
                    667
                ],
                "used_resources": [
                    657,
                    662,
                    729,
                    762,
                    667,
                    668,
                    733
                ],
                "available_resources.get": [
                    657
                ],
                "dependents": [
                    688,
                    676,
                    686
                ],
                "among_tasks": [
                    681
                ],
                "not_done": [
                    683
                ],
                "inverse_num_deps": [
                    684,
                    686
                ],
                "task.time": [
                    688,
                    832
                ],
                "dep_task": [
                    694,
                    695
                ],
                "dep_task.status": [
                    695
                ],
                "host": [
                    992,
                    786,
                    715
                ],
                "self.add_worker": [
                    717
                ],
                "best_task": [
                    718,
                    783,
                    782,
                    784,
                    785,
                    786,
                    788,
                    789,
                    790,
                    791,
                    761,
                    763
                ],
                "locally_pending_tasks": [
                    752,
                    777,
                    719
                ],
                "running_tasks": [
                    720,
                    778,
                    749
                ],
                "upstream_table": [
                    721,
                    740
                ],
                "greedy_resources": [
                    761,
                    723,
                    773,
                    759
                ],
                "n_unique_pending": [
                    754,
                    724,
                    780
                ],
                "worker.is_trivial_worker": [
                    727
                ],
                "relevant_tasks": [
                    728,
                    736,
                    732
                ],
                "worker.get_pending_tasks": [
                    728
                ],
                "greedy_workers": [
                    769,
                    756,
                    757,
                    730,
                    734,
                    767
                ],
                "self._state.get_pending_tasks": [
                    732,
                    919
                ],
                "self._used_resources": [
                    733
                ],
                "worker.info.get": [
                    734
                ],
                "worker.info": [
                    912,
                    734
                ],
                "tasks.sort": [
                    737
                ],
                "self._rank": [
                    737
                ],
                "upstream_status": [
                    897,
                    898,
                    740,
                    751,
                    819,
                    820,
                    821
                ],
                "self._upstream_status": [
                    898,
                    740
                ],
                "in_workers": [
                    762,
                    741,
                    742,
                    751
                ],
                "other_worker": [
                    745,
                    746,
                    747,
                    748
                ],
                "more_info": [
                    746,
                    748,
                    749
                ],
                "more_info.update": [
                    748
                ],
                "other_worker.info": [
                    748
                ],
                "running_tasks.append": [
                    749
                ],
                "self._schedulable": [
                    761
                ],
                "self._has_resources": [
                    761,
                    762
                ],
                "workers": [
                    933,
                    907,
                    914,
                    765,
                    766,
                    927
                ],
                "task_worker": [
                    769,
                    766,
                    767
                ],
                "greedy_workers.get": [
                    767
                ],
                "reply": [
                    777,
                    788,
                    789,
                    790,
                    791,
                    793
                ],
                "best_task.worker_running": [
                    784
                ],
                "best_task.time_running": [
                    785
                ],
                "best_task.id": [
                    786,
                    788
                ],
                "best_task.family": [
                    789
                ],
                "best_task.params": [
                    791
                ],
                "upstream_status_table": [
                    800,
                    801,
                    898,
                    809,
                    812,
                    815,
                    816,
                    819,
                    822,
                    823,
                    890
                ],
                "self._state.has_task": [
                    802,
                    807,
                    938,
                    880,
                    979
                ],
                "task_stack": [
                    811,
                    803,
                    805,
                    806
                ],
                "dep_id": [
                    806,
                    807,
                    808,
                    809,
                    811,
                    812,
                    815,
                    816,
                    822,
                    823
                ],
                "task_stack.pop": [
                    806
                ],
                "dep.status": [
                    810,
                    814
                ],
                "dep.deps": [
                    816,
                    819,
                    810,
                    811
                ],
                "dep_status": [
                    814,
                    815
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    814
                ],
                "upstream_status_table.get": [
                    819
                ],
                "upstream_status.append": [
                    820
                ],
                "ret": [
                    841,
                    842,
                    827,
                    839
                ],
                "include_deps": [
                    840
                ],
                "self.prune": [
                    962,
                    936,
                    906,
                    845,
                    878,
                    888
                ],
                "serialized": [
                    899,
                    900,
                    937,
                    939,
                    940,
                    944,
                    949,
                    950,
                    951,
                    952,
                    966,
                    967,
                    971,
                    846,
                    975,
                    848,
                    849,
                    976,
                    852,
                    863,
                    873,
                    875,
                    879,
                    881,
                    882
                ],
                "self._serialize_task": [
                    899,
                    966,
                    873,
                    975,
                    848,
                    944,
                    951,
                    921
                ],
                "logger.warn": [
                    855
                ],
                "_": [
                    859
                ],
                "param_str": [
                    859,
                    860
                ],
                "partition": [
                    859
                ],
                "task_id.rstrip": [
                    859
                ],
                "param.split": [
                    860
                ],
                "param": [
                    860
                ],
                "param_str.split": [
                    860
                ],
                "self._recurse_deps": [
                    881,
                    875
                ],
                "result": [
                    963,
                    900,
                    901,
                    902,
                    903,
                    967,
                    968,
                    889
                ],
                "search": [
                    891,
                    894
                ],
                "filter_func": [
                    896,
                    892,
                    895
                ],
                "terms": [
                    894,
                    895
                ],
                "search.split": [
                    894
                ],
                "term": [
                    895
                ],
                "t.id": [
                    895
                ],
                "limit": [
                    901
                ],
                "self._config.max_shown_tasks": [
                    901
                ],
                "workers.sort": [
                    914
                ],
                "include_running": [
                    915
                ],
                "running": [
                    928,
                    921,
                    916
                ],
                "num_pending": [
                    930,
                    924,
                    917
                ],
                "num_uniques": [
                    926,
                    931,
                    918
                ],
                "self._traverse_inverse_deps": [
                    939
                ],
                "stack": [
                    945,
                    946,
                    953,
                    943
                ],
                "curr_id": [
                    946,
                    948,
                    949
                ],
                "stack.pop": [
                    946
                ],
                "append": [
                    949
                ],
                "stack.append": [
                    953
                ],
                "task.id.find": [
                    965
                ],
                "task_str": [
                    965
                ],
                "self._state.re_enable": [
                    974
                ],
                "successful": [
                    987,
                    988
                ],
                "self._task_history.task_finished": [
                    988
                ],
                "self._task_history.task_scheduled": [
                    990
                ],
                "self._task_history.task_started": [
                    992
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_23/test/worker_external_task_test.py",
                "test_function": "test_external_dependency_completes_later",
                "test_function_code": "    @with_config({'core': {'retry-external-tasks': 'true',\n                           'disable-num-failures': '4',\n                           'max-reschedules': '4',\n                           'worker-keep-alive': 'true',\n                           'retry-delay': '0.01'}})\n    def test_external_dependency_completes_later(self):\n        \"\"\"\n        Test that an external dependency that is not `complete` when luigi is invoked, but \\\n        becomes `complete` while the workflow is executing is re-evaluated and\n        allows dependencies to run.\n        \"\"\"\n        assert luigi.configuration.get_config().getboolean('core',\n                                                           'retry-external-tasks',\n                                                           False) is True\n\n        tempdir = tempfile.mkdtemp(prefix='luigi-test-')\n\n        with patch('random.randint', return_value=0.1):\n            test_task = TestTask(tempdir=tempdir, complete_after=3)\n            self._build([test_task])\n\n        assert os.path.exists(test_task.dep_path)\n        assert os.path.exists(test_task.output_path)\n\n        os.unlink(test_task.dep_path)\n        os.unlink(test_task.output_path)\n        os.rmdir(tempdir)\n\n        # complete() is called once per failure, twice per success\n        assert test_task.dependency.times_called == 4",
                "test_error": "luigi.parameter.UnknownParameterException: scheduler[args=(), kwargs={'retry_delay': 0.01, 'remove_delay': 3, 'worker_disconnect_delay': 3, 'disable_persist': 3, 'disable_window': 5, 'disable_failures': 2, 'prune_on_get_work': True}]: unknown parameter prune_on_get_work",
                "full_test_error": "self = <worker_external_task_test.WorkerExternalTaskTest testMethod=test_external_dependency_completes_later>\n\n    def setUp(self):\n>       self.scheduler = CentralPlannerScheduler(retry_delay=0.01,\n                                                 remove_delay=3,\n                                                 worker_disconnect_delay=3,\n                                                 disable_persist=3,\n                                                 disable_window=5,\n                                                 disable_failures=2,\n                                                 prune_on_get_work=True)\n\ntest/worker_external_task_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/scheduler.py:508: in __init__\n    self._config = config or scheduler(**kwargs)\nluigi/task_register.py:86: in __call__\n    param_values = cls.get_param_values(params, args, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'luigi.scheduler.scheduler'>\nparams = [('retry_delay', <luigi.parameter.FloatParameter object at 0x10950ff10>), ('remove_delay', <luigi.parameter.FloatParam....IntParameter object at 0x109ba84c0>), ('disable_failures', <luigi.parameter.IntParameter object at 0x109ba82e0>), ...]\nargs = ()\nkwargs = {'disable_failures': 2, 'disable_persist': 3, 'disable_window': 5, 'prune_on_get_work': True, ...}\n\n    @classmethod\n    def get_param_values(cls, params, args, kwargs):\n        \"\"\"\n        Get the values of the parameters from the args and kwargs.\n    \n        :param params: list of (param_name, Parameter).\n        :param args: positional arguments\n        :param kwargs: keyword arguments.\n        :returns: list of `(name, value)` tuples, one for each parameter.\n        \"\"\"\n        result = {}\n    \n        params_dict = dict(params)\n    \n        task_name = cls.task_family\n    \n        # In case any exceptions are thrown, create a helpful description of how the Task was invoked\n        # TODO: should we detect non-reprable arguments? These will lead to mysterious errors\n        exc_desc = '%s[args=%s, kwargs=%s]' % (task_name, args, kwargs)\n    \n        # Fill in the positional arguments\n        positional_params = [(n, p) for n, p in params if p.positional]\n        for i, arg in enumerate(args):\n            if i >= len(positional_params):\n                raise parameter.UnknownParameterException('%s: takes at most %d parameters (%d given)' % (exc_desc, len(positional_params), len(args)))\n            param_name, param_obj = positional_params[i]\n            result[param_name] = arg\n    \n        # Then the optional arguments\n        for param_name, arg in six.iteritems(kwargs):\n            if param_name in result:\n                raise parameter.DuplicateParameterException('%s: parameter %s was already set as a positional parameter' % (exc_desc, param_name))\n            if param_name not in params_dict:\n>               raise parameter.UnknownParameterException('%s: unknown parameter %s' % (exc_desc, param_name))\nE               luigi.parameter.UnknownParameterException: scheduler[args=(), kwargs={'retry_delay': 0.01, 'remove_delay': 3, 'worker_disconnect_delay': 3, 'disable_persist': 3, 'disable_window': 5, 'disable_failures': 2, 'prune_on_get_work': True}]: unknown parameter prune_on_get_work\n\nluigi/task.py:227: UnknownParameterException",
                "traceback": "luigi/scheduler.py:508: in __init__\n    self._config = config or scheduler(**kwargs)\nluigi/task_register.py:86: in __call__\n    param_values = cls.get_param_values(params, args, kwargs)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'luigi.scheduler.scheduler'>\nparams = [('retry_delay', <luigi.parameter.FloatParameter object at 0x10950ff10>), ('remove_delay', <luigi.parameter.FloatParam....IntParameter object at 0x109ba84c0>), ('disable_failures', <luigi.parameter.IntParameter object at 0x109ba82e0>), ...]\nargs = ()\nkwargs = {'disable_failures': 2, 'disable_persist': 3, 'disable_window': 5, 'prune_on_get_work': True, ...}\n\n    @classmethod\n    def get_param_values(cls, params, args, kwargs):\n        \"\"\"\n        Get the values of the parameters from the args and kwargs.\n    \n        :param params: list of (param_name, Parameter).\n        :param args: positional arguments\n        :param kwargs: keyword arguments.\n        :returns: list of `(name, value)` tuples, one for each parameter.\n        \"\"\"\n        result = {}\n    \n        params_dict = dict(params)\n    \n        task_name = cls.task_family\n    \n        # In case any exceptions are thrown, create a helpful description of how the Task was invoked\n        # TODO: should we detect non-reprable arguments? These will lead to mysterious errors\n        exc_desc = '%s[args=%s, kwargs=%s]' % (task_name, args, kwargs)\n    \n        # Fill in the positional arguments\n        positional_params = [(n, p) for n, p in params if p.positional]\n        for i, arg in enumerate(args):\n            if i >= len(positional_params):\n                raise parameter.UnknownParameterException('%s: takes at most %d parameters (%d given)' % (exc_desc, len(positional_params), len(args)))\n            param_name, param_obj = positional_params[i]\n            result[param_name] = arg\n    \n        # Then the optional arguments\n        for param_name, arg in six.iteritems(kwargs):\n            if param_name in result:\n                raise parameter.DuplicateParameterException('%s: parameter %s was already set as a positional parameter' % (exc_desc, param_name))\n            if param_name not in params_dict:\n>               raise parameter.UnknownParameterException('%s: unknown parameter %s' % (exc_desc, param_name))\nE               luigi.parameter.UnknownParameterException: scheduler[args=(), kwargs={'retry_delay': 0.01, 'remove_delay': 3, 'worker_disconnect_delay': 3, 'disable_persist': 3, 'disable_window': 5, 'disable_failures': 2, 'prune_on_get_work': True}]: unknown parameter prune_on_get_work\n\nluigi/task.py:227: UnknownParameterException",
                "test_function_decorators": [
                    "with_config({'core': {'retry-external-tasks': 'true', 'disable-num-failures': '4', 'max-reschedules': '4', 'worker-keep-alive': 'true', 'retry-delay': '0.01'}})"
                ]
            }
        ]
    }
}