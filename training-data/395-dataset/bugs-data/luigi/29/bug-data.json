{
    "luigi:29": {
        "/Volumes/SSD2T/bgp_envs/repos/luigi_29/luigi/task_register.py": {
            "buggy_functions": [
                {
                    "function_name": "__get_reg",
                    "function_code": "@classmethod\ndef __get_reg(cls):\n    \"\"\"Return all of the registered classes.\n\n    :return:  an ``collections.OrderedDict`` of task_family -> class\n    \"\"\"\n    # We have to do this on-demand in case task names have changed later\n    # We return this in a topologically sorted list of inheritance: this is useful in some cases (#822)\n    reg = OrderedDict()\n    for cls in cls._reg:\n        if cls.run == NotImplemented:\n            continue\n        name = cls.task_family\n\n        if name in reg and reg[name] != cls and \\\n                reg[name] != cls.AMBIGUOUS_CLASS and \\\n                not issubclass(cls, reg[name]):\n            # Registering two different classes - this means we can't instantiate them by name\n            # The only exception is if one class is a subclass of the other. In that case, we\n            # instantiate the most-derived class (this fixes some issues with decorator wrappers).\n            reg[name] = cls.AMBIGUOUS_CLASS\n        else:\n            reg[name] = cls\n\n    return reg\n",
                    "decorators": [
                        "classmethod"
                    ],
                    "docstring": "Return all of the registered classes.\n\n:return:  an ``collections.OrderedDict`` of task_family -> class",
                    "start_line": 128,
                    "end_line": 152,
                    "variables": {
                        "reg": [
                            136,
                            142,
                            143,
                            144,
                            148,
                            150,
                            152
                        ],
                        "OrderedDict": [
                            136
                        ],
                        "cls": [
                            137,
                            138,
                            140,
                            142,
                            143,
                            144,
                            148,
                            150
                        ],
                        "cls._reg": [
                            137
                        ],
                        "cls.run": [
                            138
                        ],
                        "NotImplemented": [
                            138
                        ],
                        "name": [
                            140,
                            142,
                            143,
                            144,
                            148,
                            150
                        ],
                        "cls.task_family": [
                            140
                        ],
                        "cls.AMBIGUOUS_CLASS": [
                            148,
                            143
                        ],
                        "issubclass": [
                            144
                        ],
                        "classmethod": [
                            128
                        ]
                    },
                    "filtered_variables": {
                        "reg": [
                            136,
                            142,
                            143,
                            144,
                            148,
                            150,
                            152
                        ],
                        "OrderedDict": [
                            136
                        ],
                        "cls": [
                            137,
                            138,
                            140,
                            142,
                            143,
                            144,
                            148,
                            150
                        ],
                        "cls._reg": [
                            137
                        ],
                        "cls.run": [
                            138
                        ],
                        "name": [
                            140,
                            142,
                            143,
                            144,
                            148,
                            150
                        ],
                        "cls.task_family": [
                            140
                        ],
                        "cls.AMBIGUOUS_CLASS": [
                            148,
                            143
                        ]
                    },
                    "diff_line_number": 138,
                    "class_data": {
                        "signature": "class Register(abc.ABCMeta)",
                        "docstring": "The Metaclass of :py:class:`Task`.\n\nActs as a global registry of Tasks with the following properties:\n\n1. Cache instances of objects so that eg. ``X(1, 2, 3)`` always returns the\n   same object.\n2. Keep track of all subclasses of :py:class:`Task` and expose them.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(metacls, classname, bases, classdict):\n    \"\"\"\n    Custom class creation for namespacing.\n\n    Also register all subclasses.\n\n    Set the task namespace to whatever the currently declared namespace is.\n    \"\"\"\n    if 'task_namespace' not in classdict:\n        classdict['task_namespace'] = metacls._default_namespace\n    cls = super(Register, metacls).__new__(metacls, classname, bases, classdict)\n    metacls._reg.append(cls)\n    return cls",
                            "def __call__(cls, *args, **kwargs):\n    \"\"\"\n    Custom class instantiation utilizing instance cache.\n\n    If a Task has already been instantiated with the same parameters,\n    the previous instance is returned to reduce number of object instances.\n    \"\"\"\n\n    def instantiate():\n        return super(Register, cls).__call__(*args, **kwargs)\n    h = cls.__instance_cache\n    if h is None:\n        return instantiate()\n    params = cls.get_params()\n    param_values = cls.get_param_values(params, args, kwargs)\n    k = (cls, tuple(param_values))\n    try:\n        hash(k)\n    except TypeError:\n        logger.debug(\"Not all parameter values are hashable so instance isn't coming from the cache\")\n        return instantiate()\n    if k not in h:\n        h[k] = instantiate()\n    return h[k]",
                            "@classmethod\ndef clear_instance_cache(cls):\n    \"\"\"\n    Clear/Reset the instance cache.\n    \"\"\"\n    cls.__instance_cache = {}",
                            "@classmethod\ndef disable_instance_cache(cls):\n    \"\"\"\n    Disables the instance cache.\n    \"\"\"\n    cls.__instance_cache = None",
                            "@property\ndef task_family(cls):\n    \"\"\"\n    The task family for the given class.\n\n    If ``cls.task_namespace is None`` then it's the name of the class.\n    Otherwise, ``<task_namespace>.`` is prefixed to the class name.\n    \"\"\"\n    if cls.task_namespace is None:\n        return cls.__name__\n    else:\n        return '%s.%s' % (cls.task_namespace, cls.__name__)",
                            "@classmethod\ndef __get_reg(cls):\n    \"\"\"Return all of the registered classes.\n\n    :return:  an ``collections.OrderedDict`` of task_family -> class\n    \"\"\"\n    reg = OrderedDict()\n    for cls in cls._reg:\n        if cls.run == NotImplemented:\n            continue\n        name = cls.task_family\n        if name in reg and reg[name] != cls and (reg[name] != cls.AMBIGUOUS_CLASS) and (not issubclass(cls, reg[name])):\n            reg[name] = cls.AMBIGUOUS_CLASS\n        else:\n            reg[name] = cls\n    return reg",
                            "@classmethod\ndef task_names(cls):\n    \"\"\"\n    List of task names as strings\n    \"\"\"\n    return sorted(cls.__get_reg().keys())",
                            "@classmethod\ndef tasks_str(cls):\n    \"\"\"\n    Human-readable register contents dump.\n    \"\"\"\n    return ','.join(cls.task_names())",
                            "@classmethod\ndef get_task_cls(cls, name):\n    \"\"\"\n    Returns an unambiguous class or raises an exception.\n    \"\"\"\n    task_cls = cls.__get_reg().get(name)\n    if not task_cls:\n        raise TaskClassException('Task %r not found. Candidates are: %s' % (name, cls.tasks_str()))\n    if task_cls == cls.AMBIGUOUS_CLASS:\n        raise TaskClassException('Task %r is ambiguous' % name)\n    return task_cls",
                            "@classmethod\ndef get_all_params(cls):\n    \"\"\"\n    Compiles and returns all parameters for all :py:class:`Task`.\n\n    :return: a generator of tuples (TODO: we should make this more elegant)\n    \"\"\"\n    for task_name, task_cls in six.iteritems(cls.__get_reg()):\n        if task_cls == cls.AMBIGUOUS_CLASS:\n            continue\n        for param_name, param_obj in task_cls.get_params():\n            yield (task_name, not task_cls.use_cmdline_section, param_name, param_obj)",
                            "def instantiate():\n    return super(Register, cls).__call__(*args, **kwargs)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "__instance_cache",
                            "_default_namespace",
                            "_reg",
                            "AMBIGUOUS_CLASS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__new__(metacls, classname, bases, classdict)",
                            "__call__(cls, *args, **kwargs)",
                            "clear_instance_cache(cls)",
                            "disable_instance_cache(cls)",
                            "task_family(cls)",
                            "__get_reg(cls)",
                            "task_names(cls)",
                            "tasks_str(cls)",
                            "get_task_cls(cls, name)",
                            "get_all_params(cls)",
                            "instantiate()"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "reg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'luigi.task_register.Register'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "cls._reg": {
                                    "variable_value": "[<class 'luigi.task.Task'>, <class 'luigi.task.ExternalTask'>, <class 'luigi.task.WrapperTask'>, <class 'luigi.task.Config'>, <class 'luigi.scheduler.scheduler'>, <class 'luigi.worker.worker'>, <class 'luigi.interface.core'>, <class 'luigi.tools.range.RangeBase'>, <class 'luigi.tools.range.RangeDailyBase'>, <class 'luigi.tools.range.RangeHourlyBase'>, <class 'luigi.tools.range.RangeDaily'>, <class 'luigi.tools.range.RangeHourly'>, <class 'task_test.DummyTask'>]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "cls.run": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls.task_family": {
                                    "variable_value": "<property object at 0x10349bef0>",
                                    "variable_type": "property",
                                    "variable_shape": null
                                },
                                "cls.AMBIGUOUS_CLASS": {
                                    "variable_value": "<object object at 0x102c8db60>",
                                    "variable_type": "object",
                                    "variable_shape": null
                                }
                            },
                            {
                                "reg": {
                                    "variable_value": "OrderedDict([('Task', <class 'luigi.task.Task'>), ('WrapperTask', <class 'luigi.task.WrapperTask'>), ('Config', <class 'luigi.task.Config'>), ('scheduler', <class 'luigi.scheduler.scheduler'>), ('worker', <class 'luigi.worker.worker'>), ('core', <class 'luigi.interface.core'>), ('RangeBase', <class 'luigi.tools.range.RangeBase'>), ('RangeDailyBase', <class 'luigi.tools.range.RangeDailyBase'>), ('RangeHourlyBase', <class 'luigi.tools.range.RangeHourlyBase'>), ('RangeDaily', <class 'luigi.tools.range.RangeDaily'>), ('RangeHourly', <class 'luigi.tools.range.RangeHourly'>), ('DummyTask', <class 'task_test.DummyTask'>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "12"
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'task_test.DummyTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cls._reg": {
                                    "variable_value": "[<class 'luigi.task.Task'>, <class 'luigi.task.ExternalTask'>, <class 'luigi.task.WrapperTask'>, <class 'luigi.task.Config'>, <class 'luigi.scheduler.scheduler'>, <class 'luigi.worker.worker'>, <class 'luigi.interface.core'>, <class 'luigi.tools.range.RangeBase'>, <class 'luigi.tools.range.RangeDailyBase'>, <class 'luigi.tools.range.RangeHourlyBase'>, <class 'luigi.tools.range.RangeDaily'>, <class 'luigi.tools.range.RangeHourly'>, <class 'task_test.DummyTask'>]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "cls.run": {
                                    "variable_value": "<function Task.run at 0x1034a9280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'DummyTask'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "cls.task_family": {
                                    "variable_value": "'DummyTask'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "cls.AMBIGUOUS_CLASS": {
                                    "variable_value": "<object object at 0x102c8db60>",
                                    "variable_type": "object",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "reg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'luigi.task_register.Register'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "cls._reg": {
                                    "variable_value": "[<class 'luigi.task.Task'>, <class 'luigi.task.ExternalTask'>, <class 'luigi.task.WrapperTask'>, <class 'luigi.task.Config'>, <class 'luigi.scheduler.scheduler'>, <class 'luigi.worker.worker'>, <class 'luigi.interface.core'>, <class 'luigi.tools.range.RangeBase'>, <class 'luigi.tools.range.RangeDailyBase'>, <class 'luigi.tools.range.RangeHourlyBase'>, <class 'luigi.tools.range.RangeDaily'>, <class 'luigi.tools.range.RangeHourly'>, <class 'task_test.DummyTask'>]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "cls.run": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls.task_family": {
                                    "variable_value": "<property object at 0x10349bef0>",
                                    "variable_type": "property",
                                    "variable_shape": null
                                },
                                "cls.AMBIGUOUS_CLASS": {
                                    "variable_value": "<object object at 0x102c8db60>",
                                    "variable_type": "object",
                                    "variable_shape": null
                                }
                            },
                            {
                                "reg": {
                                    "variable_value": "OrderedDict([('Task', <class 'luigi.task.Task'>), ('WrapperTask', <class 'luigi.task.WrapperTask'>), ('Config', <class 'luigi.task.Config'>), ('scheduler', <class 'luigi.scheduler.scheduler'>), ('worker', <class 'luigi.worker.worker'>), ('core', <class 'luigi.interface.core'>), ('RangeBase', <class 'luigi.tools.range.RangeBase'>), ('RangeDailyBase', <class 'luigi.tools.range.RangeDailyBase'>), ('RangeHourlyBase', <class 'luigi.tools.range.RangeHourlyBase'>), ('RangeDaily', <class 'luigi.tools.range.RangeDaily'>), ('RangeHourly', <class 'luigi.tools.range.RangeHourly'>), ('DummyTask', <class 'task_test.DummyTask'>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "12"
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'task_test.DummyTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cls._reg": {
                                    "variable_value": "[<class 'luigi.task.Task'>, <class 'luigi.task.ExternalTask'>, <class 'luigi.task.WrapperTask'>, <class 'luigi.task.Config'>, <class 'luigi.scheduler.scheduler'>, <class 'luigi.worker.worker'>, <class 'luigi.interface.core'>, <class 'luigi.tools.range.RangeBase'>, <class 'luigi.tools.range.RangeDailyBase'>, <class 'luigi.tools.range.RangeHourlyBase'>, <class 'luigi.tools.range.RangeDaily'>, <class 'luigi.tools.range.RangeHourly'>, <class 'task_test.DummyTask'>]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "cls.run": {
                                    "variable_value": "<function Task.run at 0x1034a9280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'DummyTask'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "cls.task_family": {
                                    "variable_value": "'DummyTask'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "cls.AMBIGUOUS_CLASS": {
                                    "variable_value": "<object object at 0x102c8db60>",
                                    "variable_type": "object",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "reg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'luigi.task_register.Register'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "cls._reg": {
                                    "variable_value": "[<class 'luigi.task.Task'>, <class 'luigi.task.ExternalTask'>, <class 'luigi.task.WrapperTask'>, <class 'luigi.task.Config'>, <class 'luigi.scheduler.scheduler'>, <class 'luigi.worker.worker'>, <class 'luigi.interface.core'>, <class 'luigi.tools.range.RangeBase'>, <class 'luigi.tools.range.RangeDailyBase'>, <class 'luigi.tools.range.RangeHourlyBase'>, <class 'luigi.tools.range.RangeDaily'>, <class 'luigi.tools.range.RangeHourly'>, <class 'task_test.DummyTask'>]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls.task_family": {
                                    "variable_value": "<property object at 0x10e663d10>",
                                    "variable_type": "property",
                                    "variable_shape": null
                                },
                                "cls.AMBIGUOUS_CLASS": {
                                    "variable_value": "<object object at 0x10de4be40>",
                                    "variable_type": "object",
                                    "variable_shape": null
                                }
                            },
                            {
                                "reg": {
                                    "variable_value": "OrderedDict([('Task', <class 'luigi.task.Task'>), ('ExternalTask', <class 'luigi.task.ExternalTask'>), ('WrapperTask', <class 'luigi.task.WrapperTask'>), ('Config', <class 'luigi.task.Config'>), ('scheduler', <class 'luigi.scheduler.scheduler'>), ('worker', <class 'luigi.worker.worker'>), ('core', <class 'luigi.interface.core'>), ('RangeBase', <class 'luigi.tools.range.RangeBase'>), ('RangeDailyBase', <class 'luigi.tools.range.RangeDailyBase'>), ('RangeHourlyBase', <class 'luigi.tools.range.RangeHourlyBase'>), ('RangeDaily', <class 'luigi.tools.range.RangeDaily'>), ('RangeHourly', <class 'luigi.tools.range.RangeHourly'>), ('DummyTask', <class 'task_test.DummyTask'>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "13"
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'task_test.DummyTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cls._reg": {
                                    "variable_value": "[<class 'luigi.task.Task'>, <class 'luigi.task.ExternalTask'>, <class 'luigi.task.WrapperTask'>, <class 'luigi.task.Config'>, <class 'luigi.scheduler.scheduler'>, <class 'luigi.worker.worker'>, <class 'luigi.interface.core'>, <class 'luigi.tools.range.RangeBase'>, <class 'luigi.tools.range.RangeDailyBase'>, <class 'luigi.tools.range.RangeHourlyBase'>, <class 'luigi.tools.range.RangeDaily'>, <class 'luigi.tools.range.RangeHourly'>, <class 'task_test.DummyTask'>]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "name": {
                                    "variable_value": "'DummyTask'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "cls.task_family": {
                                    "variable_value": "'DummyTask'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "cls.AMBIGUOUS_CLASS": {
                                    "variable_value": "<object object at 0x10de4be40>",
                                    "variable_type": "object",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def load_task(module, task_name, params_str):\n    \"\"\"\n    Imports task dynamically given a module and a task name.\n    \"\"\"\n    if module is not None:\n        __import__(module)\n    task_cls = Register.get_task_cls(task_name)\n    return task_cls.from_str_params(params_str)",
                "def __new__(metacls, classname, bases, classdict):\n    \"\"\"\n    Custom class creation for namespacing.\n\n    Also register all subclasses.\n\n    Set the task namespace to whatever the currently declared namespace is.\n    \"\"\"\n    if \"task_namespace\" not in classdict:\n        classdict[\"task_namespace\"] = metacls._default_namespace\n\n    cls = super(Register, metacls).__new__(metacls, classname, bases, classdict)\n    metacls._reg.append(cls)\n\n    return cls",
                "def __call__(cls, *args, **kwargs):\n    \"\"\"\n    Custom class instantiation utilizing instance cache.\n\n    If a Task has already been instantiated with the same parameters,\n    the previous instance is returned to reduce number of object instances.\n    \"\"\"\n    def instantiate():\n        return super(Register, cls).__call__(*args, **kwargs)\n\n    h = cls.__instance_cache\n\n    if h is None:  # disabled\n        return instantiate()\n\n    params = cls.get_params()\n    param_values = cls.get_param_values(params, args, kwargs)\n\n    k = (cls, tuple(param_values))\n\n    try:\n        hash(k)\n    except TypeError:\n        logger.debug(\"Not all parameter values are hashable so instance isn't coming from the cache\")\n        return instantiate()  # unhashable types in parameters\n\n    if k not in h:\n        h[k] = instantiate()\n\n    return h[k]",
                "@classmethod\ndef clear_instance_cache(cls):\n    \"\"\"\n    Clear/Reset the instance cache.\n    \"\"\"\n    cls.__instance_cache = {}",
                "@classmethod\ndef disable_instance_cache(cls):\n    \"\"\"\n    Disables the instance cache.\n    \"\"\"\n    cls.__instance_cache = None",
                "@property\ndef task_family(cls):\n    \"\"\"\n    The task family for the given class.\n\n    If ``cls.task_namespace is None`` then it's the name of the class.\n    Otherwise, ``<task_namespace>.`` is prefixed to the class name.\n    \"\"\"\n    if cls.task_namespace is None:\n        return cls.__name__\n    else:\n        return \"%s.%s\" % (cls.task_namespace, cls.__name__)",
                "@classmethod\ndef __get_reg(cls):\n    \"\"\"Return all of the registered classes.\n\n    :return:  an ``collections.OrderedDict`` of task_family -> class\n    \"\"\"\n    # We have to do this on-demand in case task names have changed later\n    # We return this in a topologically sorted list of inheritance: this is useful in some cases (#822)\n    reg = OrderedDict()\n    for cls in cls._reg:\n        if cls.run == NotImplemented:\n            continue\n        name = cls.task_family\n\n        if name in reg and reg[name] != cls and \\\n                reg[name] != cls.AMBIGUOUS_CLASS and \\\n                not issubclass(cls, reg[name]):\n            # Registering two different classes - this means we can't instantiate them by name\n            # The only exception is if one class is a subclass of the other. In that case, we\n            # instantiate the most-derived class (this fixes some issues with decorator wrappers).\n            reg[name] = cls.AMBIGUOUS_CLASS\n        else:\n            reg[name] = cls\n\n    return reg",
                "@classmethod\ndef task_names(cls):\n    \"\"\"\n    List of task names as strings\n    \"\"\"\n    return sorted(cls.__get_reg().keys())",
                "@classmethod\ndef tasks_str(cls):\n    \"\"\"\n    Human-readable register contents dump.\n    \"\"\"\n    return ','.join(cls.task_names())",
                "@classmethod\ndef get_task_cls(cls, name):\n    \"\"\"\n    Returns an unambiguous class or raises an exception.\n    \"\"\"\n    task_cls = cls.__get_reg().get(name)\n    if not task_cls:\n        raise TaskClassException('Task %r not found. Candidates are: %s' % (name, cls.tasks_str()))\n\n    if task_cls == cls.AMBIGUOUS_CLASS:\n        raise TaskClassException('Task %r is ambiguous' % name)\n    return task_cls",
                "@classmethod\ndef get_all_params(cls):\n    \"\"\"\n    Compiles and returns all parameters for all :py:class:`Task`.\n\n    :return: a generator of tuples (TODO: we should make this more elegant)\n    \"\"\"\n    for task_name, task_cls in six.iteritems(cls.__get_reg()):\n        if task_cls == cls.AMBIGUOUS_CLASS:\n            continue\n        for param_name, param_obj in task_cls.get_params():\n            yield task_name, (not task_cls.use_cmdline_section), param_name, param_obj",
                "def instantiate():\n    return super(Register, cls).__call__(*args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "load_task(module, task_name, params_str)",
                "__new__(metacls, classname, bases, classdict)",
                "__call__(cls, *args, **kwargs)",
                "clear_instance_cache(cls)",
                "disable_instance_cache(cls)",
                "task_family(cls)",
                "__get_reg(cls)",
                "task_names(cls)",
                "tasks_str(cls)",
                "get_task_cls(cls, name)",
                "get_all_params(cls)",
                "instantiate()"
            ],
            "variables_in_file": {
                "ImportError": [
                    24
                ],
                "logger": [
                    93,
                    29
                ],
                "logging.getLogger": [
                    29
                ],
                "logging": [
                    29
                ],
                "Exception": [
                    32
                ],
                "abc.ABCMeta": [
                    36
                ],
                "abc": [
                    36
                ],
                "__instance_cache": [
                    46
                ],
                "_default_namespace": [
                    47
                ],
                "_reg": [
                    48
                ],
                "AMBIGUOUS_CLASS": [
                    49
                ],
                "object": [
                    49
                ],
                "classdict": [
                    65,
                    62,
                    63
                ],
                "metacls._default_namespace": [
                    63
                ],
                "metacls": [
                    65,
                    66,
                    63
                ],
                "cls": [
                    137,
                    138,
                    140,
                    142,
                    143,
                    144,
                    148,
                    150,
                    159,
                    166,
                    173,
                    175,
                    177,
                    188,
                    189,
                    65,
                    66,
                    68,
                    78,
                    80,
                    85,
                    86,
                    88,
                    106,
                    113,
                    123,
                    124,
                    126
                ],
                "__new__": [
                    65
                ],
                "super": [
                    65,
                    78
                ],
                "Register": [
                    65,
                    201,
                    78
                ],
                "classname": [
                    65
                ],
                "bases": [
                    65
                ],
                "metacls._reg.append": [
                    66
                ],
                "metacls._reg": [
                    66
                ],
                "__call__": [
                    78
                ],
                "args": [
                    86,
                    78
                ],
                "kwargs": [
                    86,
                    78
                ],
                "h": [
                    96,
                    97,
                    99,
                    80,
                    82
                ],
                "cls.__instance_cache": [
                    80,
                    113,
                    106
                ],
                "instantiate": [
                    97,
                    83,
                    94
                ],
                "params": [
                    85,
                    86
                ],
                "cls.get_params": [
                    85
                ],
                "param_values": [
                    88,
                    86
                ],
                "cls.get_param_values": [
                    86
                ],
                "k": [
                    96,
                    97,
                    99,
                    88,
                    91
                ],
                "tuple": [
                    88
                ],
                "hash": [
                    91
                ],
                "TypeError": [
                    92
                ],
                "logger.debug": [
                    93
                ],
                "classmethod": [
                    128,
                    161,
                    101,
                    168,
                    108,
                    181,
                    154
                ],
                "cls.task_namespace": [
                    123,
                    126
                ],
                "cls.__name__": [
                    124,
                    126
                ],
                "property": [
                    115
                ],
                "reg": [
                    136,
                    142,
                    143,
                    144,
                    148,
                    150,
                    152
                ],
                "OrderedDict": [
                    136
                ],
                "cls._reg": [
                    137
                ],
                "cls.run": [
                    138
                ],
                "NotImplemented": [
                    138
                ],
                "name": [
                    140,
                    173,
                    142,
                    143,
                    144,
                    175,
                    178,
                    148,
                    150
                ],
                "cls.task_family": [
                    140
                ],
                "cls.AMBIGUOUS_CLASS": [
                    177,
                    148,
                    189,
                    143
                ],
                "issubclass": [
                    144
                ],
                "sorted": [
                    159
                ],
                "keys": [
                    159
                ],
                "cls.__get_reg": [
                    188,
                    173,
                    159
                ],
                "join": [
                    166
                ],
                "cls.task_names": [
                    166
                ],
                "task_cls": [
                    192,
                    201,
                    202,
                    173,
                    174,
                    177,
                    179,
                    188,
                    189,
                    191
                ],
                "get": [
                    173
                ],
                "TaskClassException": [
                    178,
                    175
                ],
                "cls.tasks_str": [
                    175
                ],
                "task_name": [
                    192,
                    201,
                    188
                ],
                "six.iteritems": [
                    188
                ],
                "six": [
                    188
                ],
                "param_name": [
                    192,
                    191
                ],
                "param_obj": [
                    192,
                    191
                ],
                "task_cls.get_params": [
                    191
                ],
                "task_cls.use_cmdline_section": [
                    192
                ],
                "module": [
                    200,
                    199
                ],
                "__import__": [
                    200
                ],
                "Register.get_task_cls": [
                    201
                ],
                "task_cls.from_str_params": [
                    202
                ],
                "params_str": [
                    202
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    93,
                    29
                ],
                "logging.getLogger": [
                    29
                ],
                "logging": [
                    29
                ],
                "abc.ABCMeta": [
                    36
                ],
                "abc": [
                    36
                ],
                "__instance_cache": [
                    46
                ],
                "_default_namespace": [
                    47
                ],
                "_reg": [
                    48
                ],
                "AMBIGUOUS_CLASS": [
                    49
                ],
                "classdict": [
                    65,
                    62,
                    63
                ],
                "metacls._default_namespace": [
                    63
                ],
                "metacls": [
                    65,
                    66,
                    63
                ],
                "cls": [
                    137,
                    138,
                    140,
                    142,
                    143,
                    144,
                    148,
                    150,
                    159,
                    166,
                    173,
                    175,
                    177,
                    188,
                    189,
                    65,
                    66,
                    68,
                    78,
                    80,
                    85,
                    86,
                    88,
                    106,
                    113,
                    123,
                    124,
                    126
                ],
                "__new__": [
                    65
                ],
                "Register": [
                    65,
                    201,
                    78
                ],
                "classname": [
                    65
                ],
                "bases": [
                    65
                ],
                "metacls._reg.append": [
                    66
                ],
                "metacls._reg": [
                    66
                ],
                "__call__": [
                    78
                ],
                "args": [
                    86,
                    78
                ],
                "kwargs": [
                    86,
                    78
                ],
                "h": [
                    96,
                    97,
                    99,
                    80,
                    82
                ],
                "cls.__instance_cache": [
                    80,
                    113,
                    106
                ],
                "instantiate": [
                    97,
                    83,
                    94
                ],
                "params": [
                    85,
                    86
                ],
                "cls.get_params": [
                    85
                ],
                "param_values": [
                    88,
                    86
                ],
                "cls.get_param_values": [
                    86
                ],
                "k": [
                    96,
                    97,
                    99,
                    88,
                    91
                ],
                "logger.debug": [
                    93
                ],
                "cls.task_namespace": [
                    123,
                    126
                ],
                "cls.__name__": [
                    124,
                    126
                ],
                "reg": [
                    136,
                    142,
                    143,
                    144,
                    148,
                    150,
                    152
                ],
                "OrderedDict": [
                    136
                ],
                "cls._reg": [
                    137
                ],
                "cls.run": [
                    138
                ],
                "name": [
                    140,
                    173,
                    142,
                    143,
                    144,
                    175,
                    178,
                    148,
                    150
                ],
                "cls.task_family": [
                    140
                ],
                "cls.AMBIGUOUS_CLASS": [
                    177,
                    148,
                    189,
                    143
                ],
                "keys": [
                    159
                ],
                "cls.__get_reg": [
                    188,
                    173,
                    159
                ],
                "join": [
                    166
                ],
                "cls.task_names": [
                    166
                ],
                "task_cls": [
                    192,
                    201,
                    202,
                    173,
                    174,
                    177,
                    179,
                    188,
                    189,
                    191
                ],
                "get": [
                    173
                ],
                "TaskClassException": [
                    178,
                    175
                ],
                "cls.tasks_str": [
                    175
                ],
                "task_name": [
                    192,
                    201,
                    188
                ],
                "six.iteritems": [
                    188
                ],
                "six": [
                    188
                ],
                "param_name": [
                    192,
                    191
                ],
                "param_obj": [
                    192,
                    191
                ],
                "task_cls.get_params": [
                    191
                ],
                "task_cls.use_cmdline_section": [
                    192
                ],
                "module": [
                    200,
                    199
                ],
                "Register.get_task_cls": [
                    201
                ],
                "task_cls.from_str_params": [
                    202
                ],
                "params_str": [
                    202
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/luigi_29/test/cmdline_test.py": {
            "buggy_functions": [
                {
                    "function_name": "run",
                    "function_code": "def run(self):\n    NonAmbiguousClass.has_run = True\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 62,
                    "end_line": 63,
                    "variables": {
                        "NonAmbiguousClass.has_run": [
                            63
                        ],
                        "NonAmbiguousClass": [
                            63
                        ]
                    },
                    "filtered_variables": {
                        "NonAmbiguousClass.has_run": [
                            63
                        ],
                        "NonAmbiguousClass": [
                            63
                        ]
                    },
                    "diff_line_number": 62,
                    "class_data": {
                        "signature": "class NonAmbiguousClass(luigi.Task)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def run(self):\n    NonAmbiguousClass.has_run = True"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "run(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ],
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "test_cmdline_non_ambiguous_class",
                    "function_code": "@mock.patch(\"logging.getLogger\")\n@mock.patch(\"warnings.warn\")\ndef test_cmdline_non_ambiguous_class(self, warn, logger):\n    luigi.run(['--local-scheduler', '--no-lock', 'NonAmbiguousClass'])\n    self.assertTrue(NonAmbiguousClass.has_run)\n",
                    "decorators": [
                        "mock.patch('logging.getLogger')",
                        "mock.patch('warnings.warn')"
                    ],
                    "docstring": null,
                    "start_line": 118,
                    "end_line": 122,
                    "variables": {
                        "luigi.run": [
                            121
                        ],
                        "luigi": [
                            121
                        ],
                        "self.assertTrue": [
                            122
                        ],
                        "self": [
                            122
                        ],
                        "NonAmbiguousClass.has_run": [
                            122
                        ],
                        "NonAmbiguousClass": [
                            122
                        ],
                        "mock.patch": [
                            118,
                            119
                        ],
                        "mock": [
                            118,
                            119
                        ]
                    },
                    "filtered_variables": {
                        "luigi.run": [
                            121
                        ],
                        "luigi": [
                            121
                        ],
                        "self.assertTrue": [
                            122
                        ],
                        "self": [
                            122
                        ],
                        "NonAmbiguousClass.has_run": [
                            122
                        ],
                        "NonAmbiguousClass": [
                            122
                        ],
                        "mock.patch": [
                            118,
                            119
                        ],
                        "mock": [
                            118,
                            119
                        ]
                    },
                    "diff_line_number": 120,
                    "class_data": {
                        "signature": "class CmdlineTest(unittest.TestCase)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def setUp(self):\n    MockTarget.fs.clear()",
                            "@mock.patch('logging.getLogger')\ndef test_cmdline_main_task_cls(self, logger):\n    luigi.run(['--local-scheduler', '--no-lock', '--n', '100'], main_task_cls=SomeTask)\n    self.assertEqual(dict(MockTarget.fs.get_all_data()), {'/tmp/test_100': b'done'})",
                            "@mock.patch('logging.getLogger')\ndef test_cmdline_other_task(self, logger):\n    luigi.run(['--local-scheduler', '--no-lock', 'SomeTask', '--n', '1000'])\n    self.assertEqual(dict(MockTarget.fs.get_all_data()), {'/tmp/test_1000': b'done'})",
                            "@mock.patch('logging.getLogger')\ndef test_cmdline_ambiguous_class(self, logger):\n    self.assertRaises(Exception, luigi.run, ['--local-scheduler', '--no-lock', 'AmbiguousClass'])",
                            "@mock.patch('logging.getLogger')\n@mock.patch('warnings.warn')\ndef test_cmdline_non_ambiguous_class(self, warn, logger):\n    luigi.run(['--local-scheduler', '--no-lock', 'NonAmbiguousClass'])\n    self.assertTrue(NonAmbiguousClass.has_run)",
                            "@mock.patch('logging.getLogger')\n@mock.patch('logging.StreamHandler')\ndef test_setup_interface_logging(self, handler, logger):\n    handler.return_value = mock.Mock(name='stream_handler')\n    with mock.patch('luigi.interface.setup_interface_logging.has_run', new=False):\n        luigi.interface.setup_interface_logging()\n        self.assertEqual([mock.call(handler.return_value)], logger.return_value.addHandler.call_args_list)\n    with mock.patch('luigi.interface.setup_interface_logging.has_run', new=False):\n        if six.PY2:\n            error = ConfigParser.NoSectionError\n        else:\n            error = KeyError\n        self.assertRaises(error, luigi.interface.setup_interface_logging, '/blah')",
                            "@mock.patch('warnings.warn')\n@mock.patch('luigi.interface.setup_interface_logging')\ndef test_cmdline_logger(self, setup_mock, warn):\n    with mock.patch('luigi.interface.core') as env_params:\n        env_params.return_value.logging_conf_file = None\n        luigi.run(['SomeTask', '--n', '7', '--local-scheduler', '--no-lock'])\n        self.assertEqual([mock.call(None)], setup_mock.call_args_list)\n    with mock.patch('luigi.configuration.get_config') as getconf:\n        getconf.return_value.get.side_effect = ConfigParser.NoOptionError(section='foo', option='bar')\n        getconf.return_value.getint.return_value = 0\n        luigi.interface.setup_interface_logging.call_args_list = []\n        luigi.run(['SomeTask', '--n', '42', '--local-scheduler', '--no-lock'])\n        self.assertEqual([], setup_mock.call_args_list)",
                            "@mock.patch('argparse.ArgumentParser.print_usage')\ndef test_non_existent_class(self, print_usage):\n    self.assertRaises(SystemExit, luigi.run, ['--local-scheduler', '--no-lock', 'XYZ'])",
                            "@mock.patch('argparse.ArgumentParser.print_usage')\ndef test_no_task(self, print_usage):\n    self.assertRaises(SystemExit, luigi.run, ['--local-scheduler', '--no-lock'])"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "setUp(self)",
                            "test_cmdline_main_task_cls(self, logger)",
                            "test_cmdline_other_task(self, logger)",
                            "test_cmdline_ambiguous_class(self, logger)",
                            "test_cmdline_non_ambiguous_class(self, warn, logger)",
                            "test_setup_interface_logging(self, handler, logger)",
                            "test_cmdline_logger(self, setup_mock, warn)",
                            "test_non_existent_class(self, print_usage)",
                            "test_no_task(self, print_usage)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "class NonAmbiguousClass(luigi.ExternalTask):\n    pass\n\n\nclass NonAmbiguousClass(luigi.Task):",
                    "start_line": 56,
                    "end_line": 61
                },
                {
                    "snippet_code": "@mock.patch(\"logging.getLogger\")\n    @mock.patch(\"warnings.warn\")",
                    "start_line": 118,
                    "end_line": 119
                }
            ],
            "inscope_functions": [
                "def output(self):\n    return MockTarget('/tmp/test_%d' % self.n)",
                "def run(self):\n    f = self.output().open('w')\n    f.write('done')\n    f.close()",
                "def run(self):\n    NonAmbiguousClass.has_run = True",
                "def run(self):\n    self.x = 42",
                "def run(self):\n    self.x = 43",
                "def output(self):\n    return luigi.LocalTarget(self.filename)",
                "def run(self):\n    f = self.output().open('w')\n    print('foo', file=f)\n    f.close()",
                "def setUp(self):\n    MockTarget.fs.clear()",
                "@mock.patch(\"logging.getLogger\")\ndef test_cmdline_main_task_cls(self, logger):\n    luigi.run(['--local-scheduler', '--no-lock', '--n', '100'], main_task_cls=SomeTask)\n    self.assertEqual(dict(MockTarget.fs.get_all_data()), {'/tmp/test_100': b'done'})",
                "@mock.patch(\"logging.getLogger\")\ndef test_cmdline_other_task(self, logger):\n    luigi.run(['--local-scheduler', '--no-lock', 'SomeTask', '--n', '1000'])\n    self.assertEqual(dict(MockTarget.fs.get_all_data()), {'/tmp/test_1000': b'done'})",
                "@mock.patch(\"logging.getLogger\")\ndef test_cmdline_ambiguous_class(self, logger):\n    self.assertRaises(Exception, luigi.run, ['--local-scheduler', '--no-lock', 'AmbiguousClass'])",
                "@mock.patch(\"logging.getLogger\")\n@mock.patch(\"warnings.warn\")\ndef test_cmdline_non_ambiguous_class(self, warn, logger):\n    luigi.run(['--local-scheduler', '--no-lock', 'NonAmbiguousClass'])\n    self.assertTrue(NonAmbiguousClass.has_run)",
                "@mock.patch(\"logging.getLogger\")\n@mock.patch(\"logging.StreamHandler\")\ndef test_setup_interface_logging(self, handler, logger):\n    handler.return_value = mock.Mock(name=\"stream_handler\")\n    with mock.patch(\"luigi.interface.setup_interface_logging.has_run\", new=False):\n        luigi.interface.setup_interface_logging()\n        self.assertEqual([mock.call(handler.return_value)], logger.return_value.addHandler.call_args_list)\n\n    with mock.patch(\"luigi.interface.setup_interface_logging.has_run\", new=False):\n        if six.PY2:\n            error = ConfigParser.NoSectionError\n        else:\n            error = KeyError\n        self.assertRaises(error, luigi.interface.setup_interface_logging, '/blah')",
                "@mock.patch(\"warnings.warn\")\n@mock.patch(\"luigi.interface.setup_interface_logging\")\ndef test_cmdline_logger(self, setup_mock, warn):\n    with mock.patch(\"luigi.interface.core\") as env_params:\n        env_params.return_value.logging_conf_file = None\n        luigi.run(['SomeTask', '--n', '7', '--local-scheduler', '--no-lock'])\n        self.assertEqual([mock.call(None)], setup_mock.call_args_list)\n\n    with mock.patch(\"luigi.configuration.get_config\") as getconf:\n        getconf.return_value.get.side_effect = ConfigParser.NoOptionError(section='foo', option='bar')\n        getconf.return_value.getint.return_value = 0\n\n        luigi.interface.setup_interface_logging.call_args_list = []\n        luigi.run(['SomeTask', '--n', '42', '--local-scheduler', '--no-lock'])\n        self.assertEqual([], setup_mock.call_args_list)",
                "@mock.patch('argparse.ArgumentParser.print_usage')\ndef test_non_existent_class(self, print_usage):\n    self.assertRaises(SystemExit, luigi.run, ['--local-scheduler', '--no-lock', 'XYZ'])",
                "@mock.patch('argparse.ArgumentParser.print_usage')\ndef test_no_task(self, print_usage):\n    self.assertRaises(SystemExit, luigi.run, ['--local-scheduler', '--no-lock'])",
                "def _run_cmdline(self, args):\n    env = os.environ.copy()\n    env['PYTHONPATH'] = env.get('PYTHONPATH', '') + ':.:test'\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    stdout, stderr = p.communicate()  # Unfortunately subprocess.check_output is 2.7+\n    return p.returncode, stdout, stderr",
                "def test_bin_luigi(self):\n    t = luigi.LocalTarget(is_tmp=True)\n    args = ['./bin/luigi', '--module', 'cmdline_test', 'WriteToFile', '--filename', t.path, '--local-scheduler', '--no-lock']\n    self._run_cmdline(args)\n    self.assertTrue(t.exists())",
                "def test_direct_python(self):\n    t = luigi.LocalTarget(is_tmp=True)\n    args = ['python', 'test/cmdline_test.py', 'WriteToFile', '--filename', t.path, '--local-scheduler', '--no-lock']\n    self._run_cmdline(args)\n    self.assertTrue(t.exists())",
                "def test_direct_python_help(self):\n    returncode, stdout, stderr = self._run_cmdline(['python', 'test/cmdline_test.py', '--help'])\n    self.assertTrue(stdout.find(b'--FooBaseClass-x') != -1)\n    self.assertFalse(stdout.find(b'--x') != -1)",
                "def test_direct_python_help_class(self):\n    returncode, stdout, stderr = self._run_cmdline(['python', 'test/cmdline_test.py', 'FooBaseClass', '--help'])\n    self.assertTrue(stdout.find(b'--FooBaseClass-x') != -1)\n    self.assertTrue(stdout.find(b'--x') != -1)",
                "def test_bin_luigi_help(self):\n    returncode, stdout, stderr = self._run_cmdline(['./bin/luigi', '--module', 'cmdline_test', '--help'])\n    self.assertTrue(stdout.find(b'--FooBaseClass-x') != -1)\n    self.assertFalse(stdout.find(b'--x') != -1)",
                "def test_bin_luigi_help_class(self):\n    returncode, stdout, stderr = self._run_cmdline(['./bin/luigi', '--module', 'cmdline_test', 'FooBaseClass', '--help'])\n    self.assertTrue(stdout.find(b'--FooBaseClass-x') != -1)\n    self.assertTrue(stdout.find(b'--x') != -1)",
                "def test_subclasses(self):\n    ap = luigi.interface.ArgParseInterface()\n\n    task, = ap.parse(['--local-scheduler', '--no-lock', 'FooSubClass', '--x', 'xyz', '--FooBaseClass-x', 'xyz'])\n    self.assertEquals(task.x, 'xyz')\n\n    # This won't work because --FooSubClass-x doesn't exist\n    self.assertRaises(BaseException, ap.parse, (['--local-scheduler', '--no-lock', 'FooBaseClass', '--x', 'xyz', '--FooSubClass-x', 'xyz']))",
                "def test_subclasses_2(self):\n    ap = luigi.interface.ArgParseInterface()\n\n    # https://github.com/spotify/luigi/issues/822#issuecomment-77782714\n    task, = ap.parse(['--local-scheduler', '--no-lock', 'FooBaseClass', '--FooBaseClass-x', 'xyz'])\n    self.assertEquals(task.x, 'xyz')"
            ],
            "inscope_function_signatures": [
                "output(self)",
                "run(self)",
                "run(self)",
                "run(self)",
                "run(self)",
                "output(self)",
                "run(self)",
                "setUp(self)",
                "test_cmdline_main_task_cls(self, logger)",
                "test_cmdline_other_task(self, logger)",
                "test_cmdline_ambiguous_class(self, logger)",
                "test_cmdline_non_ambiguous_class(self, warn, logger)",
                "test_setup_interface_logging(self, handler, logger)",
                "test_cmdline_logger(self, setup_mock, warn)",
                "test_non_existent_class(self, print_usage)",
                "test_no_task(self, print_usage)",
                "_run_cmdline(self, args)",
                "test_bin_luigi(self)",
                "test_direct_python(self)",
                "test_direct_python_help(self)",
                "test_direct_python_help_class(self)",
                "test_bin_luigi_help(self)",
                "test_bin_luigi_help_class(self)",
                "test_subclasses(self)",
                "test_subclasses_2(self)"
            ],
            "variables_in_file": {
                "ImportError": [
                    21
                ],
                "luigi.Task": [
                    66,
                    36,
                    72,
                    79,
                    48,
                    52,
                    91,
                    60
                ],
                "luigi": [
                    129,
                    137,
                    144,
                    151,
                    152,
                    157,
                    161,
                    36,
                    37,
                    174,
                    48,
                    52,
                    180,
                    56,
                    60,
                    66,
                    72,
                    79,
                    80,
                    210,
                    83,
                    91,
                    92,
                    219,
                    228,
                    106,
                    111,
                    116,
                    121
                ],
                "n": [
                    37
                ],
                "luigi.IntParameter": [
                    37
                ],
                "MockTarget": [
                    40,
                    107,
                    112,
                    102
                ],
                "self.n": [
                    40
                ],
                "self": [
                    130,
                    137,
                    145,
                    153,
                    157,
                    161,
                    40,
                    43,
                    176,
                    177,
                    182,
                    183,
                    186,
                    187,
                    188,
                    191,
                    192,
                    193,
                    196,
                    69,
                    197,
                    198,
                    201,
                    202,
                    203,
                    76,
                    83,
                    213,
                    86,
                    216,
                    223,
                    107,
                    112,
                    116,
                    122
                ],
                "f": [
                    43,
                    44,
                    45,
                    86,
                    87,
                    88
                ],
                "open": [
                    43,
                    86
                ],
                "self.output": [
                    43,
                    86
                ],
                "f.write": [
                    44
                ],
                "f.close": [
                    88,
                    45
                ],
                "luigi.ExternalTask": [
                    56
                ],
                "NonAmbiguousClass.has_run": [
                    122,
                    63
                ],
                "NonAmbiguousClass": [
                    122,
                    63
                ],
                "self.x": [
                    76,
                    69
                ],
                "filename": [
                    80
                ],
                "luigi.Parameter": [
                    80,
                    92
                ],
                "luigi.LocalTarget": [
                    83,
                    180,
                    174
                ],
                "self.filename": [
                    83
                ],
                "print": [
                    87
                ],
                "x": [
                    92
                ],
                "FooBaseClass": [
                    95
                ],
                "unittest.TestCase": [
                    99,
                    164,
                    206
                ],
                "unittest": [
                    99,
                    164,
                    206
                ],
                "MockTarget.fs.clear": [
                    102
                ],
                "MockTarget.fs": [
                    112,
                    107,
                    102
                ],
                "luigi.run": [
                    161,
                    228,
                    106,
                    111,
                    144,
                    116,
                    152,
                    121,
                    157
                ],
                "SomeTask": [
                    106
                ],
                "self.assertEqual": [
                    130,
                    107,
                    112,
                    145,
                    153
                ],
                "dict": [
                    112,
                    107
                ],
                "MockTarget.fs.get_all_data": [
                    112,
                    107
                ],
                "mock.patch": [
                    128,
                    132,
                    104,
                    139,
                    140,
                    109,
                    142,
                    114,
                    147,
                    118,
                    119,
                    155,
                    124,
                    125,
                    159
                ],
                "mock": [
                    128,
                    159,
                    130,
                    132,
                    104,
                    139,
                    140,
                    109,
                    142,
                    145,
                    114,
                    147,
                    118,
                    119,
                    155,
                    124,
                    125,
                    127
                ],
                "self.assertRaises": [
                    161,
                    137,
                    116,
                    216,
                    157
                ],
                "Exception": [
                    116
                ],
                "self.assertTrue": [
                    192,
                    193,
                    197,
                    202,
                    203,
                    177,
                    183,
                    122,
                    187
                ],
                "handler.return_value": [
                    130,
                    127
                ],
                "handler": [
                    130,
                    127
                ],
                "mock.Mock": [
                    127
                ],
                "luigi.interface.setup_interface_logging": [
                    129,
                    137,
                    151
                ],
                "luigi.interface": [
                    129,
                    137,
                    210,
                    151,
                    219
                ],
                "mock.call": [
                    145,
                    130
                ],
                "logger.return_value.addHandler.call_args_list": [
                    130
                ],
                "logger.return_value.addHandler": [
                    130
                ],
                "logger.return_value": [
                    130
                ],
                "logger": [
                    130
                ],
                "six.PY2": [
                    133
                ],
                "six": [
                    133
                ],
                "error": [
                    136,
                    137,
                    134
                ],
                "ConfigParser.NoSectionError": [
                    134
                ],
                "ConfigParser": [
                    148,
                    134
                ],
                "KeyError": [
                    136
                ],
                "env_params": [
                    142,
                    143
                ],
                "env_params.return_value.logging_conf_file": [
                    143
                ],
                "env_params.return_value": [
                    143
                ],
                "setup_mock.call_args_list": [
                    145,
                    153
                ],
                "setup_mock": [
                    145,
                    153
                ],
                "getconf": [
                    147,
                    148,
                    149
                ],
                "getconf.return_value.get.side_effect": [
                    148
                ],
                "getconf.return_value.get": [
                    148
                ],
                "getconf.return_value": [
                    148,
                    149
                ],
                "ConfigParser.NoOptionError": [
                    148
                ],
                "getconf.return_value.getint.return_value": [
                    149
                ],
                "getconf.return_value.getint": [
                    149
                ],
                "luigi.interface.setup_interface_logging.call_args_list": [
                    151
                ],
                "SystemExit": [
                    161,
                    157
                ],
                "env": [
                    168,
                    169,
                    167
                ],
                "os.environ.copy": [
                    167
                ],
                "os.environ": [
                    167
                ],
                "os": [
                    167
                ],
                "env.get": [
                    168
                ],
                "p": [
                    169,
                    170,
                    171
                ],
                "subprocess.Popen": [
                    169
                ],
                "subprocess": [
                    169
                ],
                "args": [
                    169,
                    175,
                    176,
                    181,
                    182
                ],
                "subprocess.PIPE": [
                    169
                ],
                "stdout": [
                    192,
                    193,
                    196,
                    197,
                    198,
                    201,
                    170,
                    171,
                    202,
                    203,
                    186,
                    187,
                    188,
                    191
                ],
                "stderr": [
                    196,
                    201,
                    170,
                    171,
                    186,
                    191
                ],
                "p.communicate": [
                    170
                ],
                "p.returncode": [
                    171
                ],
                "t": [
                    174,
                    175,
                    177,
                    180,
                    181,
                    183
                ],
                "t.path": [
                    181,
                    175
                ],
                "self._run_cmdline": [
                    196,
                    201,
                    176,
                    182,
                    186,
                    191
                ],
                "t.exists": [
                    177,
                    183
                ],
                "returncode": [
                    201,
                    186,
                    196,
                    191
                ],
                "stdout.find": [
                    192,
                    193,
                    197,
                    198,
                    202,
                    203,
                    187,
                    188
                ],
                "self.assertFalse": [
                    188,
                    198
                ],
                "ap": [
                    210,
                    212,
                    216,
                    219,
                    222
                ],
                "luigi.interface.ArgParseInterface": [
                    210,
                    219
                ],
                "task": [
                    212,
                    213,
                    222,
                    223
                ],
                "ap.parse": [
                    216,
                    212,
                    222
                ],
                "self.assertEquals": [
                    213,
                    223
                ],
                "task.x": [
                    213,
                    223
                ],
                "BaseException": [
                    216
                ],
                "__name__": [
                    226
                ]
            },
            "filtered_variables_in_file": {
                "luigi.Task": [
                    66,
                    36,
                    72,
                    79,
                    48,
                    52,
                    91,
                    60
                ],
                "luigi": [
                    129,
                    137,
                    144,
                    151,
                    152,
                    157,
                    161,
                    36,
                    37,
                    174,
                    48,
                    52,
                    180,
                    56,
                    60,
                    66,
                    72,
                    79,
                    80,
                    210,
                    83,
                    91,
                    92,
                    219,
                    228,
                    106,
                    111,
                    116,
                    121
                ],
                "n": [
                    37
                ],
                "luigi.IntParameter": [
                    37
                ],
                "MockTarget": [
                    40,
                    107,
                    112,
                    102
                ],
                "self.n": [
                    40
                ],
                "self": [
                    130,
                    137,
                    145,
                    153,
                    157,
                    161,
                    40,
                    43,
                    176,
                    177,
                    182,
                    183,
                    186,
                    187,
                    188,
                    191,
                    192,
                    193,
                    196,
                    69,
                    197,
                    198,
                    201,
                    202,
                    203,
                    76,
                    83,
                    213,
                    86,
                    216,
                    223,
                    107,
                    112,
                    116,
                    122
                ],
                "f": [
                    43,
                    44,
                    45,
                    86,
                    87,
                    88
                ],
                "self.output": [
                    43,
                    86
                ],
                "f.write": [
                    44
                ],
                "f.close": [
                    88,
                    45
                ],
                "luigi.ExternalTask": [
                    56
                ],
                "NonAmbiguousClass.has_run": [
                    122,
                    63
                ],
                "NonAmbiguousClass": [
                    122,
                    63
                ],
                "self.x": [
                    76,
                    69
                ],
                "filename": [
                    80
                ],
                "luigi.Parameter": [
                    80,
                    92
                ],
                "luigi.LocalTarget": [
                    83,
                    180,
                    174
                ],
                "self.filename": [
                    83
                ],
                "x": [
                    92
                ],
                "FooBaseClass": [
                    95
                ],
                "unittest.TestCase": [
                    99,
                    164,
                    206
                ],
                "unittest": [
                    99,
                    164,
                    206
                ],
                "MockTarget.fs.clear": [
                    102
                ],
                "MockTarget.fs": [
                    112,
                    107,
                    102
                ],
                "luigi.run": [
                    161,
                    228,
                    106,
                    111,
                    144,
                    116,
                    152,
                    121,
                    157
                ],
                "SomeTask": [
                    106
                ],
                "self.assertEqual": [
                    130,
                    107,
                    112,
                    145,
                    153
                ],
                "MockTarget.fs.get_all_data": [
                    112,
                    107
                ],
                "mock.patch": [
                    128,
                    132,
                    104,
                    139,
                    140,
                    109,
                    142,
                    114,
                    147,
                    118,
                    119,
                    155,
                    124,
                    125,
                    159
                ],
                "mock": [
                    128,
                    159,
                    130,
                    132,
                    104,
                    139,
                    140,
                    109,
                    142,
                    145,
                    114,
                    147,
                    118,
                    119,
                    155,
                    124,
                    125,
                    127
                ],
                "self.assertRaises": [
                    161,
                    137,
                    116,
                    216,
                    157
                ],
                "self.assertTrue": [
                    192,
                    193,
                    197,
                    202,
                    203,
                    177,
                    183,
                    122,
                    187
                ],
                "handler.return_value": [
                    130,
                    127
                ],
                "handler": [
                    130,
                    127
                ],
                "mock.Mock": [
                    127
                ],
                "luigi.interface.setup_interface_logging": [
                    129,
                    137,
                    151
                ],
                "luigi.interface": [
                    129,
                    137,
                    210,
                    151,
                    219
                ],
                "mock.call": [
                    145,
                    130
                ],
                "logger.return_value.addHandler.call_args_list": [
                    130
                ],
                "logger.return_value.addHandler": [
                    130
                ],
                "logger.return_value": [
                    130
                ],
                "logger": [
                    130
                ],
                "six.PY2": [
                    133
                ],
                "six": [
                    133
                ],
                "error": [
                    136,
                    137,
                    134
                ],
                "ConfigParser.NoSectionError": [
                    134
                ],
                "ConfigParser": [
                    148,
                    134
                ],
                "env_params": [
                    142,
                    143
                ],
                "env_params.return_value.logging_conf_file": [
                    143
                ],
                "env_params.return_value": [
                    143
                ],
                "setup_mock.call_args_list": [
                    145,
                    153
                ],
                "setup_mock": [
                    145,
                    153
                ],
                "getconf": [
                    147,
                    148,
                    149
                ],
                "getconf.return_value.get.side_effect": [
                    148
                ],
                "getconf.return_value.get": [
                    148
                ],
                "getconf.return_value": [
                    148,
                    149
                ],
                "ConfigParser.NoOptionError": [
                    148
                ],
                "getconf.return_value.getint.return_value": [
                    149
                ],
                "getconf.return_value.getint": [
                    149
                ],
                "luigi.interface.setup_interface_logging.call_args_list": [
                    151
                ],
                "env": [
                    168,
                    169,
                    167
                ],
                "os.environ.copy": [
                    167
                ],
                "os.environ": [
                    167
                ],
                "os": [
                    167
                ],
                "env.get": [
                    168
                ],
                "p": [
                    169,
                    170,
                    171
                ],
                "subprocess.Popen": [
                    169
                ],
                "subprocess": [
                    169
                ],
                "args": [
                    169,
                    175,
                    176,
                    181,
                    182
                ],
                "subprocess.PIPE": [
                    169
                ],
                "stdout": [
                    192,
                    193,
                    196,
                    197,
                    198,
                    201,
                    170,
                    171,
                    202,
                    203,
                    186,
                    187,
                    188,
                    191
                ],
                "stderr": [
                    196,
                    201,
                    170,
                    171,
                    186,
                    191
                ],
                "p.communicate": [
                    170
                ],
                "p.returncode": [
                    171
                ],
                "t": [
                    174,
                    175,
                    177,
                    180,
                    181,
                    183
                ],
                "t.path": [
                    181,
                    175
                ],
                "self._run_cmdline": [
                    196,
                    201,
                    176,
                    182,
                    186,
                    191
                ],
                "t.exists": [
                    177,
                    183
                ],
                "returncode": [
                    201,
                    186,
                    196,
                    191
                ],
                "stdout.find": [
                    192,
                    193,
                    197,
                    198,
                    202,
                    203,
                    187,
                    188
                ],
                "self.assertFalse": [
                    188,
                    198
                ],
                "ap": [
                    210,
                    212,
                    216,
                    219,
                    222
                ],
                "luigi.interface.ArgParseInterface": [
                    210,
                    219
                ],
                "task": [
                    212,
                    213,
                    222,
                    223
                ],
                "ap.parse": [
                    216,
                    212,
                    222
                ],
                "self.assertEquals": [
                    213,
                    223
                ],
                "task.x": [
                    213,
                    223
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/luigi_29/test/task_test.py",
                "test_function": "test_external_tasks_loadable",
                "test_function_code": "    def test_external_tasks_loadable(self):\n        task = load_task(\"luigi\", \"ExternalTask\", {})\n        assert(isinstance(task, luigi.ExternalTask))",
                "test_error": "luigi.task_register.TaskClassException: Task 'ExternalTask' not found. Candidates are: Config,DummyTask,RangeBase,RangeDaily,RangeDailyBase,RangeHourly,RangeHourlyBase,Task,WrapperTask,core,scheduler,worker",
                "full_test_error": "self = <task_test.TaskTest testMethod=test_external_tasks_loadable>\n\n    def test_external_tasks_loadable(self):\n>       task = load_task(\"luigi\", \"ExternalTask\", {})\n\ntest/task_test.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/task_register.py:201: in load_task\n    task_cls = Register.get_task_cls(task_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'luigi.task_register.Register'>, name = 'ExternalTask'\n\n    @classmethod\n    def get_task_cls(cls, name):\n        \"\"\"\n        Returns an unambiguous class or raises an exception.\n        \"\"\"\n        task_cls = cls.__get_reg().get(name)\n        if not task_cls:\n>           raise TaskClassException('Task %r not found. Candidates are: %s' % (name, cls.tasks_str()))\nE           luigi.task_register.TaskClassException: Task 'ExternalTask' not found. Candidates are: Config,DummyTask,RangeBase,RangeDaily,RangeDailyBase,RangeHourly,RangeHourlyBase,Task,WrapperTask,core,scheduler,worker\n\nluigi/task_register.py:175: TaskClassException",
                "traceback": "luigi/task_register.py:201: in load_task\n    task_cls = Register.get_task_cls(task_name)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'luigi.task_register.Register'>, name = 'ExternalTask'\n\n    @classmethod\n    def get_task_cls(cls, name):\n        \"\"\"\n        Returns an unambiguous class or raises an exception.\n        \"\"\"\n        task_cls = cls.__get_reg().get(name)\n        if not task_cls:\n>           raise TaskClassException('Task %r not found. Candidates are: %s' % (name, cls.tasks_str()))\nE           luigi.task_register.TaskClassException: Task 'ExternalTask' not found. Candidates are: Config,DummyTask,RangeBase,RangeDaily,RangeDailyBase,RangeHourly,RangeHourlyBase,Task,WrapperTask,core,scheduler,worker\n\nluigi/task_register.py:175: TaskClassException",
                "test_function_decorators": []
            }
        ]
    }
}