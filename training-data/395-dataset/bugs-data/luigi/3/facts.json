{
    "1.1.1": "def parse(self, x):\n    \n    # Since the result of json.dumps(tuple) differs from a tuple string, we must handle either case.\n    # A tuple string may come from a config file or from cli execution.\n\n    # t = ((1, 2), (3, 4))\n    # t_str = '((1,2),(3,4))'\n    # t_json_str = json.dumps(t)\n    # t_json_str == '[[1, 2], [3, 4]]'\n    # json.loads(t_json_str) == t\n    # json.loads(t_str) == ValueError: No JSON object could be decoded\n\n    # Therefore, if json.loads(x) returns a ValueError, try ast.literal_eval(x).\n    # ast.literal_eval(t_str) == t\n    try:\n        # loop required to parse tuple of tuples\n        return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))\n    except ValueError:\n        return literal_eval(x)  # if this causes an error, let that error be raised.\n",
    "1.1.2": "Parse an individual value from the input.\n\n:param str x: the value to parse.\n:return: the parsed value.",
    "1.2.1": "class TupleParameter(ListParameter)",
    "1.2.2": "Parameter whose value is a ``tuple`` or ``tuple`` of tuples.\n\nIn the task definition, use\n\n.. code-block:: python\n\n    class MyTask(luigi.Task):\n      book_locations = luigi.TupleParameter()\n\n        def run(self):\n            for location in self.book_locations:\n                print(\"Go to page %d, line %d\" % (location[0], location[1]))\n\n\nAt the command line, use\n\n.. code-block:: console\n\n    $ luigi --module my_tasks MyTask --book_locations <JSON string>\n\nSimple example with two grades:\n\n.. code-block:: console\n\n    $ luigi --module my_tasks MyTask --book_locations '((12,3),(4,15),(52,1))'",
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_3/luigi/parameter.py",
    "1.3.2": null,
    "1.4.1": [
        "    def testSerialize(self):\n        date = datetime.date(2013, 2, 3)\n        self.assertEqual(luigi.DateParameter().serialize(date), '2013-02-03')\n        self.assertEqual(luigi.YearParameter().serialize(date), '2013')\n        self.assertEqual(luigi.MonthParameter().serialize(date), '2013-02')\n        dt = datetime.datetime(2013, 2, 3, 4, 5)\n        self.assertEqual(luigi.DateHourParameter().serialize(dt), '2013-02-03T04')"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_3/test/parameter_test.py"
    ],
    "2.1.1": [
        [
            "E   TypeError: 'int' object is not iterable"
        ]
    ],
    "2.1.2": [
        [
            "self = <parameter_test.TestSerializeTupleParameter testMethod=testSerialize>\n\n    def testSerialize(self):\n        the_tuple = (1, 2, 3)\n    \n>       self.assertEqual(luigi.TupleParameter().parse(luigi.TupleParameter().serialize(the_tuple)), the_tuple)\n\ntest/parameter_test.py:1106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/parameter.py:1116: in parse\n    return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x10ecead00>\n\n>   return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))",
            "\nluigi/parameter.py:1116: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "x": "'[1, 2, 3]'"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "x": "str"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "x": "'[1, 2, 3]'"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "x": "str"
            },
            {}
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}