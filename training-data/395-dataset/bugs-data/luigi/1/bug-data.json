{
    "luigi:1": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_1/luigi/server.py": {
            "buggy_functions": [
                {
                    "function_name": "get",
                    "function_code": "def get(self):\n    metrics = self._scheduler._state._metrics_collector.generate_latest()\n    if metrics:\n        metrics.configure_http_handler(self)\n        self.write(metrics)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 281,
                    "end_line": 285,
                    "variables": {
                        "metrics": [
                            282,
                            283,
                            284,
                            285
                        ],
                        "self._scheduler._state._metrics_collector.generate_latest": [
                            282
                        ],
                        "self._scheduler._state._metrics_collector": [
                            282
                        ],
                        "self._scheduler._state": [
                            282
                        ],
                        "self._scheduler": [
                            282
                        ],
                        "self": [
                            282,
                            284,
                            285
                        ],
                        "metrics.configure_http_handler": [
                            284
                        ],
                        "self.write": [
                            285
                        ]
                    },
                    "filtered_variables": {
                        "metrics": [
                            282,
                            283,
                            284,
                            285
                        ],
                        "self._scheduler._state._metrics_collector.generate_latest": [
                            282
                        ],
                        "self._scheduler._state._metrics_collector": [
                            282
                        ],
                        "self._scheduler._state": [
                            282
                        ],
                        "self._scheduler": [
                            282
                        ],
                        "self": [
                            282,
                            284,
                            285
                        ],
                        "metrics.configure_http_handler": [
                            284
                        ],
                        "self.write": [
                            285
                        ]
                    },
                    "diff_line_number": 282,
                    "class_data": {
                        "signature": "class MetricsHandler(tornado.web.RequestHandler)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def initialize(self, scheduler):\n    self._scheduler = scheduler",
                            "def get(self):\n    metrics = self._scheduler._state._metrics_collector.generate_latest()\n    if metrics:\n        metrics.configure_http_handler(self)\n        self.write(metrics)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "initialize(self, scheduler)",
                            "get(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._scheduler._state._metrics_collector.generate_latest": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._scheduler._state._metrics_collector": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._scheduler._state": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._scheduler": {
                                    "variable_value": "<MagicMock id='4544946912'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "self": {
                                    "variable_value": "<luigi.server.MetricsHandler object at 0x10ee7a190>",
                                    "variable_type": "MetricsHandler",
                                    "variable_shape": null
                                },
                                "metrics.configure_http_handler": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write": {
                                    "variable_value": "<MagicMock name='write' id='4545145872'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "metrics_collector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._scheduler._state._metrics_collector": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._scheduler._state": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._scheduler": {
                                    "variable_value": "<MagicMock id='4475190096'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "self": {
                                    "variable_value": "<luigi.server.MetricsHandler object at 0x10ac3a790>",
                                    "variable_type": "MetricsHandler",
                                    "variable_shape": null
                                },
                                "metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_collector.generate_latest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_collector.configure_http_handler": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write": {
                                    "variable_value": "<MagicMock name='write' id='4475671072'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def from_utc(utcTime, fmt=None):\n    \"\"\"convert UTC time string to time.struct_time: change datetime.datetime to time, return time.struct_time type\"\"\"\n    if fmt is None:\n        try_formats = [\"%Y-%m-%d %H:%M:%S.%f\", \"%Y-%m-%d %H:%M:%S\"]\n    else:\n        try_formats = [fmt]\n\n    for fmt in try_formats:\n        try:\n            time_struct = datetime.datetime.strptime(utcTime, fmt)\n        except ValueError:\n            pass\n        else:\n            date = int(time.mktime(time_struct.timetuple()))\n            return date\n    else:\n        raise ValueError(\"No UTC format matches {}\".format(utcTime))",
                "def app(scheduler):\n    settings = {\"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n                \"unescape\": tornado.escape.xhtml_unescape,\n                \"compress_response\": True,\n                }\n    handlers = [\n        (r'/api/(.*)', RPCHandler, {\"scheduler\": scheduler}),\n        (r'/', RootPathHandler, {'scheduler': scheduler}),\n        (r'/tasklist', AllRunHandler, {'scheduler': scheduler}),\n        (r'/tasklist/(.*?)', SelectedRunHandler, {'scheduler': scheduler}),\n        (r'/history', RecentRunHandler, {'scheduler': scheduler}),\n        (r'/history/by_name/(.*?)', ByNameHandler, {'scheduler': scheduler}),\n        (r'/history/by_id/(.*?)', ByIdHandler, {'scheduler': scheduler}),\n        (r'/history/by_params/(.*?)', ByParamsHandler, {'scheduler': scheduler}),\n        (r'/metrics', MetricsHandler, {'scheduler': scheduler})\n    ]\n    api_app = tornado.web.Application(handlers, **settings)\n    return api_app",
                "def _init_api(scheduler, api_port=None, address=None, unix_socket=None):\n    api_app = app(scheduler)\n    if unix_socket is not None:\n        api_sockets = [tornado.netutil.bind_unix_socket(unix_socket)]\n    else:\n        api_sockets = tornado.netutil.bind_sockets(api_port, address=address)\n    server = tornado.httpserver.HTTPServer(api_app)\n    server.add_sockets(api_sockets)\n\n    # Return the bound socket names.  Useful for connecting client in test scenarios.\n    return [s.getsockname() for s in api_sockets]",
                "def run(api_port=8082, address=None, unix_socket=None, scheduler=None):\n    \"\"\"\n    Runs one instance of the API server.\n    \"\"\"\n    if scheduler is None:\n        scheduler = Scheduler()\n\n    # load scheduler state\n    scheduler.load()\n\n    _init_api(\n        scheduler=scheduler,\n        api_port=api_port,\n        address=address,\n        unix_socket=unix_socket,\n    )\n\n    # prune work DAG every 60 seconds\n    pruner = tornado.ioloop.PeriodicCallback(scheduler.prune, 60000)\n    pruner.start()\n\n    def shutdown_handler(signum, frame):\n        exit_handler()\n        sys.exit(0)\n\n    @atexit.register\n    def exit_handler():\n        logger.info(\"Scheduler instance shutting down\")\n        scheduler.dump()\n        stop()\n\n    signal.signal(signal.SIGINT, shutdown_handler)\n    signal.signal(signal.SIGTERM, shutdown_handler)\n    if os.name == 'nt':\n        signal.signal(signal.SIGBREAK, shutdown_handler)\n    else:\n        signal.signal(signal.SIGQUIT, shutdown_handler)\n\n    logger.info(\"Scheduler starting up\")\n\n    tornado.ioloop.IOLoop.instance().start()",
                "def stop():\n    tornado.ioloop.IOLoop.instance().stop()",
                "def __init__(self, *args, **kwargs):\n    super(cors, self).__init__(*args, **kwargs)\n    self.allowed_origins = set(i for i in self.allowed_origins if i not in ['*', 'null'])",
                "def __init__(self, *args, **kwargs):\n    super(RPCHandler, self).__init__(*args, **kwargs)\n    self._cors_config = cors()",
                "def initialize(self, scheduler):\n    self._scheduler = scheduler",
                "def options(self, *args):\n    if self._cors_config.enabled:\n        self._handle_cors_preflight()\n\n    self.set_status(204)\n    self.finish()",
                "def get(self, method):\n    if method not in RPC_METHODS:\n        self.send_error(404)\n        return\n    payload = self.get_argument('data', default=\"{}\")\n    arguments = json.loads(payload)\n\n    if hasattr(self._scheduler, method):\n        result = getattr(self._scheduler, method)(**arguments)\n\n        if self._cors_config.enabled:\n            self._handle_cors()\n\n        self.write({\"response\": result})  # wrap all json response in a dictionary\n    else:\n        self.send_error(404)",
                "def _handle_cors_preflight(self):\n    origin = self.request.headers.get('Origin')\n    if not origin:\n        return\n\n    if origin == 'null':\n        if self._cors_config.allow_null_origin:\n            self.set_header('Access-Control-Allow-Origin', 'null')\n            self._set_other_cors_headers()\n    else:\n        if self._cors_config.allow_any_origin:\n            self.set_header('Access-Control-Allow-Origin', '*')\n            self._set_other_cors_headers()\n        elif origin in self._cors_config.allowed_origins:\n            self.set_header('Access-Control-Allow-Origin', origin)\n            self._set_other_cors_headers()",
                "def _handle_cors(self):\n    origin = self.request.headers.get('Origin')\n    if not origin:\n        return\n\n    if origin == 'null':\n        if self._cors_config.allow_null_origin:\n            self.set_header('Access-Control-Allow-Origin', 'null')\n    else:\n        if self._cors_config.allow_any_origin:\n            self.set_header('Access-Control-Allow-Origin', '*')\n        elif origin in self._cors_config.allowed_origins:\n            self.set_header('Access-Control-Allow-Origin', origin)\n            self.set_header('Vary', 'Origin')",
                "def _set_other_cors_headers(self):\n    self.set_header('Access-Control-Max-Age', str(self._cors_config.max_age))\n    self.set_header('Access-Control-Allow-Methods', self._cors_config.allowed_methods)\n    self.set_header('Access-Control-Allow-Headers', self._cors_config.allowed_headers)\n    if self._cors_config.allow_credentials:\n        self.set_header('Access-Control-Allow-Credentials', 'true')\n    if self._cors_config.exposed_headers:\n        self.set_header('Access-Control-Expose-Headers', self._cors_config.exposed_headers)",
                "def initialize(self, scheduler):\n    self._scheduler = scheduler",
                "def get_template_path(self):\n    return pkg_resources.resource_filename(__name__, 'templates')",
                "def get(self):\n    all_tasks = self._scheduler.task_history.find_all_runs()\n    tasknames = [task.name for task in all_tasks]\n    # show all tasks with their name list to be selected\n    # why all tasks? the duration of the event history of a selected task\n    # can be more than 24 hours.\n    self.render(\"menu.html\", tasknames=tasknames)",
                "def get(self, name):\n    statusResults = {}\n    taskResults = []\n    # get all tasks that has been updated\n    all_tasks = self._scheduler.task_history.find_all_runs()\n    # get events history for all tasks\n    all_tasks_event_history = self._scheduler.task_history.find_all_events()\n\n    # build the dictionary tasks with index: id, value: task_name\n    tasks = {task.id: str(task.name) for task in all_tasks}\n\n    for task in all_tasks_event_history:\n        # if the name of user-selected task is in tasks, get its task_id\n        if tasks.get(task.task_id) == str(name):\n            status = str(task.event_name)\n            if status not in statusResults:\n                statusResults[status] = []\n            # append the id, task_id, ts, y with 0, next_process with null\n            # for the status(running/failed/done) of the selected task\n            statusResults[status].append(({\n                                              'id': str(task.id), 'task_id': str(task.task_id),\n                                              'x': from_utc(str(task.ts)), 'y': 0, 'next_process': ''}))\n            # append the id, task_name, task_id, status, datetime, timestamp\n            # for the selected task\n            taskResults.append({\n                'id': str(task.id), 'taskName': str(name), 'task_id': str(task.task_id),\n                'status': str(task.event_name), 'datetime': str(task.ts),\n                'timestamp': from_utc(str(task.ts))})\n    statusResults = json.dumps(statusResults)\n    taskResults = json.dumps(taskResults)\n    statusResults = tornado.escape.xhtml_unescape(str(statusResults))\n    taskResults = tornado.escape.xhtml_unescape(str(taskResults))\n    self.render('history.html', name=name, statusResults=statusResults, taskResults=taskResults)",
                "def get(self):\n    tasks = self._scheduler.task_history.find_latest_runs()\n    self.render(\"recent.html\", tasks=tasks)",
                "def get(self, name):\n    tasks = self._scheduler.task_history.find_all_by_name(name)\n    self.render(\"recent.html\", tasks=tasks)",
                "def get(self, id):\n    task = self._scheduler.task_history.find_task_by_id(id)\n    self.render(\"show.html\", task=task)",
                "def get(self, name):\n    payload = self.get_argument('data', default=\"{}\")\n    arguments = json.loads(payload)\n    tasks = self._scheduler.task_history.find_all_by_parameters(name, session=None, **arguments)\n    self.render(\"recent.html\", tasks=tasks)",
                "def get(self):\n    self.redirect(\"/static/visualiser/index.html\")",
                "def initialize(self, scheduler):\n    self._scheduler = scheduler",
                "def get(self):\n    metrics = self._scheduler._state._metrics_collector.generate_latest()\n    if metrics:\n        metrics.configure_http_handler(self)\n        self.write(metrics)",
                "def shutdown_handler(signum, frame):\n    exit_handler()\n    sys.exit(0)",
                "@atexit.register\ndef exit_handler():\n    logger.info(\"Scheduler instance shutting down\")\n    scheduler.dump()\n    stop()"
            ],
            "inscope_function_signatures": [
                "from_utc(utcTime, fmt=None)",
                "app(scheduler)",
                "_init_api(scheduler, api_port=None, address=None, unix_socket=None)",
                "run(api_port=8082, address=None, unix_socket=None, scheduler=None)",
                "stop()",
                "__init__(self, *args, **kwargs)",
                "__init__(self, *args, **kwargs)",
                "initialize(self, scheduler)",
                "options(self, *args)",
                "get(self, method)",
                "_handle_cors_preflight(self)",
                "_handle_cors(self)",
                "_set_other_cors_headers(self)",
                "initialize(self, scheduler)",
                "get_template_path(self)",
                "get(self)",
                "get(self, name)",
                "get(self)",
                "get(self, name)",
                "get(self, id)",
                "get(self, name)",
                "get(self)",
                "initialize(self, scheduler)",
                "get(self)",
                "shutdown_handler(signum, frame)",
                "exit_handler()"
            ],
            "variables_in_file": {
                "logger": [
                    56,
                    348,
                    359
                ],
                "logging.getLogger": [
                    56
                ],
                "logging": [
                    56
                ],
                "Config": [
                    59
                ],
                "enabled": [
                    60
                ],
                "parameter.BoolParameter": [
                    66,
                    60,
                    69,
                    84
                ],
                "parameter": [
                    66,
                    69,
                    72,
                    75,
                    78,
                    81,
                    84,
                    60,
                    63
                ],
                "allowed_origins": [
                    63
                ],
                "parameter.ListParameter": [
                    63
                ],
                "allow_any_origin": [
                    66
                ],
                "allow_null_origin": [
                    69
                ],
                "max_age": [
                    72
                ],
                "parameter.IntParameter": [
                    72
                ],
                "allowed_methods": [
                    75
                ],
                "parameter.Parameter": [
                    81,
                    75,
                    78
                ],
                "allowed_headers": [
                    78
                ],
                "exposed_headers": [
                    81
                ],
                "allow_credentials": [
                    84
                ],
                "__init__": [
                    89,
                    99
                ],
                "super": [
                    89,
                    99
                ],
                "cors": [
                    89,
                    100
                ],
                "self": [
                    255,
                    132,
                    260,
                    261,
                    137,
                    138,
                    139,
                    266,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    268,
                    269,
                    149,
                    274,
                    279,
                    154,
                    155,
                    282,
                    157,
                    158,
                    159,
                    160,
                    161,
                    284,
                    285,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    175,
                    183,
                    188,
                    196,
                    198,
                    89,
                    90,
                    224,
                    248,
                    99,
                    100,
                    103,
                    106,
                    107,
                    109,
                    110,
                    114,
                    116,
                    119,
                    120,
                    249,
                    122,
                    123,
                    125,
                    254,
                    127
                ],
                "args": [
                    89,
                    99
                ],
                "kwargs": [
                    89,
                    99
                ],
                "self.allowed_origins": [
                    90
                ],
                "set": [
                    90
                ],
                "i": [
                    90
                ],
                "tornado.web.RequestHandler": [
                    277,
                    93,
                    173
                ],
                "tornado.web": [
                    304,
                    277,
                    93,
                    173
                ],
                "tornado": [
                    290,
                    361,
                    173,
                    365,
                    304,
                    339,
                    277,
                    311,
                    313,
                    314,
                    93,
                    222,
                    223
                ],
                "RPCHandler": [
                    99,
                    294
                ],
                "self._cors_config": [
                    100,
                    164,
                    165,
                    154,
                    166,
                    137,
                    106,
                    167,
                    169,
                    141,
                    170,
                    144,
                    122,
                    157,
                    159
                ],
                "self._scheduler": [
                    248,
                    196,
                    260,
                    198,
                    103,
                    268,
                    175,
                    119,
                    120,
                    183,
                    282,
                    279,
                    254
                ],
                "scheduler": [
                    279,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    175,
                    309,
                    325,
                    326,
                    329,
                    332,
                    339,
                    349,
                    103
                ],
                "self._cors_config.enabled": [
                    106,
                    122
                ],
                "self._handle_cors_preflight": [
                    107
                ],
                "self.set_status": [
                    109
                ],
                "self.finish": [
                    110
                ],
                "method": [
                    120,
                    113,
                    119
                ],
                "RPC_METHODS": [
                    113
                ],
                "self.send_error": [
                    114,
                    127
                ],
                "payload": [
                    266,
                    267,
                    116,
                    117
                ],
                "self.get_argument": [
                    266,
                    116
                ],
                "arguments": [
                    120,
                    267,
                    268,
                    117
                ],
                "json.loads": [
                    267,
                    117
                ],
                "json": [
                    221,
                    267,
                    220,
                    117
                ],
                "hasattr": [
                    119
                ],
                "result": [
                    120,
                    125
                ],
                "getattr": [
                    120
                ],
                "self._handle_cors": [
                    123
                ],
                "self.write": [
                    285,
                    125
                ],
                "post": [
                    129
                ],
                "get": [
                    129
                ],
                "origin": [
                    160,
                    132,
                    133,
                    136,
                    144,
                    145,
                    149,
                    150,
                    153,
                    159
                ],
                "self.request.headers.get": [
                    132,
                    149
                ],
                "self.request.headers": [
                    132,
                    149
                ],
                "self.request": [
                    132,
                    149
                ],
                "self._cors_config.allow_null_origin": [
                    137,
                    154
                ],
                "self.set_header": [
                    160,
                    161,
                    164,
                    165,
                    166,
                    168,
                    138,
                    170,
                    142,
                    145,
                    155,
                    158
                ],
                "self._set_other_cors_headers": [
                    146,
                    139,
                    143
                ],
                "self._cors_config.allow_any_origin": [
                    141,
                    157
                ],
                "self._cors_config.allowed_origins": [
                    144,
                    159
                ],
                "str": [
                    164,
                    201,
                    205,
                    206,
                    212,
                    213,
                    217,
                    218,
                    219,
                    222,
                    223
                ],
                "self._cors_config.max_age": [
                    164
                ],
                "self._cors_config.allowed_methods": [
                    165
                ],
                "self._cors_config.allowed_headers": [
                    166
                ],
                "self._cors_config.allow_credentials": [
                    167
                ],
                "self._cors_config.exposed_headers": [
                    169,
                    170
                ],
                "pkg_resources.resource_filename": [
                    178
                ],
                "pkg_resources": [
                    178
                ],
                "__name__": [
                    368,
                    178
                ],
                "BaseTaskHistoryHandler": [
                    258,
                    264,
                    272,
                    181,
                    246,
                    252,
                    191
                ],
                "all_tasks": [
                    184,
                    201,
                    196,
                    183
                ],
                "self._scheduler.task_history.find_all_runs": [
                    196,
                    183
                ],
                "self._scheduler.task_history": [
                    196,
                    260,
                    198,
                    268,
                    183,
                    248,
                    254
                ],
                "tasknames": [
                    184,
                    188
                ],
                "task.name": [
                    184,
                    201
                ],
                "task": [
                    260,
                    261,
                    201,
                    203,
                    205,
                    206,
                    212,
                    213,
                    184,
                    217,
                    218,
                    219
                ],
                "self.render": [
                    224,
                    261,
                    269,
                    249,
                    188,
                    255
                ],
                "statusResults": [
                    224,
                    193,
                    207,
                    208,
                    211,
                    220,
                    222
                ],
                "taskResults": [
                    224,
                    194,
                    216,
                    221,
                    223
                ],
                "all_tasks_event_history": [
                    203,
                    198
                ],
                "self._scheduler.task_history.find_all_events": [
                    198
                ],
                "tasks": [
                    201,
                    268,
                    205,
                    269,
                    248,
                    249,
                    254,
                    255
                ],
                "task.id": [
                    201,
                    212,
                    217
                ],
                "tasks.get": [
                    205
                ],
                "task.task_id": [
                    217,
                    212,
                    205
                ],
                "name": [
                    224,
                    268,
                    205,
                    217,
                    254
                ],
                "status": [
                    208,
                    211,
                    206,
                    207
                ],
                "task.event_name": [
                    218,
                    206
                ],
                "append": [
                    211
                ],
                "from_utc": [
                    219,
                    213
                ],
                "task.ts": [
                    218,
                    219,
                    213
                ],
                "taskResults.append": [
                    216
                ],
                "json.dumps": [
                    220,
                    221
                ],
                "tornado.escape.xhtml_unescape": [
                    290,
                    222,
                    223
                ],
                "tornado.escape": [
                    290,
                    222,
                    223
                ],
                "fmt": [
                    232,
                    234,
                    236,
                    229
                ],
                "try_formats": [
                    232,
                    234,
                    230
                ],
                "time_struct": [
                    240,
                    236
                ],
                "datetime.datetime.strptime": [
                    236
                ],
                "datetime.datetime": [
                    236
                ],
                "datetime": [
                    236
                ],
                "utcTime": [
                    243,
                    236
                ],
                "ValueError": [
                    243,
                    237
                ],
                "date": [
                    240,
                    241
                ],
                "int": [
                    240
                ],
                "time.mktime": [
                    240
                ],
                "time": [
                    240
                ],
                "time_struct.timetuple": [
                    240
                ],
                "format": [
                    243
                ],
                "self._scheduler.task_history.find_latest_runs": [
                    248
                ],
                "self._scheduler.task_history.find_all_by_name": [
                    254
                ],
                "self._scheduler.task_history.find_task_by_id": [
                    260
                ],
                "id": [
                    260
                ],
                "self._scheduler.task_history.find_all_by_parameters": [
                    268
                ],
                "self.redirect": [
                    274
                ],
                "metrics": [
                    282,
                    283,
                    284,
                    285
                ],
                "self._scheduler._state._metrics_collector.generate_latest": [
                    282
                ],
                "self._scheduler._state._metrics_collector": [
                    282
                ],
                "self._scheduler._state": [
                    282
                ],
                "metrics.configure_http_handler": [
                    284
                ],
                "settings": [
                    304,
                    289
                ],
                "os.path.join": [
                    289
                ],
                "os.path": [
                    289
                ],
                "os": [
                    289,
                    354
                ],
                "os.path.dirname": [
                    289
                ],
                "__file__": [
                    289
                ],
                "handlers": [
                    304,
                    293
                ],
                "RootPathHandler": [
                    295
                ],
                "AllRunHandler": [
                    296
                ],
                "SelectedRunHandler": [
                    297
                ],
                "RecentRunHandler": [
                    298
                ],
                "ByNameHandler": [
                    299
                ],
                "ByIdHandler": [
                    300
                ],
                "ByParamsHandler": [
                    301
                ],
                "MetricsHandler": [
                    302
                ],
                "api_app": [
                    304,
                    305,
                    314,
                    309
                ],
                "tornado.web.Application": [
                    304
                ],
                "app": [
                    309
                ],
                "unix_socket": [
                    335,
                    310,
                    311
                ],
                "api_sockets": [
                    313,
                    315,
                    318,
                    311
                ],
                "tornado.netutil.bind_unix_socket": [
                    311
                ],
                "tornado.netutil": [
                    313,
                    311
                ],
                "tornado.netutil.bind_sockets": [
                    313
                ],
                "api_port": [
                    313,
                    333
                ],
                "address": [
                    313,
                    334
                ],
                "server": [
                    314,
                    315
                ],
                "tornado.httpserver.HTTPServer": [
                    314
                ],
                "tornado.httpserver": [
                    314
                ],
                "server.add_sockets": [
                    315
                ],
                "s.getsockname": [
                    318
                ],
                "s": [
                    318
                ],
                "Scheduler": [
                    326
                ],
                "scheduler.load": [
                    329
                ],
                "_init_api": [
                    331
                ],
                "pruner": [
                    339,
                    340
                ],
                "tornado.ioloop.PeriodicCallback": [
                    339
                ],
                "tornado.ioloop": [
                    361,
                    339,
                    365
                ],
                "scheduler.prune": [
                    339
                ],
                "pruner.start": [
                    340
                ],
                "exit_handler": [
                    343
                ],
                "sys.exit": [
                    344
                ],
                "sys": [
                    344
                ],
                "logger.info": [
                    348,
                    359
                ],
                "scheduler.dump": [
                    349
                ],
                "stop": [
                    365,
                    350
                ],
                "atexit.register": [
                    346
                ],
                "atexit": [
                    346
                ],
                "signal.signal": [
                    352,
                    353,
                    355,
                    357
                ],
                "signal": [
                    352,
                    353,
                    355,
                    357
                ],
                "signal.SIGINT": [
                    352
                ],
                "shutdown_handler": [
                    352,
                    353,
                    355,
                    357
                ],
                "signal.SIGTERM": [
                    353
                ],
                "os.name": [
                    354
                ],
                "signal.SIGBREAK": [
                    355
                ],
                "signal.SIGQUIT": [
                    357
                ],
                "start": [
                    361
                ],
                "tornado.ioloop.IOLoop.instance": [
                    361,
                    365
                ],
                "tornado.ioloop.IOLoop": [
                    361,
                    365
                ],
                "run": [
                    369
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    56,
                    348,
                    359
                ],
                "logging.getLogger": [
                    56
                ],
                "logging": [
                    56
                ],
                "Config": [
                    59
                ],
                "enabled": [
                    60
                ],
                "parameter.BoolParameter": [
                    66,
                    60,
                    69,
                    84
                ],
                "parameter": [
                    66,
                    69,
                    72,
                    75,
                    78,
                    81,
                    84,
                    60,
                    63
                ],
                "allowed_origins": [
                    63
                ],
                "parameter.ListParameter": [
                    63
                ],
                "allow_any_origin": [
                    66
                ],
                "allow_null_origin": [
                    69
                ],
                "max_age": [
                    72
                ],
                "parameter.IntParameter": [
                    72
                ],
                "allowed_methods": [
                    75
                ],
                "parameter.Parameter": [
                    81,
                    75,
                    78
                ],
                "allowed_headers": [
                    78
                ],
                "exposed_headers": [
                    81
                ],
                "allow_credentials": [
                    84
                ],
                "__init__": [
                    89,
                    99
                ],
                "cors": [
                    89,
                    100
                ],
                "self": [
                    255,
                    132,
                    260,
                    261,
                    137,
                    138,
                    139,
                    266,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    268,
                    269,
                    149,
                    274,
                    279,
                    154,
                    155,
                    282,
                    157,
                    158,
                    159,
                    160,
                    161,
                    284,
                    285,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    175,
                    183,
                    188,
                    196,
                    198,
                    89,
                    90,
                    224,
                    248,
                    99,
                    100,
                    103,
                    106,
                    107,
                    109,
                    110,
                    114,
                    116,
                    119,
                    120,
                    249,
                    122,
                    123,
                    125,
                    254,
                    127
                ],
                "args": [
                    89,
                    99
                ],
                "kwargs": [
                    89,
                    99
                ],
                "self.allowed_origins": [
                    90
                ],
                "i": [
                    90
                ],
                "tornado.web.RequestHandler": [
                    277,
                    93,
                    173
                ],
                "tornado.web": [
                    304,
                    277,
                    93,
                    173
                ],
                "tornado": [
                    290,
                    361,
                    173,
                    365,
                    304,
                    339,
                    277,
                    311,
                    313,
                    314,
                    93,
                    222,
                    223
                ],
                "RPCHandler": [
                    99,
                    294
                ],
                "self._cors_config": [
                    100,
                    164,
                    165,
                    154,
                    166,
                    137,
                    106,
                    167,
                    169,
                    141,
                    170,
                    144,
                    122,
                    157,
                    159
                ],
                "self._scheduler": [
                    248,
                    196,
                    260,
                    198,
                    103,
                    268,
                    175,
                    119,
                    120,
                    183,
                    282,
                    279,
                    254
                ],
                "scheduler": [
                    279,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    175,
                    309,
                    325,
                    326,
                    329,
                    332,
                    339,
                    349,
                    103
                ],
                "self._cors_config.enabled": [
                    106,
                    122
                ],
                "self._handle_cors_preflight": [
                    107
                ],
                "self.set_status": [
                    109
                ],
                "self.finish": [
                    110
                ],
                "method": [
                    120,
                    113,
                    119
                ],
                "RPC_METHODS": [
                    113
                ],
                "self.send_error": [
                    114,
                    127
                ],
                "payload": [
                    266,
                    267,
                    116,
                    117
                ],
                "self.get_argument": [
                    266,
                    116
                ],
                "arguments": [
                    120,
                    267,
                    268,
                    117
                ],
                "json.loads": [
                    267,
                    117
                ],
                "json": [
                    221,
                    267,
                    220,
                    117
                ],
                "result": [
                    120,
                    125
                ],
                "self._handle_cors": [
                    123
                ],
                "self.write": [
                    285,
                    125
                ],
                "post": [
                    129
                ],
                "get": [
                    129
                ],
                "origin": [
                    160,
                    132,
                    133,
                    136,
                    144,
                    145,
                    149,
                    150,
                    153,
                    159
                ],
                "self.request.headers.get": [
                    132,
                    149
                ],
                "self.request.headers": [
                    132,
                    149
                ],
                "self.request": [
                    132,
                    149
                ],
                "self._cors_config.allow_null_origin": [
                    137,
                    154
                ],
                "self.set_header": [
                    160,
                    161,
                    164,
                    165,
                    166,
                    168,
                    138,
                    170,
                    142,
                    145,
                    155,
                    158
                ],
                "self._set_other_cors_headers": [
                    146,
                    139,
                    143
                ],
                "self._cors_config.allow_any_origin": [
                    141,
                    157
                ],
                "self._cors_config.allowed_origins": [
                    144,
                    159
                ],
                "self._cors_config.max_age": [
                    164
                ],
                "self._cors_config.allowed_methods": [
                    165
                ],
                "self._cors_config.allowed_headers": [
                    166
                ],
                "self._cors_config.allow_credentials": [
                    167
                ],
                "self._cors_config.exposed_headers": [
                    169,
                    170
                ],
                "pkg_resources.resource_filename": [
                    178
                ],
                "pkg_resources": [
                    178
                ],
                "BaseTaskHistoryHandler": [
                    258,
                    264,
                    272,
                    181,
                    246,
                    252,
                    191
                ],
                "all_tasks": [
                    184,
                    201,
                    196,
                    183
                ],
                "self._scheduler.task_history.find_all_runs": [
                    196,
                    183
                ],
                "self._scheduler.task_history": [
                    196,
                    260,
                    198,
                    268,
                    183,
                    248,
                    254
                ],
                "tasknames": [
                    184,
                    188
                ],
                "task.name": [
                    184,
                    201
                ],
                "task": [
                    260,
                    261,
                    201,
                    203,
                    205,
                    206,
                    212,
                    213,
                    184,
                    217,
                    218,
                    219
                ],
                "self.render": [
                    224,
                    261,
                    269,
                    249,
                    188,
                    255
                ],
                "statusResults": [
                    224,
                    193,
                    207,
                    208,
                    211,
                    220,
                    222
                ],
                "taskResults": [
                    224,
                    194,
                    216,
                    221,
                    223
                ],
                "all_tasks_event_history": [
                    203,
                    198
                ],
                "self._scheduler.task_history.find_all_events": [
                    198
                ],
                "tasks": [
                    201,
                    268,
                    205,
                    269,
                    248,
                    249,
                    254,
                    255
                ],
                "task.id": [
                    201,
                    212,
                    217
                ],
                "tasks.get": [
                    205
                ],
                "task.task_id": [
                    217,
                    212,
                    205
                ],
                "name": [
                    224,
                    268,
                    205,
                    217,
                    254
                ],
                "status": [
                    208,
                    211,
                    206,
                    207
                ],
                "task.event_name": [
                    218,
                    206
                ],
                "append": [
                    211
                ],
                "from_utc": [
                    219,
                    213
                ],
                "task.ts": [
                    218,
                    219,
                    213
                ],
                "taskResults.append": [
                    216
                ],
                "json.dumps": [
                    220,
                    221
                ],
                "tornado.escape.xhtml_unescape": [
                    290,
                    222,
                    223
                ],
                "tornado.escape": [
                    290,
                    222,
                    223
                ],
                "fmt": [
                    232,
                    234,
                    236,
                    229
                ],
                "try_formats": [
                    232,
                    234,
                    230
                ],
                "time_struct": [
                    240,
                    236
                ],
                "datetime.datetime.strptime": [
                    236
                ],
                "datetime.datetime": [
                    236
                ],
                "datetime": [
                    236
                ],
                "utcTime": [
                    243,
                    236
                ],
                "date": [
                    240,
                    241
                ],
                "time.mktime": [
                    240
                ],
                "time": [
                    240
                ],
                "time_struct.timetuple": [
                    240
                ],
                "self._scheduler.task_history.find_latest_runs": [
                    248
                ],
                "self._scheduler.task_history.find_all_by_name": [
                    254
                ],
                "self._scheduler.task_history.find_task_by_id": [
                    260
                ],
                "self._scheduler.task_history.find_all_by_parameters": [
                    268
                ],
                "self.redirect": [
                    274
                ],
                "metrics": [
                    282,
                    283,
                    284,
                    285
                ],
                "self._scheduler._state._metrics_collector.generate_latest": [
                    282
                ],
                "self._scheduler._state._metrics_collector": [
                    282
                ],
                "self._scheduler._state": [
                    282
                ],
                "metrics.configure_http_handler": [
                    284
                ],
                "settings": [
                    304,
                    289
                ],
                "os.path.join": [
                    289
                ],
                "os.path": [
                    289
                ],
                "os": [
                    289,
                    354
                ],
                "os.path.dirname": [
                    289
                ],
                "__file__": [
                    289
                ],
                "handlers": [
                    304,
                    293
                ],
                "RootPathHandler": [
                    295
                ],
                "AllRunHandler": [
                    296
                ],
                "SelectedRunHandler": [
                    297
                ],
                "RecentRunHandler": [
                    298
                ],
                "ByNameHandler": [
                    299
                ],
                "ByIdHandler": [
                    300
                ],
                "ByParamsHandler": [
                    301
                ],
                "MetricsHandler": [
                    302
                ],
                "api_app": [
                    304,
                    305,
                    314,
                    309
                ],
                "tornado.web.Application": [
                    304
                ],
                "app": [
                    309
                ],
                "unix_socket": [
                    335,
                    310,
                    311
                ],
                "api_sockets": [
                    313,
                    315,
                    318,
                    311
                ],
                "tornado.netutil.bind_unix_socket": [
                    311
                ],
                "tornado.netutil": [
                    313,
                    311
                ],
                "tornado.netutil.bind_sockets": [
                    313
                ],
                "api_port": [
                    313,
                    333
                ],
                "address": [
                    313,
                    334
                ],
                "server": [
                    314,
                    315
                ],
                "tornado.httpserver.HTTPServer": [
                    314
                ],
                "tornado.httpserver": [
                    314
                ],
                "server.add_sockets": [
                    315
                ],
                "s.getsockname": [
                    318
                ],
                "s": [
                    318
                ],
                "Scheduler": [
                    326
                ],
                "scheduler.load": [
                    329
                ],
                "_init_api": [
                    331
                ],
                "pruner": [
                    339,
                    340
                ],
                "tornado.ioloop.PeriodicCallback": [
                    339
                ],
                "tornado.ioloop": [
                    361,
                    339,
                    365
                ],
                "scheduler.prune": [
                    339
                ],
                "pruner.start": [
                    340
                ],
                "exit_handler": [
                    343
                ],
                "sys.exit": [
                    344
                ],
                "sys": [
                    344
                ],
                "logger.info": [
                    348,
                    359
                ],
                "scheduler.dump": [
                    349
                ],
                "stop": [
                    365,
                    350
                ],
                "atexit.register": [
                    346
                ],
                "atexit": [
                    346
                ],
                "signal.signal": [
                    352,
                    353,
                    355,
                    357
                ],
                "signal": [
                    352,
                    353,
                    355,
                    357
                ],
                "signal.SIGINT": [
                    352
                ],
                "shutdown_handler": [
                    352,
                    353,
                    355,
                    357
                ],
                "signal.SIGTERM": [
                    353
                ],
                "os.name": [
                    354
                ],
                "signal.SIGBREAK": [
                    355
                ],
                "signal.SIGQUIT": [
                    357
                ],
                "start": [
                    361
                ],
                "tornado.ioloop.IOLoop.instance": [
                    361,
                    365
                ],
                "tornado.ioloop.IOLoop": [
                    361,
                    365
                ],
                "run": [
                    369
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_1/test/server_test.py",
                "test_function": "test_get",
                "test_function_code": "    def test_get(self):\n        mock_metrics = mock.MagicMock()\n        self.mock_scheduler._state._metrics_collector.generate_latest.return_value = mock_metrics\n        with mock.patch.object(self.handler, 'write') as patched_write:\n            self.handler.get()\n            patched_write.assert_called_once_with(mock_metrics)\n            self.mock_scheduler._state._metrics_collector.configure_http_handler.assert_called_once_with(\n                self.handler)",
                "test_error": "AssertionError: Expected 'configure_http_handler' to be called once. Called 0 times.",
                "full_test_error": "__wrapped_mock_method__ = <function NonCallableMock.assert_called_once_with at 0x104689b80>\nargs = (<MagicMock name='mock._state._metrics_collector.configure_http_handler' id='4398879456'>, <luigi.server.MetricsHandler object at 0x1062e9820>)\nkwargs = {}, __tracebackhide__ = True\nmsg = \"Expected 'configure_http_handler' to be called once. Called 0 times.\"\n__mock_self = <MagicMock name='mock._state._metrics_collector.configure_http_handler' id='4398879456'>\n\n    def assert_wrapper(\n        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any\n    ) -> None:\n        __tracebackhide__ = True\n        try:\n>           __wrapped_mock_method__(*args, **kwargs)\n\n../../envs/luigi_1/lib/python3.8/site-packages/pytest_mock/plugin.py:459: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='mock._state._metrics_collector.configure_http_handler' id='4398879456'>\nargs = (<luigi.server.MetricsHandler object at 0x1062e9820>,), kwargs = {}\nmsg = \"Expected 'configure_http_handler' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'configure_http_handler' to be called once. Called 0 times.\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/unittest/mock.py:924: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <server_test.MetricsHandlerTest testMethod=test_get>\n\n    def test_get(self):\n        mock_metrics = mock.MagicMock()\n        self.mock_scheduler._state._metrics_collector.generate_latest.return_value = mock_metrics\n        with mock.patch.object(self.handler, 'write') as patched_write:\n            self.handler.get()\n            patched_write.assert_called_once_with(mock_metrics)\n>           self.mock_scheduler._state._metrics_collector.configure_http_handler.assert_called_once_with(\n                self.handler)\nE           AssertionError: Expected 'configure_http_handler' to be called once. Called 0 times.\n\ntest/server_test.py:468: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}