{
    "1.1.1": "def run(self):\n    logger.info('[pid %s] Worker %s running   %s', os.getpid(), self.worker_id, self.task.task_id)\n\n    if self.random_seed:\n        # Need to have different random seeds if running in separate processes\n        random.seed((os.getpid(), time.time()))\n\n    status = FAILED\n    error_message = ''\n    missing = []\n    new_deps = []\n    try:\n        # Verify that all the tasks are fulfilled!\n        missing = [dep.task_id for dep in self.task.deps() if not dep.complete()]\n        if missing:\n            deps = 'dependency' if len(missing) == 1 else 'dependencies'\n            raise RuntimeError('Unfulfilled %s at run time: %s' % (deps, ', '.join(missing)))\n        self.task.trigger_event(Event.START, self.task)\n        t0 = time.time()\n        status = None\n        try:\n            new_deps = self._run_get_new_deps()\n            if new_deps is None:\n                status = RUNNING\n            else:\n                status = SUSPENDED\n                logger.info(\n                    '[pid %s] Worker %s new requirements      %s',\n                    os.getpid(), self.worker_id, self.task.task_id)\n                return\n        finally:\n            if status != SUSPENDED:\n                self.task.trigger_event(\n                    Event.PROCESSING_TIME, self.task, time.time() - t0)\n                error_message = json.dumps(self.task.on_success())\n                logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n                            self.worker_id, self.task.task_id)\n                self.task.trigger_event(Event.SUCCESS, self.task)\n                status = DONE\n\n    except KeyboardInterrupt:\n        raise\n    except BaseException as ex:\n        status = FAILED\n        logger.exception(\"[pid %s] Worker %s failed    %s\", os.getpid(), self.worker_id, self.task)\n        error_message = notifications.wrap_traceback(self.task.on_failure(ex))\n        self.task.trigger_event(Event.FAILURE, self.task, ex)\n        subject = \"Luigi: %s FAILED\" % self.task\n        notifications.send_error_email(subject, error_message)\n    finally:\n        self.result_queue.put(\n            (self.task.task_id, status, error_message, missing, new_deps))\n",
    "1.1.2": null,
    "1.2.1": "class TaskProcess(AbstractTaskProcess)",
    "1.2.2": "Wrap all task execution in this class.\n\nMainly for convenience since this is run in a separate process. ",
    "1.2.3": [
        "_run_get_new_deps(self)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_30/luigi/worker.py",
    "1.3.2": [
        "_run_get_new_deps(self)"
    ],
    "1.4.1": [
        "    def test_failure(self):\n        t, successes, failures, exceptions = self._run_empty_task(True)\n        self.assertEqual(successes, [])\n        self.assertEqual(failures, [t])\n        self.assertEqual(len(exceptions), 1)\n        self.assertTrue(isinstance(exceptions[0], DummyException))",
        "    def test_processing_time_handler_failure(self):\n        t, result = self._run_processing_time_handler(True)\n        self.assertEqual(result, [])"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_30/test/test_event_callbacks.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_30/test/test_event_callbacks.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Lists differ: [EmptyTask(fail=True)] != []\nE       \nE       First list contains 1 additional elements.\nE       First extra element 0:\nE       EmptyTask(fail=True)\nE       \nE       - [EmptyTask(fail=True)]\nE       + []"
        ],
        [
            "E       AssertionError: Lists differ: [(EmptyTask(fail=True), 42.0)] != []\nE       \nE       First list contains 1 additional elements.\nE       First extra element 0:\nE       (EmptyTask(fail=True), 42.0)\nE       \nE       - [(EmptyTask(fail=True), 42.0)]\nE       + []"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_event_callbacks.TestEventCallbacks testMethod=test_failure>\n\n    def test_failure(self):\n        t, successes, failures, exceptions = self._run_empty_task(True)\n>       self.assertEqual(successes, [])",
            "\ntest/test_event_callbacks.py:87: AssertionError"
        ],
        [
            "self = <test_event_callbacks.TestEventCallbacks testMethod=test_processing_time_handler_failure>\n\n    def test_processing_time_handler_failure(self):\n        t, result = self._run_processing_time_handler(True)\n>       self.assertEqual(result, [])",
            "\ntest/test_event_callbacks.py:127: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}