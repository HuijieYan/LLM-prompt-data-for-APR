{
    "luigi:9": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_9/luigi/execution_summary.py": {
            "buggy_functions": [
                {
                    "function_name": "_partition_tasks",
                    "function_code": "def _partition_tasks(worker):\n    \"\"\"\n    Takes a worker and sorts out tasks based on their status.\n    Still_pending_not_ext is only used to get upstream_failure, upstream_missing_dependency and run_by_other_worker\n    \"\"\"\n    task_history = worker._add_task_history\n    pending_tasks = {task for(task, status, ext) in task_history if status == 'PENDING'}\n    set_tasks = {}\n    set_tasks[\"completed\"] = {task for (task, status, ext) in task_history if status == 'DONE' and task in pending_tasks}\n    set_tasks[\"already_done\"] = {task for (task, status, ext) in task_history\n                                 if status == 'DONE' and task not in pending_tasks and task not in set_tasks[\"completed\"]}\n    set_tasks[\"failed\"] = {task for (task, status, ext) in task_history if status == 'FAILED'}\n    set_tasks[\"scheduling_error\"] = {task for(task, status, ext) in task_history if status == 'UNKNOWN'}\n    set_tasks[\"still_pending_ext\"] = {task for (task, status, ext) in task_history\n                                      if status == 'PENDING' and task not in set_tasks[\"failed\"] and task not in set_tasks[\"completed\"] and not ext}\n    set_tasks[\"still_pending_not_ext\"] = {task for (task, status, ext) in task_history\n                                          if status == 'PENDING' and task not in set_tasks[\"failed\"] and task not in set_tasks[\"completed\"] and ext}\n    set_tasks[\"run_by_other_worker\"] = set()\n    set_tasks[\"upstream_failure\"] = set()\n    set_tasks[\"upstream_missing_dependency\"] = set()\n    set_tasks[\"upstream_run_by_other_worker\"] = set()\n    set_tasks[\"upstream_scheduling_error\"] = set()\n    set_tasks[\"not_run\"] = set()\n    return set_tasks\n",
                    "decorators": [],
                    "docstring": "Takes a worker and sorts out tasks based on their status.\nStill_pending_not_ext is only used to get upstream_failure, upstream_missing_dependency and run_by_other_worker",
                    "start_line": 35,
                    "end_line": 58,
                    "variables": {
                        "task_history": [
                            40,
                            41,
                            43,
                            44,
                            46,
                            47,
                            48,
                            50
                        ],
                        "worker._add_task_history": [
                            40
                        ],
                        "worker": [
                            40
                        ],
                        "pending_tasks": [
                            41,
                            43,
                            45
                        ],
                        "task": [
                            41,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "status": [
                            41,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "ext": [
                            41,
                            43,
                            44,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "set_tasks": [
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58
                        ],
                        "set": [
                            52,
                            53,
                            54,
                            55,
                            56,
                            57
                        ]
                    },
                    "filtered_variables": {
                        "task_history": [
                            40,
                            41,
                            43,
                            44,
                            46,
                            47,
                            48,
                            50
                        ],
                        "worker._add_task_history": [
                            40
                        ],
                        "worker": [
                            40
                        ],
                        "pending_tasks": [
                            41,
                            43,
                            45
                        ],
                        "task": [
                            41,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "status": [
                            41,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "ext": [
                            41,
                            43,
                            44,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "set_tasks": [
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58
                        ]
                    },
                    "diff_line_number": 46,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "task_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker._add_task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x106610700>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker._add_task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x106610700>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "pending_tasks": {
                                    "variable_value": "{Foo()}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": "{'completed': {Foo()}, 'already_done': set(), 'failed': {Foo()}, 'scheduling_error': set(), 'still_pending_ext': set(), 'still_pending_not_ext': set(), 'run_by_other_worker': set(), 'upstream_failure': set(), 'upstream_missing_dependency': set(), 'upstream_run_by_other_worker': set(), 'upstream_scheduling_error': set(), 'not_run': set()}",
                                    "variable_type": "dict",
                                    "variable_shape": "12"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "task_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker._add_task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x10aecc5e0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker._add_task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x10aecc5e0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "pending_tasks": {
                                    "variable_value": "{Foo()}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": "{'completed': {Foo()}, 'already_done': set(), 'ever_failed': {Foo()}, 'failed': set(), 'scheduling_error': set(), 'still_pending_ext': set(), 'still_pending_not_ext': set(), 'run_by_other_worker': set(), 'upstream_failure': set(), 'upstream_missing_dependency': set(), 'upstream_run_by_other_worker': set(), 'upstream_scheduling_error': set(), 'not_run': set()}",
                                    "variable_type": "dict",
                                    "variable_shape": "13"
                                }
                            }
                        ],
                        [
                            {
                                "task_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker._add_task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x10aecc5e0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker._add_task_history": {
                                    "variable_value": "[(Foo(), 'PENDING', True), (Foo(), 'FAILED', None), (Foo(), 'DONE', False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x10aecc5e0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "pending_tasks": {
                                    "variable_value": "{Foo()}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": "{'completed': {Foo()}, 'already_done': set(), 'ever_failed': {Foo()}, 'failed': set(), 'scheduling_error': set(), 'still_pending_ext': set(), 'still_pending_not_ext': set(), 'run_by_other_worker': set(), 'upstream_failure': set(), 'upstream_missing_dependency': set(), 'upstream_run_by_other_worker': set(), 'upstream_scheduling_error': set(), 'not_run': set()}",
                                    "variable_type": "dict",
                                    "variable_shape": "13"
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_depth_first_search",
                    "function_code": "def _depth_first_search(set_tasks, current_task, visited):\n    \"\"\"\n    This dfs checks why tasks are still pending.\n    \"\"\"\n    visited.add(current_task)\n    if current_task in set_tasks[\"still_pending_not_ext\"]:\n        upstream_failure = False\n        upstream_missing_dependency = False\n        upstream_run_by_other_worker = False\n        upstream_scheduling_error = False\n        for task in current_task._requires():\n            if task not in visited:\n                _depth_first_search(set_tasks, task, visited)\n            if task in set_tasks[\"failed\"] or task in set_tasks[\"upstream_failure\"]:\n                set_tasks[\"upstream_failure\"].add(current_task)\n                upstream_failure = True\n            if task in set_tasks[\"still_pending_ext\"] or task in set_tasks[\"upstream_missing_dependency\"]:\n                set_tasks[\"upstream_missing_dependency\"].add(current_task)\n                upstream_missing_dependency = True\n            if task in set_tasks[\"run_by_other_worker\"] or task in set_tasks[\"upstream_run_by_other_worker\"]:\n                set_tasks[\"upstream_run_by_other_worker\"].add(current_task)\n                upstream_run_by_other_worker = True\n            if task in set_tasks[\"scheduling_error\"]:\n                set_tasks[\"upstream_scheduling_error\"].add(current_task)\n                upstream_scheduling_error = True\n        if not upstream_failure and not upstream_missing_dependency and \\\n                not upstream_run_by_other_worker and not upstream_scheduling_error and \\\n                current_task not in set_tasks[\"run_by_other_worker\"]:\n            set_tasks[\"not_run\"].add(current_task)\n",
                    "decorators": [],
                    "docstring": "This dfs checks why tasks are still pending.",
                    "start_line": 77,
                    "end_line": 105,
                    "variables": {
                        "visited.add": [
                            81
                        ],
                        "visited": [
                            88,
                            81,
                            89
                        ],
                        "current_task": [
                            97,
                            100,
                            104,
                            105,
                            81,
                            82,
                            87,
                            91,
                            94
                        ],
                        "set_tasks": [
                            96,
                            97,
                            99,
                            100,
                            104,
                            105,
                            82,
                            89,
                            90,
                            91,
                            93,
                            94
                        ],
                        "upstream_failure": [
                            83,
                            92,
                            102
                        ],
                        "upstream_missing_dependency": [
                            84,
                            102,
                            95
                        ],
                        "upstream_run_by_other_worker": [
                            98,
                            85,
                            103
                        ],
                        "upstream_scheduling_error": [
                            101,
                            86,
                            103
                        ],
                        "task": [
                            96,
                            99,
                            87,
                            88,
                            89,
                            90,
                            93
                        ],
                        "current_task._requires": [
                            87
                        ],
                        "_depth_first_search": [
                            89
                        ],
                        "add": [
                            97,
                            100,
                            105,
                            91,
                            94
                        ]
                    },
                    "filtered_variables": {
                        "visited.add": [
                            81
                        ],
                        "visited": [
                            88,
                            81,
                            89
                        ],
                        "current_task": [
                            97,
                            100,
                            104,
                            105,
                            81,
                            82,
                            87,
                            91,
                            94
                        ],
                        "set_tasks": [
                            96,
                            97,
                            99,
                            100,
                            104,
                            105,
                            82,
                            89,
                            90,
                            91,
                            93,
                            94
                        ],
                        "upstream_failure": [
                            83,
                            92,
                            102
                        ],
                        "upstream_missing_dependency": [
                            84,
                            102,
                            95
                        ],
                        "upstream_run_by_other_worker": [
                            98,
                            85,
                            103
                        ],
                        "upstream_scheduling_error": [
                            101,
                            86,
                            103
                        ],
                        "task": [
                            96,
                            99,
                            87,
                            88,
                            89,
                            90,
                            93
                        ],
                        "current_task._requires": [
                            87
                        ],
                        "_depth_first_search": [
                            89
                        ],
                        "add": [
                            97,
                            100,
                            105,
                            91,
                            94
                        ]
                    },
                    "diff_line_number": 90,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_summary_format",
                    "function_code": "def _summary_format(set_tasks, worker):\n    group_tasks = {}\n    for status, task_dict in set_tasks.items():\n        group_tasks[status] = _group_tasks_by_name_and_status(task_dict)\n    comments = _get_comments(group_tasks)\n    num_all_tasks = sum([len(set_tasks[\"already_done\"]),\n                         len(set_tasks[\"completed\"]), len(set_tasks[\"failed\"]),\n                         len(set_tasks[\"scheduling_error\"]),\n                         len(set_tasks[\"still_pending_ext\"]),\n                         len(set_tasks[\"still_pending_not_ext\"])])\n    str_output = ''\n    str_output += 'Scheduled {0} tasks of which:\\n'.format(num_all_tasks)\n    for status in _ORDERED_STATUSES:\n        if status not in comments:\n            continue\n        str_output += '{0}'.format(comments[status])\n        if status != 'still_pending':\n            str_output += '{0}\\n'.format(_get_str(group_tasks[status], status in _PENDING_SUB_STATUSES))\n    ext_workers = _get_external_workers(worker)\n    group_tasks_ext_workers = {}\n    for ext_worker, task_dict in ext_workers.items():\n        group_tasks_ext_workers[ext_worker] = _group_tasks_by_name_and_status(task_dict)\n    if len(ext_workers) > 0:\n        str_output += \"\\nThe other workers were:\\n\"\n        count = 0\n        for ext_worker, task_dict in ext_workers.items():\n            if count > 3 and count < len(ext_workers) - 1:\n                str_output += \"    and {0} other workers\".format(len(ext_workers) - count)\n                break\n            str_output += \"    - {0} ran {1} tasks\\n\".format(ext_worker, len(task_dict))\n            count += 1\n        str_output += '\\n'\n    if num_all_tasks == sum([len(set_tasks[\"already_done\"]),\n                             len(set_tasks[\"scheduling_error\"]),\n                             len(set_tasks[\"still_pending_ext\"]),\n                             len(set_tasks[\"still_pending_not_ext\"])]):\n        if len(ext_workers) == 0:\n            str_output += '\\n'\n        str_output += 'Did not run any tasks'\n    smiley = \"\"\n    reason = \"\"\n    if set_tasks[\"failed\"]:\n        smiley = \":(\"\n        reason = \"there were failed tasks\"\n        if set_tasks[\"scheduling_error\"]:\n            reason += \" and tasks whose scheduling failed\"\n    elif set_tasks[\"scheduling_error\"]:\n        smiley = \":(\"\n        reason = \"there were tasks whose scheduling failed\"\n    elif set_tasks[\"not_run\"]:\n        smiley = \":|\"\n        reason = \"there were tasks that were not granted run permission by the scheduler\"\n    elif set_tasks[\"still_pending_ext\"]:\n        smiley = \":|\"\n        reason = \"there were missing external dependencies\"\n    else:\n        smiley = \":)\"\n        reason = \"there were no failed tasks or missing external dependencies\"\n    str_output += \"\\nThis progress looks {0} because {1}\".format(smiley, reason)\n    if num_all_tasks == 0:\n        str_output = 'Did not schedule any tasks'\n    return str_output\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 339,
                    "end_line": 400,
                    "variables": {
                        "group_tasks": [
                            356,
                            340,
                            342,
                            343
                        ],
                        "status": [
                            352,
                            354,
                            355,
                            356,
                            341,
                            342,
                            351
                        ],
                        "task_dict": [
                            359,
                            360,
                            364,
                            368,
                            341,
                            342
                        ],
                        "set_tasks.items": [
                            341
                        ],
                        "set_tasks": [
                            385,
                            388,
                            391,
                            371,
                            372,
                            341,
                            373,
                            374,
                            344,
                            345,
                            346,
                            347,
                            348,
                            380,
                            383
                        ],
                        "_group_tasks_by_name_and_status": [
                            360,
                            342
                        ],
                        "comments": [
                            352,
                            354,
                            343
                        ],
                        "_get_comments": [
                            343
                        ],
                        "num_all_tasks": [
                            344,
                            398,
                            371,
                            350
                        ],
                        "sum": [
                            344,
                            371
                        ],
                        "len": [
                            361,
                            365,
                            366,
                            368,
                            371,
                            372,
                            373,
                            374,
                            375,
                            344,
                            345,
                            346,
                            347,
                            348
                        ],
                        "str_output": [
                            354,
                            356,
                            362,
                            397,
                            366,
                            399,
                            368,
                            400,
                            370,
                            376,
                            377,
                            349,
                            350
                        ],
                        "format": [
                            354,
                            356,
                            397,
                            366,
                            368,
                            350
                        ],
                        "_ORDERED_STATUSES": [
                            351
                        ],
                        "_get_str": [
                            356
                        ],
                        "_PENDING_SUB_STATUSES": [
                            356
                        ],
                        "ext_workers": [
                            357,
                            359,
                            361,
                            364,
                            365,
                            366,
                            375
                        ],
                        "_get_external_workers": [
                            357
                        ],
                        "worker": [
                            357
                        ],
                        "group_tasks_ext_workers": [
                            360,
                            358
                        ],
                        "ext_worker": [
                            360,
                            364,
                            368,
                            359
                        ],
                        "ext_workers.items": [
                            364,
                            359
                        ],
                        "count": [
                            369,
                            363,
                            365,
                            366
                        ],
                        "smiley": [
                            386,
                            389,
                            392,
                            395,
                            397,
                            378,
                            381
                        ],
                        "reason": [
                            384,
                            387,
                            390,
                            393,
                            396,
                            397,
                            379,
                            382
                        ]
                    },
                    "filtered_variables": {
                        "group_tasks": [
                            356,
                            340,
                            342,
                            343
                        ],
                        "status": [
                            352,
                            354,
                            355,
                            356,
                            341,
                            342,
                            351
                        ],
                        "task_dict": [
                            359,
                            360,
                            364,
                            368,
                            341,
                            342
                        ],
                        "set_tasks.items": [
                            341
                        ],
                        "set_tasks": [
                            385,
                            388,
                            391,
                            371,
                            372,
                            341,
                            373,
                            374,
                            344,
                            345,
                            346,
                            347,
                            348,
                            380,
                            383
                        ],
                        "_group_tasks_by_name_and_status": [
                            360,
                            342
                        ],
                        "comments": [
                            352,
                            354,
                            343
                        ],
                        "_get_comments": [
                            343
                        ],
                        "num_all_tasks": [
                            344,
                            398,
                            371,
                            350
                        ],
                        "str_output": [
                            354,
                            356,
                            362,
                            397,
                            366,
                            399,
                            368,
                            400,
                            370,
                            376,
                            377,
                            349,
                            350
                        ],
                        "_ORDERED_STATUSES": [
                            351
                        ],
                        "_get_str": [
                            356
                        ],
                        "_PENDING_SUB_STATUSES": [
                            356
                        ],
                        "ext_workers": [
                            357,
                            359,
                            361,
                            364,
                            365,
                            366,
                            375
                        ],
                        "_get_external_workers": [
                            357
                        ],
                        "worker": [
                            357
                        ],
                        "group_tasks_ext_workers": [
                            360,
                            358
                        ],
                        "ext_worker": [
                            360,
                            364,
                            368,
                            359
                        ],
                        "ext_workers.items": [
                            364,
                            359
                        ],
                        "count": [
                            369,
                            363,
                            365,
                            366
                        ],
                        "smiley": [
                            386,
                            389,
                            392,
                            395,
                            397,
                            378,
                            381
                        ],
                        "reason": [
                            384,
                            387,
                            390,
                            393,
                            396,
                            397,
                            379,
                            382
                        ]
                    },
                    "diff_line_number": 380,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "group_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "set_tasks.items": {
                                    "variable_value": "<built-in method items of dict object at 0x107d48a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": "{'completed': {Foo()}, 'already_done': set(), 'ever_failed': {Foo()}, 'failed': set(), 'scheduling_error': set(), 'still_pending_ext': set(), 'still_pending_not_ext': set(), 'run_by_other_worker': set(), 'upstream_failure': set(), 'upstream_missing_dependency': set(), 'upstream_run_by_other_worker': set(), 'upstream_scheduling_error': set(), 'not_run': set()}",
                                    "variable_type": "dict",
                                    "variable_shape": "13"
                                },
                                "_group_tasks_by_name_and_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_comments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num_all_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_ORDERED_STATUSES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PENDING_SUB_STATUSES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_external_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x107826670>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "group_tasks_ext_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext_workers.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "smiley": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reason": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "group_tasks": {
                                    "variable_value": "{'completed': {'Foo': [Foo()]}, 'already_done': {}, 'ever_failed': {'Foo': [Foo()]}, 'failed': {}, 'scheduling_error': {}, 'still_pending_ext': {}, 'still_pending_not_ext': {}, 'run_by_other_worker': {}, 'upstream_failure': {}, 'upstream_missing_dependency': {}, 'upstream_run_by_other_worker': {}, 'upstream_scheduling_error': {}, 'not_run': {}}",
                                    "variable_type": "dict",
                                    "variable_shape": "13"
                                },
                                "status": {
                                    "variable_value": "'not_run'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task_dict": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "set_tasks.items": {
                                    "variable_value": "<built-in method items of dict object at 0x107d48a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "set_tasks": {
                                    "variable_value": "{'completed': {Foo()}, 'already_done': set(), 'ever_failed': {Foo()}, 'failed': set(), 'scheduling_error': set(), 'still_pending_ext': set(), 'still_pending_not_ext': set(), 'run_by_other_worker': set(), 'upstream_failure': set(), 'upstream_missing_dependency': set(), 'upstream_run_by_other_worker': set(), 'upstream_scheduling_error': set(), 'not_run': set()}",
                                    "variable_type": "dict",
                                    "variable_shape": "13"
                                },
                                "_group_tasks_by_name_and_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comments": {
                                    "variable_value": "{'completed': '* 1 ran successfully:\\n'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "_get_comments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num_all_tasks": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "str_output": {
                                    "variable_value": "'Scheduled 1 tasks of which:\\n* 1 ran successfully:\\n    - 1 Foo()\\n\\nThis progress looks :) because there were failed tasks but they all suceeded in a retry'",
                                    "variable_type": "str",
                                    "variable_shape": "152"
                                },
                                "_ORDERED_STATUSES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PENDING_SUB_STATUSES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext_workers": {
                                    "variable_value": "defaultdict(<class 'set'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "_get_external_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.worker.Worker object at 0x107826670>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "group_tasks_ext_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "ext_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext_workers.items": {
                                    "variable_value": "<built-in method items of collections.defaultdict object at 0x107866c70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "smiley": {
                                    "variable_value": "':)'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "reason": {
                                    "variable_value": "'there were failed tasks but they all suceeded in a retry'",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "_ORDERED_STATUSES = (\n    \"already_done\",\n    \"completed\",\n    \"failed\",\n    \"scheduling_error\",\n    \"still_pending\",\n    \"still_pending_ext\",\n    \"run_by_other_worker\",\n    \"upstream_failure\",\n    \"upstream_missing_dependency\",\n    \"upstream_run_by_other_worker\",\n    \"upstream_scheduling_error\",\n    \"not_run\",\n)",
                    "start_line": 261,
                    "end_line": 274
                }
            ],
            "inscope_functions": [
                "def _partition_tasks(worker):\n    \"\"\"\n    Takes a worker and sorts out tasks based on their status.\n    Still_pending_not_ext is only used to get upstream_failure, upstream_missing_dependency and run_by_other_worker\n    \"\"\"\n    task_history = worker._add_task_history\n    pending_tasks = {task for(task, status, ext) in task_history if status == 'PENDING'}\n    set_tasks = {}\n    set_tasks[\"completed\"] = {task for (task, status, ext) in task_history if status == 'DONE' and task in pending_tasks}\n    set_tasks[\"already_done\"] = {task for (task, status, ext) in task_history\n                                 if status == 'DONE' and task not in pending_tasks and task not in set_tasks[\"completed\"]}\n    set_tasks[\"failed\"] = {task for (task, status, ext) in task_history if status == 'FAILED'}\n    set_tasks[\"scheduling_error\"] = {task for(task, status, ext) in task_history if status == 'UNKNOWN'}\n    set_tasks[\"still_pending_ext\"] = {task for (task, status, ext) in task_history\n                                      if status == 'PENDING' and task not in set_tasks[\"failed\"] and task not in set_tasks[\"completed\"] and not ext}\n    set_tasks[\"still_pending_not_ext\"] = {task for (task, status, ext) in task_history\n                                          if status == 'PENDING' and task not in set_tasks[\"failed\"] and task not in set_tasks[\"completed\"] and ext}\n    set_tasks[\"run_by_other_worker\"] = set()\n    set_tasks[\"upstream_failure\"] = set()\n    set_tasks[\"upstream_missing_dependency\"] = set()\n    set_tasks[\"upstream_run_by_other_worker\"] = set()\n    set_tasks[\"upstream_scheduling_error\"] = set()\n    set_tasks[\"not_run\"] = set()\n    return set_tasks",
                "def _root_task(worker):\n    \"\"\"\n    Return the first task scheduled by the worker, corresponding to the root task\n    \"\"\"\n    return worker._add_task_history[0][0]",
                "def _populate_unknown_statuses(set_tasks):\n    \"\"\"\n    Add the \"upstream_*\" and \"not_run\" statuses my mutating set_tasks.\n    \"\"\"\n    visited = set()\n    for task in set_tasks[\"still_pending_not_ext\"]:\n        _depth_first_search(set_tasks, task, visited)",
                "def _depth_first_search(set_tasks, current_task, visited):\n    \"\"\"\n    This dfs checks why tasks are still pending.\n    \"\"\"\n    visited.add(current_task)\n    if current_task in set_tasks[\"still_pending_not_ext\"]:\n        upstream_failure = False\n        upstream_missing_dependency = False\n        upstream_run_by_other_worker = False\n        upstream_scheduling_error = False\n        for task in current_task._requires():\n            if task not in visited:\n                _depth_first_search(set_tasks, task, visited)\n            if task in set_tasks[\"failed\"] or task in set_tasks[\"upstream_failure\"]:\n                set_tasks[\"upstream_failure\"].add(current_task)\n                upstream_failure = True\n            if task in set_tasks[\"still_pending_ext\"] or task in set_tasks[\"upstream_missing_dependency\"]:\n                set_tasks[\"upstream_missing_dependency\"].add(current_task)\n                upstream_missing_dependency = True\n            if task in set_tasks[\"run_by_other_worker\"] or task in set_tasks[\"upstream_run_by_other_worker\"]:\n                set_tasks[\"upstream_run_by_other_worker\"].add(current_task)\n                upstream_run_by_other_worker = True\n            if task in set_tasks[\"scheduling_error\"]:\n                set_tasks[\"upstream_scheduling_error\"].add(current_task)\n                upstream_scheduling_error = True\n        if not upstream_failure and not upstream_missing_dependency and \\\n                not upstream_run_by_other_worker and not upstream_scheduling_error and \\\n                current_task not in set_tasks[\"run_by_other_worker\"]:\n            set_tasks[\"not_run\"].add(current_task)",
                "def _get_str(task_dict, extra_indent):\n    \"\"\"\n    This returns a string for each status\n    \"\"\"\n    summary_length = execution_summary().summary_length\n\n    lines = []\n    task_names = sorted(task_dict.keys())\n    for task_family in task_names:\n        tasks = task_dict[task_family]\n        tasks = sorted(tasks, key=lambda x: str(x))\n        prefix_size = 8 if extra_indent else 4\n        prefix = ' ' * prefix_size\n\n        line = None\n\n        if summary_length > 0 and len(lines) >= summary_length:\n            line = prefix + \"...\"\n            lines.append(line)\n            break\n        if len(tasks[0].get_params()) == 0:\n            line = prefix + '- {0} {1}()'.format(len(tasks), str(task_family))\n        elif _get_len_of_params(tasks[0]) > 60 or len(str(tasks[0])) > 200 or \\\n                (len(tasks) == 2 and len(tasks[0].get_params()) > 1 and (_get_len_of_params(tasks[0]) > 40 or len(str(tasks[0])) > 100)):\n            \"\"\"\n            This is to make sure that there is no really long task in the output\n            \"\"\"\n            line = prefix + '- {0} {1}(...)'.format(len(tasks), task_family)\n        elif len((tasks[0].get_params())) == 1:\n            attributes = {getattr(task, tasks[0].get_params()[0][0]) for task in tasks}\n            param_class = tasks[0].get_params()[0][1]\n            first, last = _ranging_attributes(attributes, param_class)\n            if first is not None and last is not None and len(attributes) > 3:\n                param_str = '{0}...{1}'.format(param_class.serialize(first), param_class.serialize(last))\n            else:\n                param_str = '{0}'.format(_get_str_one_parameter(tasks))\n            line = prefix + '- {0} {1}({2}={3})'.format(len(tasks), task_family, tasks[0].get_params()[0][0], param_str)\n        else:\n            ranging = False\n            params = _get_set_of_params(tasks)\n            unique_param_keys = list(_get_unique_param_keys(params))\n            if len(unique_param_keys) == 1:\n                unique_param, = unique_param_keys\n                attributes = params[unique_param]\n                param_class = unique_param[1]\n                first, last = _ranging_attributes(attributes, param_class)\n                if first is not None and last is not None and len(attributes) > 2:\n                    ranging = True\n                    line = prefix + '- {0} {1}({2}'.format(len(tasks), task_family, _get_str_ranging_multiple_parameters(first, last, tasks, unique_param))\n            if not ranging:\n                if len(tasks) == 1:\n                    line = prefix + '- {0} {1}'.format(len(tasks), tasks[0])\n                if len(tasks) == 2:\n                    line = prefix + '- {0} {1} and {2}'.format(len(tasks), tasks[0], tasks[1])\n                if len(tasks) > 2:\n                    line = prefix + '- {0} {1} ...'.format(len(tasks), tasks[0])\n        lines.append(line)\n    return '\\n'.join(lines)",
                "def _get_len_of_params(task):\n    return sum(len(param[0]) for param in task.get_params())",
                "def _get_str_ranging_multiple_parameters(first, last, tasks, unique_param):\n    row = ''\n    str_unique_param = '{0}...{1}'.format(unique_param[1].serialize(first), unique_param[1].serialize(last))\n    for param in tasks[0].get_params():\n        row += '{0}='.format(param[0])\n        if param[0] == unique_param[0]:\n            row += '{0}'.format(str_unique_param)\n        else:\n            row += '{0}'.format(param[1].serialize(getattr(tasks[0], param[0])))\n        if param != tasks[0].get_params()[-1]:\n            row += \", \"\n    row += ')'\n    return row",
                "def _get_set_of_params(tasks):\n    params = {}\n    for param in tasks[0].get_params():\n        params[param] = {getattr(task, param[0]) for task in tasks}\n    return params",
                "def _get_unique_param_keys(params):\n    for param_key, param_values in params.items():\n        if len(param_values) > 1:\n            yield param_key",
                "def _ranging_attributes(attributes, param_class):\n    \"\"\"\n    Checks if there is a continuous range\n    \"\"\"\n    next_attributes = {param_class.next_in_enumeration(attribute) for attribute in attributes}\n    in_first = attributes.difference(next_attributes)\n    in_second = next_attributes.difference(attributes)\n    if len(in_first) == 1 and len(in_second) == 1:\n        for x in attributes:\n            if {param_class.next_in_enumeration(x)} == in_second:\n                return next(iter(in_first)), x\n    return None, None",
                "def _get_str_one_parameter(tasks):\n    row = ''\n    count = 0\n    for task in tasks:\n        if (len(row) >= 30 and count > 2 and count != len(tasks) - 1) or len(row) > 200:\n            row += '...'\n            break\n        param = task.get_params()[0]\n        row += '{0}'.format(param[1].serialize(getattr(task, param[0])))\n        if count < len(tasks) - 1:\n            row += ','\n        count += 1\n    return row",
                "def _serialize_first_param(task):\n    return task.get_params()[0][1].serialize(getattr(task, task.get_params()[0][0]))",
                "def _get_number_of_tasks_for(status, group_tasks):\n    if status == \"still_pending\":\n        return (_get_number_of_tasks(group_tasks[\"still_pending_ext\"]) +\n                _get_number_of_tasks(group_tasks[\"still_pending_not_ext\"]))\n    return _get_number_of_tasks(group_tasks[status])",
                "def _get_number_of_tasks(task_dict):\n    return sum(len(tasks) for tasks in task_dict.values())",
                "def _get_comments(group_tasks):\n    \"\"\"\n    Get the human readable comments and quantities for the task types.\n    \"\"\"\n    comments = {}\n    for status, human in _COMMENTS:\n        num_tasks = _get_number_of_tasks_for(status, group_tasks)\n        if num_tasks:\n            space = \"    \" if status in _PENDING_SUB_STATUSES else \"\"\n            comments[status] = '{space}* {num_tasks} {human}:\\n'.format(\n                space=space,\n                num_tasks=num_tasks,\n                human=human)\n    return comments",
                "def _get_run_by_other_worker(worker):\n    \"\"\"\n    This returns a set of the tasks that are being run by other worker\n    \"\"\"\n    task_sets = _get_external_workers(worker).values()\n    return functools.reduce(lambda a, b: a | b, task_sets, set())",
                "def _get_external_workers(worker):\n    \"\"\"\n    This returns a dict with a set of tasks for all of the other workers\n    \"\"\"\n    worker_that_blocked_task = collections.defaultdict(set)\n    get_work_response_history = worker._get_work_response_history\n    for get_work_response in get_work_response_history:\n        if get_work_response['task_id'] is None:\n            for running_task in get_work_response['running_tasks']:\n                other_worker_id = running_task['worker']\n                other_task_id = running_task['task_id']\n                other_task = worker._scheduled_tasks.get(other_task_id)\n                if other_worker_id == worker._id or not other_task:\n                    continue\n                worker_that_blocked_task[other_worker_id].add(other_task)\n    return worker_that_blocked_task",
                "def _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    group_status = {}\n    for task in task_dict:\n        if task.task_family not in group_status:\n            group_status[task.task_family] = []\n        group_status[task.task_family].append(task)\n    return group_status",
                "def _summary_dict(worker):\n    set_tasks = _partition_tasks(worker)\n    set_tasks[\"run_by_other_worker\"] = _get_run_by_other_worker(worker)\n    _populate_unknown_statuses(set_tasks)\n    return set_tasks",
                "def _summary_format(set_tasks, worker):\n    group_tasks = {}\n    for status, task_dict in set_tasks.items():\n        group_tasks[status] = _group_tasks_by_name_and_status(task_dict)\n    comments = _get_comments(group_tasks)\n    num_all_tasks = sum([len(set_tasks[\"already_done\"]),\n                         len(set_tasks[\"completed\"]), len(set_tasks[\"failed\"]),\n                         len(set_tasks[\"scheduling_error\"]),\n                         len(set_tasks[\"still_pending_ext\"]),\n                         len(set_tasks[\"still_pending_not_ext\"])])\n    str_output = ''\n    str_output += 'Scheduled {0} tasks of which:\\n'.format(num_all_tasks)\n    for status in _ORDERED_STATUSES:\n        if status not in comments:\n            continue\n        str_output += '{0}'.format(comments[status])\n        if status != 'still_pending':\n            str_output += '{0}\\n'.format(_get_str(group_tasks[status], status in _PENDING_SUB_STATUSES))\n    ext_workers = _get_external_workers(worker)\n    group_tasks_ext_workers = {}\n    for ext_worker, task_dict in ext_workers.items():\n        group_tasks_ext_workers[ext_worker] = _group_tasks_by_name_and_status(task_dict)\n    if len(ext_workers) > 0:\n        str_output += \"\\nThe other workers were:\\n\"\n        count = 0\n        for ext_worker, task_dict in ext_workers.items():\n            if count > 3 and count < len(ext_workers) - 1:\n                str_output += \"    and {0} other workers\".format(len(ext_workers) - count)\n                break\n            str_output += \"    - {0} ran {1} tasks\\n\".format(ext_worker, len(task_dict))\n            count += 1\n        str_output += '\\n'\n    if num_all_tasks == sum([len(set_tasks[\"already_done\"]),\n                             len(set_tasks[\"scheduling_error\"]),\n                             len(set_tasks[\"still_pending_ext\"]),\n                             len(set_tasks[\"still_pending_not_ext\"])]):\n        if len(ext_workers) == 0:\n            str_output += '\\n'\n        str_output += 'Did not run any tasks'\n    smiley = \"\"\n    reason = \"\"\n    if set_tasks[\"failed\"]:\n        smiley = \":(\"\n        reason = \"there were failed tasks\"\n        if set_tasks[\"scheduling_error\"]:\n            reason += \" and tasks whose scheduling failed\"\n    elif set_tasks[\"scheduling_error\"]:\n        smiley = \":(\"\n        reason = \"there were tasks whose scheduling failed\"\n    elif set_tasks[\"not_run\"]:\n        smiley = \":|\"\n        reason = \"there were tasks that were not granted run permission by the scheduler\"\n    elif set_tasks[\"still_pending_ext\"]:\n        smiley = \":|\"\n        reason = \"there were missing external dependencies\"\n    else:\n        smiley = \":)\"\n        reason = \"there were no failed tasks or missing external dependencies\"\n    str_output += \"\\nThis progress looks {0} because {1}\".format(smiley, reason)\n    if num_all_tasks == 0:\n        str_output = 'Did not schedule any tasks'\n    return str_output",
                "def _summary_wrap(str_output):\n    return textwrap.dedent(\"\"\"\n    ===== Luigi Execution Summary =====\n\n    {str_output}\n\n    ===== Luigi Execution Summary =====\n    \"\"\").format(str_output=str_output)",
                "def summary(worker):\n    \"\"\"\n    Given a worker, return a human readable summary of what the worker have\n    done.\n    \"\"\"\n    return _summary_wrap(_summary_format(_summary_dict(worker), worker))"
            ],
            "inscope_function_signatures": [
                "_partition_tasks(worker)",
                "_root_task(worker)",
                "_populate_unknown_statuses(set_tasks)",
                "_depth_first_search(set_tasks, current_task, visited)",
                "_get_str(task_dict, extra_indent)",
                "_get_len_of_params(task)",
                "_get_str_ranging_multiple_parameters(first, last, tasks, unique_param)",
                "_get_set_of_params(tasks)",
                "_get_unique_param_keys(params)",
                "_ranging_attributes(attributes, param_class)",
                "_get_str_one_parameter(tasks)",
                "_serialize_first_param(task)",
                "_get_number_of_tasks_for(status, group_tasks)",
                "_get_number_of_tasks(task_dict)",
                "_get_comments(group_tasks)",
                "_get_run_by_other_worker(worker)",
                "_get_external_workers(worker)",
                "_group_tasks_by_name_and_status(task_dict)",
                "_summary_dict(worker)",
                "_summary_format(set_tasks, worker)",
                "_summary_wrap(str_output)",
                "summary(worker)"
            ],
            "variables_in_file": {
                "luigi.Config": [
                    31
                ],
                "luigi": [
                    32,
                    31
                ],
                "summary_length": [
                    32,
                    124,
                    112
                ],
                "luigi.IntParameter": [
                    32
                ],
                "task_history": [
                    40,
                    41,
                    43,
                    44,
                    46,
                    47,
                    48,
                    50
                ],
                "worker._add_task_history": [
                    40,
                    65
                ],
                "worker": [
                    65,
                    418,
                    357,
                    40,
                    296,
                    333,
                    334,
                    305,
                    311,
                    312
                ],
                "pending_tasks": [
                    41,
                    43,
                    45
                ],
                "task": [
                    137,
                    41,
                    169,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    190,
                    325,
                    326,
                    327,
                    328,
                    73,
                    74,
                    87,
                    88,
                    89,
                    90,
                    217,
                    93,
                    221,
                    222,
                    96,
                    99,
                    230
                ],
                "status": [
                    41,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    341,
                    342,
                    351,
                    352,
                    354,
                    355,
                    356,
                    234,
                    237,
                    249,
                    250,
                    252,
                    253
                ],
                "ext": [
                    41,
                    43,
                    44,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51
                ],
                "set_tasks": [
                    385,
                    388,
                    391,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    73,
                    74,
                    333,
                    334,
                    335,
                    336,
                    82,
                    341,
                    344,
                    89,
                    90,
                    91,
                    345,
                    93,
                    94,
                    346,
                    96,
                    97,
                    347,
                    99,
                    100,
                    348,
                    104,
                    105,
                    371,
                    372,
                    373,
                    374,
                    380,
                    383
                ],
                "set": [
                    72,
                    297,
                    304,
                    275,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    276
                ],
                "visited": [
                    72,
                    74,
                    81,
                    88,
                    89
                ],
                "_depth_first_search": [
                    89,
                    74
                ],
                "visited.add": [
                    81
                ],
                "current_task": [
                    97,
                    100,
                    104,
                    105,
                    81,
                    82,
                    87,
                    91,
                    94
                ],
                "upstream_failure": [
                    83,
                    92,
                    102
                ],
                "upstream_missing_dependency": [
                    84,
                    102,
                    95
                ],
                "upstream_run_by_other_worker": [
                    98,
                    85,
                    103
                ],
                "upstream_scheduling_error": [
                    101,
                    86,
                    103
                ],
                "current_task._requires": [
                    87
                ],
                "add": [
                    97,
                    100,
                    105,
                    314,
                    91,
                    94
                ],
                "execution_summary": [
                    112
                ],
                "lines": [
                    164,
                    165,
                    114,
                    124,
                    126
                ],
                "task_names": [
                    115,
                    116
                ],
                "sorted": [
                    115,
                    118
                ],
                "task_dict.keys": [
                    115
                ],
                "task_dict": [
                    325,
                    359,
                    360,
                    364,
                    368,
                    241,
                    115,
                    341,
                    117,
                    342
                ],
                "task_family": [
                    129,
                    135,
                    144,
                    116,
                    117,
                    156
                ],
                "tasks": [
                    128,
                    129,
                    130,
                    131,
                    135,
                    136,
                    137,
                    138,
                    143,
                    144,
                    147,
                    156,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    175,
                    180,
                    181,
                    189,
                    190,
                    217,
                    218,
                    223,
                    241,
                    117,
                    118
                ],
                "str": [
                    129,
                    130,
                    131,
                    118
                ],
                "x": [
                    208,
                    209,
                    210,
                    118
                ],
                "prefix_size": [
                    120,
                    119
                ],
                "extra_indent": [
                    119
                ],
                "prefix": [
                    129,
                    161,
                    163,
                    135,
                    144,
                    120,
                    156,
                    125,
                    159
                ],
                "line": [
                    129,
                    161,
                    163,
                    164,
                    135,
                    144,
                    122,
                    156,
                    125,
                    126,
                    159
                ],
                "len": [
                    128,
                    129,
                    130,
                    131,
                    135,
                    136,
                    140,
                    144,
                    149,
                    154,
                    156,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    169,
                    196,
                    207,
                    344,
                    345,
                    218,
                    346,
                    347,
                    348,
                    223,
                    361,
                    365,
                    366,
                    368,
                    241,
                    371,
                    372,
                    373,
                    374,
                    375,
                    124
                ],
                "lines.append": [
                    164,
                    126
                ],
                "get_params": [
                    128,
                    131,
                    136,
                    137,
                    138,
                    175,
                    144,
                    181,
                    189
                ],
                "format": [
                    129,
                    135,
                    141,
                    397,
                    143,
                    144,
                    404,
                    156,
                    159,
                    161,
                    163,
                    174,
                    176,
                    178,
                    180,
                    350,
                    222,
                    354,
                    356,
                    366,
                    368,
                    253
                ],
                "_get_len_of_params": [
                    130,
                    131
                ],
                "attributes": [
                    137,
                    139,
                    140,
                    204,
                    205,
                    206,
                    208,
                    151,
                    153,
                    154
                ],
                "getattr": [
                    230,
                    137,
                    180,
                    190,
                    222
                ],
                "param_class": [
                    138,
                    139,
                    204,
                    141,
                    209,
                    152,
                    153
                ],
                "first": [
                    139,
                    140,
                    141,
                    174,
                    153,
                    154,
                    156
                ],
                "last": [
                    139,
                    140,
                    141,
                    174,
                    153,
                    154,
                    156
                ],
                "_ranging_attributes": [
                    153,
                    139
                ],
                "param_str": [
                    144,
                    141,
                    143
                ],
                "param_class.serialize": [
                    141
                ],
                "_get_str_one_parameter": [
                    143
                ],
                "ranging": [
                    146,
                    155,
                    157
                ],
                "params": [
                    195,
                    147,
                    148,
                    151,
                    188,
                    190,
                    191
                ],
                "_get_set_of_params": [
                    147
                ],
                "unique_param_keys": [
                    148,
                    149,
                    150
                ],
                "list": [
                    148
                ],
                "_get_unique_param_keys": [
                    148
                ],
                "unique_param": [
                    174,
                    177,
                    150,
                    151,
                    152,
                    156
                ],
                "_get_str_ranging_multiple_parameters": [
                    156
                ],
                "join": [
                    165
                ],
                "sum": [
                    344,
                    169,
                    371,
                    241
                ],
                "param": [
                    169,
                    175,
                    176,
                    177,
                    222,
                    180,
                    181,
                    221,
                    189,
                    190
                ],
                "task.get_params": [
                    169,
                    221,
                    230
                ],
                "row": [
                    224,
                    226,
                    218,
                    173,
                    176,
                    178,
                    180,
                    182,
                    183,
                    184,
                    215,
                    219,
                    222
                ],
                "str_unique_param": [
                    178,
                    174
                ],
                "serialize": [
                    180,
                    222,
                    174,
                    230
                ],
                "param_key": [
                    195,
                    197
                ],
                "param_values": [
                    195,
                    196
                ],
                "params.items": [
                    195
                ],
                "next_attributes": [
                    204,
                    205,
                    206
                ],
                "param_class.next_in_enumeration": [
                    209,
                    204
                ],
                "attribute": [
                    204
                ],
                "in_first": [
                    210,
                    205,
                    207
                ],
                "attributes.difference": [
                    205
                ],
                "in_second": [
                    209,
                    206,
                    207
                ],
                "next_attributes.difference": [
                    206
                ],
                "next": [
                    210
                ],
                "iter": [
                    210
                ],
                "count": [
                    225,
                    363,
                    365,
                    366,
                    369,
                    216,
                    218,
                    223
                ],
                "_get_number_of_tasks": [
                    235,
                    236,
                    237
                ],
                "group_tasks": [
                    356,
                    235,
                    236,
                    237,
                    340,
                    342,
                    343,
                    250
                ],
                "task_dict.values": [
                    241
                ],
                "comments": [
                    352,
                    257,
                    354,
                    343,
                    248,
                    253
                ],
                "human": [
                    256,
                    249
                ],
                "_COMMENTS": [
                    249,
                    276
                ],
                "num_tasks": [
                    250,
                    251,
                    255
                ],
                "_get_number_of_tasks_for": [
                    250
                ],
                "space": [
                    252,
                    254
                ],
                "_PENDING_SUB_STATUSES": [
                    356,
                    275,
                    252
                ],
                "_ORDERED_STATUSES": [
                    275,
                    261,
                    351
                ],
                "_ORDERED_STATUSES.index": [
                    275
                ],
                "task_sets": [
                    296,
                    297
                ],
                "values": [
                    296
                ],
                "_get_external_workers": [
                    296,
                    357
                ],
                "functools.reduce": [
                    297
                ],
                "functools": [
                    297
                ],
                "a": [
                    297
                ],
                "b": [
                    297
                ],
                "worker_that_blocked_task": [
                    304,
                    314,
                    315
                ],
                "collections.defaultdict": [
                    304
                ],
                "collections": [
                    304
                ],
                "get_work_response_history": [
                    305,
                    306
                ],
                "worker._get_work_response_history": [
                    305
                ],
                "get_work_response": [
                    306,
                    307,
                    308
                ],
                "running_task": [
                    308,
                    309,
                    310
                ],
                "other_worker_id": [
                    312,
                    314,
                    309
                ],
                "other_task_id": [
                    310,
                    311
                ],
                "other_task": [
                    312,
                    314,
                    311
                ],
                "worker._scheduled_tasks.get": [
                    311
                ],
                "worker._scheduled_tasks": [
                    311
                ],
                "worker._id": [
                    312
                ],
                "group_status": [
                    324,
                    326,
                    327,
                    328,
                    329
                ],
                "task.task_family": [
                    328,
                    326,
                    327
                ],
                "append": [
                    328
                ],
                "_partition_tasks": [
                    333
                ],
                "_get_run_by_other_worker": [
                    334
                ],
                "_populate_unknown_statuses": [
                    335
                ],
                "set_tasks.items": [
                    341
                ],
                "_group_tasks_by_name_and_status": [
                    360,
                    342
                ],
                "_get_comments": [
                    343
                ],
                "num_all_tasks": [
                    344,
                    398,
                    371,
                    350
                ],
                "str_output": [
                    354,
                    356,
                    362,
                    397,
                    366,
                    399,
                    368,
                    400,
                    370,
                    376,
                    377,
                    410,
                    349,
                    350
                ],
                "_get_str": [
                    356
                ],
                "ext_workers": [
                    357,
                    359,
                    361,
                    364,
                    365,
                    366,
                    375
                ],
                "group_tasks_ext_workers": [
                    360,
                    358
                ],
                "ext_worker": [
                    360,
                    364,
                    368,
                    359
                ],
                "ext_workers.items": [
                    364,
                    359
                ],
                "smiley": [
                    386,
                    389,
                    392,
                    395,
                    397,
                    378,
                    381
                ],
                "reason": [
                    384,
                    387,
                    390,
                    393,
                    396,
                    397,
                    379,
                    382
                ],
                "textwrap.dedent": [
                    404
                ],
                "textwrap": [
                    404
                ],
                "_summary_wrap": [
                    418
                ],
                "_summary_format": [
                    418
                ],
                "_summary_dict": [
                    418
                ]
            },
            "filtered_variables_in_file": {
                "luigi.Config": [
                    31
                ],
                "luigi": [
                    32,
                    31
                ],
                "summary_length": [
                    32,
                    124,
                    112
                ],
                "luigi.IntParameter": [
                    32
                ],
                "task_history": [
                    40,
                    41,
                    43,
                    44,
                    46,
                    47,
                    48,
                    50
                ],
                "worker._add_task_history": [
                    40,
                    65
                ],
                "worker": [
                    65,
                    418,
                    357,
                    40,
                    296,
                    333,
                    334,
                    305,
                    311,
                    312
                ],
                "pending_tasks": [
                    41,
                    43,
                    45
                ],
                "task": [
                    137,
                    41,
                    169,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    190,
                    325,
                    326,
                    327,
                    328,
                    73,
                    74,
                    87,
                    88,
                    89,
                    90,
                    217,
                    93,
                    221,
                    222,
                    96,
                    99,
                    230
                ],
                "status": [
                    41,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    341,
                    342,
                    351,
                    352,
                    354,
                    355,
                    356,
                    234,
                    237,
                    249,
                    250,
                    252,
                    253
                ],
                "ext": [
                    41,
                    43,
                    44,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51
                ],
                "set_tasks": [
                    385,
                    388,
                    391,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    73,
                    74,
                    333,
                    334,
                    335,
                    336,
                    82,
                    341,
                    344,
                    89,
                    90,
                    91,
                    345,
                    93,
                    94,
                    346,
                    96,
                    97,
                    347,
                    99,
                    100,
                    348,
                    104,
                    105,
                    371,
                    372,
                    373,
                    374,
                    380,
                    383
                ],
                "visited": [
                    72,
                    74,
                    81,
                    88,
                    89
                ],
                "_depth_first_search": [
                    89,
                    74
                ],
                "visited.add": [
                    81
                ],
                "current_task": [
                    97,
                    100,
                    104,
                    105,
                    81,
                    82,
                    87,
                    91,
                    94
                ],
                "upstream_failure": [
                    83,
                    92,
                    102
                ],
                "upstream_missing_dependency": [
                    84,
                    102,
                    95
                ],
                "upstream_run_by_other_worker": [
                    98,
                    85,
                    103
                ],
                "upstream_scheduling_error": [
                    101,
                    86,
                    103
                ],
                "current_task._requires": [
                    87
                ],
                "add": [
                    97,
                    100,
                    105,
                    314,
                    91,
                    94
                ],
                "execution_summary": [
                    112
                ],
                "lines": [
                    164,
                    165,
                    114,
                    124,
                    126
                ],
                "task_names": [
                    115,
                    116
                ],
                "task_dict.keys": [
                    115
                ],
                "task_dict": [
                    325,
                    359,
                    360,
                    364,
                    368,
                    241,
                    115,
                    341,
                    117,
                    342
                ],
                "task_family": [
                    129,
                    135,
                    144,
                    116,
                    117,
                    156
                ],
                "tasks": [
                    128,
                    129,
                    130,
                    131,
                    135,
                    136,
                    137,
                    138,
                    143,
                    144,
                    147,
                    156,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    175,
                    180,
                    181,
                    189,
                    190,
                    217,
                    218,
                    223,
                    241,
                    117,
                    118
                ],
                "x": [
                    208,
                    209,
                    210,
                    118
                ],
                "prefix_size": [
                    120,
                    119
                ],
                "extra_indent": [
                    119
                ],
                "prefix": [
                    129,
                    161,
                    163,
                    135,
                    144,
                    120,
                    156,
                    125,
                    159
                ],
                "line": [
                    129,
                    161,
                    163,
                    164,
                    135,
                    144,
                    122,
                    156,
                    125,
                    126,
                    159
                ],
                "lines.append": [
                    164,
                    126
                ],
                "get_params": [
                    128,
                    131,
                    136,
                    137,
                    138,
                    175,
                    144,
                    181,
                    189
                ],
                "_get_len_of_params": [
                    130,
                    131
                ],
                "attributes": [
                    137,
                    139,
                    140,
                    204,
                    205,
                    206,
                    208,
                    151,
                    153,
                    154
                ],
                "param_class": [
                    138,
                    139,
                    204,
                    141,
                    209,
                    152,
                    153
                ],
                "first": [
                    139,
                    140,
                    141,
                    174,
                    153,
                    154,
                    156
                ],
                "last": [
                    139,
                    140,
                    141,
                    174,
                    153,
                    154,
                    156
                ],
                "_ranging_attributes": [
                    153,
                    139
                ],
                "param_str": [
                    144,
                    141,
                    143
                ],
                "param_class.serialize": [
                    141
                ],
                "_get_str_one_parameter": [
                    143
                ],
                "ranging": [
                    146,
                    155,
                    157
                ],
                "params": [
                    195,
                    147,
                    148,
                    151,
                    188,
                    190,
                    191
                ],
                "_get_set_of_params": [
                    147
                ],
                "unique_param_keys": [
                    148,
                    149,
                    150
                ],
                "_get_unique_param_keys": [
                    148
                ],
                "unique_param": [
                    174,
                    177,
                    150,
                    151,
                    152,
                    156
                ],
                "_get_str_ranging_multiple_parameters": [
                    156
                ],
                "join": [
                    165
                ],
                "param": [
                    169,
                    175,
                    176,
                    177,
                    222,
                    180,
                    181,
                    221,
                    189,
                    190
                ],
                "task.get_params": [
                    169,
                    221,
                    230
                ],
                "row": [
                    224,
                    226,
                    218,
                    173,
                    176,
                    178,
                    180,
                    182,
                    183,
                    184,
                    215,
                    219,
                    222
                ],
                "str_unique_param": [
                    178,
                    174
                ],
                "serialize": [
                    180,
                    222,
                    174,
                    230
                ],
                "param_key": [
                    195,
                    197
                ],
                "param_values": [
                    195,
                    196
                ],
                "params.items": [
                    195
                ],
                "next_attributes": [
                    204,
                    205,
                    206
                ],
                "param_class.next_in_enumeration": [
                    209,
                    204
                ],
                "attribute": [
                    204
                ],
                "in_first": [
                    210,
                    205,
                    207
                ],
                "attributes.difference": [
                    205
                ],
                "in_second": [
                    209,
                    206,
                    207
                ],
                "next_attributes.difference": [
                    206
                ],
                "count": [
                    225,
                    363,
                    365,
                    366,
                    369,
                    216,
                    218,
                    223
                ],
                "_get_number_of_tasks": [
                    235,
                    236,
                    237
                ],
                "group_tasks": [
                    356,
                    235,
                    236,
                    237,
                    340,
                    342,
                    343,
                    250
                ],
                "task_dict.values": [
                    241
                ],
                "comments": [
                    352,
                    257,
                    354,
                    343,
                    248,
                    253
                ],
                "human": [
                    256,
                    249
                ],
                "_COMMENTS": [
                    249,
                    276
                ],
                "num_tasks": [
                    250,
                    251,
                    255
                ],
                "_get_number_of_tasks_for": [
                    250
                ],
                "space": [
                    252,
                    254
                ],
                "_PENDING_SUB_STATUSES": [
                    356,
                    275,
                    252
                ],
                "_ORDERED_STATUSES": [
                    275,
                    261,
                    351
                ],
                "_ORDERED_STATUSES.index": [
                    275
                ],
                "task_sets": [
                    296,
                    297
                ],
                "values": [
                    296
                ],
                "_get_external_workers": [
                    296,
                    357
                ],
                "functools.reduce": [
                    297
                ],
                "functools": [
                    297
                ],
                "a": [
                    297
                ],
                "b": [
                    297
                ],
                "worker_that_blocked_task": [
                    304,
                    314,
                    315
                ],
                "collections.defaultdict": [
                    304
                ],
                "collections": [
                    304
                ],
                "get_work_response_history": [
                    305,
                    306
                ],
                "worker._get_work_response_history": [
                    305
                ],
                "get_work_response": [
                    306,
                    307,
                    308
                ],
                "running_task": [
                    308,
                    309,
                    310
                ],
                "other_worker_id": [
                    312,
                    314,
                    309
                ],
                "other_task_id": [
                    310,
                    311
                ],
                "other_task": [
                    312,
                    314,
                    311
                ],
                "worker._scheduled_tasks.get": [
                    311
                ],
                "worker._scheduled_tasks": [
                    311
                ],
                "worker._id": [
                    312
                ],
                "group_status": [
                    324,
                    326,
                    327,
                    328,
                    329
                ],
                "task.task_family": [
                    328,
                    326,
                    327
                ],
                "append": [
                    328
                ],
                "_partition_tasks": [
                    333
                ],
                "_get_run_by_other_worker": [
                    334
                ],
                "_populate_unknown_statuses": [
                    335
                ],
                "set_tasks.items": [
                    341
                ],
                "_group_tasks_by_name_and_status": [
                    360,
                    342
                ],
                "_get_comments": [
                    343
                ],
                "num_all_tasks": [
                    344,
                    398,
                    371,
                    350
                ],
                "str_output": [
                    354,
                    356,
                    362,
                    397,
                    366,
                    399,
                    368,
                    400,
                    370,
                    376,
                    377,
                    410,
                    349,
                    350
                ],
                "_get_str": [
                    356
                ],
                "ext_workers": [
                    357,
                    359,
                    361,
                    364,
                    365,
                    366,
                    375
                ],
                "group_tasks_ext_workers": [
                    360,
                    358
                ],
                "ext_worker": [
                    360,
                    364,
                    368,
                    359
                ],
                "ext_workers.items": [
                    364,
                    359
                ],
                "smiley": [
                    386,
                    389,
                    392,
                    395,
                    397,
                    378,
                    381
                ],
                "reason": [
                    384,
                    387,
                    390,
                    393,
                    396,
                    397,
                    379,
                    382
                ],
                "textwrap.dedent": [
                    404
                ],
                "textwrap": [
                    404
                ],
                "_summary_wrap": [
                    418
                ],
                "_summary_format": [
                    418
                ],
                "_summary_dict": [
                    418
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_9/test/retcodes_test.py": {
            "buggy_functions": [
                {
                    "function_name": "test_unknown_reason",
                    "function_code": "def test_unknown_reason(self):\n\n    class TaskA(luigi.Task):\n        def complete(self):\n            return True\n\n    class RequiringTask(luigi.Task):\n        def requires(self):\n            yield TaskA()\n\n    def new_func(*args, **kwargs):\n        return None\n\n    with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):\n        self.run_and_expect('RequiringTask', 0)\n        self.run_and_expect('RequiringTask --retcode-not-run 5', 5)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 157,
                    "end_line": 172,
                    "variables": {
                        "luigi.Task": [
                            163,
                            159
                        ],
                        "luigi": [
                            163,
                            159
                        ],
                        "TaskA": [
                            165
                        ],
                        "mock.patch": [
                            170
                        ],
                        "mock": [
                            170
                        ],
                        "new_func": [
                            170
                        ],
                        "self.run_and_expect": [
                            171,
                            172
                        ],
                        "self": [
                            171,
                            172
                        ]
                    },
                    "filtered_variables": {
                        "luigi.Task": [
                            163,
                            159
                        ],
                        "luigi": [
                            163,
                            159
                        ],
                        "TaskA": [
                            165
                        ],
                        "mock.patch": [
                            170
                        ],
                        "mock": [
                            170
                        ],
                        "new_func": [
                            170
                        ],
                        "self.run_and_expect": [
                            171,
                            172
                        ],
                        "self": [
                            171,
                            172
                        ]
                    },
                    "diff_line_number": 172,
                    "class_data": {
                        "signature": "class RetcodesTest(LuigiTestCase)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def run_and_expect(self, joined_params, retcode, extra_args=['--local-scheduler', '--no-lock']):\n    with self.assertRaises(SystemExit) as cm:\n        luigi_run(joined_params.split(' ') + extra_args)\n    self.assertEqual(cm.exception.code, retcode)",
                            "def run_with_config(self, retcode_config, *args, **kwargs):\n    with_config(dict(retcode=retcode_config))(self.run_and_expect)(*args, **kwargs)",
                            "def test_task_failed(self):\n\n    class FailingTask(luigi.Task):\n\n        def run(self):\n            raise ValueError()\n    self.run_and_expect('FailingTask', 0)\n    self.run_and_expect('FailingTask --retcode-task-failed 5', 5)\n    self.run_with_config(dict(task_failed='3'), 'FailingTask', 3)",
                            "def test_missing_data(self):\n\n    class MissingDataTask(luigi.ExternalTask):\n\n        def complete(self):\n            return False\n    self.run_and_expect('MissingDataTask', 0)\n    self.run_and_expect('MissingDataTask --retcode-missing-data 5', 5)\n    self.run_with_config(dict(missing_data='3'), 'MissingDataTask', 3)",
                            "def test_already_running(self):\n\n    class AlreadyRunningTask(luigi.Task):\n\n        def run(self):\n            pass\n    old_func = luigi.scheduler.Scheduler.get_work\n\n    def new_func(*args, **kwargs):\n        kwargs['current_tasks'] = None\n        old_func(*args, **kwargs)\n        res = old_func(*args, **kwargs)\n        res['running_tasks'][0]['worker'] = 'not me :)'\n        return res\n    with mock.patch('luigi.scheduler.Scheduler.get_work', new_func):\n        self.run_and_expect('AlreadyRunningTask', 0)\n        self.run_and_expect('AlreadyRunningTask --retcode-already-running 5', 5)\n        self.run_with_config(dict(already_running='3'), 'AlreadyRunningTask', 3)",
                            "def test_when_locked(self):\n\n    def new_func(*args, **kwargs):\n        return False\n    with mock.patch('luigi.lock.acquire_for', new_func):\n        self.run_and_expect('Task', 0, extra_args=['--local-scheduler'])\n        self.run_and_expect('Task --retcode-already-running 5', 5, extra_args=['--local-scheduler'])\n        self.run_with_config(dict(already_running='3'), 'Task', 3, extra_args=['--local-scheduler'])",
                            "def test_failure_in_complete(self):\n\n    class FailingComplete(luigi.Task):\n\n        def complete(self):\n            raise Exception\n\n    class RequiringTask(luigi.Task):\n\n        def requires(self):\n            yield FailingComplete()\n    self.run_and_expect('RequiringTask', 0)",
                            "def test_failure_in_requires(self):\n\n    class FailingRequires(luigi.Task):\n\n        def requires(self):\n            raise Exception\n    self.run_and_expect('FailingRequires', 0)",
                            "def test_validate_dependency_error(self):\n\n    class DependencyTask(object):\n        pass\n\n    class RequiringTask(luigi.Task):\n\n        def requires(self):\n            yield DependencyTask()\n    self.run_and_expect('RequiringTask', 4)",
                            "def test_task_limit(self):\n\n    class TaskB(luigi.Task):\n\n        def complete(self):\n            return False\n\n    class TaskA(luigi.Task):\n\n        def requires(sefl):\n            yield TaskB()\n\n    class TaskLimitTest(luigi.Task):\n\n        def requires(self):\n            yield TaskA()\n    self.run_and_expect('TaskLimitTest --worker-task-limit 2', 0)\n    self.run_and_expect('TaskLimitTest --worker-task-limit 2 --retcode-scheduling-error 3', 3)",
                            "def test_unhandled_exception(self):\n\n    def new_func(*args, **kwargs):\n        raise Exception()\n    with mock.patch('luigi.worker.Worker.add', new_func):\n        self.run_and_expect('Task', 4)\n        self.run_and_expect('Task --retcode-unhandled-exception 2', 2)\n\n    class TaskWithRequiredParam(luigi.Task):\n        param = luigi.Parameter()\n    self.run_and_expect('TaskWithRequiredParam --param hello', 0)\n    self.run_and_expect('TaskWithRequiredParam', 4)",
                            "def test_when_mixed_errors(self):\n\n    class FailingTask(luigi.Task):\n\n        def run(self):\n            raise ValueError()\n\n    class MissingDataTask(luigi.ExternalTask):\n\n        def complete(self):\n            return False\n\n    class RequiringTask(luigi.Task):\n\n        def requires(self):\n            yield FailingTask()\n            yield MissingDataTask()\n    self.run_and_expect('RequiringTask --retcode-task-failed 4 --retcode-missing-data 5', 5)\n    self.run_and_expect('RequiringTask --retcode-task-failed 7 --retcode-missing-data 6', 7)",
                            "def test_unknown_reason(self):\n\n    class TaskA(luigi.Task):\n\n        def complete(self):\n            return True\n\n    class RequiringTask(luigi.Task):\n\n        def requires(self):\n            yield TaskA()\n\n    def new_func(*args, **kwargs):\n        return None\n    with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):\n        self.run_and_expect('RequiringTask', 0)\n        self.run_and_expect('RequiringTask --retcode-not-run 5', 5)",
                            "def new_func(*args, **kwargs):\n    kwargs['current_tasks'] = None\n    old_func(*args, **kwargs)\n    res = old_func(*args, **kwargs)\n    res['running_tasks'][0]['worker'] = 'not me :)'\n    return res",
                            "def new_func(*args, **kwargs):\n    return False",
                            "def new_func(*args, **kwargs):\n    raise Exception()",
                            "def new_func(*args, **kwargs):\n    return None",
                            "def run(self):\n    raise ValueError()",
                            "def complete(self):\n    return False",
                            "def run(self):\n    pass",
                            "def complete(self):\n    raise Exception",
                            "def requires(self):\n    yield FailingComplete()",
                            "def requires(self):\n    raise Exception",
                            "def requires(self):\n    yield DependencyTask()",
                            "def complete(self):\n    return False",
                            "def requires(sefl):\n    yield TaskB()",
                            "def requires(self):\n    yield TaskA()",
                            "def run(self):\n    raise ValueError()",
                            "def complete(self):\n    return False",
                            "def requires(self):\n    yield FailingTask()\n    yield MissingDataTask()",
                            "def complete(self):\n    return True",
                            "def requires(self):\n    yield TaskA()"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "run_and_expect(self, joined_params, retcode, extra_args=['--local-scheduler', '--no-lock'])",
                            "run_with_config(self, retcode_config, *args, **kwargs)",
                            "test_task_failed(self)",
                            "test_missing_data(self)",
                            "test_already_running(self)",
                            "test_when_locked(self)",
                            "test_failure_in_complete(self)",
                            "test_failure_in_requires(self)",
                            "test_validate_dependency_error(self)",
                            "test_task_limit(self)",
                            "test_unhandled_exception(self)",
                            "test_when_mixed_errors(self)",
                            "test_unknown_reason(self)",
                            "new_func(*args, **kwargs)",
                            "new_func(*args, **kwargs)",
                            "new_func(*args, **kwargs)",
                            "new_func(*args, **kwargs)",
                            "run(self)",
                            "complete(self)",
                            "run(self)",
                            "complete(self)",
                            "requires(self)",
                            "requires(self)",
                            "requires(self)",
                            "complete(self)",
                            "requires(sefl)",
                            "requires(self)",
                            "run(self)",
                            "complete(self)",
                            "requires(self)",
                            "complete(self)",
                            "requires(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def run_and_expect(self, joined_params, retcode, extra_args=['--local-scheduler', '--no-lock']):\n    with self.assertRaises(SystemExit) as cm:\n        luigi_run((joined_params.split(' ') + extra_args))\n    self.assertEqual(cm.exception.code, retcode)",
                "def run_with_config(self, retcode_config, *args, **kwargs):\n    with_config(dict(retcode=retcode_config))(self.run_and_expect)(*args, **kwargs)",
                "def test_task_failed(self):\n    class FailingTask(luigi.Task):\n        def run(self):\n            raise ValueError()\n\n    self.run_and_expect('FailingTask', 0)  # Test default value to be 0\n    self.run_and_expect('FailingTask --retcode-task-failed 5', 5)\n    self.run_with_config(dict(task_failed='3'), 'FailingTask', 3)",
                "def test_missing_data(self):\n    class MissingDataTask(luigi.ExternalTask):\n        def complete(self):\n            return False\n\n    self.run_and_expect('MissingDataTask', 0)  # Test default value to be 0\n    self.run_and_expect('MissingDataTask --retcode-missing-data 5', 5)\n    self.run_with_config(dict(missing_data='3'), 'MissingDataTask', 3)",
                "def test_already_running(self):\n    class AlreadyRunningTask(luigi.Task):\n        def run(self):\n            pass\n\n    old_func = luigi.scheduler.Scheduler.get_work\n\n    def new_func(*args, **kwargs):\n        kwargs['current_tasks'] = None\n        old_func(*args, **kwargs)\n        res = old_func(*args, **kwargs)\n        res['running_tasks'][0]['worker'] = \"not me :)\"  # Otherwise it will be filtered\n        return res\n\n    with mock.patch('luigi.scheduler.Scheduler.get_work', new_func):\n        self.run_and_expect('AlreadyRunningTask', 0)  # Test default value to be 0\n        self.run_and_expect('AlreadyRunningTask --retcode-already-running 5', 5)\n        self.run_with_config(dict(already_running='3'), 'AlreadyRunningTask', 3)",
                "def test_when_locked(self):\n    def new_func(*args, **kwargs):\n        return False\n\n    with mock.patch('luigi.lock.acquire_for', new_func):\n        self.run_and_expect('Task', 0, extra_args=['--local-scheduler'])\n        self.run_and_expect('Task --retcode-already-running 5', 5, extra_args=['--local-scheduler'])\n        self.run_with_config(dict(already_running='3'), 'Task', 3, extra_args=['--local-scheduler'])",
                "def test_failure_in_complete(self):\n    class FailingComplete(luigi.Task):\n        def complete(self):\n            raise Exception\n\n    class RequiringTask(luigi.Task):\n        def requires(self):\n            yield FailingComplete()\n\n    self.run_and_expect('RequiringTask', 0)",
                "def test_failure_in_requires(self):\n    class FailingRequires(luigi.Task):\n        def requires(self):\n            raise Exception\n\n    self.run_and_expect('FailingRequires', 0)",
                "def test_validate_dependency_error(self):\n    # requires() from RequiringTask expects a Task object\n    class DependencyTask(object):\n        pass\n\n    class RequiringTask(luigi.Task):\n        def requires(self):\n            yield DependencyTask()\n\n    self.run_and_expect('RequiringTask', 4)",
                "def test_task_limit(self):\n    class TaskB(luigi.Task):\n        def complete(self):\n            return False\n\n    class TaskA(luigi.Task):\n        def requires(sefl):\n            yield TaskB()\n\n    class TaskLimitTest(luigi.Task):\n        def requires(self):\n            yield TaskA()\n\n    self.run_and_expect('TaskLimitTest --worker-task-limit 2', 0)\n    self.run_and_expect('TaskLimitTest --worker-task-limit 2 --retcode-scheduling-error 3', 3)",
                "def test_unhandled_exception(self):\n    def new_func(*args, **kwargs):\n        raise Exception()\n\n    with mock.patch('luigi.worker.Worker.add', new_func):\n        self.run_and_expect('Task', 4)\n        self.run_and_expect('Task --retcode-unhandled-exception 2', 2)\n\n    class TaskWithRequiredParam(luigi.Task):\n        param = luigi.Parameter()\n\n    self.run_and_expect('TaskWithRequiredParam --param hello', 0)\n    self.run_and_expect('TaskWithRequiredParam', 4)",
                "def test_when_mixed_errors(self):\n\n    class FailingTask(luigi.Task):\n        def run(self):\n            raise ValueError()\n\n    class MissingDataTask(luigi.ExternalTask):\n        def complete(self):\n            return False\n\n    class RequiringTask(luigi.Task):\n        def requires(self):\n            yield FailingTask()\n            yield MissingDataTask()\n\n    self.run_and_expect('RequiringTask --retcode-task-failed 4 --retcode-missing-data 5', 5)\n    self.run_and_expect('RequiringTask --retcode-task-failed 7 --retcode-missing-data 6', 7)",
                "def test_unknown_reason(self):\n\n    class TaskA(luigi.Task):\n        def complete(self):\n            return True\n\n    class RequiringTask(luigi.Task):\n        def requires(self):\n            yield TaskA()\n\n    def new_func(*args, **kwargs):\n        return None\n\n    with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):\n        self.run_and_expect('RequiringTask', 0)\n        self.run_and_expect('RequiringTask --retcode-not-run 5', 5)",
                "def new_func(*args, **kwargs):\n    kwargs['current_tasks'] = None\n    old_func(*args, **kwargs)\n    res = old_func(*args, **kwargs)\n    res['running_tasks'][0]['worker'] = \"not me :)\"  # Otherwise it will be filtered\n    return res",
                "def new_func(*args, **kwargs):\n    return False",
                "def new_func(*args, **kwargs):\n    raise Exception()",
                "def new_func(*args, **kwargs):\n    return None",
                "def run(self):\n    raise ValueError()",
                "def complete(self):\n    return False",
                "def run(self):\n    pass",
                "def complete(self):\n    raise Exception",
                "def requires(self):\n    yield FailingComplete()",
                "def requires(self):\n    raise Exception",
                "def requires(self):\n    yield DependencyTask()",
                "def complete(self):\n    return False",
                "def requires(sefl):\n    yield TaskB()",
                "def requires(self):\n    yield TaskA()",
                "def run(self):\n    raise ValueError()",
                "def complete(self):\n    return False",
                "def requires(self):\n    yield FailingTask()\n    yield MissingDataTask()",
                "def complete(self):\n    return True",
                "def requires(self):\n    yield TaskA()"
            ],
            "inscope_function_signatures": [
                "run_and_expect(self, joined_params, retcode, extra_args=['--local-scheduler', '--no-lock'])",
                "run_with_config(self, retcode_config, *args, **kwargs)",
                "test_task_failed(self)",
                "test_missing_data(self)",
                "test_already_running(self)",
                "test_when_locked(self)",
                "test_failure_in_complete(self)",
                "test_failure_in_requires(self)",
                "test_validate_dependency_error(self)",
                "test_task_limit(self)",
                "test_unhandled_exception(self)",
                "test_when_mixed_errors(self)",
                "test_unknown_reason(self)",
                "new_func(*args, **kwargs)",
                "new_func(*args, **kwargs)",
                "new_func(*args, **kwargs)",
                "new_func(*args, **kwargs)",
                "run(self)",
                "complete(self)",
                "run(self)",
                "complete(self)",
                "requires(self)",
                "requires(self)",
                "requires(self)",
                "complete(self)",
                "requires(sefl)",
                "requires(self)",
                "run(self)",
                "complete(self)",
                "requires(self)",
                "complete(self)",
                "requires(self)"
            ],
            "variables_in_file": {
                "LuigiTestCase": [
                    24
                ],
                "self.assertRaises": [
                    27
                ],
                "self": [
                    130,
                    131,
                    136,
                    137,
                    154,
                    27,
                    155,
                    29,
                    32,
                    39,
                    40,
                    41,
                    171,
                    172,
                    48,
                    49,
                    50,
                    67,
                    68,
                    69,
                    76,
                    77,
                    78,
                    89,
                    96,
                    107,
                    122,
                    123
                ],
                "SystemExit": [
                    27
                ],
                "cm": [
                    27,
                    29
                ],
                "luigi_run": [
                    28
                ],
                "joined_params.split": [
                    28
                ],
                "joined_params": [
                    28
                ],
                "extra_args": [
                    28
                ],
                "self.assertEqual": [
                    29
                ],
                "cm.exception.code": [
                    29
                ],
                "cm.exception": [
                    29
                ],
                "retcode": [
                    29
                ],
                "with_config": [
                    32
                ],
                "dict": [
                    32,
                    69,
                    41,
                    78,
                    50
                ],
                "retcode_config": [
                    32
                ],
                "self.run_and_expect": [
                    130,
                    131,
                    136,
                    137,
                    154,
                    155,
                    32,
                    39,
                    40,
                    171,
                    172,
                    48,
                    49,
                    67,
                    68,
                    76,
                    77,
                    89,
                    96,
                    107,
                    122,
                    123
                ],
                "args": [
                    32,
                    61,
                    62
                ],
                "kwargs": [
                    32,
                    60,
                    61,
                    62
                ],
                "luigi.Task": [
                    35,
                    163,
                    133,
                    103,
                    141,
                    110,
                    81,
                    114,
                    85,
                    53,
                    118,
                    149,
                    92,
                    159
                ],
                "luigi": [
                    35,
                    163,
                    133,
                    134,
                    103,
                    44,
                    141,
                    110,
                    81,
                    114,
                    145,
                    53,
                    85,
                    118,
                    149,
                    57,
                    92,
                    159
                ],
                "ValueError": [
                    37,
                    143
                ],
                "self.run_with_config": [
                    41,
                    50,
                    69,
                    78
                ],
                "luigi.ExternalTask": [
                    145,
                    44
                ],
                "old_func": [
                    57,
                    61,
                    62
                ],
                "luigi.scheduler.Scheduler.get_work": [
                    57
                ],
                "luigi.scheduler.Scheduler": [
                    57
                ],
                "luigi.scheduler": [
                    57
                ],
                "res": [
                    64,
                    62,
                    63
                ],
                "mock.patch": [
                    170,
                    129,
                    66,
                    75
                ],
                "mock": [
                    170,
                    129,
                    66,
                    75
                ],
                "new_func": [
                    170,
                    129,
                    66,
                    75
                ],
                "Exception": [
                    83,
                    94,
                    127
                ],
                "FailingComplete": [
                    87
                ],
                "object": [
                    100
                ],
                "DependencyTask": [
                    105
                ],
                "TaskB": [
                    116
                ],
                "TaskA": [
                    120,
                    165
                ],
                "param": [
                    134
                ],
                "luigi.Parameter": [
                    134
                ],
                "FailingTask": [
                    151
                ],
                "MissingDataTask": [
                    152
                ]
            },
            "filtered_variables_in_file": {
                "LuigiTestCase": [
                    24
                ],
                "self.assertRaises": [
                    27
                ],
                "self": [
                    130,
                    131,
                    136,
                    137,
                    154,
                    27,
                    155,
                    29,
                    32,
                    39,
                    40,
                    41,
                    171,
                    172,
                    48,
                    49,
                    50,
                    67,
                    68,
                    69,
                    76,
                    77,
                    78,
                    89,
                    96,
                    107,
                    122,
                    123
                ],
                "cm": [
                    27,
                    29
                ],
                "luigi_run": [
                    28
                ],
                "joined_params.split": [
                    28
                ],
                "joined_params": [
                    28
                ],
                "extra_args": [
                    28
                ],
                "self.assertEqual": [
                    29
                ],
                "cm.exception.code": [
                    29
                ],
                "cm.exception": [
                    29
                ],
                "retcode": [
                    29
                ],
                "with_config": [
                    32
                ],
                "retcode_config": [
                    32
                ],
                "self.run_and_expect": [
                    130,
                    131,
                    136,
                    137,
                    154,
                    155,
                    32,
                    39,
                    40,
                    171,
                    172,
                    48,
                    49,
                    67,
                    68,
                    76,
                    77,
                    89,
                    96,
                    107,
                    122,
                    123
                ],
                "args": [
                    32,
                    61,
                    62
                ],
                "kwargs": [
                    32,
                    60,
                    61,
                    62
                ],
                "luigi.Task": [
                    35,
                    163,
                    133,
                    103,
                    141,
                    110,
                    81,
                    114,
                    85,
                    53,
                    118,
                    149,
                    92,
                    159
                ],
                "luigi": [
                    35,
                    163,
                    133,
                    134,
                    103,
                    44,
                    141,
                    110,
                    81,
                    114,
                    145,
                    53,
                    85,
                    118,
                    149,
                    57,
                    92,
                    159
                ],
                "self.run_with_config": [
                    41,
                    50,
                    69,
                    78
                ],
                "luigi.ExternalTask": [
                    145,
                    44
                ],
                "old_func": [
                    57,
                    61,
                    62
                ],
                "luigi.scheduler.Scheduler.get_work": [
                    57
                ],
                "luigi.scheduler.Scheduler": [
                    57
                ],
                "luigi.scheduler": [
                    57
                ],
                "res": [
                    64,
                    62,
                    63
                ],
                "mock.patch": [
                    170,
                    129,
                    66,
                    75
                ],
                "mock": [
                    170,
                    129,
                    66,
                    75
                ],
                "new_func": [
                    170,
                    129,
                    66,
                    75
                ],
                "FailingComplete": [
                    87
                ],
                "DependencyTask": [
                    105
                ],
                "TaskB": [
                    116
                ],
                "TaskA": [
                    120,
                    165
                ],
                "param": [
                    134
                ],
                "luigi.Parameter": [
                    134
                ],
                "FailingTask": [
                    151
                ],
                "MissingDataTask": [
                    152
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_9/test/execution_summary_test.py",
                "test_function": "test_status_with_task_retry",
                "test_function_code": "    def test_status_with_task_retry(self):\n        class Foo(luigi.Task):\n            run_count = 0\n\n            def run(self):\n                self.run_count += 1\n                if self.run_count == 1:\n                    raise ValueError()\n\n            def complete(self):\n                return self.run_count > 0\n\n        self.run_task(Foo())\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertEqual({Foo()}, d['ever_failed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('Scheduled 1 task', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('ever failed', s)\n        self.assertIn('\\n\\nThis progress looks :) because there were failed tasks but they all suceeded in a retry', s)",
                "test_error": "KeyError: 'ever_failed'",
                "full_test_error": "self = <execution_summary_test.ExecutionSummaryTest testMethod=test_status_with_task_retry>\n\n    def test_status_with_task_retry(self):\n        class Foo(luigi.Task):\n            run_count = 0\n    \n            def run(self):\n                self.run_count += 1\n                if self.run_count == 1:\n                    raise ValueError()\n    \n            def complete(self):\n                return self.run_count > 0\n    \n        self.run_task(Foo())\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['completed'])\n>       self.assertEqual({Foo()}, d['ever_failed'])\nE       KeyError: 'ever_failed'\n\ntest/execution_summary_test.py:1109: KeyError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}