{
    "luigi:32": {
        "/Volumes/SSD2T/bgp_envs/repos/luigi_32/luigi/task_register.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "from luigi import six",
                    "start_line": 27,
                    "end_line": 28
                }
            ],
            "inscope_functions": [
                "def __new__(metacls, classname, bases, classdict):\n    \"\"\"\n    Custom class creation for namespacing.\n\n    Also register all subclasses.\n\n    Set the task namespace to whatever the currently declared namespace is.\n    \"\"\"\n    if \"task_namespace\" not in classdict:\n        classdict[\"task_namespace\"] = metacls._default_namespace\n\n    cls = super(Register, metacls).__new__(metacls, classname, bases, classdict)\n    metacls._reg.append(cls)\n\n    return cls",
                "def __call__(cls, *args, **kwargs):\n    \"\"\"\n    Custom class instantiation utilizing instance cache.\n\n    If a Task has already been instantiated with the same parameters,\n    the previous instance is returned to reduce number of object instances.\n    \"\"\"\n    def instantiate():\n        return super(Register, cls).__call__(*args, **kwargs)\n\n    h = cls.__instance_cache\n\n    if h is None:  # disabled\n        return instantiate()\n\n    params = cls.get_params()\n    param_values = cls.get_param_values(params, args, kwargs)\n\n    k = (cls, tuple(param_values))\n\n    try:\n        hash(k)\n    except TypeError:\n        logger.debug(\"Not all parameter values are hashable so instance isn't coming from the cache\")\n        return instantiate()  # unhashable types in parameters\n\n    if k not in h:\n        h[k] = instantiate()\n\n    return h[k]",
                "@classmethod\ndef clear_instance_cache(cls):\n    \"\"\"\n    Clear/Reset the instance cache.\n    \"\"\"\n    cls.__instance_cache = {}",
                "@classmethod\ndef disable_instance_cache(cls):\n    \"\"\"\n    Disables the instance cache.\n    \"\"\"\n    cls.__instance_cache = None",
                "@property\ndef task_family(cls):\n    \"\"\"\n    The task family for the given class.\n\n    If ``cls.task_namespace is None`` then it's the name of the class.\n    Otherwise, ``<task_namespace>.`` is prefixed to the class name.\n    \"\"\"\n    if cls.task_namespace is None:\n        return cls.__name__\n    else:\n        return \"%s.%s\" % (cls.task_namespace, cls.__name__)",
                "@classmethod\ndef __get_reg(cls, include_config_without_section=False):\n    \"\"\"Return all of the registered classes.\n\n    :return:  an ``collections.OrderedDict`` of task_family -> class\n    \"\"\"\n    # We have to do this on-demand in case task names have changed later\n    # We return this in a topologically sorted list of inheritance: this is useful in some cases (#822)\n    reg = OrderedDict()\n    for cls in cls._reg:\n        if cls.run == NotImplemented:\n            continue\n        if cls._config_without_section and not include_config_without_section:\n            continue\n        name = cls.task_family\n\n        if name in reg and reg[name] != cls and \\\n                reg[name] != cls.AMBIGUOUS_CLASS and \\\n                not issubclass(cls, reg[name]):\n            # Registering two different classes - this means we can't instantiate them by name\n            # The only exception is if one class is a subclass of the other. In that case, we\n            # instantiate the most-derived class (this fixes some issues with decorator wrappers).\n            reg[name] = cls.AMBIGUOUS_CLASS\n        else:\n            reg[name] = cls\n\n    return reg",
                "@classmethod\ndef task_names(cls):\n    \"\"\"\n    List of task names as strings\n    \"\"\"\n    return sorted(cls.__get_reg().keys())",
                "@classmethod\ndef tasks_str(cls):\n    \"\"\"\n    Human-readable register contents dump.\n    \"\"\"\n    return ','.join(cls.task_names())",
                "@classmethod\ndef get_task_cls(cls, name):\n    \"\"\"\n    Returns an unambiguous class or raises an exception.\n    \"\"\"\n    task_cls = cls.__get_reg().get(name)\n    if not task_cls:\n        raise TaskClassException('Task %r not found. Candidates are: %s' % (name, cls.tasks_str()))\n\n    if task_cls == cls.AMBIGUOUS_CLASS:\n        raise TaskClassException('Task %r is ambiguous' % name)\n    return task_cls",
                "@classmethod\ndef get_all_params(cls):\n    \"\"\"\n    Compiles and returns all parameters for all :py:class:`Task`.\n\n    :return: a ``dict`` of parameter name -> parameter.\n    \"\"\"\n    for task_name, task_cls in six.iteritems(cls.__get_reg(include_config_without_section=True)):\n        if task_cls == cls.AMBIGUOUS_CLASS:\n            continue\n        for param_name, param_obj in task_cls.get_params():\n            yield task_name, task_cls._config_without_section, param_name, param_obj",
                "def instantiate():\n    return super(Register, cls).__call__(*args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "__new__(metacls, classname, bases, classdict)",
                "__call__(cls, *args, **kwargs)",
                "clear_instance_cache(cls)",
                "disable_instance_cache(cls)",
                "task_family(cls)",
                "__get_reg(cls, include_config_without_section=False)",
                "task_names(cls)",
                "tasks_str(cls)",
                "get_task_cls(cls, name)",
                "get_all_params(cls)",
                "instantiate()"
            ],
            "variables_in_file": {
                "ImportError": [
                    24
                ],
                "Exception": [
                    30
                ],
                "abc.ABCMeta": [
                    34
                ],
                "abc": [
                    34
                ],
                "__instance_cache": [
                    44
                ],
                "_default_namespace": [
                    45
                ],
                "_reg": [
                    46
                ],
                "AMBIGUOUS_CLASS": [
                    47
                ],
                "object": [
                    47
                ],
                "classdict": [
                    60,
                    61,
                    63
                ],
                "metacls._default_namespace": [
                    61
                ],
                "metacls": [
                    64,
                    61,
                    63
                ],
                "cls": [
                    135,
                    136,
                    138,
                    140,
                    142,
                    143,
                    144,
                    148,
                    150,
                    159,
                    166,
                    173,
                    175,
                    177,
                    188,
                    189,
                    63,
                    64,
                    66,
                    76,
                    78,
                    83,
                    84,
                    86,
                    104,
                    111,
                    121,
                    122,
                    124
                ],
                "__new__": [
                    63
                ],
                "super": [
                    76,
                    63
                ],
                "Register": [
                    76,
                    63
                ],
                "classname": [
                    63
                ],
                "bases": [
                    63
                ],
                "metacls._reg.append": [
                    64
                ],
                "metacls._reg": [
                    64
                ],
                "__call__": [
                    76
                ],
                "args": [
                    76,
                    84
                ],
                "kwargs": [
                    76,
                    84
                ],
                "h": [
                    97,
                    78,
                    80,
                    94,
                    95
                ],
                "cls.__instance_cache": [
                    104,
                    78,
                    111
                ],
                "instantiate": [
                    81,
                    92,
                    95
                ],
                "params": [
                    83,
                    84
                ],
                "cls.get_params": [
                    83
                ],
                "param_values": [
                    84,
                    86
                ],
                "cls.get_param_values": [
                    84
                ],
                "k": [
                    97,
                    86,
                    89,
                    94,
                    95
                ],
                "tuple": [
                    86
                ],
                "hash": [
                    89
                ],
                "TypeError": [
                    90
                ],
                "logger.debug": [
                    91
                ],
                "logger": [
                    91
                ],
                "classmethod": [
                    161,
                    99,
                    168,
                    106,
                    181,
                    154,
                    126
                ],
                "cls.task_namespace": [
                    121,
                    124
                ],
                "cls.__name__": [
                    122,
                    124
                ],
                "property": [
                    113
                ],
                "reg": [
                    134,
                    142,
                    143,
                    144,
                    148,
                    150,
                    152
                ],
                "OrderedDict": [
                    134
                ],
                "cls._reg": [
                    135
                ],
                "cls.run": [
                    136
                ],
                "NotImplemented": [
                    136
                ],
                "cls._config_without_section": [
                    138
                ],
                "include_config_without_section": [
                    138
                ],
                "name": [
                    140,
                    173,
                    142,
                    143,
                    144,
                    175,
                    178,
                    148,
                    150
                ],
                "cls.task_family": [
                    140
                ],
                "cls.AMBIGUOUS_CLASS": [
                    177,
                    148,
                    189,
                    143
                ],
                "issubclass": [
                    144
                ],
                "sorted": [
                    159
                ],
                "keys": [
                    159
                ],
                "cls.__get_reg": [
                    188,
                    173,
                    159
                ],
                "join": [
                    166
                ],
                "cls.task_names": [
                    166
                ],
                "task_cls": [
                    192,
                    173,
                    174,
                    177,
                    179,
                    188,
                    189,
                    191
                ],
                "get": [
                    173
                ],
                "TaskClassException": [
                    178,
                    175
                ],
                "cls.tasks_str": [
                    175
                ],
                "task_name": [
                    192,
                    188
                ],
                "six.iteritems": [
                    188
                ],
                "six": [
                    188
                ],
                "param_name": [
                    192,
                    191
                ],
                "param_obj": [
                    192,
                    191
                ],
                "task_cls.get_params": [
                    191
                ],
                "task_cls._config_without_section": [
                    192
                ]
            },
            "filtered_variables_in_file": {
                "abc.ABCMeta": [
                    34
                ],
                "abc": [
                    34
                ],
                "__instance_cache": [
                    44
                ],
                "_default_namespace": [
                    45
                ],
                "_reg": [
                    46
                ],
                "AMBIGUOUS_CLASS": [
                    47
                ],
                "classdict": [
                    60,
                    61,
                    63
                ],
                "metacls._default_namespace": [
                    61
                ],
                "metacls": [
                    64,
                    61,
                    63
                ],
                "cls": [
                    135,
                    136,
                    138,
                    140,
                    142,
                    143,
                    144,
                    148,
                    150,
                    159,
                    166,
                    173,
                    175,
                    177,
                    188,
                    189,
                    63,
                    64,
                    66,
                    76,
                    78,
                    83,
                    84,
                    86,
                    104,
                    111,
                    121,
                    122,
                    124
                ],
                "__new__": [
                    63
                ],
                "Register": [
                    76,
                    63
                ],
                "classname": [
                    63
                ],
                "bases": [
                    63
                ],
                "metacls._reg.append": [
                    64
                ],
                "metacls._reg": [
                    64
                ],
                "__call__": [
                    76
                ],
                "args": [
                    76,
                    84
                ],
                "kwargs": [
                    76,
                    84
                ],
                "h": [
                    97,
                    78,
                    80,
                    94,
                    95
                ],
                "cls.__instance_cache": [
                    104,
                    78,
                    111
                ],
                "instantiate": [
                    81,
                    92,
                    95
                ],
                "params": [
                    83,
                    84
                ],
                "cls.get_params": [
                    83
                ],
                "param_values": [
                    84,
                    86
                ],
                "cls.get_param_values": [
                    84
                ],
                "k": [
                    97,
                    86,
                    89,
                    94,
                    95
                ],
                "logger.debug": [
                    91
                ],
                "logger": [
                    91
                ],
                "cls.task_namespace": [
                    121,
                    124
                ],
                "cls.__name__": [
                    122,
                    124
                ],
                "reg": [
                    134,
                    142,
                    143,
                    144,
                    148,
                    150,
                    152
                ],
                "OrderedDict": [
                    134
                ],
                "cls._reg": [
                    135
                ],
                "cls.run": [
                    136
                ],
                "cls._config_without_section": [
                    138
                ],
                "include_config_without_section": [
                    138
                ],
                "name": [
                    140,
                    173,
                    142,
                    143,
                    144,
                    175,
                    178,
                    148,
                    150
                ],
                "cls.task_family": [
                    140
                ],
                "cls.AMBIGUOUS_CLASS": [
                    177,
                    148,
                    189,
                    143
                ],
                "keys": [
                    159
                ],
                "cls.__get_reg": [
                    188,
                    173,
                    159
                ],
                "join": [
                    166
                ],
                "cls.task_names": [
                    166
                ],
                "task_cls": [
                    192,
                    173,
                    174,
                    177,
                    179,
                    188,
                    189,
                    191
                ],
                "get": [
                    173
                ],
                "TaskClassException": [
                    178,
                    175
                ],
                "cls.tasks_str": [
                    175
                ],
                "task_name": [
                    192,
                    188
                ],
                "six.iteritems": [
                    188
                ],
                "six": [
                    188
                ],
                "param_name": [
                    192,
                    191
                ],
                "param_obj": [
                    192,
                    191
                ],
                "task_cls.get_params": [
                    191
                ],
                "task_cls._config_without_section": [
                    192
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/luigi_32/test/instance_test.py",
                "test_function": "test_unhashable_type",
                "test_function_code": "    def test_unhashable_type(self):\n        # See #857\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n\n        dummy = DummyTask(x={})",
                "test_error": "NameError: name 'logger' is not defined",
                "full_test_error": "cls = <class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>\nargs = (), kwargs = {'x': {}}\ninstantiate = <function Register.__call__.<locals>.instantiate at 0x10d9de9d0>\nh = {}, params = [('x', <luigi.parameter.Parameter object at 0x10d9dfac0>)]\nparam_values = [('x', {})]\nk = (<class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>, (('x', {}),))\n\n    def __call__(cls, *args, **kwargs):\n        \"\"\"\n        Custom class instantiation utilizing instance cache.\n    \n        If a Task has already been instantiated with the same parameters,\n        the previous instance is returned to reduce number of object instances.\n        \"\"\"\n        def instantiate():\n            return super(Register, cls).__call__(*args, **kwargs)\n    \n        h = cls.__instance_cache\n    \n        if h is None:  # disabled\n            return instantiate()\n    \n        params = cls.get_params()\n        param_values = cls.get_param_values(params, args, kwargs)\n    \n        k = (cls, tuple(param_values))\n    \n        try:\n>           hash(k)\nE           TypeError: unhashable type: 'dict'\n\nluigi/task_register.py:89: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <instance_test.InstanceTest testMethod=test_unhashable_type>\n\n    def test_unhashable_type(self):\n        # See #857\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n    \n>       dummy = DummyTask(x={})\n\ntest/instance_test.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>\nargs = (), kwargs = {'x': {}}\ninstantiate = <function Register.__call__.<locals>.instantiate at 0x10d9de9d0>\nh = {}, params = [('x', <luigi.parameter.Parameter object at 0x10d9dfac0>)]\nparam_values = [('x', {})]\nk = (<class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>, (('x', {}),))\n\n    def __call__(cls, *args, **kwargs):\n        \"\"\"\n        Custom class instantiation utilizing instance cache.\n    \n        If a Task has already been instantiated with the same parameters,\n        the previous instance is returned to reduce number of object instances.\n        \"\"\"\n        def instantiate():\n            return super(Register, cls).__call__(*args, **kwargs)\n    \n        h = cls.__instance_cache\n    \n        if h is None:  # disabled\n            return instantiate()\n    \n        params = cls.get_params()\n        param_values = cls.get_param_values(params, args, kwargs)\n    \n        k = (cls, tuple(param_values))\n    \n        try:\n            hash(k)\n        except TypeError:\n>           logger.debug(\"Not all parameter values are hashable so instance isn't coming from the cache\")\nE           NameError: name 'logger' is not defined\n\nluigi/task_register.py:91: NameError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}