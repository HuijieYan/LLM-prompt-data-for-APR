{
    "1.1.1": null,
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_32/luigi/task_register.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_unhashable_type(self):\n        # See #857\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n\n        dummy = DummyTask(x={})"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_32/test/instance_test.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: unhashable type: 'dict'",
            "E           NameError: name 'logger' is not defined"
        ]
    ],
    "2.1.2": [
        [
            "cls = <class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>\nargs = (), kwargs = {'x': {}}\ninstantiate = <function Register.__call__.<locals>.instantiate at 0x105d778b0>\nh = {}, params = [('x', <luigi.parameter.Parameter object at 0x105d76b20>)]\nparam_values = [('x', {})]\nk = (<class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>, (('x', {}),))\n\n    def __call__(cls, *args, **kwargs):\n        \"\"\"\n        Custom class instantiation utilizing instance cache.\n    \n        If a Task has already been instantiated with the same parameters,\n        the previous instance is returned to reduce number of object instances.\n        \"\"\"\n        def instantiate():\n            return super(Register, cls).__call__(*args, **kwargs)\n    \n        h = cls.__instance_cache\n    \n        if h is None:  # disabled\n            return instantiate()\n    \n        params = cls.get_params()\n        param_values = cls.get_param_values(params, args, kwargs)\n    \n        k = (cls, tuple(param_values))\n    \n        try:\n>           hash(k)",
            "\nluigi/task_register.py:89: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <instance_test.InstanceTest testMethod=test_unhashable_type>\n\n    def test_unhashable_type(self):\n        # See #857\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n    \n>       dummy = DummyTask(x={})\n\ntest/instance_test.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>\nargs = (), kwargs = {'x': {}}\ninstantiate = <function Register.__call__.<locals>.instantiate at 0x105d778b0>\nh = {}, params = [('x', <luigi.parameter.Parameter object at 0x105d76b20>)]\nparam_values = [('x', {})]\nk = (<class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>, (('x', {}),))\n\n    def __call__(cls, *args, **kwargs):\n        \"\"\"\n        Custom class instantiation utilizing instance cache.\n    \n        If a Task has already been instantiated with the same parameters,\n        the previous instance is returned to reduce number of object instances.\n        \"\"\"\n        def instantiate():\n            return super(Register, cls).__call__(*args, **kwargs)\n    \n        h = cls.__instance_cache\n    \n        if h is None:  # disabled\n            return instantiate()\n    \n        params = cls.get_params()\n        param_values = cls.get_param_values(params, args, kwargs)\n    \n        k = (cls, tuple(param_values))\n    \n        try:\n            hash(k)\n        except TypeError:\n>           logger.debug(\"Not all parameter values are hashable so instance isn't coming from the cache\")",
            "\nluigi/task_register.py:91: NameError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}