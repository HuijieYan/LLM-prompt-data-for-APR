{
    "tqdm": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 641,
            "file_name": "_tqdm.py",
            "replace_code": "def __init__(self, iterable=None, desc=None, total=None, leave=True,\n                     file=None, ncols=None, mininterval=0.1, maxinterval=10.0,\n                     miniters=None, ascii=None, disable=False, unit='it',\n                     unit_scale=False, dynamic_ncols=False, smoothing=0.3,\n                     bar_format=None, initial=0, position=None, postfix=None,\n                     unit_divisor=1000, gui=False, **kwargs):\n\n            \"\"\"\n            Parameters\n            ----------\n            iterable  : iterable, optional\n                # ... omitted ...\n            unit_divisor  : float, optional\n                [default: 1000], ignored unless `unit_scale` is True.\n            gui  : bool, optional\n                WARNING: internal parameter - do not use.\n                Use tqdm_gui(...) instead. If set, will attempt to use\n                matplotlib animations for a graphical output [default: False].\n    \n            Returns\n            -------\n            out  : decorated iterator.\n            \"\"\"\n            if file is None:\n                file = sys.stderr\n    \n            if disable is None and hasattr(file, \"isatty\") and not file.isatty():\n                disable = True\n    \n            if disable:\n                self.iterable = iterable\n                self.disable = disable\n                self.pos = self._get_free_pos(cls=self)\n                self._instances.remove(self)\n                self.n = initial\n                return\n    \n            if kwargs:\n                self.disable = True\n                self.pos = self._get_free_pos(cls=self)\n                self._instances.remove(self)\n                raise TypeError(\"\"\"\\\n    `nested` is deprecated and automated. Use position instead for manual control.\n    \"\"\" if \"nested\" in kwargs\n                    else AttributeError(\"Unknown argument(s): \" + str(kwargs)))\n    \n            if total is None and iterable is not None:\n                try:\n                    total = len(iterable)\n                except (TypeError, AttributeError):\n                    total = None\n    \n            if ((ncols is None) and (file in (sys.stderr, sys.stdout))) or \\\n                    dynamic_ncols:\n                if dynamic_ncols:\n                    dynamic_ncols = _environ_cols_wrapper()\n                    if dynamic_ncols:\n                        ncols = dynamic_ncols(file)\n                else:\n                    _dynamic_ncols = _environ_cols_wrapper()\n                    if _dynamic_ncols:\n                        ncols = _dynamic_ncols(file)\n            if miniters is None:\n                miniters = 0\n                dynamic_miniters = True\n            else:\n                dynamic_miniters = False\n    \n            if mininterval is None:\n                mininterval = 0\n    \n            if maxinterval is None:\n                maxinterval = 0\n    \n            if ascii is None:\n                ascii = not _supports_unicode(file)\n    \n            if bar_format and not ascii:\n                bar_format = _unicode(bar_format)\n    \n            if smoothing is None:\n                smoothing = 0\n    \n            self.iterable = iterable\n            self.desc = desc or ''\n            self.total = total\n            self.leave = leave\n            self.fp = file\n            self.ncols = ncols\n            self.mininterval = mininterval\n            self.maxinterval = maxinterval\n            self.miniters = miniters\n            self.dynamic_miniters = dynamic_miniters\n            self.ascii = ascii\n            self.disable = disable\n            self.unit = unit\n            self.unit_scale = unit_scale\n            self.unit_divisor = unit_divisor\n            self.gui = gui\n            self.dynamic_ncols = dynamic_ncols\n            self.smoothing = smoothing\n            self.avg_time = None\n            self._time = time\n            self.bar_format = bar_format\n            self.postfix = None\n            if postfix:\n                try:\n                    self.set_postfix(refresh=False, **postfix)\n                except TypeError:\n                    self.postfix = postfix\n    \n            self.last_print_n = initial\n            self.n = initial\n    \n            with self._lock:\n                if position is None:\n                    self.pos = self._get_free_pos(cls=self)\n                else:\n                    self.pos = -position\n    \n            if not gui:\n                self.sp = self.status_printer(file=self.fp)\n                with self._lock:\n                    if self.pos:\n                        self.moveto(abs(self.pos))\n                    self.sp(self.__repr__(elapsed=0))\n                    if self.pos:\n                        self.moveto(-abs(self.pos))\n    \n            self.last_print_t = self._time()\n            self.start_t = self.last_print_t"
        }
    ]
}