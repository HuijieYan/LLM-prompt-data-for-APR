{
    "tqdm:9": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_9/tqdm/_tqdm.py": {
            "buggy_functions": [
                {
                    "function_name": "format_sizeof",
                    "function_code": "def format_sizeof(num, suffix=''):\n    \"\"\"\n    Formats a number (greater than unity) with SI Order of Magnitude prefixes.\n\n    Parameters\n    ----------\n    num  : float\n        Number ( >= 1) to format.\n    suffix  : str, optional\n        Post-postfix [default: ''].\n\n    Returns\n    -------\n    out  : str\n        Number with Order of Magnitude SI unit postfix.\n    \"\"\"\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(num) < 1000.0:\n            if abs(num) < 100.0:\n                if abs(num) < 10.0:\n                    return '{0:1.2f}'.format(num) + unit + suffix\n                return '{0:2.1f}'.format(num) + unit + suffix\n            return '{0:3.0f}'.format(num) + unit + suffix\n        num /= 1000.0\n    return '{0:3.1f}Y'.format(num) + suffix\n",
                    "decorators": [],
                    "docstring": "Formats a number (greater than unity) with SI Order of Magnitude prefixes.\n\nParameters\n----------\nnum  : float\n    Number ( >= 1) to format.\nsuffix  : str, optional\n    Post-postfix [default: ''].\n\nReturns\n-------\nout  : str\n    Number with Order of Magnitude SI unit postfix.",
                    "start_line": 24,
                    "end_line": 48,
                    "variables": {
                        "unit": [
                            40,
                            44,
                            45,
                            46
                        ],
                        "abs": [
                            41,
                            42,
                            43
                        ],
                        "num": [
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48
                        ],
                        "format": [
                            48,
                            44,
                            45,
                            46
                        ],
                        "suffix": [
                            48,
                            44,
                            45,
                            46
                        ]
                    },
                    "filtered_variables": {
                        "unit": [
                            40,
                            44,
                            45,
                            46
                        ],
                        "num": [
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48
                        ],
                        "suffix": [
                            48,
                            44,
                            45,
                            46
                        ]
                    },
                    "diff_line_number": 41,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "9",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9994",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'K'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "9.994",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'K'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "9.999",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "9",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9994",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'K'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "9.994",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'K'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "9.999",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "99499",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'K'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "99.499",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "99999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'K'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "99.999",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'M'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "0.999999",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'G'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "0.999999999",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'T'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "0.999999999999",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'P'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "0.9999999999999991",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'E'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'Z'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'Z'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "9999999999999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'Z'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "99999999999999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'Z'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "100.00000000000001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "num": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "num": {
                                    "variable_value": "999999999999999999999999999",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "unit": {
                                    "variable_value": "'Z'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "num": {
                                    "variable_value": "1000.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, iterable=None, desc=None, total=None, leave=False,\n             file=sys.stderr, ncols=None, mininterval=0.1,\n             miniters=None, ascii=None, disable=False,\n             unit='it', unit_scale=False, gui=False):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank [default: None] to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar [default: None].\n    total  : int, optional\n        The number of expected iterations. If not given, len(iterable) is\n        used if possible. As a last resort, only basic progress\n        statistics are displayed (no ETA, no progressbar). If `gui` is\n        True and this parameter needs subsequent updating, specify an\n        initial arbitrary large positive integer, e.g. int(9e9).\n    leave  : bool, optional\n        If [default: False], removes all traces of the progressbar\n        upon termination of iteration.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n        methods.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progressbar to stay within this bound\n        [default: None]. The fallback is a meter width of 10 and no\n        limit for the counter and statistics. If 0, will not print any\n        meter (only stats).\n    mininterval  : float, optional\n        Minimum progress update interval, in seconds [default: 0.1].\n    miniters  : int, optional\n        Minimum progress update interval, in iterations [default: None].\n        If specified, will set `mininterval` to 0.\n    ascii  : bool, optional\n        If [default: None] or false, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters `1-9 #`.\n    disable : bool\n        Whether to disable the entire progressbar wrapper [default: False].\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False].\n    gui  : bool, optional\n        If set, will attempt to use matplotlib animations for a\n        graphical output [default: false].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    # Preprocess the arguments\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n\n    if (ncols is None) and (file in (sys.stderr, sys.stdout)):\n        ncols = _environ_cols(file)\n\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n        mininterval = 0\n\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n\n    if gui: # pragma: no cover\n        try:\n            import matplotlib as mpl\n            import matplotlib.pyplot as plt\n            from collections import deque\n        except ImportError:\n            gui = False\n        else:\n            self.mpl = mpl\n            self.plt = plt\n\n    # Store the arguments\n    self.iterable = iterable\n    self.desc = desc+': ' if desc else ''\n    self.total = total\n    self.leave = leave\n    self.file = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.gui = gui\n\n    if gui: # pragma: no cover\n        # Initialize the GUI display\n        if not disable:\n            file.write('Warning: GUI is experimental/alpha\\n')\n\n            # Remember if external environment uses toolbars\n            self.toolbar = self.mpl.rcParams['toolbar']\n            self.mpl.rcParams['toolbar'] = 'None'\n\n            self.mininterval = max(mininterval, 0.5)\n            self.fig, ax = plt.subplots(figsize=(9, 2.2))\n            # self.fig.subplots_adjust(bottom=0.2)\n            if total:\n                self.xdata = []\n                self.ydata = []\n                self.zdata = []\n            else:\n                self.xdata = deque([])\n                self.ydata = deque([])\n                self.zdata = deque([])\n            self.line1, = ax.plot(self.xdata, self.ydata, color='b')\n            self.line2, = ax.plot(self.xdata, self.zdata, color='k')\n            ax.set_ylim(0, 0.001)\n            if total:\n                ax.set_xlim(0, 100)\n                ax.set_xlabel('percent')\n                self.fig.legend((self.line1, self.line2), ('cur', 'est'),\n                                loc='center right')\n                # progressbar\n                self.hspan = plt.axhspan(0, 0.001,\n                                         xmin=0, xmax=0, color='g')\n            else:\n                # ax.set_xlim(-60, 0)\n                ax.set_xlim(0, 60)\n                ax.invert_xaxis()\n                ax.set_xlabel('seconds')\n                ax.legend(('cur', 'est'), loc='lower left')\n            ax.grid()\n            # ax.set_xlabel('seconds')\n            ax.set_ylabel((unit if unit else 'it') + '/s')\n            if unit_scale:\n                plt.ticklabel_format(style='sci', axis='y',\n                                     scilimits=(0, 0))\n                ax.yaxis.get_offset_text().set_x(-0.15)\n\n            # Remember if external environment is interactive\n            self.wasion = plt.isinteractive()\n            plt.ion()\n            self.ax = ax\n    else:\n        # Initialize the screen printer\n        self.sp = StatusPrinter(self.file)\n        if not disable:\n            self.sp(format_meter(\n                0, total, 0, ncols, self.desc, ascii, unit, unit_scale))\n\n    # Init the time/iterations counters\n    self.start_t = self.last_print_t = time()\n    self.last_print_n = 0\n    self.n = 0\n",
                    "decorators": [],
                    "docstring": "Parameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank [default: None] to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar [default: None].\ntotal  : int, optional\n    The number of expected iterations. If not given, len(iterable) is\n    used if possible. As a last resort, only basic progress\n    statistics are displayed (no ETA, no progressbar). If `gui` is\n    True and this parameter needs subsequent updating, specify an\n    initial arbitrary large positive integer, e.g. int(9e9).\nleave  : bool, optional\n    If [default: False], removes all traces of the progressbar\n    upon termination of iteration.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n    methods.\nncols  : int, optional\n    The width of the entire output message. If specified, dynamically\n    resizes the progressbar to stay within this bound\n    [default: None]. The fallback is a meter width of 10 and no\n    limit for the counter and statistics. If 0, will not print any\n    meter (only stats).\nmininterval  : float, optional\n    Minimum progress update interval, in seconds [default: 0.1].\nminiters  : int, optional\n    Minimum progress update interval, in iterations [default: None].\n    If specified, will set `mininterval` to 0.\nascii  : bool, optional\n    If [default: None] or false, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters `1-9 #`.\ndisable : bool\n    Whether to disable the entire progressbar wrapper [default: False].\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: 'it'].\nunit_scale  : bool, optional\n    If set, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False].\ngui  : bool, optional\n    If set, will attempt to use matplotlib animations for a\n    graphical output [default: false].\n\nReturns\n-------\nout  : decorated iterator.",
                    "start_line": 197,
                    "end_line": 360,
                    "variables": {
                        "sys.stderr": [
                            261,
                            198
                        ],
                        "sys": [
                            261,
                            198
                        ],
                        "total": [
                            288,
                            257,
                            259,
                            324,
                            355,
                            313,
                            255
                        ],
                        "iterable": [
                            257,
                            286,
                            255
                        ],
                        "len": [
                            257
                        ],
                        "TypeError": [
                            258
                        ],
                        "AttributeError": [
                            258
                        ],
                        "ncols": [
                            355,
                            291,
                            261,
                            262
                        ],
                        "file": [
                            290,
                            261,
                            262,
                            272,
                            304
                        ],
                        "sys.stdout": [
                            261
                        ],
                        "_environ_cols": [
                            262
                        ],
                        "miniters": [
                            264,
                            265,
                            293
                        ],
                        "dynamic_miniters": [
                            266,
                            268,
                            294
                        ],
                        "mininterval": [
                            292,
                            269,
                            310
                        ],
                        "ascii": [
                            272,
                            355,
                            295,
                            271
                        ],
                        "_supports_unicode": [
                            272
                        ],
                        "gui": [
                            280,
                            274,
                            299,
                            301
                        ],
                        "ImportError": [
                            279
                        ],
                        "self.mpl": [
                            282,
                            307,
                            308
                        ],
                        "self": [
                            282,
                            283,
                            286,
                            287,
                            288,
                            289,
                            290,
                            291,
                            292,
                            293,
                            294,
                            295,
                            296,
                            297,
                            298,
                            299,
                            307,
                            308,
                            310,
                            311,
                            314,
                            315,
                            316,
                            318,
                            319,
                            320,
                            321,
                            322,
                            327,
                            330,
                            347,
                            349,
                            352,
                            354,
                            355,
                            358,
                            359,
                            360
                        ],
                        "mpl": [
                            282
                        ],
                        "self.plt": [
                            283
                        ],
                        "plt": [
                            330,
                            283,
                            342,
                            311,
                            347,
                            348
                        ],
                        "self.iterable": [
                            286
                        ],
                        "self.desc": [
                            355,
                            287
                        ],
                        "desc": [
                            287
                        ],
                        "self.total": [
                            288
                        ],
                        "self.leave": [
                            289
                        ],
                        "leave": [
                            289
                        ],
                        "self.file": [
                            352,
                            290
                        ],
                        "self.ncols": [
                            291
                        ],
                        "self.mininterval": [
                            292,
                            310
                        ],
                        "self.miniters": [
                            293
                        ],
                        "self.dynamic_miniters": [
                            294
                        ],
                        "self.ascii": [
                            295
                        ],
                        "self.disable": [
                            296
                        ],
                        "disable": [
                            296,
                            353,
                            303
                        ],
                        "self.unit": [
                            297
                        ],
                        "unit": [
                            297,
                            355,
                            340
                        ],
                        "self.unit_scale": [
                            298
                        ],
                        "unit_scale": [
                            298,
                            355,
                            341
                        ],
                        "self.gui": [
                            299
                        ],
                        "file.write": [
                            304
                        ],
                        "self.toolbar": [
                            307
                        ],
                        "self.mpl.rcParams": [
                            307,
                            308
                        ],
                        "max": [
                            310
                        ],
                        "self.fig": [
                            327,
                            311
                        ],
                        "ax": [
                            321,
                            322,
                            323,
                            325,
                            326,
                            334,
                            335,
                            336,
                            337,
                            338,
                            340,
                            311,
                            344,
                            349
                        ],
                        "plt.subplots": [
                            311
                        ],
                        "self.xdata": [
                            321,
                            314,
                            322,
                            318
                        ],
                        "self.ydata": [
                            321,
                            315,
                            319
                        ],
                        "self.zdata": [
                            320,
                            322,
                            316
                        ],
                        "deque": [
                            320,
                            318,
                            319
                        ],
                        "self.line1": [
                            321,
                            327
                        ],
                        "ax.plot": [
                            321,
                            322
                        ],
                        "self.line2": [
                            322,
                            327
                        ],
                        "ax.set_ylim": [
                            323
                        ],
                        "ax.set_xlim": [
                            325,
                            334
                        ],
                        "ax.set_xlabel": [
                            336,
                            326
                        ],
                        "self.fig.legend": [
                            327
                        ],
                        "self.hspan": [
                            330
                        ],
                        "plt.axhspan": [
                            330
                        ],
                        "ax.invert_xaxis": [
                            335
                        ],
                        "ax.legend": [
                            337
                        ],
                        "ax.grid": [
                            338
                        ],
                        "ax.set_ylabel": [
                            340
                        ],
                        "plt.ticklabel_format": [
                            342
                        ],
                        "set_x": [
                            344
                        ],
                        "ax.yaxis.get_offset_text": [
                            344
                        ],
                        "ax.yaxis": [
                            344
                        ],
                        "self.wasion": [
                            347
                        ],
                        "plt.isinteractive": [
                            347
                        ],
                        "plt.ion": [
                            348
                        ],
                        "self.ax": [
                            349
                        ],
                        "self.sp": [
                            352,
                            354
                        ],
                        "StatusPrinter": [
                            352
                        ],
                        "format_meter": [
                            354
                        ],
                        "self.start_t": [
                            358
                        ],
                        "self.last_print_t": [
                            358
                        ],
                        "time": [
                            358
                        ],
                        "self.last_print_n": [
                            359
                        ],
                        "self.n": [
                            360
                        ]
                    },
                    "filtered_variables": {
                        "sys.stderr": [
                            261,
                            198
                        ],
                        "sys": [
                            261,
                            198
                        ],
                        "total": [
                            288,
                            257,
                            259,
                            324,
                            355,
                            313,
                            255
                        ],
                        "iterable": [
                            257,
                            286,
                            255
                        ],
                        "ncols": [
                            355,
                            291,
                            261,
                            262
                        ],
                        "file": [
                            290,
                            261,
                            262,
                            272,
                            304
                        ],
                        "sys.stdout": [
                            261
                        ],
                        "_environ_cols": [
                            262
                        ],
                        "miniters": [
                            264,
                            265,
                            293
                        ],
                        "dynamic_miniters": [
                            266,
                            268,
                            294
                        ],
                        "mininterval": [
                            292,
                            269,
                            310
                        ],
                        "_supports_unicode": [
                            272
                        ],
                        "gui": [
                            280,
                            274,
                            299,
                            301
                        ],
                        "self.mpl": [
                            282,
                            307,
                            308
                        ],
                        "self": [
                            282,
                            283,
                            286,
                            287,
                            288,
                            289,
                            290,
                            291,
                            292,
                            293,
                            294,
                            295,
                            296,
                            297,
                            298,
                            299,
                            307,
                            308,
                            310,
                            311,
                            314,
                            315,
                            316,
                            318,
                            319,
                            320,
                            321,
                            322,
                            327,
                            330,
                            347,
                            349,
                            352,
                            354,
                            355,
                            358,
                            359,
                            360
                        ],
                        "mpl": [
                            282
                        ],
                        "self.plt": [
                            283
                        ],
                        "plt": [
                            330,
                            283,
                            342,
                            311,
                            347,
                            348
                        ],
                        "self.iterable": [
                            286
                        ],
                        "self.desc": [
                            355,
                            287
                        ],
                        "desc": [
                            287
                        ],
                        "self.total": [
                            288
                        ],
                        "self.leave": [
                            289
                        ],
                        "leave": [
                            289
                        ],
                        "self.file": [
                            352,
                            290
                        ],
                        "self.ncols": [
                            291
                        ],
                        "self.mininterval": [
                            292,
                            310
                        ],
                        "self.miniters": [
                            293
                        ],
                        "self.dynamic_miniters": [
                            294
                        ],
                        "self.ascii": [
                            295
                        ],
                        "self.disable": [
                            296
                        ],
                        "disable": [
                            296,
                            353,
                            303
                        ],
                        "self.unit": [
                            297
                        ],
                        "unit": [
                            297,
                            355,
                            340
                        ],
                        "self.unit_scale": [
                            298
                        ],
                        "unit_scale": [
                            298,
                            355,
                            341
                        ],
                        "self.gui": [
                            299
                        ],
                        "file.write": [
                            304
                        ],
                        "self.toolbar": [
                            307
                        ],
                        "self.mpl.rcParams": [
                            307,
                            308
                        ],
                        "self.fig": [
                            327,
                            311
                        ],
                        "ax": [
                            321,
                            322,
                            323,
                            325,
                            326,
                            334,
                            335,
                            336,
                            337,
                            338,
                            340,
                            311,
                            344,
                            349
                        ],
                        "plt.subplots": [
                            311
                        ],
                        "self.xdata": [
                            321,
                            314,
                            322,
                            318
                        ],
                        "self.ydata": [
                            321,
                            315,
                            319
                        ],
                        "self.zdata": [
                            320,
                            322,
                            316
                        ],
                        "deque": [
                            320,
                            318,
                            319
                        ],
                        "self.line1": [
                            321,
                            327
                        ],
                        "ax.plot": [
                            321,
                            322
                        ],
                        "self.line2": [
                            322,
                            327
                        ],
                        "ax.set_ylim": [
                            323
                        ],
                        "ax.set_xlim": [
                            325,
                            334
                        ],
                        "ax.set_xlabel": [
                            336,
                            326
                        ],
                        "self.fig.legend": [
                            327
                        ],
                        "self.hspan": [
                            330
                        ],
                        "plt.axhspan": [
                            330
                        ],
                        "ax.invert_xaxis": [
                            335
                        ],
                        "ax.legend": [
                            337
                        ],
                        "ax.grid": [
                            338
                        ],
                        "ax.set_ylabel": [
                            340
                        ],
                        "plt.ticklabel_format": [
                            342
                        ],
                        "set_x": [
                            344
                        ],
                        "ax.yaxis.get_offset_text": [
                            344
                        ],
                        "ax.yaxis": [
                            344
                        ],
                        "self.wasion": [
                            347
                        ],
                        "plt.isinteractive": [
                            347
                        ],
                        "plt.ion": [
                            348
                        ],
                        "self.ax": [
                            349
                        ],
                        "self.sp": [
                            352,
                            354
                        ],
                        "StatusPrinter": [
                            352
                        ],
                        "format_meter": [
                            354
                        ],
                        "self.start_t": [
                            358
                        ],
                        "self.last_print_t": [
                            358
                        ],
                        "time": [
                            358
                        ],
                        "self.last_print_n": [
                            359
                        ],
                        "self.n": [
                            360
                        ]
                    },
                    "diff_line_number": 274,
                    "class_data": {
                        "signature": "class tqdm(object)",
                        "docstring": "Decorate an iterable object, returning an iterator which acts exactly\nlike the orignal iterable, but prints a dynamically updating\nprogressbar every time a value is requested.",
                        "constructor_docstring": "Parameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank [default: None] to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar [default: None].\ntotal  : int, optional\n    The number of expected iterations. If not given, len(iterable) is\n    used if possible. As a last resort, only basic progress\n    statistics are displayed (no ETA, no progressbar). If `gui` is\n    True and this parameter needs subsequent updating, specify an\n    initial arbitrary large positive integer, e.g. int(9e9).\nleave  : bool, optional\n    If [default: False], removes all traces of the progressbar\n    upon termination of iteration.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n    methods.\nncols  : int, optional\n    The width of the entire output message. If specified, dynamically\n    resizes the progressbar to stay within this bound\n    [default: None]. The fallback is a meter width of 10 and no\n    limit for the counter and statistics. If 0, will not print any\n    meter (only stats).\nmininterval  : float, optional\n    Minimum progress update interval, in seconds [default: 0.1].\nminiters  : int, optional\n    Minimum progress update interval, in iterations [default: None].\n    If specified, will set `mininterval` to 0.\nascii  : bool, optional\n    If [default: None] or false, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters `1-9 #`.\ndisable : bool\n    Whether to disable the entire progressbar wrapper [default: False].\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: 'it'].\nunit_scale  : bool, optional\n    If set, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False].\ngui  : bool, optional\n    If set, will attempt to use matplotlib animations for a\n    graphical output [default: false].\n\nReturns\n-------\nout  : decorated iterator.",
                        "functions": [
                            "def __init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank [default: None] to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar [default: None].\n    total  : int, optional\n        The number of expected iterations. If not given, len(iterable) is\n        used if possible. As a last resort, only basic progress\n        statistics are displayed (no ETA, no progressbar). If `gui` is\n        True and this parameter needs subsequent updating, specify an\n        initial arbitrary large positive integer, e.g. int(9e9).\n    leave  : bool, optional\n        If [default: False], removes all traces of the progressbar\n        upon termination of iteration.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n        methods.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progressbar to stay within this bound\n        [default: None]. The fallback is a meter width of 10 and no\n        limit for the counter and statistics. If 0, will not print any\n        meter (only stats).\n    mininterval  : float, optional\n        Minimum progress update interval, in seconds [default: 0.1].\n    miniters  : int, optional\n        Minimum progress update interval, in iterations [default: None].\n        If specified, will set `mininterval` to 0.\n    ascii  : bool, optional\n        If [default: None] or false, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters `1-9 #`.\n    disable : bool\n        Whether to disable the entire progressbar wrapper [default: False].\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False].\n    gui  : bool, optional\n        If set, will attempt to use matplotlib animations for a\n        graphical output [default: false].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n    if ncols is None and file in (sys.stderr, sys.stdout):\n        ncols = _environ_cols(file)\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n        mininterval = 0\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n    if gui:\n        try:\n            import matplotlib as mpl\n            import matplotlib.pyplot as plt\n            from collections import deque\n        except ImportError:\n            gui = False\n        else:\n            self.mpl = mpl\n            self.plt = plt\n    self.iterable = iterable\n    self.desc = desc + ': ' if desc else ''\n    self.total = total\n    self.leave = leave\n    self.file = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.gui = gui\n    if gui:\n        if not disable:\n            file.write('Warning: GUI is experimental/alpha\\n')\n            self.toolbar = self.mpl.rcParams['toolbar']\n            self.mpl.rcParams['toolbar'] = 'None'\n            self.mininterval = max(mininterval, 0.5)\n            self.fig, ax = plt.subplots(figsize=(9, 2.2))\n            if total:\n                self.xdata = []\n                self.ydata = []\n                self.zdata = []\n            else:\n                self.xdata = deque([])\n                self.ydata = deque([])\n                self.zdata = deque([])\n            self.line1, = ax.plot(self.xdata, self.ydata, color='b')\n            self.line2, = ax.plot(self.xdata, self.zdata, color='k')\n            ax.set_ylim(0, 0.001)\n            if total:\n                ax.set_xlim(0, 100)\n                ax.set_xlabel('percent')\n                self.fig.legend((self.line1, self.line2), ('cur', 'est'), loc='center right')\n                self.hspan = plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n            else:\n                ax.set_xlim(0, 60)\n                ax.invert_xaxis()\n                ax.set_xlabel('seconds')\n                ax.legend(('cur', 'est'), loc='lower left')\n            ax.grid()\n            ax.set_ylabel((unit if unit else 'it') + '/s')\n            if unit_scale:\n                plt.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\n                ax.yaxis.get_offset_text().set_x(-0.15)\n            self.wasion = plt.isinteractive()\n            plt.ion()\n            self.ax = ax\n    else:\n        self.sp = StatusPrinter(self.file)\n        if not disable:\n            self.sp(format_meter(0, total, 0, ncols, self.desc, ascii, unit, unit_scale))\n    self.start_t = self.last_print_t = time()\n    self.last_print_n = 0\n    self.n = 0",
                            "def __len__(self):\n    return len(self.iterable)",
                            "def __iter__(self):\n    \"\"\" Backward-compatibility to use: for x in tqdm(iterable) \"\"\"\n    iterable = self.iterable\n    if self.disable:\n        for obj in iterable:\n            yield obj\n    else:\n        ncols = self.ncols\n        mininterval = self.mininterval\n        miniters = self.miniters\n        dynamic_miniters = self.dynamic_miniters\n        unit = self.unit\n        unit_scale = self.unit_scale\n        ascii = self.ascii\n        start_t = self.start_t\n        last_print_t = self.last_print_t\n        last_print_n = self.last_print_n\n        n = self.n\n        gui = self.gui\n        if gui:\n            plt = self.plt\n            ax = self.ax\n            xdata = self.xdata\n            ydata = self.ydata\n            zdata = self.zdata\n            line1 = self.line1\n            line2 = self.line2\n        else:\n            sp = self.sp\n        for obj in iterable:\n            yield obj\n            n += 1\n            delta_it = n - last_print_n\n            if delta_it >= miniters:\n                cur_t = time()\n                delta_t = cur_t - last_print_t\n                if delta_t >= mininterval:\n                    elapsed = cur_t - start_t\n                    if gui:\n                        total = self.total\n                        y = delta_it / delta_t\n                        z = n / elapsed\n                        xdata.append(n * 100.0 / total if total else cur_t)\n                        ydata.append(y)\n                        zdata.append(z)\n                        if not total and elapsed > 66:\n                            xdata.popleft()\n                            ydata.popleft()\n                            zdata.popleft()\n                        ymin, ymax = ax.get_ylim()\n                        if y > ymax or z > ymax:\n                            ymax = 1.1 * y\n                            ax.set_ylim(ymin, ymax)\n                            ax.figure.canvas.draw()\n                        if total:\n                            line1.set_data(xdata, ydata)\n                            line2.set_data(xdata, zdata)\n                            try:\n                                poly_lims = self.hspan.get_xy()\n                            except AttributeError:\n                                self.hspan = plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n                                poly_lims = self.hspan.get_xy()\n                            poly_lims[0, 1] = ymin\n                            poly_lims[1, 1] = ymax\n                            poly_lims[2] = [n / total, ymax]\n                            poly_lims[3] = [poly_lims[2, 0], ymin]\n                            if len(poly_lims) > 4:\n                                poly_lims[4, 1] = ymin\n                            self.hspan.set_xy(poly_lims)\n                        else:\n                            t_ago = [cur_t - i for i in xdata]\n                            line1.set_data(t_ago, ydata)\n                            line2.set_data(t_ago, zdata)\n                        ax.set_title(format_meter(n, total, elapsed, 0, self.desc, ascii, unit, unit_scale), fontname='DejaVu Sans Mono', fontsize=11)\n                        plt.pause(1e-09)\n                    else:\n                        sp(format_meter(n, self.total, elapsed, ncols, self.desc, ascii, unit, unit_scale))\n                    if dynamic_miniters:\n                        miniters = max(miniters, delta_it)\n                    last_print_n = n\n                    last_print_t = cur_t\n        self.last_print_n = last_print_n\n        self.n = n\n        self.close()",
                            "def update(self, n=1):\n    \"\"\"\n    Manually update the progress bar, useful for streams\n    such as reading files.\n    E.g.:\n    >>> t = tqdm(total=filesize) # Initialise\n    >>> for current_buffer in stream:\n    ...    ...\n    ...    t.update(len(current_buffer))\n    >>> t.close()\n    The last line is highly recommended, but possibly not necessary if\n    `t.update()` will be called in such a way that `filesize` will be\n    exactly reached and printed.\n\n    Parameters\n    ----------\n    n  : int\n        Increment to add to the internal counter of iterations\n        [default: 1].\n    \"\"\"\n    if self.disable:\n        return\n    if n < 1:\n        n = 1\n    self.n += n\n    delta_it = self.n - self.last_print_n\n    if delta_it >= self.miniters:\n        cur_t = time()\n        delta_t = cur_t - self.last_print_t\n        if delta_t >= self.mininterval:\n            elapsed = cur_t - self.start_t\n            if self.gui:\n                total = self.total\n                ax = self.ax\n                y = delta_it / delta_t\n                z = self.n / elapsed\n                self.xdata.append(self.n * 100.0 / total if total else cur_t)\n                self.ydata.append(y)\n                self.zdata.append(z)\n                if not total and elapsed > 66:\n                    self.xdata.popleft()\n                    self.ydata.popleft()\n                    self.zdata.popleft()\n                ymin, ymax = ax.get_ylim()\n                if y > ymax or z > ymax:\n                    ymax = 1.1 * y\n                    ax.set_ylim(ymin, ymax)\n                    ax.figure.canvas.draw()\n                if total:\n                    self.line1.set_data(self.xdata, self.ydata)\n                    self.line2.set_data(self.xdata, self.zdata)\n                    try:\n                        poly_lims = self.hspan.get_xy()\n                    except AttributeError:\n                        self.hspan = self.plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n                        poly_lims = self.hspan.get_xy()\n                    poly_lims[0, 1] = ymin\n                    poly_lims[1, 1] = ymax\n                    poly_lims[2] = [self.n / total, ymax]\n                    poly_lims[3] = [poly_lims[2, 0], ymin]\n                    if len(poly_lims) > 4:\n                        poly_lims[4, 1] = ymin\n                    self.hspan.set_xy(poly_lims)\n                else:\n                    t_ago = [cur_t - i for i in self.xdata]\n                    self.line1.set_data(t_ago, self.ydata)\n                    self.line2.set_data(t_ago, self.zdata)\n                ax.set_title(format_meter(self.n, total, elapsed, 0, self.desc, self.ascii, self.unit, self.unit_scale), fontname='DejaVu Sans Mono', fontsize=11)\n                self.plt.pause(1e-09)\n            else:\n                self.sp(format_meter(self.n, self.total, elapsed, self.ncols, self.desc, self.ascii, self.unit, self.unit_scale))\n            if self.dynamic_miniters:\n                self.miniters = max(self.miniters, delta_it)\n            self.last_print_n = self.n\n            self.last_print_t = cur_t",
                            "def close(self):\n    \"\"\"\n    Cleanup and (if leave=False) close the progressbar.\n    \"\"\"\n    if self.disable:\n        return\n    if self.gui:\n        self.mpl.rcParams['toolbar'] = self.toolbar\n        if not self.wasion:\n            self.plt.ioff()\n        if not self.leave:\n            self.plt.close(self.fig)\n    elif self.leave:\n        if self.last_print_n < self.n:\n            cur_t = time()\n            self.sp(format_meter(self.n, self.total, cur_t - self.start_t, self.ncols, self.desc, self.ascii, self.unit, self.unit_scale))\n        self.file.write('\\n')\n    else:\n        self.sp('')\n        self.file.write('\\r')"
                        ],
                        "constructor_variables": [
                            "zdata",
                            "mininterval",
                            "miniters",
                            "disable",
                            "plt",
                            "unit_scale",
                            "ascii",
                            "iterable",
                            "unit",
                            "ncols",
                            "file",
                            "gui",
                            "leave",
                            "wasion",
                            "ydata",
                            "sp",
                            "last_print_t",
                            "last_print_n",
                            "n",
                            "desc",
                            "ax",
                            "hspan",
                            "total",
                            "toolbar",
                            "dynamic_miniters",
                            "mpl",
                            "start_t",
                            "xdata"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False)",
                            "__len__(self)",
                            "__iter__(self)",
                            "update(self, n=1)",
                            "close(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "__len__",
                    "function_code": "def __len__(self):\n    return len(self.iterable)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 362,
                    "end_line": 363,
                    "variables": {
                        "len": [
                            363
                        ],
                        "self.iterable": [
                            363
                        ],
                        "self": [
                            363
                        ]
                    },
                    "filtered_variables": {
                        "self.iterable": [
                            363
                        ],
                        "self": [
                            363
                        ]
                    },
                    "diff_line_number": 363,
                    "class_data": {
                        "signature": "class tqdm(object)",
                        "docstring": "Decorate an iterable object, returning an iterator which acts exactly\nlike the orignal iterable, but prints a dynamically updating\nprogressbar every time a value is requested.",
                        "constructor_docstring": "Parameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank [default: None] to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar [default: None].\ntotal  : int, optional\n    The number of expected iterations. If not given, len(iterable) is\n    used if possible. As a last resort, only basic progress\n    statistics are displayed (no ETA, no progressbar). If `gui` is\n    True and this parameter needs subsequent updating, specify an\n    initial arbitrary large positive integer, e.g. int(9e9).\nleave  : bool, optional\n    If [default: False], removes all traces of the progressbar\n    upon termination of iteration.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n    methods.\nncols  : int, optional\n    The width of the entire output message. If specified, dynamically\n    resizes the progressbar to stay within this bound\n    [default: None]. The fallback is a meter width of 10 and no\n    limit for the counter and statistics. If 0, will not print any\n    meter (only stats).\nmininterval  : float, optional\n    Minimum progress update interval, in seconds [default: 0.1].\nminiters  : int, optional\n    Minimum progress update interval, in iterations [default: None].\n    If specified, will set `mininterval` to 0.\nascii  : bool, optional\n    If [default: None] or false, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters `1-9 #`.\ndisable : bool\n    Whether to disable the entire progressbar wrapper [default: False].\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: 'it'].\nunit_scale  : bool, optional\n    If set, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False].\ngui  : bool, optional\n    If set, will attempt to use matplotlib animations for a\n    graphical output [default: false].\n\nReturns\n-------\nout  : decorated iterator.",
                        "functions": [
                            "def __init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank [default: None] to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar [default: None].\n    total  : int, optional\n        The number of expected iterations. If not given, len(iterable) is\n        used if possible. As a last resort, only basic progress\n        statistics are displayed (no ETA, no progressbar). If `gui` is\n        True and this parameter needs subsequent updating, specify an\n        initial arbitrary large positive integer, e.g. int(9e9).\n    leave  : bool, optional\n        If [default: False], removes all traces of the progressbar\n        upon termination of iteration.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n        methods.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progressbar to stay within this bound\n        [default: None]. The fallback is a meter width of 10 and no\n        limit for the counter and statistics. If 0, will not print any\n        meter (only stats).\n    mininterval  : float, optional\n        Minimum progress update interval, in seconds [default: 0.1].\n    miniters  : int, optional\n        Minimum progress update interval, in iterations [default: None].\n        If specified, will set `mininterval` to 0.\n    ascii  : bool, optional\n        If [default: None] or false, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters `1-9 #`.\n    disable : bool\n        Whether to disable the entire progressbar wrapper [default: False].\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False].\n    gui  : bool, optional\n        If set, will attempt to use matplotlib animations for a\n        graphical output [default: false].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n    if ncols is None and file in (sys.stderr, sys.stdout):\n        ncols = _environ_cols(file)\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n        mininterval = 0\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n    if gui:\n        try:\n            import matplotlib as mpl\n            import matplotlib.pyplot as plt\n            from collections import deque\n        except ImportError:\n            gui = False\n        else:\n            self.mpl = mpl\n            self.plt = plt\n    self.iterable = iterable\n    self.desc = desc + ': ' if desc else ''\n    self.total = total\n    self.leave = leave\n    self.file = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.gui = gui\n    if gui:\n        if not disable:\n            file.write('Warning: GUI is experimental/alpha\\n')\n            self.toolbar = self.mpl.rcParams['toolbar']\n            self.mpl.rcParams['toolbar'] = 'None'\n            self.mininterval = max(mininterval, 0.5)\n            self.fig, ax = plt.subplots(figsize=(9, 2.2))\n            if total:\n                self.xdata = []\n                self.ydata = []\n                self.zdata = []\n            else:\n                self.xdata = deque([])\n                self.ydata = deque([])\n                self.zdata = deque([])\n            self.line1, = ax.plot(self.xdata, self.ydata, color='b')\n            self.line2, = ax.plot(self.xdata, self.zdata, color='k')\n            ax.set_ylim(0, 0.001)\n            if total:\n                ax.set_xlim(0, 100)\n                ax.set_xlabel('percent')\n                self.fig.legend((self.line1, self.line2), ('cur', 'est'), loc='center right')\n                self.hspan = plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n            else:\n                ax.set_xlim(0, 60)\n                ax.invert_xaxis()\n                ax.set_xlabel('seconds')\n                ax.legend(('cur', 'est'), loc='lower left')\n            ax.grid()\n            ax.set_ylabel((unit if unit else 'it') + '/s')\n            if unit_scale:\n                plt.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\n                ax.yaxis.get_offset_text().set_x(-0.15)\n            self.wasion = plt.isinteractive()\n            plt.ion()\n            self.ax = ax\n    else:\n        self.sp = StatusPrinter(self.file)\n        if not disable:\n            self.sp(format_meter(0, total, 0, ncols, self.desc, ascii, unit, unit_scale))\n    self.start_t = self.last_print_t = time()\n    self.last_print_n = 0\n    self.n = 0",
                            "def __len__(self):\n    return len(self.iterable)",
                            "def __iter__(self):\n    \"\"\" Backward-compatibility to use: for x in tqdm(iterable) \"\"\"\n    iterable = self.iterable\n    if self.disable:\n        for obj in iterable:\n            yield obj\n    else:\n        ncols = self.ncols\n        mininterval = self.mininterval\n        miniters = self.miniters\n        dynamic_miniters = self.dynamic_miniters\n        unit = self.unit\n        unit_scale = self.unit_scale\n        ascii = self.ascii\n        start_t = self.start_t\n        last_print_t = self.last_print_t\n        last_print_n = self.last_print_n\n        n = self.n\n        gui = self.gui\n        if gui:\n            plt = self.plt\n            ax = self.ax\n            xdata = self.xdata\n            ydata = self.ydata\n            zdata = self.zdata\n            line1 = self.line1\n            line2 = self.line2\n        else:\n            sp = self.sp\n        for obj in iterable:\n            yield obj\n            n += 1\n            delta_it = n - last_print_n\n            if delta_it >= miniters:\n                cur_t = time()\n                delta_t = cur_t - last_print_t\n                if delta_t >= mininterval:\n                    elapsed = cur_t - start_t\n                    if gui:\n                        total = self.total\n                        y = delta_it / delta_t\n                        z = n / elapsed\n                        xdata.append(n * 100.0 / total if total else cur_t)\n                        ydata.append(y)\n                        zdata.append(z)\n                        if not total and elapsed > 66:\n                            xdata.popleft()\n                            ydata.popleft()\n                            zdata.popleft()\n                        ymin, ymax = ax.get_ylim()\n                        if y > ymax or z > ymax:\n                            ymax = 1.1 * y\n                            ax.set_ylim(ymin, ymax)\n                            ax.figure.canvas.draw()\n                        if total:\n                            line1.set_data(xdata, ydata)\n                            line2.set_data(xdata, zdata)\n                            try:\n                                poly_lims = self.hspan.get_xy()\n                            except AttributeError:\n                                self.hspan = plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n                                poly_lims = self.hspan.get_xy()\n                            poly_lims[0, 1] = ymin\n                            poly_lims[1, 1] = ymax\n                            poly_lims[2] = [n / total, ymax]\n                            poly_lims[3] = [poly_lims[2, 0], ymin]\n                            if len(poly_lims) > 4:\n                                poly_lims[4, 1] = ymin\n                            self.hspan.set_xy(poly_lims)\n                        else:\n                            t_ago = [cur_t - i for i in xdata]\n                            line1.set_data(t_ago, ydata)\n                            line2.set_data(t_ago, zdata)\n                        ax.set_title(format_meter(n, total, elapsed, 0, self.desc, ascii, unit, unit_scale), fontname='DejaVu Sans Mono', fontsize=11)\n                        plt.pause(1e-09)\n                    else:\n                        sp(format_meter(n, self.total, elapsed, ncols, self.desc, ascii, unit, unit_scale))\n                    if dynamic_miniters:\n                        miniters = max(miniters, delta_it)\n                    last_print_n = n\n                    last_print_t = cur_t\n        self.last_print_n = last_print_n\n        self.n = n\n        self.close()",
                            "def update(self, n=1):\n    \"\"\"\n    Manually update the progress bar, useful for streams\n    such as reading files.\n    E.g.:\n    >>> t = tqdm(total=filesize) # Initialise\n    >>> for current_buffer in stream:\n    ...    ...\n    ...    t.update(len(current_buffer))\n    >>> t.close()\n    The last line is highly recommended, but possibly not necessary if\n    `t.update()` will be called in such a way that `filesize` will be\n    exactly reached and printed.\n\n    Parameters\n    ----------\n    n  : int\n        Increment to add to the internal counter of iterations\n        [default: 1].\n    \"\"\"\n    if self.disable:\n        return\n    if n < 1:\n        n = 1\n    self.n += n\n    delta_it = self.n - self.last_print_n\n    if delta_it >= self.miniters:\n        cur_t = time()\n        delta_t = cur_t - self.last_print_t\n        if delta_t >= self.mininterval:\n            elapsed = cur_t - self.start_t\n            if self.gui:\n                total = self.total\n                ax = self.ax\n                y = delta_it / delta_t\n                z = self.n / elapsed\n                self.xdata.append(self.n * 100.0 / total if total else cur_t)\n                self.ydata.append(y)\n                self.zdata.append(z)\n                if not total and elapsed > 66:\n                    self.xdata.popleft()\n                    self.ydata.popleft()\n                    self.zdata.popleft()\n                ymin, ymax = ax.get_ylim()\n                if y > ymax or z > ymax:\n                    ymax = 1.1 * y\n                    ax.set_ylim(ymin, ymax)\n                    ax.figure.canvas.draw()\n                if total:\n                    self.line1.set_data(self.xdata, self.ydata)\n                    self.line2.set_data(self.xdata, self.zdata)\n                    try:\n                        poly_lims = self.hspan.get_xy()\n                    except AttributeError:\n                        self.hspan = self.plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n                        poly_lims = self.hspan.get_xy()\n                    poly_lims[0, 1] = ymin\n                    poly_lims[1, 1] = ymax\n                    poly_lims[2] = [self.n / total, ymax]\n                    poly_lims[3] = [poly_lims[2, 0], ymin]\n                    if len(poly_lims) > 4:\n                        poly_lims[4, 1] = ymin\n                    self.hspan.set_xy(poly_lims)\n                else:\n                    t_ago = [cur_t - i for i in self.xdata]\n                    self.line1.set_data(t_ago, self.ydata)\n                    self.line2.set_data(t_ago, self.zdata)\n                ax.set_title(format_meter(self.n, total, elapsed, 0, self.desc, self.ascii, self.unit, self.unit_scale), fontname='DejaVu Sans Mono', fontsize=11)\n                self.plt.pause(1e-09)\n            else:\n                self.sp(format_meter(self.n, self.total, elapsed, self.ncols, self.desc, self.ascii, self.unit, self.unit_scale))\n            if self.dynamic_miniters:\n                self.miniters = max(self.miniters, delta_it)\n            self.last_print_n = self.n\n            self.last_print_t = cur_t",
                            "def close(self):\n    \"\"\"\n    Cleanup and (if leave=False) close the progressbar.\n    \"\"\"\n    if self.disable:\n        return\n    if self.gui:\n        self.mpl.rcParams['toolbar'] = self.toolbar\n        if not self.wasion:\n            self.plt.ioff()\n        if not self.leave:\n            self.plt.close(self.fig)\n    elif self.leave:\n        if self.last_print_n < self.n:\n            cur_t = time()\n            self.sp(format_meter(self.n, self.total, cur_t - self.start_t, self.ncols, self.desc, self.ascii, self.unit, self.unit_scale))\n        self.file.write('\\n')\n    else:\n        self.sp('')\n        self.file.write('\\r')"
                        ],
                        "constructor_variables": [
                            "zdata",
                            "mininterval",
                            "miniters",
                            "disable",
                            "plt",
                            "unit_scale",
                            "ascii",
                            "iterable",
                            "unit",
                            "ncols",
                            "file",
                            "gui",
                            "leave",
                            "wasion",
                            "ydata",
                            "sp",
                            "last_print_t",
                            "last_print_n",
                            "n",
                            "desc",
                            "ax",
                            "hspan",
                            "total",
                            "toolbar",
                            "dynamic_miniters",
                            "mpl",
                            "start_t",
                            "xdata"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False)",
                            "__len__(self)",
                            "__iter__(self)",
                            "update(self, n=1)",
                            "close(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "__iter__",
                    "function_code": "def __iter__(self):\n    ''' Backward-compatibility to use: for x in tqdm(iterable) '''\n\n    # Inlining instance variables as locals (speed optimisation)\n    iterable = self.iterable\n\n    # If the bar is disabled, then just walk the iterable\n    # (note: keep this check outside the loop for performance)\n    if self.disable:\n        for obj in iterable:\n            yield obj\n    else:\n        ncols = self.ncols\n        mininterval = self.mininterval\n        miniters = self.miniters\n        dynamic_miniters = self.dynamic_miniters\n        unit = self.unit\n        unit_scale = self.unit_scale\n        ascii = self.ascii\n        start_t = self.start_t\n        last_print_t = self.last_print_t\n        last_print_n = self.last_print_n\n        n = self.n\n        gui = self.gui\n        if gui: # pragma: no cover\n            plt = self.plt\n            ax = self.ax\n            xdata = self.xdata\n            ydata = self.ydata\n            zdata = self.zdata\n            line1 = self.line1\n            line2 = self.line2\n        else:\n            sp = self.sp\n\n        for obj in iterable:\n            yield obj\n            # Update and print the progressbar.\n            # Note: does not call self.update(1) for speed optimisation.\n            n += 1\n            delta_it = n - last_print_n\n            # check the counter first (avoid calls to time())\n            if delta_it >= miniters:\n                cur_t = time()\n                delta_t = cur_t - last_print_t\n                if delta_t >= mininterval:\n                    elapsed = cur_t - start_t\n                    if gui: # pragma: no cover\n                        # Inline due to multiple calls\n                        total = self.total\n                        # instantaneous rate\n                        y = delta_it / delta_t\n                        # smoothed rate\n                        z = n / elapsed\n                        # update line data\n                        xdata.append(n * 100.0 / total if total else cur_t)\n                        ydata.append(y)\n                        zdata.append(z)\n\n                        # Discard old values\n                        # xmin, xmax = ax.get_xlim()\n                        # if (not total) and elapsed > xmin * 1.1:\n                        if (not total) and elapsed > 66:\n                            xdata.popleft()\n                            ydata.popleft()\n                            zdata.popleft()\n\n                        ymin, ymax = ax.get_ylim()\n                        if y > ymax or z > ymax:\n                            ymax = 1.1 * y\n                            ax.set_ylim(ymin, ymax)\n                            ax.figure.canvas.draw()\n\n                        if total:\n                            line1.set_data(xdata, ydata)\n                            line2.set_data(xdata, zdata)\n                            try:\n                                poly_lims = self.hspan.get_xy()\n                            except AttributeError:\n                                self.hspan = plt.axhspan(0, 0.001, xmin=0,\n                                                         xmax=0, color='g')\n                                poly_lims = self.hspan.get_xy()\n                            poly_lims[0, 1] = ymin\n                            poly_lims[1, 1] = ymax\n                            poly_lims[2] = [n / total, ymax]\n                            poly_lims[3] = [poly_lims[2, 0], ymin]\n                            if len(poly_lims) > 4:\n                                poly_lims[4, 1] = ymin\n                            self.hspan.set_xy(poly_lims)\n                        else:\n                            t_ago = [cur_t - i for i in xdata]\n                            line1.set_data(t_ago, ydata)\n                            line2.set_data(t_ago, zdata)\n\n                        ax.set_title(format_meter(\n                            n, total, elapsed, 0,\n                            self.desc, ascii, unit, unit_scale),\n                            fontname=\"DejaVu Sans Mono\",\n                            fontsize=11)\n                        plt.pause(1e-9)\n                    else:\n                        sp(format_meter(\n                            n, self.total, elapsed, ncols,\n                            self.desc, ascii, unit, unit_scale))\n\n                    if dynamic_miniters:\n                        miniters = max(miniters, delta_it)\n                    last_print_n = n\n                    last_print_t = cur_t\n        # Closing the progress bar.\n        # Update some internal variables for close().\n        self.last_print_n = last_print_n\n        self.n = n\n        self.close()\n",
                    "decorators": [],
                    "docstring": "Backward-compatibility to use: for x in tqdm(iterable) ",
                    "start_line": 365,
                    "end_line": 478,
                    "variables": {
                        "iterable": [
                            400,
                            369,
                            374
                        ],
                        "self.iterable": [
                            369
                        ],
                        "self": [
                            384,
                            385,
                            386,
                            387,
                            388,
                            390,
                            391,
                            392,
                            393,
                            394,
                            395,
                            396,
                            398,
                            414,
                            442,
                            444,
                            446,
                            453,
                            461,
                            467,
                            468,
                            476,
                            477,
                            478,
                            369,
                            373,
                            377,
                            378,
                            379,
                            380,
                            381,
                            382,
                            383
                        ],
                        "self.disable": [
                            373
                        ],
                        "obj": [
                            400,
                            401,
                            374,
                            375
                        ],
                        "ncols": [
                            377,
                            467
                        ],
                        "self.ncols": [
                            377
                        ],
                        "mininterval": [
                            378,
                            410
                        ],
                        "self.mininterval": [
                            378
                        ],
                        "miniters": [
                            471,
                            379,
                            407
                        ],
                        "self.miniters": [
                            379
                        ],
                        "dynamic_miniters": [
                            380,
                            470
                        ],
                        "self.dynamic_miniters": [
                            380
                        ],
                        "unit": [
                            461,
                            468,
                            381
                        ],
                        "self.unit": [
                            381
                        ],
                        "unit_scale": [
                            468,
                            461,
                            382
                        ],
                        "self.unit_scale": [
                            382
                        ],
                        "ascii": [
                            468,
                            461,
                            383
                        ],
                        "self.ascii": [
                            383
                        ],
                        "start_t": [
                            384,
                            411
                        ],
                        "self.start_t": [
                            384
                        ],
                        "last_print_t": [
                            385,
                            409,
                            473
                        ],
                        "self.last_print_t": [
                            385
                        ],
                        "last_print_n": [
                            472,
                            386,
                            476,
                            405
                        ],
                        "self.last_print_n": [
                            386,
                            476
                        ],
                        "n": [
                            449,
                            418,
                            387,
                            420,
                            460,
                            467,
                            404,
                            405,
                            472,
                            477
                        ],
                        "self.n": [
                            387,
                            477
                        ],
                        "gui": [
                            412,
                            388,
                            389
                        ],
                        "self.gui": [
                            388
                        ],
                        "plt": [
                            464,
                            444,
                            390
                        ],
                        "self.plt": [
                            390
                        ],
                        "ax": [
                            391,
                            459,
                            432,
                            435,
                            436
                        ],
                        "self.ax": [
                            391
                        ],
                        "xdata": [
                            420,
                            455,
                            392,
                            428,
                            439,
                            440
                        ],
                        "self.xdata": [
                            392
                        ],
                        "ydata": [
                            421,
                            456,
                            393,
                            429,
                            439
                        ],
                        "self.ydata": [
                            393
                        ],
                        "zdata": [
                            422,
                            457,
                            394,
                            430,
                            440
                        ],
                        "self.zdata": [
                            394
                        ],
                        "line1": [
                            456,
                            395,
                            439
                        ],
                        "self.line1": [
                            395
                        ],
                        "line2": [
                            440,
                            457,
                            396
                        ],
                        "self.line2": [
                            396
                        ],
                        "sp": [
                            466,
                            398
                        ],
                        "self.sp": [
                            398
                        ],
                        "delta_it": [
                            416,
                            471,
                            405,
                            407
                        ],
                        "cur_t": [
                            420,
                            455,
                            473,
                            408,
                            409,
                            411
                        ],
                        "time": [
                            408
                        ],
                        "delta_t": [
                            416,
                            409,
                            410
                        ],
                        "elapsed": [
                            418,
                            427,
                            460,
                            467,
                            411
                        ],
                        "total": [
                            449,
                            420,
                            427,
                            460,
                            438,
                            414
                        ],
                        "self.total": [
                            467,
                            414
                        ],
                        "y": [
                            416,
                            433,
                            434,
                            421
                        ],
                        "z": [
                            433,
                            418,
                            422
                        ],
                        "xdata.append": [
                            420
                        ],
                        "ydata.append": [
                            421
                        ],
                        "zdata.append": [
                            422
                        ],
                        "xdata.popleft": [
                            428
                        ],
                        "ydata.popleft": [
                            429
                        ],
                        "zdata.popleft": [
                            430
                        ],
                        "ymin": [
                            450,
                            452,
                            432,
                            435,
                            447
                        ],
                        "ymax": [
                            448,
                            449,
                            432,
                            433,
                            434,
                            435
                        ],
                        "ax.get_ylim": [
                            432
                        ],
                        "ax.set_ylim": [
                            435
                        ],
                        "ax.figure.canvas.draw": [
                            436
                        ],
                        "ax.figure.canvas": [
                            436
                        ],
                        "ax.figure": [
                            436
                        ],
                        "line1.set_data": [
                            456,
                            439
                        ],
                        "line2.set_data": [
                            440,
                            457
                        ],
                        "poly_lims": [
                            448,
                            449,
                            450,
                            451,
                            452,
                            453,
                            442,
                            446,
                            447
                        ],
                        "self.hspan.get_xy": [
                            442,
                            446
                        ],
                        "self.hspan": [
                            442,
                            444,
                            453,
                            446
                        ],
                        "AttributeError": [
                            443
                        ],
                        "plt.axhspan": [
                            444
                        ],
                        "len": [
                            451
                        ],
                        "self.hspan.set_xy": [
                            453
                        ],
                        "t_ago": [
                            456,
                            457,
                            455
                        ],
                        "i": [
                            455
                        ],
                        "ax.set_title": [
                            459
                        ],
                        "format_meter": [
                            466,
                            459
                        ],
                        "self.desc": [
                            468,
                            461
                        ],
                        "plt.pause": [
                            464
                        ],
                        "max": [
                            471
                        ],
                        "self.close": [
                            478
                        ]
                    },
                    "filtered_variables": {
                        "iterable": [
                            400,
                            369,
                            374
                        ],
                        "self.iterable": [
                            369
                        ],
                        "self": [
                            384,
                            385,
                            386,
                            387,
                            388,
                            390,
                            391,
                            392,
                            393,
                            394,
                            395,
                            396,
                            398,
                            414,
                            442,
                            444,
                            446,
                            453,
                            461,
                            467,
                            468,
                            476,
                            477,
                            478,
                            369,
                            373,
                            377,
                            378,
                            379,
                            380,
                            381,
                            382,
                            383
                        ],
                        "self.disable": [
                            373
                        ],
                        "obj": [
                            400,
                            401,
                            374,
                            375
                        ],
                        "ncols": [
                            377,
                            467
                        ],
                        "self.ncols": [
                            377
                        ],
                        "mininterval": [
                            378,
                            410
                        ],
                        "self.mininterval": [
                            378
                        ],
                        "miniters": [
                            471,
                            379,
                            407
                        ],
                        "self.miniters": [
                            379
                        ],
                        "dynamic_miniters": [
                            380,
                            470
                        ],
                        "self.dynamic_miniters": [
                            380
                        ],
                        "unit": [
                            461,
                            468,
                            381
                        ],
                        "self.unit": [
                            381
                        ],
                        "unit_scale": [
                            468,
                            461,
                            382
                        ],
                        "self.unit_scale": [
                            382
                        ],
                        "self.ascii": [
                            383
                        ],
                        "start_t": [
                            384,
                            411
                        ],
                        "self.start_t": [
                            384
                        ],
                        "last_print_t": [
                            385,
                            409,
                            473
                        ],
                        "self.last_print_t": [
                            385
                        ],
                        "last_print_n": [
                            472,
                            386,
                            476,
                            405
                        ],
                        "self.last_print_n": [
                            386,
                            476
                        ],
                        "n": [
                            449,
                            418,
                            387,
                            420,
                            460,
                            467,
                            404,
                            405,
                            472,
                            477
                        ],
                        "self.n": [
                            387,
                            477
                        ],
                        "gui": [
                            412,
                            388,
                            389
                        ],
                        "self.gui": [
                            388
                        ],
                        "plt": [
                            464,
                            444,
                            390
                        ],
                        "self.plt": [
                            390
                        ],
                        "ax": [
                            391,
                            459,
                            432,
                            435,
                            436
                        ],
                        "self.ax": [
                            391
                        ],
                        "xdata": [
                            420,
                            455,
                            392,
                            428,
                            439,
                            440
                        ],
                        "self.xdata": [
                            392
                        ],
                        "ydata": [
                            421,
                            456,
                            393,
                            429,
                            439
                        ],
                        "self.ydata": [
                            393
                        ],
                        "zdata": [
                            422,
                            457,
                            394,
                            430,
                            440
                        ],
                        "self.zdata": [
                            394
                        ],
                        "line1": [
                            456,
                            395,
                            439
                        ],
                        "self.line1": [
                            395
                        ],
                        "line2": [
                            440,
                            457,
                            396
                        ],
                        "self.line2": [
                            396
                        ],
                        "sp": [
                            466,
                            398
                        ],
                        "self.sp": [
                            398
                        ],
                        "delta_it": [
                            416,
                            471,
                            405,
                            407
                        ],
                        "cur_t": [
                            420,
                            455,
                            473,
                            408,
                            409,
                            411
                        ],
                        "time": [
                            408
                        ],
                        "delta_t": [
                            416,
                            409,
                            410
                        ],
                        "elapsed": [
                            418,
                            427,
                            460,
                            467,
                            411
                        ],
                        "total": [
                            449,
                            420,
                            427,
                            460,
                            438,
                            414
                        ],
                        "self.total": [
                            467,
                            414
                        ],
                        "y": [
                            416,
                            433,
                            434,
                            421
                        ],
                        "z": [
                            433,
                            418,
                            422
                        ],
                        "xdata.append": [
                            420
                        ],
                        "ydata.append": [
                            421
                        ],
                        "zdata.append": [
                            422
                        ],
                        "xdata.popleft": [
                            428
                        ],
                        "ydata.popleft": [
                            429
                        ],
                        "zdata.popleft": [
                            430
                        ],
                        "ymin": [
                            450,
                            452,
                            432,
                            435,
                            447
                        ],
                        "ymax": [
                            448,
                            449,
                            432,
                            433,
                            434,
                            435
                        ],
                        "ax.get_ylim": [
                            432
                        ],
                        "ax.set_ylim": [
                            435
                        ],
                        "ax.figure.canvas.draw": [
                            436
                        ],
                        "ax.figure.canvas": [
                            436
                        ],
                        "ax.figure": [
                            436
                        ],
                        "line1.set_data": [
                            456,
                            439
                        ],
                        "line2.set_data": [
                            440,
                            457
                        ],
                        "poly_lims": [
                            448,
                            449,
                            450,
                            451,
                            452,
                            453,
                            442,
                            446,
                            447
                        ],
                        "self.hspan.get_xy": [
                            442,
                            446
                        ],
                        "self.hspan": [
                            442,
                            444,
                            453,
                            446
                        ],
                        "plt.axhspan": [
                            444
                        ],
                        "self.hspan.set_xy": [
                            453
                        ],
                        "t_ago": [
                            456,
                            457,
                            455
                        ],
                        "i": [
                            455
                        ],
                        "ax.set_title": [
                            459
                        ],
                        "format_meter": [
                            466,
                            459
                        ],
                        "self.desc": [
                            468,
                            461
                        ],
                        "plt.pause": [
                            464
                        ],
                        "self.close": [
                            478
                        ]
                    },
                    "diff_line_number": 389,
                    "class_data": {
                        "signature": "class tqdm(object)",
                        "docstring": "Decorate an iterable object, returning an iterator which acts exactly\nlike the orignal iterable, but prints a dynamically updating\nprogressbar every time a value is requested.",
                        "constructor_docstring": "Parameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank [default: None] to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar [default: None].\ntotal  : int, optional\n    The number of expected iterations. If not given, len(iterable) is\n    used if possible. As a last resort, only basic progress\n    statistics are displayed (no ETA, no progressbar). If `gui` is\n    True and this parameter needs subsequent updating, specify an\n    initial arbitrary large positive integer, e.g. int(9e9).\nleave  : bool, optional\n    If [default: False], removes all traces of the progressbar\n    upon termination of iteration.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n    methods.\nncols  : int, optional\n    The width of the entire output message. If specified, dynamically\n    resizes the progressbar to stay within this bound\n    [default: None]. The fallback is a meter width of 10 and no\n    limit for the counter and statistics. If 0, will not print any\n    meter (only stats).\nmininterval  : float, optional\n    Minimum progress update interval, in seconds [default: 0.1].\nminiters  : int, optional\n    Minimum progress update interval, in iterations [default: None].\n    If specified, will set `mininterval` to 0.\nascii  : bool, optional\n    If [default: None] or false, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters `1-9 #`.\ndisable : bool\n    Whether to disable the entire progressbar wrapper [default: False].\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: 'it'].\nunit_scale  : bool, optional\n    If set, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False].\ngui  : bool, optional\n    If set, will attempt to use matplotlib animations for a\n    graphical output [default: false].\n\nReturns\n-------\nout  : decorated iterator.",
                        "functions": [
                            "def __init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank [default: None] to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar [default: None].\n    total  : int, optional\n        The number of expected iterations. If not given, len(iterable) is\n        used if possible. As a last resort, only basic progress\n        statistics are displayed (no ETA, no progressbar). If `gui` is\n        True and this parameter needs subsequent updating, specify an\n        initial arbitrary large positive integer, e.g. int(9e9).\n    leave  : bool, optional\n        If [default: False], removes all traces of the progressbar\n        upon termination of iteration.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n        methods.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progressbar to stay within this bound\n        [default: None]. The fallback is a meter width of 10 and no\n        limit for the counter and statistics. If 0, will not print any\n        meter (only stats).\n    mininterval  : float, optional\n        Minimum progress update interval, in seconds [default: 0.1].\n    miniters  : int, optional\n        Minimum progress update interval, in iterations [default: None].\n        If specified, will set `mininterval` to 0.\n    ascii  : bool, optional\n        If [default: None] or false, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters `1-9 #`.\n    disable : bool\n        Whether to disable the entire progressbar wrapper [default: False].\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False].\n    gui  : bool, optional\n        If set, will attempt to use matplotlib animations for a\n        graphical output [default: false].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n    if ncols is None and file in (sys.stderr, sys.stdout):\n        ncols = _environ_cols(file)\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n        mininterval = 0\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n    if gui:\n        try:\n            import matplotlib as mpl\n            import matplotlib.pyplot as plt\n            from collections import deque\n        except ImportError:\n            gui = False\n        else:\n            self.mpl = mpl\n            self.plt = plt\n    self.iterable = iterable\n    self.desc = desc + ': ' if desc else ''\n    self.total = total\n    self.leave = leave\n    self.file = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.gui = gui\n    if gui:\n        if not disable:\n            file.write('Warning: GUI is experimental/alpha\\n')\n            self.toolbar = self.mpl.rcParams['toolbar']\n            self.mpl.rcParams['toolbar'] = 'None'\n            self.mininterval = max(mininterval, 0.5)\n            self.fig, ax = plt.subplots(figsize=(9, 2.2))\n            if total:\n                self.xdata = []\n                self.ydata = []\n                self.zdata = []\n            else:\n                self.xdata = deque([])\n                self.ydata = deque([])\n                self.zdata = deque([])\n            self.line1, = ax.plot(self.xdata, self.ydata, color='b')\n            self.line2, = ax.plot(self.xdata, self.zdata, color='k')\n            ax.set_ylim(0, 0.001)\n            if total:\n                ax.set_xlim(0, 100)\n                ax.set_xlabel('percent')\n                self.fig.legend((self.line1, self.line2), ('cur', 'est'), loc='center right')\n                self.hspan = plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n            else:\n                ax.set_xlim(0, 60)\n                ax.invert_xaxis()\n                ax.set_xlabel('seconds')\n                ax.legend(('cur', 'est'), loc='lower left')\n            ax.grid()\n            ax.set_ylabel((unit if unit else 'it') + '/s')\n            if unit_scale:\n                plt.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\n                ax.yaxis.get_offset_text().set_x(-0.15)\n            self.wasion = plt.isinteractive()\n            plt.ion()\n            self.ax = ax\n    else:\n        self.sp = StatusPrinter(self.file)\n        if not disable:\n            self.sp(format_meter(0, total, 0, ncols, self.desc, ascii, unit, unit_scale))\n    self.start_t = self.last_print_t = time()\n    self.last_print_n = 0\n    self.n = 0",
                            "def __len__(self):\n    return len(self.iterable)",
                            "def __iter__(self):\n    \"\"\" Backward-compatibility to use: for x in tqdm(iterable) \"\"\"\n    iterable = self.iterable\n    if self.disable:\n        for obj in iterable:\n            yield obj\n    else:\n        ncols = self.ncols\n        mininterval = self.mininterval\n        miniters = self.miniters\n        dynamic_miniters = self.dynamic_miniters\n        unit = self.unit\n        unit_scale = self.unit_scale\n        ascii = self.ascii\n        start_t = self.start_t\n        last_print_t = self.last_print_t\n        last_print_n = self.last_print_n\n        n = self.n\n        gui = self.gui\n        if gui:\n            plt = self.plt\n            ax = self.ax\n            xdata = self.xdata\n            ydata = self.ydata\n            zdata = self.zdata\n            line1 = self.line1\n            line2 = self.line2\n        else:\n            sp = self.sp\n        for obj in iterable:\n            yield obj\n            n += 1\n            delta_it = n - last_print_n\n            if delta_it >= miniters:\n                cur_t = time()\n                delta_t = cur_t - last_print_t\n                if delta_t >= mininterval:\n                    elapsed = cur_t - start_t\n                    if gui:\n                        total = self.total\n                        y = delta_it / delta_t\n                        z = n / elapsed\n                        xdata.append(n * 100.0 / total if total else cur_t)\n                        ydata.append(y)\n                        zdata.append(z)\n                        if not total and elapsed > 66:\n                            xdata.popleft()\n                            ydata.popleft()\n                            zdata.popleft()\n                        ymin, ymax = ax.get_ylim()\n                        if y > ymax or z > ymax:\n                            ymax = 1.1 * y\n                            ax.set_ylim(ymin, ymax)\n                            ax.figure.canvas.draw()\n                        if total:\n                            line1.set_data(xdata, ydata)\n                            line2.set_data(xdata, zdata)\n                            try:\n                                poly_lims = self.hspan.get_xy()\n                            except AttributeError:\n                                self.hspan = plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n                                poly_lims = self.hspan.get_xy()\n                            poly_lims[0, 1] = ymin\n                            poly_lims[1, 1] = ymax\n                            poly_lims[2] = [n / total, ymax]\n                            poly_lims[3] = [poly_lims[2, 0], ymin]\n                            if len(poly_lims) > 4:\n                                poly_lims[4, 1] = ymin\n                            self.hspan.set_xy(poly_lims)\n                        else:\n                            t_ago = [cur_t - i for i in xdata]\n                            line1.set_data(t_ago, ydata)\n                            line2.set_data(t_ago, zdata)\n                        ax.set_title(format_meter(n, total, elapsed, 0, self.desc, ascii, unit, unit_scale), fontname='DejaVu Sans Mono', fontsize=11)\n                        plt.pause(1e-09)\n                    else:\n                        sp(format_meter(n, self.total, elapsed, ncols, self.desc, ascii, unit, unit_scale))\n                    if dynamic_miniters:\n                        miniters = max(miniters, delta_it)\n                    last_print_n = n\n                    last_print_t = cur_t\n        self.last_print_n = last_print_n\n        self.n = n\n        self.close()",
                            "def update(self, n=1):\n    \"\"\"\n    Manually update the progress bar, useful for streams\n    such as reading files.\n    E.g.:\n    >>> t = tqdm(total=filesize) # Initialise\n    >>> for current_buffer in stream:\n    ...    ...\n    ...    t.update(len(current_buffer))\n    >>> t.close()\n    The last line is highly recommended, but possibly not necessary if\n    `t.update()` will be called in such a way that `filesize` will be\n    exactly reached and printed.\n\n    Parameters\n    ----------\n    n  : int\n        Increment to add to the internal counter of iterations\n        [default: 1].\n    \"\"\"\n    if self.disable:\n        return\n    if n < 1:\n        n = 1\n    self.n += n\n    delta_it = self.n - self.last_print_n\n    if delta_it >= self.miniters:\n        cur_t = time()\n        delta_t = cur_t - self.last_print_t\n        if delta_t >= self.mininterval:\n            elapsed = cur_t - self.start_t\n            if self.gui:\n                total = self.total\n                ax = self.ax\n                y = delta_it / delta_t\n                z = self.n / elapsed\n                self.xdata.append(self.n * 100.0 / total if total else cur_t)\n                self.ydata.append(y)\n                self.zdata.append(z)\n                if not total and elapsed > 66:\n                    self.xdata.popleft()\n                    self.ydata.popleft()\n                    self.zdata.popleft()\n                ymin, ymax = ax.get_ylim()\n                if y > ymax or z > ymax:\n                    ymax = 1.1 * y\n                    ax.set_ylim(ymin, ymax)\n                    ax.figure.canvas.draw()\n                if total:\n                    self.line1.set_data(self.xdata, self.ydata)\n                    self.line2.set_data(self.xdata, self.zdata)\n                    try:\n                        poly_lims = self.hspan.get_xy()\n                    except AttributeError:\n                        self.hspan = self.plt.axhspan(0, 0.001, xmin=0, xmax=0, color='g')\n                        poly_lims = self.hspan.get_xy()\n                    poly_lims[0, 1] = ymin\n                    poly_lims[1, 1] = ymax\n                    poly_lims[2] = [self.n / total, ymax]\n                    poly_lims[3] = [poly_lims[2, 0], ymin]\n                    if len(poly_lims) > 4:\n                        poly_lims[4, 1] = ymin\n                    self.hspan.set_xy(poly_lims)\n                else:\n                    t_ago = [cur_t - i for i in self.xdata]\n                    self.line1.set_data(t_ago, self.ydata)\n                    self.line2.set_data(t_ago, self.zdata)\n                ax.set_title(format_meter(self.n, total, elapsed, 0, self.desc, self.ascii, self.unit, self.unit_scale), fontname='DejaVu Sans Mono', fontsize=11)\n                self.plt.pause(1e-09)\n            else:\n                self.sp(format_meter(self.n, self.total, elapsed, self.ncols, self.desc, self.ascii, self.unit, self.unit_scale))\n            if self.dynamic_miniters:\n                self.miniters = max(self.miniters, delta_it)\n            self.last_print_n = self.n\n            self.last_print_t = cur_t",
                            "def close(self):\n    \"\"\"\n    Cleanup and (if leave=False) close the progressbar.\n    \"\"\"\n    if self.disable:\n        return\n    if self.gui:\n        self.mpl.rcParams['toolbar'] = self.toolbar\n        if not self.wasion:\n            self.plt.ioff()\n        if not self.leave:\n            self.plt.close(self.fig)\n    elif self.leave:\n        if self.last_print_n < self.n:\n            cur_t = time()\n            self.sp(format_meter(self.n, self.total, cur_t - self.start_t, self.ncols, self.desc, self.ascii, self.unit, self.unit_scale))\n        self.file.write('\\n')\n    else:\n        self.sp('')\n        self.file.write('\\r')"
                        ],
                        "constructor_variables": [
                            "zdata",
                            "mininterval",
                            "miniters",
                            "disable",
                            "plt",
                            "unit_scale",
                            "ascii",
                            "iterable",
                            "unit",
                            "ncols",
                            "file",
                            "gui",
                            "leave",
                            "wasion",
                            "ydata",
                            "sp",
                            "last_print_t",
                            "last_print_n",
                            "n",
                            "desc",
                            "ax",
                            "hspan",
                            "total",
                            "toolbar",
                            "dynamic_miniters",
                            "mpl",
                            "start_t",
                            "xdata"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False)",
                            "__len__(self)",
                            "__iter__(self)",
                            "update(self, n=1)",
                            "close(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def format_sizeof(num, suffix=''):\n    \"\"\"\n    Formats a number (greater than unity) with SI Order of Magnitude prefixes.\n\n    Parameters\n    ----------\n    num  : float\n        Number ( >= 1) to format.\n    suffix  : str, optional\n        Post-postfix [default: ''].\n\n    Returns\n    -------\n    out  : str\n        Number with Order of Magnitude SI unit postfix.\n    \"\"\"\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(num) < 1000.0:\n            if abs(num) < 100.0:\n                if abs(num) < 10.0:\n                    return '{0:1.2f}'.format(num) + unit + suffix\n                return '{0:2.1f}'.format(num) + unit + suffix\n            return '{0:3.0f}'.format(num) + unit + suffix\n        num /= 1000.0\n    return '{0:3.1f}Y'.format(num) + suffix",
                "def format_interval(t):\n    \"\"\"\n    Formats a number of seconds as a clock time, [H:]MM:SS\n\n    Parameters\n    ----------\n    t  : int\n        Number of seconds.\n    Returns\n    -------\n    out  : str\n        [H:]MM:SS\n    \"\"\"\n    mins, s = divmod(int(t), 60)\n    h, m = divmod(mins, 60)\n    if h:\n        return '{0:d}:{1:02d}:{2:02d}'.format(h, m, s)\n    else:\n        return '{0:02d}:{1:02d}'.format(m, s)",
                "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    n  : int\n        Number of finished iterations.\n    total  : int\n        The expected total number of iterations. If meaningless (), only basic\n        progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progress meter to stay within this bound\n        [default: None]. The fallback meter width is 10 for the progress bar\n        + no limit for the iterations counter and statistics. If 0, will not\n        print any meter (only stats).\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n    ascii  : bool, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters (1-9 #).\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will printed with an appropriate\n        SI metric prefix (K = 10^3, M = 10^6, etc.) [default: False].\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    # in case the total is wrong (n is above the total), then\n    # we switch to the mode without showing the total prediction\n    # (since ETA would be wrong anyway)\n    if total and n > total:\n        total = None\n\n    elapsed_str = format_interval(elapsed)\n\n    rate_fmt = ((format_sizeof(n / elapsed) if unit_scale else\n                 '{0:5.2f}'.format(n / elapsed)) if elapsed else\n                '?') \\\n        + unit + '/s'\n\n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n\n    if total:\n        frac = n / total\n        percentage = frac * 100\n\n        remaining_str = format_interval(elapsed * (total-n) / n) if n else '?'\n\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n                n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols \\\n            else 10\n\n        if ascii:\n            bar_length, frac_bar_length = divmod(\n                int(frac * N_BARS * 10), 10)\n\n            bar = '#'*bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length \\\n                else ' '\n\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n\n            bar = _unich(0x2588)*bar_length\n            frac_bar = _unich(0x2590 - frac_bar_length) \\\n                if frac_bar_length else ' '\n\n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + \\\n                ' ' * max(N_BARS - bar_length - 1, 0)  # bar end padding\n        else:\n            full_bar = bar + \\\n                ' ' * max(N_BARS - bar_length, 0)  # bar end padding\n\n        return l_bar + full_bar + r_bar\n\n    else:  # no progressbar nor ETA, just progress statistics\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n            n_fmt, unit, elapsed_str, rate_fmt)",
                "def StatusPrinter(file):\n    \"\"\"\n    Manage the printing and in-place updating of a line of characters.\n    Note that if the string is longer than a line, then in-place updating\n    may not work (it will print a new line at each refresh).\n    \"\"\"\n    fp = file\n    last_printed_len = [0]  # closure over mutable variable (fast)\n\n    def print_status(s):\n        len_s = len(s)\n        fp.write('\\r' + s + ' '*max(last_printed_len[0] - len_s, 0))\n        fp.flush()\n        last_printed_len[0] = len_s\n    return print_status",
                "def trange(*args, **kwargs):\n    \"\"\"\n    A shortcut for tqdm(xrange(*args), **kwargs).\n    On Python3+ range is used instead of xrange.\n    \"\"\"\n    return tqdm(_range(*args), **kwargs)",
                "def print_status(s):\n    len_s = len(s)\n    fp.write('\\r' + s + ' '*max(last_printed_len[0] - len_s, 0))\n    fp.flush()\n    last_printed_len[0] = len_s",
                "def __init__(self, iterable=None, desc=None, total=None, leave=False,\n             file=sys.stderr, ncols=None, mininterval=0.1,\n             miniters=None, ascii=None, disable=False,\n             unit='it', unit_scale=False, gui=False):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank [default: None] to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar [default: None].\n    total  : int, optional\n        The number of expected iterations. If not given, len(iterable) is\n        used if possible. As a last resort, only basic progress\n        statistics are displayed (no ETA, no progressbar). If `gui` is\n        True and this parameter needs subsequent updating, specify an\n        initial arbitrary large positive integer, e.g. int(9e9).\n    leave  : bool, optional\n        If [default: False], removes all traces of the progressbar\n        upon termination of iteration.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n        methods.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progressbar to stay within this bound\n        [default: None]. The fallback is a meter width of 10 and no\n        limit for the counter and statistics. If 0, will not print any\n        meter (only stats).\n    mininterval  : float, optional\n        Minimum progress update interval, in seconds [default: 0.1].\n    miniters  : int, optional\n        Minimum progress update interval, in iterations [default: None].\n        If specified, will set `mininterval` to 0.\n    ascii  : bool, optional\n        If [default: None] or false, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters `1-9 #`.\n    disable : bool\n        Whether to disable the entire progressbar wrapper [default: False].\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False].\n    gui  : bool, optional\n        If set, will attempt to use matplotlib animations for a\n        graphical output [default: false].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    # Preprocess the arguments\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n\n    if (ncols is None) and (file in (sys.stderr, sys.stdout)):\n        ncols = _environ_cols(file)\n\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n        mininterval = 0\n\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n\n    if gui: # pragma: no cover\n        try:\n            import matplotlib as mpl\n            import matplotlib.pyplot as plt\n            from collections import deque\n        except ImportError:\n            gui = False\n        else:\n            self.mpl = mpl\n            self.plt = plt\n\n    # Store the arguments\n    self.iterable = iterable\n    self.desc = desc+': ' if desc else ''\n    self.total = total\n    self.leave = leave\n    self.file = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.gui = gui\n\n    if gui: # pragma: no cover\n        # Initialize the GUI display\n        if not disable:\n            file.write('Warning: GUI is experimental/alpha\\n')\n\n            # Remember if external environment uses toolbars\n            self.toolbar = self.mpl.rcParams['toolbar']\n            self.mpl.rcParams['toolbar'] = 'None'\n\n            self.mininterval = max(mininterval, 0.5)\n            self.fig, ax = plt.subplots(figsize=(9, 2.2))\n            # self.fig.subplots_adjust(bottom=0.2)\n            if total:\n                self.xdata = []\n                self.ydata = []\n                self.zdata = []\n            else:\n                self.xdata = deque([])\n                self.ydata = deque([])\n                self.zdata = deque([])\n            self.line1, = ax.plot(self.xdata, self.ydata, color='b')\n            self.line2, = ax.plot(self.xdata, self.zdata, color='k')\n            ax.set_ylim(0, 0.001)\n            if total:\n                ax.set_xlim(0, 100)\n                ax.set_xlabel('percent')\n                self.fig.legend((self.line1, self.line2), ('cur', 'est'),\n                                loc='center right')\n                # progressbar\n                self.hspan = plt.axhspan(0, 0.001,\n                                         xmin=0, xmax=0, color='g')\n            else:\n                # ax.set_xlim(-60, 0)\n                ax.set_xlim(0, 60)\n                ax.invert_xaxis()\n                ax.set_xlabel('seconds')\n                ax.legend(('cur', 'est'), loc='lower left')\n            ax.grid()\n            # ax.set_xlabel('seconds')\n            ax.set_ylabel((unit if unit else 'it') + '/s')\n            if unit_scale:\n                plt.ticklabel_format(style='sci', axis='y',\n                                     scilimits=(0, 0))\n                ax.yaxis.get_offset_text().set_x(-0.15)\n\n            # Remember if external environment is interactive\n            self.wasion = plt.isinteractive()\n            plt.ion()\n            self.ax = ax\n    else:\n        # Initialize the screen printer\n        self.sp = StatusPrinter(self.file)\n        if not disable:\n            self.sp(format_meter(\n                0, total, 0, ncols, self.desc, ascii, unit, unit_scale))\n\n    # Init the time/iterations counters\n    self.start_t = self.last_print_t = time()\n    self.last_print_n = 0\n    self.n = 0",
                "def __len__(self):\n    return len(self.iterable)",
                "def __iter__(self):\n    ''' Backward-compatibility to use: for x in tqdm(iterable) '''\n\n    # Inlining instance variables as locals (speed optimisation)\n    iterable = self.iterable\n\n    # If the bar is disabled, then just walk the iterable\n    # (note: keep this check outside the loop for performance)\n    if self.disable:\n        for obj in iterable:\n            yield obj\n    else:\n        ncols = self.ncols\n        mininterval = self.mininterval\n        miniters = self.miniters\n        dynamic_miniters = self.dynamic_miniters\n        unit = self.unit\n        unit_scale = self.unit_scale\n        ascii = self.ascii\n        start_t = self.start_t\n        last_print_t = self.last_print_t\n        last_print_n = self.last_print_n\n        n = self.n\n        gui = self.gui\n        if gui: # pragma: no cover\n            plt = self.plt\n            ax = self.ax\n            xdata = self.xdata\n            ydata = self.ydata\n            zdata = self.zdata\n            line1 = self.line1\n            line2 = self.line2\n        else:\n            sp = self.sp\n\n        for obj in iterable:\n            yield obj\n            # Update and print the progressbar.\n            # Note: does not call self.update(1) for speed optimisation.\n            n += 1\n            delta_it = n - last_print_n\n            # check the counter first (avoid calls to time())\n            if delta_it >= miniters:\n                cur_t = time()\n                delta_t = cur_t - last_print_t\n                if delta_t >= mininterval:\n                    elapsed = cur_t - start_t\n                    if gui: # pragma: no cover\n                        # Inline due to multiple calls\n                        total = self.total\n                        # instantaneous rate\n                        y = delta_it / delta_t\n                        # smoothed rate\n                        z = n / elapsed\n                        # update line data\n                        xdata.append(n * 100.0 / total if total else cur_t)\n                        ydata.append(y)\n                        zdata.append(z)\n\n                        # Discard old values\n                        # xmin, xmax = ax.get_xlim()\n                        # if (not total) and elapsed > xmin * 1.1:\n                        if (not total) and elapsed > 66:\n                            xdata.popleft()\n                            ydata.popleft()\n                            zdata.popleft()\n\n                        ymin, ymax = ax.get_ylim()\n                        if y > ymax or z > ymax:\n                            ymax = 1.1 * y\n                            ax.set_ylim(ymin, ymax)\n                            ax.figure.canvas.draw()\n\n                        if total:\n                            line1.set_data(xdata, ydata)\n                            line2.set_data(xdata, zdata)\n                            try:\n                                poly_lims = self.hspan.get_xy()\n                            except AttributeError:\n                                self.hspan = plt.axhspan(0, 0.001, xmin=0,\n                                                         xmax=0, color='g')\n                                poly_lims = self.hspan.get_xy()\n                            poly_lims[0, 1] = ymin\n                            poly_lims[1, 1] = ymax\n                            poly_lims[2] = [n / total, ymax]\n                            poly_lims[3] = [poly_lims[2, 0], ymin]\n                            if len(poly_lims) > 4:\n                                poly_lims[4, 1] = ymin\n                            self.hspan.set_xy(poly_lims)\n                        else:\n                            t_ago = [cur_t - i for i in xdata]\n                            line1.set_data(t_ago, ydata)\n                            line2.set_data(t_ago, zdata)\n\n                        ax.set_title(format_meter(\n                            n, total, elapsed, 0,\n                            self.desc, ascii, unit, unit_scale),\n                            fontname=\"DejaVu Sans Mono\",\n                            fontsize=11)\n                        plt.pause(1e-9)\n                    else:\n                        sp(format_meter(\n                            n, self.total, elapsed, ncols,\n                            self.desc, ascii, unit, unit_scale))\n\n                    if dynamic_miniters:\n                        miniters = max(miniters, delta_it)\n                    last_print_n = n\n                    last_print_t = cur_t\n        # Closing the progress bar.\n        # Update some internal variables for close().\n        self.last_print_n = last_print_n\n        self.n = n\n        self.close()",
                "def update(self, n=1):\n    \"\"\"\n    Manually update the progress bar, useful for streams\n    such as reading files.\n    E.g.:\n    >>> t = tqdm(total=filesize) # Initialise\n    >>> for current_buffer in stream:\n    ...    ...\n    ...    t.update(len(current_buffer))\n    >>> t.close()\n    The last line is highly recommended, but possibly not necessary if\n    `t.update()` will be called in such a way that `filesize` will be\n    exactly reached and printed.\n\n    Parameters\n    ----------\n    n  : int\n        Increment to add to the internal counter of iterations\n        [default: 1].\n    \"\"\"\n    if self.disable:\n        return\n\n    if n < 1:\n        n = 1\n    self.n += n\n\n    delta_it = self.n - self.last_print_n  # should be n?\n    if delta_it >= self.miniters:\n        # We check the counter first, to reduce the overhead of time()\n        cur_t = time()\n        delta_t = cur_t - self.last_print_t\n        if delta_t >= self.mininterval:\n            elapsed = cur_t - self.start_t\n            if self.gui:  # pragma: no cover\n                # Inline due to multiple calls\n                total = self.total\n                ax = self.ax\n\n                # instantaneous rate\n                y = delta_it / delta_t\n                # smoothed rate\n                z = self.n / elapsed\n                # update line data\n                self.xdata.append(self.n * 100.0 / total\n                                  if total else cur_t)\n                self.ydata.append(y)\n                self.zdata.append(z)\n\n                # Discard old values\n                if (not total) and elapsed > 66:\n                    self.xdata.popleft()\n                    self.ydata.popleft()\n                    self.zdata.popleft()\n\n                ymin, ymax = ax.get_ylim()\n                if y > ymax or z > ymax:\n                    ymax = 1.1 * y\n                    ax.set_ylim(ymin, ymax)\n                    ax.figure.canvas.draw()\n\n                if total:\n                    self.line1.set_data(self.xdata, self.ydata)\n                    self.line2.set_data(self.xdata, self.zdata)\n                    try:\n                        poly_lims = self.hspan.get_xy()\n                    except AttributeError:\n                        self.hspan = self.plt.axhspan(0, 0.001, xmin=0,\n                                                      xmax=0, color='g')\n                        poly_lims = self.hspan.get_xy()\n                    poly_lims[0, 1] = ymin\n                    poly_lims[1, 1] = ymax\n                    poly_lims[2] = [self.n / total, ymax]\n                    poly_lims[3] = [poly_lims[2, 0], ymin]\n                    if len(poly_lims) > 4:\n                        poly_lims[4, 1] = ymin\n                    self.hspan.set_xy(poly_lims)\n                else:\n                    t_ago = [cur_t - i for i in self.xdata]\n                    self.line1.set_data(t_ago, self.ydata)\n                    self.line2.set_data(t_ago, self.zdata)\n\n                ax.set_title(format_meter(\n                    self.n, total, elapsed, 0,\n                    self.desc, self.ascii, self.unit, self.unit_scale),\n                    fontname=\"DejaVu Sans Mono\",\n                    fontsize=11)\n                self.plt.pause(1e-9)\n            else:\n                self.sp(format_meter(\n                    self.n, self.total, elapsed, self.ncols,\n                    self.desc, self.ascii, self.unit, self.unit_scale))\n            if self.dynamic_miniters:\n                self.miniters = max(self.miniters, delta_it)\n            self.last_print_n = self.n\n            self.last_print_t = cur_t",
                "def close(self):\n    \"\"\"\n    Cleanup and (if leave=False) close the progressbar.\n    \"\"\"\n    if self.disable:\n        return\n\n    if self.gui:  # pragma: no cover\n        # Restore toolbars\n        self.mpl.rcParams['toolbar'] = self.toolbar\n        # Return to non-interactive mode\n        if not self.wasion:\n            self.plt.ioff()\n        if not self.leave:\n            self.plt.close(self.fig)\n    else:\n        if self.leave:\n            if self.last_print_n < self.n:\n                cur_t = time()\n                self.sp(format_meter(\n                    self.n, self.total, cur_t-self.start_t, self.ncols,\n                    self.desc, self.ascii, self.unit, self.unit_scale))\n            self.file.write('\\n')\n        else:\n            self.sp('')\n            self.file.write('\\r')"
            ],
            "inscope_function_signatures": [
                "format_sizeof(num, suffix='')",
                "format_interval(t)",
                "format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False)",
                "StatusPrinter(file)",
                "trange(*args, **kwargs)",
                "print_status(s)",
                "__init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False)",
                "__len__(self)",
                "__iter__(self)",
                "update(self, n=1)",
                "close(self)"
            ],
            "variables_in_file": {
                "__author__": [
                    19
                ],
                "__all__": [
                    21
                ],
                "unit": [
                    355,
                    40,
                    297,
                    170,
                    44,
                    45,
                    46,
                    461,
                    340,
                    468,
                    119,
                    381
                ],
                "abs": [
                    41,
                    42,
                    43
                ],
                "num": [
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48
                ],
                "format": [
                    67,
                    69,
                    134,
                    135,
                    169,
                    44,
                    45,
                    46,
                    48,
                    117
                ],
                "suffix": [
                    48,
                    44,
                    45,
                    46
                ],
                "mins": [
                    64,
                    65
                ],
                "s": [
                    64,
                    67,
                    69,
                    183,
                    184
                ],
                "divmod": [
                    64,
                    65,
                    145,
                    153
                ],
                "int": [
                    64,
                    153,
                    146
                ],
                "t": [
                    64
                ],
                "h": [
                    65,
                    66,
                    67
                ],
                "m": [
                    65,
                    67,
                    69
                ],
                "total": [
                    128,
                    129,
                    257,
                    259,
                    132,
                    516,
                    524,
                    525,
                    530,
                    541,
                    414,
                    288,
                    420,
                    552,
                    427,
                    563,
                    438,
                    313,
                    449,
                    324,
                    460,
                    355,
                    111,
                    112,
                    123,
                    126,
                    255
                ],
                "n": [
                    129,
                    387,
                    132,
                    404,
                    405,
                    418,
                    420,
                    449,
                    460,
                    467,
                    472,
                    477,
                    111,
                    116,
                    117,
                    503,
                    504,
                    505,
                    122,
                    125
                ],
                "elapsed_str": [
                    136,
                    170,
                    114
                ],
                "format_interval": [
                    114,
                    132
                ],
                "elapsed": [
                    513,
                    418,
                    132,
                    522,
                    427,
                    460,
                    114,
                    467,
                    116,
                    117,
                    530,
                    563,
                    570,
                    411
                ],
                "rate_fmt": [
                    136,
                    170,
                    116
                ],
                "unit_scale": [
                    355,
                    298,
                    461,
                    116,
                    341,
                    468,
                    121,
                    382
                ],
                "format_sizeof": [
                    122,
                    123,
                    116
                ],
                "n_fmt": [
                    136,
                    170,
                    122,
                    125
                ],
                "total_fmt": [
                    136,
                    123,
                    126
                ],
                "str": [
                    125,
                    126
                ],
                "frac": [
                    129,
                    130,
                    153,
                    146
                ],
                "percentage": [
                    130,
                    134
                ],
                "remaining_str": [
                    136,
                    132
                ],
                "l_bar": [
                    139,
                    166,
                    141,
                    134
                ],
                "prefix": [
                    169,
                    134
                ],
                "r_bar": [
                    139,
                    141,
                    166,
                    135
                ],
                "ncols": [
                    291,
                    355,
                    261,
                    262,
                    138,
                    141,
                    467,
                    377
                ],
                "N_BARS": [
                    161,
                    164,
                    141,
                    146,
                    153,
                    159
                ],
                "max": [
                    161,
                    164,
                    141,
                    310,
                    471,
                    184,
                    573
                ],
                "len": [
                    257,
                    451,
                    554,
                    363,
                    141,
                    183
                ],
                "ascii": [
                    355,
                    295,
                    461,
                    271,
                    144,
                    272,
                    468,
                    383
                ],
                "bar_length": [
                    161,
                    164,
                    145,
                    148,
                    153,
                    155,
                    159
                ],
                "frac_bar_length": [
                    145,
                    149,
                    153,
                    156,
                    157
                ],
                "bar": [
                    160,
                    155,
                    148,
                    163
                ],
                "frac_bar": [
                    160,
                    156,
                    149
                ],
                "chr": [
                    149
                ],
                "_unich": [
                    155,
                    156
                ],
                "full_bar": [
                    160,
                    163,
                    166
                ],
                "fp": [
                    184,
                    185,
                    179
                ],
                "file": [
                    290,
                    261,
                    262,
                    272,
                    304,
                    179
                ],
                "last_printed_len": [
                    184,
                    186,
                    180
                ],
                "len_s": [
                    184,
                    186,
                    183
                ],
                "fp.write": [
                    184
                ],
                "fp.flush": [
                    185
                ],
                "print_status": [
                    187
                ],
                "object": [
                    190
                ],
                "sys.stderr": [
                    261,
                    198
                ],
                "sys": [
                    261,
                    198
                ],
                "iterable": [
                    257,
                    400,
                    369,
                    374,
                    286,
                    255
                ],
                "TypeError": [
                    258
                ],
                "AttributeError": [
                    258,
                    443,
                    546
                ],
                "sys.stdout": [
                    261
                ],
                "_environ_cols": [
                    262
                ],
                "miniters": [
                    471,
                    293,
                    264,
                    265,
                    407,
                    379
                ],
                "dynamic_miniters": [
                    294,
                    266,
                    268,
                    470,
                    380
                ],
                "mininterval": [
                    292,
                    269,
                    410,
                    310,
                    378
                ],
                "_supports_unicode": [
                    272
                ],
                "gui": [
                    388,
                    389,
                    299,
                    301,
                    274,
                    280,
                    412
                ],
                "ImportError": [
                    279
                ],
                "self.mpl": [
                    282,
                    307,
                    308,
                    586
                ],
                "self": [
                    512,
                    513,
                    514,
                    516,
                    517,
                    522,
                    524,
                    526,
                    527,
                    531,
                    532,
                    533,
                    542,
                    543,
                    545,
                    547,
                    549,
                    552,
                    556,
                    558,
                    559,
                    560,
                    563,
                    564,
                    567,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    581,
                    584,
                    586,
                    588,
                    589,
                    590,
                    591,
                    593,
                    594,
                    596,
                    597,
                    598,
                    599,
                    601,
                    602,
                    282,
                    283,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    307,
                    308,
                    310,
                    311,
                    314,
                    315,
                    316,
                    318,
                    319,
                    320,
                    321,
                    322,
                    327,
                    330,
                    347,
                    349,
                    352,
                    354,
                    355,
                    358,
                    359,
                    360,
                    363,
                    369,
                    373,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    390,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    398,
                    414,
                    442,
                    444,
                    446,
                    453,
                    461,
                    467,
                    468,
                    476,
                    477,
                    478,
                    500,
                    505,
                    507,
                    508,
                    511
                ],
                "mpl": [
                    282
                ],
                "self.plt": [
                    547,
                    390,
                    589,
                    591,
                    567,
                    283
                ],
                "plt": [
                    390,
                    330,
                    283,
                    464,
                    342,
                    311,
                    444,
                    347,
                    348
                ],
                "self.iterable": [
                    369,
                    363,
                    286
                ],
                "self.desc": [
                    355,
                    461,
                    468,
                    564,
                    598,
                    571,
                    287
                ],
                "desc": [
                    287
                ],
                "self.total": [
                    288,
                    516,
                    467,
                    597,
                    570,
                    414
                ],
                "self.leave": [
                    593,
                    289,
                    590
                ],
                "leave": [
                    289
                ],
                "self.file": [
                    352,
                    290,
                    602,
                    599
                ],
                "self.ncols": [
                    377,
                    570,
                    291,
                    597
                ],
                "self.mininterval": [
                    512,
                    378,
                    292,
                    310
                ],
                "self.miniters": [
                    573,
                    379,
                    508,
                    293
                ],
                "self.dynamic_miniters": [
                    380,
                    294,
                    572
                ],
                "self.ascii": [
                    295,
                    564,
                    598,
                    571,
                    383
                ],
                "self.disable": [
                    296,
                    581,
                    500,
                    373
                ],
                "disable": [
                    296,
                    353,
                    303
                ],
                "self.unit": [
                    297,
                    564,
                    598,
                    571,
                    381
                ],
                "self.unit_scale": [
                    298,
                    564,
                    598,
                    571,
                    382
                ],
                "self.gui": [
                    584,
                    514,
                    299,
                    388
                ],
                "file.write": [
                    304
                ],
                "self.toolbar": [
                    586,
                    307
                ],
                "self.mpl.rcParams": [
                    586,
                    307,
                    308
                ],
                "self.fig": [
                    591,
                    327,
                    311
                ],
                "ax": [
                    517,
                    391,
                    535,
                    538,
                    539,
                    432,
                    562,
                    435,
                    436,
                    311,
                    321,
                    322,
                    323,
                    325,
                    326,
                    459,
                    334,
                    335,
                    336,
                    337,
                    338,
                    340,
                    344,
                    349
                ],
                "plt.subplots": [
                    311
                ],
                "self.xdata": [
                    321,
                    322,
                    542,
                    392,
                    524,
                    558,
                    531,
                    314,
                    318,
                    543
                ],
                "self.ydata": [
                    321,
                    393,
                    526,
                    559,
                    532,
                    315,
                    542,
                    319
                ],
                "self.zdata": [
                    320,
                    322,
                    394,
                    527,
                    560,
                    533,
                    316,
                    543
                ],
                "deque": [
                    320,
                    318,
                    319
                ],
                "self.line1": [
                    321,
                    327,
                    395,
                    559,
                    542
                ],
                "ax.plot": [
                    321,
                    322
                ],
                "self.line2": [
                    322,
                    327,
                    396,
                    560,
                    543
                ],
                "ax.set_ylim": [
                    538,
                    323,
                    435
                ],
                "ax.set_xlim": [
                    325,
                    334
                ],
                "ax.set_xlabel": [
                    336,
                    326
                ],
                "self.fig.legend": [
                    327
                ],
                "self.hspan": [
                    545,
                    547,
                    453,
                    549,
                    330,
                    556,
                    442,
                    444,
                    446
                ],
                "plt.axhspan": [
                    330,
                    444
                ],
                "ax.invert_xaxis": [
                    335
                ],
                "ax.legend": [
                    337
                ],
                "ax.grid": [
                    338
                ],
                "ax.set_ylabel": [
                    340
                ],
                "plt.ticklabel_format": [
                    342
                ],
                "set_x": [
                    344
                ],
                "ax.yaxis.get_offset_text": [
                    344
                ],
                "ax.yaxis": [
                    344
                ],
                "self.wasion": [
                    347,
                    588
                ],
                "plt.isinteractive": [
                    347
                ],
                "plt.ion": [
                    348
                ],
                "self.ax": [
                    517,
                    349,
                    391
                ],
                "self.sp": [
                    352,
                    354,
                    398,
                    601,
                    596,
                    569
                ],
                "StatusPrinter": [
                    352
                ],
                "format_meter": [
                    354,
                    459,
                    466,
                    562,
                    596,
                    569
                ],
                "self.start_t": [
                    384,
                    513,
                    597,
                    358
                ],
                "self.last_print_t": [
                    385,
                    575,
                    358,
                    511
                ],
                "time": [
                    408,
                    595,
                    358,
                    510
                ],
                "self.last_print_n": [
                    386,
                    359,
                    594,
                    507,
                    476,
                    574
                ],
                "self.n": [
                    387,
                    360,
                    552,
                    522,
                    524,
                    594,
                    563,
                    597,
                    505,
                    570,
                    507,
                    477,
                    574
                ],
                "obj": [
                    400,
                    401,
                    374,
                    375
                ],
                "start_t": [
                    384,
                    411
                ],
                "last_print_t": [
                    385,
                    409,
                    473
                ],
                "last_print_n": [
                    472,
                    386,
                    476,
                    405
                ],
                "xdata": [
                    420,
                    455,
                    392,
                    428,
                    439,
                    440
                ],
                "ydata": [
                    421,
                    456,
                    393,
                    429,
                    439
                ],
                "zdata": [
                    422,
                    457,
                    394,
                    430,
                    440
                ],
                "line1": [
                    456,
                    395,
                    439
                ],
                "line2": [
                    440,
                    457,
                    396
                ],
                "sp": [
                    466,
                    398
                ],
                "delta_it": [
                    416,
                    407,
                    520,
                    405,
                    471,
                    507,
                    508,
                    573
                ],
                "cur_t": [
                    513,
                    420,
                    455,
                    473,
                    525,
                    558,
                    575,
                    595,
                    597,
                    408,
                    409,
                    411,
                    510,
                    511
                ],
                "delta_t": [
                    416,
                    512,
                    520,
                    409,
                    410,
                    511
                ],
                "y": [
                    416,
                    421,
                    520,
                    526,
                    433,
                    434,
                    536,
                    537
                ],
                "z": [
                    418,
                    422,
                    522,
                    527,
                    433,
                    536
                ],
                "xdata.append": [
                    420
                ],
                "ydata.append": [
                    421
                ],
                "zdata.append": [
                    422
                ],
                "xdata.popleft": [
                    428
                ],
                "ydata.popleft": [
                    429
                ],
                "zdata.popleft": [
                    430
                ],
                "ymin": [
                    450,
                    452,
                    550,
                    553,
                    555,
                    432,
                    435,
                    535,
                    538,
                    447
                ],
                "ymax": [
                    448,
                    449,
                    551,
                    552,
                    432,
                    433,
                    434,
                    435,
                    535,
                    536,
                    537,
                    538
                ],
                "ax.get_ylim": [
                    432,
                    535
                ],
                "ax.figure.canvas.draw": [
                    539,
                    436
                ],
                "ax.figure.canvas": [
                    539,
                    436
                ],
                "ax.figure": [
                    539,
                    436
                ],
                "line1.set_data": [
                    456,
                    439
                ],
                "line2.set_data": [
                    440,
                    457
                ],
                "poly_lims": [
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    545,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    442,
                    446,
                    447
                ],
                "self.hspan.get_xy": [
                    545,
                    442,
                    549,
                    446
                ],
                "self.hspan.set_xy": [
                    556,
                    453
                ],
                "t_ago": [
                    455,
                    456,
                    457,
                    558,
                    559,
                    560
                ],
                "i": [
                    558,
                    455
                ],
                "ax.set_title": [
                    562,
                    459
                ],
                "plt.pause": [
                    464
                ],
                "self.close": [
                    478
                ],
                "self.xdata.append": [
                    524
                ],
                "self.ydata.append": [
                    526
                ],
                "self.zdata.append": [
                    527
                ],
                "self.xdata.popleft": [
                    531
                ],
                "self.ydata.popleft": [
                    532
                ],
                "self.zdata.popleft": [
                    533
                ],
                "self.line1.set_data": [
                    542,
                    559
                ],
                "self.line2.set_data": [
                    560,
                    543
                ],
                "self.plt.axhspan": [
                    547
                ],
                "self.plt.pause": [
                    567
                ],
                "self.plt.ioff": [
                    589
                ],
                "self.plt.close": [
                    591
                ],
                "self.file.write": [
                    602,
                    599
                ],
                "tqdm": [
                    610
                ],
                "_range": [
                    610
                ],
                "args": [
                    610
                ],
                "kwargs": [
                    610
                ]
            },
            "filtered_variables_in_file": {
                "__author__": [
                    19
                ],
                "__all__": [
                    21
                ],
                "unit": [
                    355,
                    40,
                    297,
                    170,
                    44,
                    45,
                    46,
                    461,
                    340,
                    468,
                    119,
                    381
                ],
                "num": [
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48
                ],
                "suffix": [
                    48,
                    44,
                    45,
                    46
                ],
                "mins": [
                    64,
                    65
                ],
                "s": [
                    64,
                    67,
                    69,
                    183,
                    184
                ],
                "t": [
                    64
                ],
                "h": [
                    65,
                    66,
                    67
                ],
                "m": [
                    65,
                    67,
                    69
                ],
                "total": [
                    128,
                    129,
                    257,
                    259,
                    132,
                    516,
                    524,
                    525,
                    530,
                    541,
                    414,
                    288,
                    420,
                    552,
                    427,
                    563,
                    438,
                    313,
                    449,
                    324,
                    460,
                    355,
                    111,
                    112,
                    123,
                    126,
                    255
                ],
                "n": [
                    129,
                    387,
                    132,
                    404,
                    405,
                    418,
                    420,
                    449,
                    460,
                    467,
                    472,
                    477,
                    111,
                    116,
                    117,
                    503,
                    504,
                    505,
                    122,
                    125
                ],
                "elapsed_str": [
                    136,
                    170,
                    114
                ],
                "format_interval": [
                    114,
                    132
                ],
                "elapsed": [
                    513,
                    418,
                    132,
                    522,
                    427,
                    460,
                    114,
                    467,
                    116,
                    117,
                    530,
                    563,
                    570,
                    411
                ],
                "rate_fmt": [
                    136,
                    170,
                    116
                ],
                "unit_scale": [
                    355,
                    298,
                    461,
                    116,
                    341,
                    468,
                    121,
                    382
                ],
                "format_sizeof": [
                    122,
                    123,
                    116
                ],
                "n_fmt": [
                    136,
                    170,
                    122,
                    125
                ],
                "total_fmt": [
                    136,
                    123,
                    126
                ],
                "frac": [
                    129,
                    130,
                    153,
                    146
                ],
                "percentage": [
                    130,
                    134
                ],
                "remaining_str": [
                    136,
                    132
                ],
                "l_bar": [
                    139,
                    166,
                    141,
                    134
                ],
                "prefix": [
                    169,
                    134
                ],
                "r_bar": [
                    139,
                    141,
                    166,
                    135
                ],
                "ncols": [
                    291,
                    355,
                    261,
                    262,
                    138,
                    141,
                    467,
                    377
                ],
                "N_BARS": [
                    161,
                    164,
                    141,
                    146,
                    153,
                    159
                ],
                "bar_length": [
                    161,
                    164,
                    145,
                    148,
                    153,
                    155,
                    159
                ],
                "frac_bar_length": [
                    145,
                    149,
                    153,
                    156,
                    157
                ],
                "bar": [
                    160,
                    155,
                    148,
                    163
                ],
                "frac_bar": [
                    160,
                    156,
                    149
                ],
                "_unich": [
                    155,
                    156
                ],
                "full_bar": [
                    160,
                    163,
                    166
                ],
                "fp": [
                    184,
                    185,
                    179
                ],
                "file": [
                    290,
                    261,
                    262,
                    272,
                    304,
                    179
                ],
                "last_printed_len": [
                    184,
                    186,
                    180
                ],
                "len_s": [
                    184,
                    186,
                    183
                ],
                "fp.write": [
                    184
                ],
                "fp.flush": [
                    185
                ],
                "print_status": [
                    187
                ],
                "sys.stderr": [
                    261,
                    198
                ],
                "sys": [
                    261,
                    198
                ],
                "iterable": [
                    257,
                    400,
                    369,
                    374,
                    286,
                    255
                ],
                "sys.stdout": [
                    261
                ],
                "_environ_cols": [
                    262
                ],
                "miniters": [
                    471,
                    293,
                    264,
                    265,
                    407,
                    379
                ],
                "dynamic_miniters": [
                    294,
                    266,
                    268,
                    470,
                    380
                ],
                "mininterval": [
                    292,
                    269,
                    410,
                    310,
                    378
                ],
                "_supports_unicode": [
                    272
                ],
                "gui": [
                    388,
                    389,
                    299,
                    301,
                    274,
                    280,
                    412
                ],
                "self.mpl": [
                    282,
                    307,
                    308,
                    586
                ],
                "self": [
                    512,
                    513,
                    514,
                    516,
                    517,
                    522,
                    524,
                    526,
                    527,
                    531,
                    532,
                    533,
                    542,
                    543,
                    545,
                    547,
                    549,
                    552,
                    556,
                    558,
                    559,
                    560,
                    563,
                    564,
                    567,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    581,
                    584,
                    586,
                    588,
                    589,
                    590,
                    591,
                    593,
                    594,
                    596,
                    597,
                    598,
                    599,
                    601,
                    602,
                    282,
                    283,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    307,
                    308,
                    310,
                    311,
                    314,
                    315,
                    316,
                    318,
                    319,
                    320,
                    321,
                    322,
                    327,
                    330,
                    347,
                    349,
                    352,
                    354,
                    355,
                    358,
                    359,
                    360,
                    363,
                    369,
                    373,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    390,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    398,
                    414,
                    442,
                    444,
                    446,
                    453,
                    461,
                    467,
                    468,
                    476,
                    477,
                    478,
                    500,
                    505,
                    507,
                    508,
                    511
                ],
                "mpl": [
                    282
                ],
                "self.plt": [
                    547,
                    390,
                    589,
                    591,
                    567,
                    283
                ],
                "plt": [
                    390,
                    330,
                    283,
                    464,
                    342,
                    311,
                    444,
                    347,
                    348
                ],
                "self.iterable": [
                    369,
                    363,
                    286
                ],
                "self.desc": [
                    355,
                    461,
                    468,
                    564,
                    598,
                    571,
                    287
                ],
                "desc": [
                    287
                ],
                "self.total": [
                    288,
                    516,
                    467,
                    597,
                    570,
                    414
                ],
                "self.leave": [
                    593,
                    289,
                    590
                ],
                "leave": [
                    289
                ],
                "self.file": [
                    352,
                    290,
                    602,
                    599
                ],
                "self.ncols": [
                    377,
                    570,
                    291,
                    597
                ],
                "self.mininterval": [
                    512,
                    378,
                    292,
                    310
                ],
                "self.miniters": [
                    573,
                    379,
                    508,
                    293
                ],
                "self.dynamic_miniters": [
                    380,
                    294,
                    572
                ],
                "self.ascii": [
                    295,
                    564,
                    598,
                    571,
                    383
                ],
                "self.disable": [
                    296,
                    581,
                    500,
                    373
                ],
                "disable": [
                    296,
                    353,
                    303
                ],
                "self.unit": [
                    297,
                    564,
                    598,
                    571,
                    381
                ],
                "self.unit_scale": [
                    298,
                    564,
                    598,
                    571,
                    382
                ],
                "self.gui": [
                    584,
                    514,
                    299,
                    388
                ],
                "file.write": [
                    304
                ],
                "self.toolbar": [
                    586,
                    307
                ],
                "self.mpl.rcParams": [
                    586,
                    307,
                    308
                ],
                "self.fig": [
                    591,
                    327,
                    311
                ],
                "ax": [
                    517,
                    391,
                    535,
                    538,
                    539,
                    432,
                    562,
                    435,
                    436,
                    311,
                    321,
                    322,
                    323,
                    325,
                    326,
                    459,
                    334,
                    335,
                    336,
                    337,
                    338,
                    340,
                    344,
                    349
                ],
                "plt.subplots": [
                    311
                ],
                "self.xdata": [
                    321,
                    322,
                    542,
                    392,
                    524,
                    558,
                    531,
                    314,
                    318,
                    543
                ],
                "self.ydata": [
                    321,
                    393,
                    526,
                    559,
                    532,
                    315,
                    542,
                    319
                ],
                "self.zdata": [
                    320,
                    322,
                    394,
                    527,
                    560,
                    533,
                    316,
                    543
                ],
                "deque": [
                    320,
                    318,
                    319
                ],
                "self.line1": [
                    321,
                    327,
                    395,
                    559,
                    542
                ],
                "ax.plot": [
                    321,
                    322
                ],
                "self.line2": [
                    322,
                    327,
                    396,
                    560,
                    543
                ],
                "ax.set_ylim": [
                    538,
                    323,
                    435
                ],
                "ax.set_xlim": [
                    325,
                    334
                ],
                "ax.set_xlabel": [
                    336,
                    326
                ],
                "self.fig.legend": [
                    327
                ],
                "self.hspan": [
                    545,
                    547,
                    453,
                    549,
                    330,
                    556,
                    442,
                    444,
                    446
                ],
                "plt.axhspan": [
                    330,
                    444
                ],
                "ax.invert_xaxis": [
                    335
                ],
                "ax.legend": [
                    337
                ],
                "ax.grid": [
                    338
                ],
                "ax.set_ylabel": [
                    340
                ],
                "plt.ticklabel_format": [
                    342
                ],
                "set_x": [
                    344
                ],
                "ax.yaxis.get_offset_text": [
                    344
                ],
                "ax.yaxis": [
                    344
                ],
                "self.wasion": [
                    347,
                    588
                ],
                "plt.isinteractive": [
                    347
                ],
                "plt.ion": [
                    348
                ],
                "self.ax": [
                    517,
                    349,
                    391
                ],
                "self.sp": [
                    352,
                    354,
                    398,
                    601,
                    596,
                    569
                ],
                "StatusPrinter": [
                    352
                ],
                "format_meter": [
                    354,
                    459,
                    466,
                    562,
                    596,
                    569
                ],
                "self.start_t": [
                    384,
                    513,
                    597,
                    358
                ],
                "self.last_print_t": [
                    385,
                    575,
                    358,
                    511
                ],
                "time": [
                    408,
                    595,
                    358,
                    510
                ],
                "self.last_print_n": [
                    386,
                    359,
                    594,
                    507,
                    476,
                    574
                ],
                "self.n": [
                    387,
                    360,
                    552,
                    522,
                    524,
                    594,
                    563,
                    597,
                    505,
                    570,
                    507,
                    477,
                    574
                ],
                "obj": [
                    400,
                    401,
                    374,
                    375
                ],
                "start_t": [
                    384,
                    411
                ],
                "last_print_t": [
                    385,
                    409,
                    473
                ],
                "last_print_n": [
                    472,
                    386,
                    476,
                    405
                ],
                "xdata": [
                    420,
                    455,
                    392,
                    428,
                    439,
                    440
                ],
                "ydata": [
                    421,
                    456,
                    393,
                    429,
                    439
                ],
                "zdata": [
                    422,
                    457,
                    394,
                    430,
                    440
                ],
                "line1": [
                    456,
                    395,
                    439
                ],
                "line2": [
                    440,
                    457,
                    396
                ],
                "sp": [
                    466,
                    398
                ],
                "delta_it": [
                    416,
                    407,
                    520,
                    405,
                    471,
                    507,
                    508,
                    573
                ],
                "cur_t": [
                    513,
                    420,
                    455,
                    473,
                    525,
                    558,
                    575,
                    595,
                    597,
                    408,
                    409,
                    411,
                    510,
                    511
                ],
                "delta_t": [
                    416,
                    512,
                    520,
                    409,
                    410,
                    511
                ],
                "y": [
                    416,
                    421,
                    520,
                    526,
                    433,
                    434,
                    536,
                    537
                ],
                "z": [
                    418,
                    422,
                    522,
                    527,
                    433,
                    536
                ],
                "xdata.append": [
                    420
                ],
                "ydata.append": [
                    421
                ],
                "zdata.append": [
                    422
                ],
                "xdata.popleft": [
                    428
                ],
                "ydata.popleft": [
                    429
                ],
                "zdata.popleft": [
                    430
                ],
                "ymin": [
                    450,
                    452,
                    550,
                    553,
                    555,
                    432,
                    435,
                    535,
                    538,
                    447
                ],
                "ymax": [
                    448,
                    449,
                    551,
                    552,
                    432,
                    433,
                    434,
                    435,
                    535,
                    536,
                    537,
                    538
                ],
                "ax.get_ylim": [
                    432,
                    535
                ],
                "ax.figure.canvas.draw": [
                    539,
                    436
                ],
                "ax.figure.canvas": [
                    539,
                    436
                ],
                "ax.figure": [
                    539,
                    436
                ],
                "line1.set_data": [
                    456,
                    439
                ],
                "line2.set_data": [
                    440,
                    457
                ],
                "poly_lims": [
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    545,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    442,
                    446,
                    447
                ],
                "self.hspan.get_xy": [
                    545,
                    442,
                    549,
                    446
                ],
                "self.hspan.set_xy": [
                    556,
                    453
                ],
                "t_ago": [
                    455,
                    456,
                    457,
                    558,
                    559,
                    560
                ],
                "i": [
                    558,
                    455
                ],
                "ax.set_title": [
                    562,
                    459
                ],
                "plt.pause": [
                    464
                ],
                "self.close": [
                    478
                ],
                "self.xdata.append": [
                    524
                ],
                "self.ydata.append": [
                    526
                ],
                "self.zdata.append": [
                    527
                ],
                "self.xdata.popleft": [
                    531
                ],
                "self.ydata.popleft": [
                    532
                ],
                "self.zdata.popleft": [
                    533
                ],
                "self.line1.set_data": [
                    542,
                    559
                ],
                "self.line2.set_data": [
                    560,
                    543
                ],
                "self.plt.axhspan": [
                    547
                ],
                "self.plt.pause": [
                    567
                ],
                "self.plt.ioff": [
                    589
                ],
                "self.plt.close": [
                    591
                ],
                "self.file.write": [
                    602,
                    599
                ],
                "tqdm": [
                    610
                ],
                "_range": [
                    610
                ],
                "args": [
                    610
                ],
                "kwargs": [
                    610
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_9/tqdm/tests/tests_tqdm.py",
                "test_function": "test_si_format",
                "test_function_code": "def test_si_format():\n    \"\"\" Test SI unit prefixes \"\"\"\n    assert '9.00 ' in format_meter(1, 9, 1, unit_scale=True, unit='B')\n    assert '99.0 ' in format_meter(1, 99, 1, unit_scale=True)\n    assert '999 ' in format_meter(1, 999, 1, unit_scale=True)\n    assert '9.99K ' in format_meter(1, 9994, 1, unit_scale=True)\n    assert '10.0K ' in format_meter(1, 9999, 1, unit_scale=True)\n    assert '99.5K ' in format_meter(1, 99499, 1, unit_scale=True)\n    assert '100K ' in format_meter(1, 99999, 1, unit_scale=True)\n    assert '1.00M ' in format_meter(1, 999999, 1, unit_scale=True)\n    assert '1.00G ' in format_meter(1, 999999999, 1, unit_scale=True)\n    assert '1.00T ' in format_meter(1, 999999999999, 1, unit_scale=True)\n    assert '1.00P ' in format_meter(1, 999999999999999, 1, unit_scale=True)\n    assert '1.00E ' in format_meter(1, 999999999999999999, 1, unit_scale=True)\n    assert '1.00Z ' in format_meter(1, 999999999999999999999, 1,\n                                    unit_scale=True)\n    assert '1.0Y ' in format_meter(1, 999999999999999999999999, 1,\n                                   unit_scale=True)\n    assert '10.0Y ' in format_meter(1, 9999999999999999999999999, 1,\n                                    unit_scale=True)\n    assert '100.0Y ' in format_meter(1, 99999999999999999999999999, 1,\n                                     unit_scale=True)\n    assert '1000.0Y ' in format_meter(1, 999999999999999999999999999, 1,\n                                      unit_scale=True)",
                "test_error": "AssertionError: assert '10.0K ' in '  0%|          | 1.00/10.00K [00:01<2:46:38, 1.00it/s]'  +  where '  0%|          | 1.00/10.00K [00:01<2:46:38, 1.00it/s]' = format_meter(1, 9999, 1, unit_scale=True)",
                "full_test_error": "def test_si_format():\n        \"\"\" Test SI unit prefixes \"\"\"\n        assert '9.00 ' in format_meter(1, 9, 1, unit_scale=True, unit='B')\n        assert '99.0 ' in format_meter(1, 99, 1, unit_scale=True)\n        assert '999 ' in format_meter(1, 999, 1, unit_scale=True)\n        assert '9.99K ' in format_meter(1, 9994, 1, unit_scale=True)\n>       assert '10.0K ' in format_meter(1, 9999, 1, unit_scale=True)\nE       AssertionError: assert '10.0K ' in '  0%|          | 1.00/10.00K [00:01<2:46:38, 1.00it/s]'\nE        +  where '  0%|          | 1.00/10.00K [00:01<2:46:38, 1.00it/s]' = format_meter(1, 9999, 1, unit_scale=True)\n\ntqdm/tests/tests_tqdm.py:52: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_9/tqdm/tests/tests_tqdm.py",
                "test_function": "test_update",
                "test_function_code": "def test_update():\n    \"\"\" Test manual creation and updates \"\"\"\n    our_file = StringIO()\n    progressbar = tqdm(total=2, file=our_file, miniters=1)\n    assert len(progressbar) == 2\n    progressbar.update(2)\n    our_file.seek(0)\n    assert '| 2/2' in our_file.read()\n    progressbar.desc = 'dynamically notify of 4 increments in total'\n    progressbar.total = 4\n    progressbar.update(-10)  # should default to +1\n    our_file.seek(0)\n    assert '| 3/4 ' in our_file.read()\n    our_file.seek(0)\n    assert 'dynamically notify of 4 increments in total' in our_file.read()\n    our_file.close()",
                "test_error": "TypeError: object of type 'NoneType' has no len()",
                "full_test_error": "def test_update():\n        \"\"\" Test manual creation and updates \"\"\"\n        our_file = StringIO()\n        progressbar = tqdm(total=2, file=our_file, miniters=1)\n>       assert len(progressbar) == 2\n\ntqdm/tests/tests_tqdm.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tqdm._tqdm.tqdm object at 0x10c7f6dd0>\n\n    def __len__(self):\n>       return len(self.iterable)\nE       TypeError: object of type 'NoneType' has no len()\n\ntqdm/_tqdm.py:363: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}