{
    "tqdm:2": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_2/tqdm/std.py": {
            "buggy_functions": [
                {
                    "function_name": "format_meter",
                    "function_code": "@staticmethod\ndef format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False, rate=None, bar_format=None,\n                 postfix=None, unit_divisor=1000, **extra_kwargs):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    n  : int or float\n        Number of finished iterations.\n    total  : int or float\n        The expected total number of iterations. If meaningless (None),\n        only basic progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes `{bar}` to stay within this bound\n        [default: None]. If `0`, will not print any bar (only stats).\n        The fallback is `{bar:10}`.\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n        Use as {desc} in bar_format string.\n    ascii  : bool, optional or str, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters\n        \" 123456789#\".\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool or int or float, optional\n        If 1 or True, the number of iterations will be printed with an\n        appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n        [default: False]. If any other non-zero number, will scale\n        `total` and `n`.\n    rate  : float, optional\n        Manual override for iteration rate.\n        If [default: None], uses n/elapsed.\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where\n        l_bar='{desc}: {percentage:3.0f}%|' and\n        r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n          '{rate_fmt}{postfix}]'\n        Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n          percentage, elapsed, elapsed_s, ncols, desc, unit,\n          rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n          rate_inv, rate_inv_fmt, postfix, unit_divisor,\n          remaining, remaining_s.\n        Note that a trailing \": \" is automatically removed after {desc}\n        if the latter is empty.\n    postfix  : *, optional\n        Similar to `prefix`, but placed at the end\n        (e.g. for additional stats).\n        Note: postfix is usually a string (not a dict) for this method,\n        and will if possible be set to postfix = ', ' + postfix.\n        However other types are supported (#382).\n    unit_divisor  : float, optional\n        [default: 1000], ignored unless `unit_scale` is True.\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    # sanity check: total\n    if total and n >= (total + 0.5):  # allow float imprecision (#849)\n        total = None\n\n    # apply custom scale if necessary\n    if unit_scale and unit_scale not in (True, 1):\n        if total:\n            total *= unit_scale\n        n *= unit_scale\n        if rate:\n            rate *= unit_scale  # by default rate = 1 / self.avg_time\n        unit_scale = False\n\n    elapsed_str = tqdm.format_interval(elapsed)\n\n    # if unspecified, attempt to use rate = average speed\n    # (we allow manual override since predicting time is an arcane art)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if rate else None\n    format_sizeof = tqdm.format_sizeof\n    rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                       '{0:5.2f}'.format(rate))\n                      if rate else '?') + unit + '/s'\n    rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                     '{0:5.2f}'.format(inv_rate))\n                    if inv_rate else '?') + 's/' + unit\n    rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n\n    if unit_scale:\n        n_fmt = format_sizeof(n, divisor=unit_divisor)\n        total_fmt = format_sizeof(total, divisor=unit_divisor) \\\n            if total is not None else '?'\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total) if total is not None else '?'\n\n    try:\n        postfix = ', ' + postfix if postfix else ''\n    except TypeError:\n        pass\n\n    remaining = (total - n) / rate if rate and total else 0\n    remaining_str = tqdm.format_interval(remaining) if rate else '?'\n\n    # format the stats displayed to the left and right sides of the bar\n    if prefix:\n        # old prefix setup work around\n        bool_prefix_colon_already = (prefix[-2:] == \": \")\n        l_bar = prefix if bool_prefix_colon_already else prefix + \": \"\n    else:\n        l_bar = ''\n\n    r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(\n        n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt, postfix)\n\n    # Custom bar formatting\n    # Populate a dict with all available progress indicators\n    format_dict = dict(\n        # slight extension of self.format_dict\n        n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt,\n        elapsed=elapsed_str, elapsed_s=elapsed,\n        ncols=ncols, desc=prefix or '', unit=unit,\n        rate=inv_rate if inv_rate and inv_rate > 1 else rate,\n        rate_fmt=rate_fmt, rate_noinv=rate,\n        rate_noinv_fmt=rate_noinv_fmt, rate_inv=inv_rate,\n        rate_inv_fmt=rate_inv_fmt,\n        postfix=postfix, unit_divisor=unit_divisor,\n        # plus more useful definitions\n        remaining=remaining_str, remaining_s=remaining,\n        l_bar=l_bar, r_bar=r_bar,\n        **extra_kwargs)\n\n    # total is known: we can predict some stats\n    if total:\n        # fractional and percentage progress\n        frac = n / total\n        percentage = frac * 100\n\n        l_bar += '{0:3.0f}%|'.format(percentage)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        format_dict.update(l_bar=l_bar)\n        if bar_format:\n            format_dict.update(percentage=percentage)\n\n            # auto-remove colon for empty `desc`\n            if not prefix:\n                bar_format = bar_format.replace(\"{desc}: \", '')\n        else:\n            bar_format = \"{l_bar}{bar}{r_bar}\"\n\n        full_bar = FormatReplace()\n        try:\n            nobar = bar_format.format(bar=full_bar, **format_dict)\n        except UnicodeEncodeError:\n            bar_format = _unicode(bar_format)\n            nobar = bar_format.format(bar=full_bar, **format_dict)\n        if not full_bar.format_called:\n            # no {bar}, we can just format and return\n            return nobar\n\n        # Formatting progress bar space available for bar's display\n        full_bar = Bar(\n            frac,\n            max(1, ncols - disp_len(nobar))\n            if ncols else 10,\n            charset=Bar.ASCII if ascii is True else ascii or Bar.UTF)\n        if not _is_ascii(full_bar.charset) and _is_ascii(bar_format):\n            bar_format = _unicode(bar_format)\n        res = bar_format.format(bar=full_bar, **format_dict)\n        if ncols:\n            return disp_trim(res, ncols)\n\n    elif bar_format:\n        # user-specified bar_format but no total\n        l_bar += '|'\n        format_dict.update(l_bar=l_bar, percentage=0)\n        full_bar = FormatReplace()\n        nobar = bar_format.format(bar=full_bar, **format_dict)\n        if not full_bar.format_called:\n            return nobar\n        full_bar = Bar(\n            0,\n            max(1, ncols - disp_len(nobar))\n            if ncols else 10,\n            charset=Bar.BLANK)\n        res = bar_format.format(bar=full_bar, **format_dict)\n        if ncols:\n            return disp_trim(res, ncols)\n    else:\n        # no total: no progressbar, ETA, just progress stats\n        return ((prefix + \": \") if prefix else '') + \\\n            '{0}{1} [{2}, {3}{4}]'.format(\n                n_fmt, unit, elapsed_str, rate_fmt, postfix)\n",
                    "decorators": [
                        "staticmethod"
                    ],
                    "docstring": "Return a string-based progress bar given some parameters\n\nParameters\n----------\nn  : int or float\n    Number of finished iterations.\ntotal  : int or float\n    The expected total number of iterations. If meaningless (None),\n    only basic progress statistics are displayed (no ETA).\nelapsed  : float\n    Number of seconds passed since start.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes `{bar}` to stay within this bound\n    [default: None]. If `0`, will not print any bar (only stats).\n    The fallback is `{bar:10}`.\nprefix  : str, optional\n    Prefix message (included in total width) [default: ''].\n    Use as {desc} in bar_format string.\nascii  : bool, optional or str, optional\n    If not set, use unicode (smooth blocks) to fill the meter\n    [default: False]. The fallback is to use ASCII characters\n    \" 123456789#\".\nunit  : str, optional\n    The iteration unit [default: 'it'].\nunit_scale  : bool or int or float, optional\n    If 1 or True, the number of iterations will be printed with an\n    appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n    [default: False]. If any other non-zero number, will scale\n    `total` and `n`.\nrate  : float, optional\n    Manual override for iteration rate.\n    If [default: None], uses n/elapsed.\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n      '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n      percentage, elapsed, elapsed_s, ncols, desc, unit,\n      rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n      rate_inv, rate_inv_fmt, postfix, unit_divisor,\n      remaining, remaining_s.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\npostfix  : *, optional\n    Similar to `prefix`, but placed at the end\n    (e.g. for additional stats).\n    Note: postfix is usually a string (not a dict) for this method,\n    and will if possible be set to postfix = ', ' + postfix.\n    However other types are supported (#382).\nunit_divisor  : float, optional\n    [default: 1000], ignored unless `unit_scale` is True.\n\nReturns\n-------\nout  : Formatted meter and stats, ready to display.",
                    "start_line": 310,
                    "end_line": 511,
                    "variables": {
                        "total": [
                            417,
                            449,
                            451,
                            435,
                            406,
                            407,
                            376,
                            377,
                            410,
                            381,
                            382
                        ],
                        "n": [
                            417,
                            451,
                            393,
                            435,
                            405,
                            376,
                            409,
                            383
                        ],
                        "unit_scale": [
                            385,
                            386,
                            396,
                            399,
                            404,
                            380,
                            382,
                            383
                        ],
                        "rate": [
                            384,
                            385,
                            417,
                            418,
                            392,
                            393,
                            394,
                            396,
                            397,
                            398,
                            438,
                            439
                        ],
                        "elapsed_str": [
                            436,
                            388,
                            429,
                            511
                        ],
                        "tqdm.format_interval": [
                            418,
                            388
                        ],
                        "tqdm": [
                            418,
                            395,
                            388
                        ],
                        "elapsed": [
                            392,
                            393,
                            436,
                            388
                        ],
                        "inv_rate": [
                            394,
                            399,
                            400,
                            401,
                            402,
                            438,
                            440
                        ],
                        "format_sizeof": [
                            395,
                            396,
                            399,
                            405,
                            406
                        ],
                        "tqdm.format_sizeof": [
                            395
                        ],
                        "rate_noinv_fmt": [
                            440,
                            402,
                            396
                        ],
                        "format": [
                            454,
                            428,
                            397,
                            400,
                            510
                        ],
                        "unit": [
                            401,
                            437,
                            398,
                            511
                        ],
                        "rate_inv_fmt": [
                            441,
                            402,
                            399
                        ],
                        "rate_fmt": [
                            402,
                            511,
                            429,
                            439
                        ],
                        "n_fmt": [
                            429,
                            435,
                            405,
                            409,
                            511
                        ],
                        "unit_divisor": [
                            442,
                            405,
                            406
                        ],
                        "total_fmt": [
                            410,
                            435,
                            429,
                            406
                        ],
                        "str": [
                            409,
                            410
                        ],
                        "postfix": [
                            442,
                            511,
                            413,
                            429
                        ],
                        "TypeError": [
                            414
                        ],
                        "remaining": [
                            417,
                            418,
                            444
                        ],
                        "remaining_str": [
                            418,
                            444,
                            429
                        ],
                        "prefix": [
                            421,
                            423,
                            424,
                            464,
                            437,
                            509
                        ],
                        "bool_prefix_colon_already": [
                            424,
                            423
                        ],
                        "l_bar": [
                            454,
                            424,
                            457,
                            426,
                            459,
                            493,
                            494,
                            445
                        ],
                        "r_bar": [
                            457,
                            428,
                            445
                        ],
                        "format_dict": [
                            487,
                            459,
                            461,
                            494,
                            496,
                            433,
                            471,
                            504,
                            474
                        ],
                        "dict": [
                            433
                        ],
                        "ncols": [
                            482,
                            483,
                            456,
                            488,
                            489,
                            437,
                            502,
                            501,
                            505,
                            506
                        ],
                        "extra_kwargs": [
                            446
                        ],
                        "frac": [
                            481,
                            451,
                            452
                        ],
                        "percentage": [
                            452,
                            461,
                            454
                        ],
                        "format_dict.update": [
                            459,
                            461,
                            494
                        ],
                        "bar_format": [
                            485,
                            486,
                            487,
                            491,
                            460,
                            496,
                            465,
                            467,
                            471,
                            504,
                            473,
                            474
                        ],
                        "bar_format.replace": [
                            465
                        ],
                        "full_bar": [
                            480,
                            485,
                            487,
                            495,
                            496,
                            497,
                            499,
                            469,
                            471,
                            504,
                            474,
                            475
                        ],
                        "FormatReplace": [
                            469,
                            495
                        ],
                        "nobar": [
                            482,
                            496,
                            498,
                            501,
                            471,
                            474,
                            477
                        ],
                        "bar_format.format": [
                            487,
                            496,
                            471,
                            504,
                            474
                        ],
                        "UnicodeEncodeError": [
                            472
                        ],
                        "_unicode": [
                            473,
                            486
                        ],
                        "full_bar.format_called": [
                            497,
                            475
                        ],
                        "Bar": [
                            480,
                            499,
                            484,
                            503
                        ],
                        "max": [
                            482,
                            501
                        ],
                        "disp_len": [
                            482,
                            501
                        ],
                        "ascii": [
                            484
                        ],
                        "Bar.ASCII": [
                            484
                        ],
                        "Bar.UTF": [
                            484
                        ],
                        "_is_ascii": [
                            485
                        ],
                        "full_bar.charset": [
                            485
                        ],
                        "res": [
                            504,
                            489,
                            506,
                            487
                        ],
                        "disp_trim": [
                            489,
                            506
                        ],
                        "Bar.BLANK": [
                            503
                        ],
                        "staticmethod": [
                            310
                        ]
                    },
                    "filtered_variables": {
                        "total": [
                            417,
                            449,
                            451,
                            435,
                            406,
                            407,
                            376,
                            377,
                            410,
                            381,
                            382
                        ],
                        "n": [
                            417,
                            451,
                            393,
                            435,
                            405,
                            376,
                            409,
                            383
                        ],
                        "unit_scale": [
                            385,
                            386,
                            396,
                            399,
                            404,
                            380,
                            382,
                            383
                        ],
                        "rate": [
                            384,
                            385,
                            417,
                            418,
                            392,
                            393,
                            394,
                            396,
                            397,
                            398,
                            438,
                            439
                        ],
                        "elapsed_str": [
                            436,
                            388,
                            429,
                            511
                        ],
                        "tqdm.format_interval": [
                            418,
                            388
                        ],
                        "tqdm": [
                            418,
                            395,
                            388
                        ],
                        "elapsed": [
                            392,
                            393,
                            436,
                            388
                        ],
                        "inv_rate": [
                            394,
                            399,
                            400,
                            401,
                            402,
                            438,
                            440
                        ],
                        "format_sizeof": [
                            395,
                            396,
                            399,
                            405,
                            406
                        ],
                        "tqdm.format_sizeof": [
                            395
                        ],
                        "rate_noinv_fmt": [
                            440,
                            402,
                            396
                        ],
                        "unit": [
                            401,
                            437,
                            398,
                            511
                        ],
                        "rate_inv_fmt": [
                            441,
                            402,
                            399
                        ],
                        "rate_fmt": [
                            402,
                            511,
                            429,
                            439
                        ],
                        "n_fmt": [
                            429,
                            435,
                            405,
                            409,
                            511
                        ],
                        "unit_divisor": [
                            442,
                            405,
                            406
                        ],
                        "total_fmt": [
                            410,
                            435,
                            429,
                            406
                        ],
                        "postfix": [
                            442,
                            511,
                            413,
                            429
                        ],
                        "remaining": [
                            417,
                            418,
                            444
                        ],
                        "remaining_str": [
                            418,
                            444,
                            429
                        ],
                        "prefix": [
                            421,
                            423,
                            424,
                            464,
                            437,
                            509
                        ],
                        "bool_prefix_colon_already": [
                            424,
                            423
                        ],
                        "l_bar": [
                            454,
                            424,
                            457,
                            426,
                            459,
                            493,
                            494,
                            445
                        ],
                        "r_bar": [
                            457,
                            428,
                            445
                        ],
                        "format_dict": [
                            487,
                            459,
                            461,
                            494,
                            496,
                            433,
                            471,
                            504,
                            474
                        ],
                        "ncols": [
                            482,
                            483,
                            456,
                            488,
                            489,
                            437,
                            502,
                            501,
                            505,
                            506
                        ],
                        "extra_kwargs": [
                            446
                        ],
                        "frac": [
                            481,
                            451,
                            452
                        ],
                        "percentage": [
                            452,
                            461,
                            454
                        ],
                        "format_dict.update": [
                            459,
                            461,
                            494
                        ],
                        "bar_format": [
                            485,
                            486,
                            487,
                            491,
                            460,
                            496,
                            465,
                            467,
                            471,
                            504,
                            473,
                            474
                        ],
                        "bar_format.replace": [
                            465
                        ],
                        "full_bar": [
                            480,
                            485,
                            487,
                            495,
                            496,
                            497,
                            499,
                            469,
                            471,
                            504,
                            474,
                            475
                        ],
                        "FormatReplace": [
                            469,
                            495
                        ],
                        "nobar": [
                            482,
                            496,
                            498,
                            501,
                            471,
                            474,
                            477
                        ],
                        "bar_format.format": [
                            487,
                            496,
                            471,
                            504,
                            474
                        ],
                        "_unicode": [
                            473,
                            486
                        ],
                        "full_bar.format_called": [
                            497,
                            475
                        ],
                        "Bar": [
                            480,
                            499,
                            484,
                            503
                        ],
                        "disp_len": [
                            482,
                            501
                        ],
                        "Bar.ASCII": [
                            484
                        ],
                        "Bar.UTF": [
                            484
                        ],
                        "_is_ascii": [
                            485
                        ],
                        "full_bar.charset": [
                            485
                        ],
                        "res": [
                            504,
                            489,
                            506,
                            487
                        ],
                        "disp_trim": [
                            489,
                            506
                        ],
                        "Bar.BLANK": [
                            503
                        ]
                    },
                    "diff_line_number": 488,
                    "class_data": {
                        "signature": "class tqdm(Comparable)",
                        "docstring": "Decorate an iterable object, returning an iterator which acts exactly\nlike the original iterable, but prints a dynamically updating\nprogressbar every time a value is requested.",
                        "constructor_docstring": "Parameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar.\ntotal  : int or float, optional\n    The number of expected iterations. If unspecified,\n    len(iterable) is used if possible. If float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no ETA, no progressbar).\n    If `gui` is True and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\nleave  : bool, optional\n    If [default: True], keeps all traces of the progressbar\n    upon termination of iteration.\n    If `None`, will leave only if `position` is `0`.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n    methods.  For encoding, see `write_bytes`.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes the progressbar to stay within this bound.\n    If unspecified, attempts to use environment width. The\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. If 0, will not print any meter (only stats).\nmininterval  : float, optional\n    Minimum progress display update interval [default: 0.1] seconds.\nmaxinterval  : float, optional\n    Maximum progress display update interval [default: 10] seconds.\n    Automatically adjusts `miniters` to correspond to `mininterval`\n    after long display update lag. Only works if `dynamic_miniters`\n    or monitor thread is enabled.\nminiters  : int or float, optional\n    Minimum progress display update interval, in iterations.\n    If 0 and `dynamic_miniters`, will automatically adjust to equal\n    `mininterval` (more CPU efficient, good for tight loops).\n    If > 0, will skip display of specified number of iterations.\n    Tweak this and `mininterval` to get very efficient loops.\n    If your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\nascii  : bool or str, optional\n    If unspecified or False, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters \" 123456789#\".\ndisable  : bool, optional\n    Whether to disable the entire progressbar wrapper\n    [default: False]. If set to None, disable on non-TTY.\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: it].\nunit_scale  : bool or int or float, optional\n    If 1 or True, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False]. If any other non-zero\n    number, will scale `total` and `n`.\ndynamic_ncols  : bool, optional\n    If set, constantly alters `ncols` to the environment (allowing\n    for window resizes) [default: False].\nsmoothing  : float, optional\n    Exponential moving average smoothing factor for speed estimates\n    (ignored in GUI mode). Ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n      '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n      percentage, elapsed, elapsed_s, ncols, desc, unit,\n      rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n      rate_inv, rate_inv_fmt, postfix, unit_divisor,\n      remaining, remaining_s.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\ninitial  : int or float, optional\n    The initial counter value. Useful when restarting a progress\n    bar [default: 0]. If using float, consider specifying `{n:.3f}`\n    or similar in `bar_format`, or specifying `unit_scale`.\nposition  : int, optional\n    Specify the line offset to print this bar (starting from 0)\n    Automatic if unspecified.\n    Useful to manage multiple bars at once (eg, from threads).\npostfix  : dict or *, optional\n    Specify additional stats to display at the end of the bar.\n    Calls `set_postfix(**postfix)` if possible (dict).\nunit_divisor  : float, optional\n    [default: 1000], ignored unless `unit_scale` is True.\nwrite_bytes  : bool, optional\n    If (default: None) and `file` is unspecified,\n    bytes will be written in Python 2. If `True` will also write\n    bytes. In all other cases will default to unicode.\nlock_args  : tuple, optional\n    Passed to `refresh` for intermediate output\n    (initialisation, iterating, and updating).\ngui  : bool, optional\n    WARNING: internal parameter - do not use.\n    Use tqdm.gui.tqdm(...) instead. If set, will attempt to use\n    matplotlib animations for a graphical output [default: False].\n\nReturns\n-------\nout  : decorated iterator.",
                        "functions": [
                            "@staticmethod\ndef format_sizeof(num, suffix='', divisor=1000):\n    \"\"\"\n    Formats a number (greater than unity) with SI Order of Magnitude\n    prefixes.\n\n    Parameters\n    ----------\n    num  : float\n        Number ( >= 1) to format.\n    suffix  : str, optional\n        Post-postfix [default: ''].\n    divisor  : float, optional\n        Divisor between prefixes [default: 1000].\n\n    Returns\n    -------\n    out  : str\n        Number with Order of Magnitude SI unit postfix.\n    \"\"\"\n    for unit in ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(num) < 999.5:\n            if abs(num) < 99.95:\n                if abs(num) < 9.995:\n                    return '{0:1.2f}'.format(num) + unit + suffix\n                return '{0:2.1f}'.format(num) + unit + suffix\n            return '{0:3.0f}'.format(num) + unit + suffix\n        num /= divisor\n    return '{0:3.1f}Y'.format(num) + suffix",
                            "@staticmethod\ndef format_interval(t):\n    \"\"\"\n    Formats a number of seconds as a clock time, [H:]MM:SS\n\n    Parameters\n    ----------\n    t  : int\n        Number of seconds.\n\n    Returns\n    -------\n    out  : str\n        [H:]MM:SS\n    \"\"\"\n    mins, s = divmod(int(t), 60)\n    h, m = divmod(mins, 60)\n    if h:\n        return '{0:d}:{1:02d}:{2:02d}'.format(h, m, s)\n    else:\n        return '{0:02d}:{1:02d}'.format(m, s)",
                            "@staticmethod\ndef format_num(n):\n    \"\"\"\n    Intelligent scientific notation (.3g).\n\n    Parameters\n    ----------\n    n  : int or float or Numeric\n        A Number.\n\n    Returns\n    -------\n    out  : str\n        Formatted number.\n    \"\"\"\n    f = '{0:.3g}'.format(n).replace('+0', '+').replace('-0', '-')\n    n = str(n)\n    return f if len(f) < len(n) else n",
                            "@staticmethod\ndef ema(x, mu=None, alpha=0.3):\n    \"\"\"\n    Exponential moving average: smoothing to give progressively lower\n    weights to older values.\n\n    Parameters\n    ----------\n    x  : float\n        New value to include in EMA.\n    mu  : float, optional\n        Previous EMA value.\n    alpha  : float, optional\n        Smoothing factor in range [0, 1], [default: 0.3].\n        Increase to give more weight to recent values.\n        Ranges from 0 (yields mu) to 1 (yields x).\n    \"\"\"\n    return x if mu is None else alpha * x + (1 - alpha) * mu",
                            "@staticmethod\ndef status_printer(file):\n    \"\"\"\n    Manage the printing and in-place updating of a line of characters.\n    Note that if the string is longer than a line, then in-place\n    updating may not work (it will print a new line at each refresh).\n    \"\"\"\n    fp = file\n    fp_flush = getattr(fp, 'flush', lambda: None)\n\n    def fp_write(s):\n        fp.write(_unicode(s))\n        fp_flush()\n    last_len = [0]\n\n    def print_status(s):\n        len_s = len(s)\n        fp_write('\\r' + s + ' ' * max(last_len[0] - len_s, 0))\n        last_len[0] = len_s\n    return print_status",
                            "@staticmethod\ndef format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000, **extra_kwargs):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    n  : int or float\n        Number of finished iterations.\n    total  : int or float\n        The expected total number of iterations. If meaningless (None),\n        only basic progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes `{bar}` to stay within this bound\n        [default: None]. If `0`, will not print any bar (only stats).\n        The fallback is `{bar:10}`.\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n        Use as {desc} in bar_format string.\n    ascii  : bool, optional or str, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters\n        \" 123456789#\".\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool or int or float, optional\n        If 1 or True, the number of iterations will be printed with an\n        appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n        [default: False]. If any other non-zero number, will scale\n        `total` and `n`.\n    rate  : float, optional\n        Manual override for iteration rate.\n        If [default: None], uses n/elapsed.\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where\n        l_bar='{desc}: {percentage:3.0f}%|' and\n        r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n          '{rate_fmt}{postfix}]'\n        Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n          percentage, elapsed, elapsed_s, ncols, desc, unit,\n          rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n          rate_inv, rate_inv_fmt, postfix, unit_divisor,\n          remaining, remaining_s.\n        Note that a trailing \": \" is automatically removed after {desc}\n        if the latter is empty.\n    postfix  : *, optional\n        Similar to `prefix`, but placed at the end\n        (e.g. for additional stats).\n        Note: postfix is usually a string (not a dict) for this method,\n        and will if possible be set to postfix = ', ' + postfix.\n        However other types are supported (#382).\n    unit_divisor  : float, optional\n        [default: 1000], ignored unless `unit_scale` is True.\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    if total and n >= total + 0.5:\n        total = None\n    if unit_scale and unit_scale not in (True, 1):\n        if total:\n            total *= unit_scale\n        n *= unit_scale\n        if rate:\n            rate *= unit_scale\n        unit_scale = False\n    elapsed_str = tqdm.format_interval(elapsed)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if rate else None\n    format_sizeof = tqdm.format_sizeof\n    rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else '{0:5.2f}'.format(rate)) if rate else '?') + unit + '/s'\n    rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else '{0:5.2f}'.format(inv_rate)) if inv_rate else '?') + 's/' + unit\n    rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n    if unit_scale:\n        n_fmt = format_sizeof(n, divisor=unit_divisor)\n        total_fmt = format_sizeof(total, divisor=unit_divisor) if total is not None else '?'\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total) if total is not None else '?'\n    try:\n        postfix = ', ' + postfix if postfix else ''\n    except TypeError:\n        pass\n    remaining = (total - n) / rate if rate and total else 0\n    remaining_str = tqdm.format_interval(remaining) if rate else '?'\n    if prefix:\n        bool_prefix_colon_already = prefix[-2:] == ': '\n        l_bar = prefix if bool_prefix_colon_already else prefix + ': '\n    else:\n        l_bar = ''\n    r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt, postfix)\n    format_dict = dict(n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt, elapsed=elapsed_str, elapsed_s=elapsed, ncols=ncols, desc=prefix or '', unit=unit, rate=inv_rate if inv_rate and inv_rate > 1 else rate, rate_fmt=rate_fmt, rate_noinv=rate, rate_noinv_fmt=rate_noinv_fmt, rate_inv=inv_rate, rate_inv_fmt=rate_inv_fmt, postfix=postfix, unit_divisor=unit_divisor, remaining=remaining_str, remaining_s=remaining, l_bar=l_bar, r_bar=r_bar, **extra_kwargs)\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        l_bar += '{0:3.0f}%|'.format(percentage)\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n        format_dict.update(l_bar=l_bar)\n        if bar_format:\n            format_dict.update(percentage=percentage)\n            if not prefix:\n                bar_format = bar_format.replace('{desc}: ', '')\n        else:\n            bar_format = '{l_bar}{bar}{r_bar}'\n        full_bar = FormatReplace()\n        try:\n            nobar = bar_format.format(bar=full_bar, **format_dict)\n        except UnicodeEncodeError:\n            bar_format = _unicode(bar_format)\n            nobar = bar_format.format(bar=full_bar, **format_dict)\n        if not full_bar.format_called:\n            return nobar\n        full_bar = Bar(frac, max(1, ncols - disp_len(nobar)) if ncols else 10, charset=Bar.ASCII if ascii is True else ascii or Bar.UTF)\n        if not _is_ascii(full_bar.charset) and _is_ascii(bar_format):\n            bar_format = _unicode(bar_format)\n        res = bar_format.format(bar=full_bar, **format_dict)\n        if ncols:\n            return disp_trim(res, ncols)\n    elif bar_format:\n        l_bar += '|'\n        format_dict.update(l_bar=l_bar, percentage=0)\n        full_bar = FormatReplace()\n        nobar = bar_format.format(bar=full_bar, **format_dict)\n        if not full_bar.format_called:\n            return nobar\n        full_bar = Bar(0, max(1, ncols - disp_len(nobar)) if ncols else 10, charset=Bar.BLANK)\n        res = bar_format.format(bar=full_bar, **format_dict)\n        if ncols:\n            return disp_trim(res, ncols)\n    else:\n        return (prefix + ': ' if prefix else '') + '{0}{1} [{2}, {3}{4}]'.format(n_fmt, unit, elapsed_str, rate_fmt, postfix)",
                            "def __new__(cls, *args, **kwargs):\n    instance = object.__new__(cls)\n    with cls.get_lock():\n        if not hasattr(cls, '_instances'):\n            cls._instances = WeakSet()\n        cls._instances.add(instance)\n        if cls.monitor_interval and (cls.monitor is None or not cls.monitor.report()):\n            try:\n                cls.monitor = TMonitor(cls, cls.monitor_interval)\n            except Exception as e:\n                warn('tqdm:disabling monitor support (monitor_interval = 0) due to:\\n' + str(e), TqdmMonitorWarning, stacklevel=2)\n                cls.monitor_interval = 0\n    return instance",
                            "@classmethod\ndef _get_free_pos(cls, instance=None):\n    \"\"\"Skips specified instance.\"\"\"\n    positions = set((abs(inst.pos) for inst in cls._instances if inst is not instance and hasattr(inst, 'pos')))\n    return min(set(range(len(positions) + 1)).difference(positions))",
                            "@classmethod\ndef _decr_instances(cls, instance):\n    \"\"\"\n    Remove from list and reposition other bars\n    so that newer bars won't overlap previous bars\n    \"\"\"\n    with cls._lock:\n        try:\n            cls._instances.remove(instance)\n        except KeyError:\n            pass\n        if not instance.gui:\n            for inst in cls._instances:\n                if hasattr(inst, 'pos') and inst.pos > abs(instance.pos):\n                    inst.clear(nolock=True)\n                    inst.pos -= 1\n        if not cls._instances and cls.monitor:\n            try:\n                cls.monitor.exit()\n                del cls.monitor\n            except AttributeError:\n                pass\n            else:\n                cls.monitor = None",
                            "@classmethod\ndef write(cls, s, file=None, end='\\n', nolock=False):\n    \"\"\"Print a message via tqdm (without overlap with bars).\"\"\"\n    fp = file if file is not None else sys.stdout\n    with cls.external_write_mode(file=file, nolock=nolock):\n        fp.write(s)\n        fp.write(end)",
                            "@classmethod\n@contextmanager\ndef external_write_mode(cls, file=None, nolock=False):\n    \"\"\"\n    Disable tqdm within context and refresh tqdm when exits.\n    Useful when writing to standard output stream\n    \"\"\"\n    fp = file if file is not None else sys.stdout\n    if not nolock:\n        cls.get_lock().acquire()\n    inst_cleared = []\n    for inst in getattr(cls, '_instances', []):\n        if hasattr(inst, 'start_t') and (inst.fp == fp or all((f in (sys.stdout, sys.stderr) for f in (fp, inst.fp)))):\n            inst.clear(nolock=True)\n            inst_cleared.append(inst)\n    yield\n    for inst in inst_cleared:\n        inst.refresh(nolock=True)\n    if not nolock:\n        cls._lock.release()",
                            "@classmethod\ndef set_lock(cls, lock):\n    \"\"\"Set the global lock.\"\"\"\n    cls._lock = lock",
                            "@classmethod\ndef get_lock(cls):\n    \"\"\"Get the global lock. Construct it if it does not exist.\"\"\"\n    if not hasattr(cls, '_lock'):\n        cls._lock = TqdmDefaultWriteLock()\n    return cls._lock",
                            "@classmethod\ndef pandas(tclass, *targs, **tkwargs):\n    \"\"\"\n    Registers the given `tqdm` class with\n        pandas.core.\n        ( frame.DataFrame\n        | series.Series\n        | groupby.(generic.)DataFrameGroupBy\n        | groupby.(generic.)SeriesGroupBy\n        ).progress_apply\n\n    A new instance will be create every time `progress_apply` is called,\n    and each instance will automatically close() upon completion.\n\n    Parameters\n    ----------\n    targs, tkwargs  : arguments for the tqdm instance\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> import numpy as np\n    >>> from tqdm import tqdm\n    >>> from tqdm.gui import tqdm as tqdm_gui\n    >>>\n    >>> df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))\n    >>> tqdm.pandas(ncols=50)  # can use tqdm_gui, optional kwargs, etc\n    >>> # Now you can use `progress_apply` instead of `apply`\n    >>> df.groupby(0).progress_apply(lambda x: x**2)\n\n    References\n    ----------\n    https://stackoverflow.com/questions/18603270/\n    progress-indicator-during-pandas-operations-python\n    \"\"\"\n    from pandas.core.frame import DataFrame\n    from pandas.core.series import Series\n    try:\n        from pandas import Panel\n    except ImportError:\n        Panel = None\n    try:\n        from pandas.core.window import _Rolling_and_Expanding\n    except ImportError:\n        _Rolling_and_Expanding = None\n    try:\n        from pandas.core.groupby.generic import DataFrameGroupBy, SeriesGroupBy\n    except ImportError:\n        try:\n            from pandas.core.groupby.groupby import DataFrameGroupBy, SeriesGroupBy\n        except ImportError:\n            from pandas.core.groupby import DataFrameGroupBy, SeriesGroupBy\n    try:\n        from pandas.core.groupby.groupby import GroupBy\n    except ImportError:\n        from pandas.core.groupby import GroupBy\n    try:\n        from pandas.core.groupby.groupby import PanelGroupBy\n    except ImportError:\n        try:\n            from pandas.core.groupby import PanelGroupBy\n        except ImportError:\n            PanelGroupBy = None\n    deprecated_t = [tkwargs.pop('deprecated_t', None)]\n\n    def inner_generator(df_function='apply'):\n\n        def inner(df, func, *args, **kwargs):\n            \"\"\"\n            Parameters\n            ----------\n            df  : (DataFrame|Series)[GroupBy]\n                Data (may be grouped).\n            func  : function\n                To be applied on the (grouped) data.\n            **kwargs  : optional\n                Transmitted to `df.apply()`.\n            \"\"\"\n            total = tkwargs.pop('total', getattr(df, 'ngroups', None))\n            if total is None:\n                if df_function == 'applymap':\n                    total = df.size\n                elif isinstance(df, Series):\n                    total = len(df)\n                elif _Rolling_and_Expanding is None or not isinstance(df, _Rolling_and_Expanding):\n                    axis = kwargs.get('axis', 0)\n                    if axis == 'index':\n                        axis = 0\n                    elif axis == 'columns':\n                        axis = 1\n                    total = df.size // df.shape[axis]\n            if deprecated_t[0] is not None:\n                t = deprecated_t[0]\n                deprecated_t[0] = None\n            else:\n                t = tclass(*targs, total=total, **tkwargs)\n            if len(args) > 0:\n                TqdmDeprecationWarning('Except func, normal arguments are intentionally' + ' not supported by' + ' `(DataFrame|Series|GroupBy).progress_apply`.' + ' Use keyword arguments instead.', fp_write=getattr(t.fp, 'write', sys.stderr.write))\n            try:\n                func = df._is_builtin_func(func)\n            except TypeError:\n                pass\n\n            def wrapper(*args, **kwargs):\n                t.update(n=1 if not t.total or t.n < t.total else 0)\n                return func(*args, **kwargs)\n            result = getattr(df, df_function)(wrapper, **kwargs)\n            t.close()\n            return result\n        return inner\n    Series.progress_apply = inner_generator()\n    SeriesGroupBy.progress_apply = inner_generator()\n    Series.progress_map = inner_generator('map')\n    SeriesGroupBy.progress_map = inner_generator('map')\n    DataFrame.progress_apply = inner_generator()\n    DataFrameGroupBy.progress_apply = inner_generator()\n    DataFrame.progress_applymap = inner_generator('applymap')\n    if Panel is not None:\n        Panel.progress_apply = inner_generator()\n    if PanelGroupBy is not None:\n        PanelGroupBy.progress_apply = inner_generator()\n    GroupBy.progress_apply = inner_generator()\n    GroupBy.progress_aggregate = inner_generator('aggregate')\n    GroupBy.progress_transform = inner_generator('transform')\n    if _Rolling_and_Expanding is not None:\n        _Rolling_and_Expanding.progress_apply = inner_generator()",
                            "def __init__(self, iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, write_bytes=None, lock_args=None, gui=False, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar.\n    total  : int or float, optional\n        The number of expected iterations. If unspecified,\n        len(iterable) is used if possible. If float(\"inf\") or as a last\n        resort, only basic progress statistics are displayed\n        (no ETA, no progressbar).\n        If `gui` is True and this parameter needs subsequent updating,\n        specify an initial arbitrary large positive number,\n        e.g. 9e9.\n    leave  : bool, optional\n        If [default: True], keeps all traces of the progressbar\n        upon termination of iteration.\n        If `None`, will leave only if `position` is `0`.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n        methods.  For encoding, see `write_bytes`.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes the progressbar to stay within this bound.\n        If unspecified, attempts to use environment width. The\n        fallback is a meter width of 10 and no limit for the counter and\n        statistics. If 0, will not print any meter (only stats).\n    mininterval  : float, optional\n        Minimum progress display update interval [default: 0.1] seconds.\n    maxinterval  : float, optional\n        Maximum progress display update interval [default: 10] seconds.\n        Automatically adjusts `miniters` to correspond to `mininterval`\n        after long display update lag. Only works if `dynamic_miniters`\n        or monitor thread is enabled.\n    miniters  : int or float, optional\n        Minimum progress display update interval, in iterations.\n        If 0 and `dynamic_miniters`, will automatically adjust to equal\n        `mininterval` (more CPU efficient, good for tight loops).\n        If > 0, will skip display of specified number of iterations.\n        Tweak this and `mininterval` to get very efficient loops.\n        If your progress is erratic with both fast and slow iterations\n        (network, skipping items, etc) you should set miniters=1.\n    ascii  : bool or str, optional\n        If unspecified or False, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters \" 123456789#\".\n    disable  : bool, optional\n        Whether to disable the entire progressbar wrapper\n        [default: False]. If set to None, disable on non-TTY.\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: it].\n    unit_scale  : bool or int or float, optional\n        If 1 or True, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False]. If any other non-zero\n        number, will scale `total` and `n`.\n    dynamic_ncols  : bool, optional\n        If set, constantly alters `ncols` to the environment (allowing\n        for window resizes) [default: False].\n    smoothing  : float, optional\n        Exponential moving average smoothing factor for speed estimates\n        (ignored in GUI mode). Ranges from 0 (average speed) to 1\n        (current/instantaneous speed) [default: 0.3].\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where\n        l_bar='{desc}: {percentage:3.0f}%|' and\n        r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n          '{rate_fmt}{postfix}]'\n        Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n          percentage, elapsed, elapsed_s, ncols, desc, unit,\n          rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n          rate_inv, rate_inv_fmt, postfix, unit_divisor,\n          remaining, remaining_s.\n        Note that a trailing \": \" is automatically removed after {desc}\n        if the latter is empty.\n    initial  : int or float, optional\n        The initial counter value. Useful when restarting a progress\n        bar [default: 0]. If using float, consider specifying `{n:.3f}`\n        or similar in `bar_format`, or specifying `unit_scale`.\n    position  : int, optional\n        Specify the line offset to print this bar (starting from 0)\n        Automatic if unspecified.\n        Useful to manage multiple bars at once (eg, from threads).\n    postfix  : dict or *, optional\n        Specify additional stats to display at the end of the bar.\n        Calls `set_postfix(**postfix)` if possible (dict).\n    unit_divisor  : float, optional\n        [default: 1000], ignored unless `unit_scale` is True.\n    write_bytes  : bool, optional\n        If (default: None) and `file` is unspecified,\n        bytes will be written in Python 2. If `True` will also write\n        bytes. In all other cases will default to unicode.\n    lock_args  : tuple, optional\n        Passed to `refresh` for intermediate output\n        (initialisation, iterating, and updating).\n    gui  : bool, optional\n        WARNING: internal parameter - do not use.\n        Use tqdm.gui.tqdm(...) instead. If set, will attempt to use\n        matplotlib animations for a graphical output [default: False].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    if write_bytes is None:\n        write_bytes = file is None and sys.version_info < (3,)\n    if file is None:\n        file = sys.stderr\n    if write_bytes:\n        file = SimpleTextIOWrapper(file, encoding=getattr(file, 'encoding', None) or 'utf-8')\n    if disable is None and hasattr(file, 'isatty') and (not file.isatty()):\n        disable = True\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n    if total == float('inf'):\n        total = None\n    if disable:\n        self.iterable = iterable\n        self.disable = disable\n        with self._lock:\n            self.pos = self._get_free_pos(self)\n            self._instances.remove(self)\n        self.n = initial\n        self.total = total\n        return\n    if kwargs:\n        self.disable = True\n        with self._lock:\n            self.pos = self._get_free_pos(self)\n            self._instances.remove(self)\n        raise TqdmDeprecationWarning('`nested` is deprecated and automated.\\nUse `position` instead for manual control.\\n', fp_write=getattr(file, 'write', sys.stderr.write)) if 'nested' in kwargs else TqdmKeyError('Unknown argument(s): ' + str(kwargs))\n    if ncols is None and file in (sys.stderr, sys.stdout) or dynamic_ncols:\n        if dynamic_ncols:\n            dynamic_ncols = _environ_cols_wrapper()\n            if dynamic_ncols:\n                ncols = dynamic_ncols(file)\n        else:\n            _dynamic_ncols = _environ_cols_wrapper()\n            if _dynamic_ncols:\n                ncols = _dynamic_ncols(file)\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n    if mininterval is None:\n        mininterval = 0\n    if maxinterval is None:\n        maxinterval = 0\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n    if bar_format and (not (ascii is True or _is_ascii(ascii))):\n        bar_format = _unicode(bar_format)\n    if smoothing is None:\n        smoothing = 0\n    self.iterable = iterable\n    self.desc = desc or ''\n    self.total = total\n    self.leave = leave\n    self.fp = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.maxinterval = maxinterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.unit_divisor = unit_divisor\n    self.lock_args = lock_args\n    self.gui = gui\n    self.dynamic_ncols = dynamic_ncols\n    self.smoothing = smoothing\n    self.avg_time = None\n    self._time = time\n    self.bar_format = bar_format\n    self.postfix = None\n    if postfix:\n        try:\n            self.set_postfix(refresh=False, **postfix)\n        except TypeError:\n            self.postfix = postfix\n    self.last_print_n = initial\n    self.n = initial\n    with self._lock:\n        if position is None:\n            self.pos = self._get_free_pos(self)\n        else:\n            self.pos = -position\n    if not gui:\n        self.sp = self.status_printer(self.fp)\n        self.refresh(lock_args=self.lock_args)\n    self.last_print_t = self._time()\n    self.start_t = self.last_print_t",
                            "def __bool__(self):\n    if self.total is not None:\n        return self.total > 0\n    if self.iterable is None:\n        raise TypeError('bool() undefined when iterable == total == None')\n    return bool(self.iterable)",
                            "def __nonzero__(self):\n    return self.__bool__()",
                            "def __len__(self):\n    return self.total if self.iterable is None else self.iterable.shape[0] if hasattr(self.iterable, 'shape') else len(self.iterable) if hasattr(self.iterable, '__len__') else getattr(self, 'total', None)",
                            "def __enter__(self):\n    return self",
                            "def __exit__(self, exc_type, exc_value, traceback):\n    try:\n        self.close()\n    except AttributeError:\n        if (exc_type, exc_value, traceback) == (None, None, None):\n            raise\n        warn('AttributeError ignored', TqdmWarning, stacklevel=2)",
                            "def __del__(self):\n    self.close()",
                            "def __repr__(self):\n    return self.format_meter(**self.format_dict)",
                            "@property\ndef _comparable(self):\n    return abs(getattr(self, 'pos', 1 << 31))",
                            "def __hash__(self):\n    return id(self)",
                            "def __iter__(self):\n    \"\"\"Backward-compatibility to use: for x in tqdm(iterable)\"\"\"\n    iterable = self.iterable\n    if self.disable:\n        for obj in iterable:\n            yield obj\n        return\n    mininterval = self.mininterval\n    maxinterval = self.maxinterval\n    miniters = self.miniters\n    dynamic_miniters = self.dynamic_miniters\n    last_print_t = self.last_print_t\n    last_print_n = self.last_print_n\n    n = self.n\n    smoothing = self.smoothing\n    avg_time = self.avg_time\n    time = self._time\n    if not hasattr(self, 'sp'):\n        raise TqdmDeprecationWarning('Please use `tqdm.gui.tqdm(...)` instead of `tqdm(..., gui=True)`\\n', fp_write=getattr(self.fp, 'write', sys.stderr.write))\n    for obj in iterable:\n        yield obj\n        n += 1\n        if n - last_print_n >= self.miniters:\n            miniters = self.miniters\n            delta_t = time() - last_print_t\n            if delta_t >= mininterval:\n                cur_t = time()\n                delta_it = n - last_print_n\n                if smoothing and delta_t and delta_it:\n                    rate = delta_t / delta_it\n                    avg_time = self.ema(rate, avg_time, smoothing)\n                    self.avg_time = avg_time\n                self.n = n\n                self.refresh(lock_args=self.lock_args)\n                if dynamic_miniters:\n                    if maxinterval and delta_t >= maxinterval:\n                        if mininterval:\n                            miniters = delta_it * mininterval / delta_t\n                        else:\n                            miniters = delta_it * maxinterval / delta_t\n                    elif smoothing:\n                        rate = delta_it\n                        if mininterval and delta_t:\n                            rate *= mininterval / delta_t\n                        miniters = self.ema(rate, miniters, smoothing)\n                    else:\n                        miniters = max(miniters, delta_it)\n                self.n = self.last_print_n = last_print_n = n\n                self.last_print_t = last_print_t = cur_t\n                self.miniters = miniters\n    self.last_print_n = last_print_n\n    self.n = n\n    self.miniters = miniters\n    self.close()",
                            "def update(self, n=1):\n    \"\"\"\n    Manually update the progress bar, useful for streams\n    such as reading files.\n    E.g.:\n    >>> t = tqdm(total=filesize) # Initialise\n    >>> for current_buffer in stream:\n    ...    ...\n    ...    t.update(len(current_buffer))\n    >>> t.close()\n    The last line is highly recommended, but possibly not necessary if\n    `t.update()` will be called in such a way that `filesize` will be\n    exactly reached and printed.\n\n    Parameters\n    ----------\n    n  : int or float, optional\n        Increment to add to the internal counter of iterations\n        [default: 1]. If using float, consider specifying `{n:.3f}`\n        or similar in `bar_format`, or specifying `unit_scale`.\n    \"\"\"\n    if self.disable:\n        return\n    if n < 0:\n        self.last_print_n += n\n    self.n += n\n    if self.n - self.last_print_n >= self.miniters:\n        delta_t = self._time() - self.last_print_t\n        if delta_t >= self.mininterval:\n            cur_t = self._time()\n            delta_it = self.n - self.last_print_n\n            if self.smoothing and delta_t and delta_it:\n                rate = delta_t / delta_it\n                self.avg_time = self.ema(rate, self.avg_time, self.smoothing)\n            if not hasattr(self, 'sp'):\n                raise TqdmDeprecationWarning('Please use `tqdm.gui.tqdm(...)` instead of `tqdm(..., gui=True)`\\n', fp_write=getattr(self.fp, 'write', sys.stderr.write))\n            self.refresh(lock_args=self.lock_args)\n            if self.dynamic_miniters:\n                if self.maxinterval and delta_t >= self.maxinterval:\n                    if self.mininterval:\n                        self.miniters = delta_it * self.mininterval / delta_t\n                    else:\n                        self.miniters = delta_it * self.maxinterval / delta_t\n                elif self.smoothing:\n                    self.miniters = self.smoothing * delta_it * (self.mininterval / delta_t if self.mininterval and delta_t else 1) + (1 - self.smoothing) * self.miniters\n                else:\n                    self.miniters = max(self.miniters, delta_it)\n            self.last_print_n = self.n\n            self.last_print_t = cur_t",
                            "def close(self):\n    \"\"\"Cleanup and (if leave=False) close the progressbar.\"\"\"\n    if self.disable:\n        return\n    self.disable = True\n    pos = abs(self.pos)\n    self._decr_instances(self)\n    if not hasattr(self, 'sp'):\n        return\n\n    def fp_write(s):\n        self.fp.write(_unicode(s))\n    try:\n        fp_write('')\n    except ValueError as e:\n        if 'closed' in str(e):\n            return\n        raise\n    leave = pos == 0 if self.leave is None else self.leave\n    with self._lock:\n        if leave:\n            self.avg_time = None\n            self.display(pos=0)\n            fp_write('\\n')\n        else:\n            self.display(msg='', pos=pos)\n            if not pos:\n                fp_write('\\r')",
                            "def clear(self, nolock=False):\n    \"\"\"Clear current bar display.\"\"\"\n    if self.disable:\n        return\n    if not nolock:\n        self._lock.acquire()\n    self.moveto(abs(self.pos))\n    self.sp('')\n    self.fp.write('\\r')\n    self.moveto(-abs(self.pos))\n    if not nolock:\n        self._lock.release()",
                            "def refresh(self, nolock=False, lock_args=None):\n    \"\"\"\n    Force refresh the display of this bar.\n\n    Parameters\n    ----------\n    nolock  : bool, optional\n        If `True`, does not lock.\n        If [default: `False`]: calls `acquire()` on internal lock.\n    lock_args  : tuple, optional\n        Passed to internal lock's `acquire()`.\n        If specified, will only `display()` if `acquire()` returns `True`.\n    \"\"\"\n    if self.disable:\n        return\n    if not nolock:\n        if lock_args:\n            if not self._lock.acquire(*lock_args):\n                return False\n        else:\n            self._lock.acquire()\n    self.display()\n    if not nolock:\n        self._lock.release()\n    return True",
                            "def unpause(self):\n    \"\"\"Restart tqdm timer from last print time.\"\"\"\n    cur_t = self._time()\n    self.start_t += cur_t - self.last_print_t\n    self.last_print_t = cur_t",
                            "def reset(self, total=None):\n    \"\"\"\n    Resets to 0 iterations for repeated use.\n\n    Consider combining with `leave=True`.\n\n    Parameters\n    ----------\n    total  : int or float, optional. Total to use for the new bar.\n    \"\"\"\n    self.last_print_n = self.n = 0\n    self.last_print_t = self.start_t = self._time()\n    if total is not None:\n        self.total = total\n    self.refresh()",
                            "def set_description(self, desc=None, refresh=True):\n    \"\"\"\n    Set/modify description of the progress bar.\n\n    Parameters\n    ----------\n    desc  : str, optional\n    refresh  : bool, optional\n        Forces refresh [default: True].\n    \"\"\"\n    self.desc = desc + ': ' if desc else ''\n    if refresh:\n        self.refresh()",
                            "def set_description_str(self, desc=None, refresh=True):\n    \"\"\"Set/modify description without ': ' appended.\"\"\"\n    self.desc = desc or ''\n    if refresh:\n        self.refresh()",
                            "def set_postfix(self, ordered_dict=None, refresh=True, **kwargs):\n    \"\"\"\n    Set/modify postfix (additional stats)\n    with automatic formatting based on datatype.\n\n    Parameters\n    ----------\n    ordered_dict  : dict or OrderedDict, optional\n    refresh  : bool, optional\n        Forces refresh [default: True].\n    kwargs  : dict, optional\n    \"\"\"\n    postfix = _OrderedDict([] if ordered_dict is None else ordered_dict)\n    for key in sorted(kwargs.keys()):\n        postfix[key] = kwargs[key]\n    for key in postfix.keys():\n        if isinstance(postfix[key], Number):\n            postfix[key] = self.format_num(postfix[key])\n        elif not isinstance(postfix[key], _basestring):\n            postfix[key] = str(postfix[key])\n    self.postfix = ', '.join((key + '=' + postfix[key].strip() for key in postfix.keys()))\n    if refresh:\n        self.refresh()",
                            "def set_postfix_str(self, s='', refresh=True):\n    \"\"\"\n    Postfix without dictionary expansion, similar to prefix handling.\n    \"\"\"\n    self.postfix = str(s)\n    if refresh:\n        self.refresh()",
                            "def moveto(self, n):\n    self.fp.write(_unicode('\\n' * n + _term_move_up() * -n))\n    self.fp.flush()",
                            "@property\ndef format_dict(self):\n    \"\"\"Public API for read-only member access.\"\"\"\n    return dict(n=self.n, total=self.total, elapsed=self._time() - self.start_t if hasattr(self, 'start_t') else 0, ncols=self.dynamic_ncols(self.fp) if self.dynamic_ncols else self.ncols, prefix=self.desc, ascii=self.ascii, unit=self.unit, unit_scale=self.unit_scale, rate=1 / self.avg_time if self.avg_time else None, bar_format=self.bar_format, postfix=self.postfix, unit_divisor=self.unit_divisor)",
                            "def display(self, msg=None, pos=None):\n    \"\"\"\n    Use `self.sp` to display `msg` in the specified `pos`.\n\n    Consider overloading this function when inheriting to use e.g.:\n    `self.some_frontend(**self.format_dict)` instead of `self.sp`.\n\n    Parameters\n    ----------\n    msg  : str, optional. What to display (default: `repr(self)`).\n    pos  : int, optional. Position to `moveto`\n      (default: `abs(self.pos)`).\n    \"\"\"\n    if pos is None:\n        pos = abs(self.pos)\n    if pos:\n        self.moveto(pos)\n    self.sp(self.__repr__() if msg is None else msg)\n    if pos:\n        self.moveto(-pos)",
                            "@classmethod\n@contextmanager\ndef wrapattr(tclass, stream, method, total=None, bytes=True, **tkwargs):\n    \"\"\"\n    stream  : file-like object.\n    method  : str, \"read\" or \"write\". The result of `read()` and\n        the first argument of `write()` should have a `len()`.\n\n    >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj:\n    ...     while True:\n    ...         chunk = fobj.read(chunk_size)\n    ...         if not chunk:\n    ...             break\n    \"\"\"\n    with tclass(total=total, **tkwargs) as t:\n        if bytes:\n            t.unit = 'B'\n            t.unit_scale = True\n            t.unit_divisor = 1024\n        yield CallbackIOWrapper(t.update, stream, method)",
                            "def fp_write(s):\n    fp.write(_unicode(s))\n    fp_flush()",
                            "def print_status(s):\n    len_s = len(s)\n    fp_write('\\r' + s + ' ' * max(last_len[0] - len_s, 0))\n    last_len[0] = len_s",
                            "def inner_generator(df_function='apply'):\n\n    def inner(df, func, *args, **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        df  : (DataFrame|Series)[GroupBy]\n            Data (may be grouped).\n        func  : function\n            To be applied on the (grouped) data.\n        **kwargs  : optional\n            Transmitted to `df.apply()`.\n        \"\"\"\n        total = tkwargs.pop('total', getattr(df, 'ngroups', None))\n        if total is None:\n            if df_function == 'applymap':\n                total = df.size\n            elif isinstance(df, Series):\n                total = len(df)\n            elif _Rolling_and_Expanding is None or not isinstance(df, _Rolling_and_Expanding):\n                axis = kwargs.get('axis', 0)\n                if axis == 'index':\n                    axis = 0\n                elif axis == 'columns':\n                    axis = 1\n                total = df.size // df.shape[axis]\n        if deprecated_t[0] is not None:\n            t = deprecated_t[0]\n            deprecated_t[0] = None\n        else:\n            t = tclass(*targs, total=total, **tkwargs)\n        if len(args) > 0:\n            TqdmDeprecationWarning('Except func, normal arguments are intentionally' + ' not supported by' + ' `(DataFrame|Series|GroupBy).progress_apply`.' + ' Use keyword arguments instead.', fp_write=getattr(t.fp, 'write', sys.stderr.write))\n        try:\n            func = df._is_builtin_func(func)\n        except TypeError:\n            pass\n\n        def wrapper(*args, **kwargs):\n            t.update(n=1 if not t.total or t.n < t.total else 0)\n            return func(*args, **kwargs)\n        result = getattr(df, df_function)(wrapper, **kwargs)\n        t.close()\n        return result\n    return inner",
                            "def fp_write(s):\n    self.fp.write(_unicode(s))",
                            "def inner(df, func, *args, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    df  : (DataFrame|Series)[GroupBy]\n        Data (may be grouped).\n    func  : function\n        To be applied on the (grouped) data.\n    **kwargs  : optional\n        Transmitted to `df.apply()`.\n    \"\"\"\n    total = tkwargs.pop('total', getattr(df, 'ngroups', None))\n    if total is None:\n        if df_function == 'applymap':\n            total = df.size\n        elif isinstance(df, Series):\n            total = len(df)\n        elif _Rolling_and_Expanding is None or not isinstance(df, _Rolling_and_Expanding):\n            axis = kwargs.get('axis', 0)\n            if axis == 'index':\n                axis = 0\n            elif axis == 'columns':\n                axis = 1\n            total = df.size // df.shape[axis]\n    if deprecated_t[0] is not None:\n        t = deprecated_t[0]\n        deprecated_t[0] = None\n    else:\n        t = tclass(*targs, total=total, **tkwargs)\n    if len(args) > 0:\n        TqdmDeprecationWarning('Except func, normal arguments are intentionally' + ' not supported by' + ' `(DataFrame|Series|GroupBy).progress_apply`.' + ' Use keyword arguments instead.', fp_write=getattr(t.fp, 'write', sys.stderr.write))\n    try:\n        func = df._is_builtin_func(func)\n    except TypeError:\n        pass\n\n    def wrapper(*args, **kwargs):\n        t.update(n=1 if not t.total or t.n < t.total else 0)\n        return func(*args, **kwargs)\n    result = getattr(df, df_function)(wrapper, **kwargs)\n    t.close()\n    return result",
                            "def wrapper(*args, **kwargs):\n    t.update(n=1 if not t.total or t.n < t.total else 0)\n    return func(*args, **kwargs)"
                        ],
                        "constructor_variables": [
                            "write_bytes",
                            "lock_args",
                            "leave",
                            "smoothing",
                            "postfix",
                            "gui",
                            "last_print_t",
                            "maxinterval",
                            "unit_divisor",
                            "unit_scale",
                            "last_print_n",
                            "fp",
                            "mininterval",
                            "_time",
                            "unit",
                            "dynamic_miniters",
                            "total",
                            "_dynamic_ncols",
                            "miniters",
                            "desc",
                            "n",
                            "bar_format",
                            "pos",
                            "iterable",
                            "ascii",
                            "sp",
                            "avg_time",
                            "dynamic_ncols",
                            "start_t",
                            "ncols",
                            "disable",
                            "file"
                        ],
                        "class_level_variables": [
                            "monitor_interval",
                            "monitor"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "format_sizeof(num, suffix='', divisor=1000)",
                            "format_interval(t)",
                            "format_num(n)",
                            "ema(x, mu=None, alpha=0.3)",
                            "status_printer(file)",
                            "format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000, **extra_kwargs)",
                            "__new__(cls, *args, **kwargs)",
                            "_get_free_pos(cls, instance=None)",
                            "_decr_instances(cls, instance)",
                            "write(cls, s, file=None, end='\\n', nolock=False)",
                            "external_write_mode(cls, file=None, nolock=False)",
                            "set_lock(cls, lock)",
                            "get_lock(cls)",
                            "pandas(tclass, *targs, **tkwargs)",
                            "__init__(self, iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, write_bytes=None, lock_args=None, gui=False, **kwargs)",
                            "__bool__(self)",
                            "__nonzero__(self)",
                            "__len__(self)",
                            "__enter__(self)",
                            "__exit__(self, exc_type, exc_value, traceback)",
                            "__del__(self)",
                            "__repr__(self)",
                            "_comparable(self)",
                            "__hash__(self)",
                            "__iter__(self)",
                            "update(self, n=1)",
                            "close(self)",
                            "clear(self, nolock=False)",
                            "refresh(self, nolock=False, lock_args=None)",
                            "unpause(self)",
                            "reset(self, total=None)",
                            "set_description(self, desc=None, refresh=True)",
                            "set_description_str(self, desc=None, refresh=True)",
                            "set_postfix(self, ordered_dict=None, refresh=True, **kwargs)",
                            "set_postfix_str(self, s='', refresh=True)",
                            "moveto(self, n)",
                            "format_dict(self)",
                            "display(self, msg=None, pos=None)",
                            "wrapattr(tclass, stream, method, total=None, bytes=True, **tkwargs)",
                            "fp_write(s)",
                            "print_status(s)",
                            "inner_generator(df_function='apply')",
                            "fp_write(s)",
                            "inner(df, func, *args, **kwargs)",
                            "wrapper(*args, **kwargs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': None, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c975dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}{r_bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10ca5ea50>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'|30|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "          "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'desc: '",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'desc:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 68, 'desc': 'desc: ', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': 'desc:   0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c975eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}{r_bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10ca5efd0>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'desc:   0%",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'|36|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'desc:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                                "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "231",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.5892857142857143",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'06:32'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "392",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "1.696969696969697",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 0.59it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 1.70s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 1.70s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'231'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "1304.969696969697",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'21:44'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 231/1000 [06:32<21:44,  1.70s/it]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 231, 'n_fmt': '231', 'total': 1000, 'total_fmt': '1000', 'elapsed': '06:32', 'elapsed_s': 392, 'ncols': None, 'desc': '', 'unit': 'it', 'rate': 1.696969696969697, 'rate_fmt': ' 1.70s/it', 'rate_noinv': 0.5892857142857143, 'rate_noinv_fmt': ' 0.59it/s', 'rate_inv': 1.696969696969697, 'rate_inv_fmt': ' 1.70s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '21:44', 'remaining_s': 1304.969696969697, 'l_bar': ' 23%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.231",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "23.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c975f00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}{r_bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10c78ba90>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": " 231/1000 [06:32<21:44,  1.70s/it]'|40|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": "\u2588\u2588\u258e       "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "231",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.5892857142857143",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'06:32'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "392",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "1.696969696969697",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 0.59it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 1.70s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 1.70s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'231'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "1304.969696969697",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'21:44'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 231/1000 [06:32<21:44,  1.70s/it]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 231, 'n_fmt': '231', 'total': 1000, 'total_fmt': '1000', 'elapsed': '06:32', 'elapsed_s': 392, 'ncols': 56, 'desc': '', 'unit': 'it', 'rate': 1.696969696969697, 'rate_fmt': ' 1.70s/it', 'rate_noinv': 0.5892857142857143, 'rate_noinv_fmt': ' 0.59it/s', 'rate_inv': 1.696969696969697, 'rate_inv_fmt': ' 1.70s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '21:44', 'remaining_s': 1304.969696969697, 'l_bar': ' 23%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "56",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.231",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "23.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c97d370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}{r_bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10ca5ef10>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": " 231/1000 [06:32<21:44,  1.70s/it]'|40|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' 123456789#'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "res": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": "###6            "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "7.33",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:12'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "0.1364256480218281",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 7.33it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 0.14s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 7.33it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'100'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "122.78308321964529",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'02:02'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 10%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 100/1000 [00:12<02:02,  7.33it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 100, 'n_fmt': '100', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:12', 'elapsed_s': 12, 'ncols': 0, 'desc': '', 'unit': 'it', 'rate': 7.33, 'rate_fmt': ' 7.33it/s', 'rate_noinv': 7.33, 'rate_noinv_fmt': ' 7.33it/s', 'rate_inv': 0.1364256480218281, 'rate_inv_fmt': ' 0.14s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '02:02', 'remaining_s': 122.78308321964529, 'l_bar': '', 'r_bar': '",
                                    "variable_type": "dict",
                                    "variable_shape": " 100/1000 [00:12<02:02,  7.33it/s]'}"
                                },
                                "ncols": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c97d5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bar_format.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bar_format.format": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 10, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c97d910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'************{bar:10}$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10ca54120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10c78b910>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'************$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10ca54120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 20, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10ccbf690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'************{bar:10}$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10ca54120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10ca5efd0>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'************$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10ca54120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 30, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "30",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c991820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'************{bar:10}$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10ca54120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10d07c490>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'************$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10ca54120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 10, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10cc41320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'*****\\x1b[22m****\\x1b[0m***{bar:10}$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "39"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c646990>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10ccd4d10>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'*****\\x1b[22m****\\x1b[0m***$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "31"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c646990>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'*****\\x1b[22m****\\x1b[0m***          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "41"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 10, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c975e10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'*****\\x1b[22m*****\\x1b[0m**{bar:10}$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "39"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c6469f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10cc9fed0>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'*****\\x1b[22m*****\\x1b[0m**$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "31"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c6469f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'*****\\x1b[22m*****\\x1b[0m**          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "41"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'  0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 10, 'desc': '', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '  0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10cc4c870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'*****\\x1b[22m******\\x1b[0m*{bar:10}$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "39"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c646a50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10c777d90>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'*****\\x1b[22m******\\x1b[0m*$$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "31"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c646a50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'*****\\x1b[22m******\\x1b[0m*          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "41"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "8.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:12'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "0.1234567901234568",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 0.12s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'20'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'100'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "9.876543209876544",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'00:09'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 20/100 [00:12<00:09,  8.10it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'elapsed': '00:12', 'elapsed_s': 12, 'ncols': 13, 'desc': '', 'unit': 'it', 'rate': 8.1, 'rate_fmt': ' 8.10it/s', 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_inv': 0.1234567901234568, 'rate_inv_fmt': ' 0.12s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '00:09', 'remaining_s': 9.876543209876544, 'l_bar': ' 20%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10cc3d410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}",
                                    "variable_type": "str",
                                    "variable_shape": "{n_fmt}/{total_fmt}'"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c646ab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10cca90d0>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "20/100'|12|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c646ab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258f"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "8.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:12'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "0.1234567901234568",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 0.12s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'20'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'100'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "9.876543209876544",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'00:09'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 20/100 [00:12<00:09,  8.10it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'elapsed': '00:12', 'elapsed_s': 12, 'ncols': 14, 'desc': '', 'unit': 'it', 'rate': 8.1, 'rate_fmt': ' 8.10it/s', 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_inv': 0.1234567901234568, 'rate_inv_fmt': ' 0.12s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '00:09', 'remaining_s': 9.876543209876544, 'l_bar': ' 20%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "14",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10cc41460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}",
                                    "variable_type": "str",
                                    "variable_shape": "{n_fmt}/{total_fmt}'"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c646ab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10c788510>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "20/100'|12|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c646ab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258d "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48: '",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 68, 'desc': '\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48: ', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c9910a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}{r_bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10ca5ed50>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'|41|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                  "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:13'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "'?s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rate_fmt": {
                                    "variable_value": "'?it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "n_fmt": {
                                    "variable_value": "'0'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'1000'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'?'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]: '",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "'\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 0, 'n_fmt': '0', 'total': 1000, 'total_fmt': '1000', 'elapsed': '00:13', 'elapsed_s': 13, 'ncols': 68, 'desc': '\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]: ', 'unit': 'it', 'rate': 0.0, 'rate_fmt': '?it/s', 'rate_noinv': 0.0, 'rate_noinv_fmt': '?it/s', 'rate_inv': None, 'rate_inv_fmt': '?s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '?', 'remaining_s': 0, 'l_bar': '\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c975f50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}{r_bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10d07c390>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%",
                                    "variable_type": "str",
                                    "variable_shape": " 0/1000 [00:13<?, ?it/s]'|44|"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10c907e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                    "
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "8.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:12'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "0.1234567901234568",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 0.12s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'20'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'100'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "9.876543209876544",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'00:09'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 20/100 [00:12<00:09,  8.10it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'elapsed': '00:12', 'elapsed_s': 12, 'ncols': 2, 'desc': '', 'unit': 'it', 'rate': 8.1, 'rate_fmt': ' 8.10it/s', 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_inv': 0.1234567901234568, 'rate_inv_fmt': ' 0.12s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '00:09', 'remaining_s': 9.876543209876544, 'l_bar': ' 20%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10cc53550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10ca53530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10c7ac2d0>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10ca53530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'\u258d '",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "8.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:12'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "0.1234567901234568",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 0.12s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'20'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'100'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "9.876543209876544",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'00:09'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 20/100 [00:12<00:09,  8.10it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'elapsed': '00:12', 'elapsed_s': 12, 'ncols': 7, 'desc': '', 'unit': 'it', 'rate': 8.1, 'rate_fmt': ' 8.10it/s', 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_inv': 0.1234567901234568, 'rate_inv_fmt': ' 0.12s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '00:09', 'remaining_s': 9.876543209876544, 'l_bar': ' 20%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10c9a1aa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{l_bar}{bar}'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10ca535b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10cc9fe10>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10ca535b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258d '"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "total": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "unit_scale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rate": {
                                    "variable_value": "8.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "elapsed_str": {
                                    "variable_value": "'00:12'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "tqdm.format_interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "elapsed": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inv_rate": {
                                    "variable_value": "0.1234567901234568",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_sizeof": {
                                    "variable_value": "<function tqdm.format_sizeof at 0x10c901b00>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tqdm.format_sizeof": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rate_noinv_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "unit": {
                                    "variable_value": "'it'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "rate_inv_fmt": {
                                    "variable_value": "' 0.12s/it'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "rate_fmt": {
                                    "variable_value": "' 8.10it/s'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "n_fmt": {
                                    "variable_value": "'20'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "unit_divisor": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "total_fmt": {
                                    "variable_value": "'100'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "postfix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "remaining": {
                                    "variable_value": "9.876543209876544",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "remaining_str": {
                                    "variable_value": "'00:09'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "bool_prefix_colon_already": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l_bar": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "'"
                                },
                                "r_bar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": " 20/100 [00:12<00:09,  8.10it/s]'"
                                },
                                "format_dict": {
                                    "variable_value": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'elapsed': '00:12', 'elapsed_s': 12, 'ncols': 6, 'desc': '', 'unit': 'it', 'rate': 8.1, 'rate_fmt': ' 8.10it/s', 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_inv': 0.1234567901234568, 'rate_inv_fmt': ' 0.12s/it', 'postfix': '', 'unit_divisor': 1000, 'remaining': '00:09', 'remaining_s': 9.876543209876544, 'l_bar': ' 20%",
                                    "variable_type": "dict",
                                    "variable_shape": "', 'r_bar': '"
                                },
                                "ncols": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "extra_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "frac": {
                                    "variable_value": "0.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "percentage": {
                                    "variable_value": "20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "format_dict.update": {
                                    "variable_value": "<built-in method update of dict object at 0x10cc3eb90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bar_format": {
                                    "variable_value": "'{bar}",
                                    "variable_type": "str",
                                    "variable_shape": "test'"
                                },
                                "bar_format.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10ca53630>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "full_bar": {
                                    "variable_value": "<tqdm.std.Bar object at 0x10d07d810>",
                                    "variable_type": "Bar",
                                    "variable_shape": null
                                },
                                "FormatReplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nobar": {
                                    "variable_value": "'",
                                    "variable_type": "str",
                                    "variable_shape": "test'"
                                },
                                "bar_format.format": {
                                    "variable_value": "<built-in method format of str object at 0x10ca53630>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_unicode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.format_called": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Bar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.ASCII": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.UTF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_ascii": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_bar.charset": {
                                    "variable_value": "' \u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "res": {
                                    "variable_value": "'\u258f",
                                    "variable_type": "str",
                                    "variable_shape": "test'"
                                },
                                "disp_trim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Bar.BLANK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def trange(*args, **kwargs):\n    \"\"\"\n    A shortcut for tqdm(xrange(*args), **kwargs).\n    On Python3+ range is used instead of xrange.\n    \"\"\"\n    return tqdm(_range(*args), **kwargs)",
                "def __init__(self, msg, fp_write=None, *a, **k):\n    if fp_write is not None:\n        fp_write(\"\\n\" + self.__class__.__name__ + \": \" +\n                 str(msg).rstrip() + '\\n')\n    else:\n        super(TqdmWarning, self).__init__(msg, *a, **k)",
                "def __init__(self):\n    # Create global parallelism locks to avoid racing issues with parallel\n    # bars works only if fork available (Linux/MacOSX, but not Windows)\n    self.create_mp_lock()\n    self.create_th_lock()\n    cls = type(self)\n    self.locks = [lk for lk in [cls.mp_lock, cls.th_lock] if lk is not None]",
                "def acquire(self, *a, **k):\n    for lock in self.locks:\n        lock.acquire(*a, **k)",
                "def release(self):\n    for lock in self.locks[::-1]:  # Release in inverse order of acquisition\n        lock.release()",
                "def __enter__(self):\n    self.acquire()",
                "def __exit__(self, *exc):\n    self.release()",
                "@classmethod\ndef create_mp_lock(cls):\n    if not hasattr(cls, 'mp_lock'):\n        try:\n            from multiprocessing import RLock\n            cls.mp_lock = RLock()  # multiprocessing lock\n        except ImportError:  # pragma: no cover\n            cls.mp_lock = None\n        except OSError:  # pragma: no cover\n            cls.mp_lock = None",
                "@classmethod\ndef create_th_lock(cls):\n    if not hasattr(cls, 'th_lock'):\n        try:\n            cls.th_lock = th.RLock()  # thread lock\n        except OSError:  # pragma: no cover\n            cls.th_lock = None",
                "def __init__(self, frac, default_len=10, charset=UTF):\n    if not (0 <= frac <= 1):\n        warn(\"clamping frac to range [0, 1]\", TqdmWarning, stacklevel=2)\n        frac = max(0, min(1, frac))\n    assert default_len > 0\n    self.frac = frac\n    self.default_len = default_len\n    self.charset = charset",
                "def __format__(self, format_spec):\n    if format_spec:\n        _type = format_spec[-1].lower()\n        try:\n            charset = dict(a=self.ASCII, u=self.UTF, b=self.BLANK)[_type]\n        except KeyError:\n            charset = self.charset\n        else:\n            format_spec = format_spec[:-1]\n        if format_spec:\n            N_BARS = int(format_spec)\n            if N_BARS < 0:\n                N_BARS += self.default_len\n        else:\n            N_BARS = self.default_len\n    else:\n        charset = self.charset\n        N_BARS = self.default_len\n\n    nsyms = len(charset) - 1\n    bar_length, frac_bar_length = divmod(\n        int(self.frac * N_BARS * nsyms), nsyms)\n\n    bar = charset[-1] * bar_length\n    frac_bar = charset[frac_bar_length]\n\n    # whitespace padding\n    if bar_length < N_BARS:\n        return bar + frac_bar + \\\n            charset[0] * (N_BARS - bar_length - 1)\n    return bar",
                "@staticmethod\ndef format_sizeof(num, suffix='', divisor=1000):\n    \"\"\"\n    Formats a number (greater than unity) with SI Order of Magnitude\n    prefixes.\n\n    Parameters\n    ----------\n    num  : float\n        Number ( >= 1) to format.\n    suffix  : str, optional\n        Post-postfix [default: ''].\n    divisor  : float, optional\n        Divisor between prefixes [default: 1000].\n\n    Returns\n    -------\n    out  : str\n        Number with Order of Magnitude SI unit postfix.\n    \"\"\"\n    for unit in ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(num) < 999.5:\n            if abs(num) < 99.95:\n                if abs(num) < 9.995:\n                    return '{0:1.2f}'.format(num) + unit + suffix\n                return '{0:2.1f}'.format(num) + unit + suffix\n            return '{0:3.0f}'.format(num) + unit + suffix\n        num /= divisor\n    return '{0:3.1f}Y'.format(num) + suffix",
                "@staticmethod\ndef format_interval(t):\n    \"\"\"\n    Formats a number of seconds as a clock time, [H:]MM:SS\n\n    Parameters\n    ----------\n    t  : int\n        Number of seconds.\n\n    Returns\n    -------\n    out  : str\n        [H:]MM:SS\n    \"\"\"\n    mins, s = divmod(int(t), 60)\n    h, m = divmod(mins, 60)\n    if h:\n        return '{0:d}:{1:02d}:{2:02d}'.format(h, m, s)\n    else:\n        return '{0:02d}:{1:02d}'.format(m, s)",
                "@staticmethod\ndef format_num(n):\n    \"\"\"\n    Intelligent scientific notation (.3g).\n\n    Parameters\n    ----------\n    n  : int or float or Numeric\n        A Number.\n\n    Returns\n    -------\n    out  : str\n        Formatted number.\n    \"\"\"\n    f = '{0:.3g}'.format(n).replace('+0', '+').replace('-0', '-')\n    n = str(n)\n    return f if len(f) < len(n) else n",
                "@staticmethod\ndef ema(x, mu=None, alpha=0.3):\n    \"\"\"\n    Exponential moving average: smoothing to give progressively lower\n    weights to older values.\n\n    Parameters\n    ----------\n    x  : float\n        New value to include in EMA.\n    mu  : float, optional\n        Previous EMA value.\n    alpha  : float, optional\n        Smoothing factor in range [0, 1], [default: 0.3].\n        Increase to give more weight to recent values.\n        Ranges from 0 (yields mu) to 1 (yields x).\n    \"\"\"\n    return x if mu is None else (alpha * x) + (1 - alpha) * mu",
                "@staticmethod\ndef status_printer(file):\n    \"\"\"\n    Manage the printing and in-place updating of a line of characters.\n    Note that if the string is longer than a line, then in-place\n    updating may not work (it will print a new line at each refresh).\n    \"\"\"\n    fp = file\n    fp_flush = getattr(fp, 'flush', lambda: None)  # pragma: no cover\n\n    def fp_write(s):\n        fp.write(_unicode(s))\n        fp_flush()\n\n    last_len = [0]\n\n    def print_status(s):\n        len_s = len(s)\n        fp_write('\\r' + s + (' ' * max(last_len[0] - len_s, 0)))\n        last_len[0] = len_s\n\n    return print_status",
                "@staticmethod\ndef format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False, rate=None, bar_format=None,\n                 postfix=None, unit_divisor=1000, **extra_kwargs):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    n  : int or float\n        Number of finished iterations.\n    total  : int or float\n        The expected total number of iterations. If meaningless (None),\n        only basic progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes `{bar}` to stay within this bound\n        [default: None]. If `0`, will not print any bar (only stats).\n        The fallback is `{bar:10}`.\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n        Use as {desc} in bar_format string.\n    ascii  : bool, optional or str, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters\n        \" 123456789#\".\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool or int or float, optional\n        If 1 or True, the number of iterations will be printed with an\n        appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n        [default: False]. If any other non-zero number, will scale\n        `total` and `n`.\n    rate  : float, optional\n        Manual override for iteration rate.\n        If [default: None], uses n/elapsed.\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where\n        l_bar='{desc}: {percentage:3.0f}%|' and\n        r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n          '{rate_fmt}{postfix}]'\n        Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n          percentage, elapsed, elapsed_s, ncols, desc, unit,\n          rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n          rate_inv, rate_inv_fmt, postfix, unit_divisor,\n          remaining, remaining_s.\n        Note that a trailing \": \" is automatically removed after {desc}\n        if the latter is empty.\n    postfix  : *, optional\n        Similar to `prefix`, but placed at the end\n        (e.g. for additional stats).\n        Note: postfix is usually a string (not a dict) for this method,\n        and will if possible be set to postfix = ', ' + postfix.\n        However other types are supported (#382).\n    unit_divisor  : float, optional\n        [default: 1000], ignored unless `unit_scale` is True.\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    # sanity check: total\n    if total and n >= (total + 0.5):  # allow float imprecision (#849)\n        total = None\n\n    # apply custom scale if necessary\n    if unit_scale and unit_scale not in (True, 1):\n        if total:\n            total *= unit_scale\n        n *= unit_scale\n        if rate:\n            rate *= unit_scale  # by default rate = 1 / self.avg_time\n        unit_scale = False\n\n    elapsed_str = tqdm.format_interval(elapsed)\n\n    # if unspecified, attempt to use rate = average speed\n    # (we allow manual override since predicting time is an arcane art)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if rate else None\n    format_sizeof = tqdm.format_sizeof\n    rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                       '{0:5.2f}'.format(rate))\n                      if rate else '?') + unit + '/s'\n    rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                     '{0:5.2f}'.format(inv_rate))\n                    if inv_rate else '?') + 's/' + unit\n    rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n\n    if unit_scale:\n        n_fmt = format_sizeof(n, divisor=unit_divisor)\n        total_fmt = format_sizeof(total, divisor=unit_divisor) \\\n            if total is not None else '?'\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total) if total is not None else '?'\n\n    try:\n        postfix = ', ' + postfix if postfix else ''\n    except TypeError:\n        pass\n\n    remaining = (total - n) / rate if rate and total else 0\n    remaining_str = tqdm.format_interval(remaining) if rate else '?'\n\n    # format the stats displayed to the left and right sides of the bar\n    if prefix:\n        # old prefix setup work around\n        bool_prefix_colon_already = (prefix[-2:] == \": \")\n        l_bar = prefix if bool_prefix_colon_already else prefix + \": \"\n    else:\n        l_bar = ''\n\n    r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(\n        n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt, postfix)\n\n    # Custom bar formatting\n    # Populate a dict with all available progress indicators\n    format_dict = dict(\n        # slight extension of self.format_dict\n        n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt,\n        elapsed=elapsed_str, elapsed_s=elapsed,\n        ncols=ncols, desc=prefix or '', unit=unit,\n        rate=inv_rate if inv_rate and inv_rate > 1 else rate,\n        rate_fmt=rate_fmt, rate_noinv=rate,\n        rate_noinv_fmt=rate_noinv_fmt, rate_inv=inv_rate,\n        rate_inv_fmt=rate_inv_fmt,\n        postfix=postfix, unit_divisor=unit_divisor,\n        # plus more useful definitions\n        remaining=remaining_str, remaining_s=remaining,\n        l_bar=l_bar, r_bar=r_bar,\n        **extra_kwargs)\n\n    # total is known: we can predict some stats\n    if total:\n        # fractional and percentage progress\n        frac = n / total\n        percentage = frac * 100\n\n        l_bar += '{0:3.0f}%|'.format(percentage)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        format_dict.update(l_bar=l_bar)\n        if bar_format:\n            format_dict.update(percentage=percentage)\n\n            # auto-remove colon for empty `desc`\n            if not prefix:\n                bar_format = bar_format.replace(\"{desc}: \", '')\n        else:\n            bar_format = \"{l_bar}{bar}{r_bar}\"\n\n        full_bar = FormatReplace()\n        try:\n            nobar = bar_format.format(bar=full_bar, **format_dict)\n        except UnicodeEncodeError:\n            bar_format = _unicode(bar_format)\n            nobar = bar_format.format(bar=full_bar, **format_dict)\n        if not full_bar.format_called:\n            # no {bar}, we can just format and return\n            return nobar\n\n        # Formatting progress bar space available for bar's display\n        full_bar = Bar(\n            frac,\n            max(1, ncols - disp_len(nobar))\n            if ncols else 10,\n            charset=Bar.ASCII if ascii is True else ascii or Bar.UTF)\n        if not _is_ascii(full_bar.charset) and _is_ascii(bar_format):\n            bar_format = _unicode(bar_format)\n        res = bar_format.format(bar=full_bar, **format_dict)\n        if ncols:\n            return disp_trim(res, ncols)\n\n    elif bar_format:\n        # user-specified bar_format but no total\n        l_bar += '|'\n        format_dict.update(l_bar=l_bar, percentage=0)\n        full_bar = FormatReplace()\n        nobar = bar_format.format(bar=full_bar, **format_dict)\n        if not full_bar.format_called:\n            return nobar\n        full_bar = Bar(\n            0,\n            max(1, ncols - disp_len(nobar))\n            if ncols else 10,\n            charset=Bar.BLANK)\n        res = bar_format.format(bar=full_bar, **format_dict)\n        if ncols:\n            return disp_trim(res, ncols)\n    else:\n        # no total: no progressbar, ETA, just progress stats\n        return ((prefix + \": \") if prefix else '') + \\\n            '{0}{1} [{2}, {3}{4}]'.format(\n                n_fmt, unit, elapsed_str, rate_fmt, postfix)",
                "def __new__(cls, *args, **kwargs):\n    # Create a new instance\n    instance = object.__new__(cls)\n    # Construct the lock if it does not exist\n    with cls.get_lock():\n        # Add to the list of instances\n        if not hasattr(cls, '_instances'):\n            cls._instances = WeakSet()\n        cls._instances.add(instance)\n        # Create the monitoring thread\n        if cls.monitor_interval and (cls.monitor is None or not\n                                     cls.monitor.report()):\n            try:\n                cls.monitor = TMonitor(cls, cls.monitor_interval)\n            except Exception as e:  # pragma: nocover\n                warn(\"tqdm:disabling monitor support\"\n                     \" (monitor_interval = 0) due to:\\n\" + str(e),\n                     TqdmMonitorWarning, stacklevel=2)\n                cls.monitor_interval = 0\n    # Return the instance\n    return instance",
                "@classmethod\ndef _get_free_pos(cls, instance=None):\n    \"\"\"Skips specified instance.\"\"\"\n    positions = set(abs(inst.pos) for inst in cls._instances\n                    if inst is not instance and hasattr(inst, \"pos\"))\n    return min(set(range(len(positions) + 1)).difference(positions))",
                "@classmethod\ndef _decr_instances(cls, instance):\n    \"\"\"\n    Remove from list and reposition other bars\n    so that newer bars won't overlap previous bars\n    \"\"\"\n    with cls._lock:\n        try:\n            cls._instances.remove(instance)\n        except KeyError:\n            # if not instance.gui:  # pragma: no cover\n            #     raise\n            pass  # py2: maybe magically removed already\n        # else:\n        if not instance.gui:\n            for inst in cls._instances:\n                # negative `pos` means fixed\n                if hasattr(inst, \"pos\") and inst.pos > abs(instance.pos):\n                    inst.clear(nolock=True)\n                    inst.pos -= 1\n                    # TODO: check this doesn't overwrite another fixed bar\n        # Kill monitor if no instances are left\n        if not cls._instances and cls.monitor:\n            try:\n                cls.monitor.exit()\n                del cls.monitor\n            except AttributeError:  # pragma: nocover\n                pass\n            else:\n                cls.monitor = None",
                "@classmethod\ndef write(cls, s, file=None, end=\"\\n\", nolock=False):\n    \"\"\"Print a message via tqdm (without overlap with bars).\"\"\"\n    fp = file if file is not None else sys.stdout\n    with cls.external_write_mode(file=file, nolock=nolock):\n        # Write the message\n        fp.write(s)\n        fp.write(end)",
                "@classmethod\n@contextmanager\ndef external_write_mode(cls, file=None, nolock=False):\n    \"\"\"\n    Disable tqdm within context and refresh tqdm when exits.\n    Useful when writing to standard output stream\n    \"\"\"\n    fp = file if file is not None else sys.stdout\n\n    if not nolock:\n        cls.get_lock().acquire()\n    # Clear all bars\n    inst_cleared = []\n    for inst in getattr(cls, '_instances', []):\n        # Clear instance if in the target output file\n        # or if write output + tqdm output are both either\n        # sys.stdout or sys.stderr (because both are mixed in terminal)\n        if hasattr(inst, \"start_t\") and (inst.fp == fp or all(\n                f in (sys.stdout, sys.stderr) for f in (fp, inst.fp))):\n            inst.clear(nolock=True)\n            inst_cleared.append(inst)\n    yield\n    # Force refresh display of bars we cleared\n    for inst in inst_cleared:\n        inst.refresh(nolock=True)\n    if not nolock:\n        cls._lock.release()",
                "@classmethod\ndef set_lock(cls, lock):\n    \"\"\"Set the global lock.\"\"\"\n    cls._lock = lock",
                "@classmethod\ndef get_lock(cls):\n    \"\"\"Get the global lock. Construct it if it does not exist.\"\"\"\n    if not hasattr(cls, '_lock'):\n        cls._lock = TqdmDefaultWriteLock()\n    return cls._lock",
                "@classmethod\ndef pandas(tclass, *targs, **tkwargs):\n    \"\"\"\n    Registers the given `tqdm` class with\n        pandas.core.\n        ( frame.DataFrame\n        | series.Series\n        | groupby.(generic.)DataFrameGroupBy\n        | groupby.(generic.)SeriesGroupBy\n        ).progress_apply\n\n    A new instance will be create every time `progress_apply` is called,\n    and each instance will automatically close() upon completion.\n\n    Parameters\n    ----------\n    targs, tkwargs  : arguments for the tqdm instance\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> import numpy as np\n    >>> from tqdm import tqdm\n    >>> from tqdm.gui import tqdm as tqdm_gui\n    >>>\n    >>> df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))\n    >>> tqdm.pandas(ncols=50)  # can use tqdm_gui, optional kwargs, etc\n    >>> # Now you can use `progress_apply` instead of `apply`\n    >>> df.groupby(0).progress_apply(lambda x: x**2)\n\n    References\n    ----------\n    https://stackoverflow.com/questions/18603270/\n    progress-indicator-during-pandas-operations-python\n    \"\"\"\n    from pandas.core.frame import DataFrame\n    from pandas.core.series import Series\n    try:\n        from pandas import Panel\n    except ImportError:  # TODO: pandas>0.25.2\n        Panel = None\n    try:  # pandas>=0.18.0\n        from pandas.core.window import _Rolling_and_Expanding\n    except ImportError:  # pragma: no cover\n        _Rolling_and_Expanding = None\n    try:  # pandas>=0.25.0\n        from pandas.core.groupby.generic import DataFrameGroupBy, \\\n            SeriesGroupBy  # , NDFrameGroupBy\n    except ImportError:\n        try:  # pandas>=0.23.0\n            from pandas.core.groupby.groupby import DataFrameGroupBy, \\\n                SeriesGroupBy\n        except ImportError:\n            from pandas.core.groupby import DataFrameGroupBy, \\\n                SeriesGroupBy\n    try:  # pandas>=0.23.0\n        from pandas.core.groupby.groupby import GroupBy\n    except ImportError:\n        from pandas.core.groupby import GroupBy\n\n    try:  # pandas>=0.23.0\n        from pandas.core.groupby.groupby import PanelGroupBy\n    except ImportError:\n        try:\n            from pandas.core.groupby import PanelGroupBy\n        except ImportError:  # pandas>=0.25.0\n            PanelGroupBy = None\n\n    deprecated_t = [tkwargs.pop('deprecated_t', None)]\n\n    def inner_generator(df_function='apply'):\n        def inner(df, func, *args, **kwargs):\n            \"\"\"\n            Parameters\n            ----------\n            df  : (DataFrame|Series)[GroupBy]\n                Data (may be grouped).\n            func  : function\n                To be applied on the (grouped) data.\n            **kwargs  : optional\n                Transmitted to `df.apply()`.\n            \"\"\"\n\n            # Precompute total iterations\n            total = tkwargs.pop(\"total\", getattr(df, 'ngroups', None))\n            if total is None:  # not grouped\n                if df_function == 'applymap':\n                    total = df.size\n                elif isinstance(df, Series):\n                    total = len(df)\n                elif _Rolling_and_Expanding is None or \\\n                        not isinstance(df, _Rolling_and_Expanding):\n                    # DataFrame or Panel\n                    axis = kwargs.get('axis', 0)\n                    if axis == 'index':\n                        axis = 0\n                    elif axis == 'columns':\n                        axis = 1\n                    # when axis=0, total is shape[axis1]\n                    total = df.size // df.shape[axis]\n\n            # Init bar\n            if deprecated_t[0] is not None:\n                t = deprecated_t[0]\n                deprecated_t[0] = None\n            else:\n                t = tclass(*targs, total=total, **tkwargs)\n\n            if len(args) > 0:\n                # *args intentionally not supported (see #244, #299)\n                TqdmDeprecationWarning(\n                    \"Except func, normal arguments are intentionally\" +\n                    \" not supported by\" +\n                    \" `(DataFrame|Series|GroupBy).progress_apply`.\" +\n                    \" Use keyword arguments instead.\",\n                    fp_write=getattr(t.fp, 'write', sys.stderr.write))\n\n            try:\n                func = df._is_builtin_func(func)\n            except TypeError:\n                pass\n\n            # Define bar updating wrapper\n            def wrapper(*args, **kwargs):\n                # update tbar correctly\n                # it seems `pandas apply` calls `func` twice\n                # on the first column/row to decide whether it can\n                # take a fast or slow code path; so stop when t.total==t.n\n                t.update(n=1 if not t.total or t.n < t.total else 0)\n                return func(*args, **kwargs)\n\n            # Apply the provided function (in **kwargs)\n            # on the df using our wrapper (which provides bar updating)\n            result = getattr(df, df_function)(wrapper, **kwargs)\n\n            # Close bar and return pandas calculation result\n            t.close()\n            return result\n\n        return inner\n\n    # Monkeypatch pandas to provide easy methods\n    # Enable custom tqdm progress in pandas!\n    Series.progress_apply = inner_generator()\n    SeriesGroupBy.progress_apply = inner_generator()\n    Series.progress_map = inner_generator('map')\n    SeriesGroupBy.progress_map = inner_generator('map')\n\n    DataFrame.progress_apply = inner_generator()\n    DataFrameGroupBy.progress_apply = inner_generator()\n    DataFrame.progress_applymap = inner_generator('applymap')\n\n    if Panel is not None:\n        Panel.progress_apply = inner_generator()\n    if PanelGroupBy is not None:\n        PanelGroupBy.progress_apply = inner_generator()\n\n    GroupBy.progress_apply = inner_generator()\n    GroupBy.progress_aggregate = inner_generator('aggregate')\n    GroupBy.progress_transform = inner_generator('transform')\n\n    if _Rolling_and_Expanding is not None:  # pragma: no cover\n        _Rolling_and_Expanding.progress_apply = inner_generator()",
                "def __init__(self, iterable=None, desc=None, total=None, leave=True,\n             file=None, ncols=None, mininterval=0.1, maxinterval=10.0,\n             miniters=None, ascii=None, disable=False, unit='it',\n             unit_scale=False, dynamic_ncols=False, smoothing=0.3,\n             bar_format=None, initial=0, position=None, postfix=None,\n             unit_divisor=1000, write_bytes=None, lock_args=None,\n             gui=False, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar.\n        Leave blank to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar.\n    total  : int or float, optional\n        The number of expected iterations. If unspecified,\n        len(iterable) is used if possible. If float(\"inf\") or as a last\n        resort, only basic progress statistics are displayed\n        (no ETA, no progressbar).\n        If `gui` is True and this parameter needs subsequent updating,\n        specify an initial arbitrary large positive number,\n        e.g. 9e9.\n    leave  : bool, optional\n        If [default: True], keeps all traces of the progressbar\n        upon termination of iteration.\n        If `None`, will leave only if `position` is `0`.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages\n        (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n        methods.  For encoding, see `write_bytes`.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes the progressbar to stay within this bound.\n        If unspecified, attempts to use environment width. The\n        fallback is a meter width of 10 and no limit for the counter and\n        statistics. If 0, will not print any meter (only stats).\n    mininterval  : float, optional\n        Minimum progress display update interval [default: 0.1] seconds.\n    maxinterval  : float, optional\n        Maximum progress display update interval [default: 10] seconds.\n        Automatically adjusts `miniters` to correspond to `mininterval`\n        after long display update lag. Only works if `dynamic_miniters`\n        or monitor thread is enabled.\n    miniters  : int or float, optional\n        Minimum progress display update interval, in iterations.\n        If 0 and `dynamic_miniters`, will automatically adjust to equal\n        `mininterval` (more CPU efficient, good for tight loops).\n        If > 0, will skip display of specified number of iterations.\n        Tweak this and `mininterval` to get very efficient loops.\n        If your progress is erratic with both fast and slow iterations\n        (network, skipping items, etc) you should set miniters=1.\n    ascii  : bool or str, optional\n        If unspecified or False, use unicode (smooth blocks) to fill\n        the meter. The fallback is to use ASCII characters \" 123456789#\".\n    disable  : bool, optional\n        Whether to disable the entire progressbar wrapper\n        [default: False]. If set to None, disable on non-TTY.\n    unit  : str, optional\n        String that will be used to define the unit of each iteration\n        [default: it].\n    unit_scale  : bool or int or float, optional\n        If 1 or True, the number of iterations will be reduced/scaled\n        automatically and a metric prefix following the\n        International System of Units standard will be added\n        (kilo, mega, etc.) [default: False]. If any other non-zero\n        number, will scale `total` and `n`.\n    dynamic_ncols  : bool, optional\n        If set, constantly alters `ncols` to the environment (allowing\n        for window resizes) [default: False].\n    smoothing  : float, optional\n        Exponential moving average smoothing factor for speed estimates\n        (ignored in GUI mode). Ranges from 0 (average speed) to 1\n        (current/instantaneous speed) [default: 0.3].\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where\n        l_bar='{desc}: {percentage:3.0f}%|' and\n        r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n          '{rate_fmt}{postfix}]'\n        Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n          percentage, elapsed, elapsed_s, ncols, desc, unit,\n          rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n          rate_inv, rate_inv_fmt, postfix, unit_divisor,\n          remaining, remaining_s.\n        Note that a trailing \": \" is automatically removed after {desc}\n        if the latter is empty.\n    initial  : int or float, optional\n        The initial counter value. Useful when restarting a progress\n        bar [default: 0]. If using float, consider specifying `{n:.3f}`\n        or similar in `bar_format`, or specifying `unit_scale`.\n    position  : int, optional\n        Specify the line offset to print this bar (starting from 0)\n        Automatic if unspecified.\n        Useful to manage multiple bars at once (eg, from threads).\n    postfix  : dict or *, optional\n        Specify additional stats to display at the end of the bar.\n        Calls `set_postfix(**postfix)` if possible (dict).\n    unit_divisor  : float, optional\n        [default: 1000], ignored unless `unit_scale` is True.\n    write_bytes  : bool, optional\n        If (default: None) and `file` is unspecified,\n        bytes will be written in Python 2. If `True` will also write\n        bytes. In all other cases will default to unicode.\n    lock_args  : tuple, optional\n        Passed to `refresh` for intermediate output\n        (initialisation, iterating, and updating).\n    gui  : bool, optional\n        WARNING: internal parameter - do not use.\n        Use tqdm.gui.tqdm(...) instead. If set, will attempt to use\n        matplotlib animations for a graphical output [default: False].\n\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n    if write_bytes is None:\n        write_bytes = file is None and sys.version_info < (3,)\n\n    if file is None:\n        file = sys.stderr\n\n    if write_bytes:\n        # Despite coercing unicode into bytes, py2 sys.std* streams\n        # should have bytes written to them.\n        file = SimpleTextIOWrapper(\n            file, encoding=getattr(file, 'encoding', None) or 'utf-8')\n\n    if disable is None and hasattr(file, \"isatty\") and not file.isatty():\n        disable = True\n\n    if total is None and iterable is not None:\n        try:\n            total = len(iterable)\n        except (TypeError, AttributeError):\n            total = None\n    if total == float(\"inf\"):\n        # Infinite iterations, behave same as unknown\n        total = None\n\n    if disable:\n        self.iterable = iterable\n        self.disable = disable\n        with self._lock:\n            self.pos = self._get_free_pos(self)\n            self._instances.remove(self)\n        self.n = initial\n        self.total = total\n        return\n\n    if kwargs:\n        self.disable = True\n        with self._lock:\n            self.pos = self._get_free_pos(self)\n            self._instances.remove(self)\n        raise (\n            TqdmDeprecationWarning(\n                \"`nested` is deprecated and automated.\\n\"\n                \"Use `position` instead for manual control.\\n\",\n                fp_write=getattr(file, 'write', sys.stderr.write))\n            if \"nested\" in kwargs else\n            TqdmKeyError(\"Unknown argument(s): \" + str(kwargs)))\n\n    # Preprocess the arguments\n    if ((ncols is None) and (file in (sys.stderr, sys.stdout))) or \\\n            dynamic_ncols:  # pragma: no cover\n        if dynamic_ncols:\n            dynamic_ncols = _environ_cols_wrapper()\n            if dynamic_ncols:\n                ncols = dynamic_ncols(file)\n        else:\n            _dynamic_ncols = _environ_cols_wrapper()\n            if _dynamic_ncols:\n                ncols = _dynamic_ncols(file)\n\n    if miniters is None:\n        miniters = 0\n        dynamic_miniters = True\n    else:\n        dynamic_miniters = False\n\n    if mininterval is None:\n        mininterval = 0\n\n    if maxinterval is None:\n        maxinterval = 0\n\n    if ascii is None:\n        ascii = not _supports_unicode(file)\n\n    if bar_format and not ((ascii is True) or _is_ascii(ascii)):\n        # Convert bar format into unicode since terminal uses unicode\n        bar_format = _unicode(bar_format)\n\n    if smoothing is None:\n        smoothing = 0\n\n    # Store the arguments\n    self.iterable = iterable\n    self.desc = desc or ''\n    self.total = total\n    self.leave = leave\n    self.fp = file\n    self.ncols = ncols\n    self.mininterval = mininterval\n    self.maxinterval = maxinterval\n    self.miniters = miniters\n    self.dynamic_miniters = dynamic_miniters\n    self.ascii = ascii\n    self.disable = disable\n    self.unit = unit\n    self.unit_scale = unit_scale\n    self.unit_divisor = unit_divisor\n    self.lock_args = lock_args\n    self.gui = gui\n    self.dynamic_ncols = dynamic_ncols\n    self.smoothing = smoothing\n    self.avg_time = None\n    self._time = time\n    self.bar_format = bar_format\n    self.postfix = None\n    if postfix:\n        try:\n            self.set_postfix(refresh=False, **postfix)\n        except TypeError:\n            self.postfix = postfix\n\n    # Init the iterations counters\n    self.last_print_n = initial\n    self.n = initial\n\n    # if nested, at initial sp() call we replace '\\r' by '\\n' to\n    # not overwrite the outer progress bar\n    with self._lock:\n        if position is None:\n            self.pos = self._get_free_pos(self)\n        else:  # mark fixed positions as negative\n            self.pos = -position\n\n    if not gui:\n        # Initialize the screen printer\n        self.sp = self.status_printer(self.fp)\n        self.refresh(lock_args=self.lock_args)\n\n    # Init the time counter\n    self.last_print_t = self._time()\n    # NB: Avoid race conditions by setting start_t at the very end of init\n    self.start_t = self.last_print_t",
                "def __bool__(self):\n    if self.total is not None:\n        return self.total > 0\n    if self.iterable is None:\n        raise TypeError('bool() undefined when iterable == total == None')\n    return bool(self.iterable)",
                "def __nonzero__(self):\n    return self.__bool__()",
                "def __len__(self):\n    return self.total if self.iterable is None else \\\n        (self.iterable.shape[0] if hasattr(self.iterable, \"shape\")\n         else len(self.iterable) if hasattr(self.iterable, \"__len__\")\n         else getattr(self, \"total\", None))",
                "def __enter__(self):\n    return self",
                "def __exit__(self, exc_type, exc_value, traceback):\n    try:\n        self.close()\n    except AttributeError:\n        # maybe eager thread cleanup upon external error\n        if (exc_type, exc_value, traceback) == (None, None, None):\n            raise\n        warn(\"AttributeError ignored\", TqdmWarning, stacklevel=2)",
                "def __del__(self):\n    self.close()",
                "def __repr__(self):\n    return self.format_meter(**self.format_dict)",
                "@property\ndef _comparable(self):\n    return abs(getattr(self, \"pos\", 1 << 31))",
                "def __hash__(self):\n    return id(self)",
                "def __iter__(self):\n    \"\"\"Backward-compatibility to use: for x in tqdm(iterable)\"\"\"\n\n    # Inlining instance variables as locals (speed optimisation)\n    iterable = self.iterable\n\n    # If the bar is disabled, then just walk the iterable\n    # (note: keep this check outside the loop for performance)\n    if self.disable:\n        for obj in iterable:\n            yield obj\n        return\n\n    mininterval = self.mininterval\n    maxinterval = self.maxinterval\n    miniters = self.miniters\n    dynamic_miniters = self.dynamic_miniters\n    last_print_t = self.last_print_t\n    last_print_n = self.last_print_n\n    n = self.n\n    smoothing = self.smoothing\n    avg_time = self.avg_time\n    time = self._time\n\n    if not hasattr(self, 'sp'):\n        raise TqdmDeprecationWarning(\n            \"Please use `tqdm.gui.tqdm(...)` instead of\"\n            \" `tqdm(..., gui=True)`\\n\",\n            fp_write=getattr(self.fp, 'write', sys.stderr.write))\n\n    for obj in iterable:\n        yield obj\n        # Update and possibly print the progressbar.\n        # Note: does not call self.update(1) for speed optimisation.\n        n += 1\n        # check counter first to avoid calls to time()\n        if n - last_print_n >= self.miniters:\n            miniters = self.miniters  # watch monitoring thread changes\n            delta_t = time() - last_print_t\n            if delta_t >= mininterval:\n                cur_t = time()\n                delta_it = n - last_print_n\n                # EMA (not just overall average)\n                if smoothing and delta_t and delta_it:\n                    rate = delta_t / delta_it\n                    avg_time = self.ema(rate, avg_time, smoothing)\n                    self.avg_time = avg_time\n\n                self.n = n\n                self.refresh(lock_args=self.lock_args)\n\n                # If no `miniters` was specified, adjust automatically\n                # to the max iteration rate seen so far between 2 prints\n                if dynamic_miniters:\n                    if maxinterval and delta_t >= maxinterval:\n                        # Adjust miniters to time interval by rule of 3\n                        if mininterval:\n                            # Set miniters to correspond to mininterval\n                            miniters = delta_it * mininterval / delta_t\n                        else:\n                            # Set miniters to correspond to maxinterval\n                            miniters = delta_it * maxinterval / delta_t\n                    elif smoothing:\n                        # EMA-weight miniters to converge\n                        # towards the timeframe of mininterval\n                        rate = delta_it\n                        if mininterval and delta_t:\n                            rate *= mininterval / delta_t\n                        miniters = self.ema(rate, miniters, smoothing)\n                    else:\n                        # Maximum nb of iterations between 2 prints\n                        miniters = max(miniters, delta_it)\n\n                # Store old values for next call\n                self.n = self.last_print_n = last_print_n = n\n                self.last_print_t = last_print_t = cur_t\n                self.miniters = miniters\n\n    # Closing the progress bar.\n    # Update some internal variables for close().\n    self.last_print_n = last_print_n\n    self.n = n\n    self.miniters = miniters\n    self.close()",
                "def update(self, n=1):\n    \"\"\"\n    Manually update the progress bar, useful for streams\n    such as reading files.\n    E.g.:\n    >>> t = tqdm(total=filesize) # Initialise\n    >>> for current_buffer in stream:\n    ...    ...\n    ...    t.update(len(current_buffer))\n    >>> t.close()\n    The last line is highly recommended, but possibly not necessary if\n    `t.update()` will be called in such a way that `filesize` will be\n    exactly reached and printed.\n\n    Parameters\n    ----------\n    n  : int or float, optional\n        Increment to add to the internal counter of iterations\n        [default: 1]. If using float, consider specifying `{n:.3f}`\n        or similar in `bar_format`, or specifying `unit_scale`.\n    \"\"\"\n    # N.B.: see __iter__() for more comments.\n    if self.disable:\n        return\n\n    if n < 0:\n        self.last_print_n += n  # for auto-refresh logic to work\n    self.n += n\n\n    # check counter first to reduce calls to time()\n    if self.n - self.last_print_n >= self.miniters:\n        delta_t = self._time() - self.last_print_t\n        if delta_t >= self.mininterval:\n            cur_t = self._time()\n            delta_it = self.n - self.last_print_n  # >= n\n            # elapsed = cur_t - self.start_t\n            # EMA (not just overall average)\n            if self.smoothing and delta_t and delta_it:\n                rate = delta_t / delta_it\n                self.avg_time = self.ema(\n                    rate, self.avg_time, self.smoothing)\n\n            if not hasattr(self, \"sp\"):\n                raise TqdmDeprecationWarning(\n                    \"Please use `tqdm.gui.tqdm(...)`\"\n                    \" instead of `tqdm(..., gui=True)`\\n\",\n                    fp_write=getattr(self.fp, 'write', sys.stderr.write))\n\n            self.refresh(lock_args=self.lock_args)\n\n            # If no `miniters` was specified, adjust automatically to the\n            # maximum iteration rate seen so far between two prints.\n            # e.g.: After running `tqdm.update(5)`, subsequent\n            # calls to `tqdm.update()` will only cause an update after\n            # at least 5 more iterations.\n            if self.dynamic_miniters:\n                if self.maxinterval and delta_t >= self.maxinterval:\n                    if self.mininterval:\n                        self.miniters = delta_it * self.mininterval \\\n                            / delta_t\n                    else:\n                        self.miniters = delta_it * self.maxinterval \\\n                            / delta_t\n                elif self.smoothing:\n                    self.miniters = self.smoothing * delta_it * \\\n                        (self.mininterval / delta_t\n                         if self.mininterval and delta_t\n                         else 1) + \\\n                        (1 - self.smoothing) * self.miniters\n                else:\n                    self.miniters = max(self.miniters, delta_it)\n\n            # Store old values for next call\n            self.last_print_n = self.n\n            self.last_print_t = cur_t",
                "def close(self):\n    \"\"\"Cleanup and (if leave=False) close the progressbar.\"\"\"\n    if self.disable:\n        return\n\n    # Prevent multiple closures\n    self.disable = True\n\n    # decrement instance pos and remove from internal set\n    pos = abs(self.pos)\n    self._decr_instances(self)\n\n    # GUI mode\n    if not hasattr(self, \"sp\"):\n        return\n\n    # annoyingly, _supports_unicode isn't good enough\n    def fp_write(s):\n        self.fp.write(_unicode(s))\n\n    try:\n        fp_write('')\n    except ValueError as e:\n        if 'closed' in str(e):\n            return\n        raise  # pragma: no cover\n\n    leave = pos == 0 if self.leave is None else self.leave\n\n    with self._lock:\n        if leave:\n            # stats for overall rate (no weighted average)\n            self.avg_time = None\n            self.display(pos=0)\n            fp_write('\\n')\n        else:\n            self.display(msg='', pos=pos)\n            if not pos:\n                fp_write('\\r')",
                "def clear(self, nolock=False):\n    \"\"\"Clear current bar display.\"\"\"\n    if self.disable:\n        return\n\n    if not nolock:\n        self._lock.acquire()\n    self.moveto(abs(self.pos))\n    self.sp('')\n    self.fp.write('\\r')  # place cursor back at the beginning of line\n    self.moveto(-abs(self.pos))\n    if not nolock:\n        self._lock.release()",
                "def refresh(self, nolock=False, lock_args=None):\n    \"\"\"\n    Force refresh the display of this bar.\n\n    Parameters\n    ----------\n    nolock  : bool, optional\n        If `True`, does not lock.\n        If [default: `False`]: calls `acquire()` on internal lock.\n    lock_args  : tuple, optional\n        Passed to internal lock's `acquire()`.\n        If specified, will only `display()` if `acquire()` returns `True`.\n    \"\"\"\n    if self.disable:\n        return\n\n    if not nolock:\n        if lock_args:\n            if not self._lock.acquire(*lock_args):\n                return False\n        else:\n            self._lock.acquire()\n    self.display()\n    if not nolock:\n        self._lock.release()\n    return True",
                "def unpause(self):\n    \"\"\"Restart tqdm timer from last print time.\"\"\"\n    cur_t = self._time()\n    self.start_t += cur_t - self.last_print_t\n    self.last_print_t = cur_t",
                "def reset(self, total=None):\n    \"\"\"\n    Resets to 0 iterations for repeated use.\n\n    Consider combining with `leave=True`.\n\n    Parameters\n    ----------\n    total  : int or float, optional. Total to use for the new bar.\n    \"\"\"\n    self.last_print_n = self.n = 0\n    self.last_print_t = self.start_t = self._time()\n    if total is not None:\n        self.total = total\n    self.refresh()",
                "def set_description(self, desc=None, refresh=True):\n    \"\"\"\n    Set/modify description of the progress bar.\n\n    Parameters\n    ----------\n    desc  : str, optional\n    refresh  : bool, optional\n        Forces refresh [default: True].\n    \"\"\"\n    self.desc = desc + ': ' if desc else ''\n    if refresh:\n        self.refresh()",
                "def set_description_str(self, desc=None, refresh=True):\n    \"\"\"Set/modify description without ': ' appended.\"\"\"\n    self.desc = desc or ''\n    if refresh:\n        self.refresh()",
                "def set_postfix(self, ordered_dict=None, refresh=True, **kwargs):\n    \"\"\"\n    Set/modify postfix (additional stats)\n    with automatic formatting based on datatype.\n\n    Parameters\n    ----------\n    ordered_dict  : dict or OrderedDict, optional\n    refresh  : bool, optional\n        Forces refresh [default: True].\n    kwargs  : dict, optional\n    \"\"\"\n    # Sort in alphabetical order to be more deterministic\n    postfix = _OrderedDict([] if ordered_dict is None else ordered_dict)\n    for key in sorted(kwargs.keys()):\n        postfix[key] = kwargs[key]\n    # Preprocess stats according to datatype\n    for key in postfix.keys():\n        # Number: limit the length of the string\n        if isinstance(postfix[key], Number):\n            postfix[key] = self.format_num(postfix[key])\n        # Else for any other type, try to get the string conversion\n        elif not isinstance(postfix[key], _basestring):\n            postfix[key] = str(postfix[key])\n        # Else if it's a string, don't need to preprocess anything\n    # Stitch together to get the final postfix\n    self.postfix = ', '.join(key + '=' + postfix[key].strip()\n                             for key in postfix.keys())\n    if refresh:\n        self.refresh()",
                "def set_postfix_str(self, s='', refresh=True):\n    \"\"\"\n    Postfix without dictionary expansion, similar to prefix handling.\n    \"\"\"\n    self.postfix = str(s)\n    if refresh:\n        self.refresh()",
                "def moveto(self, n):\n    # TODO: private method\n    self.fp.write(_unicode('\\n' * n + _term_move_up() * -n))\n    self.fp.flush()",
                "@property\ndef format_dict(self):\n    \"\"\"Public API for read-only member access.\"\"\"\n    return dict(\n        n=self.n, total=self.total,\n        elapsed=self._time() - self.start_t\n        if hasattr(self, 'start_t') else 0,\n        ncols=self.dynamic_ncols(self.fp)\n        if self.dynamic_ncols else self.ncols,\n        prefix=self.desc, ascii=self.ascii, unit=self.unit,\n        unit_scale=self.unit_scale,\n        rate=1 / self.avg_time if self.avg_time else None,\n        bar_format=self.bar_format, postfix=self.postfix,\n        unit_divisor=self.unit_divisor)",
                "def display(self, msg=None, pos=None):\n    \"\"\"\n    Use `self.sp` to display `msg` in the specified `pos`.\n\n    Consider overloading this function when inheriting to use e.g.:\n    `self.some_frontend(**self.format_dict)` instead of `self.sp`.\n\n    Parameters\n    ----------\n    msg  : str, optional. What to display (default: `repr(self)`).\n    pos  : int, optional. Position to `moveto`\n      (default: `abs(self.pos)`).\n    \"\"\"\n    if pos is None:\n        pos = abs(self.pos)\n\n    if pos:\n        self.moveto(pos)\n    self.sp(self.__repr__() if msg is None else msg)\n    if pos:\n        self.moveto(-pos)",
                "@classmethod\n@contextmanager\ndef wrapattr(tclass, stream, method, total=None, bytes=True, **tkwargs):\n    \"\"\"\n    stream  : file-like object.\n    method  : str, \"read\" or \"write\". The result of `read()` and\n        the first argument of `write()` should have a `len()`.\n\n    >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj:\n    ...     while True:\n    ...         chunk = fobj.read(chunk_size)\n    ...         if not chunk:\n    ...             break\n    \"\"\"\n    with tclass(total=total, **tkwargs) as t:\n        if bytes:\n            t.unit = \"B\"\n            t.unit_scale = True\n            t.unit_divisor = 1024\n        yield CallbackIOWrapper(t.update, stream, method)",
                "def fp_write(s):\n    fp.write(_unicode(s))\n    fp_flush()",
                "def print_status(s):\n    len_s = len(s)\n    fp_write('\\r' + s + (' ' * max(last_len[0] - len_s, 0)))\n    last_len[0] = len_s",
                "def inner_generator(df_function='apply'):\n    def inner(df, func, *args, **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        df  : (DataFrame|Series)[GroupBy]\n            Data (may be grouped).\n        func  : function\n            To be applied on the (grouped) data.\n        **kwargs  : optional\n            Transmitted to `df.apply()`.\n        \"\"\"\n\n        # Precompute total iterations\n        total = tkwargs.pop(\"total\", getattr(df, 'ngroups', None))\n        if total is None:  # not grouped\n            if df_function == 'applymap':\n                total = df.size\n            elif isinstance(df, Series):\n                total = len(df)\n            elif _Rolling_and_Expanding is None or \\\n                    not isinstance(df, _Rolling_and_Expanding):\n                # DataFrame or Panel\n                axis = kwargs.get('axis', 0)\n                if axis == 'index':\n                    axis = 0\n                elif axis == 'columns':\n                    axis = 1\n                # when axis=0, total is shape[axis1]\n                total = df.size // df.shape[axis]\n\n        # Init bar\n        if deprecated_t[0] is not None:\n            t = deprecated_t[0]\n            deprecated_t[0] = None\n        else:\n            t = tclass(*targs, total=total, **tkwargs)\n\n        if len(args) > 0:\n            # *args intentionally not supported (see #244, #299)\n            TqdmDeprecationWarning(\n                \"Except func, normal arguments are intentionally\" +\n                \" not supported by\" +\n                \" `(DataFrame|Series|GroupBy).progress_apply`.\" +\n                \" Use keyword arguments instead.\",\n                fp_write=getattr(t.fp, 'write', sys.stderr.write))\n\n        try:\n            func = df._is_builtin_func(func)\n        except TypeError:\n            pass\n\n        # Define bar updating wrapper\n        def wrapper(*args, **kwargs):\n            # update tbar correctly\n            # it seems `pandas apply` calls `func` twice\n            # on the first column/row to decide whether it can\n            # take a fast or slow code path; so stop when t.total==t.n\n            t.update(n=1 if not t.total or t.n < t.total else 0)\n            return func(*args, **kwargs)\n\n        # Apply the provided function (in **kwargs)\n        # on the df using our wrapper (which provides bar updating)\n        result = getattr(df, df_function)(wrapper, **kwargs)\n\n        # Close bar and return pandas calculation result\n        t.close()\n        return result\n\n    return inner",
                "def fp_write(s):\n    self.fp.write(_unicode(s))",
                "def inner(df, func, *args, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    df  : (DataFrame|Series)[GroupBy]\n        Data (may be grouped).\n    func  : function\n        To be applied on the (grouped) data.\n    **kwargs  : optional\n        Transmitted to `df.apply()`.\n    \"\"\"\n\n    # Precompute total iterations\n    total = tkwargs.pop(\"total\", getattr(df, 'ngroups', None))\n    if total is None:  # not grouped\n        if df_function == 'applymap':\n            total = df.size\n        elif isinstance(df, Series):\n            total = len(df)\n        elif _Rolling_and_Expanding is None or \\\n                not isinstance(df, _Rolling_and_Expanding):\n            # DataFrame or Panel\n            axis = kwargs.get('axis', 0)\n            if axis == 'index':\n                axis = 0\n            elif axis == 'columns':\n                axis = 1\n            # when axis=0, total is shape[axis1]\n            total = df.size // df.shape[axis]\n\n    # Init bar\n    if deprecated_t[0] is not None:\n        t = deprecated_t[0]\n        deprecated_t[0] = None\n    else:\n        t = tclass(*targs, total=total, **tkwargs)\n\n    if len(args) > 0:\n        # *args intentionally not supported (see #244, #299)\n        TqdmDeprecationWarning(\n            \"Except func, normal arguments are intentionally\" +\n            \" not supported by\" +\n            \" `(DataFrame|Series|GroupBy).progress_apply`.\" +\n            \" Use keyword arguments instead.\",\n            fp_write=getattr(t.fp, 'write', sys.stderr.write))\n\n    try:\n        func = df._is_builtin_func(func)\n    except TypeError:\n        pass\n\n    # Define bar updating wrapper\n    def wrapper(*args, **kwargs):\n        # update tbar correctly\n        # it seems `pandas apply` calls `func` twice\n        # on the first column/row to decide whether it can\n        # take a fast or slow code path; so stop when t.total==t.n\n        t.update(n=1 if not t.total or t.n < t.total else 0)\n        return func(*args, **kwargs)\n\n    # Apply the provided function (in **kwargs)\n    # on the df using our wrapper (which provides bar updating)\n    result = getattr(df, df_function)(wrapper, **kwargs)\n\n    # Close bar and return pandas calculation result\n    t.close()\n    return result",
                "def wrapper(*args, **kwargs):\n    # update tbar correctly\n    # it seems `pandas apply` calls `func` twice\n    # on the first column/row to decide whether it can\n    # take a fast or slow code path; so stop when t.total==t.n\n    t.update(n=1 if not t.total or t.n < t.total else 0)\n    return func(*args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "trange(*args, **kwargs)",
                "__init__(self, msg, fp_write=None, *a, **k)",
                "__init__(self)",
                "acquire(self, *a, **k)",
                "release(self)",
                "__enter__(self)",
                "__exit__(self, *exc)",
                "create_mp_lock(cls)",
                "create_th_lock(cls)",
                "__init__(self, frac, default_len=10, charset=UTF)",
                "__format__(self, format_spec)",
                "format_sizeof(num, suffix='', divisor=1000)",
                "format_interval(t)",
                "format_num(n)",
                "ema(x, mu=None, alpha=0.3)",
                "status_printer(file)",
                "format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000, **extra_kwargs)",
                "__new__(cls, *args, **kwargs)",
                "_get_free_pos(cls, instance=None)",
                "_decr_instances(cls, instance)",
                "write(cls, s, file=None, end='\\n', nolock=False)",
                "external_write_mode(cls, file=None, nolock=False)",
                "set_lock(cls, lock)",
                "get_lock(cls)",
                "pandas(tclass, *targs, **tkwargs)",
                "__init__(self, iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, write_bytes=None, lock_args=None, gui=False, **kwargs)",
                "__bool__(self)",
                "__nonzero__(self)",
                "__len__(self)",
                "__enter__(self)",
                "__exit__(self, exc_type, exc_value, traceback)",
                "__del__(self)",
                "__repr__(self)",
                "_comparable(self)",
                "__hash__(self)",
                "__iter__(self)",
                "update(self, n=1)",
                "close(self)",
                "clear(self, nolock=False)",
                "refresh(self, nolock=False, lock_args=None)",
                "unpause(self)",
                "reset(self, total=None)",
                "set_description(self, desc=None, refresh=True)",
                "set_description_str(self, desc=None, refresh=True)",
                "set_postfix(self, ordered_dict=None, refresh=True, **kwargs)",
                "set_postfix_str(self, s='', refresh=True)",
                "moveto(self, n)",
                "format_dict(self)",
                "display(self, msg=None, pos=None)",
                "wrapattr(tclass, stream, method, total=None, bytes=True, **tkwargs)",
                "fp_write(s)",
                "print_status(s)",
                "inner_generator(df_function='apply')",
                "fp_write(s)",
                "inner(df, func, *args, **kwargs)",
                "wrapper(*args, **kwargs)"
            ],
            "variables_in_file": {
                "__author__": [
                    26
                ],
                "__all__": [
                    28
                ],
                "TypeError": [
                    34,
                    741,
                    1039,
                    1010,
                    920,
                    414
                ],
                "KeyError": [
                    551,
                    38,
                    159
                ],
                "Warning": [
                    42
                ],
                "fp_write": [
                    1258,
                    48,
                    49,
                    305,
                    1271,
                    1275
                ],
                "self.__class__.__name__": [
                    49
                ],
                "self.__class__": [
                    49
                ],
                "self": [
                    1027,
                    1028,
                    1031,
                    1033,
                    1036,
                    1037,
                    1038,
                    1040,
                    1043,
                    1046,
                    1047,
                    1048,
                    1049,
                    1052,
                    1056,
                    1064,
                    1067,
                    1071,
                    49,
                    1074,
                    52,
                    1080,
                    1084,
                    1089,
                    1090,
                    1091,
                    1092,
                    1093,
                    1094,
                    1095,
                    1096,
                    1097,
                    1098,
                    1100,
                    1104,
                    82,
                    83,
                    84,
                    85,
                    88,
                    1112,
                    1113,
                    92,
                    96,
                    1121,
                    1122,
                    99,
                    1124,
                    1125,
                    1144,
                    1150,
                    1151,
                    1152,
                    1156,
                    1157,
                    1158,
                    1159,
                    150,
                    151,
                    152,
                    158,
                    1183,
                    160,
                    1187,
                    1188,
                    166,
                    1191,
                    168,
                    1192,
                    170,
                    171,
                    1193,
                    1194,
                    1195,
                    175,
                    1198,
                    1200,
                    1201,
                    1203,
                    1207,
                    1209,
                    1216,
                    1217,
                    1218,
                    1219,
                    1222,
                    1224,
                    1225,
                    1226,
                    1227,
                    1229,
                    1231,
                    1234,
                    1235,
                    1239,
                    1243,
                    1246,
                    1247,
                    1250,
                    1255,
                    1264,
                    1266,
                    1269,
                    1270,
                    1273,
                    1279,
                    1283,
                    1284,
                    1285,
                    1286,
                    1287,
                    1289,
                    1304,
                    1309,
                    1312,
                    1313,
                    1315,
                    1320,
                    1321,
                    1322,
                    1334,
                    1335,
                    1337,
                    1338,
                    1350,
                    1352,
                    1356,
                    1358,
                    1380,
                    1386,
                    1389,
                    1395,
                    1397,
                    1401,
                    1402,
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    1433,
                    1436,
                    1437,
                    927,
                    928,
                    929,
                    930,
                    931,
                    932,
                    933,
                    1439,
                    937,
                    938,
                    939,
                    940,
                    984,
                    985,
                    986,
                    987,
                    988,
                    989,
                    990,
                    991,
                    992,
                    993,
                    994,
                    995,
                    996,
                    997,
                    998,
                    999,
                    1000,
                    1001,
                    1002,
                    1003,
                    1004,
                    1005,
                    1006,
                    1009,
                    1011,
                    1014,
                    1015,
                    1019,
                    1021,
                    1023
                ],
                "rstrip": [
                    50
                ],
                "str": [
                    1383,
                    265,
                    1260,
                    529,
                    50,
                    947,
                    1395,
                    409,
                    410
                ],
                "msg": [
                    50,
                    52,
                    1437
                ],
                "__init__": [
                    52
                ],
                "super": [
                    52
                ],
                "TqdmWarning": [
                    65,
                    1061,
                    147,
                    52,
                    55,
                    60
                ],
                "a": [
                    89,
                    52
                ],
                "k": [
                    89,
                    52
                ],
                "FutureWarning": [
                    55
                ],
                "DeprecationWarning": [
                    60
                ],
                "RuntimeWarning": [
                    65
                ],
                "object": [
                    128,
                    515,
                    70
                ],
                "self.create_mp_lock": [
                    82
                ],
                "self.create_th_lock": [
                    83
                ],
                "cls": [
                    515,
                    517,
                    519,
                    520,
                    521,
                    523,
                    524,
                    526,
                    531,
                    538,
                    548,
                    550,
                    557,
                    564,
                    566,
                    567,
                    571,
                    577,
                    592,
                    595,
                    84,
                    85,
                    608,
                    613,
                    103,
                    106,
                    618,
                    108,
                    619,
                    110,
                    620,
                    114,
                    116,
                    118
                ],
                "type": [
                    84
                ],
                "self.locks": [
                    88,
                    92,
                    85
                ],
                "lk": [
                    85
                ],
                "cls.mp_lock": [
                    106,
                    108,
                    85,
                    110
                ],
                "cls.th_lock": [
                    116,
                    85,
                    118
                ],
                "lock": [
                    613,
                    88,
                    89,
                    92,
                    93
                ],
                "lock.acquire": [
                    89
                ],
                "lock.release": [
                    93
                ],
                "self.acquire": [
                    96
                ],
                "self.release": [
                    99
                ],
                "hasattr": [
                    1250,
                    1410,
                    519,
                    103,
                    618,
                    1100,
                    559,
                    114,
                    914,
                    1047,
                    1203,
                    599,
                    1048,
                    539
                ],
                "RLock": [
                    106
                ],
                "ImportError": [
                    674,
                    679,
                    107,
                    684,
                    687,
                    661,
                    665,
                    670
                ],
                "OSError": [
                    117,
                    109
                ],
                "classmethod": [
                    1441,
                    610,
                    101,
                    582,
                    615,
                    622,
                    112,
                    535,
                    573,
                    542
                ],
                "th.RLock": [
                    116
                ],
                "th": [
                    116
                ],
                "TqdmDefaultWriteLock.create_th_lock": [
                    125
                ],
                "TqdmDefaultWriteLock": [
                    619,
                    125
                ],
                "ASCII": [
                    141
                ],
                "UTF": [
                    145,
                    142
                ],
                "join": [
                    1386,
                    142
                ],
                "map": [
                    142
                ],
                "_unich": [
                    142
                ],
                "range": [
                    540,
                    142
                ],
                "BLANK": [
                    143
                ],
                "frac": [
                    481,
                    451,
                    452,
                    146,
                    148,
                    150
                ],
                "warn": [
                    528,
                    147,
                    1061
                ],
                "max": [
                    482,
                    1231,
                    305,
                    148,
                    501,
                    1147
                ],
                "min": [
                    148,
                    540
                ],
                "default_len": [
                    149,
                    151
                ],
                "self.frac": [
                    150,
                    175
                ],
                "self.default_len": [
                    168,
                    171,
                    166,
                    151
                ],
                "self.charset": [
                    152,
                    170,
                    160
                ],
                "charset": [
                    160,
                    170,
                    173,
                    177,
                    178,
                    183,
                    152,
                    158
                ],
                "format_spec": [
                    162,
                    163,
                    164,
                    155,
                    156
                ],
                "_type": [
                    156,
                    158
                ],
                "lower": [
                    156
                ],
                "dict": [
                    433,
                    158,
                    1407
                ],
                "self.ASCII": [
                    158
                ],
                "self.UTF": [
                    158
                ],
                "self.BLANK": [
                    158
                ],
                "N_BARS": [
                    164,
                    165,
                    166,
                    168,
                    171,
                    175,
                    181,
                    183
                ],
                "int": [
                    242,
                    164,
                    175
                ],
                "nsyms": [
                    173,
                    175
                ],
                "len": [
                    711,
                    266,
                    173,
                    304,
                    919,
                    1048,
                    730,
                    540
                ],
                "bar_length": [
                    177,
                    181,
                    174,
                    183
                ],
                "frac_bar_length": [
                    178,
                    174
                ],
                "divmod": [
                    242,
                    243,
                    174
                ],
                "bar": [
                    184,
                    177,
                    182
                ],
                "frac_bar": [
                    178,
                    182
                ],
                "Comparable": [
                    187
                ],
                "monitor_interval": [
                    194
                ],
                "monitor": [
                    195
                ],
                "unit": [
                    996,
                    511,
                    398,
                    401,
                    437,
                    217,
                    221,
                    222,
                    223
                ],
                "abs": [
                    1284,
                    1287,
                    218,
                    559,
                    1071,
                    1433,
                    538,
                    219,
                    220,
                    1246
                ],
                "num": [
                    224,
                    225,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223
                ],
                "format": [
                    225,
                    454,
                    510,
                    264,
                    428,
                    397,
                    400,
                    245,
                    247,
                    221,
                    222,
                    223
                ],
                "suffix": [
                    225,
                    221,
                    222,
                    223
                ],
                "divisor": [
                    224
                ],
                "staticmethod": [
                    227,
                    197,
                    268,
                    310,
                    249,
                    287
                ],
                "mins": [
                    242,
                    243
                ],
                "s": [
                    579,
                    1255,
                    298,
                    304,
                    305,
                    242,
                    1395,
                    245,
                    247
                ],
                "t": [
                    737,
                    750,
                    1455,
                    1457,
                    242,
                    1458,
                    1459,
                    725,
                    758,
                    1460,
                    728
                ],
                "h": [
                    243,
                    244,
                    245
                ],
                "m": [
                    243,
                    245,
                    247
                ],
                "f": [
                    264,
                    266,
                    600
                ],
                "replace": [
                    264
                ],
                "n": [
                    1157,
                    264,
                    265,
                    266,
                    393,
                    405,
                    409,
                    417,
                    1186,
                    1187,
                    1188,
                    435,
                    451,
                    1095,
                    1110,
                    1112,
                    1117,
                    1124,
                    376,
                    1401,
                    1150,
                    383
                ],
                "mu": [
                    285
                ],
                "x": [
                    285
                ],
                "alpha": [
                    285
                ],
                "fp": [
                    576,
                    579,
                    580,
                    294,
                    295,
                    298,
                    589,
                    599,
                    600
                ],
                "file": [
                    576,
                    577,
                    294,
                    903,
                    905,
                    906,
                    589,
                    974,
                    911,
                    912,
                    945,
                    914,
                    950,
                    955,
                    988,
                    959
                ],
                "fp_flush": [
                    299,
                    295
                ],
                "getattr": [
                    737,
                    706,
                    295,
                    1071,
                    912,
                    945,
                    1104,
                    595,
                    755,
                    1207,
                    1049
                ],
                "fp.write": [
                    298,
                    579,
                    580
                ],
                "_unicode": [
                    486,
                    1255,
                    1401,
                    298,
                    978,
                    473
                ],
                "last_len": [
                    305,
                    306,
                    301
                ],
                "len_s": [
                    304,
                    305,
                    306
                ],
                "print_status": [
                    308
                ],
                "total": [
                    917,
                    406,
                    919,
                    407,
                    921,
                    410,
                    922,
                    924,
                    417,
                    933,
                    1455,
                    435,
                    1336,
                    1337,
                    449,
                    706,
                    451,
                    707,
                    709,
                    711,
                    721,
                    728,
                    986,
                    376,
                    377,
                    381,
                    382
                ],
                "unit_scale": [
                    385,
                    386,
                    997,
                    396,
                    399,
                    404,
                    380,
                    382,
                    383
                ],
                "rate": [
                    384,
                    385,
                    392,
                    393,
                    394,
                    396,
                    397,
                    398,
                    417,
                    418,
                    1199,
                    1201,
                    438,
                    439,
                    1120,
                    1121,
                    1141,
                    1143,
                    1144
                ],
                "elapsed_str": [
                    436,
                    388,
                    429,
                    511
                ],
                "tqdm.format_interval": [
                    418,
                    388
                ],
                "tqdm": [
                    418,
                    395,
                    388,
                    1468
                ],
                "elapsed": [
                    392,
                    393,
                    436,
                    388
                ],
                "inv_rate": [
                    394,
                    399,
                    400,
                    401,
                    402,
                    438,
                    440
                ],
                "format_sizeof": [
                    395,
                    396,
                    399,
                    405,
                    406
                ],
                "tqdm.format_sizeof": [
                    395
                ],
                "rate_noinv_fmt": [
                    440,
                    402,
                    396
                ],
                "rate_inv_fmt": [
                    441,
                    402,
                    399
                ],
                "rate_fmt": [
                    402,
                    511,
                    429,
                    439
                ],
                "n_fmt": [
                    429,
                    435,
                    405,
                    409,
                    511
                ],
                "unit_divisor": [
                    442,
                    405,
                    406,
                    998
                ],
                "total_fmt": [
                    410,
                    435,
                    429,
                    406
                ],
                "postfix": [
                    1377,
                    1379,
                    1380,
                    1375,
                    1382,
                    1383,
                    1386,
                    1387,
                    429,
                    1007,
                    1009,
                    1011,
                    442,
                    1373,
                    413,
                    511
                ],
                "remaining": [
                    417,
                    418,
                    444
                ],
                "remaining_str": [
                    418,
                    444,
                    429
                ],
                "prefix": [
                    421,
                    423,
                    424,
                    464,
                    437,
                    509
                ],
                "bool_prefix_colon_already": [
                    424,
                    423
                ],
                "l_bar": [
                    454,
                    424,
                    457,
                    426,
                    459,
                    493,
                    494,
                    445
                ],
                "r_bar": [
                    457,
                    428,
                    445
                ],
                "format_dict": [
                    487,
                    459,
                    461,
                    494,
                    496,
                    433,
                    471,
                    504,
                    474
                ],
                "ncols": [
                    482,
                    483,
                    456,
                    488,
                    489,
                    437,
                    502,
                    501,
                    950,
                    505,
                    506,
                    955,
                    989,
                    959
                ],
                "extra_kwargs": [
                    446
                ],
                "percentage": [
                    452,
                    461,
                    454
                ],
                "format_dict.update": [
                    459,
                    461,
                    494
                ],
                "bar_format": [
                    485,
                    486,
                    487,
                    491,
                    460,
                    1005,
                    496,
                    465,
                    976,
                    467,
                    978,
                    471,
                    504,
                    473,
                    474
                ],
                "bar_format.replace": [
                    465
                ],
                "full_bar": [
                    480,
                    485,
                    487,
                    495,
                    496,
                    497,
                    499,
                    469,
                    471,
                    504,
                    474,
                    475
                ],
                "FormatReplace": [
                    469,
                    495
                ],
                "nobar": [
                    482,
                    496,
                    498,
                    501,
                    471,
                    474,
                    477
                ],
                "bar_format.format": [
                    487,
                    496,
                    471,
                    504,
                    474
                ],
                "UnicodeEncodeError": [
                    472
                ],
                "full_bar.format_called": [
                    497,
                    475
                ],
                "Bar": [
                    480,
                    499,
                    484,
                    503
                ],
                "disp_len": [
                    482,
                    501
                ],
                "ascii": [
                    994,
                    484,
                    973,
                    974,
                    976
                ],
                "Bar.ASCII": [
                    484
                ],
                "Bar.UTF": [
                    484
                ],
                "_is_ascii": [
                    976,
                    485
                ],
                "full_bar.charset": [
                    485
                ],
                "res": [
                    504,
                    489,
                    506,
                    487
                ],
                "disp_trim": [
                    489,
                    506
                ],
                "Bar.BLANK": [
                    503
                ],
                "instance": [
                    515,
                    550,
                    521,
                    556,
                    559,
                    533,
                    539
                ],
                "object.__new__": [
                    515
                ],
                "cls.get_lock": [
                    592,
                    517
                ],
                "cls._instances": [
                    550,
                    520,
                    521,
                    557,
                    564,
                    538
                ],
                "WeakSet": [
                    520
                ],
                "cls._instances.add": [
                    521
                ],
                "cls.monitor_interval": [
                    531,
                    523,
                    526
                ],
                "cls.monitor": [
                    523,
                    524,
                    526,
                    564,
                    566,
                    567,
                    571
                ],
                "cls.monitor.report": [
                    524
                ],
                "TMonitor": [
                    526
                ],
                "Exception": [
                    527
                ],
                "e": [
                    529,
                    1260
                ],
                "TqdmMonitorWarning": [
                    530
                ],
                "positions": [
                    538,
                    540
                ],
                "set": [
                    538,
                    540
                ],
                "inst.pos": [
                    561,
                    538,
                    559
                ],
                "inst": [
                    557,
                    559,
                    560,
                    561,
                    595,
                    602,
                    599,
                    600,
                    601,
                    538,
                    539,
                    605,
                    606
                ],
                "difference": [
                    540
                ],
                "cls._lock": [
                    608,
                    548,
                    613,
                    619,
                    620
                ],
                "cls._instances.remove": [
                    550
                ],
                "instance.gui": [
                    556
                ],
                "instance.pos": [
                    559
                ],
                "inst.clear": [
                    560,
                    601
                ],
                "cls.monitor.exit": [
                    566
                ],
                "AttributeError": [
                    568,
                    1057,
                    920
                ],
                "sys.stdout": [
                    576,
                    600,
                    589,
                    950
                ],
                "sys": [
                    576,
                    737,
                    903,
                    906,
                    589,
                    1104,
                    945,
                    950,
                    1207,
                    600
                ],
                "cls.external_write_mode": [
                    577
                ],
                "nolock": [
                    577,
                    1282,
                    1314,
                    1288,
                    591,
                    1307,
                    607
                ],
                "end": [
                    580
                ],
                "acquire": [
                    592
                ],
                "inst_cleared": [
                    594,
                    605,
                    602
                ],
                "inst.fp": [
                    600,
                    599
                ],
                "all": [
                    599
                ],
                "sys.stderr": [
                    737,
                    906,
                    1104,
                    945,
                    950,
                    1207,
                    600
                ],
                "inst_cleared.append": [
                    602
                ],
                "inst.refresh": [
                    606
                ],
                "cls._lock.release": [
                    608
                ],
                "contextmanager": [
                    1442,
                    583
                ],
                "Panel": [
                    775,
                    662,
                    774
                ],
                "_Rolling_and_Expanding": [
                    712,
                    713,
                    783,
                    784,
                    666
                ],
                "PanelGroupBy": [
                    688,
                    776,
                    777
                ],
                "deprecated_t": [
                    690,
                    724,
                    725,
                    726
                ],
                "tkwargs.pop": [
                    706,
                    690
                ],
                "tkwargs": [
                    728,
                    706,
                    690,
                    1455
                ],
                "df": [
                    706,
                    740,
                    709,
                    710,
                    711,
                    713,
                    721,
                    755
                ],
                "df_function": [
                    755,
                    708
                ],
                "df.size": [
                    721,
                    709
                ],
                "isinstance": [
                    713,
                    1382,
                    1379,
                    710
                ],
                "Series": [
                    765,
                    710,
                    767
                ],
                "axis": [
                    715,
                    716,
                    717,
                    718,
                    719,
                    721
                ],
                "kwargs.get": [
                    715
                ],
                "kwargs": [
                    936,
                    715,
                    751,
                    946,
                    755,
                    947,
                    1468,
                    1374,
                    1375
                ],
                "df.shape": [
                    721
                ],
                "tclass": [
                    728,
                    1455
                ],
                "targs": [
                    728
                ],
                "args": [
                    730,
                    1468,
                    751
                ],
                "TqdmDeprecationWarning": [
                    1204,
                    732,
                    1101,
                    942
                ],
                "t.fp": [
                    737
                ],
                "sys.stderr.write": [
                    1104,
                    737,
                    945,
                    1207
                ],
                "func": [
                    740,
                    751
                ],
                "df._is_builtin_func": [
                    740
                ],
                "t.update": [
                    1460,
                    750
                ],
                "t.total": [
                    750
                ],
                "t.n": [
                    750
                ],
                "result": [
                    755,
                    759
                ],
                "wrapper": [
                    755
                ],
                "t.close": [
                    758
                ],
                "inner": [
                    761
                ],
                "Series.progress_apply": [
                    765
                ],
                "inner_generator": [
                    768,
                    770,
                    771,
                    772,
                    775,
                    777,
                    779,
                    780,
                    781,
                    784,
                    765,
                    766,
                    767
                ],
                "SeriesGroupBy.progress_apply": [
                    766
                ],
                "SeriesGroupBy": [
                    768,
                    766
                ],
                "Series.progress_map": [
                    767
                ],
                "SeriesGroupBy.progress_map": [
                    768
                ],
                "DataFrame.progress_apply": [
                    770
                ],
                "DataFrame": [
                    770,
                    772
                ],
                "DataFrameGroupBy.progress_apply": [
                    771
                ],
                "DataFrameGroupBy": [
                    771
                ],
                "DataFrame.progress_applymap": [
                    772
                ],
                "Panel.progress_apply": [
                    775
                ],
                "PanelGroupBy.progress_apply": [
                    777
                ],
                "GroupBy.progress_apply": [
                    779
                ],
                "GroupBy": [
                    779,
                    780,
                    781
                ],
                "GroupBy.progress_aggregate": [
                    780
                ],
                "GroupBy.progress_transform": [
                    781
                ],
                "_Rolling_and_Expanding.progress_apply": [
                    784
                ],
                "write_bytes": [
                    908,
                    902,
                    903
                ],
                "sys.version_info": [
                    903
                ],
                "SimpleTextIOWrapper": [
                    911
                ],
                "disable": [
                    928,
                    995,
                    914,
                    915,
                    926
                ],
                "file.isatty": [
                    914
                ],
                "iterable": [
                    919,
                    1106,
                    917,
                    984,
                    1080,
                    1085,
                    927
                ],
                "float": [
                    922
                ],
                "self.iterable": [
                    1038,
                    1040,
                    1046,
                    1047,
                    984,
                    1048,
                    1080,
                    927
                ],
                "self.disable": [
                    928,
                    995,
                    1279,
                    937,
                    1239,
                    1304,
                    1243,
                    1084,
                    1183
                ],
                "self._lock": [
                    1312,
                    929,
                    1283,
                    1315,
                    1289,
                    938,
                    1266,
                    1019,
                    1309
                ],
                "self.pos": [
                    930,
                    1284,
                    1287,
                    939,
                    1433,
                    1021,
                    1246,
                    1023
                ],
                "self._get_free_pos": [
                    930,
                    939,
                    1021
                ],
                "self._instances.remove": [
                    931,
                    940
                ],
                "self._instances": [
                    931,
                    940
                ],
                "self.n": [
                    1408,
                    1124,
                    932,
                    1157,
                    1095,
                    1188,
                    1191,
                    1195,
                    1234,
                    1334,
                    1015,
                    1150
                ],
                "initial": [
                    932,
                    1014,
                    1015
                ],
                "self.total": [
                    1408,
                    933,
                    1036,
                    1037,
                    1046,
                    1337,
                    986
                ],
                "TqdmKeyError": [
                    947
                ],
                "dynamic_ncols": [
                    1001,
                    951,
                    952,
                    953,
                    954,
                    955
                ],
                "_environ_cols_wrapper": [
                    953,
                    957
                ],
                "_dynamic_ncols": [
                    957,
                    958,
                    959
                ],
                "miniters": [
                    992,
                    961,
                    962,
                    1091,
                    1152,
                    1158,
                    1134,
                    1137,
                    1144,
                    1113,
                    1147
                ],
                "dynamic_miniters": [
                    993,
                    963,
                    1092,
                    965,
                    1129
                ],
                "mininterval": [
                    1089,
                    967,
                    968,
                    1132,
                    1134,
                    1142,
                    1143,
                    1115,
                    990
                ],
                "maxinterval": [
                    1090,
                    970,
                    971,
                    1130,
                    1137,
                    991
                ],
                "_supports_unicode": [
                    974
                ],
                "smoothing": [
                    1121,
                    1096,
                    1002,
                    1138,
                    980,
                    981,
                    1144,
                    1119
                ],
                "self.desc": [
                    985,
                    1356,
                    1413,
                    1350
                ],
                "desc": [
                    985,
                    1356,
                    1350
                ],
                "self.leave": [
                    1264,
                    987
                ],
                "leave": [
                    1264,
                    987,
                    1267
                ],
                "self.fp": [
                    1027,
                    1411,
                    1286,
                    1255,
                    1104,
                    1207,
                    1401,
                    1402,
                    988
                ],
                "self.ncols": [
                    1412,
                    989
                ],
                "self.mininterval": [
                    1089,
                    1218,
                    1219,
                    1193,
                    1226,
                    1227,
                    990
                ],
                "self.maxinterval": [
                    1217,
                    1090,
                    1222,
                    991
                ],
                "self.miniters": [
                    992,
                    1152,
                    1091,
                    1219,
                    1158,
                    1191,
                    1222,
                    1225,
                    1229,
                    1231,
                    1112,
                    1113
                ],
                "self.dynamic_miniters": [
                    1216,
                    993,
                    1092
                ],
                "self.ascii": [
                    994,
                    1413
                ],
                "self.unit": [
                    996,
                    1413
                ],
                "self.unit_scale": [
                    997,
                    1414
                ],
                "self.unit_divisor": [
                    1417,
                    998
                ],
                "self.lock_args": [
                    1209,
                    1028,
                    1125,
                    999
                ],
                "lock_args": [
                    1308,
                    1309,
                    999
                ],
                "self.gui": [
                    1000
                ],
                "gui": [
                    1000,
                    1025
                ],
                "self.dynamic_ncols": [
                    1001,
                    1411,
                    1412
                ],
                "self.smoothing": [
                    1096,
                    1224,
                    1002,
                    1225,
                    1229,
                    1198,
                    1201
                ],
                "self.avg_time": [
                    1122,
                    1415,
                    1097,
                    1003,
                    1200,
                    1201,
                    1269
                ],
                "self._time": [
                    1409,
                    1031,
                    1192,
                    1320,
                    1098,
                    1194,
                    1004,
                    1335
                ],
                "time": [
                    1098,
                    1004,
                    1114,
                    1116
                ],
                "self.bar_format": [
                    1416,
                    1005
                ],
                "self.postfix": [
                    1416,
                    1386,
                    1006,
                    1395,
                    1011
                ],
                "self.set_postfix": [
                    1009
                ],
                "self.last_print_n": [
                    1187,
                    1156,
                    1094,
                    1191,
                    1195,
                    1234,
                    1014,
                    1334,
                    1150
                ],
                "position": [
                    1020,
                    1023
                ],
                "self.sp": [
                    1027,
                    1285,
                    1437
                ],
                "self.status_printer": [
                    1027
                ],
                "self.refresh": [
                    1028,
                    1125,
                    1352,
                    1389,
                    1358,
                    1397,
                    1209,
                    1338
                ],
                "self.last_print_t": [
                    1093,
                    1031,
                    1192,
                    1033,
                    1321,
                    1322,
                    1235,
                    1335,
                    1151
                ],
                "self.start_t": [
                    1033,
                    1409,
                    1335,
                    1321
                ],
                "bool": [
                    1040
                ],
                "self.__bool__": [
                    1043
                ],
                "self.iterable.shape": [
                    1047
                ],
                "self.close": [
                    1056,
                    1064,
                    1159
                ],
                "exc_type": [
                    1059
                ],
                "exc_value": [
                    1059
                ],
                "traceback": [
                    1059
                ],
                "self.format_meter": [
                    1067
                ],
                "self.format_dict": [
                    1067
                ],
                "property": [
                    1404,
                    1069
                ],
                "id": [
                    1074
                ],
                "obj": [
                    1106,
                    1107,
                    1085,
                    1086
                ],
                "last_print_t": [
                    1114,
                    1093,
                    1151
                ],
                "last_print_n": [
                    1156,
                    1094,
                    1112,
                    1117,
                    1150
                ],
                "avg_time": [
                    1097,
                    1122,
                    1121
                ],
                "delta_t": [
                    1120,
                    1217,
                    1220,
                    1223,
                    1192,
                    1193,
                    1130,
                    1227,
                    1226,
                    1134,
                    1198,
                    1199,
                    1137,
                    1142,
                    1143,
                    1114,
                    1115,
                    1119
                ],
                "cur_t": [
                    1320,
                    1321,
                    1194,
                    1322,
                    1235,
                    1116,
                    1151
                ],
                "delta_it": [
                    1120,
                    1219,
                    1222,
                    1225,
                    1195,
                    1134,
                    1198,
                    1199,
                    1137,
                    1231,
                    1141,
                    1147,
                    1117,
                    1119
                ],
                "self.ema": [
                    1144,
                    1121,
                    1200
                ],
                "pos": [
                    1438,
                    1433,
                    1264,
                    1432,
                    1273,
                    1274,
                    1435,
                    1436,
                    1246,
                    1439
                ],
                "self._decr_instances": [
                    1247
                ],
                "self.fp.write": [
                    1401,
                    1286,
                    1255
                ],
                "ValueError": [
                    1259
                ],
                "self.display": [
                    1273,
                    1270,
                    1313
                ],
                "self._lock.acquire": [
                    1312,
                    1283,
                    1309
                ],
                "self.moveto": [
                    1439,
                    1436,
                    1284,
                    1287
                ],
                "self._lock.release": [
                    1289,
                    1315
                ],
                "refresh": [
                    1396,
                    1388,
                    1357,
                    1351
                ],
                "_OrderedDict": [
                    1373
                ],
                "ordered_dict": [
                    1373
                ],
                "key": [
                    1377,
                    1379,
                    1380,
                    1382,
                    1383,
                    1386,
                    1387,
                    1374,
                    1375
                ],
                "sorted": [
                    1374
                ],
                "kwargs.keys": [
                    1374
                ],
                "postfix.keys": [
                    1377,
                    1387
                ],
                "Number": [
                    1379
                ],
                "self.format_num": [
                    1380
                ],
                "_basestring": [
                    1382
                ],
                "strip": [
                    1386
                ],
                "_term_move_up": [
                    1401
                ],
                "self.fp.flush": [
                    1402
                ],
                "self.__repr__": [
                    1437
                ],
                "bytes": [
                    1456
                ],
                "t.unit": [
                    1457
                ],
                "t.unit_scale": [
                    1458
                ],
                "t.unit_divisor": [
                    1459
                ],
                "CallbackIOWrapper": [
                    1460
                ],
                "stream": [
                    1460
                ],
                "method": [
                    1460
                ],
                "_range": [
                    1468
                ]
            },
            "filtered_variables_in_file": {
                "__author__": [
                    26
                ],
                "__all__": [
                    28
                ],
                "fp_write": [
                    1258,
                    48,
                    49,
                    305,
                    1271,
                    1275
                ],
                "self.__class__.__name__": [
                    49
                ],
                "self.__class__": [
                    49
                ],
                "self": [
                    1027,
                    1028,
                    1031,
                    1033,
                    1036,
                    1037,
                    1038,
                    1040,
                    1043,
                    1046,
                    1047,
                    1048,
                    1049,
                    1052,
                    1056,
                    1064,
                    1067,
                    1071,
                    49,
                    1074,
                    52,
                    1080,
                    1084,
                    1089,
                    1090,
                    1091,
                    1092,
                    1093,
                    1094,
                    1095,
                    1096,
                    1097,
                    1098,
                    1100,
                    1104,
                    82,
                    83,
                    84,
                    85,
                    88,
                    1112,
                    1113,
                    92,
                    96,
                    1121,
                    1122,
                    99,
                    1124,
                    1125,
                    1144,
                    1150,
                    1151,
                    1152,
                    1156,
                    1157,
                    1158,
                    1159,
                    150,
                    151,
                    152,
                    158,
                    1183,
                    160,
                    1187,
                    1188,
                    166,
                    1191,
                    168,
                    1192,
                    170,
                    171,
                    1193,
                    1194,
                    1195,
                    175,
                    1198,
                    1200,
                    1201,
                    1203,
                    1207,
                    1209,
                    1216,
                    1217,
                    1218,
                    1219,
                    1222,
                    1224,
                    1225,
                    1226,
                    1227,
                    1229,
                    1231,
                    1234,
                    1235,
                    1239,
                    1243,
                    1246,
                    1247,
                    1250,
                    1255,
                    1264,
                    1266,
                    1269,
                    1270,
                    1273,
                    1279,
                    1283,
                    1284,
                    1285,
                    1286,
                    1287,
                    1289,
                    1304,
                    1309,
                    1312,
                    1313,
                    1315,
                    1320,
                    1321,
                    1322,
                    1334,
                    1335,
                    1337,
                    1338,
                    1350,
                    1352,
                    1356,
                    1358,
                    1380,
                    1386,
                    1389,
                    1395,
                    1397,
                    1401,
                    1402,
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    1433,
                    1436,
                    1437,
                    927,
                    928,
                    929,
                    930,
                    931,
                    932,
                    933,
                    1439,
                    937,
                    938,
                    939,
                    940,
                    984,
                    985,
                    986,
                    987,
                    988,
                    989,
                    990,
                    991,
                    992,
                    993,
                    994,
                    995,
                    996,
                    997,
                    998,
                    999,
                    1000,
                    1001,
                    1002,
                    1003,
                    1004,
                    1005,
                    1006,
                    1009,
                    1011,
                    1014,
                    1015,
                    1019,
                    1021,
                    1023
                ],
                "rstrip": [
                    50
                ],
                "msg": [
                    50,
                    52,
                    1437
                ],
                "__init__": [
                    52
                ],
                "TqdmWarning": [
                    65,
                    1061,
                    147,
                    52,
                    55,
                    60
                ],
                "a": [
                    89,
                    52
                ],
                "k": [
                    89,
                    52
                ],
                "self.create_mp_lock": [
                    82
                ],
                "self.create_th_lock": [
                    83
                ],
                "cls": [
                    515,
                    517,
                    519,
                    520,
                    521,
                    523,
                    524,
                    526,
                    531,
                    538,
                    548,
                    550,
                    557,
                    564,
                    566,
                    567,
                    571,
                    577,
                    592,
                    595,
                    84,
                    85,
                    608,
                    613,
                    103,
                    106,
                    618,
                    108,
                    619,
                    110,
                    620,
                    114,
                    116,
                    118
                ],
                "self.locks": [
                    88,
                    92,
                    85
                ],
                "lk": [
                    85
                ],
                "cls.mp_lock": [
                    106,
                    108,
                    85,
                    110
                ],
                "cls.th_lock": [
                    116,
                    85,
                    118
                ],
                "lock": [
                    613,
                    88,
                    89,
                    92,
                    93
                ],
                "lock.acquire": [
                    89
                ],
                "lock.release": [
                    93
                ],
                "self.acquire": [
                    96
                ],
                "self.release": [
                    99
                ],
                "RLock": [
                    106
                ],
                "th.RLock": [
                    116
                ],
                "th": [
                    116
                ],
                "TqdmDefaultWriteLock.create_th_lock": [
                    125
                ],
                "TqdmDefaultWriteLock": [
                    619,
                    125
                ],
                "ASCII": [
                    141
                ],
                "UTF": [
                    145,
                    142
                ],
                "join": [
                    1386,
                    142
                ],
                "_unich": [
                    142
                ],
                "BLANK": [
                    143
                ],
                "frac": [
                    481,
                    451,
                    452,
                    146,
                    148,
                    150
                ],
                "warn": [
                    528,
                    147,
                    1061
                ],
                "default_len": [
                    149,
                    151
                ],
                "self.frac": [
                    150,
                    175
                ],
                "self.default_len": [
                    168,
                    171,
                    166,
                    151
                ],
                "self.charset": [
                    152,
                    170,
                    160
                ],
                "charset": [
                    160,
                    170,
                    173,
                    177,
                    178,
                    183,
                    152,
                    158
                ],
                "format_spec": [
                    162,
                    163,
                    164,
                    155,
                    156
                ],
                "_type": [
                    156,
                    158
                ],
                "lower": [
                    156
                ],
                "self.ASCII": [
                    158
                ],
                "self.UTF": [
                    158
                ],
                "self.BLANK": [
                    158
                ],
                "N_BARS": [
                    164,
                    165,
                    166,
                    168,
                    171,
                    175,
                    181,
                    183
                ],
                "nsyms": [
                    173,
                    175
                ],
                "bar_length": [
                    177,
                    181,
                    174,
                    183
                ],
                "frac_bar_length": [
                    178,
                    174
                ],
                "bar": [
                    184,
                    177,
                    182
                ],
                "frac_bar": [
                    178,
                    182
                ],
                "Comparable": [
                    187
                ],
                "monitor_interval": [
                    194
                ],
                "monitor": [
                    195
                ],
                "unit": [
                    996,
                    511,
                    398,
                    401,
                    437,
                    217,
                    221,
                    222,
                    223
                ],
                "num": [
                    224,
                    225,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223
                ],
                "suffix": [
                    225,
                    221,
                    222,
                    223
                ],
                "divisor": [
                    224
                ],
                "mins": [
                    242,
                    243
                ],
                "s": [
                    579,
                    1255,
                    298,
                    304,
                    305,
                    242,
                    1395,
                    245,
                    247
                ],
                "t": [
                    737,
                    750,
                    1455,
                    1457,
                    242,
                    1458,
                    1459,
                    725,
                    758,
                    1460,
                    728
                ],
                "h": [
                    243,
                    244,
                    245
                ],
                "m": [
                    243,
                    245,
                    247
                ],
                "f": [
                    264,
                    266,
                    600
                ],
                "replace": [
                    264
                ],
                "n": [
                    1157,
                    264,
                    265,
                    266,
                    393,
                    405,
                    409,
                    417,
                    1186,
                    1187,
                    1188,
                    435,
                    451,
                    1095,
                    1110,
                    1112,
                    1117,
                    1124,
                    376,
                    1401,
                    1150,
                    383
                ],
                "mu": [
                    285
                ],
                "x": [
                    285
                ],
                "alpha": [
                    285
                ],
                "fp": [
                    576,
                    579,
                    580,
                    294,
                    295,
                    298,
                    589,
                    599,
                    600
                ],
                "file": [
                    576,
                    577,
                    294,
                    903,
                    905,
                    906,
                    589,
                    974,
                    911,
                    912,
                    945,
                    914,
                    950,
                    955,
                    988,
                    959
                ],
                "fp_flush": [
                    299,
                    295
                ],
                "fp.write": [
                    298,
                    579,
                    580
                ],
                "_unicode": [
                    486,
                    1255,
                    1401,
                    298,
                    978,
                    473
                ],
                "last_len": [
                    305,
                    306,
                    301
                ],
                "len_s": [
                    304,
                    305,
                    306
                ],
                "print_status": [
                    308
                ],
                "total": [
                    917,
                    406,
                    919,
                    407,
                    921,
                    410,
                    922,
                    924,
                    417,
                    933,
                    1455,
                    435,
                    1336,
                    1337,
                    449,
                    706,
                    451,
                    707,
                    709,
                    711,
                    721,
                    728,
                    986,
                    376,
                    377,
                    381,
                    382
                ],
                "unit_scale": [
                    385,
                    386,
                    997,
                    396,
                    399,
                    404,
                    380,
                    382,
                    383
                ],
                "rate": [
                    384,
                    385,
                    392,
                    393,
                    394,
                    396,
                    397,
                    398,
                    417,
                    418,
                    1199,
                    1201,
                    438,
                    439,
                    1120,
                    1121,
                    1141,
                    1143,
                    1144
                ],
                "elapsed_str": [
                    436,
                    388,
                    429,
                    511
                ],
                "tqdm.format_interval": [
                    418,
                    388
                ],
                "tqdm": [
                    418,
                    395,
                    388,
                    1468
                ],
                "elapsed": [
                    392,
                    393,
                    436,
                    388
                ],
                "inv_rate": [
                    394,
                    399,
                    400,
                    401,
                    402,
                    438,
                    440
                ],
                "format_sizeof": [
                    395,
                    396,
                    399,
                    405,
                    406
                ],
                "tqdm.format_sizeof": [
                    395
                ],
                "rate_noinv_fmt": [
                    440,
                    402,
                    396
                ],
                "rate_inv_fmt": [
                    441,
                    402,
                    399
                ],
                "rate_fmt": [
                    402,
                    511,
                    429,
                    439
                ],
                "n_fmt": [
                    429,
                    435,
                    405,
                    409,
                    511
                ],
                "unit_divisor": [
                    442,
                    405,
                    406,
                    998
                ],
                "total_fmt": [
                    410,
                    435,
                    429,
                    406
                ],
                "postfix": [
                    1377,
                    1379,
                    1380,
                    1375,
                    1382,
                    1383,
                    1386,
                    1387,
                    429,
                    1007,
                    1009,
                    1011,
                    442,
                    1373,
                    413,
                    511
                ],
                "remaining": [
                    417,
                    418,
                    444
                ],
                "remaining_str": [
                    418,
                    444,
                    429
                ],
                "prefix": [
                    421,
                    423,
                    424,
                    464,
                    437,
                    509
                ],
                "bool_prefix_colon_already": [
                    424,
                    423
                ],
                "l_bar": [
                    454,
                    424,
                    457,
                    426,
                    459,
                    493,
                    494,
                    445
                ],
                "r_bar": [
                    457,
                    428,
                    445
                ],
                "format_dict": [
                    487,
                    459,
                    461,
                    494,
                    496,
                    433,
                    471,
                    504,
                    474
                ],
                "ncols": [
                    482,
                    483,
                    456,
                    488,
                    489,
                    437,
                    502,
                    501,
                    950,
                    505,
                    506,
                    955,
                    989,
                    959
                ],
                "extra_kwargs": [
                    446
                ],
                "percentage": [
                    452,
                    461,
                    454
                ],
                "format_dict.update": [
                    459,
                    461,
                    494
                ],
                "bar_format": [
                    485,
                    486,
                    487,
                    491,
                    460,
                    1005,
                    496,
                    465,
                    976,
                    467,
                    978,
                    471,
                    504,
                    473,
                    474
                ],
                "bar_format.replace": [
                    465
                ],
                "full_bar": [
                    480,
                    485,
                    487,
                    495,
                    496,
                    497,
                    499,
                    469,
                    471,
                    504,
                    474,
                    475
                ],
                "FormatReplace": [
                    469,
                    495
                ],
                "nobar": [
                    482,
                    496,
                    498,
                    501,
                    471,
                    474,
                    477
                ],
                "bar_format.format": [
                    487,
                    496,
                    471,
                    504,
                    474
                ],
                "full_bar.format_called": [
                    497,
                    475
                ],
                "Bar": [
                    480,
                    499,
                    484,
                    503
                ],
                "disp_len": [
                    482,
                    501
                ],
                "Bar.ASCII": [
                    484
                ],
                "Bar.UTF": [
                    484
                ],
                "_is_ascii": [
                    976,
                    485
                ],
                "full_bar.charset": [
                    485
                ],
                "res": [
                    504,
                    489,
                    506,
                    487
                ],
                "disp_trim": [
                    489,
                    506
                ],
                "Bar.BLANK": [
                    503
                ],
                "instance": [
                    515,
                    550,
                    521,
                    556,
                    559,
                    533,
                    539
                ],
                "object.__new__": [
                    515
                ],
                "cls.get_lock": [
                    592,
                    517
                ],
                "cls._instances": [
                    550,
                    520,
                    521,
                    557,
                    564,
                    538
                ],
                "WeakSet": [
                    520
                ],
                "cls._instances.add": [
                    521
                ],
                "cls.monitor_interval": [
                    531,
                    523,
                    526
                ],
                "cls.monitor": [
                    523,
                    524,
                    526,
                    564,
                    566,
                    567,
                    571
                ],
                "cls.monitor.report": [
                    524
                ],
                "TMonitor": [
                    526
                ],
                "e": [
                    529,
                    1260
                ],
                "TqdmMonitorWarning": [
                    530
                ],
                "positions": [
                    538,
                    540
                ],
                "inst.pos": [
                    561,
                    538,
                    559
                ],
                "inst": [
                    557,
                    559,
                    560,
                    561,
                    595,
                    602,
                    599,
                    600,
                    601,
                    538,
                    539,
                    605,
                    606
                ],
                "difference": [
                    540
                ],
                "cls._lock": [
                    608,
                    548,
                    613,
                    619,
                    620
                ],
                "cls._instances.remove": [
                    550
                ],
                "instance.gui": [
                    556
                ],
                "instance.pos": [
                    559
                ],
                "inst.clear": [
                    560,
                    601
                ],
                "cls.monitor.exit": [
                    566
                ],
                "sys.stdout": [
                    576,
                    600,
                    589,
                    950
                ],
                "sys": [
                    576,
                    737,
                    903,
                    906,
                    589,
                    1104,
                    945,
                    950,
                    1207,
                    600
                ],
                "cls.external_write_mode": [
                    577
                ],
                "nolock": [
                    577,
                    1282,
                    1314,
                    1288,
                    591,
                    1307,
                    607
                ],
                "end": [
                    580
                ],
                "acquire": [
                    592
                ],
                "inst_cleared": [
                    594,
                    605,
                    602
                ],
                "inst.fp": [
                    600,
                    599
                ],
                "sys.stderr": [
                    737,
                    906,
                    1104,
                    945,
                    950,
                    1207,
                    600
                ],
                "inst_cleared.append": [
                    602
                ],
                "inst.refresh": [
                    606
                ],
                "cls._lock.release": [
                    608
                ],
                "contextmanager": [
                    1442,
                    583
                ],
                "Panel": [
                    775,
                    662,
                    774
                ],
                "_Rolling_and_Expanding": [
                    712,
                    713,
                    783,
                    784,
                    666
                ],
                "PanelGroupBy": [
                    688,
                    776,
                    777
                ],
                "deprecated_t": [
                    690,
                    724,
                    725,
                    726
                ],
                "tkwargs.pop": [
                    706,
                    690
                ],
                "tkwargs": [
                    728,
                    706,
                    690,
                    1455
                ],
                "df": [
                    706,
                    740,
                    709,
                    710,
                    711,
                    713,
                    721,
                    755
                ],
                "df_function": [
                    755,
                    708
                ],
                "df.size": [
                    721,
                    709
                ],
                "Series": [
                    765,
                    710,
                    767
                ],
                "axis": [
                    715,
                    716,
                    717,
                    718,
                    719,
                    721
                ],
                "kwargs.get": [
                    715
                ],
                "kwargs": [
                    936,
                    715,
                    751,
                    946,
                    755,
                    947,
                    1468,
                    1374,
                    1375
                ],
                "df.shape": [
                    721
                ],
                "tclass": [
                    728,
                    1455
                ],
                "targs": [
                    728
                ],
                "args": [
                    730,
                    1468,
                    751
                ],
                "TqdmDeprecationWarning": [
                    1204,
                    732,
                    1101,
                    942
                ],
                "t.fp": [
                    737
                ],
                "sys.stderr.write": [
                    1104,
                    737,
                    945,
                    1207
                ],
                "func": [
                    740,
                    751
                ],
                "df._is_builtin_func": [
                    740
                ],
                "t.update": [
                    1460,
                    750
                ],
                "t.total": [
                    750
                ],
                "t.n": [
                    750
                ],
                "result": [
                    755,
                    759
                ],
                "wrapper": [
                    755
                ],
                "t.close": [
                    758
                ],
                "inner": [
                    761
                ],
                "Series.progress_apply": [
                    765
                ],
                "inner_generator": [
                    768,
                    770,
                    771,
                    772,
                    775,
                    777,
                    779,
                    780,
                    781,
                    784,
                    765,
                    766,
                    767
                ],
                "SeriesGroupBy.progress_apply": [
                    766
                ],
                "SeriesGroupBy": [
                    768,
                    766
                ],
                "Series.progress_map": [
                    767
                ],
                "SeriesGroupBy.progress_map": [
                    768
                ],
                "DataFrame.progress_apply": [
                    770
                ],
                "DataFrame": [
                    770,
                    772
                ],
                "DataFrameGroupBy.progress_apply": [
                    771
                ],
                "DataFrameGroupBy": [
                    771
                ],
                "DataFrame.progress_applymap": [
                    772
                ],
                "Panel.progress_apply": [
                    775
                ],
                "PanelGroupBy.progress_apply": [
                    777
                ],
                "GroupBy.progress_apply": [
                    779
                ],
                "GroupBy": [
                    779,
                    780,
                    781
                ],
                "GroupBy.progress_aggregate": [
                    780
                ],
                "GroupBy.progress_transform": [
                    781
                ],
                "_Rolling_and_Expanding.progress_apply": [
                    784
                ],
                "write_bytes": [
                    908,
                    902,
                    903
                ],
                "sys.version_info": [
                    903
                ],
                "SimpleTextIOWrapper": [
                    911
                ],
                "disable": [
                    928,
                    995,
                    914,
                    915,
                    926
                ],
                "file.isatty": [
                    914
                ],
                "iterable": [
                    919,
                    1106,
                    917,
                    984,
                    1080,
                    1085,
                    927
                ],
                "self.iterable": [
                    1038,
                    1040,
                    1046,
                    1047,
                    984,
                    1048,
                    1080,
                    927
                ],
                "self.disable": [
                    928,
                    995,
                    1279,
                    937,
                    1239,
                    1304,
                    1243,
                    1084,
                    1183
                ],
                "self._lock": [
                    1312,
                    929,
                    1283,
                    1315,
                    1289,
                    938,
                    1266,
                    1019,
                    1309
                ],
                "self.pos": [
                    930,
                    1284,
                    1287,
                    939,
                    1433,
                    1021,
                    1246,
                    1023
                ],
                "self._get_free_pos": [
                    930,
                    939,
                    1021
                ],
                "self._instances.remove": [
                    931,
                    940
                ],
                "self._instances": [
                    931,
                    940
                ],
                "self.n": [
                    1408,
                    1124,
                    932,
                    1157,
                    1095,
                    1188,
                    1191,
                    1195,
                    1234,
                    1334,
                    1015,
                    1150
                ],
                "initial": [
                    932,
                    1014,
                    1015
                ],
                "self.total": [
                    1408,
                    933,
                    1036,
                    1037,
                    1046,
                    1337,
                    986
                ],
                "TqdmKeyError": [
                    947
                ],
                "dynamic_ncols": [
                    1001,
                    951,
                    952,
                    953,
                    954,
                    955
                ],
                "_environ_cols_wrapper": [
                    953,
                    957
                ],
                "_dynamic_ncols": [
                    957,
                    958,
                    959
                ],
                "miniters": [
                    992,
                    961,
                    962,
                    1091,
                    1152,
                    1158,
                    1134,
                    1137,
                    1144,
                    1113,
                    1147
                ],
                "dynamic_miniters": [
                    993,
                    963,
                    1092,
                    965,
                    1129
                ],
                "mininterval": [
                    1089,
                    967,
                    968,
                    1132,
                    1134,
                    1142,
                    1143,
                    1115,
                    990
                ],
                "maxinterval": [
                    1090,
                    970,
                    971,
                    1130,
                    1137,
                    991
                ],
                "_supports_unicode": [
                    974
                ],
                "smoothing": [
                    1121,
                    1096,
                    1002,
                    1138,
                    980,
                    981,
                    1144,
                    1119
                ],
                "self.desc": [
                    985,
                    1356,
                    1413,
                    1350
                ],
                "desc": [
                    985,
                    1356,
                    1350
                ],
                "self.leave": [
                    1264,
                    987
                ],
                "leave": [
                    1264,
                    987,
                    1267
                ],
                "self.fp": [
                    1027,
                    1411,
                    1286,
                    1255,
                    1104,
                    1207,
                    1401,
                    1402,
                    988
                ],
                "self.ncols": [
                    1412,
                    989
                ],
                "self.mininterval": [
                    1089,
                    1218,
                    1219,
                    1193,
                    1226,
                    1227,
                    990
                ],
                "self.maxinterval": [
                    1217,
                    1090,
                    1222,
                    991
                ],
                "self.miniters": [
                    992,
                    1152,
                    1091,
                    1219,
                    1158,
                    1191,
                    1222,
                    1225,
                    1229,
                    1231,
                    1112,
                    1113
                ],
                "self.dynamic_miniters": [
                    1216,
                    993,
                    1092
                ],
                "self.ascii": [
                    994,
                    1413
                ],
                "self.unit": [
                    996,
                    1413
                ],
                "self.unit_scale": [
                    997,
                    1414
                ],
                "self.unit_divisor": [
                    1417,
                    998
                ],
                "self.lock_args": [
                    1209,
                    1028,
                    1125,
                    999
                ],
                "lock_args": [
                    1308,
                    1309,
                    999
                ],
                "self.gui": [
                    1000
                ],
                "gui": [
                    1000,
                    1025
                ],
                "self.dynamic_ncols": [
                    1001,
                    1411,
                    1412
                ],
                "self.smoothing": [
                    1096,
                    1224,
                    1002,
                    1225,
                    1229,
                    1198,
                    1201
                ],
                "self.avg_time": [
                    1122,
                    1415,
                    1097,
                    1003,
                    1200,
                    1201,
                    1269
                ],
                "self._time": [
                    1409,
                    1031,
                    1192,
                    1320,
                    1098,
                    1194,
                    1004,
                    1335
                ],
                "time": [
                    1098,
                    1004,
                    1114,
                    1116
                ],
                "self.bar_format": [
                    1416,
                    1005
                ],
                "self.postfix": [
                    1416,
                    1386,
                    1006,
                    1395,
                    1011
                ],
                "self.set_postfix": [
                    1009
                ],
                "self.last_print_n": [
                    1187,
                    1156,
                    1094,
                    1191,
                    1195,
                    1234,
                    1014,
                    1334,
                    1150
                ],
                "position": [
                    1020,
                    1023
                ],
                "self.sp": [
                    1027,
                    1285,
                    1437
                ],
                "self.status_printer": [
                    1027
                ],
                "self.refresh": [
                    1028,
                    1125,
                    1352,
                    1389,
                    1358,
                    1397,
                    1209,
                    1338
                ],
                "self.last_print_t": [
                    1093,
                    1031,
                    1192,
                    1033,
                    1321,
                    1322,
                    1235,
                    1335,
                    1151
                ],
                "self.start_t": [
                    1033,
                    1409,
                    1335,
                    1321
                ],
                "self.__bool__": [
                    1043
                ],
                "self.iterable.shape": [
                    1047
                ],
                "self.close": [
                    1056,
                    1064,
                    1159
                ],
                "exc_type": [
                    1059
                ],
                "exc_value": [
                    1059
                ],
                "traceback": [
                    1059
                ],
                "self.format_meter": [
                    1067
                ],
                "self.format_dict": [
                    1067
                ],
                "obj": [
                    1106,
                    1107,
                    1085,
                    1086
                ],
                "last_print_t": [
                    1114,
                    1093,
                    1151
                ],
                "last_print_n": [
                    1156,
                    1094,
                    1112,
                    1117,
                    1150
                ],
                "avg_time": [
                    1097,
                    1122,
                    1121
                ],
                "delta_t": [
                    1120,
                    1217,
                    1220,
                    1223,
                    1192,
                    1193,
                    1130,
                    1227,
                    1226,
                    1134,
                    1198,
                    1199,
                    1137,
                    1142,
                    1143,
                    1114,
                    1115,
                    1119
                ],
                "cur_t": [
                    1320,
                    1321,
                    1194,
                    1322,
                    1235,
                    1116,
                    1151
                ],
                "delta_it": [
                    1120,
                    1219,
                    1222,
                    1225,
                    1195,
                    1134,
                    1198,
                    1199,
                    1137,
                    1231,
                    1141,
                    1147,
                    1117,
                    1119
                ],
                "self.ema": [
                    1144,
                    1121,
                    1200
                ],
                "pos": [
                    1438,
                    1433,
                    1264,
                    1432,
                    1273,
                    1274,
                    1435,
                    1436,
                    1246,
                    1439
                ],
                "self._decr_instances": [
                    1247
                ],
                "self.fp.write": [
                    1401,
                    1286,
                    1255
                ],
                "self.display": [
                    1273,
                    1270,
                    1313
                ],
                "self._lock.acquire": [
                    1312,
                    1283,
                    1309
                ],
                "self.moveto": [
                    1439,
                    1436,
                    1284,
                    1287
                ],
                "self._lock.release": [
                    1289,
                    1315
                ],
                "refresh": [
                    1396,
                    1388,
                    1357,
                    1351
                ],
                "_OrderedDict": [
                    1373
                ],
                "ordered_dict": [
                    1373
                ],
                "key": [
                    1377,
                    1379,
                    1380,
                    1382,
                    1383,
                    1386,
                    1387,
                    1374,
                    1375
                ],
                "kwargs.keys": [
                    1374
                ],
                "postfix.keys": [
                    1377,
                    1387
                ],
                "Number": [
                    1379
                ],
                "self.format_num": [
                    1380
                ],
                "_basestring": [
                    1382
                ],
                "strip": [
                    1386
                ],
                "_term_move_up": [
                    1401
                ],
                "self.fp.flush": [
                    1402
                ],
                "self.__repr__": [
                    1437
                ],
                "t.unit": [
                    1457
                ],
                "t.unit_scale": [
                    1458
                ],
                "t.unit_divisor": [
                    1459
                ],
                "CallbackIOWrapper": [
                    1460
                ],
                "stream": [
                    1460
                ],
                "method": [
                    1460
                ],
                "_range": [
                    1468
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_2/tqdm/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "disp_trim",
                    "function_code": "def disp_trim(data, length):\n    \"\"\"\n    Trim a string which may contain ANSI control characters.\n    \"\"\"\n    if len(data) == disp_len(data):\n        return data[:length]\n\n    while disp_len(data) > length:  # carefully delete one char at a time\n        data = data[:-1]\n    if RE_ANSI.search(data):  # assume ANSI reset is required\n        return data + \"\\033[0m\"\n    return data\n",
                    "decorators": [],
                    "docstring": "Trim a string which may contain ANSI control characters.",
                    "start_line": 356,
                    "end_line": 367,
                    "variables": {
                        "len": [
                            360
                        ],
                        "data": [
                            360,
                            361,
                            363,
                            364,
                            365,
                            366,
                            367
                        ],
                        "disp_len": [
                            360,
                            363
                        ],
                        "length": [
                            361,
                            363
                        ],
                        "RE_ANSI.search": [
                            365
                        ],
                        "RE_ANSI": [
                            365
                        ]
                    },
                    "filtered_variables": {
                        "data": [
                            360,
                            361,
                            363,
                            364,
                            365,
                            366,
                            367
                        ],
                        "disp_len": [
                            360,
                            363
                        ],
                        "length": [
                            361,
                            363
                        ],
                        "RE_ANSI.search": [
                            365
                        ],
                        "RE_ANSI": [
                            365
                        ]
                    },
                    "diff_line_number": 362,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "data": {
                                    "variable_value": "'desc:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                                "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049d7530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'desc:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                                "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049d7530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": "###6            "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "56",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048a0ce0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "' 23%",
                                    "variable_type": "str",
                                    "variable_shape": "###6            "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "56",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048a0ce0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "20",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "30",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'************          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "30",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'*****\\x1b[22m****\\x1b[0m***          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "41"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049de4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'*****\\x1b[22m****\\x1b[0m*'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a94f80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'*****\\x1b[22m*****\\x1b[0m**          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "41"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048c3270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'*****\\x1b[22m*****\\x1b[0m'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a57a30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'*****\\x1b[22m******\\x1b[0m*          $$$$$$$$$$'",
                                    "variable_type": "str",
                                    "variable_shape": "41"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048c3270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'*****\\x1b[22m*****'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049f0730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258f"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048a0dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258f"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048a0dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258d "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "14",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048a0d50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258d "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "14",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048a0d50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                  "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048d57b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                  "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1048d57b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                    "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049f6510>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%",
                                    "variable_type": "str",
                                    "variable_shape": "                    "
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "68",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1049f6510>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'\u258d '",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a94df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'\u258d '",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a94df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258d '"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a62e70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "' 20%",
                                    "variable_type": "str",
                                    "variable_shape": "\u258d '"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a62e70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "'\u258f",
                                    "variable_type": "str",
                                    "variable_shape": "test'"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a621b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "'\u258f",
                                    "variable_type": "str",
                                    "variable_shape": "test'"
                                },
                                "disp_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "length": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ansi_present": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RE_ANSI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x104a621b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _is_utf(encoding):\n    try:\n        u'\\u2588\\u2589'.encode(encoding)\n    except UnicodeEncodeError:  # pragma: no cover\n        return False\n    except Exception:  # pragma: no cover\n        try:\n            return encoding.lower().startswith('utf-') or ('U8' == encoding)\n        except:\n            return False\n    else:\n        return True",
                "def _supports_unicode(fp):\n    try:\n        return _is_utf(fp.encoding)\n    except AttributeError:\n        return False",
                "def _is_ascii(s):\n    if isinstance(s, str):\n        for c in s:\n            if ord(c) > 255:\n                return False\n        return True\n    return _supports_unicode(s)",
                "def _environ_cols_wrapper():  # pragma: no cover\n    \"\"\"\n    Return a function which gets width and height of console\n    (linux,osx,windows,cygwin).\n    \"\"\"\n    _environ_cols = None\n    if IS_WIN:\n        _environ_cols = _environ_cols_windows\n        if _environ_cols is None:\n            _environ_cols = _environ_cols_tput\n    if IS_NIX:\n        _environ_cols = _environ_cols_linux\n    return _environ_cols",
                "def _environ_cols_windows(fp):  # pragma: no cover\n    try:\n        from ctypes import windll, create_string_buffer\n        import struct\n        from sys import stdin, stdout\n\n        io_handle = -12  # assume stderr\n        if fp == stdin:\n            io_handle = -10\n        elif fp == stdout:\n            io_handle = -11\n\n        h = windll.kernel32.GetStdHandle(io_handle)\n        csbi = create_string_buffer(22)\n        res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n        if res:\n            (_bufx, _bufy, _curx, _cury, _wattr, left, _top, right, _bottom,\n             _maxx, _maxy) = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n            # nlines = bottom - top + 1\n            return right - left  # +1\n    except:\n        pass\n    return None",
                "def _environ_cols_tput(*_):  # pragma: no cover\n    \"\"\"cygwin xterm (windows)\"\"\"\n    try:\n        import shlex\n        cols = int(subprocess.check_call(shlex.split('tput cols')))\n        # rows = int(subprocess.check_call(shlex.split('tput lines')))\n        return cols\n    except:\n        pass\n    return None",
                "def _environ_cols_linux(fp):  # pragma: no cover\n\n    try:\n        from termios import TIOCGWINSZ\n        from fcntl import ioctl\n        from array import array\n    except ImportError:\n        return None\n    else:\n        try:\n            return array('h', ioctl(fp, TIOCGWINSZ, '\\0' * 8))[1]\n        except:\n            try:\n                return int(os.environ[\"COLUMNS\"]) - 1\n            except KeyError:\n                return None",
                "def _term_move_up():  # pragma: no cover\n    return '' if (os.name == 'nt') and (colorama is None) else '\\x1b[A'",
                "def disp_len(data):\n    \"\"\"\n    Returns the real on-screen length of a string which may contain\n    ANSI control codes and wide chars.\n    \"\"\"\n    return _text_width(RE_ANSI.sub('', data))",
                "def disp_trim(data, length):\n    \"\"\"\n    Trim a string which may contain ANSI control characters.\n    \"\"\"\n    if len(data) == disp_len(data):\n        return data[:length]\n\n    while disp_len(data) > length:  # carefully delete one char at a time\n        data = data[:-1]\n    if RE_ANSI.search(data):  # assume ANSI reset is required\n        return data + \"\\033[0m\"\n    return data",
                "def __init__(self, replace=''):\n    self.replace = replace\n    self.format_called = 0",
                "def __format__(self, _):\n    self.format_called += 1\n    return self.replace",
                "def __lt__(self, other):\n    return self._comparable < other._comparable",
                "def __le__(self, other):\n    return (self < other) or (self == other)",
                "def __eq__(self, other):\n    return self._comparable == other._comparable",
                "def __ne__(self, other):\n    return not self == other",
                "def __gt__(self, other):\n    return not self <= other",
                "def __ge__(self, other):\n    return not self < other",
                "def __getattr__(self, name):\n    return getattr(self._wrapped, name)",
                "def __setattr__(self, name, value):\n    return setattr(self._wrapped, name, value)",
                "def wrapper_getattr(self, name):\n    \"\"\"Actual `self.getattr` rather than self._wrapped.getattr\"\"\"\n    try:\n        return object.__getattr__(self, name)\n    except AttributeError:  # py2\n        return getattr(self, name)",
                "def wrapper_setattr(self, name, value):\n    \"\"\"Actual `self.setattr` rather than self._wrapped.setattr\"\"\"\n    return object.__setattr__(self, name, value)",
                "def __init__(self, wrapped):\n    \"\"\"\n    Thin wrapper around a given object\n    \"\"\"\n    self.wrapper_setattr('_wrapped', wrapped)",
                "def __init__(self, wrapped, encoding):\n    super(SimpleTextIOWrapper, self).__init__(wrapped)\n    self.wrapper_setattr('encoding', encoding)",
                "def write(self, s):\n    \"\"\"\n    Encode `s` and pass to the wrapped object's `.write()` method.\n    \"\"\"\n    return self._wrapped.write(s.encode(self.wrapper_getattr('encoding')))",
                "def __init__(self, callback, stream, method=\"read\"):\n    \"\"\"\n    Wrap a given `file`-like object's `read()` or `write()` to report\n    lengths to the given `callback`\n    \"\"\"\n    super(CallbackIOWrapper, self).__init__(stream)\n    func = getattr(stream, method)\n    if method == \"write\":\n        @wraps(func)\n        def write(data, *args, **kwargs):\n            res = func(data, *args, **kwargs)\n            callback(len(data))\n            return res\n        self.wrapper_setattr('write', write)\n    elif method == \"read\":\n        @wraps(func)\n        def read(*args, **kwargs):\n            data = func(*args, **kwargs)\n            callback(len(data))\n            return data\n        self.wrapper_setattr('read', read)\n    else:\n        raise KeyError(\"Can only wrap read/write methods\")",
                "def _text_width(s):\n    return sum(\n        2 if east_asian_width(ch) in 'FW' else 1 for ch in _unicode(s))",
                "@wraps(func)\ndef write(data, *args, **kwargs):\n    res = func(data, *args, **kwargs)\n    callback(len(data))\n    return res",
                "@wraps(func)\ndef read(*args, **kwargs):\n    data = func(*args, **kwargs)\n    callback(len(data))\n    return data",
                "def __init__(self, *args, **kwds):\n    if len(args) > 1:\n        raise TypeError('expected at 1 argument, got %d',\n                        len(args))\n    if not hasattr(self, '_keys'):\n        self._keys = []\n    self.update(*args, **kwds)",
                "def clear(self):\n    del self._keys[:]\n    dict.clear(self)",
                "def __setitem__(self, key, value):\n    if key not in self:\n        self._keys.append(key)\n    dict.__setitem__(self, key, value)",
                "def __delitem__(self, key):\n    dict.__delitem__(self, key)\n    self._keys.remove(key)",
                "def __iter__(self):\n    return iter(self._keys)",
                "def __reversed__(self):\n    return reversed(self._keys)",
                "def popitem(self):\n    if not self:\n        raise KeyError\n    key = self._keys.pop()\n    value = dict.pop(self, key)\n    return key, value",
                "def __reduce__(self):\n    items = [[k, self[k]] for k in self]\n    inst_dict = vars(self).copy()\n    inst_dict.pop('_keys', None)\n    return self.__class__, (items,), inst_dict",
                "def __repr__(self):\n    pairs = ', '.join(map('%r: %r'.__mod__, self.items()))\n    return '%s({%s})' % (self.__class__.__name__, pairs)",
                "def copy(self):\n    return self.__class__(self)",
                "@classmethod\ndef fromkeys(cls, iterable, value=None):\n    d = cls()\n    for key in iterable:\n        d[key] = value\n    return d"
            ],
            "inscope_function_signatures": [
                "_is_utf(encoding)",
                "_supports_unicode(fp)",
                "_is_ascii(s)",
                "_environ_cols_wrapper()",
                "_environ_cols_windows(fp)",
                "_environ_cols_tput(*_)",
                "_environ_cols_linux(fp)",
                "_term_move_up()",
                "disp_len(data)",
                "disp_trim(data, length)",
                "__init__(self, replace='')",
                "__format__(self, _)",
                "__lt__(self, other)",
                "__le__(self, other)",
                "__eq__(self, other)",
                "__ne__(self, other)",
                "__gt__(self, other)",
                "__ge__(self, other)",
                "__getattr__(self, name)",
                "__setattr__(self, name, value)",
                "wrapper_getattr(self, name)",
                "wrapper_setattr(self, name, value)",
                "__init__(self, wrapped)",
                "__init__(self, wrapped, encoding)",
                "write(self, s)",
                "__init__(self, callback, stream, method='read')",
                "_text_width(s)",
                "write(data, *args, **kwargs)",
                "read(*args, **kwargs)",
                "__init__(self, *args, **kwds)",
                "clear(self)",
                "__setitem__(self, key, value)",
                "__delitem__(self, key)",
                "__iter__(self)",
                "__reversed__(self)",
                "popitem(self)",
                "__reduce__(self)",
                "__repr__(self)",
                "copy(self)",
                "fromkeys(cls, iterable, value=None)"
            ],
            "variables_in_file": {
                "CUR_OS": [
                    9,
                    6,
                    7
                ],
                "_curos": [
                    6
                ],
                "IS_WIN": [
                    8,
                    33,
                    269,
                    7
                ],
                "IS_NIX": [
                    8,
                    273
                ],
                "any": [
                    8
                ],
                "CUR_OS.startswith": [
                    9
                ],
                "i": [
                    9
                ],
                "RE_ANSI": [
                    353,
                    12,
                    365
                ],
                "re.compile": [
                    12
                ],
                "re": [
                    12
                ],
                "_range": [
                    18,
                    20
                ],
                "xrange": [
                    18
                ],
                "NameError": [
                    24,
                    19,
                    52,
                    29
                ],
                "range": [
                    20
                ],
                "_unich": [
                    25,
                    23
                ],
                "unichr": [
                    23
                ],
                "chr": [
                    25
                ],
                "_unicode": [
                    345,
                    28,
                    30
                ],
                "unicode": [
                    28
                ],
                "str": [
                    53,
                    30,
                    255
                ],
                "ImportError": [
                    321,
                    36,
                    37,
                    47,
                    340,
                    57,
                    60
                ],
                "colorama": [
                    41,
                    43,
                    38,
                    334
                ],
                "colorama.init": [
                    41,
                    43
                ],
                "TypeError": [
                    42,
                    68
                ],
                "WeakSet": [
                    48
                ],
                "set": [
                    48
                ],
                "_basestring": [
                    51,
                    53
                ],
                "basestring": [
                    51
                ],
                "dict": [
                    64,
                    97,
                    76,
                    81,
                    84
                ],
                "MutableMapping": [
                    64,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112
                ],
                "len": [
                    226,
                    67,
                    69,
                    360,
                    341,
                    219
                ],
                "args": [
                    225,
                    67,
                    69,
                    72,
                    218
                ],
                "hasattr": [
                    70
                ],
                "self": [
                    136,
                    137,
                    140,
                    141,
                    147,
                    150,
                    153,
                    156,
                    159,
                    162,
                    167,
                    170,
                    175,
                    177,
                    181,
                    187,
                    197,
                    70,
                    71,
                    72,
                    198,
                    75,
                    76,
                    204,
                    79,
                    80,
                    81,
                    84,
                    85,
                    213,
                    88,
                    91,
                    221,
                    94,
                    96,
                    97,
                    228,
                    101,
                    102,
                    104,
                    115,
                    116,
                    119
                ],
                "self._keys": [
                    96,
                    71,
                    75,
                    80,
                    85,
                    88,
                    91
                ],
                "self.update": [
                    72
                ],
                "kwds": [
                    72
                ],
                "dict.clear": [
                    76
                ],
                "key": [
                    96,
                    97,
                    98,
                    79,
                    80,
                    81,
                    84,
                    85,
                    124,
                    125
                ],
                "self._keys.append": [
                    80
                ],
                "dict.__setitem__": [
                    81
                ],
                "value": [
                    97,
                    98,
                    170,
                    81,
                    181,
                    125
                ],
                "dict.__delitem__": [
                    84
                ],
                "self._keys.remove": [
                    85
                ],
                "iter": [
                    88
                ],
                "reversed": [
                    91
                ],
                "KeyError": [
                    329,
                    230,
                    95
                ],
                "self._keys.pop": [
                    96
                ],
                "dict.pop": [
                    97
                ],
                "items": [
                    104,
                    112,
                    101
                ],
                "k": [
                    101
                ],
                "inst_dict": [
                    104,
                    102,
                    103
                ],
                "copy": [
                    102
                ],
                "vars": [
                    102
                ],
                "inst_dict.pop": [
                    103
                ],
                "self.__class__": [
                    104,
                    116,
                    119
                ],
                "setdefault": [
                    107
                ],
                "MutableMapping.setdefault": [
                    107
                ],
                "update": [
                    108
                ],
                "MutableMapping.update": [
                    108
                ],
                "pop": [
                    109
                ],
                "MutableMapping.pop": [
                    109
                ],
                "keys": [
                    110
                ],
                "MutableMapping.keys": [
                    110
                ],
                "values": [
                    111
                ],
                "MutableMapping.values": [
                    111
                ],
                "MutableMapping.items": [
                    112
                ],
                "pairs": [
                    115,
                    116
                ],
                "join": [
                    115
                ],
                "map": [
                    115
                ],
                "__mod__": [
                    115
                ],
                "self.items": [
                    115
                ],
                "self.__class__.__name__": [
                    116
                ],
                "d": [
                    123,
                    125,
                    126
                ],
                "cls": [
                    123
                ],
                "iterable": [
                    124
                ],
                "classmethod": [
                    121
                ],
                "object": [
                    129,
                    165,
                    175,
                    144,
                    181
                ],
                "self.replace": [
                    136,
                    141
                ],
                "replace": [
                    136
                ],
                "self.format_called": [
                    137,
                    140
                ],
                "self._comparable": [
                    153,
                    147
                ],
                "other._comparable": [
                    153,
                    147
                ],
                "other": [
                    162,
                    147,
                    150,
                    153,
                    156,
                    159
                ],
                "getattr": [
                    177,
                    214,
                    167
                ],
                "self._wrapped": [
                    170,
                    204,
                    167
                ],
                "name": [
                    167,
                    170,
                    175,
                    177,
                    181
                ],
                "setattr": [
                    170
                ],
                "object.__getattr__": [
                    175
                ],
                "AttributeError": [
                    176,
                    250
                ],
                "object.__setattr__": [
                    181
                ],
                "self.wrapper_setattr": [
                    187,
                    228,
                    221,
                    198
                ],
                "wrapped": [
                    187,
                    197
                ],
                "ObjectWrapper": [
                    190,
                    207
                ],
                "__init__": [
                    213,
                    197
                ],
                "super": [
                    213,
                    197
                ],
                "SimpleTextIOWrapper": [
                    197
                ],
                "encoding": [
                    240,
                    235,
                    198
                ],
                "self._wrapped.write": [
                    204
                ],
                "s.encode": [
                    204
                ],
                "s": [
                    256,
                    260,
                    204,
                    345,
                    255
                ],
                "self.wrapper_getattr": [
                    204
                ],
                "CallbackIOWrapper": [
                    213
                ],
                "stream": [
                    213,
                    214
                ],
                "func": [
                    225,
                    214,
                    216,
                    218,
                    223
                ],
                "method": [
                    222,
                    214,
                    215
                ],
                "res": [
                    218,
                    220,
                    293,
                    292
                ],
                "data": [
                    225,
                    226,
                    227,
                    353,
                    360,
                    361,
                    363,
                    364,
                    365,
                    366,
                    367,
                    218,
                    219
                ],
                "kwargs": [
                    225,
                    218
                ],
                "callback": [
                    226,
                    219
                ],
                "wraps": [
                    216,
                    223
                ],
                "write": [
                    221
                ],
                "read": [
                    228
                ],
                "encode": [
                    235
                ],
                "UnicodeEncodeError": [
                    236
                ],
                "Exception": [
                    238
                ],
                "startswith": [
                    240
                ],
                "encoding.lower": [
                    240
                ],
                "_is_utf": [
                    249
                ],
                "fp.encoding": [
                    249
                ],
                "fp": [
                    249,
                    325,
                    285,
                    287
                ],
                "isinstance": [
                    255
                ],
                "c": [
                    256,
                    257
                ],
                "ord": [
                    257
                ],
                "_supports_unicode": [
                    260
                ],
                "_environ_cols": [
                    268,
                    270,
                    271,
                    272,
                    274,
                    275
                ],
                "_environ_cols_windows": [
                    270
                ],
                "_environ_cols_tput": [
                    272
                ],
                "_environ_cols_linux": [
                    274
                ],
                "io_handle": [
                    288,
                    290,
                    284,
                    286
                ],
                "stdin": [
                    285
                ],
                "stdout": [
                    287
                ],
                "h": [
                    290,
                    292
                ],
                "windll.kernel32.GetStdHandle": [
                    290
                ],
                "windll.kernel32": [
                    290,
                    292
                ],
                "windll": [
                    290,
                    292
                ],
                "csbi": [
                    291,
                    292,
                    295
                ],
                "create_string_buffer": [
                    291
                ],
                "windll.kernel32.GetConsoleScreenBufferInfo": [
                    292
                ],
                "_bufx": [
                    294
                ],
                "_bufy": [
                    294
                ],
                "_curx": [
                    294
                ],
                "_cury": [
                    294
                ],
                "_wattr": [
                    294
                ],
                "left": [
                    297,
                    294
                ],
                "_top": [
                    294
                ],
                "right": [
                    297,
                    294
                ],
                "_bottom": [
                    294
                ],
                "_maxx": [
                    295
                ],
                "_maxy": [
                    295
                ],
                "struct.unpack": [
                    295
                ],
                "struct": [
                    295
                ],
                "csbi.raw": [
                    295
                ],
                "cols": [
                    307,
                    309
                ],
                "int": [
                    328,
                    307
                ],
                "subprocess.check_call": [
                    307
                ],
                "subprocess": [
                    307
                ],
                "shlex.split": [
                    307
                ],
                "shlex": [
                    307
                ],
                "array": [
                    325
                ],
                "ioctl": [
                    325
                ],
                "TIOCGWINSZ": [
                    325
                ],
                "os.environ": [
                    328
                ],
                "os": [
                    328,
                    334
                ],
                "os.name": [
                    334
                ],
                "_text_width": [
                    353,
                    341
                ],
                "sum": [
                    344
                ],
                "east_asian_width": [
                    345
                ],
                "ch": [
                    345
                ],
                "RE_ANSI.sub": [
                    353
                ],
                "disp_len": [
                    360,
                    363
                ],
                "length": [
                    361,
                    363
                ],
                "RE_ANSI.search": [
                    365
                ]
            },
            "filtered_variables_in_file": {
                "CUR_OS": [
                    9,
                    6,
                    7
                ],
                "_curos": [
                    6
                ],
                "IS_WIN": [
                    8,
                    33,
                    269,
                    7
                ],
                "IS_NIX": [
                    8,
                    273
                ],
                "CUR_OS.startswith": [
                    9
                ],
                "i": [
                    9
                ],
                "RE_ANSI": [
                    353,
                    12,
                    365
                ],
                "re.compile": [
                    12
                ],
                "re": [
                    12
                ],
                "_range": [
                    18,
                    20
                ],
                "xrange": [
                    18
                ],
                "_unich": [
                    25,
                    23
                ],
                "unichr": [
                    23
                ],
                "_unicode": [
                    345,
                    28,
                    30
                ],
                "unicode": [
                    28
                ],
                "colorama": [
                    41,
                    43,
                    38,
                    334
                ],
                "colorama.init": [
                    41,
                    43
                ],
                "WeakSet": [
                    48
                ],
                "_basestring": [
                    51,
                    53
                ],
                "basestring": [
                    51
                ],
                "MutableMapping": [
                    64,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112
                ],
                "args": [
                    225,
                    67,
                    69,
                    72,
                    218
                ],
                "self": [
                    136,
                    137,
                    140,
                    141,
                    147,
                    150,
                    153,
                    156,
                    159,
                    162,
                    167,
                    170,
                    175,
                    177,
                    181,
                    187,
                    197,
                    70,
                    71,
                    72,
                    198,
                    75,
                    76,
                    204,
                    79,
                    80,
                    81,
                    84,
                    85,
                    213,
                    88,
                    91,
                    221,
                    94,
                    96,
                    97,
                    228,
                    101,
                    102,
                    104,
                    115,
                    116,
                    119
                ],
                "self._keys": [
                    96,
                    71,
                    75,
                    80,
                    85,
                    88,
                    91
                ],
                "self.update": [
                    72
                ],
                "kwds": [
                    72
                ],
                "dict.clear": [
                    76
                ],
                "key": [
                    96,
                    97,
                    98,
                    79,
                    80,
                    81,
                    84,
                    85,
                    124,
                    125
                ],
                "self._keys.append": [
                    80
                ],
                "dict.__setitem__": [
                    81
                ],
                "value": [
                    97,
                    98,
                    170,
                    81,
                    181,
                    125
                ],
                "dict.__delitem__": [
                    84
                ],
                "self._keys.remove": [
                    85
                ],
                "self._keys.pop": [
                    96
                ],
                "dict.pop": [
                    97
                ],
                "items": [
                    104,
                    112,
                    101
                ],
                "k": [
                    101
                ],
                "inst_dict": [
                    104,
                    102,
                    103
                ],
                "copy": [
                    102
                ],
                "inst_dict.pop": [
                    103
                ],
                "self.__class__": [
                    104,
                    116,
                    119
                ],
                "setdefault": [
                    107
                ],
                "MutableMapping.setdefault": [
                    107
                ],
                "update": [
                    108
                ],
                "MutableMapping.update": [
                    108
                ],
                "pop": [
                    109
                ],
                "MutableMapping.pop": [
                    109
                ],
                "keys": [
                    110
                ],
                "MutableMapping.keys": [
                    110
                ],
                "values": [
                    111
                ],
                "MutableMapping.values": [
                    111
                ],
                "MutableMapping.items": [
                    112
                ],
                "pairs": [
                    115,
                    116
                ],
                "join": [
                    115
                ],
                "__mod__": [
                    115
                ],
                "self.items": [
                    115
                ],
                "self.__class__.__name__": [
                    116
                ],
                "d": [
                    123,
                    125,
                    126
                ],
                "cls": [
                    123
                ],
                "iterable": [
                    124
                ],
                "self.replace": [
                    136,
                    141
                ],
                "replace": [
                    136
                ],
                "self.format_called": [
                    137,
                    140
                ],
                "self._comparable": [
                    153,
                    147
                ],
                "other._comparable": [
                    153,
                    147
                ],
                "other": [
                    162,
                    147,
                    150,
                    153,
                    156,
                    159
                ],
                "self._wrapped": [
                    170,
                    204,
                    167
                ],
                "name": [
                    167,
                    170,
                    175,
                    177,
                    181
                ],
                "object.__getattr__": [
                    175
                ],
                "object.__setattr__": [
                    181
                ],
                "self.wrapper_setattr": [
                    187,
                    228,
                    221,
                    198
                ],
                "wrapped": [
                    187,
                    197
                ],
                "ObjectWrapper": [
                    190,
                    207
                ],
                "__init__": [
                    213,
                    197
                ],
                "SimpleTextIOWrapper": [
                    197
                ],
                "encoding": [
                    240,
                    235,
                    198
                ],
                "self._wrapped.write": [
                    204
                ],
                "s.encode": [
                    204
                ],
                "s": [
                    256,
                    260,
                    204,
                    345,
                    255
                ],
                "self.wrapper_getattr": [
                    204
                ],
                "CallbackIOWrapper": [
                    213
                ],
                "stream": [
                    213,
                    214
                ],
                "func": [
                    225,
                    214,
                    216,
                    218,
                    223
                ],
                "method": [
                    222,
                    214,
                    215
                ],
                "res": [
                    218,
                    220,
                    293,
                    292
                ],
                "data": [
                    225,
                    226,
                    227,
                    353,
                    360,
                    361,
                    363,
                    364,
                    365,
                    366,
                    367,
                    218,
                    219
                ],
                "kwargs": [
                    225,
                    218
                ],
                "callback": [
                    226,
                    219
                ],
                "wraps": [
                    216,
                    223
                ],
                "write": [
                    221
                ],
                "read": [
                    228
                ],
                "encode": [
                    235
                ],
                "startswith": [
                    240
                ],
                "encoding.lower": [
                    240
                ],
                "_is_utf": [
                    249
                ],
                "fp.encoding": [
                    249
                ],
                "fp": [
                    249,
                    325,
                    285,
                    287
                ],
                "c": [
                    256,
                    257
                ],
                "_supports_unicode": [
                    260
                ],
                "_environ_cols": [
                    268,
                    270,
                    271,
                    272,
                    274,
                    275
                ],
                "_environ_cols_windows": [
                    270
                ],
                "_environ_cols_tput": [
                    272
                ],
                "_environ_cols_linux": [
                    274
                ],
                "io_handle": [
                    288,
                    290,
                    284,
                    286
                ],
                "stdin": [
                    285
                ],
                "stdout": [
                    287
                ],
                "h": [
                    290,
                    292
                ],
                "windll.kernel32.GetStdHandle": [
                    290
                ],
                "windll.kernel32": [
                    290,
                    292
                ],
                "windll": [
                    290,
                    292
                ],
                "csbi": [
                    291,
                    292,
                    295
                ],
                "create_string_buffer": [
                    291
                ],
                "windll.kernel32.GetConsoleScreenBufferInfo": [
                    292
                ],
                "_bufx": [
                    294
                ],
                "_bufy": [
                    294
                ],
                "_curx": [
                    294
                ],
                "_cury": [
                    294
                ],
                "_wattr": [
                    294
                ],
                "left": [
                    297,
                    294
                ],
                "_top": [
                    294
                ],
                "right": [
                    297,
                    294
                ],
                "_bottom": [
                    294
                ],
                "_maxx": [
                    295
                ],
                "_maxy": [
                    295
                ],
                "struct.unpack": [
                    295
                ],
                "struct": [
                    295
                ],
                "csbi.raw": [
                    295
                ],
                "cols": [
                    307,
                    309
                ],
                "subprocess.check_call": [
                    307
                ],
                "subprocess": [
                    307
                ],
                "shlex.split": [
                    307
                ],
                "shlex": [
                    307
                ],
                "array": [
                    325
                ],
                "ioctl": [
                    325
                ],
                "TIOCGWINSZ": [
                    325
                ],
                "os.environ": [
                    328
                ],
                "os": [
                    328,
                    334
                ],
                "os.name": [
                    334
                ],
                "_text_width": [
                    353,
                    341
                ],
                "east_asian_width": [
                    345
                ],
                "ch": [
                    345
                ],
                "RE_ANSI.sub": [
                    353
                ],
                "disp_len": [
                    360,
                    363
                ],
                "length": [
                    361,
                    363
                ],
                "RE_ANSI.search": [
                    365
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_2/tqdm/tests/tests_tqdm.py",
                "test_function": "test_format_meter",
                "test_function_code": "def test_format_meter():\n    \"\"\"Test statistics and progress bar formatting\"\"\"\n    try:\n        unich = unichr\n    except NameError:\n        unich = chr\n\n    format_meter = tqdm.format_meter\n\n    assert format_meter(0, 1000, 13) == \\\n        \"  0%|          | 0/1000 [00:13<?, ?it/s]\"\n    # If not implementing any changes to _tqdm.py, set prefix='desc'\n    # or else \": : \" will be in output, so assertion should change\n    assert format_meter(0, 1000, 13, ncols=68, prefix='desc: ') == \\\n        \"desc:   0%|                                | 0/1000 [00:13<?, ?it/s]\"\n    assert format_meter(231, 1000, 392) == \\\n        \" 23%|\" + unich(0x2588) * 2 + unich(0x258e) + \\\n        \"       | 231/1000 [06:32<21:44,  1.70s/it]\"\n    assert format_meter(10000, 1000, 13) == \\\n        \"10000it [00:13, 769.23it/s]\"\n    assert format_meter(231, 1000, 392, ncols=56, ascii=True) == \\\n        \" 23%|\" + '#' * 3 + '6' + \\\n        \"            | 231/1000 [06:32<21:44,  1.70s/it]\"\n    assert format_meter(100000, 1000, 13, unit_scale=True, unit='iB') == \\\n        \"100kiB [00:13, 7.69kiB/s]\"\n    assert format_meter(100, 1000, 12, ncols=0, rate=7.33) == \\\n        \" 10% 100/1000 [00:12<02:02,  7.33it/s]\"\n    eq_(\n        # ncols is small, l_bar is too large\n        # l_bar gets chopped\n        # no bar\n        # no r_bar\n        format_meter(0, 1000, 13, ncols=10, bar_format=\"************{bar:10}$$$$$$$$$$\"),\n        \"**********\"  # 10/12 stars since ncols is 10\n    )\n    eq_(\n        # n_cols allows for l_bar and some of bar\n        # l_bar displays\n        # bar gets chopped\n        # no r_bar\n        format_meter(0, 1000, 13, ncols=20, bar_format=\"************{bar:10}$$$$$$$$$$\"),\n        \"************        \"  # all 12 stars and 8/10 bar parts\n    )\n    eq_(\n        # n_cols allows for l_bar, bar, and some of r_bar\n        # l_bar displays\n        # bar displays\n        # r_bar gets chopped\n        format_meter(0, 1000, 13, ncols=30, bar_format=\"************{bar:10}$$$$$$$$$$\"),\n        \"************          $$$$$$$$\"  # all 12 stars and 10 bar parts, but only 8/10 dollar signs\n    )\n    eq_(\n        # left bar contains sone ANSI, make sure we trim it properly when escape is before trim zone\n        format_meter(0, 1000, 13, ncols=10, bar_format=\"*****\\033[22m****\\033[0m***{bar:10}$$$$$$$$$$\"),\n        \"*****\\033[22m****\\033[0m*\\033[0m\"  # we only know it has ANSI codes, so we append an END code anyway\n    )\n    eq_(\n        # left bar contains sone ANSI, make sure we trim it properly when escape is at trim zone\n        format_meter(0, 1000, 13, ncols=10, bar_format=\"*****\\033[22m*****\\033[0m**{bar:10}$$$$$$$$$$\"),\n        \"*****\\033[22m*****\\033[0m\"\n    )\n    eq_(\n        # left bar contains sone ANSI, make sure we trim it properly when escape is after trim zone\n        format_meter(0, 1000, 13, ncols=10, bar_format=\"*****\\033[22m******\\033[0m*{bar:10}$$$$$$$$$$\"),\n        \"*****\\033[22m*****\\033[0m\"\n    )\n    # Check that bar_format correctly adapts {bar} size to the rest\n    assert format_meter(20, 100, 12, ncols=13, rate=8.1,\n                        bar_format=r'{l_bar}{bar}|{n_fmt}/{total_fmt}') == \\\n        \" 20%|\" + unich(0x258f) + \"|20/100\"\n    assert format_meter(20, 100, 12, ncols=14, rate=8.1,\n                        bar_format=r'{l_bar}{bar}|{n_fmt}/{total_fmt}') == \\\n        \" 20%|\" + unich(0x258d) + \" |20/100\"\n    # Check wide characters\n    if sys.version_info >= (3,):\n        assert format_meter(0, 1000, 13, ncols=68, prefix='\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48: ') == \\\n            \"\uff46\uff55\uff4c\uff4c\uff57\uff49\uff44\uff54\uff48:   0%|                  | 0/1000 [00:13<?, ?it/s]\"\n        assert format_meter(0, 1000, 13, ncols=68, prefix='\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]: ') == \\\n            \"\u30cb\u30c3\u30dd\u30f3 [\uff86\uff6f\uff8e\uff9f\uff9d]:   0%|                    | 0/1000 [00:13<?, ?it/s]\"\n    # Check that bar_format can print only {bar} or just one side\n    assert format_meter(20, 100, 12, ncols=2, rate=8.1,\n                        bar_format=r'{bar}') == \\\n        unich(0x258d) + \" \"\n    assert format_meter(20, 100, 12, ncols=7, rate=8.1,\n                        bar_format=r'{l_bar}{bar}') == \\\n        \" 20%|\" + unich(0x258d) + \" \"\n    assert format_meter(20, 100, 12, ncols=6, rate=8.1,\n                        bar_format=r'{bar}|test') == \\\n        unich(0x258f) + \"|test\"",
                "test_error": "AssertionError: assert None == '  0%|          | 0/1000 [00:13<?, ?it/s]'   +None   -'  0%|          | 0/1000 [00:13<?, ?it/s]'",
                "full_test_error": "def test_format_meter():\n        \"\"\"Test statistics and progress bar formatting\"\"\"\n        try:\n            unich = unichr\n        except NameError:\n            unich = chr\n    \n        format_meter = tqdm.format_meter\n    \n>       assert format_meter(0, 1000, 13) == \\\n            \"  0%|          | 0/1000 [00:13<?, ?it/s]\"\nE       AssertionError: assert None == '  0%|          | 0/1000 [00:13<?, ?it/s]'\nE         +None\nE         -'  0%|          | 0/1000 [00:13<?, ?it/s]'\n\ntqdm/tests/tests_tqdm.py:259: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}