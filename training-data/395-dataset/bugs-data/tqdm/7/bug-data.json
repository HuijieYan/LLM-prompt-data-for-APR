{
    "tqdm:7": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_7/tqdm/_main.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "RE_SHLEX = re.compile(r'\\s*--?([^\\s=]+)(?:\\s*|=|$)')",
                    "start_line": 92,
                    "end_line": 93
                }
            ],
            "inscope_functions": [
                "def cast(val, typ):\n    log = logging.getLogger(__name__)\n    log.debug((val, typ))\n    if \" or \" in typ:\n        for t in typ.split(\" or \"):\n            try:\n                return cast(val, t)\n            except TqdmTypeError:\n                pass\n        raise TqdmTypeError(val + ' : ' + typ)\n\n    # sys.stderr.write('\\ndebug | `val:type`: `' + val + ':' + typ + '`.\\n')\n    if typ == 'bool':\n        if (val == 'True') or (val == ''):\n            return True\n        elif val == 'False':\n            return False\n        else:\n            raise TqdmTypeError(val + ' : ' + typ)\n    try:\n        return eval(typ + '(\"' + val + '\")')\n    except:\n        if typ == 'chr':\n            return chr(ord(eval('\"' + val + '\"')))\n        else:\n            raise TqdmTypeError(val + ' : ' + typ)",
                "def posix_pipe(fin, fout, delim='\\n', buf_size=256,\n               callback=lambda int: None  # pragma: no cover\n               ):\n    \"\"\"\n    Params\n    ------\n    fin  : file with `read(buf_size : int)` method\n    fout  : file with `write` (and optionally `flush`) methods.\n    callback  : function(int), e.g.: `tqdm.update`\n    \"\"\"\n    fp_write = fout.write\n\n    # tmp = ''\n    if not delim:\n        while True:\n            tmp = fin.read(buf_size)\n\n            # flush at EOF\n            if not tmp:\n                getattr(fout, 'flush', lambda: None)()  # pragma: no cover\n                return\n\n            fp_write(tmp)\n            callback(len(tmp))\n        # return\n\n    buf = ''\n    # n = 0\n    while True:\n        tmp = fin.read(buf_size)\n\n        # flush at EOF\n        if not tmp:\n            if buf:\n                fp_write(buf)\n                callback(1 + buf.count(delim))  # n += 1 + buf.count(delim)\n            getattr(fout, 'flush', lambda: None)()  # pragma: no cover\n            return  # n\n\n        while True:\n            try:\n                i = tmp.index(delim)\n            except ValueError:\n                buf += tmp\n                break\n            else:\n                fp_write(buf + tmp[:i + len(delim)])\n                callback(1)  # n += 1\n                buf = ''\n                tmp = tmp[i + len(delim):]",
                "def main(fp=sys.stderr):\n    \"\"\"\n    Paramters (internal use only)\n    ---------\n    fp  : file-like object for tqdm\n    \"\"\"\n    try:\n        log = sys.argv.index('--log')\n    except ValueError:\n        logLevel = 'INFO'\n    else:\n        # sys.argv.pop(log)\n        # logLevel = sys.argv.pop(log)\n        logLevel = sys.argv[log + 1]\n    logging.basicConfig(level=getattr(logging, logLevel))\n    log = logging.getLogger(__name__)\n\n    d = tqdm.__init__.__doc__ + CLI_EXTRA_DOC\n\n    opt_types = dict(RE_OPTS.findall(d))\n    # opt_types['delim'] = 'chr'\n\n    for o in UNSUPPORTED_OPTS:\n        opt_types.pop(o)\n\n    log.debug(sorted(opt_types.items()))\n\n    # d = RE_OPTS.sub(r'  --\\1=<\\1>  : \\2', d)\n    split = RE_OPTS.split(d)\n    opt_types_desc = zip(split[1::3], split[2::3], split[3::3])\n    d = ''.join('\\n  --{0}=<{0}>  : {1}{2}'.format(*otd)\n                for otd in opt_types_desc if otd[0] not in UNSUPPORTED_OPTS)\n\n    d = \"\"\"Usage:\n  tqdm [--help | options]\n\nOptions:\n  -h, --help     Print this help and exit\n  -v, --version  Print version and exit\n\n\"\"\" + d.strip('\\n') + '\\n'\n\n    # opts = docopt(d, version=__version__)\n    if any(v in sys.argv for v in ('-v', '--version')):\n        sys.stdout.write(__version__ + '\\n')\n        sys.exit(0)\n    elif any(v in sys.argv for v in ('-h', '--help')):\n        sys.stdout.write(d + '\\n')\n        sys.exit(0)\n\n    argv = RE_SHLEX.split(' '.join([\"tqdm\"] + sys.argv[1:]))\n    opts = dict(zip(argv[1::2], argv[2::2]))\n\n    log.debug(opts)\n    opts.pop('log', True)\n\n    tqdm_args = {'file': fp}\n    try:\n        for (o, v) in opts.items():\n            try:\n                tqdm_args[o] = cast(v, opt_types[o])\n            except KeyError as e:\n                raise TqdmKeyError(str(e))\n        log.debug('args:' + str(tqdm_args))\n    except:\n        fp.write('\\nError:\\nUsage:\\n  tqdm [--help | options]\\n')\n        for i in sys.stdin:\n            sys.stdout.write(i)\n        raise\n    else:\n        buf_size = tqdm_args.pop('buf_size', 256)\n        delim = tqdm_args.pop('delim', '\\n')\n        delim_per_char = tqdm_args.pop('bytes', False)\n        if delim_per_char:\n            tqdm_args.setdefault('unit', 'B')\n            tqdm_args.setdefault('unit_scale', True)\n            tqdm_args.setdefault('unit_divisor', 1024)\n            log.debug(tqdm_args)\n            with tqdm(**tqdm_args) as t:\n                posix_pipe(sys.stdin, sys.stdout,\n                           '', buf_size, t.update)\n        elif delim == '\\n':\n            log.debug(tqdm_args)\n            for i in tqdm(sys.stdin, **tqdm_args):\n                sys.stdout.write(i)\n        else:\n            log.debug(tqdm_args)\n            with tqdm(**tqdm_args) as t:\n                posix_pipe(sys.stdin, sys.stdout,\n                           delim, buf_size, t.update)"
            ],
            "inscope_function_signatures": [
                "cast(val, typ)",
                "posix_pipe(fin, fout, delim='\\n', buf_size=256, callback=lambda int: None)",
                "main(fp=sys.stderr)"
            ],
            "variables_in_file": {
                "__all__": [
                    6
                ],
                "log": [
                    130,
                    194,
                    132,
                    199,
                    10,
                    11,
                    170,
                    203,
                    142,
                    180,
                    124
                ],
                "logging.getLogger": [
                    10,
                    132
                ],
                "logging": [
                    10,
                    131,
                    132
                ],
                "__name__": [
                    10,
                    132
                ],
                "log.debug": [
                    194,
                    199,
                    170,
                    11,
                    203,
                    142,
                    180
                ],
                "val": [
                    32,
                    34,
                    11,
                    15,
                    18,
                    22,
                    24,
                    27,
                    29
                ],
                "typ": [
                    34,
                    11,
                    12,
                    13,
                    18,
                    21,
                    27,
                    29,
                    31
                ],
                "t": [
                    195,
                    197,
                    204,
                    13,
                    206,
                    15
                ],
                "typ.split": [
                    13
                ],
                "cast": [
                    177,
                    15
                ],
                "TqdmTypeError": [
                    16,
                    18,
                    27,
                    34
                ],
                "eval": [
                    32,
                    29
                ],
                "chr": [
                    32
                ],
                "ord": [
                    32
                ],
                "fp_write": [
                    83,
                    59,
                    71,
                    47
                ],
                "fout.write": [
                    47
                ],
                "fout": [
                    56,
                    73,
                    47
                ],
                "delim": [
                    198,
                    72,
                    78,
                    206,
                    50,
                    83,
                    86,
                    188
                ],
                "tmp": [
                    66,
                    69,
                    78,
                    80,
                    83,
                    52,
                    86,
                    55,
                    59,
                    60
                ],
                "fin.read": [
                    66,
                    52
                ],
                "fin": [
                    66,
                    52
                ],
                "buf_size": [
                    66,
                    197,
                    206,
                    52,
                    187
                ],
                "getattr": [
                    56,
                    73,
                    131
                ],
                "callback": [
                    72,
                    60,
                    84
                ],
                "len": [
                    83,
                    60,
                    86
                ],
                "buf": [
                    70,
                    71,
                    72,
                    80,
                    83,
                    85,
                    63
                ],
                "buf.count": [
                    72
                ],
                "i": [
                    200,
                    201,
                    78,
                    83,
                    86,
                    183,
                    184
                ],
                "tmp.index": [
                    78
                ],
                "ValueError": [
                    125,
                    79
                ],
                "RE_OPTS": [
                    136,
                    145,
                    90
                ],
                "re.compile": [
                    90,
                    92
                ],
                "re": [
                    90,
                    92
                ],
                "RE_SHLEX": [
                    92,
                    167
                ],
                "UNSUPPORTED_OPTS": [
                    139,
                    148,
                    95
                ],
                "CLI_EXTRA_DOC": [
                    98,
                    134
                ],
                "sys.stderr": [
                    117
                ],
                "sys": [
                    160,
                    161,
                    130,
                    162,
                    163,
                    164,
                    165,
                    167,
                    196,
                    200,
                    201,
                    205,
                    117,
                    183,
                    184,
                    124
                ],
                "sys.argv.index": [
                    124
                ],
                "sys.argv": [
                    160,
                    130,
                    163,
                    167,
                    124
                ],
                "logLevel": [
                    130,
                    131,
                    126
                ],
                "logging.basicConfig": [
                    131
                ],
                "d": [
                    164,
                    134,
                    136,
                    145,
                    147,
                    150,
                    157
                ],
                "tqdm.__init__.__doc__": [
                    134
                ],
                "tqdm.__init__": [
                    134
                ],
                "tqdm": [
                    200,
                    195,
                    204,
                    134
                ],
                "opt_types": [
                    136,
                    177,
                    140,
                    142
                ],
                "dict": [
                    136,
                    168
                ],
                "RE_OPTS.findall": [
                    136
                ],
                "o": [
                    177,
                    139,
                    140,
                    175
                ],
                "opt_types.pop": [
                    140
                ],
                "sorted": [
                    142
                ],
                "opt_types.items": [
                    142
                ],
                "split": [
                    145,
                    146
                ],
                "RE_OPTS.split": [
                    145
                ],
                "opt_types_desc": [
                    146,
                    148
                ],
                "zip": [
                    168,
                    146
                ],
                "join": [
                    147,
                    167
                ],
                "format": [
                    147
                ],
                "otd": [
                    147,
                    148
                ],
                "d.strip": [
                    157
                ],
                "any": [
                    160,
                    163
                ],
                "v": [
                    160,
                    177,
                    163,
                    175
                ],
                "sys.stdout.write": [
                    184,
                    161,
                    164,
                    201
                ],
                "sys.stdout": [
                    161,
                    196,
                    164,
                    201,
                    205,
                    184
                ],
                "__version__": [
                    161
                ],
                "sys.exit": [
                    162,
                    165
                ],
                "argv": [
                    168,
                    167
                ],
                "RE_SHLEX.split": [
                    167
                ],
                "opts": [
                    168,
                    170,
                    171,
                    175
                ],
                "opts.pop": [
                    171
                ],
                "tqdm_args": [
                    192,
                    193,
                    194,
                    195,
                    199,
                    200,
                    203,
                    204,
                    173,
                    177,
                    180,
                    187,
                    188,
                    189,
                    191
                ],
                "fp": [
                    173,
                    182
                ],
                "opts.items": [
                    175
                ],
                "KeyError": [
                    178
                ],
                "TqdmKeyError": [
                    179
                ],
                "str": [
                    179,
                    180
                ],
                "e": [
                    179
                ],
                "fp.write": [
                    182
                ],
                "sys.stdin": [
                    200,
                    196,
                    205,
                    183
                ],
                "tqdm_args.pop": [
                    187,
                    188,
                    189
                ],
                "delim_per_char": [
                    189,
                    190
                ],
                "tqdm_args.setdefault": [
                    192,
                    193,
                    191
                ],
                "posix_pipe": [
                    196,
                    205
                ],
                "t.update": [
                    197,
                    206
                ]
            },
            "filtered_variables_in_file": {
                "__all__": [
                    6
                ],
                "log": [
                    130,
                    194,
                    132,
                    199,
                    10,
                    11,
                    170,
                    203,
                    142,
                    180,
                    124
                ],
                "logging.getLogger": [
                    10,
                    132
                ],
                "logging": [
                    10,
                    131,
                    132
                ],
                "log.debug": [
                    194,
                    199,
                    170,
                    11,
                    203,
                    142,
                    180
                ],
                "val": [
                    32,
                    34,
                    11,
                    15,
                    18,
                    22,
                    24,
                    27,
                    29
                ],
                "typ": [
                    34,
                    11,
                    12,
                    13,
                    18,
                    21,
                    27,
                    29,
                    31
                ],
                "t": [
                    195,
                    197,
                    204,
                    13,
                    206,
                    15
                ],
                "typ.split": [
                    13
                ],
                "cast": [
                    177,
                    15
                ],
                "TqdmTypeError": [
                    16,
                    18,
                    27,
                    34
                ],
                "fp_write": [
                    83,
                    59,
                    71,
                    47
                ],
                "fout.write": [
                    47
                ],
                "fout": [
                    56,
                    73,
                    47
                ],
                "delim": [
                    198,
                    72,
                    78,
                    206,
                    50,
                    83,
                    86,
                    188
                ],
                "tmp": [
                    66,
                    69,
                    78,
                    80,
                    83,
                    52,
                    86,
                    55,
                    59,
                    60
                ],
                "fin.read": [
                    66,
                    52
                ],
                "fin": [
                    66,
                    52
                ],
                "buf_size": [
                    66,
                    197,
                    206,
                    52,
                    187
                ],
                "callback": [
                    72,
                    60,
                    84
                ],
                "buf": [
                    70,
                    71,
                    72,
                    80,
                    83,
                    85,
                    63
                ],
                "buf.count": [
                    72
                ],
                "i": [
                    200,
                    201,
                    78,
                    83,
                    86,
                    183,
                    184
                ],
                "tmp.index": [
                    78
                ],
                "RE_OPTS": [
                    136,
                    145,
                    90
                ],
                "re.compile": [
                    90,
                    92
                ],
                "re": [
                    90,
                    92
                ],
                "RE_SHLEX": [
                    92,
                    167
                ],
                "UNSUPPORTED_OPTS": [
                    139,
                    148,
                    95
                ],
                "CLI_EXTRA_DOC": [
                    98,
                    134
                ],
                "sys.stderr": [
                    117
                ],
                "sys": [
                    160,
                    161,
                    130,
                    162,
                    163,
                    164,
                    165,
                    167,
                    196,
                    200,
                    201,
                    205,
                    117,
                    183,
                    184,
                    124
                ],
                "sys.argv.index": [
                    124
                ],
                "sys.argv": [
                    160,
                    130,
                    163,
                    167,
                    124
                ],
                "logLevel": [
                    130,
                    131,
                    126
                ],
                "logging.basicConfig": [
                    131
                ],
                "d": [
                    164,
                    134,
                    136,
                    145,
                    147,
                    150,
                    157
                ],
                "tqdm.__init__.__doc__": [
                    134
                ],
                "tqdm.__init__": [
                    134
                ],
                "tqdm": [
                    200,
                    195,
                    204,
                    134
                ],
                "opt_types": [
                    136,
                    177,
                    140,
                    142
                ],
                "RE_OPTS.findall": [
                    136
                ],
                "o": [
                    177,
                    139,
                    140,
                    175
                ],
                "opt_types.pop": [
                    140
                ],
                "opt_types.items": [
                    142
                ],
                "split": [
                    145,
                    146
                ],
                "RE_OPTS.split": [
                    145
                ],
                "opt_types_desc": [
                    146,
                    148
                ],
                "join": [
                    147,
                    167
                ],
                "otd": [
                    147,
                    148
                ],
                "d.strip": [
                    157
                ],
                "v": [
                    160,
                    177,
                    163,
                    175
                ],
                "sys.stdout.write": [
                    184,
                    161,
                    164,
                    201
                ],
                "sys.stdout": [
                    161,
                    196,
                    164,
                    201,
                    205,
                    184
                ],
                "__version__": [
                    161
                ],
                "sys.exit": [
                    162,
                    165
                ],
                "argv": [
                    168,
                    167
                ],
                "RE_SHLEX.split": [
                    167
                ],
                "opts": [
                    168,
                    170,
                    171,
                    175
                ],
                "opts.pop": [
                    171
                ],
                "tqdm_args": [
                    192,
                    193,
                    194,
                    195,
                    199,
                    200,
                    203,
                    204,
                    173,
                    177,
                    180,
                    187,
                    188,
                    189,
                    191
                ],
                "fp": [
                    173,
                    182
                ],
                "opts.items": [
                    175
                ],
                "TqdmKeyError": [
                    179
                ],
                "e": [
                    179
                ],
                "fp.write": [
                    182
                ],
                "sys.stdin": [
                    200,
                    196,
                    205,
                    183
                ],
                "tqdm_args.pop": [
                    187,
                    188,
                    189
                ],
                "delim_per_char": [
                    189,
                    190
                ],
                "tqdm_args.setdefault": [
                    192,
                    193,
                    191
                ],
                "posix_pipe": [
                    196,
                    205
                ],
                "t.update": [
                    197,
                    206
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_7/tqdm/tests/tests_main.py",
                "test_function": "test_main",
                "test_function_code": "@with_setup(pretest, posttest)\ndef test_main():\n    \"\"\"Test command line pipes\"\"\"\n    ls_out = _sh('ls').replace('\\r\\n', '\\n')\n    ls = subprocess.Popen('ls', stdout=subprocess.PIPE,\n                          stderr=subprocess.STDOUT)\n    res = _sh(sys.executable, '-c', 'from tqdm import main; main()',\n              stdin=ls.stdout, stderr=subprocess.STDOUT)\n    ls.wait()\n\n    # actual test:\n\n    assert (ls_out in res.replace('\\r\\n', '\\n'))\n\n    # semi-fake test which gets coverage:\n    _SYS = sys.stdin, sys.argv\n\n    with closing(StringIO()) as sys.stdin:\n        sys.argv = ['', '--desc', 'Test CLI-delims',\n                    '--ascii', 'True', '--delim', r'\\0', '--buf_size', '64']\n        sys.stdin.write('\\0'.join(map(str, _range(int(1e3)))))\n        sys.stdin.seek(0)\n        main()\n\n    IN_DATA_LIST = map(str, _range(int(1e3)))\n    sys.stdin = IN_DATA_LIST\n    sys.argv = ['', '--desc', 'Test CLI pipes',\n                '--ascii', 'True', '--unit_scale', 'True']\n    import tqdm.__main__  # NOQA\n\n    IN_DATA = '\\0'.join(IN_DATA_LIST)\n    with closing(StringIO()) as sys.stdin:\n        sys.stdin.write(IN_DATA)\n        sys.stdin.seek(0)\n        sys.argv = ['', '--ascii', '--bytes', '--unit_scale', 'False']\n        with closing(UnicodeIO()) as fp:\n            main(fp=fp)\n            assert (str(len(IN_DATA)) in fp.getvalue())\n\n    sys.stdin = IN_DATA_LIST\n    sys.argv = ['', '-ascii', '--unit_scale', 'False',\n                '--desc', 'Test CLI errors']\n    main()\n\n    sys.argv = ['', '-ascii', '-unit_scale', '--bad_arg_u_ment', 'foo']\n    try:\n        main()\n    except TqdmKeyError as e:\n        if 'bad_arg_u_ment' not in str(e):\n            raise\n    else:\n        raise TqdmKeyError('bad_arg_u_ment')\n\n    sys.argv = ['', '-ascii', '-unit_scale', 'invalid_bool_value']\n    try:\n        main()\n    except TqdmTypeError as e:\n        if 'invalid_bool_value' not in str(e):\n            raise\n    else:\n        raise TqdmTypeError('invalid_bool_value')\n\n    sys.argv = ['', '-ascii', '--total', 'invalid_int_value']\n    try:\n        main()\n    except TqdmTypeError as e:\n        if 'invalid_int_value' not in str(e):\n            raise\n    else:\n        raise TqdmTypeError('invalid_int_value')\n\n    for i in ('-h', '--help', '-v', '--version'):\n        sys.argv = ['', i]\n        try:\n            main()\n        except SystemExit:\n            pass\n\n    # clean up\n    sys.stdin, sys.argv = _SYS",
                "test_error": "tqdm._tqdm.TqdmKeyError: \"'delims'\"",
                "full_test_error": "fp = <_pytest.capture.EncodedFile object at 0x10e200910>\n\n    def main(fp=sys.stderr):\n        \"\"\"\n        Paramters (internal use only)\n        ---------\n        fp  : file-like object for tqdm\n        \"\"\"\n        try:\n            log = sys.argv.index('--log')\n        except ValueError:\n            logLevel = 'INFO'\n        else:\n            # sys.argv.pop(log)\n            # logLevel = sys.argv.pop(log)\n            logLevel = sys.argv[log + 1]\n        logging.basicConfig(level=getattr(logging, logLevel))\n        log = logging.getLogger(__name__)\n    \n        d = tqdm.__init__.__doc__ + CLI_EXTRA_DOC\n    \n        opt_types = dict(RE_OPTS.findall(d))\n        # opt_types['delim'] = 'chr'\n    \n        for o in UNSUPPORTED_OPTS:\n            opt_types.pop(o)\n    \n        log.debug(sorted(opt_types.items()))\n    \n        # d = RE_OPTS.sub(r'  --\\1=<\\1>  : \\2', d)\n        split = RE_OPTS.split(d)\n        opt_types_desc = zip(split[1::3], split[2::3], split[3::3])\n        d = ''.join('\\n  --{0}=<{0}>  : {1}{2}'.format(*otd)\n                    for otd in opt_types_desc if otd[0] not in UNSUPPORTED_OPTS)\n    \n        d = \"\"\"Usage:\n      tqdm [--help | options]\n    \n    Options:\n      -h, --help     Print this help and exit\n      -v, --version  Print version and exit\n    \n    \"\"\" + d.strip('\\n') + '\\n'\n    \n        # opts = docopt(d, version=__version__)\n        if any(v in sys.argv for v in ('-v', '--version')):\n            sys.stdout.write(__version__ + '\\n')\n            sys.exit(0)\n        elif any(v in sys.argv for v in ('-h', '--help')):\n            sys.stdout.write(d + '\\n')\n            sys.exit(0)\n    \n        argv = RE_SHLEX.split(' '.join([\"tqdm\"] + sys.argv[1:]))\n        opts = dict(zip(argv[1::2], argv[2::2]))\n    \n        log.debug(opts)\n        opts.pop('log', True)\n    \n        tqdm_args = {'file': fp}\n        try:\n            for (o, v) in opts.items():\n                try:\n>                   tqdm_args[o] = cast(v, opt_types[o])\nE                   KeyError: 'delims'\n\ntqdm/_main.py:177: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\n    @with_setup(pretest, posttest)\n    def test_main():\n        \"\"\"Test command line pipes\"\"\"\n        ls_out = _sh('ls').replace('\\r\\n', '\\n')\n        ls = subprocess.Popen('ls', stdout=subprocess.PIPE,\n                              stderr=subprocess.STDOUT)\n        res = _sh(sys.executable, '-c', 'from tqdm import main; main()',\n                  stdin=ls.stdout, stderr=subprocess.STDOUT)\n        ls.wait()\n    \n        # actual test:\n    \n        assert (ls_out in res.replace('\\r\\n', '\\n'))\n    \n        # semi-fake test which gets coverage:\n        _SYS = sys.stdin, sys.argv\n    \n        with closing(StringIO()) as sys.stdin:\n            sys.argv = ['', '--desc', 'Test CLI-delims',\n                        '--ascii', 'True', '--delim', r'\\0', '--buf_size', '64']\n            sys.stdin.write('\\0'.join(map(str, _range(int(1e3)))))\n            sys.stdin.seek(0)\n>           main()\n\ntqdm/tests/tests_main.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfp = <_pytest.capture.EncodedFile object at 0x10e200910>\n\n    def main(fp=sys.stderr):\n        \"\"\"\n        Paramters (internal use only)\n        ---------\n        fp  : file-like object for tqdm\n        \"\"\"\n        try:\n            log = sys.argv.index('--log')\n        except ValueError:\n            logLevel = 'INFO'\n        else:\n            # sys.argv.pop(log)\n            # logLevel = sys.argv.pop(log)\n            logLevel = sys.argv[log + 1]\n        logging.basicConfig(level=getattr(logging, logLevel))\n        log = logging.getLogger(__name__)\n    \n        d = tqdm.__init__.__doc__ + CLI_EXTRA_DOC\n    \n        opt_types = dict(RE_OPTS.findall(d))\n        # opt_types['delim'] = 'chr'\n    \n        for o in UNSUPPORTED_OPTS:\n            opt_types.pop(o)\n    \n        log.debug(sorted(opt_types.items()))\n    \n        # d = RE_OPTS.sub(r'  --\\1=<\\1>  : \\2', d)\n        split = RE_OPTS.split(d)\n        opt_types_desc = zip(split[1::3], split[2::3], split[3::3])\n        d = ''.join('\\n  --{0}=<{0}>  : {1}{2}'.format(*otd)\n                    for otd in opt_types_desc if otd[0] not in UNSUPPORTED_OPTS)\n    \n        d = \"\"\"Usage:\n      tqdm [--help | options]\n    \n    Options:\n      -h, --help     Print this help and exit\n      -v, --version  Print version and exit\n    \n    \"\"\" + d.strip('\\n') + '\\n'\n    \n        # opts = docopt(d, version=__version__)\n        if any(v in sys.argv for v in ('-v', '--version')):\n            sys.stdout.write(__version__ + '\\n')\n            sys.exit(0)\n        elif any(v in sys.argv for v in ('-h', '--help')):\n            sys.stdout.write(d + '\\n')\n            sys.exit(0)\n    \n        argv = RE_SHLEX.split(' '.join([\"tqdm\"] + sys.argv[1:]))\n        opts = dict(zip(argv[1::2], argv[2::2]))\n    \n        log.debug(opts)\n        opts.pop('log', True)\n    \n        tqdm_args = {'file': fp}\n        try:\n            for (o, v) in opts.items():\n                try:\n                    tqdm_args[o] = cast(v, opt_types[o])\n                except KeyError as e:\n>                   raise TqdmKeyError(str(e))\nE                   tqdm._tqdm.TqdmKeyError: \"'delims'\"\n\ntqdm/_main.py:179: TqdmKeyError",
                "traceback": "fp = <_pytest.capture.EncodedFile object at 0x10e200910>\n\n    def main(fp=sys.stderr):\n        \"\"\"\n        Paramters (internal use only)\n        ---------\n        fp  : file-like object for tqdm\n        \"\"\"\n        try:\n            log = sys.argv.index('--log')\n        except ValueError:\n            logLevel = 'INFO'\n        else:\n            # sys.argv.pop(log)\n            # logLevel = sys.argv.pop(log)\n            logLevel = sys.argv[log + 1]\n        logging.basicConfig(level=getattr(logging, logLevel))\n        log = logging.getLogger(__name__)\n    \n        d = tqdm.__init__.__doc__ + CLI_EXTRA_DOC\n    \n        opt_types = dict(RE_OPTS.findall(d))\n        # opt_types['delim'] = 'chr'\n    \n        for o in UNSUPPORTED_OPTS:\n            opt_types.pop(o)\n    \n        log.debug(sorted(opt_types.items()))\n    \n        # d = RE_OPTS.sub(r'  --\\1=<\\1>  : \\2', d)\n        split = RE_OPTS.split(d)\n        opt_types_desc = zip(split[1::3], split[2::3], split[3::3])\n        d = ''.join('\\n  --{0}=<{0}>  : {1}{2}'.format(*otd)\n                    for otd in opt_types_desc if otd[0] not in UNSUPPORTED_OPTS)\n    \n        d = \"\"\"Usage:\n      tqdm [--help | options]\n    \n    Options:\n      -h, --help     Print this help and exit\n      -v, --version  Print version and exit\n    \n    \"\"\" + d.strip('\\n') + '\\n'\n    \n        # opts = docopt(d, version=__version__)\n        if any(v in sys.argv for v in ('-v', '--version')):\n            sys.stdout.write(__version__ + '\\n')\n            sys.exit(0)\n        elif any(v in sys.argv for v in ('-h', '--help')):\n            sys.stdout.write(d + '\\n')\n            sys.exit(0)\n    \n        argv = RE_SHLEX.split(' '.join([\"tqdm\"] + sys.argv[1:]))\n        opts = dict(zip(argv[1::2], argv[2::2]))\n    \n        log.debug(opts)\n        opts.pop('log', True)\n    \n        tqdm_args = {'file': fp}\n        try:\n            for (o, v) in opts.items():\n                try:\n                    tqdm_args[o] = cast(v, opt_types[o])\n                except KeyError as e:\n>                   raise TqdmKeyError(str(e))\nE                   tqdm._tqdm.TqdmKeyError: \"'delims'\"",
                "test_error_location": "tqdm/_main.py:179: TqdmKeyError",
                "test_function_decorators": [
                    "with_setup(pretest, posttest)"
                ]
            }
        ]
    }
}