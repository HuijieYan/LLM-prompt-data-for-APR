{
    "1.1.1": "def _set_url(self, url):\n    if not isinstance(url, six.string_types):\n        raise TypeError('Request url must be str or unicode, got %s:' % type(url).__name__)\n\n    s = safe_url_string(url, self.encoding)\n    self._url = escape_ajax(s)\n\n    if ':' not in self._url:\n        raise ValueError('Missing scheme in request url: %s' % self._url)\n",
    "1.1.2": null,
    "1.2.1": "class Request(object_ref)",
    "1.2.2": null,
    "1.2.3": [
        "encoding(self)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_37/scrapy/http/request/__init__.py",
    "1.3.2": [
        "encoding(self)"
    ],
    "1.4.1": [
        "    def test_url_no_scheme(self):\n        self.assertRaises(ValueError, self.request_class, 'foo')\n        self.assertRaises(ValueError, self.request_class, '/foo/')\n        self.assertRaises(ValueError, self.request_class, '/foo:bar')"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_37/tests/test_http_request.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: ValueError not raised by Request"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_http_request.RequestTest testMethod=test_url_no_scheme>\n\n    def test_url_no_scheme(self):\n        self.assertRaises(ValueError, self.request_class, 'foo')\n        self.assertRaises(ValueError, self.request_class, '/foo/')\n>       self.assertRaises(ValueError, self.request_class, '/foo:bar')",
            "\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_37/tests/test_http_request.py:56: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}