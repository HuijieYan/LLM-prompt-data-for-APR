{
    "scrapy:37": {
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_37/scrapy/http/request/__init__.py": {
            "buggy_functions": [
                {
                    "function_name": "_set_url",
                    "function_code": "def _set_url(self, url):\n    if not isinstance(url, six.string_types):\n        raise TypeError('Request url must be str or unicode, got %s:' % type(url).__name__)\n\n    s = safe_url_string(url, self.encoding)\n    self._url = escape_ajax(s)\n\n    if ':' not in self._url:\n        raise ValueError('Missing scheme in request url: %s' % self._url)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 62,
                    "end_line": 70,
                    "variables": {
                        "isinstance": [
                            63
                        ],
                        "url": [
                            64,
                            66,
                            63
                        ],
                        "six.string_types": [
                            63
                        ],
                        "six": [
                            63
                        ],
                        "TypeError": [
                            64
                        ],
                        "__name__": [
                            64
                        ],
                        "type": [
                            64
                        ],
                        "s": [
                            66,
                            67
                        ],
                        "safe_url_string": [
                            66
                        ],
                        "self.encoding": [
                            66
                        ],
                        "self": [
                            66,
                            67,
                            69,
                            70
                        ],
                        "self._url": [
                            67,
                            69,
                            70
                        ],
                        "escape_ajax": [
                            67
                        ],
                        "ValueError": [
                            70
                        ]
                    },
                    "filtered_variables": {
                        "url": [
                            64,
                            66,
                            63
                        ],
                        "six.string_types": [
                            63
                        ],
                        "six": [
                            63
                        ],
                        "s": [
                            66,
                            67
                        ],
                        "safe_url_string": [
                            66
                        ],
                        "self.encoding": [
                            66
                        ],
                        "self": [
                            66,
                            67,
                            69,
                            70
                        ],
                        "self._url": [
                            67,
                            69,
                            70
                        ],
                        "escape_ajax": [
                            67
                        ]
                    },
                    "diff_line_number": 69,
                    "class_data": {
                        "signature": "class Request(object_ref)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None, flags=None, cb_kwargs=None):\n    self._encoding = encoding\n    self.method = str(method).upper()\n    self._set_url(url)\n    self._set_body(body)\n    assert isinstance(priority, int), 'Request priority not an integer: %r' % priority\n    self.priority = priority\n    if callback is not None and (not callable(callback)):\n        raise TypeError('callback must be a callable, got %s' % type(callback).__name__)\n    if errback is not None and (not callable(errback)):\n        raise TypeError('errback must be a callable, got %s' % type(errback).__name__)\n    assert callback or not errback, 'Cannot use errback without a callback'\n    self.callback = callback\n    self.errback = errback\n    self.cookies = cookies or {}\n    self.headers = Headers(headers or {}, encoding=encoding)\n    self.dont_filter = dont_filter\n    self._meta = dict(meta) if meta else None\n    self._cb_kwargs = dict(cb_kwargs) if cb_kwargs else None\n    self.flags = [] if flags is None else list(flags)",
                            "@property\ndef cb_kwargs(self):\n    if self._cb_kwargs is None:\n        self._cb_kwargs = {}\n    return self._cb_kwargs",
                            "@property\ndef meta(self):\n    if self._meta is None:\n        self._meta = {}\n    return self._meta",
                            "def _get_url(self):\n    return self._url",
                            "def _set_url(self, url):\n    if not isinstance(url, six.string_types):\n        raise TypeError('Request url must be str or unicode, got %s:' % type(url).__name__)\n    s = safe_url_string(url, self.encoding)\n    self._url = escape_ajax(s)\n    if ':' not in self._url:\n        raise ValueError('Missing scheme in request url: %s' % self._url)",
                            "def _get_body(self):\n    return self._body",
                            "def _set_body(self, body):\n    if body is None:\n        self._body = b''\n    else:\n        self._body = to_bytes(body, self.encoding)",
                            "@property\ndef encoding(self):\n    return self._encoding",
                            "def __str__(self):\n    return '<%s %s>' % (self.method, self.url)",
                            "def copy(self):\n    \"\"\"Return a copy of this Request\"\"\"\n    return self.replace()",
                            "def replace(self, *args, **kwargs):\n    \"\"\"Create a new Request with the same attributes except for those\n    given new values.\n    \"\"\"\n    for x in ['url', 'method', 'headers', 'body', 'cookies', 'meta', 'flags', 'encoding', 'priority', 'dont_filter', 'callback', 'errback', 'cb_kwargs']:\n        kwargs.setdefault(x, getattr(self, x))\n    cls = kwargs.pop('cls', self.__class__)\n    return cls(*args, **kwargs)",
                            "@classmethod\ndef from_curl(cls, curl_command, ignore_unknown_options=True, **kwargs):\n    \"\"\"Create a Request object from a string containing a `cURL\n    <https://curl.haxx.se/>`_ command. It populates the HTTP method, the\n    URL, the headers, the cookies and the body. It accepts the same\n    arguments as the :class:`Request` class, taking preference and\n    overriding the values of the same arguments contained in the cURL\n    command.\n\n    Unrecognized options are ignored by default. To raise an error when\n    finding unknown options call this method by passing\n    ``ignore_unknown_options=False``.\n\n    .. caution:: Using :meth:`from_curl` from :class:`~scrapy.http.Request`\n                 subclasses, such as :class:`~scrapy.http.JSONRequest`, or\n                 :class:`~scrapy.http.XmlRpcRequest`, as well as having\n                 :ref:`downloader middlewares <topics-downloader-middleware>`\n                 and\n                 :ref:`spider middlewares <topics-spider-middleware>`\n                 enabled, such as\n                 :class:`~scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware`,\n                 :class:`~scrapy.downloadermiddlewares.useragent.UserAgentMiddleware`,\n                 or\n                 :class:`~scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware`,\n                 may modify the :class:`~scrapy.http.Request` object.\n\n   \"\"\"\n    request_kwargs = curl_to_request_kwargs(curl_command, ignore_unknown_options)\n    request_kwargs.update(kwargs)\n    return cls(**request_kwargs)"
                        ],
                        "constructor_variables": [
                            "dont_filter",
                            "_cb_kwargs",
                            "cookies",
                            "_encoding",
                            "callback",
                            "headers",
                            "priority",
                            "flags",
                            "_meta",
                            "method",
                            "errback"
                        ],
                        "class_level_variables": [
                            "url",
                            "body",
                            "__repr__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None, flags=None, cb_kwargs=None)",
                            "cb_kwargs(self)",
                            "meta(self)",
                            "_get_url(self)",
                            "_set_url(self, url)",
                            "_get_body(self)",
                            "_set_body(self, body)",
                            "encoding(self)",
                            "__str__(self)",
                            "copy(self)",
                            "replace(self, *args, **kwargs)",
                            "from_curl(cls, curl_command, ignore_unknown_options=True, **kwargs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, url, callback=None, method='GET', headers=None, body=None,\n             cookies=None, meta=None, encoding='utf-8', priority=0,\n             dont_filter=False, errback=None, flags=None, cb_kwargs=None):\n\n    self._encoding = encoding  # this one has to be set first\n    self.method = str(method).upper()\n    self._set_url(url)\n    self._set_body(body)\n    assert isinstance(priority, int), \"Request priority not an integer: %r\" % priority\n    self.priority = priority\n\n    if callback is not None and not callable(callback):\n        raise TypeError('callback must be a callable, got %s' % type(callback).__name__)\n    if errback is not None and not callable(errback):\n        raise TypeError('errback must be a callable, got %s' % type(errback).__name__)\n    assert callback or not errback, \"Cannot use errback without a callback\"\n    self.callback = callback\n    self.errback = errback\n\n    self.cookies = cookies or {}\n    self.headers = Headers(headers or {}, encoding=encoding)\n    self.dont_filter = dont_filter\n\n    self._meta = dict(meta) if meta else None\n    self._cb_kwargs = dict(cb_kwargs) if cb_kwargs else None\n    self.flags = [] if flags is None else list(flags)",
                "@property\ndef cb_kwargs(self):\n    if self._cb_kwargs is None:\n        self._cb_kwargs = {}\n    return self._cb_kwargs",
                "@property\ndef meta(self):\n    if self._meta is None:\n        self._meta = {}\n    return self._meta",
                "def _get_url(self):\n    return self._url",
                "def _set_url(self, url):\n    if not isinstance(url, six.string_types):\n        raise TypeError('Request url must be str or unicode, got %s:' % type(url).__name__)\n\n    s = safe_url_string(url, self.encoding)\n    self._url = escape_ajax(s)\n\n    if ':' not in self._url:\n        raise ValueError('Missing scheme in request url: %s' % self._url)",
                "def _get_body(self):\n    return self._body",
                "def _set_body(self, body):\n    if body is None:\n        self._body = b''\n    else:\n        self._body = to_bytes(body, self.encoding)",
                "@property\ndef encoding(self):\n    return self._encoding",
                "def __str__(self):\n    return \"<%s %s>\" % (self.method, self.url)",
                "def copy(self):\n    \"\"\"Return a copy of this Request\"\"\"\n    return self.replace()",
                "def replace(self, *args, **kwargs):\n    \"\"\"Create a new Request with the same attributes except for those\n    given new values.\n    \"\"\"\n    for x in ['url', 'method', 'headers', 'body', 'cookies', 'meta', 'flags',\n              'encoding', 'priority', 'dont_filter', 'callback', 'errback', 'cb_kwargs']:\n        kwargs.setdefault(x, getattr(self, x))\n    cls = kwargs.pop('cls', self.__class__)\n    return cls(*args, **kwargs)",
                "@classmethod\ndef from_curl(cls, curl_command, ignore_unknown_options=True, **kwargs):\n    \"\"\"Create a Request object from a string containing a `cURL\n    <https://curl.haxx.se/>`_ command. It populates the HTTP method, the\n    URL, the headers, the cookies and the body. It accepts the same\n    arguments as the :class:`Request` class, taking preference and\n    overriding the values of the same arguments contained in the cURL\n    command.\n\n    Unrecognized options are ignored by default. To raise an error when\n    finding unknown options call this method by passing\n    ``ignore_unknown_options=False``.\n\n    .. caution:: Using :meth:`from_curl` from :class:`~scrapy.http.Request`\n                 subclasses, such as :class:`~scrapy.http.JSONRequest`, or\n                 :class:`~scrapy.http.XmlRpcRequest`, as well as having\n                 :ref:`downloader middlewares <topics-downloader-middleware>`\n                 and\n                 :ref:`spider middlewares <topics-spider-middleware>`\n                 enabled, such as\n                 :class:`~scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware`,\n                 :class:`~scrapy.downloadermiddlewares.useragent.UserAgentMiddleware`,\n                 or\n                 :class:`~scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware`,\n                 may modify the :class:`~scrapy.http.Request` object.\n\n   \"\"\"\n    request_kwargs = curl_to_request_kwargs(curl_command, ignore_unknown_options)\n    request_kwargs.update(kwargs)\n    return cls(**request_kwargs)"
            ],
            "inscope_function_signatures": [
                "__init__(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None, flags=None, cb_kwargs=None)",
                "cb_kwargs(self)",
                "meta(self)",
                "_get_url(self)",
                "_set_url(self, url)",
                "_get_body(self)",
                "_set_body(self, body)",
                "encoding(self)",
                "__str__(self)",
                "copy(self)",
                "replace(self, *args, **kwargs)",
                "from_curl(cls, curl_command, ignore_unknown_options=True, **kwargs)"
            ],
            "variables_in_file": {
                "object_ref": [
                    18
                ],
                "self._encoding": [
                    24,
                    87
                ],
                "self": [
                    24,
                    25,
                    26,
                    27,
                    29,
                    36,
                    37,
                    39,
                    40,
                    41,
                    43,
                    44,
                    45,
                    49,
                    50,
                    51,
                    55,
                    56,
                    57,
                    60,
                    66,
                    67,
                    69,
                    70,
                    75,
                    79,
                    81,
                    87,
                    90,
                    96,
                    104,
                    105
                ],
                "encoding": [
                    24,
                    40
                ],
                "self.method": [
                    25,
                    90
                ],
                "upper": [
                    25
                ],
                "str": [
                    25
                ],
                "method": [
                    25
                ],
                "self._set_url": [
                    26
                ],
                "url": [
                    64,
                    66,
                    72,
                    26,
                    63
                ],
                "self._set_body": [
                    27
                ],
                "body": [
                    81,
                    83,
                    27,
                    78
                ],
                "isinstance": [
                    28,
                    63
                ],
                "priority": [
                    28,
                    29
                ],
                "int": [
                    28
                ],
                "self.priority": [
                    29
                ],
                "callback": [
                    32,
                    35,
                    36,
                    31
                ],
                "callable": [
                    33,
                    31
                ],
                "TypeError": [
                    32,
                    34,
                    64
                ],
                "__name__": [
                    32,
                    34,
                    64
                ],
                "type": [
                    32,
                    34,
                    64
                ],
                "errback": [
                    33,
                    34,
                    35,
                    37
                ],
                "self.callback": [
                    36
                ],
                "self.errback": [
                    37
                ],
                "self.cookies": [
                    39
                ],
                "cookies": [
                    39
                ],
                "self.headers": [
                    40
                ],
                "Headers": [
                    40
                ],
                "headers": [
                    40
                ],
                "self.dont_filter": [
                    41
                ],
                "dont_filter": [
                    41
                ],
                "self._meta": [
                    56,
                    57,
                    43,
                    55
                ],
                "meta": [
                    43
                ],
                "dict": [
                    43,
                    44
                ],
                "self._cb_kwargs": [
                    49,
                    50,
                    51,
                    44
                ],
                "cb_kwargs": [
                    44
                ],
                "self.flags": [
                    45
                ],
                "flags": [
                    45
                ],
                "list": [
                    45
                ],
                "property": [
                    72,
                    47,
                    83,
                    85,
                    53
                ],
                "self._url": [
                    67,
                    60,
                    69,
                    70
                ],
                "six.string_types": [
                    63
                ],
                "six": [
                    63
                ],
                "s": [
                    66,
                    67
                ],
                "safe_url_string": [
                    66
                ],
                "self.encoding": [
                    81,
                    66
                ],
                "escape_ajax": [
                    67
                ],
                "ValueError": [
                    70
                ],
                "_get_url": [
                    72
                ],
                "obsolete_setter": [
                    72,
                    83
                ],
                "_set_url": [
                    72
                ],
                "self._body": [
                    81,
                    75,
                    79
                ],
                "to_bytes": [
                    81
                ],
                "_get_body": [
                    83
                ],
                "_set_body": [
                    83
                ],
                "self.url": [
                    90
                ],
                "__repr__": [
                    92
                ],
                "__str__": [
                    92
                ],
                "self.replace": [
                    96
                ],
                "x": [
                    104,
                    102
                ],
                "kwargs.setdefault": [
                    104
                ],
                "kwargs": [
                    104,
                    105,
                    106,
                    136
                ],
                "getattr": [
                    104
                ],
                "cls": [
                    105,
                    106,
                    137
                ],
                "kwargs.pop": [
                    105
                ],
                "self.__class__": [
                    105
                ],
                "args": [
                    106
                ],
                "request_kwargs": [
                    136,
                    137,
                    135
                ],
                "curl_to_request_kwargs": [
                    135
                ],
                "curl_command": [
                    135
                ],
                "ignore_unknown_options": [
                    135
                ],
                "request_kwargs.update": [
                    136
                ],
                "classmethod": [
                    108
                ]
            },
            "filtered_variables_in_file": {
                "object_ref": [
                    18
                ],
                "self._encoding": [
                    24,
                    87
                ],
                "self": [
                    24,
                    25,
                    26,
                    27,
                    29,
                    36,
                    37,
                    39,
                    40,
                    41,
                    43,
                    44,
                    45,
                    49,
                    50,
                    51,
                    55,
                    56,
                    57,
                    60,
                    66,
                    67,
                    69,
                    70,
                    75,
                    79,
                    81,
                    87,
                    90,
                    96,
                    104,
                    105
                ],
                "encoding": [
                    24,
                    40
                ],
                "self.method": [
                    25,
                    90
                ],
                "upper": [
                    25
                ],
                "method": [
                    25
                ],
                "self._set_url": [
                    26
                ],
                "url": [
                    64,
                    66,
                    72,
                    26,
                    63
                ],
                "self._set_body": [
                    27
                ],
                "body": [
                    81,
                    83,
                    27,
                    78
                ],
                "priority": [
                    28,
                    29
                ],
                "self.priority": [
                    29
                ],
                "callback": [
                    32,
                    35,
                    36,
                    31
                ],
                "errback": [
                    33,
                    34,
                    35,
                    37
                ],
                "self.callback": [
                    36
                ],
                "self.errback": [
                    37
                ],
                "self.cookies": [
                    39
                ],
                "cookies": [
                    39
                ],
                "self.headers": [
                    40
                ],
                "Headers": [
                    40
                ],
                "headers": [
                    40
                ],
                "self.dont_filter": [
                    41
                ],
                "dont_filter": [
                    41
                ],
                "self._meta": [
                    56,
                    57,
                    43,
                    55
                ],
                "meta": [
                    43
                ],
                "self._cb_kwargs": [
                    49,
                    50,
                    51,
                    44
                ],
                "cb_kwargs": [
                    44
                ],
                "self.flags": [
                    45
                ],
                "flags": [
                    45
                ],
                "self._url": [
                    67,
                    60,
                    69,
                    70
                ],
                "six.string_types": [
                    63
                ],
                "six": [
                    63
                ],
                "s": [
                    66,
                    67
                ],
                "safe_url_string": [
                    66
                ],
                "self.encoding": [
                    81,
                    66
                ],
                "escape_ajax": [
                    67
                ],
                "_get_url": [
                    72
                ],
                "obsolete_setter": [
                    72,
                    83
                ],
                "_set_url": [
                    72
                ],
                "self._body": [
                    81,
                    75,
                    79
                ],
                "to_bytes": [
                    81
                ],
                "_get_body": [
                    83
                ],
                "_set_body": [
                    83
                ],
                "self.url": [
                    90
                ],
                "__repr__": [
                    92
                ],
                "__str__": [
                    92
                ],
                "self.replace": [
                    96
                ],
                "x": [
                    104,
                    102
                ],
                "kwargs.setdefault": [
                    104
                ],
                "kwargs": [
                    104,
                    105,
                    106,
                    136
                ],
                "cls": [
                    105,
                    106,
                    137
                ],
                "kwargs.pop": [
                    105
                ],
                "self.__class__": [
                    105
                ],
                "args": [
                    106
                ],
                "request_kwargs": [
                    136,
                    137,
                    135
                ],
                "curl_to_request_kwargs": [
                    135
                ],
                "curl_command": [
                    135
                ],
                "ignore_unknown_options": [
                    135
                ],
                "request_kwargs.update": [
                    136
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/scrapy_37/tests/test_http_request.py",
                "test_function": "test_url_no_scheme",
                "test_function_code": "    def test_url_no_scheme(self):\n        self.assertRaises(ValueError, self.request_class, 'foo')\n        self.assertRaises(ValueError, self.request_class, '/foo/')\n        self.assertRaises(ValueError, self.request_class, '/foo:bar')",
                "test_error": "AssertionError: ValueError not raised by Request",
                "full_test_error": "self = <tests.test_http_request.RequestTest testMethod=test_url_no_scheme>\n\n    def test_url_no_scheme(self):\n        self.assertRaises(ValueError, self.request_class, 'foo')\n        self.assertRaises(ValueError, self.request_class, '/foo/')\n>       self.assertRaises(ValueError, self.request_class, '/foo:bar')\nE       AssertionError: ValueError not raised by Request\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_37/tests/test_http_request.py:56: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}