{
    "scrapy:30": {
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_30/scrapy/cmdline.py": {
            "buggy_functions": [
                {
                    "function_name": "_iter_command_classes",
                    "function_code": "def _iter_command_classes(module_name):\n    # TODO: add `name` attribute to commands and and merge this function with\n    # scrapy.utils.spider.iter_spider_classes\n    for module in walk_modules(module_name):\n        for obj in vars(module).itervalues():\n            if inspect.isclass(obj) and \\\n               issubclass(obj, ScrapyCommand) and \\\n               obj.__module__ == module.__name__:\n                yield obj\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 17,
                    "end_line": 25,
                    "variables": {
                        "module": [
                            24,
                            20,
                            21
                        ],
                        "walk_modules": [
                            20
                        ],
                        "module_name": [
                            20
                        ],
                        "obj": [
                            21,
                            22,
                            23,
                            24,
                            25
                        ],
                        "itervalues": [
                            21
                        ],
                        "vars": [
                            21
                        ],
                        "inspect.isclass": [
                            22
                        ],
                        "inspect": [
                            22
                        ],
                        "issubclass": [
                            23
                        ],
                        "ScrapyCommand": [
                            23
                        ],
                        "obj.__module__": [
                            24
                        ],
                        "module.__name__": [
                            24
                        ]
                    },
                    "filtered_variables": {
                        "module": [
                            24,
                            20,
                            21
                        ],
                        "walk_modules": [
                            20
                        ],
                        "module_name": [
                            20
                        ],
                        "obj": [
                            21,
                            22,
                            23,
                            24,
                            25
                        ],
                        "itervalues": [
                            21
                        ],
                        "inspect.isclass": [
                            22
                        ],
                        "inspect": [
                            22
                        ],
                        "ScrapyCommand": [
                            23
                        ],
                        "obj.__module__": [
                            24
                        ],
                        "module.__name__": [
                            24
                        ]
                    },
                    "diff_line_number": 21,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "walk_modules": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'scrapy.commands'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itervalues": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inspect.isclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ScrapyCommand": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.__module__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "walk_modules": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'scrapy.commands'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inspect.isclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ScrapyCommand": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.__module__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "module": {
                                    "variable_value": "<module 'scrapy.commands.view' from '/Volumes/SSD2T/bgp_envs/repos/scrapy_30/scrapy/commands/view.py'>",
                                    "variable_type": "module",
                                    "variable_shape": null
                                },
                                "walk_modules": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'scrapy.commands'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "obj": {
                                    "variable_value": "<class 'scrapy.commands.view.Command'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inspect.isclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inspect": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ScrapyCommand": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.__module__": {
                                    "variable_value": "'scrapy.commands.view'",
                                    "variable_type": "str",
                                    "variable_shape": "20"
                                },
                                "module.__name__": {
                                    "variable_value": "'scrapy.commands.view'",
                                    "variable_type": "str",
                                    "variable_shape": "20"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _iter_command_classes(module_name):\n    # TODO: add `name` attribute to commands and and merge this function with\n    # scrapy.utils.spider.iter_spider_classes\n    for module in walk_modules(module_name):\n        for obj in vars(module).itervalues():\n            if inspect.isclass(obj) and \\\n               issubclass(obj, ScrapyCommand) and \\\n               obj.__module__ == module.__name__:\n                yield obj",
                "def _get_commands_from_module(module, inproject):\n    d = {}\n    for cmd in _iter_command_classes(module):\n        if inproject or not cmd.requires_project:\n            cmdname = cmd.__module__.split('.')[-1]\n            d[cmdname] = cmd()\n    return d",
                "def _get_commands_from_entry_points(inproject, group='scrapy.commands'):\n    cmds = {}\n    for entry_point in pkg_resources.iter_entry_points(group):\n        obj = entry_point.load()\n        if inspect.isclass(obj):\n            cmds[entry_point.name] = obj()\n        else:\n            raise Exception(\"Invalid entry point %s\" % entry_point.name)\n    return cmds",
                "def _get_commands_dict(settings, inproject):\n    cmds = _get_commands_from_module('scrapy.commands', inproject)\n    cmds.update(_get_commands_from_entry_points(inproject))\n    cmds_module = settings['COMMANDS_MODULE']\n    if cmds_module:\n        cmds.update(_get_commands_from_module(cmds_module, inproject))\n    return cmds",
                "def _pop_command_name(argv):\n    i = 0\n    for arg in argv[1:]:\n        if not arg.startswith('-'):\n            del argv[i]\n            return arg\n        i += 1",
                "def _print_header(settings, inproject):\n    if inproject:\n        print(\"Scrapy %s - project: %s\\n\" % (scrapy.__version__, \\\n            settings['BOT_NAME']))\n    else:\n        print(\"Scrapy %s - no active project\\n\" % scrapy.__version__)",
                "def _print_commands(settings, inproject):\n    _print_header(settings, inproject)\n    print(\"Usage:\")\n    print(\"  scrapy <command> [options] [args]\\n\")\n    print(\"Available commands:\")\n    cmds = _get_commands_dict(settings, inproject)\n    for cmdname, cmdclass in sorted(cmds.items()):\n        print(\"  %-13s %s\" % (cmdname, cmdclass.short_desc()))\n    if not inproject:\n        print()\n        print(\"  [ more ]      More commands available when run from project directory\")\n    print()\n    print('Use \"scrapy <command> -h\" to see more info about a command')",
                "def _print_unknown_command(settings, cmdname, inproject):\n    _print_header(settings, inproject)\n    print(\"Unknown command: %s\\n\" % cmdname)\n    print('Use \"scrapy\" to see available commands')",
                "def _run_print_help(parser, func, *a, **kw):\n    try:\n        func(*a, **kw)\n    except UsageError as e:\n        if str(e):\n            parser.error(str(e))\n        if e.print_help:\n            parser.print_help()\n        sys.exit(2)",
                "def execute(argv=None, settings=None):\n    if argv is None:\n        argv = sys.argv\n\n    # --- backwards compatibility for scrapy.conf.settings singleton ---\n    if settings is None and 'scrapy.conf' in sys.modules:\n        from scrapy import conf\n        if hasattr(conf, 'settings'):\n            settings = conf.settings\n    # ------------------------------------------------------------------\n\n    if settings is None:\n        settings = get_project_settings()\n    check_deprecated_settings(settings)\n\n    # --- backwards compatibility for scrapy.conf.settings singleton ---\n    import warnings\n    from scrapy.exceptions import ScrapyDeprecationWarning\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", ScrapyDeprecationWarning)\n        from scrapy import conf\n        conf.settings = settings\n    # ------------------------------------------------------------------\n\n    inproject = inside_project()\n    cmds = _get_commands_dict(settings, inproject)\n    cmdname = _pop_command_name(argv)\n    parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), \\\n        conflict_handler='resolve')\n    if not cmdname:\n        _print_commands(settings, inproject)\n        sys.exit(0)\n    elif cmdname not in cmds:\n        _print_unknown_command(settings, cmdname, inproject)\n        sys.exit(2)\n\n    cmd = cmds[cmdname]\n    parser.usage = \"scrapy %s %s\" % (cmdname, cmd.syntax())\n    parser.description = cmd.long_desc()\n    settings.setdict(cmd.default_settings, priority='command')\n    cmd.settings = settings\n    cmd.add_options(parser)\n    opts, args = parser.parse_args(args=argv[1:])\n    _run_print_help(parser, cmd.process_options, args, opts)\n\n    cmd.crawler_process = CrawlerProcess(settings)\n    _run_print_help(parser, _run_command, cmd, args, opts)\n    sys.exit(cmd.exitcode)",
                "def _run_command(cmd, args, opts):\n    if opts.profile or opts.lsprof:\n        _run_command_profiled(cmd, args, opts)\n    else:\n        cmd.run(args, opts)",
                "def _run_command_profiled(cmd, args, opts):\n    if opts.profile:\n        sys.stderr.write(\"scrapy: writing cProfile stats to %r\\n\" % opts.profile)\n    if opts.lsprof:\n        sys.stderr.write(\"scrapy: writing lsprof stats to %r\\n\" % opts.lsprof)\n    loc = locals()\n    p = cProfile.Profile()\n    p.runctx('cmd.run(args, opts)', globals(), loc)\n    if opts.profile:\n        p.dump_stats(opts.profile)\n    k = lsprofcalltree.KCacheGrind(p)\n    if opts.lsprof:\n        with open(opts.lsprof, 'w') as f:\n            k.output(f)"
            ],
            "inscope_function_signatures": [
                "_iter_command_classes(module_name)",
                "_get_commands_from_module(module, inproject)",
                "_get_commands_from_entry_points(inproject, group='scrapy.commands')",
                "_get_commands_dict(settings, inproject)",
                "_pop_command_name(argv)",
                "_print_header(settings, inproject)",
                "_print_commands(settings, inproject)",
                "_print_unknown_command(settings, cmdname, inproject)",
                "_run_print_help(parser, func, *a, **kw)",
                "execute(argv=None, settings=None)",
                "_run_command(cmd, args, opts)",
                "_run_command_profiled(cmd, args, opts)"
            ],
            "variables_in_file": {
                "module": [
                    24,
                    29,
                    20,
                    21
                ],
                "walk_modules": [
                    20
                ],
                "module_name": [
                    20
                ],
                "obj": [
                    38,
                    39,
                    40,
                    21,
                    22,
                    23,
                    24,
                    25
                ],
                "itervalues": [
                    21
                ],
                "vars": [
                    21
                ],
                "inspect.isclass": [
                    22,
                    39
                ],
                "inspect": [
                    22,
                    39
                ],
                "issubclass": [
                    23
                ],
                "ScrapyCommand": [
                    23
                ],
                "obj.__module__": [
                    24
                ],
                "module.__name__": [
                    24
                ],
                "d": [
                    32,
                    33,
                    28
                ],
                "cmd": [
                    32,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    140,
                    142,
                    143,
                    144,
                    148,
                    150,
                    29,
                    30,
                    31
                ],
                "_iter_command_classes": [
                    29
                ],
                "inproject": [
                    130,
                    69,
                    73,
                    76,
                    46,
                    47,
                    50,
                    83,
                    30,
                    121,
                    122,
                    62,
                    127
                ],
                "cmd.requires_project": [
                    30
                ],
                "cmdname": [
                    32,
                    129,
                    130,
                    133,
                    134,
                    74,
                    75,
                    84,
                    123,
                    126,
                    31
                ],
                "cmd.__module__.split": [
                    31
                ],
                "cmd.__module__": [
                    31
                ],
                "cmds": [
                    129,
                    36,
                    133,
                    40,
                    73,
                    74,
                    43,
                    46,
                    47,
                    50,
                    51,
                    122
                ],
                "entry_point": [
                    40,
                    42,
                    37,
                    38
                ],
                "pkg_resources.iter_entry_points": [
                    37
                ],
                "pkg_resources": [
                    37
                ],
                "group": [
                    37
                ],
                "entry_point.load": [
                    38
                ],
                "entry_point.name": [
                    40,
                    42
                ],
                "Exception": [
                    42
                ],
                "_get_commands_from_module": [
                    50,
                    46
                ],
                "cmds.update": [
                    50,
                    47
                ],
                "_get_commands_from_entry_points": [
                    47
                ],
                "cmds_module": [
                    48,
                    49,
                    50
                ],
                "settings": [
                    64,
                    130,
                    69,
                    102,
                    136,
                    73,
                    105,
                    137,
                    108,
                    109,
                    110,
                    142,
                    48,
                    83,
                    118,
                    122,
                    127
                ],
                "i": [
                    57,
                    59,
                    54
                ],
                "arg": [
                    56,
                    58,
                    55
                ],
                "argv": [
                    98,
                    99,
                    139,
                    55,
                    57,
                    123
                ],
                "arg.startswith": [
                    56
                ],
                "print": [
                    66,
                    70,
                    71,
                    72,
                    75,
                    77,
                    78,
                    79,
                    80,
                    84,
                    85,
                    63
                ],
                "scrapy.__version__": [
                    66,
                    63
                ],
                "scrapy": [
                    66,
                    63
                ],
                "_print_header": [
                    83,
                    69
                ],
                "_get_commands_dict": [
                    73,
                    122
                ],
                "cmdclass": [
                    74,
                    75
                ],
                "sorted": [
                    74
                ],
                "cmds.items": [
                    74
                ],
                "cmdclass.short_desc": [
                    75
                ],
                "func": [
                    89
                ],
                "a": [
                    89
                ],
                "kw": [
                    89
                ],
                "UsageError": [
                    90
                ],
                "str": [
                    91,
                    92
                ],
                "e": [
                    91,
                    92,
                    93
                ],
                "parser.error": [
                    92
                ],
                "parser": [
                    134,
                    135,
                    138,
                    139,
                    140,
                    92,
                    143,
                    124,
                    94
                ],
                "e.print_help": [
                    93
                ],
                "parser.print_help": [
                    94
                ],
                "sys.exit": [
                    128,
                    131,
                    144,
                    95
                ],
                "sys": [
                    128,
                    99,
                    131,
                    102,
                    144,
                    154,
                    156,
                    95
                ],
                "sys.argv": [
                    99
                ],
                "sys.modules": [
                    102
                ],
                "hasattr": [
                    104
                ],
                "conf": [
                    104,
                    105,
                    118
                ],
                "conf.settings": [
                    105,
                    118
                ],
                "get_project_settings": [
                    109
                ],
                "check_deprecated_settings": [
                    110
                ],
                "warnings.catch_warnings": [
                    115
                ],
                "warnings": [
                    115,
                    116
                ],
                "warnings.simplefilter": [
                    116
                ],
                "ScrapyDeprecationWarning": [
                    116
                ],
                "inside_project": [
                    121
                ],
                "_pop_command_name": [
                    123
                ],
                "optparse.OptionParser": [
                    124
                ],
                "optparse": [
                    124
                ],
                "optparse.TitledHelpFormatter": [
                    124
                ],
                "_print_commands": [
                    127
                ],
                "_print_unknown_command": [
                    130
                ],
                "parser.usage": [
                    134
                ],
                "cmd.syntax": [
                    134
                ],
                "parser.description": [
                    135
                ],
                "cmd.long_desc": [
                    135
                ],
                "settings.setdict": [
                    136
                ],
                "cmd.default_settings": [
                    136
                ],
                "cmd.settings": [
                    137
                ],
                "cmd.add_options": [
                    138
                ],
                "opts": [
                    160,
                    161,
                    163,
                    164,
                    139,
                    140,
                    143,
                    147,
                    148,
                    150,
                    153,
                    154,
                    155,
                    156
                ],
                "args": [
                    139,
                    140,
                    143,
                    148,
                    150
                ],
                "parser.parse_args": [
                    139
                ],
                "_run_print_help": [
                    140,
                    143
                ],
                "cmd.process_options": [
                    140
                ],
                "cmd.crawler_process": [
                    142
                ],
                "CrawlerProcess": [
                    142
                ],
                "_run_command": [
                    143
                ],
                "cmd.exitcode": [
                    144
                ],
                "opts.profile": [
                    160,
                    161,
                    147,
                    153,
                    154
                ],
                "opts.lsprof": [
                    163,
                    164,
                    147,
                    155,
                    156
                ],
                "_run_command_profiled": [
                    148
                ],
                "cmd.run": [
                    150
                ],
                "sys.stderr.write": [
                    154,
                    156
                ],
                "sys.stderr": [
                    154,
                    156
                ],
                "loc": [
                    157,
                    159
                ],
                "locals": [
                    157
                ],
                "p": [
                    161,
                    162,
                    158,
                    159
                ],
                "cProfile.Profile": [
                    158
                ],
                "cProfile": [
                    158
                ],
                "p.runctx": [
                    159
                ],
                "globals": [
                    159
                ],
                "p.dump_stats": [
                    161
                ],
                "k": [
                    162,
                    165
                ],
                "lsprofcalltree.KCacheGrind": [
                    162
                ],
                "lsprofcalltree": [
                    162
                ],
                "open": [
                    164
                ],
                "f": [
                    164,
                    165
                ],
                "k.output": [
                    165
                ],
                "__name__": [
                    167
                ],
                "execute": [
                    168
                ]
            },
            "filtered_variables_in_file": {
                "module": [
                    24,
                    29,
                    20,
                    21
                ],
                "walk_modules": [
                    20
                ],
                "module_name": [
                    20
                ],
                "obj": [
                    38,
                    39,
                    40,
                    21,
                    22,
                    23,
                    24,
                    25
                ],
                "itervalues": [
                    21
                ],
                "inspect.isclass": [
                    22,
                    39
                ],
                "inspect": [
                    22,
                    39
                ],
                "ScrapyCommand": [
                    23
                ],
                "obj.__module__": [
                    24
                ],
                "module.__name__": [
                    24
                ],
                "d": [
                    32,
                    33,
                    28
                ],
                "cmd": [
                    32,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    140,
                    142,
                    143,
                    144,
                    148,
                    150,
                    29,
                    30,
                    31
                ],
                "_iter_command_classes": [
                    29
                ],
                "inproject": [
                    130,
                    69,
                    73,
                    76,
                    46,
                    47,
                    50,
                    83,
                    30,
                    121,
                    122,
                    62,
                    127
                ],
                "cmd.requires_project": [
                    30
                ],
                "cmdname": [
                    32,
                    129,
                    130,
                    133,
                    134,
                    74,
                    75,
                    84,
                    123,
                    126,
                    31
                ],
                "cmd.__module__.split": [
                    31
                ],
                "cmd.__module__": [
                    31
                ],
                "cmds": [
                    129,
                    36,
                    133,
                    40,
                    73,
                    74,
                    43,
                    46,
                    47,
                    50,
                    51,
                    122
                ],
                "entry_point": [
                    40,
                    42,
                    37,
                    38
                ],
                "pkg_resources.iter_entry_points": [
                    37
                ],
                "pkg_resources": [
                    37
                ],
                "group": [
                    37
                ],
                "entry_point.load": [
                    38
                ],
                "entry_point.name": [
                    40,
                    42
                ],
                "_get_commands_from_module": [
                    50,
                    46
                ],
                "cmds.update": [
                    50,
                    47
                ],
                "_get_commands_from_entry_points": [
                    47
                ],
                "cmds_module": [
                    48,
                    49,
                    50
                ],
                "settings": [
                    64,
                    130,
                    69,
                    102,
                    136,
                    73,
                    105,
                    137,
                    108,
                    109,
                    110,
                    142,
                    48,
                    83,
                    118,
                    122,
                    127
                ],
                "i": [
                    57,
                    59,
                    54
                ],
                "arg": [
                    56,
                    58,
                    55
                ],
                "argv": [
                    98,
                    99,
                    139,
                    55,
                    57,
                    123
                ],
                "arg.startswith": [
                    56
                ],
                "scrapy.__version__": [
                    66,
                    63
                ],
                "scrapy": [
                    66,
                    63
                ],
                "_print_header": [
                    83,
                    69
                ],
                "_get_commands_dict": [
                    73,
                    122
                ],
                "cmdclass": [
                    74,
                    75
                ],
                "cmds.items": [
                    74
                ],
                "cmdclass.short_desc": [
                    75
                ],
                "func": [
                    89
                ],
                "a": [
                    89
                ],
                "kw": [
                    89
                ],
                "UsageError": [
                    90
                ],
                "e": [
                    91,
                    92,
                    93
                ],
                "parser.error": [
                    92
                ],
                "parser": [
                    134,
                    135,
                    138,
                    139,
                    140,
                    92,
                    143,
                    124,
                    94
                ],
                "e.print_help": [
                    93
                ],
                "parser.print_help": [
                    94
                ],
                "sys.exit": [
                    128,
                    131,
                    144,
                    95
                ],
                "sys": [
                    128,
                    99,
                    131,
                    102,
                    144,
                    154,
                    156,
                    95
                ],
                "sys.argv": [
                    99
                ],
                "sys.modules": [
                    102
                ],
                "conf": [
                    104,
                    105,
                    118
                ],
                "conf.settings": [
                    105,
                    118
                ],
                "get_project_settings": [
                    109
                ],
                "check_deprecated_settings": [
                    110
                ],
                "warnings.catch_warnings": [
                    115
                ],
                "warnings": [
                    115,
                    116
                ],
                "warnings.simplefilter": [
                    116
                ],
                "ScrapyDeprecationWarning": [
                    116
                ],
                "inside_project": [
                    121
                ],
                "_pop_command_name": [
                    123
                ],
                "optparse.OptionParser": [
                    124
                ],
                "optparse": [
                    124
                ],
                "optparse.TitledHelpFormatter": [
                    124
                ],
                "_print_commands": [
                    127
                ],
                "_print_unknown_command": [
                    130
                ],
                "parser.usage": [
                    134
                ],
                "cmd.syntax": [
                    134
                ],
                "parser.description": [
                    135
                ],
                "cmd.long_desc": [
                    135
                ],
                "settings.setdict": [
                    136
                ],
                "cmd.default_settings": [
                    136
                ],
                "cmd.settings": [
                    137
                ],
                "cmd.add_options": [
                    138
                ],
                "opts": [
                    160,
                    161,
                    163,
                    164,
                    139,
                    140,
                    143,
                    147,
                    148,
                    150,
                    153,
                    154,
                    155,
                    156
                ],
                "args": [
                    139,
                    140,
                    143,
                    148,
                    150
                ],
                "parser.parse_args": [
                    139
                ],
                "_run_print_help": [
                    140,
                    143
                ],
                "cmd.process_options": [
                    140
                ],
                "cmd.crawler_process": [
                    142
                ],
                "CrawlerProcess": [
                    142
                ],
                "_run_command": [
                    143
                ],
                "cmd.exitcode": [
                    144
                ],
                "opts.profile": [
                    160,
                    161,
                    147,
                    153,
                    154
                ],
                "opts.lsprof": [
                    163,
                    164,
                    147,
                    155,
                    156
                ],
                "_run_command_profiled": [
                    148
                ],
                "cmd.run": [
                    150
                ],
                "sys.stderr.write": [
                    154,
                    156
                ],
                "sys.stderr": [
                    154,
                    156
                ],
                "loc": [
                    157,
                    159
                ],
                "p": [
                    161,
                    162,
                    158,
                    159
                ],
                "cProfile.Profile": [
                    158
                ],
                "cProfile": [
                    158
                ],
                "p.runctx": [
                    159
                ],
                "p.dump_stats": [
                    161
                ],
                "k": [
                    162,
                    165
                ],
                "lsprofcalltree.KCacheGrind": [
                    162
                ],
                "lsprofcalltree": [
                    162
                ],
                "f": [
                    164,
                    165
                ],
                "k.output": [
                    165
                ],
                "execute": [
                    168
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_30/scrapy/utils/testproc.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self):\n    self.deferred = defer.Deferred()\n    self.out = ''\n    self.err = ''\n    self.exitcode = None\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 36,
                    "end_line": 40,
                    "variables": {
                        "self.deferred": [
                            37
                        ],
                        "self": [
                            40,
                            37,
                            38,
                            39
                        ],
                        "defer.Deferred": [
                            37
                        ],
                        "defer": [
                            37
                        ],
                        "self.out": [
                            38
                        ],
                        "self.err": [
                            39
                        ],
                        "self.exitcode": [
                            40
                        ]
                    },
                    "filtered_variables": {
                        "self.deferred": [
                            37
                        ],
                        "self": [
                            40,
                            37,
                            38,
                            39
                        ],
                        "defer.Deferred": [
                            37
                        ],
                        "defer": [
                            37
                        ],
                        "self.out": [
                            38
                        ],
                        "self.err": [
                            39
                        ],
                        "self.exitcode": [
                            40
                        ]
                    },
                    "diff_line_number": 38,
                    "class_data": {
                        "signature": "class TestProcessProtocol(protocol.ProcessProtocol)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self):\n    self.deferred = defer.Deferred()\n    self.out = ''\n    self.err = ''\n    self.exitcode = None",
                            "def outReceived(self, data):\n    self.out += data",
                            "def errReceived(self, data):\n    self.err += data",
                            "def processEnded(self, status):\n    self.exitcode = status.value.exitCode\n    self.deferred.callback(self)"
                        ],
                        "constructor_variables": [
                            "out",
                            "err",
                            "exitcode",
                            "deferred"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self)",
                            "outReceived(self, data)",
                            "errReceived(self, data)",
                            "processEnded(self, status)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.deferred": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.utils.testproc.TestProcessProtocol object at 0x10d6414c0>",
                                    "variable_type": "TestProcessProtocol",
                                    "variable_shape": null
                                },
                                "defer.Deferred": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.out": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.err": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.exitcode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.deferred": {
                                    "variable_value": "<Deferred at 0x10d66c0a0>",
                                    "variable_type": "Deferred",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.utils.testproc.TestProcessProtocol object at 0x10d6414c0>",
                                    "variable_type": "TestProcessProtocol",
                                    "variable_shape": null
                                },
                                "defer.Deferred": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.out": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.err": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.exitcode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.deferred": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.utils.testproc.TestProcessProtocol object at 0x10682dbe0>",
                                    "variable_type": "TestProcessProtocol",
                                    "variable_shape": null
                                },
                                "defer.Deferred": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.out": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.err": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.exitcode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.deferred": {
                                    "variable_value": "<Deferred at 0x10684da90>",
                                    "variable_type": "Deferred",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<scrapy.utils.testproc.TestProcessProtocol object at 0x10682dbe0>",
                                    "variable_type": "TestProcessProtocol",
                                    "variable_shape": null
                                },
                                "defer.Deferred": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.out": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                },
                                "self.err": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                },
                                "self.exitcode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def execute(self, args, check_code=True, settings=None):\n    env = os.environ.copy()\n    if settings is not None:\n        env['SCRAPY_SETTINGS_MODULE'] = settings\n    cmd = self.prefix + [self.command] + list(args)\n    pp = TestProcessProtocol()\n    pp.deferred.addBoth(self._process_finished, cmd, check_code)\n    reactor.spawnProcess(pp, cmd[0], cmd, env=env, path=self.cwd)\n    return pp.deferred",
                "def _process_finished(self, pp, cmd, check_code):\n    if pp.exitcode and check_code:\n        msg = \"process %s exit with code %d\" % (cmd, pp.exitcode)\n        msg += \"\\n>>> stdout <<<\\n%s\" % pp.out\n        msg += \"\\n\"\n        msg += \"\\n>>> stderr <<<\\n%s\" % pp.err\n        raise RuntimeError(msg)\n    return pp.exitcode, pp.out, pp.err",
                "def __init__(self):\n    self.deferred = defer.Deferred()\n    self.out = ''\n    self.err = ''\n    self.exitcode = None",
                "def outReceived(self, data):\n    self.out += data",
                "def errReceived(self, data):\n    self.err += data",
                "def processEnded(self, status):\n    self.exitcode = status.value.exitCode\n    self.deferred.callback(self)"
            ],
            "inscope_function_signatures": [
                "execute(self, args, check_code=True, settings=None)",
                "_process_finished(self, pp, cmd, check_code)",
                "__init__(self)",
                "outReceived(self, data)",
                "errReceived(self, data)",
                "processEnded(self, status)"
            ],
            "variables_in_file": {
                "object": [
                    8
                ],
                "command": [
                    10
                ],
                "prefix": [
                    11
                ],
                "sys.executable": [
                    11
                ],
                "sys": [
                    11
                ],
                "cwd": [
                    12
                ],
                "os.getcwd": [
                    12
                ],
                "os": [
                    12,
                    15
                ],
                "env": [
                    17,
                    21,
                    15
                ],
                "os.environ.copy": [
                    15
                ],
                "os.environ": [
                    15
                ],
                "settings": [
                    16,
                    17
                ],
                "cmd": [
                    18,
                    26,
                    20,
                    21
                ],
                "self.prefix": [
                    18
                ],
                "self": [
                    37,
                    38,
                    39,
                    40,
                    43,
                    46,
                    49,
                    18,
                    50,
                    20,
                    21
                ],
                "self.command": [
                    18
                ],
                "list": [
                    18
                ],
                "args": [
                    18
                ],
                "pp": [
                    19,
                    20,
                    21,
                    22,
                    25,
                    26,
                    27,
                    29,
                    31
                ],
                "TestProcessProtocol": [
                    19
                ],
                "pp.deferred.addBoth": [
                    20
                ],
                "pp.deferred": [
                    20,
                    22
                ],
                "self._process_finished": [
                    20
                ],
                "check_code": [
                    25,
                    20
                ],
                "reactor.spawnProcess": [
                    21
                ],
                "reactor": [
                    21
                ],
                "self.cwd": [
                    21
                ],
                "pp.exitcode": [
                    25,
                    26,
                    31
                ],
                "msg": [
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                "pp.out": [
                    27,
                    31
                ],
                "pp.err": [
                    29,
                    31
                ],
                "RuntimeError": [
                    30
                ],
                "protocol.ProcessProtocol": [
                    34
                ],
                "protocol": [
                    34
                ],
                "self.deferred": [
                    50,
                    37
                ],
                "defer.Deferred": [
                    37
                ],
                "defer": [
                    37
                ],
                "self.out": [
                    43,
                    38
                ],
                "self.err": [
                    46,
                    39
                ],
                "self.exitcode": [
                    40,
                    49
                ],
                "data": [
                    43,
                    46
                ],
                "status.value.exitCode": [
                    49
                ],
                "status.value": [
                    49
                ],
                "status": [
                    49
                ],
                "self.deferred.callback": [
                    50
                ]
            },
            "filtered_variables_in_file": {
                "command": [
                    10
                ],
                "prefix": [
                    11
                ],
                "sys.executable": [
                    11
                ],
                "sys": [
                    11
                ],
                "cwd": [
                    12
                ],
                "os.getcwd": [
                    12
                ],
                "os": [
                    12,
                    15
                ],
                "env": [
                    17,
                    21,
                    15
                ],
                "os.environ.copy": [
                    15
                ],
                "os.environ": [
                    15
                ],
                "settings": [
                    16,
                    17
                ],
                "cmd": [
                    18,
                    26,
                    20,
                    21
                ],
                "self.prefix": [
                    18
                ],
                "self": [
                    37,
                    38,
                    39,
                    40,
                    43,
                    46,
                    49,
                    18,
                    50,
                    20,
                    21
                ],
                "self.command": [
                    18
                ],
                "args": [
                    18
                ],
                "pp": [
                    19,
                    20,
                    21,
                    22,
                    25,
                    26,
                    27,
                    29,
                    31
                ],
                "TestProcessProtocol": [
                    19
                ],
                "pp.deferred.addBoth": [
                    20
                ],
                "pp.deferred": [
                    20,
                    22
                ],
                "self._process_finished": [
                    20
                ],
                "check_code": [
                    25,
                    20
                ],
                "reactor.spawnProcess": [
                    21
                ],
                "reactor": [
                    21
                ],
                "self.cwd": [
                    21
                ],
                "pp.exitcode": [
                    25,
                    26,
                    31
                ],
                "msg": [
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                "pp.out": [
                    27,
                    31
                ],
                "pp.err": [
                    29,
                    31
                ],
                "protocol.ProcessProtocol": [
                    34
                ],
                "protocol": [
                    34
                ],
                "self.deferred": [
                    50,
                    37
                ],
                "defer.Deferred": [
                    37
                ],
                "defer": [
                    37
                ],
                "self.out": [
                    43,
                    38
                ],
                "self.err": [
                    46,
                    39
                ],
                "self.exitcode": [
                    40,
                    49
                ],
                "data": [
                    43,
                    46
                ],
                "status.value.exitCode": [
                    49
                ],
                "status.value": [
                    49
                ],
                "status": [
                    49
                ],
                "self.deferred.callback": [
                    50
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_30/tests/test_cmdline/__init__.py": {
            "buggy_functions": [
                {
                    "function_name": "_execute",
                    "function_code": "def _execute(self, *new_args, **kwargs):\n    encoding = getattr(sys.stdout, 'encoding') or 'utf-8'\n    args = (sys.executable, '-m', 'scrapy.cmdline') + new_args\n    proc = Popen(args, stdout=PIPE, stderr=PIPE, env=self.env, **kwargs)\n    comm = proc.communicate()[0].strip()\n    return comm.decode(encoding)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 13,
                    "end_line": 18,
                    "variables": {
                        "encoding": [
                            18,
                            14
                        ],
                        "getattr": [
                            14
                        ],
                        "sys.stdout": [
                            14
                        ],
                        "sys": [
                            14,
                            15
                        ],
                        "args": [
                            16,
                            15
                        ],
                        "sys.executable": [
                            15
                        ],
                        "new_args": [
                            15
                        ],
                        "proc": [
                            16,
                            17
                        ],
                        "Popen": [
                            16
                        ],
                        "PIPE": [
                            16
                        ],
                        "self.env": [
                            16
                        ],
                        "self": [
                            16
                        ],
                        "kwargs": [
                            16
                        ],
                        "comm": [
                            17,
                            18
                        ],
                        "strip": [
                            17
                        ],
                        "proc.communicate": [
                            17
                        ],
                        "comm.decode": [
                            18
                        ]
                    },
                    "filtered_variables": {
                        "encoding": [
                            18,
                            14
                        ],
                        "sys.stdout": [
                            14
                        ],
                        "sys": [
                            14,
                            15
                        ],
                        "args": [
                            16,
                            15
                        ],
                        "sys.executable": [
                            15
                        ],
                        "new_args": [
                            15
                        ],
                        "proc": [
                            16,
                            17
                        ],
                        "Popen": [
                            16
                        ],
                        "PIPE": [
                            16
                        ],
                        "self.env": [
                            16
                        ],
                        "self": [
                            16
                        ],
                        "kwargs": [
                            16
                        ],
                        "comm": [
                            17,
                            18
                        ],
                        "strip": [
                            17
                        ],
                        "proc.communicate": [
                            17
                        ],
                        "comm.decode": [
                            18
                        ]
                    },
                    "diff_line_number": 13,
                    "class_data": {
                        "signature": "class CmdlineTest(unittest.TestCase)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def setUp(self):\n    self.env = get_testenv()\n    self.env['SCRAPY_SETTINGS_MODULE'] = 'tests.test_cmdline.settings'",
                            "def _execute(self, *new_args, **kwargs):\n    encoding = getattr(sys.stdout, 'encoding') or 'utf-8'\n    args = (sys.executable, '-m', 'scrapy.cmdline') + new_args\n    proc = Popen(args, stdout=PIPE, stderr=PIPE, env=self.env, **kwargs)\n    comm = proc.communicate()[0].strip()\n    return comm.decode(encoding)",
                            "def test_default_settings(self):\n    self.assertEqual(self._execute('settings', '--get', 'TEST1'), 'default')",
                            "def test_override_settings_using_set_arg(self):\n    self.assertEqual(self._execute('settings', '--get', 'TEST1', '-s', 'TEST1=override'), 'override')",
                            "def test_override_settings_using_envvar(self):\n    self.env['SCRAPY_TEST1'] = 'override'\n    self.assertEqual(self._execute('settings', '--get', 'TEST1'), 'override')"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "setUp(self)",
                            "_execute(self, *new_args, **kwargs)",
                            "test_default_settings(self)",
                            "test_override_settings_using_set_arg(self)",
                            "test_override_settings_using_envvar(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def setUp(self):\n    self.env = get_testenv()\n    self.env['SCRAPY_SETTINGS_MODULE'] = 'tests.test_cmdline.settings'",
                "def _execute(self, *new_args, **kwargs):\n    encoding = getattr(sys.stdout, 'encoding') or 'utf-8'\n    args = (sys.executable, '-m', 'scrapy.cmdline') + new_args\n    proc = Popen(args, stdout=PIPE, stderr=PIPE, env=self.env, **kwargs)\n    comm = proc.communicate()[0].strip()\n    return comm.decode(encoding)",
                "def test_default_settings(self):\n    self.assertEqual(self._execute('settings', '--get', 'TEST1'), \\\n                     'default')",
                "def test_override_settings_using_set_arg(self):\n    self.assertEqual(self._execute('settings', '--get', 'TEST1', '-s', 'TEST1=override'), \\\n                     'override')",
                "def test_override_settings_using_envvar(self):\n    self.env['SCRAPY_TEST1'] = 'override'\n    self.assertEqual(self._execute('settings', '--get', 'TEST1'), \\\n                     'override')"
            ],
            "inscope_function_signatures": [
                "setUp(self)",
                "_execute(self, *new_args, **kwargs)",
                "test_default_settings(self)",
                "test_override_settings_using_set_arg(self)",
                "test_override_settings_using_envvar(self)"
            ],
            "variables_in_file": {
                "unittest.TestCase": [
                    7
                ],
                "unittest": [
                    7
                ],
                "self.env": [
                    16,
                    10,
                    11,
                    29
                ],
                "self": [
                    10,
                    11,
                    16,
                    21,
                    25,
                    29,
                    30
                ],
                "get_testenv": [
                    10
                ],
                "encoding": [
                    18,
                    14
                ],
                "getattr": [
                    14
                ],
                "sys.stdout": [
                    14
                ],
                "sys": [
                    14,
                    15
                ],
                "args": [
                    16,
                    15
                ],
                "sys.executable": [
                    15
                ],
                "new_args": [
                    15
                ],
                "proc": [
                    16,
                    17
                ],
                "Popen": [
                    16
                ],
                "PIPE": [
                    16
                ],
                "kwargs": [
                    16
                ],
                "comm": [
                    17,
                    18
                ],
                "strip": [
                    17
                ],
                "proc.communicate": [
                    17
                ],
                "comm.decode": [
                    18
                ],
                "self.assertEqual": [
                    25,
                    21,
                    30
                ],
                "self._execute": [
                    25,
                    21,
                    30
                ]
            },
            "filtered_variables_in_file": {
                "unittest.TestCase": [
                    7
                ],
                "unittest": [
                    7
                ],
                "self.env": [
                    16,
                    10,
                    11,
                    29
                ],
                "self": [
                    10,
                    11,
                    16,
                    21,
                    25,
                    29,
                    30
                ],
                "get_testenv": [
                    10
                ],
                "encoding": [
                    18,
                    14
                ],
                "sys.stdout": [
                    14
                ],
                "sys": [
                    14,
                    15
                ],
                "args": [
                    16,
                    15
                ],
                "sys.executable": [
                    15
                ],
                "new_args": [
                    15
                ],
                "proc": [
                    16,
                    17
                ],
                "Popen": [
                    16
                ],
                "PIPE": [
                    16
                ],
                "kwargs": [
                    16
                ],
                "comm": [
                    17,
                    18
                ],
                "strip": [
                    17
                ],
                "proc.communicate": [
                    17
                ],
                "comm.decode": [
                    18
                ],
                "self.assertEqual": [
                    25,
                    21,
                    30
                ],
                "self._execute": [
                    25,
                    21,
                    30
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/scrapy_30/tests/test_command_version.py",
                "test_function": "test_output",
                "test_function_code": "    @defer.inlineCallbacks\n    def test_output(self):\n        encoding = getattr(sys.stdout, 'encoding') or 'utf-8'\n        _, out, _ = yield self.execute([])\n        self.assertEqual(out.strip().decode(encoding), \"Scrapy %s\" % scrapy.__version__)",
                "test_error": "RuntimeError: process ['/Volumes/SSD2T/bgp_envs/envs/scrapy_30/bin/python', '-m', 'scrapy.cmdline', 'version'] exit with code 1 >>> stdout <<<   >>> stderr <<<",
                "full_test_error": "self = <tests.test_command_version.VersionTest testMethod=test_output>\n\n    @defer.inlineCallbacks\n    def test_output(self):\n        encoding = getattr(sys.stdout, 'encoding') or 'utf-8'\n>       _, out, _ = yield self.execute([])\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_30/tests/test_command_version.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Volumes/SSD2T/bgp_envs/envs/scrapy_30/lib/python3.8/site-packages/twisted/internet/defer.py:654: in _runCallbacks\n    current.result = callback(current.result, *args, **kw)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_command_version.VersionTest testMethod=test_output>\npp = <scrapy.utils.testproc.TestProcessProtocol object at 0x10aec8a30>\ncmd = ['/Volumes/SSD2T/bgp_envs/envs/scrapy_30/bin/python', '-m', 'scrapy.cmdline', 'version']\ncheck_code = True\n\n    def _process_finished(self, pp, cmd, check_code):\n        if pp.exitcode and check_code:\n            msg = \"process %s exit with code %d\" % (cmd, pp.exitcode)\n            msg += \"\\n>>> stdout <<<\\n%s\" % pp.out\n            msg += \"\\n\"\n            msg += \"\\n>>> stderr <<<\\n%s\" % pp.err\n>           raise RuntimeError(msg)\nE           RuntimeError: process ['/Volumes/SSD2T/bgp_envs/envs/scrapy_30/bin/python', '-m', 'scrapy.cmdline', 'version'] exit with code 1\nE           >>> stdout <<<\nE           \nE           \nE           >>> stderr <<<\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_30/scrapy/utils/testproc.py:30: RuntimeError",
                "traceback": "/Volumes/SSD2T/bgp_envs/envs/scrapy_30/lib/python3.8/site-packages/twisted/internet/defer.py:654: in _runCallbacks\n    current.result = callback(current.result, *args, **kw)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_command_version.VersionTest testMethod=test_output>\npp = <scrapy.utils.testproc.TestProcessProtocol object at 0x10aec8a30>\ncmd = ['/Volumes/SSD2T/bgp_envs/envs/scrapy_30/bin/python', '-m', 'scrapy.cmdline', 'version']\ncheck_code = True\n\n    def _process_finished(self, pp, cmd, check_code):\n        if pp.exitcode and check_code:\n            msg = \"process %s exit with code %d\" % (cmd, pp.exitcode)\n            msg += \"\\n>>> stdout <<<\\n%s\" % pp.out\n            msg += \"\\n\"\n            msg += \"\\n>>> stderr <<<\\n%s\" % pp.err\n>           raise RuntimeError(msg)\nE           RuntimeError: process ['/Volumes/SSD2T/bgp_envs/envs/scrapy_30/bin/python', '-m', 'scrapy.cmdline', 'version'] exit with code 1\nE           >>> stdout <<<\nE           \nE           \nE           >>> stderr <<<\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_30/scrapy/utils/testproc.py:30: RuntimeError",
                "test_function_decorators": [
                    "defer.inlineCallbacks"
                ]
            }
        ]
    }
}