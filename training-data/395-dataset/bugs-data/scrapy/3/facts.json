{
    "1.1.1": "def process_response(self, request, response, spider):\n    if (request.meta.get('dont_redirect', False) or\n            response.status in getattr(spider, 'handle_httpstatus_list', []) or\n            response.status in request.meta.get('handle_httpstatus_list', []) or\n            request.meta.get('handle_httpstatus_all', False)):\n        return response\n\n    allowed_status = (301, 302, 303, 307, 308)\n    if 'Location' not in response.headers or response.status not in allowed_status:\n        return response\n\n    location = safe_url_string(response.headers['location'])\n\n    redirected_url = urljoin(request.url, location)\n\n    if response.status in (301, 307, 308) or request.method == 'HEAD':\n        redirected = request.replace(url=redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n\n    redirected = self._redirect_request_using_get(request, redirected_url)\n    return self._redirect(redirected, request, spider, response.status)\n",
    "1.1.2": null,
    "1.2.1": "class RedirectMiddleware(BaseRedirectMiddleware)",
    "1.2.2": "Handle redirection of requests based on response status\nand meta-refresh html tag.",
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_3/scrapy/downloadermiddlewares/redirect.py",
    "1.3.2": [
        "_redirect(self, redirected, request, spider, reason)",
        "_redirect_request_using_get(self, request, redirect_url)"
    ],
    "1.4.1": [
        "    def test_redirect_302_relative(self):\n        url = 'http://www.example.com/302'\n        url2 = '///i8n.example2.com/302'\n        url3 = 'http://i8n.example2.com/302'\n        req = Request(url, method='HEAD')\n        rsp = Response(url, headers={'Location': url2}, status=302)\n\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, url3)\n        self.assertEqual(req2.method, 'HEAD')\n\n        # response without Location header but with status code is 3XX should be ignored\n        del rsp.headers['Location']\n        assert self.mw.process_response(req, rsp, self.spider) is rsp"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_3/tests/test_downloadermiddleware_redirect.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: 'http://www.example.com/i8n.example2.com/302' != 'http://i8n.example2.com/302'\nE       - http://www.example.com/i8n.example2.com/302\nE       ?       ----------------\nE       + http://i8n.example2.com/302"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest testMethod=test_redirect_302_relative>\n\n    def test_redirect_302_relative(self):\n        url = 'http://www.example.com/302'\n        url2 = '///i8n.example2.com/302'\n        url3 = 'http://i8n.example2.com/302'\n        req = Request(url, method='HEAD')\n        rsp = Response(url, headers={'Location': url2}, status=302)\n    \n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n>       self.assertEqual(req2.url, url3)",
            "\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_3/tests/test_downloadermiddleware_redirect.py:118: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "request.meta": "{}",
                "request": "<HEAD http://www.example.com/302>",
                "response.status": "302",
                "response": "<302 http://www.example.com/302>",
                "response.headers": "{b'Location': [b'///i8n.example2.com/302']}",
                "request.url": "'http://www.example.com/302'",
                "request.method": "'HEAD'",
                "request.replace": "<bound method Request.replace of <HEAD http://www.example.com/302>>",
                "self": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x10dc367c0>"
            },
            {
                "allowed_status": "(301, 302, 303, 307, 308)",
                "location": "'/i8n.example2.com/302'",
                "redirected_url": "'http://www.example.com/i8n.example2.com/302'",
                "redirected": "<HEAD http://www.example.com/i8n.example2.com/302>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "request.meta": "dict",
                "request": "Request",
                "response.status": "int",
                "response": "Response",
                "response.headers": "Headers",
                "request.url": "str",
                "request.method": "str",
                "request.replace": "method",
                "self": "RedirectMiddleware"
            },
            {
                "allowed_status": "tuple",
                "location": "str",
                "redirected_url": "str",
                "redirected": "Request"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "request.meta": "{}",
                "request": "<HEAD http://www.example.com/302>",
                "response.status": "302",
                "response": "<302 http://www.example.com/302>",
                "response.headers": "{b'Location': [b'///i8n.example2.com/302']}",
                "request.url": "'http://www.example.com/302'",
                "request.method": "'HEAD'",
                "request.replace": "<bound method Request.replace of <HEAD http://www.example.com/302>>",
                "self": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x10f073ca0>"
            },
            {
                "allowed_status": "(301, 302, 303, 307, 308)",
                "location": "'http://i8n.example2.com/302'",
                "request_scheme": "'http'",
                "redirected_url": "'http://i8n.example2.com/302'",
                "redirected": "<HEAD http://i8n.example2.com/302>"
            }
        ],
        [
            {
                "request.meta": "{'redirect_ttl': 20}",
                "request": "<HEAD http://www.example.com/302>",
                "response.status": "302",
                "response": "<302 http://www.example.com/302>",
                "response.headers": "{}",
                "request.url": "'http://www.example.com/302'",
                "request.method": "'HEAD'",
                "request.replace": "<bound method Request.replace of <HEAD http://www.example.com/302>>",
                "self": "<scrapy.downloadermiddlewares.redirect.RedirectMiddleware object at 0x10f073ca0>"
            },
            {
                "allowed_status": "(301, 302, 303, 307, 308)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "request.meta": "dict",
                "request": "Request",
                "response.status": "int",
                "response": "Response",
                "response.headers": "Headers",
                "request.url": "str",
                "request.method": "str",
                "request.replace": "method",
                "self": "RedirectMiddleware"
            },
            {
                "allowed_status": "tuple",
                "location": "str",
                "request_scheme": "str",
                "redirected_url": "str",
                "redirected": "Request"
            }
        ],
        [
            {
                "request.meta": "dict",
                "request": "Request",
                "response.status": "int",
                "response": "Response",
                "response.headers": "Headers",
                "request.url": "str",
                "request.method": "str",
                "request.replace": "method",
                "self": "RedirectMiddleware"
            },
            {
                "allowed_status": "tuple"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}