{
    "scrapy:23": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/scrapy/downloadermiddlewares/httpproxy.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_proxy",
                    "function_code": "def _get_proxy(self, url, orig_type):\n    proxy_type, user, password, hostport = _parse_proxy(url)\n    proxy_url = urlunparse((proxy_type or orig_type, hostport, '', '', '', ''))\n\n    if user:\n        user_pass = '%s:%s' % (unquote(user), unquote(password))\n        creds = base64.b64encode(user_pass).strip()\n    else:\n        creds = None\n\n    return creds, proxy_url\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 24,
                    "end_line": 34,
                    "variables": {
                        "proxy_type": [
                            25,
                            26
                        ],
                        "user": [
                            25,
                            28,
                            29
                        ],
                        "password": [
                            25,
                            29
                        ],
                        "hostport": [
                            25,
                            26
                        ],
                        "_parse_proxy": [
                            25
                        ],
                        "url": [
                            25
                        ],
                        "proxy_url": [
                            26,
                            34
                        ],
                        "urlunparse": [
                            26
                        ],
                        "orig_type": [
                            26
                        ],
                        "user_pass": [
                            29,
                            30
                        ],
                        "unquote": [
                            29
                        ],
                        "creds": [
                            32,
                            34,
                            30
                        ],
                        "strip": [
                            30
                        ],
                        "base64.b64encode": [
                            30
                        ],
                        "base64": [
                            30
                        ]
                    },
                    "filtered_variables": {
                        "proxy_type": [
                            25,
                            26
                        ],
                        "user": [
                            25,
                            28,
                            29
                        ],
                        "password": [
                            25,
                            29
                        ],
                        "hostport": [
                            25,
                            26
                        ],
                        "_parse_proxy": [
                            25
                        ],
                        "url": [
                            25
                        ],
                        "proxy_url": [
                            26,
                            34
                        ],
                        "urlunparse": [
                            26
                        ],
                        "orig_type": [
                            26
                        ],
                        "user_pass": [
                            29,
                            30
                        ],
                        "unquote": [
                            29
                        ],
                        "creds": [
                            32,
                            34,
                            30
                        ],
                        "strip": [
                            30
                        ],
                        "base64.b64encode": [
                            30
                        ],
                        "base64": [
                            30
                        ]
                    },
                    "diff_line_number": 29,
                    "class_data": {
                        "signature": "class HttpProxyMiddleware(object)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self):\n    self.proxies = {}\n    for type, url in getproxies().items():\n        self.proxies[type] = self._get_proxy(url, type)\n    if not self.proxies:\n        raise NotConfigured",
                            "def _get_proxy(self, url, orig_type):\n    proxy_type, user, password, hostport = _parse_proxy(url)\n    proxy_url = urlunparse((proxy_type or orig_type, hostport, '', '', '', ''))\n    if user:\n        user_pass = '%s:%s' % (unquote(user), unquote(password))\n        creds = base64.b64encode(user_pass).strip()\n    else:\n        creds = None\n    return (creds, proxy_url)",
                            "def process_request(self, request, spider):\n    if 'proxy' in request.meta:\n        return\n    parsed = urlparse_cached(request)\n    scheme = parsed.scheme\n    if scheme in ('http', 'https') and proxy_bypass(parsed.hostname):\n        return\n    if scheme in self.proxies:\n        self._set_proxy(request, scheme)",
                            "def _set_proxy(self, request, scheme):\n    creds, proxy = self.proxies[scheme]\n    request.meta['proxy'] = proxy\n    if creds:\n        request.headers['Proxy-Authorization'] = 'Basic ' + creds"
                        ],
                        "constructor_variables": [
                            "proxies"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self)",
                            "_get_proxy(self, url, orig_type)",
                            "process_request(self, request, spider)",
                            "_set_proxy(self, request, scheme)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "proxy_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "user": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "password": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hostport": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_proxy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'https://user:@proxy:3128'",
                                    "variable_type": "str",
                                    "variable_shape": "24"
                                },
                                "proxy_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orig_type": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "user_pass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unquote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "creds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base64.b64encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "proxy_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "user": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "password": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hostport": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_parse_proxy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'https://user:@proxy:3128'",
                                    "variable_type": "str",
                                    "variable_shape": "24"
                                },
                                "proxy_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orig_type": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "user_pass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unquote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "creds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base64.b64encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "proxy_type": {
                                    "variable_value": "'https'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "user": {
                                    "variable_value": "'user'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "password": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "hostport": {
                                    "variable_value": "'proxy:3128'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "_parse_proxy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'https://user:@proxy:3128'",
                                    "variable_type": "str",
                                    "variable_shape": "24"
                                },
                                "proxy_url": {
                                    "variable_value": "'https://proxy:3128'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orig_type": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "user_pass": {
                                    "variable_value": "b'user:'",
                                    "variable_type": "bytes",
                                    "variable_shape": "5"
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unquote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "creds": {
                                    "variable_value": "b'dXNlcjo='",
                                    "variable_type": "bytes",
                                    "variable_shape": "8"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base64.b64encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_set_proxy",
                    "function_code": "def _set_proxy(self, request, scheme):\n    creds, proxy = self.proxies[scheme]\n    request.meta['proxy'] = proxy\n    if creds:\n        request.headers['Proxy-Authorization'] = 'Basic ' + creds\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 51,
                    "end_line": 55,
                    "variables": {
                        "creds": [
                            52,
                            54,
                            55
                        ],
                        "proxy": [
                            52,
                            53
                        ],
                        "self.proxies": [
                            52
                        ],
                        "self": [
                            52
                        ],
                        "scheme": [
                            52
                        ],
                        "request.meta": [
                            53
                        ],
                        "request": [
                            53,
                            55
                        ],
                        "request.headers": [
                            55
                        ]
                    },
                    "filtered_variables": {
                        "creds": [
                            52,
                            54,
                            55
                        ],
                        "proxy": [
                            52,
                            53
                        ],
                        "self.proxies": [
                            52
                        ],
                        "self": [
                            52
                        ],
                        "scheme": [
                            52
                        ],
                        "request.meta": [
                            53
                        ],
                        "request": [
                            53,
                            55
                        ],
                        "request.headers": [
                            55
                        ]
                    },
                    "diff_line_number": 55,
                    "class_data": {
                        "signature": "class HttpProxyMiddleware(object)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self):\n    self.proxies = {}\n    for type, url in getproxies().items():\n        self.proxies[type] = self._get_proxy(url, type)\n    if not self.proxies:\n        raise NotConfigured",
                            "def _get_proxy(self, url, orig_type):\n    proxy_type, user, password, hostport = _parse_proxy(url)\n    proxy_url = urlunparse((proxy_type or orig_type, hostport, '', '', '', ''))\n    if user:\n        user_pass = '%s:%s' % (unquote(user), unquote(password))\n        creds = base64.b64encode(user_pass).strip()\n    else:\n        creds = None\n    return (creds, proxy_url)",
                            "def process_request(self, request, spider):\n    if 'proxy' in request.meta:\n        return\n    parsed = urlparse_cached(request)\n    scheme = parsed.scheme\n    if scheme in ('http', 'https') and proxy_bypass(parsed.hostname):\n        return\n    if scheme in self.proxies:\n        self._set_proxy(request, scheme)",
                            "def _set_proxy(self, request, scheme):\n    creds, proxy = self.proxies[scheme]\n    request.meta['proxy'] = proxy\n    if creds:\n        request.headers['Proxy-Authorization'] = 'Basic ' + creds"
                        ],
                        "constructor_variables": [
                            "proxies"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self)",
                            "_get_proxy(self, url, orig_type)",
                            "process_request(self, request, spider)",
                            "_set_proxy(self, request, scheme)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "creds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proxy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.proxies": {
                                    "variable_value": "{'http': (b'dXNlcjo=', 'https://proxy:3128')}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "<scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware object at 0x10a200be0>",
                                    "variable_type": "HttpProxyMiddleware",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "request.meta": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "request": {
                                    "variable_value": "<GET http://scrapytest.org>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "{}",
                                    "variable_type": "Headers",
                                    "variable_shape": "0"
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self):\n    self.proxies = {}\n    for type, url in getproxies().items():\n        self.proxies[type] = self._get_proxy(url, type)\n\n    if not self.proxies:\n        raise NotConfigured",
                "def _get_proxy(self, url, orig_type):\n    proxy_type, user, password, hostport = _parse_proxy(url)\n    proxy_url = urlunparse((proxy_type or orig_type, hostport, '', '', '', ''))\n\n    if user:\n        user_pass = '%s:%s' % (unquote(user), unquote(password))\n        creds = base64.b64encode(user_pass).strip()\n    else:\n        creds = None\n\n    return creds, proxy_url",
                "def process_request(self, request, spider):\n    # ignore if proxy is already seted\n    if 'proxy' in request.meta:\n        return\n\n    parsed = urlparse_cached(request)\n    scheme = parsed.scheme\n\n    # 'no_proxy' is only supported by http schemes\n    if scheme in ('http', 'https') and proxy_bypass(parsed.hostname):\n        return\n\n    if scheme in self.proxies:\n        self._set_proxy(request, scheme)",
                "def _set_proxy(self, request, scheme):\n    creds, proxy = self.proxies[scheme]\n    request.meta['proxy'] = proxy\n    if creds:\n        request.headers['Proxy-Authorization'] = 'Basic ' + creds"
            ],
            "inscope_function_signatures": [
                "__init__(self)",
                "_get_proxy(self, url, orig_type)",
                "process_request(self, request, spider)",
                "_set_proxy(self, request, scheme)"
            ],
            "variables_in_file": {
                "ImportError": [
                    6
                ],
                "object": [
                    14
                ],
                "self.proxies": [
                    48,
                    17,
                    19,
                    52,
                    21
                ],
                "self": [
                    48,
                    17,
                    49,
                    19,
                    52,
                    21
                ],
                "type": [
                    18,
                    19
                ],
                "url": [
                    25,
                    18,
                    19
                ],
                "items": [
                    18
                ],
                "getproxies": [
                    18
                ],
                "self._get_proxy": [
                    19
                ],
                "NotConfigured": [
                    22
                ],
                "proxy_type": [
                    25,
                    26
                ],
                "user": [
                    25,
                    28,
                    29
                ],
                "password": [
                    25,
                    29
                ],
                "hostport": [
                    25,
                    26
                ],
                "_parse_proxy": [
                    25
                ],
                "proxy_url": [
                    26,
                    34
                ],
                "urlunparse": [
                    26
                ],
                "orig_type": [
                    26
                ],
                "user_pass": [
                    29,
                    30
                ],
                "unquote": [
                    29
                ],
                "creds": [
                    32,
                    34,
                    52,
                    54,
                    55,
                    30
                ],
                "strip": [
                    30
                ],
                "base64.b64encode": [
                    30
                ],
                "base64": [
                    30
                ],
                "request.meta": [
                    53,
                    38
                ],
                "request": [
                    38,
                    41,
                    49,
                    53,
                    55
                ],
                "parsed": [
                    41,
                    42,
                    45
                ],
                "urlparse_cached": [
                    41
                ],
                "scheme": [
                    42,
                    45,
                    48,
                    49,
                    52
                ],
                "parsed.scheme": [
                    42
                ],
                "proxy_bypass": [
                    45
                ],
                "parsed.hostname": [
                    45
                ],
                "self._set_proxy": [
                    49
                ],
                "proxy": [
                    52,
                    53
                ],
                "request.headers": [
                    55
                ]
            },
            "filtered_variables_in_file": {
                "self.proxies": [
                    48,
                    17,
                    19,
                    52,
                    21
                ],
                "self": [
                    48,
                    17,
                    49,
                    19,
                    52,
                    21
                ],
                "url": [
                    25,
                    18,
                    19
                ],
                "items": [
                    18
                ],
                "getproxies": [
                    18
                ],
                "self._get_proxy": [
                    19
                ],
                "NotConfigured": [
                    22
                ],
                "proxy_type": [
                    25,
                    26
                ],
                "user": [
                    25,
                    28,
                    29
                ],
                "password": [
                    25,
                    29
                ],
                "hostport": [
                    25,
                    26
                ],
                "_parse_proxy": [
                    25
                ],
                "proxy_url": [
                    26,
                    34
                ],
                "urlunparse": [
                    26
                ],
                "orig_type": [
                    26
                ],
                "user_pass": [
                    29,
                    30
                ],
                "unquote": [
                    29
                ],
                "creds": [
                    32,
                    34,
                    52,
                    54,
                    55,
                    30
                ],
                "strip": [
                    30
                ],
                "base64.b64encode": [
                    30
                ],
                "base64": [
                    30
                ],
                "request.meta": [
                    53,
                    38
                ],
                "request": [
                    38,
                    41,
                    49,
                    53,
                    55
                ],
                "parsed": [
                    41,
                    42,
                    45
                ],
                "urlparse_cached": [
                    41
                ],
                "scheme": [
                    42,
                    45,
                    48,
                    49,
                    52
                ],
                "parsed.scheme": [
                    42
                ],
                "proxy_bypass": [
                    45
                ],
                "parsed.hostname": [
                    45
                ],
                "self._set_proxy": [
                    49
                ],
                "proxy": [
                    52,
                    53
                ],
                "request.headers": [
                    55
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/tests/test_downloadermiddleware_httpproxy.py",
                "test_function": "test_proxy_auth_empty_passwd",
                "test_function_code": "    def test_proxy_auth_empty_passwd(self):\n        os.environ['http_proxy'] = 'https://user:@proxy:3128'\n        mw = HttpProxyMiddleware()\n        req = Request('http://scrapytest.org')\n        assert mw.process_request(req, spider) is None\n        self.assertEquals(req.meta, {'proxy': 'https://proxy:3128'})\n        self.assertEquals(req.headers.get('Proxy-Authorization'), b'Basic dXNlcjo=')",
                "test_error": "TypeError: a bytes-like object is required, not 'str'",
                "full_test_error": "self = <tests.test_downloadermiddleware_httpproxy.TestDefaultHeadersMiddleware testMethod=test_proxy_auth_empty_passwd>\n\n    def test_proxy_auth_empty_passwd(self):\n        os.environ['http_proxy'] = 'https://user:@proxy:3128'\n>       mw = HttpProxyMiddleware()\n\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/tests/test_downloadermiddleware_httpproxy.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/scrapy/downloadermiddlewares/httpproxy.py:19: in __init__\n    self.proxies[type] = self._get_proxy(url, type)\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/scrapy/downloadermiddlewares/httpproxy.py:30: in _get_proxy\n    creds = base64.b64encode(user_pass).strip()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = 'user:', altchars = None\n\n    def b64encode(s, altchars=None):\n        \"\"\"Encode the bytes-like object s using Base64 and return a bytes object.\n    \n        Optional altchars should be a byte string of length 2 which specifies an\n        alternative alphabet for the '+' and '/' characters.  This allows an\n        application to e.g. generate url or filesystem safe Base64 strings.\n        \"\"\"\n>       encoded = binascii.b2a_base64(s, newline=False)\nE       TypeError: a bytes-like object is required, not 'str'\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/base64.py:58: TypeError",
                "traceback": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/scrapy/downloadermiddlewares/httpproxy.py:19: in __init__\n    self.proxies[type] = self._get_proxy(url, type)\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_23/scrapy/downloadermiddlewares/httpproxy.py:30: in _get_proxy\n    creds = base64.b64encode(user_pass).strip()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = 'user:', altchars = None\n\n    def b64encode(s, altchars=None):\n        \"\"\"Encode the bytes-like object s using Base64 and return a bytes object.\n    \n        Optional altchars should be a byte string of length 2 which specifies an\n        alternative alphabet for the '+' and '/' characters.  This allows an\n        application to e.g. generate url or filesystem safe Base64 strings.\n        \"\"\"\n>       encoded = binascii.b2a_base64(s, newline=False)\nE       TypeError: a bytes-like object is required, not 'str'\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/base64.py:58: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}