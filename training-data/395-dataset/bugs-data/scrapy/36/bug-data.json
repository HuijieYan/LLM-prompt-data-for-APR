{
    "scrapy:36": {
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_36/scrapy/utils/misc.py": {
            "buggy_functions": [
                {
                    "function_name": "create_instance",
                    "function_code": "def create_instance(objcls, settings, crawler, *args, **kwargs):\n    \"\"\"Construct a class instance using its ``from_crawler`` or\n    ``from_settings`` constructors, if available.\n\n    At least one of ``settings`` and ``crawler`` needs to be different from\n    ``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.\n    If ``crawler`` is ``None``, only the ``from_settings`` constructor will be\n    tried.\n\n    ``*args`` and ``**kwargs`` are forwarded to the constructors.\n\n    Raises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.\n    \"\"\"\n    if settings is None:\n        if crawler is None:\n            raise ValueError(\"Specify at least one of settings and crawler.\")\n        settings = crawler.settings\n    if crawler and hasattr(objcls, 'from_crawler'):\n        return objcls.from_crawler(crawler, *args, **kwargs)\n    elif hasattr(objcls, 'from_settings'):\n        return objcls.from_settings(settings, *args, **kwargs)\n    else:\n        return objcls(*args, **kwargs)\n",
                    "decorators": [],
                    "docstring": "Construct a class instance using its ``from_crawler`` or\n``from_settings`` constructors, if available.\n\nAt least one of ``settings`` and ``crawler`` needs to be different from\n``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.\nIf ``crawler`` is ``None``, only the ``from_settings`` constructor will be\ntried.\n\n``*args`` and ``**kwargs`` are forwarded to the constructors.\n\nRaises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.",
                    "start_line": 128,
                    "end_line": 150,
                    "variables": {
                        "settings": [
                            144,
                            148,
                            141
                        ],
                        "crawler": [
                            144,
                            145,
                            146,
                            142
                        ],
                        "ValueError": [
                            143
                        ],
                        "crawler.settings": [
                            144
                        ],
                        "hasattr": [
                            145,
                            147
                        ],
                        "objcls": [
                            145,
                            146,
                            147,
                            148,
                            150
                        ],
                        "objcls.from_crawler": [
                            146
                        ],
                        "args": [
                            146,
                            148,
                            150
                        ],
                        "kwargs": [
                            146,
                            148,
                            150
                        ],
                        "objcls.from_settings": [
                            148
                        ]
                    },
                    "filtered_variables": {
                        "settings": [
                            144,
                            148,
                            141
                        ],
                        "crawler": [
                            144,
                            145,
                            146,
                            142
                        ],
                        "crawler.settings": [
                            144
                        ],
                        "objcls": [
                            145,
                            146,
                            147,
                            148,
                            150
                        ],
                        "objcls.from_crawler": [
                            146
                        ],
                        "args": [
                            146,
                            148,
                            150
                        ],
                        "kwargs": [
                            146,
                            148,
                            150
                        ],
                        "objcls.from_settings": [
                            148
                        ]
                    },
                    "diff_line_number": 139,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def arg_to_iter(arg):\n    \"\"\"Convert an argument to an iterable. The argument can be a None, single\n    value, or an iterable.\n\n    Exception: if arg is a dict, [arg] will be returned\n    \"\"\"\n    if arg is None:\n        return []\n    elif not isinstance(arg, _ITERABLE_SINGLE_VALUES) and hasattr(arg, '__iter__'):\n        return arg\n    else:\n        return [arg]",
                "def load_object(path):\n    \"\"\"Load an object given its absolute object path, and return it.\n\n    object can be the import path of a class, function, variable or an\n    instance, e.g. 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'\n    \"\"\"\n\n    try:\n        dot = path.rindex('.')\n    except ValueError:\n        raise ValueError(\"Error loading object '%s': not a full path\" % path)\n\n    module, name = path[:dot], path[dot + 1:]\n    mod = import_module(module)\n\n    try:\n        obj = getattr(mod, name)\n    except AttributeError:\n        raise NameError(\"Module '%s' doesn't define any object named '%s'\" % (module, name))\n\n    return obj",
                "def walk_modules(path):\n    \"\"\"Loads a module and all its submodules from the given module path and\n    returns them. If *any* module throws an exception while importing, that\n    exception is thrown back.\n\n    For example: walk_modules('scrapy.utils')\n    \"\"\"\n\n    mods = []\n    mod = import_module(path)\n    mods.append(mod)\n    if hasattr(mod, '__path__'):\n        for _, subpath, ispkg in iter_modules(mod.__path__):\n            fullpath = path + '.' + subpath\n            if ispkg:\n                mods += walk_modules(fullpath)\n            else:\n                submod = import_module(fullpath)\n                mods.append(submod)\n    return mods",
                "def extract_regex(regex, text, encoding='utf-8'):\n    \"\"\"Extract a list of unicode strings from the given text/encoding using the following policies:\n\n    * if the regex contains a named group called \"extract\" that will be returned\n    * if the regex contains multiple numbered groups, all those will be returned (flattened)\n    * if the regex doesn't contain any group the entire regex matching is returned\n    \"\"\"\n\n    if isinstance(regex, str):\n        regex = re.compile(regex, re.UNICODE)\n\n    try:\n        strings = [regex.search(text).group('extract')]   # named group\n    except Exception:\n        strings = regex.findall(text)    # full regex or numbered groups\n    strings = flatten(strings)\n\n    if isinstance(text, str):\n        return [replace_entities(s, keep=['lt', 'amp']) for s in strings]\n    else:\n        return [replace_entities(to_unicode(s, encoding), keep=['lt', 'amp'])\n                for s in strings]",
                "def md5sum(file):\n    \"\"\"Calculate the md5 checksum of a file-like object without reading its\n    whole content in memory.\n\n    >>> from io import BytesIO\n    >>> md5sum(BytesIO(b'file content to hash'))\n    '784406af91dd5a54fbb9c84c2236595a'\n    \"\"\"\n    m = hashlib.md5()\n    while True:\n        d = file.read(8096)\n        if not d:\n            break\n        m.update(d)\n    return m.hexdigest()",
                "def rel_has_nofollow(rel):\n    \"\"\"Return True if link rel attribute has nofollow type\"\"\"\n    return rel is not None and 'nofollow' in rel.split()",
                "def create_instance(objcls, settings, crawler, *args, **kwargs):\n    \"\"\"Construct a class instance using its ``from_crawler`` or\n    ``from_settings`` constructors, if available.\n\n    At least one of ``settings`` and ``crawler`` needs to be different from\n    ``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.\n    If ``crawler`` is ``None``, only the ``from_settings`` constructor will be\n    tried.\n\n    ``*args`` and ``**kwargs`` are forwarded to the constructors.\n\n    Raises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.\n    \"\"\"\n    if settings is None:\n        if crawler is None:\n            raise ValueError(\"Specify at least one of settings and crawler.\")\n        settings = crawler.settings\n    if crawler and hasattr(objcls, 'from_crawler'):\n        return objcls.from_crawler(crawler, *args, **kwargs)\n    elif hasattr(objcls, 'from_settings'):\n        return objcls.from_settings(settings, *args, **kwargs)\n    else:\n        return objcls(*args, **kwargs)",
                "@contextmanager\ndef set_environ(**kwargs):\n    \"\"\"Temporarily set environment variables inside the context manager and\n    fully restore previous environment afterwards\n    \"\"\"\n\n    original_env = {k: os.environ.get(k) for k in kwargs}\n    os.environ.update(kwargs)\n    try:\n        yield\n    finally:\n        for k, v in original_env.items():\n            if v is None:\n                del os.environ[k]\n            else:\n                os.environ[k] = v",
                "def is_generator_with_return_value(callable):\n    \"\"\"\n    Returns True if a callable is a generator function which includes a\n    'return' statement with a value different than None, False otherwise\n    \"\"\"\n    if callable in _generator_callbacks_cache:\n        return _generator_callbacks_cache[callable]\n\n    def returns_none(return_node):\n        value = return_node.value\n        return value is None or isinstance(value, ast.NameConstant) and value.value is None\n\n    if inspect.isgeneratorfunction(callable):\n        tree = ast.parse(dedent(inspect.getsource(callable)))\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Return) and not returns_none(node):\n                _generator_callbacks_cache[callable] = True\n                return _generator_callbacks_cache[callable]\n\n    _generator_callbacks_cache[callable] = False\n    return _generator_callbacks_cache[callable]",
                "def warn_on_generator_with_return_value(spider, callable):\n    \"\"\"\n    Logs a warning if a callable is a generator function and includes\n    a 'return' statement with a value different than None\n    \"\"\"\n    if is_generator_with_return_value(callable):\n        warnings.warn(\n            'The \"{}.{}\" method is a generator and includes a \"return\" statement with a '\n            'value different than None. This could lead to unexpected behaviour. Please see '\n            'https://docs.python.org/3/reference/simple_stmts.html#the-return-statement '\n            'for details about the semantics of the \"return\" statement within generators'\n            .format(spider.__class__.__name__, callable.__name__), stacklevel=2,\n        )",
                "def returns_none(return_node):\n    value = return_node.value\n    return value is None or isinstance(value, ast.NameConstant) and value.value is None"
            ],
            "inscope_function_signatures": [
                "arg_to_iter(arg)",
                "load_object(path)",
                "walk_modules(path)",
                "extract_regex(regex, text, encoding='utf-8')",
                "md5sum(file)",
                "rel_has_nofollow(rel)",
                "create_instance(objcls, settings, crawler, *args, **kwargs)",
                "set_environ(**kwargs)",
                "is_generator_with_return_value(callable)",
                "warn_on_generator_with_return_value(spider, callable)",
                "returns_none(return_node)"
            ],
            "variables_in_file": {
                "_ITERABLE_SINGLE_VALUES": [
                    20,
                    31
                ],
                "dict": [
                    20
                ],
                "BaseItem": [
                    20
                ],
                "str": [
                    90,
                    99,
                    20
                ],
                "bytes": [
                    20
                ],
                "arg": [
                    32,
                    34,
                    29,
                    31
                ],
                "isinstance": [
                    99,
                    184,
                    90,
                    189,
                    31
                ],
                "hasattr": [
                    145,
                    147,
                    71,
                    31
                ],
                "dot": [
                    49,
                    45
                ],
                "path.rindex": [
                    45
                ],
                "path": [
                    69,
                    73,
                    45,
                    47,
                    49
                ],
                "ValueError": [
                    143,
                    46,
                    47
                ],
                "module": [
                    49,
                    50,
                    55
                ],
                "name": [
                    49,
                    53,
                    55
                ],
                "mod": [
                    69,
                    70,
                    71,
                    72,
                    50,
                    53
                ],
                "import_module": [
                    50,
                    77,
                    69
                ],
                "obj": [
                    57,
                    53
                ],
                "getattr": [
                    53
                ],
                "AttributeError": [
                    54
                ],
                "NameError": [
                    55
                ],
                "mods": [
                    68,
                    70,
                    75,
                    78,
                    79
                ],
                "mods.append": [
                    78,
                    70
                ],
                "_": [
                    72
                ],
                "subpath": [
                    72,
                    73
                ],
                "ispkg": [
                    72,
                    74
                ],
                "iter_modules": [
                    72
                ],
                "mod.__path__": [
                    72
                ],
                "fullpath": [
                    73,
                    75,
                    77
                ],
                "walk_modules": [
                    75
                ],
                "submod": [
                    77,
                    78
                ],
                "regex": [
                    96,
                    90,
                    91,
                    94
                ],
                "re.compile": [
                    91
                ],
                "re": [
                    91
                ],
                "re.UNICODE": [
                    91
                ],
                "strings": [
                    96,
                    97,
                    100,
                    103,
                    94
                ],
                "group": [
                    94
                ],
                "regex.search": [
                    94
                ],
                "text": [
                    96,
                    99,
                    94
                ],
                "Exception": [
                    95
                ],
                "regex.findall": [
                    96
                ],
                "flatten": [
                    97
                ],
                "replace_entities": [
                    100,
                    102
                ],
                "s": [
                    100,
                    102,
                    103
                ],
                "to_unicode": [
                    102
                ],
                "encoding": [
                    102
                ],
                "m": [
                    120,
                    114,
                    119
                ],
                "hashlib.md5": [
                    114
                ],
                "hashlib": [
                    114
                ],
                "d": [
                    116,
                    117,
                    119
                ],
                "file.read": [
                    116
                ],
                "file": [
                    116
                ],
                "m.update": [
                    119
                ],
                "m.hexdigest": [
                    120
                ],
                "rel": [
                    125
                ],
                "rel.split": [
                    125
                ],
                "settings": [
                    144,
                    148,
                    141
                ],
                "crawler": [
                    144,
                    145,
                    146,
                    142
                ],
                "crawler.settings": [
                    144
                ],
                "objcls": [
                    145,
                    146,
                    147,
                    148,
                    150
                ],
                "objcls.from_crawler": [
                    146
                ],
                "args": [
                    146,
                    148,
                    150
                ],
                "kwargs": [
                    160,
                    146,
                    148,
                    150,
                    159
                ],
                "objcls.from_settings": [
                    148
                ],
                "original_env": [
                    164,
                    159
                ],
                "k": [
                    168,
                    164,
                    166,
                    159
                ],
                "os.environ.get": [
                    159
                ],
                "os.environ": [
                    160,
                    168,
                    166,
                    159
                ],
                "os": [
                    160,
                    168,
                    166,
                    159
                ],
                "os.environ.update": [
                    160
                ],
                "v": [
                    168,
                    164,
                    165
                ],
                "original_env.items": [
                    164
                ],
                "contextmanager": [
                    153
                ],
                "_generator_callbacks_cache": [
                    193,
                    194,
                    171,
                    179,
                    180,
                    190,
                    191
                ],
                "LocalWeakReferencedCache": [
                    171
                ],
                "callable": [
                    193,
                    194,
                    202,
                    208,
                    179,
                    180,
                    186,
                    187,
                    190,
                    191
                ],
                "value": [
                    184,
                    183
                ],
                "return_node.value": [
                    183
                ],
                "return_node": [
                    183
                ],
                "ast.NameConstant": [
                    184
                ],
                "ast": [
                    184,
                    187,
                    188,
                    189
                ],
                "value.value": [
                    184
                ],
                "inspect.isgeneratorfunction": [
                    186
                ],
                "inspect": [
                    186,
                    187
                ],
                "tree": [
                    187,
                    188
                ],
                "ast.parse": [
                    187
                ],
                "dedent": [
                    187
                ],
                "inspect.getsource": [
                    187
                ],
                "node": [
                    188,
                    189
                ],
                "ast.walk": [
                    188
                ],
                "ast.Return": [
                    189
                ],
                "returns_none": [
                    189
                ],
                "is_generator_with_return_value": [
                    202
                ],
                "warnings.warn": [
                    203
                ],
                "warnings": [
                    203
                ],
                "format": [
                    204
                ],
                "spider.__class__.__name__": [
                    208
                ],
                "spider.__class__": [
                    208
                ],
                "spider": [
                    208
                ],
                "callable.__name__": [
                    208
                ]
            },
            "filtered_variables_in_file": {
                "_ITERABLE_SINGLE_VALUES": [
                    20,
                    31
                ],
                "BaseItem": [
                    20
                ],
                "arg": [
                    32,
                    34,
                    29,
                    31
                ],
                "dot": [
                    49,
                    45
                ],
                "path.rindex": [
                    45
                ],
                "path": [
                    69,
                    73,
                    45,
                    47,
                    49
                ],
                "module": [
                    49,
                    50,
                    55
                ],
                "name": [
                    49,
                    53,
                    55
                ],
                "mod": [
                    69,
                    70,
                    71,
                    72,
                    50,
                    53
                ],
                "import_module": [
                    50,
                    77,
                    69
                ],
                "obj": [
                    57,
                    53
                ],
                "mods": [
                    68,
                    70,
                    75,
                    78,
                    79
                ],
                "mods.append": [
                    78,
                    70
                ],
                "_": [
                    72
                ],
                "subpath": [
                    72,
                    73
                ],
                "ispkg": [
                    72,
                    74
                ],
                "iter_modules": [
                    72
                ],
                "mod.__path__": [
                    72
                ],
                "fullpath": [
                    73,
                    75,
                    77
                ],
                "walk_modules": [
                    75
                ],
                "submod": [
                    77,
                    78
                ],
                "regex": [
                    96,
                    90,
                    91,
                    94
                ],
                "re.compile": [
                    91
                ],
                "re": [
                    91
                ],
                "re.UNICODE": [
                    91
                ],
                "strings": [
                    96,
                    97,
                    100,
                    103,
                    94
                ],
                "group": [
                    94
                ],
                "regex.search": [
                    94
                ],
                "text": [
                    96,
                    99,
                    94
                ],
                "regex.findall": [
                    96
                ],
                "flatten": [
                    97
                ],
                "replace_entities": [
                    100,
                    102
                ],
                "s": [
                    100,
                    102,
                    103
                ],
                "to_unicode": [
                    102
                ],
                "encoding": [
                    102
                ],
                "m": [
                    120,
                    114,
                    119
                ],
                "hashlib.md5": [
                    114
                ],
                "hashlib": [
                    114
                ],
                "d": [
                    116,
                    117,
                    119
                ],
                "file.read": [
                    116
                ],
                "file": [
                    116
                ],
                "m.update": [
                    119
                ],
                "m.hexdigest": [
                    120
                ],
                "rel": [
                    125
                ],
                "rel.split": [
                    125
                ],
                "settings": [
                    144,
                    148,
                    141
                ],
                "crawler": [
                    144,
                    145,
                    146,
                    142
                ],
                "crawler.settings": [
                    144
                ],
                "objcls": [
                    145,
                    146,
                    147,
                    148,
                    150
                ],
                "objcls.from_crawler": [
                    146
                ],
                "args": [
                    146,
                    148,
                    150
                ],
                "kwargs": [
                    160,
                    146,
                    148,
                    150,
                    159
                ],
                "objcls.from_settings": [
                    148
                ],
                "original_env": [
                    164,
                    159
                ],
                "k": [
                    168,
                    164,
                    166,
                    159
                ],
                "os.environ.get": [
                    159
                ],
                "os.environ": [
                    160,
                    168,
                    166,
                    159
                ],
                "os": [
                    160,
                    168,
                    166,
                    159
                ],
                "os.environ.update": [
                    160
                ],
                "v": [
                    168,
                    164,
                    165
                ],
                "original_env.items": [
                    164
                ],
                "contextmanager": [
                    153
                ],
                "_generator_callbacks_cache": [
                    193,
                    194,
                    171,
                    179,
                    180,
                    190,
                    191
                ],
                "LocalWeakReferencedCache": [
                    171
                ],
                "value": [
                    184,
                    183
                ],
                "return_node.value": [
                    183
                ],
                "return_node": [
                    183
                ],
                "ast.NameConstant": [
                    184
                ],
                "ast": [
                    184,
                    187,
                    188,
                    189
                ],
                "value.value": [
                    184
                ],
                "inspect.isgeneratorfunction": [
                    186
                ],
                "inspect": [
                    186,
                    187
                ],
                "tree": [
                    187,
                    188
                ],
                "ast.parse": [
                    187
                ],
                "dedent": [
                    187
                ],
                "inspect.getsource": [
                    187
                ],
                "node": [
                    188,
                    189
                ],
                "ast.walk": [
                    188
                ],
                "ast.Return": [
                    189
                ],
                "returns_none": [
                    189
                ],
                "is_generator_with_return_value": [
                    202
                ],
                "warnings.warn": [
                    203
                ],
                "warnings": [
                    203
                ],
                "spider.__class__.__name__": [
                    208
                ],
                "spider.__class__": [
                    208
                ],
                "spider": [
                    208
                ],
                "callable.__name__": [
                    208
                ]
            }
        },
        "test_data": []
    }
}