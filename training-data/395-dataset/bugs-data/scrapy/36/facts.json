{
    "1.1.1": "def create_instance(objcls, settings, crawler, *args, **kwargs):\n    \n    if settings is None:\n        if crawler is None:\n            raise ValueError(\"Specify at least one of settings and crawler.\")\n        settings = crawler.settings\n    if crawler and hasattr(objcls, 'from_crawler'):\n        return objcls.from_crawler(crawler, *args, **kwargs)\n    elif hasattr(objcls, 'from_settings'):\n        return objcls.from_settings(settings, *args, **kwargs)\n    else:\n        return objcls(*args, **kwargs)\n",
    "1.1.2": "Construct a class instance using its ``from_crawler`` or\n``from_settings`` constructors, if available.\n\nAt least one of ``settings`` and ``crawler`` needs to be different from\n``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.\nIf ``crawler`` is ``None``, only the ``from_settings`` constructor will be\ntried.\n\n``*args`` and ``**kwargs`` are forwarded to the constructors.\n\nRaises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/scrapy_36/scrapy/utils/misc.py",
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "2.1.1": null,
    "2.1.2": null,
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "Fail or warn if from_crawler() returns None\n"
    ],
    "3.1.2": [
        "Summary\nGenerate a warning or error if from_crawler() for a middleware/extension/etc. returns None\n\nMotivation\nI created a custom extension and connected signals in the from_crawler() classmethod, but neglected to return the new extension instance. Scrapy still reported the extension under \"Enabled extensions\", but none of the signals worked, since the instance was immediately garbage collected and its signals were silently disconnected.\n\nThis was of course an error on my part, but it would have saved me a lot of debugging if I had gotten a warning that from_crawler() was returning None, or if the extension were removed from the \"Enabled extensions\" list.\n\nWould it be appropriate for utils.misc.create_instance() to raise an error or generate a warning if it's about to return None? Or should MiddlewareManager treat create_instance() returning None the same as create_instance() raising NotConfigured?\n"
    ]
}