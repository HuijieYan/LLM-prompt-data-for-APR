{
    "scrapy": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 93,
            "file_name": "core/downloader/handlers/http11.py",
            "replace_code": "def requestTunnel(self, protocol):\n\n    \"\"\"Asks the proxy to open a tunnel.\"\"\"\n    tunnelReq = 'CONNECT %s:%s HTTP/1.1\\r\\n' % (self._tunneledHost, self._tunneledPort)\n    if self._proxyAuthHeader:\n        tunnelReq += 'Proxy-Authorization: %s\\r\\n' % self._proxyAuthHeader\n    tunnelReq += '\\r\\n'\n    \n    # Check if the transport object is the correct type and has the write method\n    if hasattr(protocol, 'transport') and hasattr(protocol.transport, 'write'):\n        protocol.transport.write(tunnelReq)\n        \n        # Store the original dataReceived method and assign the processProxyResponse method\n        self._protocolDataReceived = protocol.dataReceived\n        protocol.dataReceived = self.processProxyResponse\n        self._protocol = protocol\n        return protocol\n    else:\n        # Handle the case where the transport object is not correct\n        print(\"Error: Protocol transport object is not valid\")"
        }
    ]
}