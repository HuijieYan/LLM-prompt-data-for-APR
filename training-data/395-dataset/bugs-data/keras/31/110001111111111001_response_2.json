{
    "keras": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 3928,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def ctc_batch_cost(y_true, y_pred, input_length, label_length):\n    import tensorflow as tf\n    from tensorflow.python.ops import ctc_ops as ctc\n    label_length = tf.cast(tf.squeeze(label_length, axis=1), dtype=tf.int32)\n    input_length = tf.cast(tf.squeeze(input_length, axis=1), dtype=tf.int32)\n    sparse_labels = tf.sparse.from_dense(y_true)\n    \n    y_pred = tf.math.log(tf.transpose(y_pred, perm=[1, 0, 2]) + tf.keras.backend.epsilon())\n    \n    return tf.expand_dims(ctc.ctc_loss(labels=sparse_labels,\n                                       logits=y_pred,\n                                       label_length=label_length,\n                                       logit_length=input_length,\n                                       logits_time_major=True),\n                         axis=1)"
        }
    ]
}