{
    "keras:32": {
        "/Volumes/SSD2T/bgp_envs/repos/keras_32/keras/callbacks.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, monitor='val_loss', factor=0.1, patience=10,\n             verbose=0, mode='auto', epsilon=1e-4, cooldown=0, min_lr=0):\n    super(ReduceLROnPlateau, self).__init__()\n\n    self.monitor = monitor\n    if factor >= 1.0:\n        raise ValueError('ReduceLROnPlateau '\n                         'does not support a factor >= 1.0.')\n    self.factor = factor\n    self.min_lr = min_lr\n    self.epsilon = epsilon\n    self.patience = patience\n    self.verbose = verbose\n    self.cooldown = cooldown\n    self.cooldown_counter = 0  # Cooldown counter.\n    self.wait = 0\n    self.best = 0\n    self.mode = mode\n    self.monitor_op = None\n    self._reset()\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 908,
                    "end_line": 927,
                    "variables": {
                        "__init__": [
                            910
                        ],
                        "super": [
                            910
                        ],
                        "ReduceLROnPlateau": [
                            910
                        ],
                        "self": [
                            910,
                            912,
                            916,
                            917,
                            918,
                            919,
                            920,
                            921,
                            922,
                            923,
                            924,
                            925,
                            926,
                            927
                        ],
                        "self.monitor": [
                            912
                        ],
                        "monitor": [
                            912
                        ],
                        "factor": [
                            913,
                            916
                        ],
                        "ValueError": [
                            914
                        ],
                        "self.factor": [
                            916
                        ],
                        "self.min_lr": [
                            917
                        ],
                        "min_lr": [
                            917
                        ],
                        "self.epsilon": [
                            918
                        ],
                        "epsilon": [
                            918
                        ],
                        "self.patience": [
                            919
                        ],
                        "patience": [
                            919
                        ],
                        "self.verbose": [
                            920
                        ],
                        "verbose": [
                            920
                        ],
                        "self.cooldown": [
                            921
                        ],
                        "cooldown": [
                            921
                        ],
                        "self.cooldown_counter": [
                            922
                        ],
                        "self.wait": [
                            923
                        ],
                        "self.best": [
                            924
                        ],
                        "self.mode": [
                            925
                        ],
                        "mode": [
                            925
                        ],
                        "self.monitor_op": [
                            926
                        ],
                        "self._reset": [
                            927
                        ]
                    },
                    "filtered_variables": {
                        "__init__": [
                            910
                        ],
                        "ReduceLROnPlateau": [
                            910
                        ],
                        "self": [
                            910,
                            912,
                            916,
                            917,
                            918,
                            919,
                            920,
                            921,
                            922,
                            923,
                            924,
                            925,
                            926,
                            927
                        ],
                        "self.monitor": [
                            912
                        ],
                        "monitor": [
                            912
                        ],
                        "factor": [
                            913,
                            916
                        ],
                        "self.factor": [
                            916
                        ],
                        "self.min_lr": [
                            917
                        ],
                        "min_lr": [
                            917
                        ],
                        "self.epsilon": [
                            918
                        ],
                        "epsilon": [
                            918
                        ],
                        "self.patience": [
                            919
                        ],
                        "patience": [
                            919
                        ],
                        "self.verbose": [
                            920
                        ],
                        "verbose": [
                            920
                        ],
                        "self.cooldown": [
                            921
                        ],
                        "cooldown": [
                            921
                        ],
                        "self.cooldown_counter": [
                            922
                        ],
                        "self.wait": [
                            923
                        ],
                        "self.best": [
                            924
                        ],
                        "self.mode": [
                            925
                        ],
                        "mode": [
                            925
                        ],
                        "self.monitor_op": [
                            926
                        ],
                        "self._reset": [
                            927
                        ]
                    },
                    "diff_line_number": 909,
                    "class_data": {
                        "signature": "class ReduceLROnPlateau(Callback)",
                        "docstring": "Reduce learning rate when a metric has stopped improving.\n\nModels often benefit from reducing the learning rate by a factor\nof 2-10 once learning stagnates. This callback monitors a\nquantity and if no improvement is seen for a 'patience' number\nof epochs, the learning rate is reduced.\n\n# Example\n\n```python\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=5, min_lr=0.001)\nmodel.fit(X_train, Y_train, callbacks=[reduce_lr])\n```\n\n# Arguments\n    monitor: quantity to be monitored.\n    factor: factor by which the learning rate will\n        be reduced. new_lr = lr * factor\n    patience: number of epochs with no improvement\n        after which learning rate will be reduced.\n    verbose: int. 0: quiet, 1: update messages.\n    mode: one of {auto, min, max}. In `min` mode,\n        lr will be reduced when the quantity\n        monitored has stopped decreasing; in `max`\n        mode it will be reduced when the quantity\n        monitored has stopped increasing; in `auto`\n        mode, the direction is automatically inferred\n        from the name of the monitored quantity.\n    epsilon: threshold for measuring the new optimum,\n        to only focus on significant changes.\n    cooldown: number of epochs to wait before resuming\n        normal operation after lr has been reduced.\n    min_lr: lower bound on the learning rate.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0):\n    super(ReduceLROnPlateau, self).__init__()\n    self.monitor = monitor\n    if factor >= 1.0:\n        raise ValueError('ReduceLROnPlateau does not support a factor >= 1.0.')\n    self.factor = factor\n    self.min_lr = min_lr\n    self.epsilon = epsilon\n    self.patience = patience\n    self.verbose = verbose\n    self.cooldown = cooldown\n    self.cooldown_counter = 0\n    self.wait = 0\n    self.best = 0\n    self.mode = mode\n    self.monitor_op = None\n    self._reset()",
                            "def _reset(self):\n    \"\"\"Resets wait counter and cooldown counter.\n    \"\"\"\n    if self.mode not in ['auto', 'min', 'max']:\n        warnings.warn('Learning Rate Plateau Reducing mode %s is unknown, fallback to auto mode.' % self.mode, RuntimeWarning)\n        self.mode = 'auto'\n    if self.mode == 'min' or (self.mode == 'auto' and 'acc' not in self.monitor):\n        self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)\n        self.best = np.Inf\n    else:\n        self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)\n        self.best = -np.Inf\n    self.cooldown_counter = 0\n    self.wait = 0",
                            "def on_train_begin(self, logs=None):\n    self._reset()",
                            "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    logs['lr'] = K.get_value(self.model.optimizer.lr)\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn('Reduce LR on plateau conditioned on metric `%s` which is not available. Available metrics are: %s' % (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning)\n    else:\n        if self.in_cooldown():\n            self.cooldown_counter -= 1\n            self.wait = 0\n        if self.monitor_op(current, self.best):\n            self.best = current\n            self.wait = 0\n        elif not self.in_cooldown():\n            if self.wait >= self.patience:\n                old_lr = float(K.get_value(self.model.optimizer.lr))\n                if old_lr > self.min_lr:\n                    new_lr = old_lr * self.factor\n                    new_lr = max(new_lr, self.min_lr)\n                    K.set_value(self.model.optimizer.lr, new_lr)\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: ReduceLROnPlateau reducing learning rate to %s.' % (epoch + 1, new_lr))\n                    self.cooldown_counter = self.cooldown\n                    self.wait = 0\n            self.wait += 1",
                            "def in_cooldown(self):\n    return self.cooldown_counter > 0"
                        ],
                        "constructor_variables": [
                            "cooldown",
                            "factor",
                            "epsilon",
                            "best",
                            "monitor",
                            "verbose",
                            "patience",
                            "cooldown_counter",
                            "wait",
                            "mode",
                            "monitor_op",
                            "min_lr"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0)",
                            "_reset(self)",
                            "on_train_begin(self, logs=None)",
                            "on_epoch_end(self, epoch, logs=None)",
                            "in_cooldown(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x12c713ad0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epsilon": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x12c713ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x12c713ad0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epsilon": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x12c71c440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x12c713ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x13210de50>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epsilon": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x13210de50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x13210de50>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epsilon": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13211d3b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x13210de50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x11e4f36d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "min_delta": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e3ee280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x11e4f36d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x11e4f36d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "min_delta": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e3ee280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x11e5003b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x11e4f36d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1322c1990>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'epsilon': 1e-13}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "min_delta": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x1233cb9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x1322c1990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ReduceLROnPlateau": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1322c1990>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "min_delta": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x1233cb9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "patience": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x10a44e9e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._reset": {
                                    "variable_value": "<bound method ReduceLROnPlateau._reset of <keras.callbacks.ReduceLROnPlateau object at 0x1322c1990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_reset",
                    "function_code": "def _reset(self):\n    \"\"\"Resets wait counter and cooldown counter.\n    \"\"\"\n    if self.mode not in ['auto', 'min', 'max']:\n        warnings.warn('Learning Rate Plateau Reducing mode %s is unknown, '\n                      'fallback to auto mode.' % (self.mode),\n                      RuntimeWarning)\n        self.mode = 'auto'\n    if (self.mode == 'min' or\n       (self.mode == 'auto' and 'acc' not in self.monitor)):\n        self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)\n        self.best = np.Inf\n    else:\n        self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)\n        self.best = -np.Inf\n    self.cooldown_counter = 0\n    self.wait = 0\n",
                    "decorators": [],
                    "docstring": "Resets wait counter and cooldown counter.\n        ",
                    "start_line": 929,
                    "end_line": 945,
                    "variables": {
                        "self.mode": [
                            932,
                            934,
                            936,
                            937,
                            938
                        ],
                        "self": [
                            932,
                            934,
                            936,
                            937,
                            938,
                            939,
                            940,
                            942,
                            943,
                            944,
                            945
                        ],
                        "warnings.warn": [
                            933
                        ],
                        "warnings": [
                            933
                        ],
                        "RuntimeWarning": [
                            935
                        ],
                        "self.monitor": [
                            938
                        ],
                        "self.monitor_op": [
                            939,
                            942
                        ],
                        "np.less": [
                            939
                        ],
                        "np": [
                            939,
                            940,
                            942,
                            943
                        ],
                        "a": [
                            939,
                            942
                        ],
                        "b": [
                            939,
                            942
                        ],
                        "self.epsilon": [
                            939,
                            942
                        ],
                        "self.best": [
                            940,
                            943
                        ],
                        "np.Inf": [
                            940,
                            943
                        ],
                        "np.greater": [
                            942
                        ],
                        "self.cooldown_counter": [
                            944
                        ],
                        "self.wait": [
                            945
                        ]
                    },
                    "filtered_variables": {
                        "self.mode": [
                            932,
                            934,
                            936,
                            937,
                            938
                        ],
                        "self": [
                            932,
                            934,
                            936,
                            937,
                            938,
                            939,
                            940,
                            942,
                            943,
                            944,
                            945
                        ],
                        "warnings.warn": [
                            933
                        ],
                        "warnings": [
                            933
                        ],
                        "self.monitor": [
                            938
                        ],
                        "self.monitor_op": [
                            939,
                            942
                        ],
                        "np.less": [
                            939
                        ],
                        "np": [
                            939,
                            940,
                            942,
                            943
                        ],
                        "a": [
                            939,
                            942
                        ],
                        "b": [
                            939,
                            942
                        ],
                        "self.epsilon": [
                            939,
                            942
                        ],
                        "self.best": [
                            940,
                            943
                        ],
                        "np.Inf": [
                            940,
                            943
                        ],
                        "np.greater": [
                            942
                        ],
                        "self.cooldown_counter": [
                            944
                        ],
                        "self.wait": [
                            945
                        ]
                    },
                    "diff_line_number": 939,
                    "class_data": {
                        "signature": "class ReduceLROnPlateau(Callback)",
                        "docstring": "Reduce learning rate when a metric has stopped improving.\n\nModels often benefit from reducing the learning rate by a factor\nof 2-10 once learning stagnates. This callback monitors a\nquantity and if no improvement is seen for a 'patience' number\nof epochs, the learning rate is reduced.\n\n# Example\n\n```python\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=5, min_lr=0.001)\nmodel.fit(X_train, Y_train, callbacks=[reduce_lr])\n```\n\n# Arguments\n    monitor: quantity to be monitored.\n    factor: factor by which the learning rate will\n        be reduced. new_lr = lr * factor\n    patience: number of epochs with no improvement\n        after which learning rate will be reduced.\n    verbose: int. 0: quiet, 1: update messages.\n    mode: one of {auto, min, max}. In `min` mode,\n        lr will be reduced when the quantity\n        monitored has stopped decreasing; in `max`\n        mode it will be reduced when the quantity\n        monitored has stopped increasing; in `auto`\n        mode, the direction is automatically inferred\n        from the name of the monitored quantity.\n    epsilon: threshold for measuring the new optimum,\n        to only focus on significant changes.\n    cooldown: number of epochs to wait before resuming\n        normal operation after lr has been reduced.\n    min_lr: lower bound on the learning rate.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0):\n    super(ReduceLROnPlateau, self).__init__()\n    self.monitor = monitor\n    if factor >= 1.0:\n        raise ValueError('ReduceLROnPlateau does not support a factor >= 1.0.')\n    self.factor = factor\n    self.min_lr = min_lr\n    self.epsilon = epsilon\n    self.patience = patience\n    self.verbose = verbose\n    self.cooldown = cooldown\n    self.cooldown_counter = 0\n    self.wait = 0\n    self.best = 0\n    self.mode = mode\n    self.monitor_op = None\n    self._reset()",
                            "def _reset(self):\n    \"\"\"Resets wait counter and cooldown counter.\n    \"\"\"\n    if self.mode not in ['auto', 'min', 'max']:\n        warnings.warn('Learning Rate Plateau Reducing mode %s is unknown, fallback to auto mode.' % self.mode, RuntimeWarning)\n        self.mode = 'auto'\n    if self.mode == 'min' or (self.mode == 'auto' and 'acc' not in self.monitor):\n        self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)\n        self.best = np.Inf\n    else:\n        self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)\n        self.best = -np.Inf\n    self.cooldown_counter = 0\n    self.wait = 0",
                            "def on_train_begin(self, logs=None):\n    self._reset()",
                            "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    logs['lr'] = K.get_value(self.model.optimizer.lr)\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn('Reduce LR on plateau conditioned on metric `%s` which is not available. Available metrics are: %s' % (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning)\n    else:\n        if self.in_cooldown():\n            self.cooldown_counter -= 1\n            self.wait = 0\n        if self.monitor_op(current, self.best):\n            self.best = current\n            self.wait = 0\n        elif not self.in_cooldown():\n            if self.wait >= self.patience:\n                old_lr = float(K.get_value(self.model.optimizer.lr))\n                if old_lr > self.min_lr:\n                    new_lr = old_lr * self.factor\n                    new_lr = max(new_lr, self.min_lr)\n                    K.set_value(self.model.optimizer.lr, new_lr)\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: ReduceLROnPlateau reducing learning rate to %s.' % (epoch + 1, new_lr))\n                    self.cooldown_counter = self.cooldown\n                    self.wait = 0\n            self.wait += 1",
                            "def in_cooldown(self):\n    return self.cooldown_counter > 0"
                        ],
                        "constructor_variables": [
                            "cooldown",
                            "factor",
                            "epsilon",
                            "best",
                            "monitor",
                            "verbose",
                            "patience",
                            "cooldown_counter",
                            "wait",
                            "mode",
                            "monitor_op",
                            "min_lr"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0)",
                            "_reset(self)",
                            "on_train_begin(self, logs=None)",
                            "on_epoch_end(self, epoch, logs=None)",
                            "in_cooldown(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x13787eb50>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x13787eb50>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13788a3b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x13216ebd0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x13216ebd0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13217a320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.epsilon": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1381c1850>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1381c1850>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x1381c8440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "0.0001",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x12b78ce10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.mode": {
                                    "variable_value": "'auto'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x12b78ce10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x12b79c320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "np.less": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_delta": {
                                    "variable_value": "1e-13",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.Inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.greater": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "on_epoch_end",
                    "function_code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    logs['lr'] = K.get_value(self.model.optimizer.lr)\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn(\n            'Reduce LR on plateau conditioned on metric `%s` '\n            'which is not available. Available metrics are: %s' %\n            (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n        )\n\n    else:\n        if self.in_cooldown():\n            self.cooldown_counter -= 1\n            self.wait = 0\n\n        if self.monitor_op(current, self.best):\n            self.best = current\n            self.wait = 0\n        elif not self.in_cooldown():\n            if self.wait >= self.patience:\n                old_lr = float(K.get_value(self.model.optimizer.lr))\n                if old_lr > self.min_lr:\n                    new_lr = old_lr * self.factor\n                    new_lr = max(new_lr, self.min_lr)\n                    K.set_value(self.model.optimizer.lr, new_lr)\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: ReduceLROnPlateau reducing learning '\n                              'rate to %s.' % (epoch + 1, new_lr))\n                    self.cooldown_counter = self.cooldown\n                    self.wait = 0\n            self.wait += 1\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 950,
                    "end_line": 981,
                    "variables": {
                        "logs": [
                            952,
                            953,
                            958,
                            951
                        ],
                        "K.get_value": [
                            952,
                            971
                        ],
                        "K": [
                            952,
                            971,
                            975
                        ],
                        "self.model.optimizer.lr": [
                            952,
                            971,
                            975
                        ],
                        "self.model.optimizer": [
                            952,
                            971,
                            975
                        ],
                        "self.model": [
                            952,
                            971,
                            975
                        ],
                        "self": [
                            952,
                            953,
                            958,
                            962,
                            963,
                            964,
                            966,
                            967,
                            968,
                            969,
                            970,
                            971,
                            972,
                            973,
                            974,
                            975,
                            976,
                            979,
                            980,
                            981
                        ],
                        "current": [
                            953,
                            954,
                            966,
                            967
                        ],
                        "logs.get": [
                            953
                        ],
                        "self.monitor": [
                            953,
                            958
                        ],
                        "warnings.warn": [
                            955
                        ],
                        "warnings": [
                            955
                        ],
                        "join": [
                            958
                        ],
                        "list": [
                            958
                        ],
                        "logs.keys": [
                            958
                        ],
                        "RuntimeWarning": [
                            958
                        ],
                        "self.in_cooldown": [
                            969,
                            962
                        ],
                        "self.cooldown_counter": [
                            963,
                            979
                        ],
                        "self.wait": [
                            964,
                            968,
                            970,
                            980,
                            981
                        ],
                        "self.monitor_op": [
                            966
                        ],
                        "self.best": [
                            966,
                            967
                        ],
                        "self.patience": [
                            970
                        ],
                        "old_lr": [
                            971,
                            972,
                            973
                        ],
                        "float": [
                            971
                        ],
                        "self.min_lr": [
                            972,
                            974
                        ],
                        "new_lr": [
                            978,
                            973,
                            974,
                            975
                        ],
                        "self.factor": [
                            973
                        ],
                        "max": [
                            974
                        ],
                        "K.set_value": [
                            975
                        ],
                        "self.verbose": [
                            976
                        ],
                        "print": [
                            977
                        ],
                        "epoch": [
                            978
                        ],
                        "self.cooldown": [
                            979
                        ]
                    },
                    "filtered_variables": {
                        "logs": [
                            952,
                            953,
                            958,
                            951
                        ],
                        "K.get_value": [
                            952,
                            971
                        ],
                        "K": [
                            952,
                            971,
                            975
                        ],
                        "self.model.optimizer.lr": [
                            952,
                            971,
                            975
                        ],
                        "self.model.optimizer": [
                            952,
                            971,
                            975
                        ],
                        "self.model": [
                            952,
                            971,
                            975
                        ],
                        "self": [
                            952,
                            953,
                            958,
                            962,
                            963,
                            964,
                            966,
                            967,
                            968,
                            969,
                            970,
                            971,
                            972,
                            973,
                            974,
                            975,
                            976,
                            979,
                            980,
                            981
                        ],
                        "current": [
                            953,
                            954,
                            966,
                            967
                        ],
                        "logs.get": [
                            953
                        ],
                        "self.monitor": [
                            953,
                            958
                        ],
                        "warnings.warn": [
                            955
                        ],
                        "warnings": [
                            955
                        ],
                        "join": [
                            958
                        ],
                        "logs.keys": [
                            958
                        ],
                        "self.in_cooldown": [
                            969,
                            962
                        ],
                        "self.cooldown_counter": [
                            963,
                            979
                        ],
                        "self.wait": [
                            964,
                            968,
                            970,
                            980,
                            981
                        ],
                        "self.monitor_op": [
                            966
                        ],
                        "self.best": [
                            966,
                            967
                        ],
                        "self.patience": [
                            970
                        ],
                        "old_lr": [
                            971,
                            972,
                            973
                        ],
                        "self.min_lr": [
                            972,
                            974
                        ],
                        "new_lr": [
                            978,
                            973,
                            974,
                            975
                        ],
                        "self.factor": [
                            973
                        ],
                        "K.set_value": [
                            975
                        ],
                        "self.verbose": [
                            976
                        ],
                        "epoch": [
                            978
                        ],
                        "self.cooldown": [
                            979
                        ]
                    },
                    "diff_line_number": 969,
                    "class_data": {
                        "signature": "class ReduceLROnPlateau(Callback)",
                        "docstring": "Reduce learning rate when a metric has stopped improving.\n\nModels often benefit from reducing the learning rate by a factor\nof 2-10 once learning stagnates. This callback monitors a\nquantity and if no improvement is seen for a 'patience' number\nof epochs, the learning rate is reduced.\n\n# Example\n\n```python\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=5, min_lr=0.001)\nmodel.fit(X_train, Y_train, callbacks=[reduce_lr])\n```\n\n# Arguments\n    monitor: quantity to be monitored.\n    factor: factor by which the learning rate will\n        be reduced. new_lr = lr * factor\n    patience: number of epochs with no improvement\n        after which learning rate will be reduced.\n    verbose: int. 0: quiet, 1: update messages.\n    mode: one of {auto, min, max}. In `min` mode,\n        lr will be reduced when the quantity\n        monitored has stopped decreasing; in `max`\n        mode it will be reduced when the quantity\n        monitored has stopped increasing; in `auto`\n        mode, the direction is automatically inferred\n        from the name of the monitored quantity.\n    epsilon: threshold for measuring the new optimum,\n        to only focus on significant changes.\n    cooldown: number of epochs to wait before resuming\n        normal operation after lr has been reduced.\n    min_lr: lower bound on the learning rate.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0):\n    super(ReduceLROnPlateau, self).__init__()\n    self.monitor = monitor\n    if factor >= 1.0:\n        raise ValueError('ReduceLROnPlateau does not support a factor >= 1.0.')\n    self.factor = factor\n    self.min_lr = min_lr\n    self.epsilon = epsilon\n    self.patience = patience\n    self.verbose = verbose\n    self.cooldown = cooldown\n    self.cooldown_counter = 0\n    self.wait = 0\n    self.best = 0\n    self.mode = mode\n    self.monitor_op = None\n    self._reset()",
                            "def _reset(self):\n    \"\"\"Resets wait counter and cooldown counter.\n    \"\"\"\n    if self.mode not in ['auto', 'min', 'max']:\n        warnings.warn('Learning Rate Plateau Reducing mode %s is unknown, fallback to auto mode.' % self.mode, RuntimeWarning)\n        self.mode = 'auto'\n    if self.mode == 'min' or (self.mode == 'auto' and 'acc' not in self.monitor):\n        self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)\n        self.best = np.Inf\n    else:\n        self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)\n        self.best = -np.Inf\n    self.cooldown_counter = 0\n    self.wait = 0",
                            "def on_train_begin(self, logs=None):\n    self._reset()",
                            "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    logs['lr'] = K.get_value(self.model.optimizer.lr)\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn('Reduce LR on plateau conditioned on metric `%s` which is not available. Available metrics are: %s' % (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning)\n    else:\n        if self.in_cooldown():\n            self.cooldown_counter -= 1\n            self.wait = 0\n        if self.monitor_op(current, self.best):\n            self.best = current\n            self.wait = 0\n        elif not self.in_cooldown():\n            if self.wait >= self.patience:\n                old_lr = float(K.get_value(self.model.optimizer.lr))\n                if old_lr > self.min_lr:\n                    new_lr = old_lr * self.factor\n                    new_lr = max(new_lr, self.min_lr)\n                    K.set_value(self.model.optimizer.lr, new_lr)\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: ReduceLROnPlateau reducing learning rate to %s.' % (epoch + 1, new_lr))\n                    self.cooldown_counter = self.cooldown\n                    self.wait = 0\n            self.wait += 1",
                            "def in_cooldown(self):\n    return self.cooldown_counter > 0"
                        ],
                        "constructor_variables": [
                            "cooldown",
                            "factor",
                            "epsilon",
                            "best",
                            "monitor",
                            "verbose",
                            "patience",
                            "cooldown_counter",
                            "wait",
                            "mode",
                            "monitor_op",
                            "min_lr"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0)",
                            "_reset(self)",
                            "on_train_begin(self, logs=None)",
                            "on_epoch_end(self, epoch, logs=None)",
                            "in_cooldown(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.086}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x135936c90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x13594f6e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x13594f6e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13593f200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.086, 'lr': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x135936c90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x13594f6e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x13594f6e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13593f200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.1096}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x135936c90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x13594fe60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x13594fe60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13593f200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.1096, 'lr': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x135936c90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": "0.1096",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x13594fe60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x13594fe60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13593f200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.104}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x135936c90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x135839320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x135839320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13593f200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.104, 'lr': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x135936c90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": "0.104",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x135839320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x135839320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x1359366d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x13593f200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.086}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x138928d90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x138928d10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x138944640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x138944640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x138928d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x138934290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.086, 'lr': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x138928d90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x138928d10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x138944640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x138944640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x138928d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x138934290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.1096}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x138928d90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x138928d10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x138944dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x138944dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x138928d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x138934290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.1096, 'lr': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x138928d90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x138928d10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": "0.1096",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x138944dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x138944dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x138928d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x138934290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.104}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x138928d90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x138928d10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x13882e410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x13882e410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x138928d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x138934290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "logs": {
                                    "variable_value": "{'val_loss': 0.104, 'lr': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "K.get_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.optimizer.lr": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.model": {
                                    "variable_value": "<test_callbacks.test_ReduceLROnPlateau_patience.<locals>.DummyModel object at 0x138928d90>",
                                    "variable_type": "DummyModel",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.ReduceLROnPlateau object at 0x138928d10>",
                                    "variable_type": "ReduceLROnPlateau",
                                    "variable_shape": null
                                },
                                "current": {
                                    "variable_value": "0.104",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "logs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x13882e410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.monitor": {
                                    "variable_value": "'val_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x13882e410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.in_cooldown": {
                                    "variable_value": "<bound method ReduceLROnPlateau.in_cooldown of <keras.callbacks.ReduceLROnPlateau object at 0x138928d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.cooldown_counter": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.wait": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.monitor_op": {
                                    "variable_value": "<function ReduceLROnPlateau._reset.<locals>.<lambda> at 0x138934290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.best": {
                                    "variable_value": "0.086",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.patience": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "old_lr": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.min_lr": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_lr": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.factor": {
                                    "variable_value": "0.1",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "K.set_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.cooldown": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "epsilon: threshold for measuring the new optimum,\n            to only focus on significant changes.",
                    "start_line": 901,
                    "end_line": 902
                }
            ],
            "inscope_functions": [
                "def __init__(self, callbacks=None, queue_length=10):\n    callbacks = callbacks or []\n    self.callbacks = [c for c in callbacks]\n    self.queue_length = queue_length",
                "def append(self, callback):\n    self.callbacks.append(callback)",
                "def set_params(self, params):\n    for callback in self.callbacks:\n        callback.set_params(params)",
                "def set_model(self, model):\n    for callback in self.callbacks:\n        callback.set_model(model)",
                "def on_epoch_begin(self, epoch, logs=None):\n    \"\"\"Called at the start of an epoch.\n\n    # Arguments\n        epoch: integer, index of epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_epoch_begin(epoch, logs)\n    self._delta_t_batch = 0.\n    self._delta_ts_batch_begin = deque([], maxlen=self.queue_length)\n    self._delta_ts_batch_end = deque([], maxlen=self.queue_length)",
                "def on_epoch_end(self, epoch, logs=None):\n    \"\"\"Called at the end of an epoch.\n\n    # Arguments\n        epoch: integer, index of epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_epoch_end(epoch, logs)",
                "def on_batch_begin(self, batch, logs=None):\n    \"\"\"Called right before processing a batch.\n\n    # Arguments\n        batch: integer, index of batch within the current epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    t_before_callbacks = time.time()\n    for callback in self.callbacks:\n        callback.on_batch_begin(batch, logs)\n    self._delta_ts_batch_begin.append(time.time() - t_before_callbacks)\n    delta_t_median = np.median(self._delta_ts_batch_begin)\n    if (self._delta_t_batch > 0. and\n       delta_t_median > 0.95 * self._delta_t_batch and\n       delta_t_median > 0.1):\n        warnings.warn('Method on_batch_begin() is slow compared '\n                      'to the batch update (%f). Check your callbacks.'\n                      % delta_t_median)\n    self._t_enter_batch = time.time()",
                "def on_batch_end(self, batch, logs=None):\n    \"\"\"Called at the end of a batch.\n\n    # Arguments\n        batch: integer, index of batch within the current epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    if not hasattr(self, '_t_enter_batch'):\n        self._t_enter_batch = time.time()\n    self._delta_t_batch = time.time() - self._t_enter_batch\n    t_before_callbacks = time.time()\n    for callback in self.callbacks:\n        callback.on_batch_end(batch, logs)\n    self._delta_ts_batch_end.append(time.time() - t_before_callbacks)\n    delta_t_median = np.median(self._delta_ts_batch_end)\n    if (self._delta_t_batch > 0. and\n       (delta_t_median > 0.95 * self._delta_t_batch and delta_t_median > 0.1)):\n        warnings.warn('Method on_batch_end() is slow compared '\n                      'to the batch update (%f). Check your callbacks.'\n                      % delta_t_median)",
                "def on_train_begin(self, logs=None):\n    \"\"\"Called at the beginning of training.\n\n    # Arguments\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_train_begin(logs)",
                "def on_train_end(self, logs=None):\n    \"\"\"Called at the end of training.\n\n    # Arguments\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_train_end(logs)",
                "def __iter__(self):\n    return iter(self.callbacks)",
                "def __init__(self):\n    self.validation_data = None\n    self.model = None",
                "def set_params(self, params):\n    self.params = params",
                "def set_model(self, model):\n    self.model = model",
                "def on_epoch_begin(self, epoch, logs=None):\n    pass",
                "def on_epoch_end(self, epoch, logs=None):\n    pass",
                "def on_batch_begin(self, batch, logs=None):\n    pass",
                "def on_batch_end(self, batch, logs=None):\n    pass",
                "def on_train_begin(self, logs=None):\n    pass",
                "def on_train_end(self, logs=None):\n    pass",
                "def __init__(self, stateful_metrics=None):\n    if stateful_metrics:\n        self.stateful_metrics = set(stateful_metrics)\n    else:\n        self.stateful_metrics = set()",
                "def on_epoch_begin(self, epoch, logs=None):\n    self.seen = 0\n    self.totals = {}",
                "def on_batch_end(self, batch, logs=None):\n    logs = logs or {}\n    batch_size = logs.get('size', 0)\n    self.seen += batch_size\n\n    for k, v in logs.items():\n        if k in self.stateful_metrics:\n            self.totals[k] = v\n        else:\n            if k in self.totals:\n                self.totals[k] += v * batch_size\n            else:\n                self.totals[k] = v * batch_size",
                "def on_epoch_end(self, epoch, logs=None):\n    if logs is not None:\n        for k in self.params['metrics']:\n            if k in self.totals:\n                # Make value available to next callbacks.\n                if k in self.stateful_metrics:\n                    logs[k] = self.totals[k]\n                else:\n                    logs[k] = self.totals[k] / self.seen",
                "def __init__(self):\n    super(TerminateOnNaN, self).__init__()",
                "def on_batch_end(self, batch, logs=None):\n    logs = logs or {}\n    loss = logs.get('loss')\n    if loss is not None:\n        if np.isnan(loss) or np.isinf(loss):\n            print('Batch %d: Invalid loss, terminating training' % (batch))\n            self.model.stop_training = True",
                "def __init__(self, count_mode='samples',\n             stateful_metrics=None):\n    super(ProgbarLogger, self).__init__()\n    if count_mode == 'samples':\n        self.use_steps = False\n    elif count_mode == 'steps':\n        self.use_steps = True\n    else:\n        raise ValueError('Unknown `count_mode`: ' + str(count_mode))\n    if stateful_metrics:\n        self.stateful_metrics = set(stateful_metrics)\n    else:\n        self.stateful_metrics = set()",
                "def on_train_begin(self, logs=None):\n    self.verbose = self.params['verbose']\n    self.epochs = self.params['epochs']",
                "def on_epoch_begin(self, epoch, logs=None):\n    if self.verbose:\n        print('Epoch %d/%d' % (epoch + 1, self.epochs))\n        if self.use_steps:\n            target = self.params['steps']\n        else:\n            target = self.params['samples']\n        self.target = target\n        self.progbar = Progbar(target=self.target,\n                               verbose=self.verbose,\n                               stateful_metrics=self.stateful_metrics)\n    self.seen = 0",
                "def on_batch_begin(self, batch, logs=None):\n    if self.seen < self.target:\n        self.log_values = []",
                "def on_batch_end(self, batch, logs=None):\n    logs = logs or {}\n    batch_size = logs.get('size', 0)\n    if self.use_steps:\n        self.seen += 1\n    else:\n        self.seen += batch_size\n\n    for k in self.params['metrics']:\n        if k in logs:\n            self.log_values.append((k, logs[k]))\n\n    # Skip progbar update for the last batch;\n    # will be handled by on_epoch_end.\n    if self.verbose and self.seen < self.target:\n        self.progbar.update(self.seen, self.log_values)",
                "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    for k in self.params['metrics']:\n        if k in logs:\n            self.log_values.append((k, logs[k]))\n    if self.verbose:\n        self.progbar.update(self.seen, self.log_values)",
                "def on_train_begin(self, logs=None):\n    self.epoch = []\n    self.history = {}",
                "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    self.epoch.append(epoch)\n    for k, v in logs.items():\n        self.history.setdefault(k, []).append(v)",
                "def __init__(self, filepath, monitor='val_loss', verbose=0,\n             save_best_only=False, save_weights_only=False,\n             mode='auto', period=1):\n    super(ModelCheckpoint, self).__init__()\n    self.monitor = monitor\n    self.verbose = verbose\n    self.filepath = filepath\n    self.save_best_only = save_best_only\n    self.save_weights_only = save_weights_only\n    self.period = period\n    self.epochs_since_last_save = 0\n\n    if mode not in ['auto', 'min', 'max']:\n        warnings.warn('ModelCheckpoint mode %s is unknown, '\n                      'fallback to auto mode.' % (mode),\n                      RuntimeWarning)\n        mode = 'auto'\n\n    if mode == 'min':\n        self.monitor_op = np.less\n        self.best = np.Inf\n    elif mode == 'max':\n        self.monitor_op = np.greater\n        self.best = -np.Inf\n    else:\n        if 'acc' in self.monitor or self.monitor.startswith('fmeasure'):\n            self.monitor_op = np.greater\n            self.best = -np.Inf\n        else:\n            self.monitor_op = np.less\n            self.best = np.Inf",
                "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    self.epochs_since_last_save += 1\n    if self.epochs_since_last_save >= self.period:\n        self.epochs_since_last_save = 0\n        filepath = self.filepath.format(epoch=epoch + 1, **logs)\n        if self.save_best_only:\n            current = logs.get(self.monitor)\n            if current is None:\n                warnings.warn('Can save best model only with %s available, '\n                              'skipping.' % (self.monitor), RuntimeWarning)\n            else:\n                if self.monitor_op(current, self.best):\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: %s improved from %0.5f to %0.5f,'\n                              ' saving model to %s'\n                              % (epoch + 1, self.monitor, self.best,\n                                 current, filepath))\n                    self.best = current\n                    if self.save_weights_only:\n                        self.model.save_weights(filepath, overwrite=True)\n                    else:\n                        self.model.save(filepath, overwrite=True)\n                else:\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: %s did not improve' %\n                              (epoch + 1, self.monitor))\n        else:\n            if self.verbose > 0:\n                print('\\nEpoch %05d: saving model to %s' % (epoch + 1, filepath))\n            if self.save_weights_only:\n                self.model.save_weights(filepath, overwrite=True)\n            else:\n                self.model.save(filepath, overwrite=True)",
                "def __init__(self, monitor='val_loss',\n             min_delta=0, patience=0, verbose=0, mode='auto'):\n    super(EarlyStopping, self).__init__()\n\n    self.monitor = monitor\n    self.patience = patience\n    self.verbose = verbose\n    self.min_delta = min_delta\n    self.wait = 0\n    self.stopped_epoch = 0\n\n    if mode not in ['auto', 'min', 'max']:\n        warnings.warn('EarlyStopping mode %s is unknown, '\n                      'fallback to auto mode.' % mode,\n                      RuntimeWarning)\n        mode = 'auto'\n\n    if mode == 'min':\n        self.monitor_op = np.less\n    elif mode == 'max':\n        self.monitor_op = np.greater\n    else:\n        if 'acc' in self.monitor:\n            self.monitor_op = np.greater\n        else:\n            self.monitor_op = np.less\n\n    if self.monitor_op == np.greater:\n        self.min_delta *= 1\n    else:\n        self.min_delta *= -1",
                "def on_train_begin(self, logs=None):\n    # Allow instances to be re-used\n    self.wait = 0\n    self.stopped_epoch = 0\n    self.best = np.Inf if self.monitor_op == np.less else -np.Inf",
                "def on_epoch_end(self, epoch, logs=None):\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn(\n            'Early stopping conditioned on metric `%s` '\n            'which is not available. Available metrics are: %s' %\n            (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n        )\n        return\n    if self.monitor_op(current - self.min_delta, self.best):\n        self.best = current\n        self.wait = 0\n    else:\n        self.wait += 1\n        if self.wait >= self.patience:\n            self.stopped_epoch = epoch\n            self.model.stop_training = True",
                "def on_train_end(self, logs=None):\n    if self.stopped_epoch > 0 and self.verbose > 0:\n        print('Epoch %05d: early stopping' % (self.stopped_epoch + 1))",
                "def __init__(self,\n             root='http://localhost:9000',\n             path='/publish/epoch/end/',\n             field='data',\n             headers=None):\n    super(RemoteMonitor, self).__init__()\n\n    self.root = root\n    self.path = path\n    self.field = field\n    self.headers = headers",
                "def on_epoch_end(self, epoch, logs=None):\n    if requests is None:\n        raise ImportError('RemoteMonitor requires '\n                          'the `requests` library.')\n    logs = logs or {}\n    send = {}\n    send['epoch'] = epoch\n    for k, v in logs.items():\n        if isinstance(v, (np.ndarray, np.generic)):\n            send[k] = v.item()\n        else:\n            send[k] = v\n    try:\n        requests.post(self.root + self.path,\n                      {self.field: json.dumps(send)},\n                      headers=self.headers)\n    except requests.exceptions.RequestException:\n        warnings.warn('Warning: could not reach RemoteMonitor '\n                      'root server at ' + str(self.root))",
                "def __init__(self, schedule, verbose=0):\n    super(LearningRateScheduler, self).__init__()\n    self.schedule = schedule\n    self.verbose = verbose",
                "def on_epoch_begin(self, epoch, logs=None):\n    if not hasattr(self.model.optimizer, 'lr'):\n        raise ValueError('Optimizer must have a \"lr\" attribute.')\n    lr = float(K.get_value(self.model.optimizer.lr))\n    try:  # new API\n        lr = self.schedule(epoch, lr=lr)\n    except TypeError:  # old API for backward compatibility\n        lr = self.schedule(epoch)\n    if not isinstance(lr, (float, np.float32, np.float64)):\n        raise ValueError('The output of the \"schedule\" function '\n                         'should be float.')\n    K.set_value(self.model.optimizer.lr, lr)\n    if self.verbose > 0:\n        print('\\nEpoch %05d: LearningRateScheduler reducing learning '\n              'rate to %s.' % (epoch + 1, lr))",
                "def __init__(self, log_dir='./logs',\n             histogram_freq=0,\n             batch_size=32,\n             write_graph=True,\n             write_grads=False,\n             write_images=False,\n             embeddings_freq=0,\n             embeddings_layer_names=None,\n             embeddings_metadata=None):\n    super(TensorBoard, self).__init__()\n    global tf, projector\n    try:\n        import tensorflow as tf\n        from tensorflow.contrib.tensorboard.plugins import projector\n    except ImportError:\n        raise ImportError('You need the TensorFlow module installed to use TensorBoard.')\n\n    if K.backend() != 'tensorflow':\n        if histogram_freq != 0:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'histogram_freq was set to 0')\n            histogram_freq = 0\n        if write_graph:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'write_graph was set to False')\n            write_graph = False\n        if write_images:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'write_images was set to False')\n            write_images = False\n        if embeddings_freq != 0:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'embeddings_freq was set to 0')\n            embeddings_freq = 0\n\n    self.log_dir = log_dir\n    self.histogram_freq = histogram_freq\n    self.merged = None\n    self.write_graph = write_graph\n    self.write_grads = write_grads\n    self.write_images = write_images\n    self.embeddings_freq = embeddings_freq\n    self.embeddings_layer_names = embeddings_layer_names\n    self.embeddings_metadata = embeddings_metadata or {}\n    self.batch_size = batch_size",
                "def set_model(self, model):\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = K.get_session()\n    if self.histogram_freq and self.merged is None:\n        for layer in self.model.layers:\n\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                tf.summary.histogram(mapped_weight_name, weight)\n                if self.write_grads:\n                    grads = model.optimizer.get_gradients(model.total_loss,\n                                                          weight)\n\n                    def is_indexed_slices(grad):\n                        return type(grad).__name__ == 'IndexedSlices'\n                    grads = [\n                        grad.values if is_indexed_slices(grad) else grad\n                        for grad in grads]\n                    tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                if self.write_images:\n                    w_img = tf.squeeze(weight)\n                    shape = K.int_shape(w_img)\n                    if len(shape) == 2:  # dense layer kernel case\n                        if shape[0] > shape[1]:\n                            w_img = tf.transpose(w_img)\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [1,\n                                                   shape[0],\n                                                   shape[1],\n                                                   1])\n                    elif len(shape) == 3:  # convnet case\n                        if K.image_data_format() == 'channels_last':\n                            # switch to channels_first to display\n                            # every kernel as a separate image\n                            w_img = tf.transpose(w_img, perm=[2, 0, 1])\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [shape[0],\n                                                   shape[1],\n                                                   shape[2],\n                                                   1])\n                    elif len(shape) == 1:  # bias case\n                        w_img = tf.reshape(w_img, [1,\n                                                   shape[0],\n                                                   1,\n                                                   1])\n                    else:\n                        # not possible to handle 3D convnets etc.\n                        continue\n\n                    shape = K.int_shape(w_img)\n                    assert len(shape) == 4 and shape[-1] in [1, 3, 4]\n                    tf.summary.image(mapped_weight_name, w_img)\n\n            if hasattr(layer, 'output'):\n                tf.summary.histogram('{}_out'.format(layer.name),\n                                     layer.output)\n    self.merged = tf.summary.merge_all()\n\n    if self.write_graph:\n        self.writer = tf.summary.FileWriter(self.log_dir,\n                                            self.sess.graph)\n    else:\n        self.writer = tf.summary.FileWriter(self.log_dir)\n\n    if self.embeddings_freq:\n        embeddings_layer_names = self.embeddings_layer_names\n\n        if not embeddings_layer_names:\n            embeddings_layer_names = [layer.name for layer in self.model.layers\n                                      if type(layer).__name__ == 'Embedding']\n\n        embeddings = {layer.name: layer.weights[0]\n                      for layer in self.model.layers\n                      if layer.name in embeddings_layer_names}\n\n        self.saver = tf.train.Saver(list(embeddings.values()))\n\n        embeddings_metadata = {}\n\n        if not isinstance(self.embeddings_metadata, str):\n            embeddings_metadata = self.embeddings_metadata\n        else:\n            embeddings_metadata = {layer_name: self.embeddings_metadata\n                                   for layer_name in embeddings.keys()}\n\n        config = projector.ProjectorConfig()\n        self.embeddings_ckpt_path = os.path.join(self.log_dir,\n                                                 'keras_embedding.ckpt')\n\n        for layer_name, tensor in embeddings.items():\n            embedding = config.embeddings.add()\n            embedding.tensor_name = tensor.name\n\n            if layer_name in embeddings_metadata:\n                embedding.metadata_path = embeddings_metadata[layer_name]\n\n        projector.visualize_embeddings(self.writer, config)",
                "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n\n    if not self.validation_data and self.histogram_freq:\n        raise ValueError('If printing histograms, validation_data must be '\n                         'provided, and cannot be a generator.')\n    if self.validation_data and self.histogram_freq:\n        if epoch % self.histogram_freq == 0:\n\n            val_data = self.validation_data\n            tensors = (self.model.inputs +\n                       self.model.targets +\n                       self.model.sample_weights)\n\n            if self.model.uses_learning_phase:\n                tensors += [K.learning_phase()]\n\n            assert len(val_data) == len(tensors)\n            val_size = val_data[0].shape[0]\n            i = 0\n            while i < val_size:\n                step = min(self.batch_size, val_size - i)\n                if self.model.uses_learning_phase:\n                    # do not slice the learning phase\n                    batch_val = [x[i:i + step] for x in val_data[:-1]]\n                    batch_val.append(val_data[-1])\n                else:\n                    batch_val = [x[i:i + step] for x in val_data]\n                assert len(batch_val) == len(tensors)\n                feed_dict = dict(zip(tensors, batch_val))\n                result = self.sess.run([self.merged], feed_dict=feed_dict)\n                summary_str = result[0]\n                self.writer.add_summary(summary_str, epoch)\n                i += self.batch_size\n\n    if self.embeddings_freq and self.embeddings_ckpt_path:\n        if epoch % self.embeddings_freq == 0:\n            self.saver.save(self.sess,\n                            self.embeddings_ckpt_path,\n                            epoch)\n\n    for name, value in logs.items():\n        if name in ['batch', 'size']:\n            continue\n        summary = tf.Summary()\n        summary_value = summary.value.add()\n        summary_value.simple_value = value.item()\n        summary_value.tag = name\n        self.writer.add_summary(summary, epoch)\n    self.writer.flush()",
                "def on_train_end(self, _):\n    self.writer.close()",
                "def __init__(self, monitor='val_loss', factor=0.1, patience=10,\n             verbose=0, mode='auto', epsilon=1e-4, cooldown=0, min_lr=0):\n    super(ReduceLROnPlateau, self).__init__()\n\n    self.monitor = monitor\n    if factor >= 1.0:\n        raise ValueError('ReduceLROnPlateau '\n                         'does not support a factor >= 1.0.')\n    self.factor = factor\n    self.min_lr = min_lr\n    self.epsilon = epsilon\n    self.patience = patience\n    self.verbose = verbose\n    self.cooldown = cooldown\n    self.cooldown_counter = 0  # Cooldown counter.\n    self.wait = 0\n    self.best = 0\n    self.mode = mode\n    self.monitor_op = None\n    self._reset()",
                "def _reset(self):\n    \"\"\"Resets wait counter and cooldown counter.\n    \"\"\"\n    if self.mode not in ['auto', 'min', 'max']:\n        warnings.warn('Learning Rate Plateau Reducing mode %s is unknown, '\n                      'fallback to auto mode.' % (self.mode),\n                      RuntimeWarning)\n        self.mode = 'auto'\n    if (self.mode == 'min' or\n       (self.mode == 'auto' and 'acc' not in self.monitor)):\n        self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)\n        self.best = np.Inf\n    else:\n        self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)\n        self.best = -np.Inf\n    self.cooldown_counter = 0\n    self.wait = 0",
                "def on_train_begin(self, logs=None):\n    self._reset()",
                "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    logs['lr'] = K.get_value(self.model.optimizer.lr)\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn(\n            'Reduce LR on plateau conditioned on metric `%s` '\n            'which is not available. Available metrics are: %s' %\n            (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n        )\n\n    else:\n        if self.in_cooldown():\n            self.cooldown_counter -= 1\n            self.wait = 0\n\n        if self.monitor_op(current, self.best):\n            self.best = current\n            self.wait = 0\n        elif not self.in_cooldown():\n            if self.wait >= self.patience:\n                old_lr = float(K.get_value(self.model.optimizer.lr))\n                if old_lr > self.min_lr:\n                    new_lr = old_lr * self.factor\n                    new_lr = max(new_lr, self.min_lr)\n                    K.set_value(self.model.optimizer.lr, new_lr)\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: ReduceLROnPlateau reducing learning '\n                              'rate to %s.' % (epoch + 1, new_lr))\n                    self.cooldown_counter = self.cooldown\n                    self.wait = 0\n            self.wait += 1",
                "def in_cooldown(self):\n    return self.cooldown_counter > 0",
                "def __init__(self, filename, separator=',', append=False):\n    self.sep = separator\n    self.filename = filename\n    self.append = append\n    self.writer = None\n    self.keys = None\n    self.append_header = True\n    self.file_flags = 'b' if six.PY2 and os.name == 'nt' else ''\n    super(CSVLogger, self).__init__()",
                "def on_train_begin(self, logs=None):\n    if self.append:\n        if os.path.exists(self.filename):\n            with open(self.filename, 'r' + self.file_flags) as f:\n                self.append_header = not bool(len(f.readline()))\n        self.csv_file = open(self.filename, 'a' + self.file_flags)\n    else:\n        self.csv_file = open(self.filename, 'w' + self.file_flags)",
                "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n\n    def handle_value(k):\n        is_zero_dim_ndarray = isinstance(k, np.ndarray) and k.ndim == 0\n        if isinstance(k, six.string_types):\n            return k\n        elif isinstance(k, Iterable) and not is_zero_dim_ndarray:\n            return '\"[%s]\"' % (', '.join(map(str, k)))\n        else:\n            return k\n\n    if self.keys is None:\n        self.keys = sorted(logs.keys())\n\n    if self.model.stop_training:\n        # We set NA so that csv parsers do not fail for this last epoch.\n        logs = dict([(k, logs[k]) if k in logs else (k, 'NA') for k in self.keys])\n\n    if not self.writer:\n        class CustomDialect(csv.excel):\n            delimiter = self.sep\n\n        self.writer = csv.DictWriter(self.csv_file,\n                                     fieldnames=['epoch'] + self.keys, dialect=CustomDialect)\n        if self.append_header:\n            self.writer.writeheader()\n\n    row_dict = OrderedDict({'epoch': epoch})\n    row_dict.update((key, handle_value(logs[key])) for key in self.keys)\n    self.writer.writerow(row_dict)\n    self.csv_file.flush()",
                "def on_train_end(self, logs=None):\n    self.csv_file.close()\n    self.writer = None",
                "def __init__(self,\n             on_epoch_begin=None,\n             on_epoch_end=None,\n             on_batch_begin=None,\n             on_batch_end=None,\n             on_train_begin=None,\n             on_train_end=None,\n             **kwargs):\n    super(LambdaCallback, self).__init__()\n    self.__dict__.update(kwargs)\n    if on_epoch_begin is not None:\n        self.on_epoch_begin = on_epoch_begin\n    else:\n        self.on_epoch_begin = lambda epoch, logs: None\n    if on_epoch_end is not None:\n        self.on_epoch_end = on_epoch_end\n    else:\n        self.on_epoch_end = lambda epoch, logs: None\n    if on_batch_begin is not None:\n        self.on_batch_begin = on_batch_begin\n    else:\n        self.on_batch_begin = lambda batch, logs: None\n    if on_batch_end is not None:\n        self.on_batch_end = on_batch_end\n    else:\n        self.on_batch_end = lambda batch, logs: None\n    if on_train_begin is not None:\n        self.on_train_begin = on_train_begin\n    else:\n        self.on_train_begin = lambda logs: None\n    if on_train_end is not None:\n        self.on_train_end = on_train_end\n    else:\n        self.on_train_end = lambda logs: None",
                "def handle_value(k):\n    is_zero_dim_ndarray = isinstance(k, np.ndarray) and k.ndim == 0\n    if isinstance(k, six.string_types):\n        return k\n    elif isinstance(k, Iterable) and not is_zero_dim_ndarray:\n        return '\"[%s]\"' % (', '.join(map(str, k)))\n    else:\n        return k",
                "def is_indexed_slices(grad):\n    return type(grad).__name__ == 'IndexedSlices'"
            ],
            "inscope_function_signatures": [
                "__init__(self, callbacks=None, queue_length=10)",
                "append(self, callback)",
                "set_params(self, params)",
                "set_model(self, model)",
                "on_epoch_begin(self, epoch, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "on_batch_begin(self, batch, logs=None)",
                "on_batch_end(self, batch, logs=None)",
                "on_train_begin(self, logs=None)",
                "on_train_end(self, logs=None)",
                "__iter__(self)",
                "__init__(self)",
                "set_params(self, params)",
                "set_model(self, model)",
                "on_epoch_begin(self, epoch, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "on_batch_begin(self, batch, logs=None)",
                "on_batch_end(self, batch, logs=None)",
                "on_train_begin(self, logs=None)",
                "on_train_end(self, logs=None)",
                "__init__(self, stateful_metrics=None)",
                "on_epoch_begin(self, epoch, logs=None)",
                "on_batch_end(self, batch, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "__init__(self)",
                "on_batch_end(self, batch, logs=None)",
                "__init__(self, count_mode='samples', stateful_metrics=None)",
                "on_train_begin(self, logs=None)",
                "on_epoch_begin(self, epoch, logs=None)",
                "on_batch_begin(self, batch, logs=None)",
                "on_batch_end(self, batch, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "on_train_begin(self, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "__init__(self, filepath, monitor='val_loss', verbose=0, save_best_only=False, save_weights_only=False, mode='auto', period=1)",
                "on_epoch_end(self, epoch, logs=None)",
                "__init__(self, monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto')",
                "on_train_begin(self, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "on_train_end(self, logs=None)",
                "__init__(self, root='http://localhost:9000', path='/publish/epoch/end/', field='data', headers=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "__init__(self, schedule, verbose=0)",
                "on_epoch_begin(self, epoch, logs=None)",
                "__init__(self, log_dir='./logs', histogram_freq=0, batch_size=32, write_graph=True, write_grads=False, write_images=False, embeddings_freq=0, embeddings_layer_names=None, embeddings_metadata=None)",
                "set_model(self, model)",
                "on_epoch_end(self, epoch, logs=None)",
                "on_train_end(self, _)",
                "__init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0)",
                "_reset(self)",
                "on_train_begin(self, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "in_cooldown(self)",
                "__init__(self, filename, separator=',', append=False)",
                "on_train_begin(self, logs=None)",
                "on_epoch_end(self, epoch, logs=None)",
                "on_train_end(self, logs=None)",
                "__init__(self, on_epoch_begin=None, on_epoch_end=None, on_batch_begin=None, on_batch_end=None, on_train_begin=None, on_train_end=None, **kwargs)",
                "handle_value(k)",
                "is_indexed_slices(grad)"
            ],
            "variables_in_file": {
                "ImportError": [
                    25,
                    572,
                    685,
                    686
                ],
                "requests": [
                    26,
                    571,
                    586,
                    583
                ],
                "object": [
                    146,
                    29
                ],
                "callbacks": [
                    40,
                    39
                ],
                "self.callbacks": [
                    129,
                    40,
                    139,
                    44,
                    76,
                    47,
                    112,
                    143,
                    51,
                    88,
                    62
                ],
                "self": [
                    40,
                    41,
                    44,
                    47,
                    51,
                    62,
                    64,
                    65,
                    66,
                    76,
                    88,
                    90,
                    91,
                    92,
                    93,
                    98,
                    108,
                    109,
                    110,
                    112,
                    114,
                    115,
                    116,
                    117,
                    129,
                    139,
                    143,
                    174,
                    175,
                    178,
                    181,
                    216,
                    218,
                    221,
                    222,
                    227,
                    230,
                    231,
                    233,
                    234,
                    236,
                    240,
                    241,
                    243,
                    244,
                    246,
                    254,
                    262,
                    283,
                    285,
                    287,
                    291,
                    293,
                    296,
                    297,
                    300,
                    301,
                    302,
                    303,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    313,
                    314,
                    319,
                    320,
                    322,
                    324,
                    326,
                    330,
                    331,
                    335,
                    337,
                    338,
                    339,
                    351,
                    352,
                    356,
                    358,
                    396,
                    397,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    412,
                    413,
                    415,
                    416,
                    418,
                    419,
                    420,
                    422,
                    423,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    435,
                    437,
                    438,
                    441,
                    443,
                    444,
                    445,
                    447,
                    449,
                    451,
                    453,
                    455,
                    456,
                    458,
                    484,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    500,
                    502,
                    504,
                    505,
                    507,
                    509,
                    510,
                    512,
                    516,
                    517,
                    518,
                    521,
                    526,
                    529,
                    530,
                    531,
                    533,
                    534,
                    535,
                    536,
                    539,
                    540,
                    563,
                    565,
                    566,
                    567,
                    568,
                    583,
                    584,
                    585,
                    588,
                    602,
                    603,
                    604,
                    607,
                    609,
                    611,
                    613,
                    617,
                    618,
                    680,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    718,
                    720,
                    721,
                    722,
                    727,
                    737,
                    774,
                    776,
                    777,
                    778,
                    780,
                    782,
                    783,
                    786,
                    790,
                    793,
                    797,
                    798,
                    800,
                    804,
                    814,
                    819,
                    822,
                    823,
                    825,
                    826,
                    827,
                    828,
                    830,
                    837,
                    838,
                    846,
                    848,
                    849,
                    851,
                    852,
                    853,
                    854,
                    864,
                    865,
                    868,
                    910,
                    912,
                    916,
                    917,
                    918,
                    919,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925,
                    926,
                    927,
                    932,
                    934,
                    936,
                    937,
                    938,
                    939,
                    940,
                    942,
                    943,
                    944,
                    945,
                    948,
                    952,
                    953,
                    958,
                    962,
                    963,
                    964,
                    966,
                    967,
                    968,
                    969,
                    970,
                    971,
                    972,
                    973,
                    974,
                    975,
                    976,
                    979,
                    980,
                    981,
                    984,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012,
                    1013,
                    1014,
                    1015,
                    1018,
                    1019,
                    1020,
                    1021,
                    1022,
                    1024,
                    1038,
                    1039,
                    1041,
                    1043,
                    1045,
                    1047,
                    1049,
                    1050,
                    1051,
                    1052,
                    1055,
                    1056,
                    1057,
                    1060,
                    1061,
                    1124,
                    1125,
                    1127,
                    1129,
                    1131,
                    1133,
                    1135,
                    1137,
                    1139,
                    1141,
                    1143,
                    1145,
                    1147,
                    1149
                ],
                "c": [
                    40
                ],
                "self.queue_length": [
                    65,
                    41,
                    66
                ],
                "queue_length": [
                    41
                ],
                "self.callbacks.append": [
                    44
                ],
                "callback": [
                    129,
                    130,
                    139,
                    44,
                    76,
                    77,
                    47,
                    48,
                    112,
                    113,
                    51,
                    52,
                    140,
                    88,
                    89,
                    62,
                    63
                ],
                "callback.set_params": [
                    48
                ],
                "params": [
                    48,
                    178
                ],
                "callback.set_model": [
                    52
                ],
                "model": [
                    728,
                    52,
                    181,
                    718
                ],
                "logs": [
                    128,
                    257,
                    130,
                    258,
                    1027,
                    521,
                    138,
                    140,
                    526,
                    1039,
                    1043,
                    1055,
                    426,
                    430,
                    432,
                    817,
                    951,
                    952,
                    953,
                    61,
                    317,
                    63,
                    318,
                    574,
                    577,
                    958,
                    325,
                    326,
                    75,
                    77,
                    334,
                    336,
                    337,
                    86,
                    89,
                    857,
                    225,
                    226,
                    355,
                    229,
                    357,
                    107,
                    239,
                    113,
                    244,
                    246
                ],
                "callback.on_epoch_begin": [
                    63
                ],
                "epoch": [
                    535,
                    1054,
                    301,
                    430,
                    823,
                    441,
                    63,
                    576,
                    451,
                    454,
                    77,
                    848,
                    978,
                    852,
                    855,
                    864,
                    611,
                    356,
                    613,
                    620
                ],
                "self._delta_t_batch": [
                    64,
                    110,
                    116,
                    117,
                    92,
                    93
                ],
                "self._delta_ts_batch_begin": [
                    65,
                    90,
                    91
                ],
                "deque": [
                    65,
                    66
                ],
                "self._delta_ts_batch_end": [
                    66,
                    115,
                    114
                ],
                "callback.on_epoch_end": [
                    77
                ],
                "t_before_callbacks": [
                    90,
                    111,
                    114,
                    87
                ],
                "time.time": [
                    98,
                    109,
                    110,
                    111,
                    114,
                    87,
                    90
                ],
                "time": [
                    98,
                    109,
                    110,
                    111,
                    114,
                    87,
                    90
                ],
                "callback.on_batch_begin": [
                    89
                ],
                "batch": [
                    89,
                    261,
                    113
                ],
                "self._delta_ts_batch_begin.append": [
                    90
                ],
                "delta_t_median": [
                    97,
                    115,
                    117,
                    120,
                    91,
                    93,
                    94
                ],
                "np.median": [
                    115,
                    91
                ],
                "np": [
                    260,
                    518,
                    1030,
                    412,
                    413,
                    415,
                    416,
                    419,
                    420,
                    422,
                    423,
                    939,
                    940,
                    942,
                    943,
                    578,
                    91,
                    614,
                    115,
                    500,
                    502,
                    505,
                    507,
                    509
                ],
                "warnings.warn": [
                    933,
                    523,
                    587,
                    494,
                    434,
                    690,
                    406,
                    118,
                    694,
                    698,
                    955,
                    702,
                    95
                ],
                "warnings": [
                    933,
                    523,
                    587,
                    494,
                    434,
                    690,
                    406,
                    118,
                    694,
                    698,
                    955,
                    702,
                    95
                ],
                "self._t_enter_batch": [
                    98,
                    109,
                    110
                ],
                "hasattr": [
                    771,
                    108,
                    607
                ],
                "callback.on_batch_end": [
                    113
                ],
                "self._delta_ts_batch_end.append": [
                    114
                ],
                "callback.on_train_begin": [
                    130
                ],
                "callback.on_train_end": [
                    140
                ],
                "iter": [
                    143
                ],
                "self.validation_data": [
                    822,
                    825,
                    819,
                    174
                ],
                "self.model": [
                    262,
                    1041,
                    786,
                    790,
                    536,
                    175,
                    181,
                    952,
                    826,
                    827,
                    828,
                    445,
                    830,
                    447,
                    838,
                    456,
                    458,
                    971,
                    718,
                    975,
                    722,
                    607,
                    609,
                    617
                ],
                "self.params": [
                    324,
                    296,
                    297,
                    303,
                    240,
                    305,
                    178,
                    335
                ],
                "Callback": [
                    871,
                    1064,
                    361,
                    202,
                    265,
                    461,
                    591,
                    623,
                    342,
                    249,
                    987,
                    543
                ],
                "stateful_metrics": [
                    216,
                    290,
                    291,
                    215
                ],
                "self.stateful_metrics": [
                    291,
                    293,
                    230,
                    243,
                    309,
                    216,
                    218
                ],
                "set": [
                    216,
                    218,
                    291,
                    293
                ],
                "self.seen": [
                    320,
                    322,
                    227,
                    330,
                    331,
                    339,
                    310,
                    246,
                    313,
                    221
                ],
                "self.totals": [
                    231,
                    233,
                    234,
                    236,
                    241,
                    244,
                    246,
                    222
                ],
                "batch_size": [
                    226,
                    227,
                    322,
                    234,
                    715,
                    236,
                    318
                ],
                "logs.get": [
                    226,
                    258,
                    521,
                    432,
                    953,
                    318
                ],
                "k": [
                    1030,
                    1031,
                    1032,
                    1033,
                    1034,
                    1036,
                    1043,
                    577,
                    579,
                    324,
                    325,
                    326,
                    581,
                    335,
                    336,
                    337,
                    229,
                    230,
                    231,
                    357,
                    233,
                    234,
                    358,
                    236,
                    240,
                    241,
                    243,
                    244,
                    246
                ],
                "v": [
                    577,
                    578,
                    579,
                    357,
                    229,
                    231,
                    358,
                    581,
                    234,
                    236
                ],
                "logs.items": [
                    857,
                    577,
                    357,
                    229
                ],
                "__init__": [
                    484,
                    1124,
                    680,
                    396,
                    910,
                    563,
                    1015,
                    602,
                    283,
                    254
                ],
                "super": [
                    484,
                    1124,
                    680,
                    396,
                    910,
                    563,
                    1015,
                    602,
                    283,
                    254
                ],
                "TerminateOnNaN": [
                    254
                ],
                "loss": [
                    258,
                    259,
                    260
                ],
                "np.isnan": [
                    260
                ],
                "np.isinf": [
                    260
                ],
                "print": [
                    450,
                    261,
                    454,
                    619,
                    301,
                    977,
                    439,
                    540
                ],
                "self.model.stop_training": [
                    536,
                    1041,
                    262
                ],
                "ProgbarLogger": [
                    283
                ],
                "count_mode": [
                    289,
                    284,
                    286
                ],
                "self.use_steps": [
                    319,
                    285,
                    302,
                    287
                ],
                "ValueError": [
                    608,
                    289,
                    615,
                    914,
                    820
                ],
                "str": [
                    289,
                    1034,
                    588,
                    797
                ],
                "self.verbose": [
                    449,
                    453,
                    296,
                    488,
                    330,
                    618,
                    300,
                    398,
                    976,
                    338,
                    308,
                    438,
                    920,
                    539,
                    604
                ],
                "self.epochs": [
                    297,
                    301
                ],
                "target": [
                    305,
                    306,
                    303
                ],
                "self.target": [
                    313,
                    306,
                    307,
                    330
                ],
                "self.progbar": [
                    339,
                    331,
                    307
                ],
                "Progbar": [
                    307
                ],
                "self.log_values": [
                    326,
                    331,
                    337,
                    339,
                    314
                ],
                "self.log_values.append": [
                    337,
                    326
                ],
                "self.progbar.update": [
                    339,
                    331
                ],
                "self.epoch": [
                    356,
                    351
                ],
                "self.history": [
                    352,
                    358
                ],
                "self.epoch.append": [
                    356
                ],
                "append": [
                    1010,
                    358
                ],
                "self.history.setdefault": [
                    358
                ],
                "ModelCheckpoint": [
                    396
                ],
                "self.monitor": [
                    418,
                    451,
                    486,
                    521,
                    938,
                    397,
                    526,
                    432,
                    912,
                    435,
                    504,
                    441,
                    953,
                    958
                ],
                "monitor": [
                    912,
                    397,
                    486
                ],
                "verbose": [
                    488,
                    604,
                    920,
                    398
                ],
                "self.filepath": [
                    430,
                    399
                ],
                "filepath": [
                    454,
                    456,
                    458,
                    430,
                    399,
                    442,
                    445,
                    447
                ],
                "self.save_best_only": [
                    400,
                    431
                ],
                "save_best_only": [
                    400
                ],
                "self.save_weights_only": [
                    401,
                    444,
                    455
                ],
                "save_weights_only": [
                    401
                ],
                "self.period": [
                    402,
                    428
                ],
                "period": [
                    402
                ],
                "self.epochs_since_last_save": [
                    403,
                    428,
                    427,
                    429
                ],
                "mode": [
                    493,
                    495,
                    497,
                    499,
                    405,
                    501,
                    407,
                    409,
                    411,
                    925,
                    414
                ],
                "RuntimeWarning": [
                    935,
                    526,
                    496,
                    435,
                    408,
                    958
                ],
                "self.monitor_op": [
                    419,
                    422,
                    518,
                    966,
                    939,
                    942,
                    529,
                    500,
                    437,
                    502,
                    505,
                    507,
                    412,
                    509,
                    926,
                    415
                ],
                "np.less": [
                    422,
                    518,
                    939,
                    500,
                    507,
                    412
                ],
                "self.best": [
                    416,
                    420,
                    518,
                    423,
                    966,
                    967,
                    940,
                    943,
                    529,
                    530,
                    437,
                    441,
                    443,
                    924,
                    413
                ],
                "np.Inf": [
                    416,
                    420,
                    518,
                    423,
                    940,
                    943,
                    413
                ],
                "np.greater": [
                    419,
                    942,
                    502,
                    505,
                    509,
                    415
                ],
                "self.monitor.startswith": [
                    418
                ],
                "self.filepath.format": [
                    430
                ],
                "current": [
                    954,
                    966,
                    967,
                    521,
                    522,
                    432,
                    433,
                    529,
                    530,
                    437,
                    953,
                    442,
                    443
                ],
                "self.model.save_weights": [
                    456,
                    445
                ],
                "self.model.save": [
                    458,
                    447
                ],
                "EarlyStopping": [
                    484
                ],
                "self.patience": [
                    919,
                    970,
                    534,
                    487
                ],
                "patience": [
                    919,
                    487
                ],
                "self.min_delta": [
                    512,
                    489,
                    510,
                    529
                ],
                "min_delta": [
                    489
                ],
                "self.wait": [
                    516,
                    964,
                    968,
                    490,
                    970,
                    945,
                    531,
                    980,
                    533,
                    534,
                    981,
                    923
                ],
                "self.stopped_epoch": [
                    517,
                    491,
                    535,
                    539,
                    540
                ],
                "join": [
                    1034,
                    958,
                    526
                ],
                "list": [
                    793,
                    958,
                    526
                ],
                "logs.keys": [
                    958,
                    526,
                    1039
                ],
                "RemoteMonitor": [
                    563
                ],
                "self.root": [
                    588,
                    565,
                    583
                ],
                "root": [
                    565
                ],
                "self.path": [
                    566,
                    583
                ],
                "path": [
                    566
                ],
                "self.field": [
                    584,
                    567
                ],
                "field": [
                    567
                ],
                "self.headers": [
                    568,
                    585
                ],
                "headers": [
                    568
                ],
                "send": [
                    576,
                    579,
                    581,
                    584,
                    575
                ],
                "isinstance": [
                    578,
                    614,
                    1031,
                    1030,
                    1033,
                    797
                ],
                "np.ndarray": [
                    578,
                    1030
                ],
                "np.generic": [
                    578
                ],
                "v.item": [
                    579
                ],
                "requests.post": [
                    583
                ],
                "json.dumps": [
                    584
                ],
                "json": [
                    584
                ],
                "requests.exceptions.RequestException": [
                    586
                ],
                "requests.exceptions": [
                    586
                ],
                "LearningRateScheduler": [
                    602
                ],
                "self.schedule": [
                    611,
                    603,
                    613
                ],
                "schedule": [
                    603
                ],
                "self.model.optimizer": [
                    609,
                    617,
                    971,
                    975,
                    952,
                    607
                ],
                "lr": [
                    609,
                    611,
                    613,
                    614,
                    617,
                    620
                ],
                "float": [
                    609,
                    971,
                    614
                ],
                "K.get_value": [
                    952,
                    609,
                    971
                ],
                "K": [
                    609,
                    739,
                    743,
                    617,
                    971,
                    749,
                    719,
                    688,
                    720,
                    753,
                    975,
                    831,
                    952,
                    767
                ],
                "self.model.optimizer.lr": [
                    609,
                    617,
                    971,
                    975,
                    952
                ],
                "TypeError": [
                    612
                ],
                "np.float32": [
                    614
                ],
                "np.float64": [
                    614
                ],
                "K.set_value": [
                    617,
                    975
                ],
                "TensorBoard": [
                    680
                ],
                "K.backend": [
                    688,
                    719
                ],
                "histogram_freq": [
                    689,
                    707,
                    692
                ],
                "write_graph": [
                    696,
                    709,
                    693
                ],
                "write_images": [
                    697,
                    700,
                    711
                ],
                "embeddings_freq": [
                    704,
                    701,
                    712
                ],
                "self.log_dir": [
                    777,
                    706,
                    780,
                    804
                ],
                "log_dir": [
                    706
                ],
                "self.histogram_freq": [
                    707,
                    721,
                    819,
                    822,
                    823
                ],
                "self.merged": [
                    721,
                    708,
                    774,
                    846
                ],
                "self.write_graph": [
                    776,
                    709
                ],
                "self.write_grads": [
                    710,
                    727
                ],
                "write_grads": [
                    710
                ],
                "self.write_images": [
                    737,
                    711
                ],
                "self.embeddings_freq": [
                    712,
                    851,
                    852,
                    782
                ],
                "self.embeddings_layer_names": [
                    713,
                    783
                ],
                "embeddings_layer_names": [
                    713,
                    783,
                    785,
                    786,
                    791
                ],
                "self.embeddings_metadata": [
                    800,
                    714,
                    797,
                    798
                ],
                "embeddings_metadata": [
                    800,
                    714,
                    811,
                    812,
                    795,
                    798
                ],
                "self.batch_size": [
                    849,
                    715,
                    837
                ],
                "self.sess": [
                    720,
                    778,
                    853,
                    846
                ],
                "K.get_session": [
                    720
                ],
                "layer": [
                    771,
                    772,
                    773,
                    791,
                    722,
                    786,
                    724,
                    787,
                    789,
                    790
                ],
                "self.model.layers": [
                    722,
                    786,
                    790
                ],
                "weight": [
                    738,
                    724,
                    725,
                    726,
                    729
                ],
                "layer.weights": [
                    724,
                    789
                ],
                "mapped_weight_name": [
                    736,
                    769,
                    725,
                    726
                ],
                "weight.name.replace": [
                    725
                ],
                "weight.name": [
                    725
                ],
                "tf.summary.histogram": [
                    736,
                    772,
                    726
                ],
                "tf.summary": [
                    736,
                    769,
                    772,
                    774,
                    777,
                    780,
                    726
                ],
                "tf": [
                    736,
                    769,
                    738,
                    772,
                    742,
                    774,
                    744,
                    777,
                    780,
                    752,
                    754,
                    726,
                    759,
                    793,
                    860
                ],
                "grads": [
                    728,
                    736,
                    733,
                    735
                ],
                "model.optimizer.get_gradients": [
                    728
                ],
                "model.optimizer": [
                    728
                ],
                "model.total_loss": [
                    728
                ],
                "__name__": [
                    787,
                    732
                ],
                "type": [
                    787,
                    732
                ],
                "grad": [
                    732,
                    734,
                    735
                ],
                "is_indexed_slices": [
                    734
                ],
                "grad.values": [
                    734
                ],
                "format": [
                    736,
                    772
                ],
                "w_img": [
                    769,
                    738,
                    739,
                    742,
                    743,
                    744,
                    752,
                    753,
                    754,
                    759,
                    767
                ],
                "tf.squeeze": [
                    738
                ],
                "shape": [
                    768,
                    834,
                    739,
                    740,
                    741,
                    743,
                    745,
                    746,
                    748,
                    753,
                    754,
                    755,
                    756,
                    758,
                    760,
                    767
                ],
                "K.int_shape": [
                    767,
                    753,
                    739,
                    743
                ],
                "len": [
                    768,
                    833,
                    740,
                    748,
                    844,
                    758,
                    1021
                ],
                "tf.transpose": [
                    752,
                    742
                ],
                "tf.reshape": [
                    744,
                    754,
                    759
                ],
                "K.image_data_format": [
                    749
                ],
                "tf.summary.image": [
                    769
                ],
                "layer.name": [
                    786,
                    772,
                    789,
                    791
                ],
                "layer.output": [
                    773
                ],
                "tf.summary.merge_all": [
                    774
                ],
                "self.writer": [
                    864,
                    865,
                    1056,
                    868,
                    1061,
                    777,
                    780,
                    814,
                    848,
                    1011,
                    1045,
                    1049,
                    1052
                ],
                "tf.summary.FileWriter": [
                    777,
                    780
                ],
                "self.sess.graph": [
                    778
                ],
                "embeddings": [
                    793,
                    807,
                    789,
                    801
                ],
                "self.saver": [
                    793,
                    853
                ],
                "tf.train.Saver": [
                    793
                ],
                "tf.train": [
                    793
                ],
                "embeddings.values": [
                    793
                ],
                "layer_name": [
                    800,
                    801,
                    807,
                    811,
                    812
                ],
                "embeddings.keys": [
                    801
                ],
                "config": [
                    808,
                    803,
                    814
                ],
                "projector.ProjectorConfig": [
                    803
                ],
                "projector": [
                    803,
                    814
                ],
                "self.embeddings_ckpt_path": [
                    851,
                    804,
                    854
                ],
                "os.path.join": [
                    804
                ],
                "os.path": [
                    1019,
                    804
                ],
                "os": [
                    1019,
                    804,
                    1014
                ],
                "tensor": [
                    809,
                    807
                ],
                "embeddings.items": [
                    807
                ],
                "embedding": [
                    808,
                    809,
                    812
                ],
                "config.embeddings.add": [
                    808
                ],
                "config.embeddings": [
                    808
                ],
                "embedding.tensor_name": [
                    809
                ],
                "tensor.name": [
                    809
                ],
                "embedding.metadata_path": [
                    812
                ],
                "projector.visualize_embeddings": [
                    814
                ],
                "val_data": [
                    833,
                    834,
                    840,
                    841,
                    843,
                    825
                ],
                "tensors": [
                    833,
                    844,
                    845,
                    826,
                    831
                ],
                "self.model.inputs": [
                    826
                ],
                "self.model.targets": [
                    827
                ],
                "self.model.sample_weights": [
                    828
                ],
                "self.model.uses_learning_phase": [
                    838,
                    830
                ],
                "K.learning_phase": [
                    831
                ],
                "val_size": [
                    834,
                    836,
                    837
                ],
                "i": [
                    835,
                    836,
                    837,
                    840,
                    843,
                    849
                ],
                "step": [
                    840,
                    843,
                    837
                ],
                "min": [
                    837
                ],
                "batch_val": [
                    840,
                    841,
                    843,
                    844,
                    845
                ],
                "x": [
                    840,
                    843
                ],
                "batch_val.append": [
                    841
                ],
                "feed_dict": [
                    845,
                    846
                ],
                "dict": [
                    1043,
                    845
                ],
                "zip": [
                    845
                ],
                "result": [
                    846,
                    847
                ],
                "self.sess.run": [
                    846
                ],
                "summary_str": [
                    848,
                    847
                ],
                "self.writer.add_summary": [
                    848,
                    864
                ],
                "self.saver.save": [
                    853
                ],
                "name": [
                    857,
                    858,
                    863
                ],
                "value": [
                    857,
                    862
                ],
                "summary": [
                    864,
                    860,
                    861
                ],
                "tf.Summary": [
                    860
                ],
                "summary_value": [
                    861,
                    862,
                    863
                ],
                "summary.value.add": [
                    861
                ],
                "summary.value": [
                    861
                ],
                "summary_value.simple_value": [
                    862
                ],
                "value.item": [
                    862
                ],
                "summary_value.tag": [
                    863
                ],
                "self.writer.flush": [
                    865
                ],
                "self.writer.close": [
                    868
                ],
                "ReduceLROnPlateau": [
                    910
                ],
                "factor": [
                    913,
                    916
                ],
                "self.factor": [
                    916,
                    973
                ],
                "self.min_lr": [
                    972,
                    917,
                    974
                ],
                "min_lr": [
                    917
                ],
                "self.epsilon": [
                    939,
                    942,
                    918
                ],
                "epsilon": [
                    918
                ],
                "self.cooldown": [
                    921,
                    979
                ],
                "cooldown": [
                    921
                ],
                "self.cooldown_counter": [
                    963,
                    944,
                    979,
                    984,
                    922
                ],
                "self.mode": [
                    932,
                    934,
                    936,
                    937,
                    938,
                    925
                ],
                "self._reset": [
                    948,
                    927
                ],
                "a": [
                    939,
                    942
                ],
                "b": [
                    939,
                    942
                ],
                "self.in_cooldown": [
                    969,
                    962
                ],
                "old_lr": [
                    971,
                    972,
                    973
                ],
                "new_lr": [
                    978,
                    973,
                    974,
                    975
                ],
                "max": [
                    974
                ],
                "self.sep": [
                    1008,
                    1047
                ],
                "separator": [
                    1008
                ],
                "self.filename": [
                    1024,
                    1009,
                    1019,
                    1020,
                    1022
                ],
                "filename": [
                    1009
                ],
                "self.append": [
                    1010,
                    1018
                ],
                "self.keys": [
                    1038,
                    1039,
                    1043,
                    1012,
                    1050,
                    1055
                ],
                "self.append_header": [
                    1021,
                    1051,
                    1013
                ],
                "self.file_flags": [
                    1024,
                    1020,
                    1014,
                    1022
                ],
                "six.PY2": [
                    1014
                ],
                "six": [
                    1014,
                    1031
                ],
                "os.name": [
                    1014
                ],
                "CSVLogger": [
                    1015
                ],
                "os.path.exists": [
                    1019
                ],
                "open": [
                    1024,
                    1020,
                    1022
                ],
                "f": [
                    1020,
                    1021
                ],
                "bool": [
                    1021
                ],
                "f.readline": [
                    1021
                ],
                "self.csv_file": [
                    1024,
                    1057,
                    1060,
                    1049,
                    1022
                ],
                "is_zero_dim_ndarray": [
                    1033,
                    1030
                ],
                "k.ndim": [
                    1030
                ],
                "six.string_types": [
                    1031
                ],
                "Iterable": [
                    1033
                ],
                "map": [
                    1034
                ],
                "sorted": [
                    1039
                ],
                "csv.excel": [
                    1046
                ],
                "csv": [
                    1049,
                    1046
                ],
                "delimiter": [
                    1047
                ],
                "csv.DictWriter": [
                    1049
                ],
                "CustomDialect": [
                    1050
                ],
                "self.writer.writeheader": [
                    1052
                ],
                "row_dict": [
                    1056,
                    1054,
                    1055
                ],
                "OrderedDict": [
                    1054
                ],
                "row_dict.update": [
                    1055
                ],
                "key": [
                    1055
                ],
                "handle_value": [
                    1055
                ],
                "self.writer.writerow": [
                    1056
                ],
                "self.csv_file.flush": [
                    1057
                ],
                "self.csv_file.close": [
                    1060
                ],
                "LambdaCallback": [
                    1124
                ],
                "self.__dict__.update": [
                    1125
                ],
                "self.__dict__": [
                    1125
                ],
                "kwargs": [
                    1125
                ],
                "on_epoch_begin": [
                    1126,
                    1127
                ],
                "self.on_epoch_begin": [
                    1129,
                    1127
                ],
                "on_epoch_end": [
                    1130,
                    1131
                ],
                "self.on_epoch_end": [
                    1131,
                    1133
                ],
                "on_batch_begin": [
                    1134,
                    1135
                ],
                "self.on_batch_begin": [
                    1137,
                    1135
                ],
                "on_batch_end": [
                    1138,
                    1139
                ],
                "self.on_batch_end": [
                    1139,
                    1141
                ],
                "on_train_begin": [
                    1142,
                    1143
                ],
                "self.on_train_begin": [
                    1145,
                    1143
                ],
                "on_train_end": [
                    1146,
                    1147
                ],
                "self.on_train_end": [
                    1147,
                    1149
                ]
            },
            "filtered_variables_in_file": {
                "requests": [
                    26,
                    571,
                    586,
                    583
                ],
                "callbacks": [
                    40,
                    39
                ],
                "self.callbacks": [
                    129,
                    40,
                    139,
                    44,
                    76,
                    47,
                    112,
                    143,
                    51,
                    88,
                    62
                ],
                "self": [
                    40,
                    41,
                    44,
                    47,
                    51,
                    62,
                    64,
                    65,
                    66,
                    76,
                    88,
                    90,
                    91,
                    92,
                    93,
                    98,
                    108,
                    109,
                    110,
                    112,
                    114,
                    115,
                    116,
                    117,
                    129,
                    139,
                    143,
                    174,
                    175,
                    178,
                    181,
                    216,
                    218,
                    221,
                    222,
                    227,
                    230,
                    231,
                    233,
                    234,
                    236,
                    240,
                    241,
                    243,
                    244,
                    246,
                    254,
                    262,
                    283,
                    285,
                    287,
                    291,
                    293,
                    296,
                    297,
                    300,
                    301,
                    302,
                    303,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    313,
                    314,
                    319,
                    320,
                    322,
                    324,
                    326,
                    330,
                    331,
                    335,
                    337,
                    338,
                    339,
                    351,
                    352,
                    356,
                    358,
                    396,
                    397,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    412,
                    413,
                    415,
                    416,
                    418,
                    419,
                    420,
                    422,
                    423,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    435,
                    437,
                    438,
                    441,
                    443,
                    444,
                    445,
                    447,
                    449,
                    451,
                    453,
                    455,
                    456,
                    458,
                    484,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    500,
                    502,
                    504,
                    505,
                    507,
                    509,
                    510,
                    512,
                    516,
                    517,
                    518,
                    521,
                    526,
                    529,
                    530,
                    531,
                    533,
                    534,
                    535,
                    536,
                    539,
                    540,
                    563,
                    565,
                    566,
                    567,
                    568,
                    583,
                    584,
                    585,
                    588,
                    602,
                    603,
                    604,
                    607,
                    609,
                    611,
                    613,
                    617,
                    618,
                    680,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    718,
                    720,
                    721,
                    722,
                    727,
                    737,
                    774,
                    776,
                    777,
                    778,
                    780,
                    782,
                    783,
                    786,
                    790,
                    793,
                    797,
                    798,
                    800,
                    804,
                    814,
                    819,
                    822,
                    823,
                    825,
                    826,
                    827,
                    828,
                    830,
                    837,
                    838,
                    846,
                    848,
                    849,
                    851,
                    852,
                    853,
                    854,
                    864,
                    865,
                    868,
                    910,
                    912,
                    916,
                    917,
                    918,
                    919,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925,
                    926,
                    927,
                    932,
                    934,
                    936,
                    937,
                    938,
                    939,
                    940,
                    942,
                    943,
                    944,
                    945,
                    948,
                    952,
                    953,
                    958,
                    962,
                    963,
                    964,
                    966,
                    967,
                    968,
                    969,
                    970,
                    971,
                    972,
                    973,
                    974,
                    975,
                    976,
                    979,
                    980,
                    981,
                    984,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012,
                    1013,
                    1014,
                    1015,
                    1018,
                    1019,
                    1020,
                    1021,
                    1022,
                    1024,
                    1038,
                    1039,
                    1041,
                    1043,
                    1045,
                    1047,
                    1049,
                    1050,
                    1051,
                    1052,
                    1055,
                    1056,
                    1057,
                    1060,
                    1061,
                    1124,
                    1125,
                    1127,
                    1129,
                    1131,
                    1133,
                    1135,
                    1137,
                    1139,
                    1141,
                    1143,
                    1145,
                    1147,
                    1149
                ],
                "c": [
                    40
                ],
                "self.queue_length": [
                    65,
                    41,
                    66
                ],
                "queue_length": [
                    41
                ],
                "self.callbacks.append": [
                    44
                ],
                "callback": [
                    129,
                    130,
                    139,
                    44,
                    76,
                    77,
                    47,
                    48,
                    112,
                    113,
                    51,
                    52,
                    140,
                    88,
                    89,
                    62,
                    63
                ],
                "callback.set_params": [
                    48
                ],
                "params": [
                    48,
                    178
                ],
                "callback.set_model": [
                    52
                ],
                "model": [
                    728,
                    52,
                    181,
                    718
                ],
                "logs": [
                    128,
                    257,
                    130,
                    258,
                    1027,
                    521,
                    138,
                    140,
                    526,
                    1039,
                    1043,
                    1055,
                    426,
                    430,
                    432,
                    817,
                    951,
                    952,
                    953,
                    61,
                    317,
                    63,
                    318,
                    574,
                    577,
                    958,
                    325,
                    326,
                    75,
                    77,
                    334,
                    336,
                    337,
                    86,
                    89,
                    857,
                    225,
                    226,
                    355,
                    229,
                    357,
                    107,
                    239,
                    113,
                    244,
                    246
                ],
                "callback.on_epoch_begin": [
                    63
                ],
                "epoch": [
                    535,
                    1054,
                    301,
                    430,
                    823,
                    441,
                    63,
                    576,
                    451,
                    454,
                    77,
                    848,
                    978,
                    852,
                    855,
                    864,
                    611,
                    356,
                    613,
                    620
                ],
                "self._delta_t_batch": [
                    64,
                    110,
                    116,
                    117,
                    92,
                    93
                ],
                "self._delta_ts_batch_begin": [
                    65,
                    90,
                    91
                ],
                "deque": [
                    65,
                    66
                ],
                "self._delta_ts_batch_end": [
                    66,
                    115,
                    114
                ],
                "callback.on_epoch_end": [
                    77
                ],
                "t_before_callbacks": [
                    90,
                    111,
                    114,
                    87
                ],
                "time.time": [
                    98,
                    109,
                    110,
                    111,
                    114,
                    87,
                    90
                ],
                "time": [
                    98,
                    109,
                    110,
                    111,
                    114,
                    87,
                    90
                ],
                "callback.on_batch_begin": [
                    89
                ],
                "batch": [
                    89,
                    261,
                    113
                ],
                "self._delta_ts_batch_begin.append": [
                    90
                ],
                "delta_t_median": [
                    97,
                    115,
                    117,
                    120,
                    91,
                    93,
                    94
                ],
                "np.median": [
                    115,
                    91
                ],
                "np": [
                    260,
                    518,
                    1030,
                    412,
                    413,
                    415,
                    416,
                    419,
                    420,
                    422,
                    423,
                    939,
                    940,
                    942,
                    943,
                    578,
                    91,
                    614,
                    115,
                    500,
                    502,
                    505,
                    507,
                    509
                ],
                "warnings.warn": [
                    933,
                    523,
                    587,
                    494,
                    434,
                    690,
                    406,
                    118,
                    694,
                    698,
                    955,
                    702,
                    95
                ],
                "warnings": [
                    933,
                    523,
                    587,
                    494,
                    434,
                    690,
                    406,
                    118,
                    694,
                    698,
                    955,
                    702,
                    95
                ],
                "self._t_enter_batch": [
                    98,
                    109,
                    110
                ],
                "callback.on_batch_end": [
                    113
                ],
                "self._delta_ts_batch_end.append": [
                    114
                ],
                "callback.on_train_begin": [
                    130
                ],
                "callback.on_train_end": [
                    140
                ],
                "self.validation_data": [
                    822,
                    825,
                    819,
                    174
                ],
                "self.model": [
                    262,
                    1041,
                    786,
                    790,
                    536,
                    175,
                    181,
                    952,
                    826,
                    827,
                    828,
                    445,
                    830,
                    447,
                    838,
                    456,
                    458,
                    971,
                    718,
                    975,
                    722,
                    607,
                    609,
                    617
                ],
                "self.params": [
                    324,
                    296,
                    297,
                    303,
                    240,
                    305,
                    178,
                    335
                ],
                "Callback": [
                    871,
                    1064,
                    361,
                    202,
                    265,
                    461,
                    591,
                    623,
                    342,
                    249,
                    987,
                    543
                ],
                "stateful_metrics": [
                    216,
                    290,
                    291,
                    215
                ],
                "self.stateful_metrics": [
                    291,
                    293,
                    230,
                    243,
                    309,
                    216,
                    218
                ],
                "self.seen": [
                    320,
                    322,
                    227,
                    330,
                    331,
                    339,
                    310,
                    246,
                    313,
                    221
                ],
                "self.totals": [
                    231,
                    233,
                    234,
                    236,
                    241,
                    244,
                    246,
                    222
                ],
                "batch_size": [
                    226,
                    227,
                    322,
                    234,
                    715,
                    236,
                    318
                ],
                "logs.get": [
                    226,
                    258,
                    521,
                    432,
                    953,
                    318
                ],
                "k": [
                    1030,
                    1031,
                    1032,
                    1033,
                    1034,
                    1036,
                    1043,
                    577,
                    579,
                    324,
                    325,
                    326,
                    581,
                    335,
                    336,
                    337,
                    229,
                    230,
                    231,
                    357,
                    233,
                    234,
                    358,
                    236,
                    240,
                    241,
                    243,
                    244,
                    246
                ],
                "v": [
                    577,
                    578,
                    579,
                    357,
                    229,
                    231,
                    358,
                    581,
                    234,
                    236
                ],
                "logs.items": [
                    857,
                    577,
                    357,
                    229
                ],
                "__init__": [
                    484,
                    1124,
                    680,
                    396,
                    910,
                    563,
                    1015,
                    602,
                    283,
                    254
                ],
                "TerminateOnNaN": [
                    254
                ],
                "loss": [
                    258,
                    259,
                    260
                ],
                "np.isnan": [
                    260
                ],
                "np.isinf": [
                    260
                ],
                "self.model.stop_training": [
                    536,
                    1041,
                    262
                ],
                "ProgbarLogger": [
                    283
                ],
                "count_mode": [
                    289,
                    284,
                    286
                ],
                "self.use_steps": [
                    319,
                    285,
                    302,
                    287
                ],
                "self.verbose": [
                    449,
                    453,
                    296,
                    488,
                    330,
                    618,
                    300,
                    398,
                    976,
                    338,
                    308,
                    438,
                    920,
                    539,
                    604
                ],
                "self.epochs": [
                    297,
                    301
                ],
                "target": [
                    305,
                    306,
                    303
                ],
                "self.target": [
                    313,
                    306,
                    307,
                    330
                ],
                "self.progbar": [
                    339,
                    331,
                    307
                ],
                "Progbar": [
                    307
                ],
                "self.log_values": [
                    326,
                    331,
                    337,
                    339,
                    314
                ],
                "self.log_values.append": [
                    337,
                    326
                ],
                "self.progbar.update": [
                    339,
                    331
                ],
                "self.epoch": [
                    356,
                    351
                ],
                "self.history": [
                    352,
                    358
                ],
                "self.epoch.append": [
                    356
                ],
                "append": [
                    1010,
                    358
                ],
                "self.history.setdefault": [
                    358
                ],
                "ModelCheckpoint": [
                    396
                ],
                "self.monitor": [
                    418,
                    451,
                    486,
                    521,
                    938,
                    397,
                    526,
                    432,
                    912,
                    435,
                    504,
                    441,
                    953,
                    958
                ],
                "monitor": [
                    912,
                    397,
                    486
                ],
                "verbose": [
                    488,
                    604,
                    920,
                    398
                ],
                "self.filepath": [
                    430,
                    399
                ],
                "filepath": [
                    454,
                    456,
                    458,
                    430,
                    399,
                    442,
                    445,
                    447
                ],
                "self.save_best_only": [
                    400,
                    431
                ],
                "save_best_only": [
                    400
                ],
                "self.save_weights_only": [
                    401,
                    444,
                    455
                ],
                "save_weights_only": [
                    401
                ],
                "self.period": [
                    402,
                    428
                ],
                "period": [
                    402
                ],
                "self.epochs_since_last_save": [
                    403,
                    428,
                    427,
                    429
                ],
                "mode": [
                    493,
                    495,
                    497,
                    499,
                    405,
                    501,
                    407,
                    409,
                    411,
                    925,
                    414
                ],
                "self.monitor_op": [
                    419,
                    422,
                    518,
                    966,
                    939,
                    942,
                    529,
                    500,
                    437,
                    502,
                    505,
                    507,
                    412,
                    509,
                    926,
                    415
                ],
                "np.less": [
                    422,
                    518,
                    939,
                    500,
                    507,
                    412
                ],
                "self.best": [
                    416,
                    420,
                    518,
                    423,
                    966,
                    967,
                    940,
                    943,
                    529,
                    530,
                    437,
                    441,
                    443,
                    924,
                    413
                ],
                "np.Inf": [
                    416,
                    420,
                    518,
                    423,
                    940,
                    943,
                    413
                ],
                "np.greater": [
                    419,
                    942,
                    502,
                    505,
                    509,
                    415
                ],
                "self.monitor.startswith": [
                    418
                ],
                "self.filepath.format": [
                    430
                ],
                "current": [
                    954,
                    966,
                    967,
                    521,
                    522,
                    432,
                    433,
                    529,
                    530,
                    437,
                    953,
                    442,
                    443
                ],
                "self.model.save_weights": [
                    456,
                    445
                ],
                "self.model.save": [
                    458,
                    447
                ],
                "EarlyStopping": [
                    484
                ],
                "self.patience": [
                    919,
                    970,
                    534,
                    487
                ],
                "patience": [
                    919,
                    487
                ],
                "self.min_delta": [
                    512,
                    489,
                    510,
                    529
                ],
                "min_delta": [
                    489
                ],
                "self.wait": [
                    516,
                    964,
                    968,
                    490,
                    970,
                    945,
                    531,
                    980,
                    533,
                    534,
                    981,
                    923
                ],
                "self.stopped_epoch": [
                    517,
                    491,
                    535,
                    539,
                    540
                ],
                "join": [
                    1034,
                    958,
                    526
                ],
                "logs.keys": [
                    958,
                    526,
                    1039
                ],
                "RemoteMonitor": [
                    563
                ],
                "self.root": [
                    588,
                    565,
                    583
                ],
                "root": [
                    565
                ],
                "self.path": [
                    566,
                    583
                ],
                "path": [
                    566
                ],
                "self.field": [
                    584,
                    567
                ],
                "field": [
                    567
                ],
                "self.headers": [
                    568,
                    585
                ],
                "headers": [
                    568
                ],
                "send": [
                    576,
                    579,
                    581,
                    584,
                    575
                ],
                "np.ndarray": [
                    578,
                    1030
                ],
                "np.generic": [
                    578
                ],
                "v.item": [
                    579
                ],
                "requests.post": [
                    583
                ],
                "json.dumps": [
                    584
                ],
                "json": [
                    584
                ],
                "requests.exceptions.RequestException": [
                    586
                ],
                "requests.exceptions": [
                    586
                ],
                "LearningRateScheduler": [
                    602
                ],
                "self.schedule": [
                    611,
                    603,
                    613
                ],
                "schedule": [
                    603
                ],
                "self.model.optimizer": [
                    609,
                    617,
                    971,
                    975,
                    952,
                    607
                ],
                "lr": [
                    609,
                    611,
                    613,
                    614,
                    617,
                    620
                ],
                "K.get_value": [
                    952,
                    609,
                    971
                ],
                "K": [
                    609,
                    739,
                    743,
                    617,
                    971,
                    749,
                    719,
                    688,
                    720,
                    753,
                    975,
                    831,
                    952,
                    767
                ],
                "self.model.optimizer.lr": [
                    609,
                    617,
                    971,
                    975,
                    952
                ],
                "np.float32": [
                    614
                ],
                "np.float64": [
                    614
                ],
                "K.set_value": [
                    617,
                    975
                ],
                "TensorBoard": [
                    680
                ],
                "K.backend": [
                    688,
                    719
                ],
                "histogram_freq": [
                    689,
                    707,
                    692
                ],
                "write_graph": [
                    696,
                    709,
                    693
                ],
                "write_images": [
                    697,
                    700,
                    711
                ],
                "embeddings_freq": [
                    704,
                    701,
                    712
                ],
                "self.log_dir": [
                    777,
                    706,
                    780,
                    804
                ],
                "log_dir": [
                    706
                ],
                "self.histogram_freq": [
                    707,
                    721,
                    819,
                    822,
                    823
                ],
                "self.merged": [
                    721,
                    708,
                    774,
                    846
                ],
                "self.write_graph": [
                    776,
                    709
                ],
                "self.write_grads": [
                    710,
                    727
                ],
                "write_grads": [
                    710
                ],
                "self.write_images": [
                    737,
                    711
                ],
                "self.embeddings_freq": [
                    712,
                    851,
                    852,
                    782
                ],
                "self.embeddings_layer_names": [
                    713,
                    783
                ],
                "embeddings_layer_names": [
                    713,
                    783,
                    785,
                    786,
                    791
                ],
                "self.embeddings_metadata": [
                    800,
                    714,
                    797,
                    798
                ],
                "embeddings_metadata": [
                    800,
                    714,
                    811,
                    812,
                    795,
                    798
                ],
                "self.batch_size": [
                    849,
                    715,
                    837
                ],
                "self.sess": [
                    720,
                    778,
                    853,
                    846
                ],
                "K.get_session": [
                    720
                ],
                "layer": [
                    771,
                    772,
                    773,
                    791,
                    722,
                    786,
                    724,
                    787,
                    789,
                    790
                ],
                "self.model.layers": [
                    722,
                    786,
                    790
                ],
                "weight": [
                    738,
                    724,
                    725,
                    726,
                    729
                ],
                "layer.weights": [
                    724,
                    789
                ],
                "mapped_weight_name": [
                    736,
                    769,
                    725,
                    726
                ],
                "weight.name.replace": [
                    725
                ],
                "weight.name": [
                    725
                ],
                "tf.summary.histogram": [
                    736,
                    772,
                    726
                ],
                "tf.summary": [
                    736,
                    769,
                    772,
                    774,
                    777,
                    780,
                    726
                ],
                "tf": [
                    736,
                    769,
                    738,
                    772,
                    742,
                    774,
                    744,
                    777,
                    780,
                    752,
                    754,
                    726,
                    759,
                    793,
                    860
                ],
                "grads": [
                    728,
                    736,
                    733,
                    735
                ],
                "model.optimizer.get_gradients": [
                    728
                ],
                "model.optimizer": [
                    728
                ],
                "model.total_loss": [
                    728
                ],
                "grad": [
                    732,
                    734,
                    735
                ],
                "is_indexed_slices": [
                    734
                ],
                "grad.values": [
                    734
                ],
                "w_img": [
                    769,
                    738,
                    739,
                    742,
                    743,
                    744,
                    752,
                    753,
                    754,
                    759,
                    767
                ],
                "tf.squeeze": [
                    738
                ],
                "shape": [
                    768,
                    834,
                    739,
                    740,
                    741,
                    743,
                    745,
                    746,
                    748,
                    753,
                    754,
                    755,
                    756,
                    758,
                    760,
                    767
                ],
                "K.int_shape": [
                    767,
                    753,
                    739,
                    743
                ],
                "tf.transpose": [
                    752,
                    742
                ],
                "tf.reshape": [
                    744,
                    754,
                    759
                ],
                "K.image_data_format": [
                    749
                ],
                "tf.summary.image": [
                    769
                ],
                "layer.name": [
                    786,
                    772,
                    789,
                    791
                ],
                "layer.output": [
                    773
                ],
                "tf.summary.merge_all": [
                    774
                ],
                "self.writer": [
                    864,
                    865,
                    1056,
                    868,
                    1061,
                    777,
                    780,
                    814,
                    848,
                    1011,
                    1045,
                    1049,
                    1052
                ],
                "tf.summary.FileWriter": [
                    777,
                    780
                ],
                "self.sess.graph": [
                    778
                ],
                "embeddings": [
                    793,
                    807,
                    789,
                    801
                ],
                "self.saver": [
                    793,
                    853
                ],
                "tf.train.Saver": [
                    793
                ],
                "tf.train": [
                    793
                ],
                "embeddings.values": [
                    793
                ],
                "layer_name": [
                    800,
                    801,
                    807,
                    811,
                    812
                ],
                "embeddings.keys": [
                    801
                ],
                "config": [
                    808,
                    803,
                    814
                ],
                "projector.ProjectorConfig": [
                    803
                ],
                "projector": [
                    803,
                    814
                ],
                "self.embeddings_ckpt_path": [
                    851,
                    804,
                    854
                ],
                "os.path.join": [
                    804
                ],
                "os.path": [
                    1019,
                    804
                ],
                "os": [
                    1019,
                    804,
                    1014
                ],
                "tensor": [
                    809,
                    807
                ],
                "embeddings.items": [
                    807
                ],
                "embedding": [
                    808,
                    809,
                    812
                ],
                "config.embeddings.add": [
                    808
                ],
                "config.embeddings": [
                    808
                ],
                "embedding.tensor_name": [
                    809
                ],
                "tensor.name": [
                    809
                ],
                "embedding.metadata_path": [
                    812
                ],
                "projector.visualize_embeddings": [
                    814
                ],
                "val_data": [
                    833,
                    834,
                    840,
                    841,
                    843,
                    825
                ],
                "tensors": [
                    833,
                    844,
                    845,
                    826,
                    831
                ],
                "self.model.inputs": [
                    826
                ],
                "self.model.targets": [
                    827
                ],
                "self.model.sample_weights": [
                    828
                ],
                "self.model.uses_learning_phase": [
                    838,
                    830
                ],
                "K.learning_phase": [
                    831
                ],
                "val_size": [
                    834,
                    836,
                    837
                ],
                "i": [
                    835,
                    836,
                    837,
                    840,
                    843,
                    849
                ],
                "step": [
                    840,
                    843,
                    837
                ],
                "batch_val": [
                    840,
                    841,
                    843,
                    844,
                    845
                ],
                "x": [
                    840,
                    843
                ],
                "batch_val.append": [
                    841
                ],
                "feed_dict": [
                    845,
                    846
                ],
                "result": [
                    846,
                    847
                ],
                "self.sess.run": [
                    846
                ],
                "summary_str": [
                    848,
                    847
                ],
                "self.writer.add_summary": [
                    848,
                    864
                ],
                "self.saver.save": [
                    853
                ],
                "name": [
                    857,
                    858,
                    863
                ],
                "value": [
                    857,
                    862
                ],
                "summary": [
                    864,
                    860,
                    861
                ],
                "tf.Summary": [
                    860
                ],
                "summary_value": [
                    861,
                    862,
                    863
                ],
                "summary.value.add": [
                    861
                ],
                "summary.value": [
                    861
                ],
                "summary_value.simple_value": [
                    862
                ],
                "value.item": [
                    862
                ],
                "summary_value.tag": [
                    863
                ],
                "self.writer.flush": [
                    865
                ],
                "self.writer.close": [
                    868
                ],
                "ReduceLROnPlateau": [
                    910
                ],
                "factor": [
                    913,
                    916
                ],
                "self.factor": [
                    916,
                    973
                ],
                "self.min_lr": [
                    972,
                    917,
                    974
                ],
                "min_lr": [
                    917
                ],
                "self.epsilon": [
                    939,
                    942,
                    918
                ],
                "epsilon": [
                    918
                ],
                "self.cooldown": [
                    921,
                    979
                ],
                "cooldown": [
                    921
                ],
                "self.cooldown_counter": [
                    963,
                    944,
                    979,
                    984,
                    922
                ],
                "self.mode": [
                    932,
                    934,
                    936,
                    937,
                    938,
                    925
                ],
                "self._reset": [
                    948,
                    927
                ],
                "a": [
                    939,
                    942
                ],
                "b": [
                    939,
                    942
                ],
                "self.in_cooldown": [
                    969,
                    962
                ],
                "old_lr": [
                    971,
                    972,
                    973
                ],
                "new_lr": [
                    978,
                    973,
                    974,
                    975
                ],
                "self.sep": [
                    1008,
                    1047
                ],
                "separator": [
                    1008
                ],
                "self.filename": [
                    1024,
                    1009,
                    1019,
                    1020,
                    1022
                ],
                "filename": [
                    1009
                ],
                "self.append": [
                    1010,
                    1018
                ],
                "self.keys": [
                    1038,
                    1039,
                    1043,
                    1012,
                    1050,
                    1055
                ],
                "self.append_header": [
                    1021,
                    1051,
                    1013
                ],
                "self.file_flags": [
                    1024,
                    1020,
                    1014,
                    1022
                ],
                "six.PY2": [
                    1014
                ],
                "six": [
                    1014,
                    1031
                ],
                "os.name": [
                    1014
                ],
                "CSVLogger": [
                    1015
                ],
                "os.path.exists": [
                    1019
                ],
                "f": [
                    1020,
                    1021
                ],
                "f.readline": [
                    1021
                ],
                "self.csv_file": [
                    1024,
                    1057,
                    1060,
                    1049,
                    1022
                ],
                "is_zero_dim_ndarray": [
                    1033,
                    1030
                ],
                "k.ndim": [
                    1030
                ],
                "six.string_types": [
                    1031
                ],
                "Iterable": [
                    1033
                ],
                "csv.excel": [
                    1046
                ],
                "csv": [
                    1049,
                    1046
                ],
                "delimiter": [
                    1047
                ],
                "csv.DictWriter": [
                    1049
                ],
                "CustomDialect": [
                    1050
                ],
                "self.writer.writeheader": [
                    1052
                ],
                "row_dict": [
                    1056,
                    1054,
                    1055
                ],
                "OrderedDict": [
                    1054
                ],
                "row_dict.update": [
                    1055
                ],
                "key": [
                    1055
                ],
                "handle_value": [
                    1055
                ],
                "self.writer.writerow": [
                    1056
                ],
                "self.csv_file.flush": [
                    1057
                ],
                "self.csv_file.close": [
                    1060
                ],
                "LambdaCallback": [
                    1124
                ],
                "self.__dict__.update": [
                    1125
                ],
                "self.__dict__": [
                    1125
                ],
                "kwargs": [
                    1125
                ],
                "on_epoch_begin": [
                    1126,
                    1127
                ],
                "self.on_epoch_begin": [
                    1129,
                    1127
                ],
                "on_epoch_end": [
                    1130,
                    1131
                ],
                "self.on_epoch_end": [
                    1131,
                    1133
                ],
                "on_batch_begin": [
                    1134,
                    1135
                ],
                "self.on_batch_begin": [
                    1137,
                    1135
                ],
                "on_batch_end": [
                    1138,
                    1139
                ],
                "self.on_batch_end": [
                    1139,
                    1141
                ],
                "on_train_begin": [
                    1142,
                    1143
                ],
                "self.on_train_begin": [
                    1145,
                    1143
                ],
                "on_train_end": [
                    1146,
                    1147
                ],
                "self.on_train_end": [
                    1147,
                    1149
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_32/tests/keras/test_callbacks.py",
                "test_function": "test_ReduceLROnPlateau_patience",
                "test_function_code": "@keras_test\ndef test_ReduceLROnPlateau_patience():\n    class DummyOptimizer(object):\n        def __init__(self):\n            self.lr = K.variable(1.0)\n\n    class DummyModel(object):\n        def __init__(self):\n            self.optimizer = DummyOptimizer()\n\n    reduce_on_plateau = callbacks.ReduceLROnPlateau(monitor='val_loss',\n                                                    patience=2)\n    reduce_on_plateau.model = DummyModel()\n\n    losses = [0.0860, 0.1096, 0.1040]\n    lrs = []\n\n    for epoch in range(len(losses)):\n        reduce_on_plateau.on_epoch_end(epoch, logs={'val_loss': losses[epoch]})\n        lrs.append(K.get_value(reduce_on_plateau.model.optimizer.lr))\n\n    # The learning rates should be 1.0 except the last one\n    assert all([lr == 1.0 for lr in lrs[:-1]]) and lrs[-1] < 1.0",
                "test_error": "assert (True and 1.0 < 1.0)  +  where True = all([True, True])",
                "full_test_error": "@keras_test\n    def test_ReduceLROnPlateau_patience():\n        class DummyOptimizer(object):\n            def __init__(self):\n                self.lr = K.variable(1.0)\n    \n        class DummyModel(object):\n            def __init__(self):\n                self.optimizer = DummyOptimizer()\n    \n        reduce_on_plateau = callbacks.ReduceLROnPlateau(monitor='val_loss',\n                                                        patience=2)\n        reduce_on_plateau.model = DummyModel()\n    \n        losses = [0.0860, 0.1096, 0.1040]\n        lrs = []\n    \n        for epoch in range(len(losses)):\n            reduce_on_plateau.on_epoch_end(epoch, logs={'val_loss': losses[epoch]})\n            lrs.append(K.get_value(reduce_on_plateau.model.optimizer.lr))\n    \n        # The learning rates should be 1.0 except the last one\n>       assert all([lr == 1.0 for lr in lrs[:-1]]) and lrs[-1] < 1.0\nE       assert (True and 1.0 < 1.0)\nE        +  where True = all([True, True])\n\ntests/keras/test_callbacks.py:371: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "keras_test"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_32/tests/keras/test_callbacks.py",
                "test_function": "test_ReduceLROnPlateau_backwards_compatibility",
                "test_function_code": "@keras_test\ndef test_ReduceLROnPlateau_backwards_compatibility():\n    import warnings\n    with warnings.catch_warnings(record=True) as ws:\n        reduce_on_plateau = callbacks.ReduceLROnPlateau(epsilon=1e-13)\n        # Check if warnings are disabled\n        if os.environ.get(\"PYTHONWARNINGS\") != \"ignore\":\n            assert \"`epsilon` argument is deprecated\" in str(ws[0].message)\n    assert not hasattr(reduce_on_plateau, 'epsilon')\n    assert hasattr(reduce_on_plateau, 'min_delta')\n    assert reduce_on_plateau.min_delta == 1e-13",
                "test_error": "IndexError: list index out of range",
                "full_test_error": "@keras_test\n    def test_ReduceLROnPlateau_backwards_compatibility():\n        import warnings\n        with warnings.catch_warnings(record=True) as ws:\n            reduce_on_plateau = callbacks.ReduceLROnPlateau(epsilon=1e-13)\n            # Check if warnings are disabled\n            if os.environ.get(\"PYTHONWARNINGS\") != \"ignore\":\n>               assert \"`epsilon` argument is deprecated\" in str(ws[0].message)\nE               IndexError: list index out of range\n\ntests/keras/test_callbacks.py:381: IndexError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "keras_test"
                ]
            }
        ]
    }
}