{
    "keras:35": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_35/keras/preprocessing/image.py": {
            "buggy_functions": [
                {
                    "function_name": "standardize",
                    "function_code": "def standardize(self, x):\n    \"\"\"Apply the normalization configuration to a batch of inputs.\n\n    # Arguments\n        x: batch of inputs to be normalized.\n\n    # Returns\n        The inputs, normalized.\n    \"\"\"\n    if self.preprocessing_function:\n        x = self.preprocessing_function(x)\n    if self.rescale:\n        x *= self.rescale\n    if self.samplewise_center:\n        x -= np.mean(x, keepdims=True)\n    if self.samplewise_std_normalization:\n        x /= (np.std(x, keepdims=True) + K.epsilon())\n\n    if self.featurewise_center:\n        if self.mean is not None:\n            x -= self.mean\n        else:\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`featurewise_center`, but it hasn\\'t '\n                          'been fit on any training data. Fit it '\n                          'first by calling `.fit(numpy_data)`.')\n    if self.featurewise_std_normalization:\n        if self.std is not None:\n            x /= (self.std + K.epsilon())\n        else:\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`featurewise_std_normalization`, but it hasn\\'t '\n                          'been fit on any training data. Fit it '\n                          'first by calling `.fit(numpy_data)`.')\n    if self.zca_whitening:\n        if self.principal_components is not None:\n            flatx = np.reshape(x, (-1, np.prod(x.shape[-3:])))\n            whitex = np.dot(flatx, self.principal_components)\n            x = np.reshape(whitex, x.shape)\n        else:\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`zca_whitening`, but it hasn\\'t '\n                          'been fit on any training data. Fit it '\n                          'first by calling `.fit(numpy_data)`.')\n    return x\n",
                    "decorators": [],
                    "docstring": "Apply the normalization configuration to a batch of inputs.\n\n# Arguments\n    x: batch of inputs to be normalized.\n\n# Returns\n    The inputs, normalized.",
                    "start_line": 574,
                    "end_line": 618,
                    "variables": {
                        "self.preprocessing_function": [
                            584,
                            583
                        ],
                        "self": [
                            608,
                            609,
                            611,
                            583,
                            584,
                            585,
                            586,
                            587,
                            589,
                            592,
                            593,
                            594,
                            600,
                            601,
                            602
                        ],
                        "x": [
                            610,
                            612,
                            584,
                            586,
                            618,
                            588,
                            590,
                            594,
                            602
                        ],
                        "self.rescale": [
                            585,
                            586
                        ],
                        "self.samplewise_center": [
                            587
                        ],
                        "np.mean": [
                            588
                        ],
                        "np": [
                            610,
                            611,
                            612,
                            588,
                            590
                        ],
                        "self.samplewise_std_normalization": [
                            589
                        ],
                        "np.std": [
                            590
                        ],
                        "K.epsilon": [
                            602,
                            590
                        ],
                        "K": [
                            602,
                            590
                        ],
                        "self.featurewise_center": [
                            592
                        ],
                        "self.mean": [
                            593,
                            594
                        ],
                        "warnings.warn": [
                            596,
                            614,
                            604
                        ],
                        "warnings": [
                            596,
                            614,
                            604
                        ],
                        "self.featurewise_std_normalization": [
                            600
                        ],
                        "self.std": [
                            601,
                            602
                        ],
                        "self.zca_whitening": [
                            608
                        ],
                        "self.principal_components": [
                            609,
                            611
                        ],
                        "flatx": [
                            610,
                            611
                        ],
                        "np.reshape": [
                            610,
                            612
                        ],
                        "np.prod": [
                            610
                        ],
                        "x.shape": [
                            610,
                            612
                        ],
                        "whitex": [
                            611,
                            612
                        ],
                        "np.dot": [
                            611
                        ]
                    },
                    "filtered_variables": {
                        "self.preprocessing_function": [
                            584,
                            583
                        ],
                        "self": [
                            608,
                            609,
                            611,
                            583,
                            584,
                            585,
                            586,
                            587,
                            589,
                            592,
                            593,
                            594,
                            600,
                            601,
                            602
                        ],
                        "x": [
                            610,
                            612,
                            584,
                            586,
                            618,
                            588,
                            590,
                            594,
                            602
                        ],
                        "self.rescale": [
                            585,
                            586
                        ],
                        "self.samplewise_center": [
                            587
                        ],
                        "np.mean": [
                            588
                        ],
                        "np": [
                            610,
                            611,
                            612,
                            588,
                            590
                        ],
                        "self.samplewise_std_normalization": [
                            589
                        ],
                        "np.std": [
                            590
                        ],
                        "K.epsilon": [
                            602,
                            590
                        ],
                        "K": [
                            602,
                            590
                        ],
                        "self.featurewise_center": [
                            592
                        ],
                        "self.mean": [
                            593,
                            594
                        ],
                        "warnings.warn": [
                            596,
                            614,
                            604
                        ],
                        "warnings": [
                            596,
                            614,
                            604
                        ],
                        "self.featurewise_std_normalization": [
                            600
                        ],
                        "self.std": [
                            601,
                            602
                        ],
                        "self.zca_whitening": [
                            608
                        ],
                        "self.principal_components": [
                            609,
                            611
                        ],
                        "flatx": [
                            610,
                            611
                        ],
                        "np.reshape": [
                            610,
                            612
                        ],
                        "np.prod": [
                            610
                        ],
                        "x.shape": [
                            610,
                            612
                        ],
                        "whitex": [
                            611,
                            612
                        ],
                        "np.dot": [
                            611
                        ]
                    },
                    "diff_line_number": 583,
                    "class_data": {
                        "signature": "class ImageDataGenerator(object)",
                        "docstring": "Generate minibatches of image data with real-time data augmentation.\n\n# Arguments\n    featurewise_center: set input mean to 0 over the dataset.\n    samplewise_center: set each sample mean to 0.\n    featurewise_std_normalization: divide inputs by std of the dataset.\n    samplewise_std_normalization: divide each input by its std.\n    zca_whitening: apply ZCA whitening.\n    zca_epsilon: epsilon for ZCA whitening. Default is 1e-6.\n    rotation_range: degrees (0 to 180).\n    width_shift_range: fraction of total width, if < 1, or pixels if >= 1.\n    height_shift_range: fraction of total height, if < 1, or pixels if >= 1.\n    brightness_range: the range of brightness to apply\n    shear_range: shear intensity (shear angle in degrees).\n    zoom_range: amount of zoom. if scalar z, zoom will be randomly picked\n        in the range [1-z, 1+z]. A sequence of two can be passed instead\n        to select this range.\n    channel_shift_range: shift range for each channel.\n    fill_mode: points outside the boundaries are filled according to the\n        given mode ('constant', 'nearest', 'reflect' or 'wrap'). Default\n        is 'nearest'.\n        Points outside the boundaries of the input are filled according to the given mode:\n            'constant': kkkkkkkk|abcd|kkkkkkkk (cval=k)\n            'nearest':  aaaaaaaa|abcd|dddddddd\n            'reflect':  abcddcba|abcd|dcbaabcd\n            'wrap':  abcdabcd|abcd|abcdabcd\n    cval: value used for points outside the boundaries when fill_mode is\n        'constant'. Default is 0.\n    horizontal_flip: whether to randomly flip images horizontally.\n    vertical_flip: whether to randomly flip images vertically.\n    rescale: rescaling factor. If None or 0, no rescaling is applied,\n        otherwise we multiply the data by the value provided. This is\n        applied after the `preprocessing_function` (if any provided)\n        but before any other transformation.\n    preprocessing_function: function that will be implied on each input.\n        The function will run before any other modification on it.\n        The function should take one argument:\n        one image (Numpy tensor with rank 3),\n        and should output a Numpy tensor with the same shape.\n    data_format: 'channels_first' or 'channels_last'. In 'channels_first' mode, the channels dimension\n        (the depth) is at index 1, in 'channels_last' mode it is at index 3.\n        It defaults to the `image_data_format` value found in your\n        Keras config file at `~/.keras/keras.json`.\n        If you never set it, then it will be \"channels_last\".\n    validation_split: fraction of images reserved for validation (strictly between 0 and 1).",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False, samplewise_std_normalization=False, zca_whitening=False, zca_epsilon=1e-06, rotation_range=0.0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=False, vertical_flip=False, rescale=None, preprocessing_function=None, data_format=None, validation_split=0.0):\n    if data_format is None:\n        data_format = K.image_data_format()\n    self.featurewise_center = featurewise_center\n    self.samplewise_center = samplewise_center\n    self.featurewise_std_normalization = featurewise_std_normalization\n    self.samplewise_std_normalization = samplewise_std_normalization\n    self.zca_whitening = zca_whitening\n    self.zca_epsilon = zca_epsilon\n    self.rotation_range = rotation_range\n    self.width_shift_range = width_shift_range\n    self.height_shift_range = height_shift_range\n    self.brightness_range = brightness_range\n    self.shear_range = shear_range\n    self.zoom_range = zoom_range\n    self.channel_shift_range = channel_shift_range\n    self.fill_mode = fill_mode\n    self.cval = cval\n    self.horizontal_flip = horizontal_flip\n    self.vertical_flip = vertical_flip\n    self.rescale = rescale\n    self.preprocessing_function = preprocessing_function\n    if data_format not in {'channels_last', 'channels_first'}:\n        raise ValueError('`data_format` should be `\"channels_last\"` (channel after row and column) or `\"channels_first\"` (channel before row and column). Received arg: ', data_format)\n    self.data_format = data_format\n    if data_format == 'channels_first':\n        self.channel_axis = 1\n        self.row_axis = 2\n        self.col_axis = 3\n    if data_format == 'channels_last':\n        self.channel_axis = 3\n        self.row_axis = 1\n        self.col_axis = 2\n    if validation_split and (not 0 < validation_split < 1):\n        raise ValueError('`validation_split` must be strictly between 0 and 1.  Received arg: ', validation_split)\n    self._validation_split = validation_split\n    self.mean = None\n    self.std = None\n    self.principal_components = None\n    if np.isscalar(zoom_range):\n        self.zoom_range = [1 - zoom_range, 1 + zoom_range]\n    elif len(zoom_range) == 2:\n        self.zoom_range = [zoom_range[0], zoom_range[1]]\n    else:\n        raise ValueError('`zoom_range` should be a float or a tuple or list of two floats. Received arg: ', zoom_range)\n    if zca_whitening:\n        if not featurewise_center:\n            self.featurewise_center = True\n            warnings.warn('This ImageDataGenerator specifies `zca_whitening`, which overrides setting of `featurewise_center`.')\n        if featurewise_std_normalization:\n            self.featurewise_std_normalization = False\n            warnings.warn('This ImageDataGenerator specifies `zca_whitening` which overrides setting of`featurewise_std_normalization`.')\n    if featurewise_std_normalization:\n        if not featurewise_center:\n            self.featurewise_center = True\n            warnings.warn('This ImageDataGenerator specifies `featurewise_std_normalization`, which overrides setting of `featurewise_center`.')\n    if samplewise_std_normalization:\n        if not samplewise_center:\n            self.samplewise_center = True\n            warnings.warn('This ImageDataGenerator specifies `samplewise_std_normalization`, which overrides setting of `samplewise_center`.')",
                            "def flow(self, x, y=None, batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', subset=None):\n    return NumpyArrayIterator(x, y, self, batch_size=batch_size, shuffle=shuffle, seed=seed, data_format=self.data_format, save_to_dir=save_to_dir, save_prefix=save_prefix, save_format=save_format, subset=subset)",
                            "def flow_from_directory(self, directory, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest'):\n    return DirectoryIterator(directory, self, target_size=target_size, color_mode=color_mode, classes=classes, class_mode=class_mode, data_format=self.data_format, batch_size=batch_size, shuffle=shuffle, seed=seed, save_to_dir=save_to_dir, save_prefix=save_prefix, save_format=save_format, follow_links=follow_links, subset=subset, interpolation=interpolation)",
                            "def standardize(self, x):\n    \"\"\"Apply the normalization configuration to a batch of inputs.\n\n    # Arguments\n        x: batch of inputs to be normalized.\n\n    # Returns\n        The inputs, normalized.\n    \"\"\"\n    if self.preprocessing_function:\n        x = self.preprocessing_function(x)\n    if self.rescale:\n        x *= self.rescale\n    if self.samplewise_center:\n        x -= np.mean(x, keepdims=True)\n    if self.samplewise_std_normalization:\n        x /= np.std(x, keepdims=True) + K.epsilon()\n    if self.featurewise_center:\n        if self.mean is not None:\n            x -= self.mean\n        else:\n            warnings.warn(\"This ImageDataGenerator specifies `featurewise_center`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\")\n    if self.featurewise_std_normalization:\n        if self.std is not None:\n            x /= self.std + K.epsilon()\n        else:\n            warnings.warn(\"This ImageDataGenerator specifies `featurewise_std_normalization`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\")\n    if self.zca_whitening:\n        if self.principal_components is not None:\n            flatx = np.reshape(x, (-1, np.prod(x.shape[-3:])))\n            whitex = np.dot(flatx, self.principal_components)\n            x = np.reshape(whitex, x.shape)\n        else:\n            warnings.warn(\"This ImageDataGenerator specifies `zca_whitening`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\")\n    return x",
                            "def random_transform(self, x, seed=None):\n    \"\"\"Randomly augment a single image tensor.\n\n    # Arguments\n        x: 3D tensor, single image.\n        seed: random seed.\n\n    # Returns\n        A randomly transformed version of the input (same shape).\n    \"\"\"\n    img_row_axis = self.row_axis - 1\n    img_col_axis = self.col_axis - 1\n    img_channel_axis = self.channel_axis - 1\n    if seed is not None:\n        np.random.seed(seed)\n    if self.rotation_range:\n        theta = np.deg2rad(np.random.uniform(-self.rotation_range, self.rotation_range))\n    else:\n        theta = 0\n    if self.height_shift_range:\n        tx = np.random.uniform(-self.height_shift_range, self.height_shift_range)\n        if self.height_shift_range < 1:\n            tx *= x.shape[img_row_axis]\n    else:\n        tx = 0\n    if self.width_shift_range:\n        ty = np.random.uniform(-self.width_shift_range, self.width_shift_range)\n        if self.width_shift_range < 1:\n            ty *= x.shape[img_col_axis]\n    else:\n        ty = 0\n    if self.shear_range:\n        shear = np.deg2rad(np.random.uniform(-self.shear_range, self.shear_range))\n    else:\n        shear = 0\n    if self.zoom_range[0] == 1 and self.zoom_range[1] == 1:\n        zx, zy = (1, 1)\n    else:\n        zx, zy = np.random.uniform(self.zoom_range[0], self.zoom_range[1], 2)\n    transform_matrix = None\n    if theta != 0:\n        rotation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])\n        transform_matrix = rotation_matrix\n    if tx != 0 or ty != 0:\n        shift_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n        transform_matrix = shift_matrix if transform_matrix is None else np.dot(transform_matrix, shift_matrix)\n    if shear != 0:\n        shear_matrix = np.array([[1, -np.sin(shear), 0], [0, np.cos(shear), 0], [0, 0, 1]])\n        transform_matrix = shear_matrix if transform_matrix is None else np.dot(transform_matrix, shear_matrix)\n    if zx != 1 or zy != 1:\n        zoom_matrix = np.array([[zx, 0, 0], [0, zy, 0], [0, 0, 1]])\n        transform_matrix = zoom_matrix if transform_matrix is None else np.dot(transform_matrix, zoom_matrix)\n    if transform_matrix is not None:\n        h, w = (x.shape[img_row_axis], x.shape[img_col_axis])\n        transform_matrix = transform_matrix_offset_center(transform_matrix, h, w)\n        x = apply_transform(x, transform_matrix, img_channel_axis, fill_mode=self.fill_mode, cval=self.cval)\n    if self.channel_shift_range != 0:\n        x = random_channel_shift(x, self.channel_shift_range, img_channel_axis)\n    if self.horizontal_flip:\n        if np.random.random() < 0.5:\n            x = flip_axis(x, img_col_axis)\n    if self.vertical_flip:\n        if np.random.random() < 0.5:\n            x = flip_axis(x, img_row_axis)\n    if self.brightness_range is not None:\n        x = random_brightness(x, self.brightness_range)\n    return x",
                            "def fit(self, x, augment=False, rounds=1, seed=None):\n    \"\"\"Fits internal statistics to some sample data.\n\n    Required for featurewise_center, featurewise_std_normalization\n    and zca_whitening.\n\n    # Arguments\n        x: Numpy array, the data to fit on. Should have rank 4.\n            In case of grayscale data,\n            the channels axis should have value 1, and in case\n            of RGB data, it should have value 3.\n        augment: Whether to fit on randomly augmented samples\n        rounds: If `augment`,\n            how many augmentation passes to do over the data\n        seed: random seed.\n\n    # Raises\n        ValueError: in case of invalid input `x`.\n    \"\"\"\n    x = np.asarray(x, dtype=K.floatx())\n    if x.ndim != 4:\n        raise ValueError('Input to `.fit()` should have rank 4. Got array with shape: ' + str(x.shape))\n    if x.shape[self.channel_axis] not in {1, 3, 4}:\n        warnings.warn('Expected input to be images (as Numpy array) following the data format convention \"' + self.data_format + '\" (channels on axis ' + str(self.channel_axis) + '), i.e. expected either 1, 3 or 4 channels on axis ' + str(self.channel_axis) + '. However, it was passed an array with shape ' + str(x.shape) + ' (' + str(x.shape[self.channel_axis]) + ' channels).')\n    if seed is not None:\n        np.random.seed(seed)\n    x = np.copy(x)\n    if augment:\n        ax = np.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=K.floatx())\n        for r in range(rounds):\n            for i in range(x.shape[0]):\n                ax[i + r * x.shape[0]] = self.random_transform(x[i])\n        x = ax\n    if self.featurewise_center:\n        self.mean = np.mean(x, axis=(0, self.row_axis, self.col_axis))\n        broadcast_shape = [1, 1, 1]\n        broadcast_shape[self.channel_axis - 1] = x.shape[self.channel_axis]\n        self.mean = np.reshape(self.mean, broadcast_shape)\n        x -= self.mean\n    if self.featurewise_std_normalization:\n        self.std = np.std(x, axis=(0, self.row_axis, self.col_axis))\n        broadcast_shape = [1, 1, 1]\n        broadcast_shape[self.channel_axis - 1] = x.shape[self.channel_axis]\n        self.std = np.reshape(self.std, broadcast_shape)\n        x /= self.std + K.epsilon()\n    if self.zca_whitening:\n        flat_x = np.reshape(x, (x.shape[0], x.shape[1] * x.shape[2] * x.shape[3]))\n        sigma = np.dot(flat_x.T, flat_x) / flat_x.shape[0]\n        u, s, _ = linalg.svd(sigma)\n        s_inv = 1.0 / np.sqrt(s[np.newaxis] + self.zca_epsilon)\n        self.principal_components = (u * s_inv).dot(u.T)"
                        ],
                        "constructor_variables": [
                            "zca_epsilon",
                            "rescale",
                            "std",
                            "principal_components",
                            "mean",
                            "rotation_range",
                            "fill_mode",
                            "brightness_range",
                            "samplewise_center",
                            "channel_axis",
                            "featurewise_center",
                            "cval",
                            "horizontal_flip",
                            "samplewise_std_normalization",
                            "data_format",
                            "row_axis",
                            "height_shift_range",
                            "zca_whitening",
                            "shear_range",
                            "_validation_split",
                            "featurewise_std_normalization",
                            "preprocessing_function",
                            "channel_shift_range",
                            "vertical_flip",
                            "col_axis",
                            "zoom_range",
                            "width_shift_range"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False, samplewise_std_normalization=False, zca_whitening=False, zca_epsilon=1e-06, rotation_range=0.0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=False, vertical_flip=False, rescale=None, preprocessing_function=None, data_format=None, validation_split=0.0)",
                            "flow(self, x, y=None, batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)",
                            "flow_from_directory(self, directory, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest')",
                            "standardize(self, x)",
                            "random_transform(self, x, seed=None)",
                            "fit(self, x, augment=False, rounds=1, seed=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 57.,  57.,  57.],\n        [155., 155., 155.],\n        [155., 155., 155.],\n        ...,\n        [ 45.,  45.,  45.],\n        [ 45.,  45.,  45.],\n        [104., 104., 104.]],\n\n       [[ 73.,  73.,  73.],\n        [ 23.,  23.,  23.],\n        [ 23.,  23.,  23.],\n        ...,\n        [ 73.,  73.,  73.],\n        [ 73.,  73.,  73.],\n        [100., 100., 100.]],\n\n       [[ 73.,  73.,  73.],\n        [ 23.,  23.,  23.],\n        [ 23.,  23.,  23.],\n        ...,\n        [ 73.,  73.,  73.],\n        [ 73.,  73.,  73.],\n        [100., 100., 100.]],\n\n       ...,\n\n       [[165., 165., 165.],\n        [ 65.,  65.,  65.],\n        [ 65.,  65.,  65.],\n        ...,\n        [ 84.,  84.,  84.],\n        [ 84.,  84.,  84.],\n        [176., 176., 176.]],\n\n       [[165., 165., 165.],\n        [ 65.,  65.,  65.],\n        [ 65.,  65.,  65.],\n        ...,\n        [ 84.,  84.,  84.],\n        [ 84.,  84.,  84.],\n        [176., 176., 176.]],\n\n       [[176., 176., 176.],\n        [ 49.,  49.,  49.],\n        [ 49.,  49.,  49.],\n        ...,\n        [ 18.,  18.,  18.],\n        [ 18.,  18.,  18.],\n        [178., 178., 178.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 57.,  57.,  57.],\n        [155., 155., 155.],\n        [155., 155., 155.],\n        ...,\n        [ 45.,  45.,  45.],\n        [ 45.,  45.,  45.],\n        [104., 104., 104.]],\n\n       [[ 73.,  73.,  73.],\n        [ 23.,  23.,  23.],\n        [ 23.,  23.,  23.],\n        ...,\n        [ 73.,  73.,  73.],\n        [ 73.,  73.,  73.],\n        [100., 100., 100.]],\n\n       [[ 73.,  73.,  73.],\n        [ 23.,  23.,  23.],\n        [ 23.,  23.,  23.],\n        ...,\n        [ 73.,  73.,  73.],\n        [ 73.,  73.,  73.],\n        [100., 100., 100.]],\n\n       ...,\n\n       [[165., 165., 165.],\n        [ 65.,  65.,  65.],\n        [ 65.,  65.,  65.],\n        ...,\n        [ 84.,  84.,  84.],\n        [ 84.,  84.,  84.],\n        [176., 176., 176.]],\n\n       [[165., 165., 165.],\n        [ 65.,  65.,  65.],\n        [ 65.,  65.,  65.],\n        ...,\n        [ 84.,  84.,  84.],\n        [ 84.,  84.,  84.],\n        [176., 176., 176.]],\n\n       [[176., 176., 176.],\n        [ 49.,  49.,  49.],\n        [ 49.,  49.,  49.],\n        ...,\n        [ 18.,  18.,  18.],\n        [ 18.,  18.,  18.],\n        [178., 178., 178.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[136., 136., 136.],\n        [ 39.,  39.,  39.],\n        [ 39.,  39.,  39.],\n        ...,\n        [ 86.,  86.,  86.],\n        [ 86.,  86.,  86.],\n        [237., 237., 237.]],\n\n       [[141., 141., 141.],\n        [ 87.,  87.,  87.],\n        [ 87.,  87.,  87.],\n        ...,\n        [ 53.,  53.,  53.],\n        [ 53.,  53.,  53.],\n        [ 48.,  48.,  48.]],\n\n       [[141., 141., 141.],\n        [ 87.,  87.,  87.],\n        [ 87.,  87.,  87.],\n        ...,\n        [ 53.,  53.,  53.],\n        [ 53.,  53.,  53.],\n        [ 48.,  48.,  48.]],\n\n       ...,\n\n       [[ 60.,  60.,  60.],\n        [161., 161., 161.],\n        [161., 161., 161.],\n        ...,\n        [ 81.,  81.,  81.],\n        [ 81.,  81.,  81.],\n        [133., 133., 133.]],\n\n       [[ 60.,  60.,  60.],\n        [161., 161., 161.],\n        [161., 161., 161.],\n        ...,\n        [ 81.,  81.,  81.],\n        [ 81.,  81.,  81.],\n        [133., 133., 133.]],\n\n       [[ 25.,  25.,  25.],\n        [107., 107., 107.],\n        [107., 107., 107.],\n        ...,\n        [ 41.,  41.,  41.],\n        [ 41.,  41.,  41.],\n        [ 63.,  63.,  63.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[136., 136., 136.],\n        [ 39.,  39.,  39.],\n        [ 39.,  39.,  39.],\n        ...,\n        [ 86.,  86.,  86.],\n        [ 86.,  86.,  86.],\n        [237., 237., 237.]],\n\n       [[141., 141., 141.],\n        [ 87.,  87.,  87.],\n        [ 87.,  87.,  87.],\n        ...,\n        [ 53.,  53.,  53.],\n        [ 53.,  53.,  53.],\n        [ 48.,  48.,  48.]],\n\n       [[141., 141., 141.],\n        [ 87.,  87.,  87.],\n        [ 87.,  87.,  87.],\n        ...,\n        [ 53.,  53.,  53.],\n        [ 53.,  53.,  53.],\n        [ 48.,  48.,  48.]],\n\n       ...,\n\n       [[ 60.,  60.,  60.],\n        [161., 161., 161.],\n        [161., 161., 161.],\n        ...,\n        [ 81.,  81.,  81.],\n        [ 81.,  81.,  81.],\n        [133., 133., 133.]],\n\n       [[ 60.,  60.,  60.],\n        [161., 161., 161.],\n        [161., 161., 161.],\n        ...,\n        [ 81.,  81.,  81.],\n        [ 81.,  81.,  81.],\n        [133., 133., 133.]],\n\n       [[ 25.,  25.,  25.],\n        [107., 107., 107.],\n        [107., 107., 107.],\n        ...,\n        [ 41.,  41.,  41.],\n        [ 41.,  41.,  41.],\n        [ 63.,  63.,  63.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 82.,  82.,  82.],\n        [ 31.,  31.,  31.],\n        [ 31.,  31.,  31.],\n        ...,\n        [122., 122., 122.],\n        [122., 122., 122.],\n        [ 73.,  73.,  73.]],\n\n       [[ 25.,  25.,  25.],\n        [ 43.,  43.,  43.],\n        [ 43.,  43.,  43.],\n        ...,\n        [ 19.,  19.,  19.],\n        [ 19.,  19.,  19.],\n        [ 92.,  92.,  92.]],\n\n       [[ 25.,  25.,  25.],\n        [ 43.,  43.,  43.],\n        [ 43.,  43.,  43.],\n        ...,\n        [ 19.,  19.,  19.],\n        [ 19.,  19.,  19.],\n        [ 92.,  92.,  92.]],\n\n       ...,\n\n       [[ 27.,  27.,  27.],\n        [ 83.,  83.,  83.],\n        [ 83.,  83.,  83.],\n        ...,\n        [127., 127., 127.],\n        [127., 127., 127.],\n        [ 38.,  38.,  38.]],\n\n       [[ 27.,  27.,  27.],\n        [ 83.,  83.,  83.],\n        [ 83.,  83.,  83.],\n        ...,\n        [127., 127., 127.],\n        [127., 127., 127.],\n        [ 38.,  38.,  38.]],\n\n       [[150., 150., 150.],\n        [ 36.,  36.,  36.],\n        [ 36.,  36.,  36.],\n        ...,\n        [ 33.,  33.,  33.],\n        [ 33.,  33.,  33.],\n        [157., 157., 157.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 82.,  82.,  82.],\n        [ 31.,  31.,  31.],\n        [ 31.,  31.,  31.],\n        ...,\n        [122., 122., 122.],\n        [122., 122., 122.],\n        [ 73.,  73.,  73.]],\n\n       [[ 25.,  25.,  25.],\n        [ 43.,  43.,  43.],\n        [ 43.,  43.,  43.],\n        ...,\n        [ 19.,  19.,  19.],\n        [ 19.,  19.,  19.],\n        [ 92.,  92.,  92.]],\n\n       [[ 25.,  25.,  25.],\n        [ 43.,  43.,  43.],\n        [ 43.,  43.,  43.],\n        ...,\n        [ 19.,  19.,  19.],\n        [ 19.,  19.,  19.],\n        [ 92.,  92.,  92.]],\n\n       ...,\n\n       [[ 27.,  27.,  27.],\n        [ 83.,  83.,  83.],\n        [ 83.,  83.,  83.],\n        ...,\n        [127., 127., 127.],\n        [127., 127., 127.],\n        [ 38.,  38.,  38.]],\n\n       [[ 27.,  27.,  27.],\n        [ 83.,  83.,  83.],\n        [ 83.,  83.,  83.],\n        ...,\n        [127., 127., 127.],\n        [127., 127., 127.],\n        [ 38.,  38.,  38.]],\n\n       [[150., 150., 150.],\n        [ 36.,  36.,  36.],\n        [ 36.,  36.,  36.],\n        ...,\n        [ 33.,  33.,  33.],\n        [ 33.,  33.,  33.],\n        [157., 157., 157.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 15.,  37.,  14.],\n        [ 31.,  49.,  37.],\n        [ 31.,  49.,  37.],\n        ...,\n        [ 84.,  74.,  64.],\n        [ 84.,  74.,  64.],\n        [ 79.,  70.,  61.]],\n\n       [[ 85., 100.,  95.],\n        [ 55.,  70.,  65.],\n        [ 55.,  70.,  65.],\n        ...,\n        [ 40.,  37.,  30.],\n        [ 40.,  37.,  30.],\n        [ 55.,  51.,  48.]],\n\n       [[ 85., 100.,  95.],\n        [ 55.,  70.,  65.],\n        [ 55.,  70.,  65.],\n        ...,\n        [ 40.,  37.,  30.],\n        [ 40.,  37.,  30.],\n        [ 55.,  51.,  48.]],\n\n       ...,\n\n       [[  0.,  52.,  66.],\n        [ 62., 106.,  81.],\n        [ 62., 106.,  81.],\n        ...,\n        [ 47.,  43.,  42.],\n        [ 47.,  43.,  42.],\n        [ 58.,  57.,  55.]],\n\n       [[  0.,  52.,  66.],\n        [ 62., 106.,  81.],\n        [ 62., 106.,  81.],\n        ...,\n        [ 47.,  43.,  42.],\n        [ 47.,  43.,  42.],\n        [ 58.,  57.,  55.]],\n\n       [[ 61., 114., 130.],\n        [ 35.,  78.,  58.],\n        [ 35.,  78.,  58.],\n        ...,\n        [ 39.,  37.,  38.],\n        [ 39.,  37.,  38.],\n        [ 41.,  45.,  44.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x135571490>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 15.,  37.,  14.],\n        [ 31.,  49.,  37.],\n        [ 31.,  49.,  37.],\n        ...,\n        [ 84.,  74.,  64.],\n        [ 84.,  74.,  64.],\n        [ 79.,  70.,  61.]],\n\n       [[ 85., 100.,  95.],\n        [ 55.,  70.,  65.],\n        [ 55.,  70.,  65.],\n        ...,\n        [ 40.,  37.,  30.],\n        [ 40.,  37.,  30.],\n        [ 55.,  51.,  48.]],\n\n       [[ 85., 100.,  95.],\n        [ 55.,  70.,  65.],\n        [ 55.,  70.,  65.],\n        ...,\n        [ 40.,  37.,  30.],\n        [ 40.,  37.,  30.],\n        [ 55.,  51.,  48.]],\n\n       ...,\n\n       [[  0.,  52.,  66.],\n        [ 62., 106.,  81.],\n        [ 62., 106.,  81.],\n        ...,\n        [ 47.,  43.,  42.],\n        [ 47.,  43.,  42.],\n        [ 58.,  57.,  55.]],\n\n       [[  0.,  52.,  66.],\n        [ 62., 106.,  81.],\n        [ 62., 106.,  81.],\n        ...,\n        [ 47.,  43.,  42.],\n        [ 47.,  43.,  42.],\n        [ 58.,  57.,  55.]],\n\n       [[ 61., 114., 130.],\n        [ 35.,  78.,  58.],\n        [ 35.,  78.,  58.],\n        ...,\n        [ 39.,  37.,  38.],\n        [ 39.,  37.,  38.],\n        [ 41.,  45.,  44.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[126., 138., 154.],\n        [ 50.,  42.,  39.],\n        [ 50.,  42.,  39.],\n        ...,\n        [144., 167., 151.],\n        [144., 167., 151.],\n        [ 64.,  89.,  67.]],\n\n       [[110., 103., 119.],\n        [ 82.,  78.,  77.],\n        [ 82.,  78.,  77.],\n        ...,\n        [100.,  85.,  82.],\n        [100.,  85.,  82.],\n        [197., 187., 178.]],\n\n       [[110., 103., 119.],\n        [ 82.,  78.,  77.],\n        [ 82.,  78.,  77.],\n        ...,\n        [100.,  85.,  82.],\n        [100.,  85.,  82.],\n        [197., 187., 178.]],\n\n       ...,\n\n       [[ 99., 102., 119.],\n        [ 52.,  57.,  61.],\n        [ 52.,  57.,  61.],\n        ...,\n        [ 44.,  39.,  36.],\n        [ 44.,  39.,  36.],\n        [122., 114., 112.]],\n\n       [[ 99., 102., 119.],\n        [ 52.,  57.,  61.],\n        [ 52.,  57.,  61.],\n        ...,\n        [ 44.,  39.,  36.],\n        [ 44.,  39.,  36.],\n        [122., 114., 112.]],\n\n       [[ 29.,  32.,  41.],\n        [ 42.,  44.,  41.],\n        [ 42.,  44.,  41.],\n        ...,\n        [ 33.,  27.,  29.],\n        [ 33.,  27.,  29.],\n        [ 98.,  89.,  94.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[126., 138., 154.],\n        [ 50.,  42.,  39.],\n        [ 50.,  42.,  39.],\n        ...,\n        [144., 167., 151.],\n        [144., 167., 151.],\n        [ 64.,  89.,  67.]],\n\n       [[110., 103., 119.],\n        [ 82.,  78.,  77.],\n        [ 82.,  78.,  77.],\n        ...,\n        [100.,  85.,  82.],\n        [100.,  85.,  82.],\n        [197., 187., 178.]],\n\n       [[110., 103., 119.],\n        [ 82.,  78.,  77.],\n        [ 82.,  78.,  77.],\n        ...,\n        [100.,  85.,  82.],\n        [100.,  85.,  82.],\n        [197., 187., 178.]],\n\n       ...,\n\n       [[ 99., 102., 119.],\n        [ 52.,  57.,  61.],\n        [ 52.,  57.,  61.],\n        ...,\n        [ 44.,  39.,  36.],\n        [ 44.,  39.,  36.],\n        [122., 114., 112.]],\n\n       [[ 99., 102., 119.],\n        [ 52.,  57.,  61.],\n        [ 52.,  57.,  61.],\n        ...,\n        [ 44.,  39.,  36.],\n        [ 44.,  39.,  36.],\n        [122., 114., 112.]],\n\n       [[ 29.,  32.,  41.],\n        [ 42.,  44.,  41.],\n        [ 42.,  44.,  41.],\n        ...,\n        [ 33.,  27.,  29.],\n        [ 33.,  27.,  29.],\n        [ 98.,  89.,  94.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 67.,  67.,  67.],\n        [108., 108., 108.],\n        [108., 108., 108.],\n        ...,\n        [ 62.,  62.,  62.],\n        [ 62.,  62.,  62.],\n        [ 66.,  66.,  66.]],\n\n       [[173., 173., 173.],\n        [177., 177., 177.],\n        [177., 177., 177.],\n        ...,\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        [ 81.,  81.,  81.]],\n\n       [[173., 173., 173.],\n        [177., 177., 177.],\n        [177., 177., 177.],\n        ...,\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        [ 81.,  81.,  81.]],\n\n       ...,\n\n       [[ 86.,  86.,  86.],\n        [119., 119., 119.],\n        [119., 119., 119.],\n        ...,\n        [ 67.,  67.,  67.],\n        [ 67.,  67.,  67.],\n        [ 37.,  37.,  37.]],\n\n       [[ 86.,  86.,  86.],\n        [119., 119., 119.],\n        [119., 119., 119.],\n        ...,\n        [ 67.,  67.,  67.],\n        [ 67.,  67.,  67.],\n        [ 37.,  37.,  37.]],\n\n       [[166., 166., 166.],\n        [ 72.,  72.,  72.],\n        [ 72.,  72.,  72.],\n        ...,\n        [177., 177., 177.],\n        [177., 177., 177.],\n        [ 59.,  59.,  59.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 67.,  67.,  67.],\n        [108., 108., 108.],\n        [108., 108., 108.],\n        ...,\n        [ 62.,  62.,  62.],\n        [ 62.,  62.,  62.],\n        [ 66.,  66.,  66.]],\n\n       [[173., 173., 173.],\n        [177., 177., 177.],\n        [177., 177., 177.],\n        ...,\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        [ 81.,  81.,  81.]],\n\n       [[173., 173., 173.],\n        [177., 177., 177.],\n        [177., 177., 177.],\n        ...,\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        [ 81.,  81.,  81.]],\n\n       ...,\n\n       [[ 86.,  86.,  86.],\n        [119., 119., 119.],\n        [119., 119., 119.],\n        ...,\n        [ 67.,  67.,  67.],\n        [ 67.,  67.,  67.],\n        [ 37.,  37.,  37.]],\n\n       [[ 86.,  86.,  86.],\n        [119., 119., 119.],\n        [119., 119., 119.],\n        ...,\n        [ 67.,  67.,  67.],\n        [ 67.,  67.,  67.],\n        [ 37.,  37.,  37.]],\n\n       [[166., 166., 166.],\n        [ 72.,  72.,  72.],\n        [ 72.,  72.,  72.],\n        ...,\n        [177., 177., 177.],\n        [177., 177., 177.],\n        [ 59.,  59.,  59.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 87.,  87.,  87.],\n        [196., 196., 196.],\n        [196., 196., 196.],\n        ...,\n        [ 45.,  45.,  45.],\n        [ 45.,  45.,  45.],\n        [ 45.,  45.,  45.]],\n\n       [[ 60.,  60.,  60.],\n        [116., 116., 116.],\n        [116., 116., 116.],\n        ...,\n        [ 27.,  27.,  27.],\n        [ 27.,  27.,  27.],\n        [  3.,   3.,   3.]],\n\n       [[ 60.,  60.,  60.],\n        [116., 116., 116.],\n        [116., 116., 116.],\n        ...,\n        [ 27.,  27.,  27.],\n        [ 27.,  27.,  27.],\n        [  3.,   3.,   3.]],\n\n       ...,\n\n       [[ 64.,  64.,  64.],\n        [ 26.,  26.,  26.],\n        [ 26.,  26.,  26.],\n        ...,\n        [111., 111., 111.],\n        [111., 111., 111.],\n        [ 56.,  56.,  56.]],\n\n       [[ 64.,  64.,  64.],\n        [ 26.,  26.,  26.],\n        [ 26.,  26.,  26.],\n        ...,\n        [111., 111., 111.],\n        [111., 111., 111.],\n        [ 56.,  56.,  56.]],\n\n       [[ 28.,  28.,  28.],\n        [ 48.,  48.,  48.],\n        [ 48.,  48.,  48.],\n        ...,\n        [168., 168., 168.],\n        [168., 168., 168.],\n        [ 12.,  12.,  12.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 87.,  87.,  87.],\n        [196., 196., 196.],\n        [196., 196., 196.],\n        ...,\n        [ 45.,  45.,  45.],\n        [ 45.,  45.,  45.],\n        [ 45.,  45.,  45.]],\n\n       [[ 60.,  60.,  60.],\n        [116., 116., 116.],\n        [116., 116., 116.],\n        ...,\n        [ 27.,  27.,  27.],\n        [ 27.,  27.,  27.],\n        [  3.,   3.,   3.]],\n\n       [[ 60.,  60.,  60.],\n        [116., 116., 116.],\n        [116., 116., 116.],\n        ...,\n        [ 27.,  27.,  27.],\n        [ 27.,  27.,  27.],\n        [  3.,   3.,   3.]],\n\n       ...,\n\n       [[ 64.,  64.,  64.],\n        [ 26.,  26.,  26.],\n        [ 26.,  26.,  26.],\n        ...,\n        [111., 111., 111.],\n        [111., 111., 111.],\n        [ 56.,  56.,  56.]],\n\n       [[ 64.,  64.,  64.],\n        [ 26.,  26.,  26.],\n        [ 26.,  26.,  26.],\n        ...,\n        [111., 111., 111.],\n        [111., 111., 111.],\n        [ 56.,  56.,  56.]],\n\n       [[ 28.,  28.,  28.],\n        [ 48.,  48.,  48.],\n        [ 48.,  48.,  48.],\n        ...,\n        [168., 168., 168.],\n        [168., 168., 168.],\n        [ 12.,  12.,  12.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 96.,  78.,  64.],\n        [ 42.,  39.,   0.],\n        [ 42.,  39.,   0.],\n        ...,\n        [ 61.,  66.,  26.],\n        [ 61.,  66.,  26.],\n        [118., 160., 110.]],\n\n       [[ 77.,  62.,  59.],\n        [ 46.,  45.,  15.],\n        [ 46.,  45.,  15.],\n        ...,\n        [ 35.,  64.,  34.],\n        [ 35.,  64.,  34.],\n        [151., 171., 146.]],\n\n       [[ 77.,  62.,  59.],\n        [ 46.,  45.,  15.],\n        [ 46.,  45.,  15.],\n        ...,\n        [ 35.,  64.,  34.],\n        [ 35.,  64.,  34.],\n        [151., 171., 146.]],\n\n       ...,\n\n       [[  7.,   0.,  24.],\n        [ 71.,  71.,  73.],\n        [ 71.,  71.,  73.],\n        ...,\n        [ 70.,  51.,  57.],\n        [ 70.,  51.,  57.],\n        [ 79.,  44.,  77.]],\n\n       [[  7.,   0.,  24.],\n        [ 71.,  71.,  73.],\n        [ 71.,  71.,  73.],\n        ...,\n        [ 70.,  51.,  57.],\n        [ 70.,  51.,  57.],\n        [ 79.,  44.,  77.]],\n\n       [[ 60.,  48.,  88.],\n        [ 53.,  50.,  67.],\n        [ 53.,  50.,  67.],\n        ...,\n        [105.,  57., 115.],\n        [105.,  57., 115.],\n        [106.,  35., 127.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x11db8a990>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 96.,  78.,  64.],\n        [ 42.,  39.,   0.],\n        [ 42.,  39.,   0.],\n        ...,\n        [ 61.,  66.,  26.],\n        [ 61.,  66.,  26.],\n        [118., 160., 110.]],\n\n       [[ 77.,  62.,  59.],\n        [ 46.,  45.,  15.],\n        [ 46.,  45.,  15.],\n        ...,\n        [ 35.,  64.,  34.],\n        [ 35.,  64.,  34.],\n        [151., 171., 146.]],\n\n       [[ 77.,  62.,  59.],\n        [ 46.,  45.,  15.],\n        [ 46.,  45.,  15.],\n        ...,\n        [ 35.,  64.,  34.],\n        [ 35.,  64.,  34.],\n        [151., 171., 146.]],\n\n       ...,\n\n       [[  7.,   0.,  24.],\n        [ 71.,  71.,  73.],\n        [ 71.,  71.,  73.],\n        ...,\n        [ 70.,  51.,  57.],\n        [ 70.,  51.,  57.],\n        [ 79.,  44.,  77.]],\n\n       [[  7.,   0.,  24.],\n        [ 71.,  71.,  73.],\n        [ 71.,  71.,  73.],\n        ...,\n        [ 70.,  51.,  57.],\n        [ 70.,  51.,  57.],\n        [ 79.,  44.,  77.]],\n\n       [[ 60.,  48.,  88.],\n        [ 53.,  50.,  67.],\n        [ 53.,  50.,  67.],\n        ...,\n        [105.,  57., 115.],\n        [105.,  57., 115.],\n        [106.,  35., 127.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x13469b610>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       ...,\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x13469b610>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       ...,\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]],\n\n       [[81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.],\n        ...,\n        [81., 81., 81.],\n        [81., 81., 81.],\n        [81., 81., 81.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x13469b610>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       ...,\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.rescale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x13469b610>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       ...,\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]],\n\n       [[79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.],\n        ...,\n        [79., 79., 79.],\n        [79., 79., 79.],\n        [79., 79., 79.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "self.samplewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.mean": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.samplewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.epsilon": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.mean": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.featurewise_std_normalization": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.std": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.zca_whitening": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.principal_components": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "flatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "whitex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dot": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_get_batches_of_transformed_samples",
                    "function_code": "def _get_batches_of_transformed_samples(self, index_array):\n    batch_x = np.zeros(tuple([len(index_array)] + list(self.x.shape)[1:]),\n                       dtype=K.floatx())\n    for i, j in enumerate(index_array):\n        x = self.x[j]\n        x = self.image_data_generator.random_transform(x.astype(K.floatx()))\n        x = self.image_data_generator.standardize(x)\n        batch_x[i] = x\n    if self.save_to_dir:\n        for i, j in enumerate(index_array):\n            img = array_to_img(batch_x[i], self.data_format, scale=True)\n            fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,\n                                                              index=j,\n                                                              hash=np.random.randint(1e4),\n                                                              format=self.save_format)\n            img.save(os.path.join(self.save_to_dir, fname))\n    if self.y is None:\n        return batch_x\n    batch_y = self.y[index_array]\n    return batch_x, batch_y\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 949,
                    "end_line": 968,
                    "variables": {
                        "batch_x": [
                            966,
                            968,
                            950,
                            956,
                            959
                        ],
                        "np.zeros": [
                            950
                        ],
                        "np": [
                            962,
                            950
                        ],
                        "tuple": [
                            950
                        ],
                        "len": [
                            950
                        ],
                        "index_array": [
                            952,
                            958,
                            950,
                            967
                        ],
                        "list": [
                            950
                        ],
                        "self.x.shape": [
                            950
                        ],
                        "self.x": [
                            953,
                            950
                        ],
                        "self": [
                            960,
                            963,
                            964,
                            965,
                            967,
                            950,
                            953,
                            954,
                            955,
                            957,
                            959
                        ],
                        "K.floatx": [
                            954,
                            951
                        ],
                        "K": [
                            954,
                            951
                        ],
                        "i": [
                            952,
                            956,
                            958,
                            959
                        ],
                        "j": [
                            952,
                            953,
                            961,
                            958
                        ],
                        "enumerate": [
                            952,
                            958
                        ],
                        "x": [
                            953,
                            954,
                            955,
                            956
                        ],
                        "self.image_data_generator.random_transform": [
                            954
                        ],
                        "self.image_data_generator": [
                            954,
                            955
                        ],
                        "x.astype": [
                            954
                        ],
                        "self.image_data_generator.standardize": [
                            955
                        ],
                        "self.save_to_dir": [
                            964,
                            957
                        ],
                        "img": [
                            964,
                            959
                        ],
                        "array_to_img": [
                            959
                        ],
                        "self.data_format": [
                            959
                        ],
                        "fname": [
                            960,
                            964
                        ],
                        "format": [
                            960
                        ],
                        "self.save_prefix": [
                            960
                        ],
                        "np.random.randint": [
                            962
                        ],
                        "np.random": [
                            962
                        ],
                        "self.save_format": [
                            963
                        ],
                        "img.save": [
                            964
                        ],
                        "os.path.join": [
                            964
                        ],
                        "os.path": [
                            964
                        ],
                        "os": [
                            964
                        ],
                        "self.y": [
                            965,
                            967
                        ],
                        "batch_y": [
                            968,
                            967
                        ]
                    },
                    "filtered_variables": {
                        "batch_x": [
                            966,
                            968,
                            950,
                            956,
                            959
                        ],
                        "np.zeros": [
                            950
                        ],
                        "np": [
                            962,
                            950
                        ],
                        "index_array": [
                            952,
                            958,
                            950,
                            967
                        ],
                        "self.x.shape": [
                            950
                        ],
                        "self.x": [
                            953,
                            950
                        ],
                        "self": [
                            960,
                            963,
                            964,
                            965,
                            967,
                            950,
                            953,
                            954,
                            955,
                            957,
                            959
                        ],
                        "K.floatx": [
                            954,
                            951
                        ],
                        "K": [
                            954,
                            951
                        ],
                        "i": [
                            952,
                            956,
                            958,
                            959
                        ],
                        "j": [
                            952,
                            953,
                            961,
                            958
                        ],
                        "x": [
                            953,
                            954,
                            955,
                            956
                        ],
                        "self.image_data_generator.random_transform": [
                            954
                        ],
                        "self.image_data_generator": [
                            954,
                            955
                        ],
                        "x.astype": [
                            954
                        ],
                        "self.image_data_generator.standardize": [
                            955
                        ],
                        "self.save_to_dir": [
                            964,
                            957
                        ],
                        "img": [
                            964,
                            959
                        ],
                        "array_to_img": [
                            959
                        ],
                        "self.data_format": [
                            959
                        ],
                        "fname": [
                            960,
                            964
                        ],
                        "self.save_prefix": [
                            960
                        ],
                        "np.random.randint": [
                            962
                        ],
                        "np.random": [
                            962
                        ],
                        "self.save_format": [
                            963
                        ],
                        "img.save": [
                            964
                        ],
                        "os.path.join": [
                            964
                        ],
                        "os.path": [
                            964
                        ],
                        "os": [
                            964
                        ],
                        "self.y": [
                            965,
                            967
                        ],
                        "batch_y": [
                            968,
                            967
                        ]
                    },
                    "diff_line_number": 953,
                    "class_data": {
                        "signature": "class NumpyArrayIterator(Iterator)",
                        "docstring": "Iterator yielding data from a Numpy array.\n\n# Arguments\n    x: Numpy array of input data.\n    y: Numpy array of targets data.\n    image_data_generator: Instance of `ImageDataGenerator`\n        to use for random transformations and normalization.\n    batch_size: Integer, size of a batch.\n    shuffle: Boolean, whether to shuffle the data between epochs.\n    seed: Random seed for data shuffling.\n    data_format: String, one of `channels_first`, `channels_last`.\n    save_to_dir: Optional directory where to save the pictures\n        being yielded, in a viewable format. This is useful\n        for visualizing the random transformations being\n        applied, for debugging purposes.\n    save_prefix: String prefix to use for saving sample\n        images (if `save_to_dir` is set).\n    save_format: Format to use for saving sample images\n        (if `save_to_dir` is set).\n    subset: Subset of data (`\"training\"` or `\"validation\"`) if\n        validation_split is set in ImageDataGenerator.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, x, y, image_data_generator, batch_size=32, shuffle=False, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', subset=None):\n    if y is not None and len(x) != len(y):\n        raise ValueError('`x` (images tensor) and `y` (labels) should have the same length. Found: x.shape = %s, y.shape = %s' % (np.asarray(x).shape, np.asarray(y).shape))\n    if subset is not None:\n        if subset not in {'training', 'validation'}:\n            raise ValueError('Invalid subset name:', subset, '; expected \"training\" or \"validation\".')\n        split_idx = int(len(x) * image_data_generator._validation_split)\n        if subset == 'validation':\n            x = x[:split_idx]\n            if y is not None:\n                y = y[:split_idx]\n        else:\n            x = x[split_idx:]\n            if y is not None:\n                y = y[split_idx:]\n    if data_format is None:\n        data_format = K.image_data_format()\n    self.x = np.asarray(x, dtype=K.floatx())\n    if self.x.ndim != 4:\n        raise ValueError('Input data in `NumpyArrayIterator` should have rank 4. You passed an array with shape', self.x.shape)\n    channels_axis = 3 if data_format == 'channels_last' else 1\n    if self.x.shape[channels_axis] not in {1, 3, 4}:\n        warnings.warn('NumpyArrayIterator is set to use the data format convention \"' + data_format + '\" (channels on axis ' + str(channels_axis) + '), i.e. expected either 1, 3 or 4 channels on axis ' + str(channels_axis) + '. However, it was passed an array with shape ' + str(self.x.shape) + ' (' + str(self.x.shape[channels_axis]) + ' channels).')\n    if y is not None:\n        self.y = np.asarray(y)\n    else:\n        self.y = None\n    self.image_data_generator = image_data_generator\n    self.data_format = data_format\n    self.save_to_dir = save_to_dir\n    self.save_prefix = save_prefix\n    self.save_format = save_format\n    super(NumpyArrayIterator, self).__init__(x.shape[0], batch_size, shuffle, seed)",
                            "def _get_batches_of_transformed_samples(self, index_array):\n    batch_x = np.zeros(tuple([len(index_array)] + list(self.x.shape)[1:]), dtype=K.floatx())\n    for i, j in enumerate(index_array):\n        x = self.x[j]\n        x = self.image_data_generator.random_transform(x.astype(K.floatx()))\n        x = self.image_data_generator.standardize(x)\n        batch_x[i] = x\n    if self.save_to_dir:\n        for i, j in enumerate(index_array):\n            img = array_to_img(batch_x[i], self.data_format, scale=True)\n            fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix, index=j, hash=np.random.randint(10000.0), format=self.save_format)\n            img.save(os.path.join(self.save_to_dir, fname))\n    if self.y is None:\n        return batch_x\n    batch_y = self.y[index_array]\n    return (batch_x, batch_y)",
                            "def next(self):\n    \"\"\"For python 2.x.\n\n    # Returns\n        The next batch.\n    \"\"\"\n    with self.lock:\n        index_array = next(self.index_generator)\n    return self._get_batches_of_transformed_samples(index_array)"
                        ],
                        "constructor_variables": [
                            "split_idx",
                            "x",
                            "channels_axis",
                            "save_prefix",
                            "y",
                            "image_data_generator",
                            "save_format",
                            "data_format",
                            "save_to_dir"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, x, y, image_data_generator, batch_size=32, shuffle=False, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)",
                            "_get_batches_of_transformed_samples(self, index_array)",
                            "next(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ],
                        [
                            {
                                "batch_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([10,  1, 13])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x1363c0290>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-358/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.image_data_generator.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x1363c0250>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "width_height_tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resample": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img.resize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_x.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "batch_x": {
                                    "variable_value": "array([[[[ 57.,  46.,  16.],\n         [136., 126.,  99.],\n         [136., 126.,  99.],\n         ...,\n         [166., 160., 164.],\n         [166., 160., 164.],\n         [ 83.,  79.,  76.]],\n\n        [[ 57.,  43.,  16.],\n         [130., 119.,  97.],\n         [130., 119.,  97.],\n         ...,\n         [ 91.,  83.,  96.],\n         [ 91.,  83.,  96.],\n         [  4.,   0.,   5.]],\n\n        [[ 57.,  43.,  16.],\n         [130., 119.,  97.],\n         [130., 119.,  97.],\n         ...,\n         [ 91.,  83.,  96.],\n         [ 91.,  83.,  96.],\n         [  4.,   0.,   5.]],\n\n        ...,\n\n        [[  9.,  59.,  82.],\n         [ 29.,  44.,  51.],\n         [ 29.,  44.,  51.],\n         ...,\n         [101., 105.,  91.],\n         [101., 105.,  91.],\n         [121., 124., 143.]],\n\n        [[  9.,  59.,  82.],\n         [ 29.,  44.,  51.],\n         [ 29.,  44.,  51.],\n         ...,\n         [101., 105.,  91.],\n         [101., 105.,  91.],\n         [121., 124., 143.]],\n\n        [[ 37.,  89., 113.],\n         [170., 185., 190.],\n         [170., 185., 190.],\n         ...,\n         [ 32.,  38.,  50.],\n         [ 32.,  38.,  50.],\n         [ 71.,  75., 123.]]],\n\n\n       [[[ 50.,  50.,  50.],\n         [ 67.,  67.,  67.],\n         [ 67.,  67.,  67.],\n         ...,\n         [ 53.,  53.,  53.],\n         [ 53.,  53.,  53.],\n         [ 93.,  93.,  93.]],\n\n        [[ 57.,  57.,  57.],\n         [  8.,   8.,   8.],\n         [  8.,   8.,   8.],\n         ...,\n         [138., 138., 138.],\n         [138., 138., 138.],\n         [128., 128., 128.]],\n\n        [[ 57.,  57.,  57.],\n         [  8.,   8.,   8.],\n         [  8.,   8.,   8.],\n         ...,\n         [138., 138., 138.],\n         [138., 138., 138.],\n         [128., 128., 128.]],\n\n        ...,\n\n        [[ 56.,  56.,  56.],\n         [ 26.,  26.,  26.],\n         [ 26.,  26.,  26.],\n         ...,\n         [ 86.,  86.,  86.],\n         [ 86.,  86.,  86.],\n         [ 38.,  38.,  38.]],\n\n        [[ 56.,  56.,  56.],\n         [ 26.,  26.,  26.],\n         [ 26.,  26.,  26.],\n         ...,\n         [ 86.,  86.,  86.],\n         [ 86.,  86.,  86.],\n         [ 38.,  38.,  38.]],\n\n        [[156., 156., 156.],\n         [ 45.,  45.,  45.],\n         [ 45.,  45.,  45.],\n         ...,\n         [118., 118., 118.],\n         [118., 118., 118.],\n         [ 30.,  30.,  30.]]],\n\n\n       [[[ 20.,  20.,  20.],\n         [116., 116., 116.],\n         [116., 116., 116.],\n         ...,\n         [154., 154., 154.],\n         [154., 154., 154.],\n         [ 55.,  55.,  55.]],\n\n        [[184., 184., 184.],\n         [ 95.,  95.,  95.],\n         [ 95.,  95.,  95.],\n         ...,\n         [ 43.,  43.,  43.],\n         [ 43.,  43.,  43.],\n         [ 53.,  53.,  53.]],\n\n        [[184., 184., 184.],\n         [ 95.,  95.,  95.],\n         [ 95.,  95.,  95.],\n         ...,\n         [ 43.,  43.,  43.],\n         [ 43.,  43.,  43.],\n         [ 53.,  53.,  53.]],\n\n        ...,\n\n        [[146., 146., 146.],\n         [ 19.,  19.,  19.],\n         [ 19.,  19.,  19.],\n         ...,\n         [ 94.,  94.,  94.],\n         [ 94.,  94.,  94.],\n         [ 29.,  29.,  29.]],\n\n        [[146., 146., 146.],\n         [ 19.,  19.,  19.],\n         [ 19.,  19.,  19.],\n         ...,\n         [ 94.,  94.,  94.],\n         [ 94.,  94.,  94.],\n         [ 29.,  29.,  29.]],\n\n        [[218., 218., 218.],\n         [219., 219., 219.],\n         [219., 219., 219.],\n         ...,\n         [ 82.,  82.,  82.],\n         [ 82.,  82.,  82.],\n         [ 35.,  35.,  35.]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([10,  1, 13])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x1363c0290>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": "13",
                                    "variable_type": "int64",
                                    "variable_shape": "()"
                                },
                                "fname": {
                                    "variable_value": "'class-1/subfolder-1/sub-subfolder/image-15.jpg'",
                                    "variable_type": "str",
                                    "variable_shape": "46"
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": "<PIL.Image.Image image mode=RGB size=26x26 at 0x1363E0A50>",
                                    "variable_type": "Image",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-358/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.image_data_generator.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x1363c0250>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "width_height_tuple": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "img.size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "_PIL_INTERPOLATION_METHODS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resample": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "img.resize": {
                                    "variable_value": "<bound method Image.resize of <PIL.Image.Image image mode=RGB size=26x26 at 0x1363E0A50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 20.,  20.,  20.],\n        [116., 116., 116.],\n        [116., 116., 116.],\n        ...,\n        [154., 154., 154.],\n        [154., 154., 154.],\n        [ 55.,  55.,  55.]],\n\n       [[184., 184., 184.],\n        [ 95.,  95.,  95.],\n        [ 95.,  95.,  95.],\n        ...,\n        [ 43.,  43.,  43.],\n        [ 43.,  43.,  43.],\n        [ 53.,  53.,  53.]],\n\n       [[184., 184., 184.],\n        [ 95.,  95.,  95.],\n        [ 95.,  95.,  95.],\n        ...,\n        [ 43.,  43.,  43.],\n        [ 43.,  43.,  43.],\n        [ 53.,  53.,  53.]],\n\n       ...,\n\n       [[146., 146., 146.],\n        [ 19.,  19.,  19.],\n        [ 19.,  19.,  19.],\n        ...,\n        [ 94.,  94.,  94.],\n        [ 94.,  94.,  94.],\n        [ 29.,  29.,  29.]],\n\n       [[146., 146., 146.],\n        [ 19.,  19.,  19.],\n        [ 19.,  19.,  19.],\n        ...,\n        [ 94.,  94.,  94.],\n        [ 94.,  94.,  94.],\n        [ 29.,  29.,  29.]],\n\n       [[218., 218., 218.],\n        [219., 219., 219.],\n        [219., 219., 219.],\n        ...,\n        [ 82.,  82.,  82.],\n        [ 82.,  82.,  82.],\n        [ 35.,  35.,  35.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=26x26 at 0x1363E0A50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": "array([[0., 1.],\n       [1., 0.],\n       [0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "batch_x.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1363e2760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "1",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "batch_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([4])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x1363c0290>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-358/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.image_data_generator.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x1363c0250>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "width_height_tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resample": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img.resize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_x.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "batch_x": {
                                    "variable_value": "array([[[[ 66.,  66.,  66.],\n         [202., 202., 202.],\n         [202., 202., 202.],\n         ...,\n         [ 76.,  76.,  76.],\n         [ 76.,  76.,  76.],\n         [ 83.,  83.,  83.]],\n\n        [[ 99.,  99.,  99.],\n         [ 28.,  28.,  28.],\n         [ 28.,  28.,  28.],\n         ...,\n         [133., 133., 133.],\n         [133., 133., 133.],\n         [ 11.,  11.,  11.]],\n\n        [[ 99.,  99.,  99.],\n         [ 28.,  28.,  28.],\n         [ 28.,  28.,  28.],\n         ...,\n         [133., 133., 133.],\n         [133., 133., 133.],\n         [ 11.,  11.,  11.]],\n\n        ...,\n\n        [[ 52.,  52.,  52.],\n         [109., 109., 109.],\n         [109., 109., 109.],\n         ...,\n         [ 71.,  71.,  71.],\n         [ 71.,  71.,  71.],\n         [189., 189., 189.]],\n\n        [[ 52.,  52.,  52.],\n         [109., 109., 109.],\n         [109., 109., 109.],\n         ...,\n         [ 71.,  71.,  71.],\n         [ 71.,  71.,  71.],\n         [189., 189., 189.]],\n\n        [[ 21.,  21.,  21.],\n         [ 71.,  71.,  71.],\n         [ 71.,  71.,  71.],\n         ...,\n         [166., 166., 166.],\n         [166., 166., 166.],\n         [  0.,   0.,   0.]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([4])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x1363c0290>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": "4",
                                    "variable_type": "int64",
                                    "variable_shape": "()"
                                },
                                "fname": {
                                    "variable_value": "'class-0/subfolder-2/image-10.jpg'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": "<PIL.Image.Image image mode=RGB size=26x26 at 0x1363E0450>",
                                    "variable_type": "Image",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-358/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.image_data_generator.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x1363c0250>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "width_height_tuple": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "img.size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "_PIL_INTERPOLATION_METHODS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resample": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "img.resize": {
                                    "variable_value": "<bound method Image.resize of <PIL.Image.Image image mode=RGB size=26x26 at 0x1363E0450>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[ 66.,  66.,  66.],\n        [202., 202., 202.],\n        [202., 202., 202.],\n        ...,\n        [ 76.,  76.,  76.],\n        [ 76.,  76.,  76.],\n        [ 83.,  83.,  83.]],\n\n       [[ 99.,  99.,  99.],\n        [ 28.,  28.,  28.],\n        [ 28.,  28.,  28.],\n        ...,\n        [133., 133., 133.],\n        [133., 133., 133.],\n        [ 11.,  11.,  11.]],\n\n       [[ 99.,  99.,  99.],\n        [ 28.,  28.,  28.],\n        [ 28.,  28.,  28.],\n        ...,\n        [133., 133., 133.],\n        [133., 133., 133.],\n        [ 11.,  11.,  11.]],\n\n       ...,\n\n       [[ 52.,  52.,  52.],\n        [109., 109., 109.],\n        [109., 109., 109.],\n        ...,\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        [189., 189., 189.]],\n\n       [[ 52.,  52.,  52.],\n        [109., 109., 109.],\n        [109., 109., 109.],\n        ...,\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        [189., 189., 189.]],\n\n       [[ 21.,  21.,  21.],\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        ...,\n        [166., 166., 166.],\n        [166., 166., 166.],\n        [  0.,   0.,   0.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=26x26 at 0x1363E0450>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": "array([[1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "batch_x.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1363fa030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "0",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "batch_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x13695a110>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "16"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-358/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.image_data_generator.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x1201abb50>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "width_height_tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resample": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img.resize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_x.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "batch_x": {
                                    "variable_value": "array([[[[77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.],\n         ...,\n         [77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.]],\n\n        [[77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.],\n         ...,\n         [77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.]],\n\n        [[77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.],\n         ...,\n         [77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.]],\n\n        ...,\n\n        [[77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.],\n         ...,\n         [77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.]],\n\n        [[77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.],\n         ...,\n         [77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.]],\n\n        [[77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.],\n         ...,\n         [77., 77., 77.],\n         [77., 77., 77.],\n         [77., 77., 77.]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x13695a110>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "16"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": "9",
                                    "variable_type": "int64",
                                    "variable_shape": "()"
                                },
                                "fname": {
                                    "variable_value": "'class-1/subfolder-1/image-13.jpg'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": "<PIL.Image.Image image mode=RGB size=26x26 at 0x1363E00D0>",
                                    "variable_type": "Image",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-358/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.image_data_generator.preprocessing_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x1201abb50>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "width_height_tuple": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "img.size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "_PIL_INTERPOLATION_METHODS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_PIL_INTERPOLATION_METHODS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resample": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "img.resize": {
                                    "variable_value": "<bound method Image.resize of <PIL.Image.Image image mode=RGB size=26x26 at 0x1363E00D0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[[77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.],\n        ...,\n        [77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.]],\n\n       [[77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.],\n        ...,\n        [77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.]],\n\n       [[77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.],\n        ...,\n        [77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.]],\n\n       ...,\n\n       [[77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.],\n        ...,\n        [77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.]],\n\n       [[77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.],\n        ...,\n        [77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.]],\n\n       [[77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.],\n        ...,\n        [77., 77., 77.],\n        [77., 77., 77.],\n        [77., 77., 77.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=26x26 at 0x1363E00D0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": "array([[0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "batch_x.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1369462b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "1",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_get_batches_of_transformed_samples",
                    "function_code": "def _get_batches_of_transformed_samples(self, index_array):\n    batch_x = np.zeros((len(index_array),) + self.image_shape, dtype=K.floatx())\n    grayscale = self.color_mode == 'grayscale'\n    # build batch of image data\n    for i, j in enumerate(index_array):\n        fname = self.filenames[j]\n        img = load_img(os.path.join(self.directory, fname),\n                       grayscale=grayscale,\n                       target_size=self.target_size,\n                       interpolation=self.interpolation)\n        x = img_to_array(img, data_format=self.data_format)\n        x = self.image_data_generator.random_transform(x)\n        x = self.image_data_generator.standardize(x)\n        batch_x[i] = x\n    # optionally save augmented images to disk for debugging purposes\n    if self.save_to_dir:\n        for i, j in enumerate(index_array):\n            img = array_to_img(batch_x[i], self.data_format, scale=True)\n            fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,\n                                                              index=j,\n                                                              hash=np.random.randint(1e7),\n                                                              format=self.save_format)\n            img.save(os.path.join(self.save_to_dir, fname))\n    # build batch of labels\n    if self.class_mode == 'input':\n        batch_y = batch_x.copy()\n    elif self.class_mode == 'sparse':\n        batch_y = self.classes[index_array]\n    elif self.class_mode == 'binary':\n        batch_y = self.classes[index_array].astype(K.floatx())\n    elif self.class_mode == 'categorical':\n        batch_y = np.zeros((len(batch_x), self.num_classes), dtype=K.floatx())\n        for i, label in enumerate(self.classes[index_array]):\n            batch_y[i, label] = 1.\n    else:\n        return batch_x\n    return batch_x, batch_y\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1222,
                    "end_line": 1258,
                    "variables": {
                        "batch_x": [
                            1253,
                            1223,
                            1257,
                            1258,
                            1235,
                            1239,
                            1247
                        ],
                        "np.zeros": [
                            1253,
                            1223
                        ],
                        "np": [
                            1242,
                            1253,
                            1223
                        ],
                        "len": [
                            1253,
                            1223
                        ],
                        "index_array": [
                            1249,
                            1251,
                            1254,
                            1223,
                            1226,
                            1238
                        ],
                        "self.image_shape": [
                            1223
                        ],
                        "self": [
                            1223,
                            1224,
                            1227,
                            1228,
                            1230,
                            1231,
                            1232,
                            1233,
                            1234,
                            1237,
                            1239,
                            1240,
                            1243,
                            1244,
                            1246,
                            1248,
                            1249,
                            1250,
                            1251,
                            1252,
                            1253,
                            1254
                        ],
                        "K.floatx": [
                            1251,
                            1253,
                            1223
                        ],
                        "K": [
                            1251,
                            1253,
                            1223
                        ],
                        "grayscale": [
                            1224,
                            1229
                        ],
                        "self.color_mode": [
                            1224
                        ],
                        "i": [
                            1254,
                            1255,
                            1226,
                            1235,
                            1238,
                            1239
                        ],
                        "j": [
                            1241,
                            1226,
                            1227,
                            1238
                        ],
                        "enumerate": [
                            1254,
                            1226,
                            1238
                        ],
                        "fname": [
                            1240,
                            1244,
                            1227,
                            1228
                        ],
                        "self.filenames": [
                            1227
                        ],
                        "img": [
                            1232,
                            1244,
                            1228,
                            1239
                        ],
                        "load_img": [
                            1228
                        ],
                        "os.path.join": [
                            1244,
                            1228
                        ],
                        "os.path": [
                            1244,
                            1228
                        ],
                        "os": [
                            1244,
                            1228
                        ],
                        "self.directory": [
                            1228
                        ],
                        "self.target_size": [
                            1230
                        ],
                        "self.interpolation": [
                            1231
                        ],
                        "x": [
                            1232,
                            1233,
                            1234,
                            1235
                        ],
                        "img_to_array": [
                            1232
                        ],
                        "self.data_format": [
                            1232,
                            1239
                        ],
                        "self.image_data_generator.random_transform": [
                            1233
                        ],
                        "self.image_data_generator": [
                            1233,
                            1234
                        ],
                        "self.image_data_generator.standardize": [
                            1234
                        ],
                        "self.save_to_dir": [
                            1244,
                            1237
                        ],
                        "array_to_img": [
                            1239
                        ],
                        "format": [
                            1240
                        ],
                        "self.save_prefix": [
                            1240
                        ],
                        "np.random.randint": [
                            1242
                        ],
                        "np.random": [
                            1242
                        ],
                        "self.save_format": [
                            1243
                        ],
                        "img.save": [
                            1244
                        ],
                        "self.class_mode": [
                            1248,
                            1250,
                            1252,
                            1246
                        ],
                        "batch_y": [
                            1249,
                            1251,
                            1253,
                            1255,
                            1258,
                            1247
                        ],
                        "batch_x.copy": [
                            1247
                        ],
                        "self.classes": [
                            1249,
                            1251,
                            1254
                        ],
                        "astype": [
                            1251
                        ],
                        "self.num_classes": [
                            1253
                        ],
                        "label": [
                            1254,
                            1255
                        ]
                    },
                    "filtered_variables": {
                        "batch_x": [
                            1253,
                            1223,
                            1257,
                            1258,
                            1235,
                            1239,
                            1247
                        ],
                        "np.zeros": [
                            1253,
                            1223
                        ],
                        "np": [
                            1242,
                            1253,
                            1223
                        ],
                        "index_array": [
                            1249,
                            1251,
                            1254,
                            1223,
                            1226,
                            1238
                        ],
                        "self.image_shape": [
                            1223
                        ],
                        "self": [
                            1223,
                            1224,
                            1227,
                            1228,
                            1230,
                            1231,
                            1232,
                            1233,
                            1234,
                            1237,
                            1239,
                            1240,
                            1243,
                            1244,
                            1246,
                            1248,
                            1249,
                            1250,
                            1251,
                            1252,
                            1253,
                            1254
                        ],
                        "K.floatx": [
                            1251,
                            1253,
                            1223
                        ],
                        "K": [
                            1251,
                            1253,
                            1223
                        ],
                        "grayscale": [
                            1224,
                            1229
                        ],
                        "self.color_mode": [
                            1224
                        ],
                        "i": [
                            1254,
                            1255,
                            1226,
                            1235,
                            1238,
                            1239
                        ],
                        "j": [
                            1241,
                            1226,
                            1227,
                            1238
                        ],
                        "fname": [
                            1240,
                            1244,
                            1227,
                            1228
                        ],
                        "self.filenames": [
                            1227
                        ],
                        "img": [
                            1232,
                            1244,
                            1228,
                            1239
                        ],
                        "load_img": [
                            1228
                        ],
                        "os.path.join": [
                            1244,
                            1228
                        ],
                        "os.path": [
                            1244,
                            1228
                        ],
                        "os": [
                            1244,
                            1228
                        ],
                        "self.directory": [
                            1228
                        ],
                        "self.target_size": [
                            1230
                        ],
                        "self.interpolation": [
                            1231
                        ],
                        "x": [
                            1232,
                            1233,
                            1234,
                            1235
                        ],
                        "img_to_array": [
                            1232
                        ],
                        "self.data_format": [
                            1232,
                            1239
                        ],
                        "self.image_data_generator.random_transform": [
                            1233
                        ],
                        "self.image_data_generator": [
                            1233,
                            1234
                        ],
                        "self.image_data_generator.standardize": [
                            1234
                        ],
                        "self.save_to_dir": [
                            1244,
                            1237
                        ],
                        "array_to_img": [
                            1239
                        ],
                        "self.save_prefix": [
                            1240
                        ],
                        "np.random.randint": [
                            1242
                        ],
                        "np.random": [
                            1242
                        ],
                        "self.save_format": [
                            1243
                        ],
                        "img.save": [
                            1244
                        ],
                        "self.class_mode": [
                            1248,
                            1250,
                            1252,
                            1246
                        ],
                        "batch_y": [
                            1249,
                            1251,
                            1253,
                            1255,
                            1258,
                            1247
                        ],
                        "batch_x.copy": [
                            1247
                        ],
                        "self.classes": [
                            1249,
                            1251,
                            1254
                        ],
                        "astype": [
                            1251
                        ],
                        "self.num_classes": [
                            1253
                        ],
                        "label": [
                            1254,
                            1255
                        ]
                    },
                    "diff_line_number": 1230,
                    "class_data": {
                        "signature": "class DirectoryIterator(Iterator)",
                        "docstring": "Iterator capable of reading images from a directory on disk.\n\n# Arguments\n    directory: Path to the directory to read images from.\n        Each subdirectory in this directory will be\n        considered to contain images from one class,\n        or alternatively you could specify class subdirectories\n        via the `classes` argument.\n    image_data_generator: Instance of `ImageDataGenerator`\n        to use for random transformations and normalization.\n    target_size: tuple of integers, dimensions to resize input images to.\n    color_mode: One of `\"rgb\"`, `\"grayscale\"`. Color mode to read images.\n    classes: Optional list of strings, names of subdirectories\n        containing images from each class (e.g. `[\"dogs\", \"cats\"]`).\n        It will be computed automatically if not set.\n    class_mode: Mode for yielding the targets:\n        `\"binary\"`: binary targets (if there are only two classes),\n        `\"categorical\"`: categorical targets,\n        `\"sparse\"`: integer targets,\n        `\"input\"`: targets are images identical to input images (mainly\n            used to work with autoencoders),\n        `None`: no targets get yielded (only input images are yielded).\n    batch_size: Integer, size of a batch.\n    shuffle: Boolean, whether to shuffle the data between epochs.\n    seed: Random seed for data shuffling.\n    data_format: String, one of `channels_first`, `channels_last`.\n    save_to_dir: Optional directory where to save the pictures\n        being yielded, in a viewable format. This is useful\n        for visualizing the random transformations being\n        applied, for debugging purposes.\n    save_prefix: String prefix to use for saving sample\n        images (if `save_to_dir` is set).\n    save_format: Format to use for saving sample images\n        (if `save_to_dir` is set).\n    subset: Subset of data (`\"training\"` or `\"validation\"`) if\n        validation_split is set in ImageDataGenerator.\n    interpolation: Interpolation method used to resample the image if the\n        target size is different from that of the loaded image.\n        Supported methods are \"nearest\", \"bilinear\", and \"bicubic\".\n        If PIL version 1.1.3 or newer is installed, \"lanczos\" is also\n        supported. If PIL version 3.4.0 or newer is installed, \"box\" and\n        \"hamming\" are also supported. By default, \"nearest\" is used.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, directory, image_data_generator, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest'):\n    if data_format is None:\n        data_format = K.image_data_format()\n    self.directory = directory\n    self.image_data_generator = image_data_generator\n    self.target_size = tuple(target_size)\n    if color_mode not in {'rgb', 'grayscale'}:\n        raise ValueError('Invalid color mode:', color_mode, '; expected \"rgb\" or \"grayscale\".')\n    self.color_mode = color_mode\n    self.data_format = data_format\n    if self.color_mode == 'rgb':\n        if self.data_format == 'channels_last':\n            self.image_shape = self.target_size + (3,)\n        else:\n            self.image_shape = (3,) + self.target_size\n    elif self.data_format == 'channels_last':\n        self.image_shape = self.target_size + (1,)\n    else:\n        self.image_shape = (1,) + self.target_size\n    self.classes = classes\n    if class_mode not in {'categorical', 'binary', 'sparse', 'input', None}:\n        raise ValueError('Invalid class_mode:', class_mode, '; expected one of \"categorical\", \"binary\", \"sparse\", \"input\" or None.')\n    self.class_mode = class_mode\n    self.save_to_dir = save_to_dir\n    self.save_prefix = save_prefix\n    self.save_format = save_format\n    self.interpolation = interpolation\n    if subset is not None:\n        validation_split = self.image_data_generator._validation_split\n        if subset == 'validation':\n            split = (0, validation_split)\n        elif subset == 'training':\n            split = (validation_split, 1)\n        else:\n            raise ValueError('Invalid subset name: ', subset, '; expected \"training\" or \"validation\"')\n    else:\n        split = None\n    self.subset = subset\n    white_list_formats = {'png', 'jpg', 'jpeg', 'bmp', 'ppm', 'tif', 'tiff'}\n    self.samples = 0\n    if not classes:\n        classes = []\n        for subdir in sorted(os.listdir(directory)):\n            if os.path.isdir(os.path.join(directory, subdir)):\n                classes.append(subdir)\n    self.num_classes = len(classes)\n    self.class_indices = dict(zip(classes, range(len(classes))))\n    pool = multiprocessing.pool.ThreadPool()\n    function_partial = partial(_count_valid_files_in_directory, white_list_formats=white_list_formats, follow_links=follow_links, split=split)\n    self.samples = sum(pool.map(function_partial, (os.path.join(directory, subdir) for subdir in classes)))\n    print('Found %d images belonging to %d classes.' % (self.samples, self.num_classes))\n    results = []\n    self.filenames = []\n    self.classes = np.zeros((self.samples,), dtype='int32')\n    i = 0\n    for dirpath in (os.path.join(directory, subdir) for subdir in classes):\n        results.append(pool.apply_async(_list_valid_filenames_in_directory, (dirpath, white_list_formats, split, self.class_indices, follow_links)))\n    for res in results:\n        classes, filenames = res.get()\n        self.classes[i:i + len(classes)] = classes\n        self.filenames += filenames\n        i += len(classes)\n    pool.close()\n    pool.join()\n    super(DirectoryIterator, self).__init__(self.samples, batch_size, shuffle, seed)",
                            "def _get_batches_of_transformed_samples(self, index_array):\n    batch_x = np.zeros((len(index_array),) + self.image_shape, dtype=K.floatx())\n    grayscale = self.color_mode == 'grayscale'\n    for i, j in enumerate(index_array):\n        fname = self.filenames[j]\n        img = load_img(os.path.join(self.directory, fname), grayscale=grayscale, target_size=self.target_size, interpolation=self.interpolation)\n        x = img_to_array(img, data_format=self.data_format)\n        x = self.image_data_generator.random_transform(x)\n        x = self.image_data_generator.standardize(x)\n        batch_x[i] = x\n    if self.save_to_dir:\n        for i, j in enumerate(index_array):\n            img = array_to_img(batch_x[i], self.data_format, scale=True)\n            fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix, index=j, hash=np.random.randint(10000000.0), format=self.save_format)\n            img.save(os.path.join(self.save_to_dir, fname))\n    if self.class_mode == 'input':\n        batch_y = batch_x.copy()\n    elif self.class_mode == 'sparse':\n        batch_y = self.classes[index_array]\n    elif self.class_mode == 'binary':\n        batch_y = self.classes[index_array].astype(K.floatx())\n    elif self.class_mode == 'categorical':\n        batch_y = np.zeros((len(batch_x), self.num_classes), dtype=K.floatx())\n        for i, label in enumerate(self.classes[index_array]):\n            batch_y[i, label] = 1.0\n    else:\n        return batch_x\n    return (batch_x, batch_y)",
                            "def next(self):\n    \"\"\"For python 2.x.\n\n    # Returns\n        The next batch.\n    \"\"\"\n    with self.lock:\n        index_array = next(self.index_generator)\n    return self._get_batches_of_transformed_samples(index_array)"
                        ],
                        "constructor_variables": [
                            "class_indices",
                            "interpolation",
                            "color_mode",
                            "split",
                            "white_list_formats",
                            "save_prefix",
                            "num_classes",
                            "classes",
                            "function_partial",
                            "results",
                            "subset",
                            "class_mode",
                            "validation_split",
                            "image_shape",
                            "data_format",
                            "filenames",
                            "target_size",
                            "save_format",
                            "save_to_dir",
                            "directory",
                            "samples",
                            "i",
                            "image_data_generator",
                            "pool"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, directory, image_data_generator, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest')",
                            "_get_batches_of_transformed_samples(self, index_array)",
                            "next(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "batch_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([9, 6, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x12ce970d0>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-355/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x12ce981d0>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_x.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "batch_x": {
                                    "variable_value": "array([[[[ 25.,  25.,  25.],\n         [ 46.,  46.,  46.],\n         [ 46.,  46.,  46.],\n         ...,\n         [ 98.,  98.,  98.],\n         [ 98.,  98.,  98.],\n         [ 73.,  73.,  73.]],\n\n        [[ 11.,  11.,  11.],\n         [  5.,   5.,   5.],\n         [  5.,   5.,   5.],\n         ...,\n         [ 43.,  43.,  43.],\n         [ 43.,  43.,  43.],\n         [141., 141., 141.]],\n\n        [[ 11.,  11.,  11.],\n         [  5.,   5.,   5.],\n         [  5.,   5.,   5.],\n         ...,\n         [ 43.,  43.,  43.],\n         [ 43.,  43.,  43.],\n         [141., 141., 141.]],\n\n        ...,\n\n        [[106., 106., 106.],\n         [ 24.,  24.,  24.],\n         [ 24.,  24.,  24.],\n         ...,\n         [ 28.,  28.,  28.],\n         [ 28.,  28.,  28.],\n         [109., 109., 109.]],\n\n        [[106., 106., 106.],\n         [ 24.,  24.,  24.],\n         [ 24.,  24.,  24.],\n         ...,\n         [ 28.,  28.,  28.],\n         [ 28.,  28.,  28.],\n         [109., 109., 109.]],\n\n        [[ 39.,  39.,  39.],\n         [218., 218., 218.],\n         [218., 218., 218.],\n         ...,\n         [ 63.,  63.,  63.],\n         [ 63.,  63.,  63.],\n         [ 76.,  76.,  76.]]],\n\n\n       [[[ 60.,  72.,  48.],\n         [103., 113., 102.],\n         [103., 113., 102.],\n         ...,\n         [ 72.,  74.,  50.],\n         [ 72.,  74.,  50.],\n         [ 30.,  33.,  12.]],\n\n        [[ 24.,  34.,  23.],\n         [105., 115., 107.],\n         [105., 115., 107.],\n         ...,\n         [ 57.,  43.,  68.],\n         [ 57.,  43.,  68.],\n         [136., 126., 151.]],\n\n        [[ 24.,  34.,  23.],\n         [105., 115., 107.],\n         [105., 115., 107.],\n         ...,\n         [ 57.,  43.,  68.],\n         [ 57.,  43.,  68.],\n         [136., 126., 151.]],\n\n        ...,\n\n        [[  0.,  23.,  12.],\n         [121., 125., 102.],\n         [121., 125., 102.],\n         ...,\n         [127., 121., 109.],\n         [127., 121., 109.],\n         [115., 120.,  88.]],\n\n        [[  0.,  23.,  12.],\n         [121., 125., 102.],\n         [121., 125., 102.],\n         ...,\n         [127., 121., 109.],\n         [127., 121., 109.],\n         [115., 120.,  88.]],\n\n        [[ 88., 133., 110.],\n         [128., 143., 112.],\n         [128., 143., 112.],\n         ...,\n         [ 73.,  73.,  61.],\n         [ 73.,  73.,  61.],\n         [ 58.,  69.,  37.]]],\n\n\n       [[[ 83., 116.,  87.],\n         [105., 124., 102.],\n         [105., 124., 102.],\n         ...,\n         [ 50.,  37.,  21.],\n         [ 50.,  37.,  21.],\n         [ 82.,  69.,  53.]],\n\n        [[ 89.,  90.,  76.],\n         [ 99.,  95.,  84.],\n         [ 99.,  95.,  84.],\n         ...,\n         [ 72.,  64.,  51.],\n         [ 72.,  64.,  51.],\n         [112., 104.,  91.]],\n\n        [[ 89.,  90.,  76.],\n         [ 99.,  95.,  84.],\n         [ 99.,  95.,  84.],\n         ...,\n         [ 72.,  64.,  51.],\n         [ 72.,  64.,  51.],\n         [112., 104.,  91.]],\n\n        ...,\n\n        [[122., 124., 103.],\n         [ 34.,  24.,  12.],\n         [ 34.,  24.,  12.],\n         ...,\n         [112., 128., 125.],\n         [112., 128., 125.],\n         [ 51.,  57.,  83.]],\n\n        [[122., 124., 103.],\n         [ 34.,  24.,  12.],\n         [ 34.,  24.,  12.],\n         ...,\n         [112., 128., 125.],\n         [112., 128., 125.],\n         [ 51.,  57.,  83.]],\n\n        [[ 26.,  31.,  11.],\n         [152., 149., 134.],\n         [152., 149., 134.],\n         ...,\n         [ 72., 109., 115.],\n         [ 72., 109., 115.],\n         [ 68.,  98., 134.]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([9, 6, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x12ce970d0>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": "8",
                                    "variable_type": "int64",
                                    "variable_shape": "()"
                                },
                                "fname": {
                                    "variable_value": "'class-1/subfolder-1/image-1.jpg'",
                                    "variable_type": "str",
                                    "variable_shape": "31"
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": "<PIL.Image.Image image mode=RGB size=26x26 at 0x12C976410>",
                                    "variable_type": "Image",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-355/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "x": {
                                    "variable_value": "array([[[ 83., 116.,  87.],\n        [105., 124., 102.],\n        [105., 124., 102.],\n        ...,\n        [ 50.,  37.,  21.],\n        [ 50.,  37.,  21.],\n        [ 82.,  69.,  53.]],\n\n       [[ 89.,  90.,  76.],\n        [ 99.,  95.,  84.],\n        [ 99.,  95.,  84.],\n        ...,\n        [ 72.,  64.,  51.],\n        [ 72.,  64.,  51.],\n        [112., 104.,  91.]],\n\n       [[ 89.,  90.,  76.],\n        [ 99.,  95.,  84.],\n        [ 99.,  95.,  84.],\n        ...,\n        [ 72.,  64.,  51.],\n        [ 72.,  64.,  51.],\n        [112., 104.,  91.]],\n\n       ...,\n\n       [[122., 124., 103.],\n        [ 34.,  24.,  12.],\n        [ 34.,  24.,  12.],\n        ...,\n        [112., 128., 125.],\n        [112., 128., 125.],\n        [ 51.,  57.,  83.]],\n\n       [[122., 124., 103.],\n        [ 34.,  24.,  12.],\n        [ 34.,  24.,  12.],\n        ...,\n        [112., 128., 125.],\n        [112., 128., 125.],\n        [ 51.,  57.,  83.]],\n\n       [[ 26.,  31.,  11.],\n        [152., 149., 134.],\n        [152., 149., 134.],\n        ...,\n        [ 72., 109., 115.],\n        [ 72., 109., 115.],\n        [ 68.,  98., 134.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x12ce981d0>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=26x26 at 0x12C976410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": "array([[0., 1.],\n       [1., 0.],\n       [0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "batch_x.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x12c982e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "1",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "batch_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([13])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x12ce970d0>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-355/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x12ce981d0>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_x.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "batch_x": {
                                    "variable_value": "array([[[[173., 173., 173.],\n         [105., 105., 105.],\n         [105., 105., 105.],\n         ...,\n         [ 73.,  73.,  73.],\n         [ 73.,  73.,  73.],\n         [145., 145., 145.]],\n\n        [[ 31.,  31.,  31.],\n         [ 37.,  37.,  37.],\n         [ 37.,  37.,  37.],\n         ...,\n         [ 89.,  89.,  89.],\n         [ 89.,  89.,  89.],\n         [ 80.,  80.,  80.]],\n\n        [[ 31.,  31.,  31.],\n         [ 37.,  37.,  37.],\n         [ 37.,  37.,  37.],\n         ...,\n         [ 89.,  89.,  89.],\n         [ 89.,  89.,  89.],\n         [ 80.,  80.,  80.]],\n\n        ...,\n\n        [[154., 154., 154.],\n         [ 32.,  32.,  32.],\n         [ 32.,  32.,  32.],\n         ...,\n         [136., 136., 136.],\n         [136., 136., 136.],\n         [197., 197., 197.]],\n\n        [[154., 154., 154.],\n         [ 32.,  32.,  32.],\n         [ 32.,  32.,  32.],\n         ...,\n         [136., 136., 136.],\n         [136., 136., 136.],\n         [197., 197., 197.]],\n\n        [[ 60.,  60.,  60.],\n         [ 71.,  71.,  71.],\n         [ 71.,  71.,  71.],\n         ...,\n         [ 76.,  76.,  76.],\n         [ 76.,  76.,  76.],\n         [ 89.,  89.,  89.]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([13])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.image_shape": {
                                    "variable_value": "(26, 26, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "<keras.preprocessing.image.DirectoryIterator object at 0x12ce970d0>",
                                    "variable_type": "DirectoryIterator",
                                    "variable_shape": "6"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grayscale": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.color_mode": {
                                    "variable_value": "'rgb'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": "13",
                                    "variable_type": "int64",
                                    "variable_shape": "()"
                                },
                                "fname": {
                                    "variable_value": "'class-1/subfolder-1/sub-subfolder/image-15.jpg'",
                                    "variable_type": "str",
                                    "variable_shape": "46"
                                },
                                "self.filenames": {
                                    "variable_value": "['class-0/image-0.jpg', 'class-0/image-12.jpg', 'class-0/image-4.jpg', 'class-0/image-8.jpg', 'class-0/subfolder-2/image-10.jpg', 'class-0/subfolder-2/image-14.jpg', 'class-0/subfolder-2/image-2.jpg', 'class-0/subfolder-2/image-6.jpg', 'class-1/subfolder-1/image-1.jpg', 'class-1/subfolder-1/image-13.jpg', 'class-1/subfolder-1/image-5.jpg', 'class-1/subfolder-1/image-9.jpg', 'class-1/subfolder-1/sub-subfolder/image-11.jpg', 'class-1/subfolder-1/sub-subfolder/image-15.jpg', 'class-1/subfolder-1/sub-subfolder/image-3.jpg', 'class-1/subfolder-1/sub-subfolder/image-7.jpg']",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "img": {
                                    "variable_value": "<PIL.Image.Image image mode=RGB size=26x26 at 0x12C987F10>",
                                    "variable_type": "Image",
                                    "variable_shape": null
                                },
                                "load_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.directory": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-355/popen-gw0/test_directory_iterator0'",
                                    "variable_type": "str",
                                    "variable_shape": "118"
                                },
                                "self.target_size": {
                                    "variable_value": "(26, 26)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self.interpolation": {
                                    "variable_value": "'nearest'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "x": {
                                    "variable_value": "array([[[173., 173., 173.],\n        [105., 105., 105.],\n        [105., 105., 105.],\n        ...,\n        [ 73.,  73.,  73.],\n        [ 73.,  73.,  73.],\n        [145., 145., 145.]],\n\n       [[ 31.,  31.,  31.],\n        [ 37.,  37.,  37.],\n        [ 37.,  37.,  37.],\n        ...,\n        [ 89.,  89.,  89.],\n        [ 89.,  89.,  89.],\n        [ 80.,  80.,  80.]],\n\n       [[ 31.,  31.,  31.],\n        [ 37.,  37.,  37.],\n        [ 37.,  37.,  37.],\n        ...,\n        [ 89.,  89.,  89.],\n        [ 89.,  89.,  89.],\n        [ 80.,  80.,  80.]],\n\n       ...,\n\n       [[154., 154., 154.],\n        [ 32.,  32.,  32.],\n        [ 32.,  32.,  32.],\n        ...,\n        [136., 136., 136.],\n        [136., 136., 136.],\n        [197., 197., 197.]],\n\n       [[154., 154., 154.],\n        [ 32.,  32.,  32.],\n        [ 32.,  32.,  32.],\n        ...,\n        [136., 136., 136.],\n        [136., 136., 136.],\n        [197., 197., 197.]],\n\n       [[ 60.,  60.,  60.],\n        [ 71.,  71.,  71.],\n        [ 71.,  71.,  71.],\n        ...,\n        [ 76.,  76.,  76.],\n        [ 76.,  76.,  76.],\n        [ 89.,  89.,  89.]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "26"
                                },
                                "img_to_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "self.image_data_generator.random_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.image_data_generator": {
                                    "variable_value": "<keras.preprocessing.image.ImageDataGenerator object at 0x12ce981d0>",
                                    "variable_type": "ImageDataGenerator",
                                    "variable_shape": null
                                },
                                "self.image_data_generator.standardize": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.save_to_dir": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array_to_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "np.random.randint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.save_format": {
                                    "variable_value": "'png'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "img.save": {
                                    "variable_value": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=26x26 at 0x12C987F10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.class_mode": {
                                    "variable_value": "'categorical'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "batch_y": {
                                    "variable_value": "array([[0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "batch_x.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x12c97fad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.classes": {
                                    "variable_value": "array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.num_classes": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "1",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def random_rotation(x, rg, row_axis=1, col_axis=2, channel_axis=0,\n                    fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random rotation of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        rg: Rotation range, in degrees.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Rotated Numpy image tensor.\n    \"\"\"\n    theta = np.deg2rad(np.random.uniform(-rg, rg))\n    rotation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0],\n                                [np.sin(theta), np.cos(theta), 0],\n                                [0, 0, 1]])\n\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    transform_matrix = transform_matrix_offset_center(rotation_matrix, h, w)\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x",
                "def random_shift(x, wrg, hrg, row_axis=1, col_axis=2, channel_axis=0,\n                 fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random spatial shift of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        wrg: Width shift range, as a float fraction of the width.\n        hrg: Height shift range, as a float fraction of the height.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Shifted Numpy image tensor.\n    \"\"\"\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    tx = np.random.uniform(-hrg, hrg) * h\n    ty = np.random.uniform(-wrg, wrg) * w\n    translation_matrix = np.array([[1, 0, tx],\n                                   [0, 1, ty],\n                                   [0, 0, 1]])\n\n    transform_matrix = translation_matrix  # no need to do offset\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x",
                "def random_shear(x, intensity, row_axis=1, col_axis=2, channel_axis=0,\n                 fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random spatial shear of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        intensity: Transformation intensity in degrees.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Sheared Numpy image tensor.\n    \"\"\"\n    shear = np.deg2rad(np.random.uniform(-intensity, intensity))\n    shear_matrix = np.array([[1, -np.sin(shear), 0],\n                             [0, np.cos(shear), 0],\n                             [0, 0, 1]])\n\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    transform_matrix = transform_matrix_offset_center(shear_matrix, h, w)\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x",
                "def random_zoom(x, zoom_range, row_axis=1, col_axis=2, channel_axis=0,\n                fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random spatial zoom of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        zoom_range: Tuple of floats; zoom range for width and height.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Zoomed Numpy image tensor.\n\n    # Raises\n        ValueError: if `zoom_range` isn't a tuple.\n    \"\"\"\n    if len(zoom_range) != 2:\n        raise ValueError('`zoom_range` should be a tuple or list of two floats. '\n                         'Received arg: ', zoom_range)\n\n    if zoom_range[0] == 1 and zoom_range[1] == 1:\n        zx, zy = 1, 1\n    else:\n        zx, zy = np.random.uniform(zoom_range[0], zoom_range[1], 2)\n    zoom_matrix = np.array([[zx, 0, 0],\n                            [0, zy, 0],\n                            [0, 0, 1]])\n\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    transform_matrix = transform_matrix_offset_center(zoom_matrix, h, w)\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x",
                "def random_channel_shift(x, intensity, channel_axis=0):\n    x = np.rollaxis(x, channel_axis, 0)\n    min_x, max_x = np.min(x), np.max(x)\n    channel_images = [np.clip(x_channel + np.random.uniform(-intensity, intensity), min_x, max_x)\n                      for x_channel in x]\n    x = np.stack(channel_images, axis=0)\n    x = np.rollaxis(x, 0, channel_axis + 1)\n    return x",
                "def random_brightness(x, brightness_range):\n    if len(brightness_range) != 2:\n        raise ValueError('`brightness_range should be tuple or list of two floats. '\n                         'Received arg: ', brightness_range)\n\n    x = array_to_img(x)\n    x = imgenhancer_Brightness = ImageEnhance.Brightness(x)\n    u = np.random.uniform(brightness_range[0], brightness_range[1])\n    x = imgenhancer_Brightness.enhance(u)\n    x = img_to_array(x)\n    return x",
                "def transform_matrix_offset_center(matrix, x, y):\n    o_x = float(x) / 2 + 0.5\n    o_y = float(y) / 2 + 0.5\n    offset_matrix = np.array([[1, 0, o_x], [0, 1, o_y], [0, 0, 1]])\n    reset_matrix = np.array([[1, 0, -o_x], [0, 1, -o_y], [0, 0, 1]])\n    transform_matrix = np.dot(np.dot(offset_matrix, matrix), reset_matrix)\n    return transform_matrix",
                "def apply_transform(x,\n                    transform_matrix,\n                    channel_axis=0,\n                    fill_mode='nearest',\n                    cval=0.):\n    \"\"\"Apply the image transformation specified by a matrix.\n\n    # Arguments\n        x: 2D numpy array, single image.\n        transform_matrix: Numpy array specifying the geometric transformation.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        The transformed version of the input.\n    \"\"\"\n    x = np.rollaxis(x, channel_axis, 0)\n    final_affine_matrix = transform_matrix[:2, :2]\n    final_offset = transform_matrix[:2, 2]\n    channel_images = [ndi.interpolation.affine_transform(\n        x_channel,\n        final_affine_matrix,\n        final_offset,\n        order=1,\n        mode=fill_mode,\n        cval=cval) for x_channel in x]\n    x = np.stack(channel_images, axis=0)\n    x = np.rollaxis(x, 0, channel_axis + 1)\n    return x",
                "def flip_axis(x, axis):\n    x = np.asarray(x).swapaxes(axis, 0)\n    x = x[::-1, ...]\n    x = x.swapaxes(0, axis)\n    return x",
                "def array_to_img(x, data_format=None, scale=True):\n    \"\"\"Converts a 3D Numpy array to a PIL Image instance.\n\n    # Arguments\n        x: Input Numpy array.\n        data_format: Image data format.\n        scale: Whether to rescale image values\n            to be within [0, 255].\n\n    # Returns\n        A PIL Image instance.\n\n    # Raises\n        ImportError: if PIL is not available.\n        ValueError: if invalid `x` or `data_format` is passed.\n    \"\"\"\n    if pil_image is None:\n        raise ImportError('Could not import PIL.Image. '\n                          'The use of `array_to_img` requires PIL.')\n    x = np.asarray(x, dtype=K.floatx())\n    if x.ndim != 3:\n        raise ValueError('Expected image array to have rank 3 (single image). '\n                         'Got array with shape:', x.shape)\n\n    if data_format is None:\n        data_format = K.image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Invalid data_format:', data_format)\n\n    # Original Numpy array x has format (height, width, channel)\n    # or (channel, height, width)\n    # but target PIL image has format (width, height, channel)\n    if data_format == 'channels_first':\n        x = x.transpose(1, 2, 0)\n    if scale:\n        x = x + max(-np.min(x), 0)\n        x_max = np.max(x)\n        if x_max != 0:\n            x /= x_max\n        x *= 255\n    if x.shape[2] == 3:\n        # RGB\n        return pil_image.fromarray(x.astype('uint8'), 'RGB')\n    elif x.shape[2] == 1:\n        # grayscale\n        return pil_image.fromarray(x[:, :, 0].astype('uint8'), 'L')\n    else:\n        raise ValueError('Unsupported channel number: ', x.shape[2])",
                "def img_to_array(img, data_format=None):\n    \"\"\"Converts a PIL Image instance to a Numpy array.\n\n    # Arguments\n        img: PIL Image instance.\n        data_format: Image data format.\n\n    # Returns\n        A 3D Numpy array.\n\n    # Raises\n        ValueError: if invalid `img` or `data_format` is passed.\n    \"\"\"\n    if data_format is None:\n        data_format = K.image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ', data_format)\n    # Numpy array x has format (height, width, channel)\n    # or (channel, height, width)\n    # but original PIL image has format (width, height, channel)\n    x = np.asarray(img, dtype=K.floatx())\n    if len(x.shape) == 3:\n        if data_format == 'channels_first':\n            x = x.transpose(2, 0, 1)\n    elif len(x.shape) == 2:\n        if data_format == 'channels_first':\n            x = x.reshape((1, x.shape[0], x.shape[1]))\n        else:\n            x = x.reshape((x.shape[0], x.shape[1], 1))\n    else:\n        raise ValueError('Unsupported image shape: ', x.shape)\n    return x",
                "def load_img(path, grayscale=False, target_size=None,\n             interpolation='nearest'):\n    \"\"\"Loads an image into PIL format.\n\n    # Arguments\n        path: Path to image file\n        grayscale: Boolean, whether to load the image as grayscale.\n        target_size: Either `None` (default to original size)\n            or tuple of ints `(img_height, img_width)`.\n        interpolation: Interpolation method used to resample the image if the\n            target size is different from that of the loaded image.\n            Supported methods are \"nearest\", \"bilinear\", and \"bicubic\".\n            If PIL version 1.1.3 or newer is installed, \"lanczos\" is also\n            supported. If PIL version 3.4.0 or newer is installed, \"box\" and\n            \"hamming\" are also supported. By default, \"nearest\" is used.\n\n    # Returns\n        A PIL Image instance.\n\n    # Raises\n        ImportError: if PIL is not available.\n        ValueError: if interpolation method is not supported.\n    \"\"\"\n    if pil_image is None:\n        raise ImportError('Could not import PIL.Image. '\n                          'The use of `array_to_img` requires PIL.')\n    img = pil_image.open(path)\n    if grayscale:\n        if img.mode != 'L':\n            img = img.convert('L')\n    else:\n        if img.mode != 'RGB':\n            img = img.convert('RGB')\n    if target_size is not None:\n        width_height_tuple = (target_size[1], target_size[0])\n        if img.size != width_height_tuple:\n            if interpolation not in _PIL_INTERPOLATION_METHODS:\n                raise ValueError(\n                    'Invalid interpolation method {} specified. Supported '\n                    'methods are {}'.format(\n                        interpolation,\n                        \", \".join(_PIL_INTERPOLATION_METHODS.keys())))\n            resample = _PIL_INTERPOLATION_METHODS[interpolation]\n            img = img.resize(width_height_tuple, resample)\n    return img",
                "def list_pictures(directory, ext='jpg|jpeg|bmp|png|ppm'):\n    return [os.path.join(root, f)\n            for root, _, files in os.walk(directory) for f in files\n            if re.match(r'([\\w]+\\.(?:' + ext + '))', f)]",
                "def _iter_valid_files(directory, white_list_formats, follow_links):\n    \"\"\"Count files with extension in `white_list_formats` contained in directory.\n\n    # Arguments\n        directory: absolute path to the directory\n            containing files to be counted\n        white_list_formats: set of strings containing allowed extensions for\n            the files to be counted.\n        follow_links: boolean.\n\n    # Yields\n        tuple of (root, filename) with extension in `white_list_formats`.\n    \"\"\"\n    def _recursive_list(subpath):\n        return sorted(os.walk(subpath, followlinks=follow_links), key=lambda x: x[0])\n\n    for root, _, files in _recursive_list(directory):\n        for fname in sorted(files):\n            for extension in white_list_formats:\n                if fname.lower().endswith('.tiff'):\n                    warnings.warn('Using \\'.tiff\\' files with multiple bands will cause distortion. '\n                                  'Please verify your output.')\n                if fname.lower().endswith('.' + extension):\n                    yield root, fname",
                "def _count_valid_files_in_directory(directory, white_list_formats, split, follow_links):\n    \"\"\"Count files with extension in `white_list_formats` contained in directory.\n\n    # Arguments\n        directory: absolute path to the directory\n            containing files to be counted\n        white_list_formats: set of strings containing allowed extensions for\n            the files to be counted.\n        split: tuple of floats (e.g. `(0.2, 0.6)`) to only take into\n            account a certain fraction of files in each directory.\n            E.g.: `segment=(0.6, 1.0)` would only account for last 40 percent\n            of images in each directory.\n        follow_links: boolean.\n\n    # Returns\n        the count of files with extension in `white_list_formats` contained in\n        the directory.\n    \"\"\"\n    num_files = len(list(_iter_valid_files(directory, white_list_formats, follow_links)))\n    if split:\n        start, stop = int(split[0] * num_files), int(split[1] * num_files)\n    else:\n        start, stop = 0, num_files\n    return stop - start",
                "def _list_valid_filenames_in_directory(directory, white_list_formats, split,\n                                       class_indices, follow_links):\n    \"\"\"List paths of files in `subdir` with extensions in `white_list_formats`.\n\n    # Arguments\n        directory: absolute path to a directory containing the files to list.\n            The directory name is used as class label and must be a key of `class_indices`.\n        white_list_formats: set of strings containing allowed extensions for\n            the files to be counted.\n        split: tuple of floats (e.g. `(0.2, 0.6)`) to only take into\n            account a certain fraction of files in each directory.\n            E.g.: `segment=(0.6, 1.0)` would only account for last 40 percent\n            of images in each directory.\n        class_indices: dictionary mapping a class name to its index.\n        follow_links: boolean.\n\n    # Returns\n        classes: a list of class indices\n        filenames: the path of valid files in `directory`, relative from\n            `directory`'s parent (e.g., if `directory` is \"dataset/class1\",\n            the filenames will be [\"class1/file1.jpg\", \"class1/file2.jpg\", ...]).\n    \"\"\"\n    dirname = os.path.basename(directory)\n    if split:\n        num_files = len(list(_iter_valid_files(directory, white_list_formats, follow_links)))\n        start, stop = int(split[0] * num_files), int(split[1] * num_files)\n        valid_files = list(_iter_valid_files(directory, white_list_formats, follow_links))[start: stop]\n    else:\n        valid_files = _iter_valid_files(directory, white_list_formats, follow_links)\n\n    classes = []\n    filenames = []\n    for root, fname in valid_files:\n        classes.append(class_indices[dirname])\n        absolute_path = os.path.join(root, fname)\n        relative_path = os.path.join(dirname, os.path.relpath(absolute_path, directory))\n        filenames.append(relative_path)\n\n    return classes, filenames",
                "def __init__(self,\n             featurewise_center=False,\n             samplewise_center=False,\n             featurewise_std_normalization=False,\n             samplewise_std_normalization=False,\n             zca_whitening=False,\n             zca_epsilon=1e-6,\n             rotation_range=0.,\n             width_shift_range=0.,\n             height_shift_range=0.,\n             brightness_range=None,\n             shear_range=0.,\n             zoom_range=0.,\n             channel_shift_range=0.,\n             fill_mode='nearest',\n             cval=0.,\n             horizontal_flip=False,\n             vertical_flip=False,\n             rescale=None,\n             preprocessing_function=None,\n             data_format=None,\n             validation_split=0.0):\n    if data_format is None:\n        data_format = K.image_data_format()\n    self.featurewise_center = featurewise_center\n    self.samplewise_center = samplewise_center\n    self.featurewise_std_normalization = featurewise_std_normalization\n    self.samplewise_std_normalization = samplewise_std_normalization\n    self.zca_whitening = zca_whitening\n    self.zca_epsilon = zca_epsilon\n    self.rotation_range = rotation_range\n    self.width_shift_range = width_shift_range\n    self.height_shift_range = height_shift_range\n    self.brightness_range = brightness_range\n    self.shear_range = shear_range\n    self.zoom_range = zoom_range\n    self.channel_shift_range = channel_shift_range\n    self.fill_mode = fill_mode\n    self.cval = cval\n    self.horizontal_flip = horizontal_flip\n    self.vertical_flip = vertical_flip\n    self.rescale = rescale\n    self.preprocessing_function = preprocessing_function\n\n    if data_format not in {'channels_last', 'channels_first'}:\n        raise ValueError('`data_format` should be `\"channels_last\"` (channel after row and '\n                         'column) or `\"channels_first\"` (channel before row and column). '\n                         'Received arg: ', data_format)\n    self.data_format = data_format\n    if data_format == 'channels_first':\n        self.channel_axis = 1\n        self.row_axis = 2\n        self.col_axis = 3\n    if data_format == 'channels_last':\n        self.channel_axis = 3\n        self.row_axis = 1\n        self.col_axis = 2\n    if validation_split and not 0 < validation_split < 1:\n        raise ValueError('`validation_split` must be strictly between 0 and 1. '\n                         ' Received arg: ', validation_split)\n    self._validation_split = validation_split\n\n    self.mean = None\n    self.std = None\n    self.principal_components = None\n\n    if np.isscalar(zoom_range):\n        self.zoom_range = [1 - zoom_range, 1 + zoom_range]\n    elif len(zoom_range) == 2:\n        self.zoom_range = [zoom_range[0], zoom_range[1]]\n    else:\n        raise ValueError('`zoom_range` should be a float or '\n                         'a tuple or list of two floats. '\n                         'Received arg: ', zoom_range)\n    if zca_whitening:\n        if not featurewise_center:\n            self.featurewise_center = True\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`zca_whitening`, which overrides '\n                          'setting of `featurewise_center`.')\n        if featurewise_std_normalization:\n            self.featurewise_std_normalization = False\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`zca_whitening` '\n                          'which overrides setting of'\n                          '`featurewise_std_normalization`.')\n    if featurewise_std_normalization:\n        if not featurewise_center:\n            self.featurewise_center = True\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`featurewise_std_normalization`, '\n                          'which overrides setting of '\n                          '`featurewise_center`.')\n    if samplewise_std_normalization:\n        if not samplewise_center:\n            self.samplewise_center = True\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`samplewise_std_normalization`, '\n                          'which overrides setting of '\n                          '`samplewise_center`.')",
                "def flow(self, x, y=None, batch_size=32, shuffle=True, seed=None,\n         save_to_dir=None, save_prefix='', save_format='png', subset=None):\n    return NumpyArrayIterator(\n        x, y, self,\n        batch_size=batch_size,\n        shuffle=shuffle,\n        seed=seed,\n        data_format=self.data_format,\n        save_to_dir=save_to_dir,\n        save_prefix=save_prefix,\n        save_format=save_format,\n        subset=subset)",
                "def flow_from_directory(self, directory,\n                        target_size=(256, 256), color_mode='rgb',\n                        classes=None, class_mode='categorical',\n                        batch_size=32, shuffle=True, seed=None,\n                        save_to_dir=None,\n                        save_prefix='',\n                        save_format='png',\n                        follow_links=False,\n                        subset=None,\n                        interpolation='nearest'):\n    return DirectoryIterator(\n        directory, self,\n        target_size=target_size, color_mode=color_mode,\n        classes=classes, class_mode=class_mode,\n        data_format=self.data_format,\n        batch_size=batch_size, shuffle=shuffle, seed=seed,\n        save_to_dir=save_to_dir,\n        save_prefix=save_prefix,\n        save_format=save_format,\n        follow_links=follow_links,\n        subset=subset,\n        interpolation=interpolation)",
                "def standardize(self, x):\n    \"\"\"Apply the normalization configuration to a batch of inputs.\n\n    # Arguments\n        x: batch of inputs to be normalized.\n\n    # Returns\n        The inputs, normalized.\n    \"\"\"\n    if self.preprocessing_function:\n        x = self.preprocessing_function(x)\n    if self.rescale:\n        x *= self.rescale\n    if self.samplewise_center:\n        x -= np.mean(x, keepdims=True)\n    if self.samplewise_std_normalization:\n        x /= (np.std(x, keepdims=True) + K.epsilon())\n\n    if self.featurewise_center:\n        if self.mean is not None:\n            x -= self.mean\n        else:\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`featurewise_center`, but it hasn\\'t '\n                          'been fit on any training data. Fit it '\n                          'first by calling `.fit(numpy_data)`.')\n    if self.featurewise_std_normalization:\n        if self.std is not None:\n            x /= (self.std + K.epsilon())\n        else:\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`featurewise_std_normalization`, but it hasn\\'t '\n                          'been fit on any training data. Fit it '\n                          'first by calling `.fit(numpy_data)`.')\n    if self.zca_whitening:\n        if self.principal_components is not None:\n            flatx = np.reshape(x, (-1, np.prod(x.shape[-3:])))\n            whitex = np.dot(flatx, self.principal_components)\n            x = np.reshape(whitex, x.shape)\n        else:\n            warnings.warn('This ImageDataGenerator specifies '\n                          '`zca_whitening`, but it hasn\\'t '\n                          'been fit on any training data. Fit it '\n                          'first by calling `.fit(numpy_data)`.')\n    return x",
                "def random_transform(self, x, seed=None):\n    \"\"\"Randomly augment a single image tensor.\n\n    # Arguments\n        x: 3D tensor, single image.\n        seed: random seed.\n\n    # Returns\n        A randomly transformed version of the input (same shape).\n    \"\"\"\n    # x is a single image, so it doesn't have image number at index 0\n    img_row_axis = self.row_axis - 1\n    img_col_axis = self.col_axis - 1\n    img_channel_axis = self.channel_axis - 1\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    # use composition of homographies\n    # to generate final transform that needs to be applied\n    if self.rotation_range:\n        theta = np.deg2rad(np.random.uniform(-self.rotation_range, self.rotation_range))\n    else:\n        theta = 0\n\n    if self.height_shift_range:\n        tx = np.random.uniform(-self.height_shift_range, self.height_shift_range)\n        if self.height_shift_range < 1:\n            tx *= x.shape[img_row_axis]\n    else:\n        tx = 0\n\n    if self.width_shift_range:\n        ty = np.random.uniform(-self.width_shift_range, self.width_shift_range)\n        if self.width_shift_range < 1:\n            ty *= x.shape[img_col_axis]\n    else:\n        ty = 0\n\n    if self.shear_range:\n        shear = np.deg2rad(np.random.uniform(-self.shear_range, self.shear_range))\n    else:\n        shear = 0\n\n    if self.zoom_range[0] == 1 and self.zoom_range[1] == 1:\n        zx, zy = 1, 1\n    else:\n        zx, zy = np.random.uniform(self.zoom_range[0], self.zoom_range[1], 2)\n\n    transform_matrix = None\n    if theta != 0:\n        rotation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0],\n                                    [np.sin(theta), np.cos(theta), 0],\n                                    [0, 0, 1]])\n        transform_matrix = rotation_matrix\n\n    if tx != 0 or ty != 0:\n        shift_matrix = np.array([[1, 0, tx],\n                                 [0, 1, ty],\n                                 [0, 0, 1]])\n        transform_matrix = shift_matrix if transform_matrix is None else np.dot(transform_matrix, shift_matrix)\n\n    if shear != 0:\n        shear_matrix = np.array([[1, -np.sin(shear), 0],\n                                [0, np.cos(shear), 0],\n                                [0, 0, 1]])\n        transform_matrix = shear_matrix if transform_matrix is None else np.dot(transform_matrix, shear_matrix)\n\n    if zx != 1 or zy != 1:\n        zoom_matrix = np.array([[zx, 0, 0],\n                                [0, zy, 0],\n                                [0, 0, 1]])\n        transform_matrix = zoom_matrix if transform_matrix is None else np.dot(transform_matrix, zoom_matrix)\n\n    if transform_matrix is not None:\n        h, w = x.shape[img_row_axis], x.shape[img_col_axis]\n        transform_matrix = transform_matrix_offset_center(transform_matrix, h, w)\n        x = apply_transform(x, transform_matrix, img_channel_axis,\n                            fill_mode=self.fill_mode, cval=self.cval)\n\n    if self.channel_shift_range != 0:\n        x = random_channel_shift(x,\n                                 self.channel_shift_range,\n                                 img_channel_axis)\n    if self.horizontal_flip:\n        if np.random.random() < 0.5:\n            x = flip_axis(x, img_col_axis)\n\n    if self.vertical_flip:\n        if np.random.random() < 0.5:\n            x = flip_axis(x, img_row_axis)\n\n    if self.brightness_range is not None:\n        x = random_brightness(x, self.brightness_range)\n\n    return x",
                "def fit(self, x,\n        augment=False,\n        rounds=1,\n        seed=None):\n    \"\"\"Fits internal statistics to some sample data.\n\n    Required for featurewise_center, featurewise_std_normalization\n    and zca_whitening.\n\n    # Arguments\n        x: Numpy array, the data to fit on. Should have rank 4.\n            In case of grayscale data,\n            the channels axis should have value 1, and in case\n            of RGB data, it should have value 3.\n        augment: Whether to fit on randomly augmented samples\n        rounds: If `augment`,\n            how many augmentation passes to do over the data\n        seed: random seed.\n\n    # Raises\n        ValueError: in case of invalid input `x`.\n    \"\"\"\n    x = np.asarray(x, dtype=K.floatx())\n    if x.ndim != 4:\n        raise ValueError('Input to `.fit()` should have rank 4. '\n                         'Got array with shape: ' + str(x.shape))\n    if x.shape[self.channel_axis] not in {1, 3, 4}:\n        warnings.warn(\n            'Expected input to be images (as Numpy array) '\n            'following the data format convention \"' + self.data_format + '\" '\n            '(channels on axis ' + str(self.channel_axis) + '), i.e. expected '\n            'either 1, 3 or 4 channels on axis ' + str(self.channel_axis) + '. '\n            'However, it was passed an array with shape ' + str(x.shape) +\n            ' (' + str(x.shape[self.channel_axis]) + ' channels).')\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    x = np.copy(x)\n    if augment:\n        ax = np.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=K.floatx())\n        for r in range(rounds):\n            for i in range(x.shape[0]):\n                ax[i + r * x.shape[0]] = self.random_transform(x[i])\n        x = ax\n\n    if self.featurewise_center:\n        self.mean = np.mean(x, axis=(0, self.row_axis, self.col_axis))\n        broadcast_shape = [1, 1, 1]\n        broadcast_shape[self.channel_axis - 1] = x.shape[self.channel_axis]\n        self.mean = np.reshape(self.mean, broadcast_shape)\n        x -= self.mean\n\n    if self.featurewise_std_normalization:\n        self.std = np.std(x, axis=(0, self.row_axis, self.col_axis))\n        broadcast_shape = [1, 1, 1]\n        broadcast_shape[self.channel_axis - 1] = x.shape[self.channel_axis]\n        self.std = np.reshape(self.std, broadcast_shape)\n        x /= (self.std + K.epsilon())\n\n    if self.zca_whitening:\n        flat_x = np.reshape(x, (x.shape[0], x.shape[1] * x.shape[2] * x.shape[3]))\n        sigma = np.dot(flat_x.T, flat_x) / flat_x.shape[0]\n        u, s, _ = linalg.svd(sigma)\n        s_inv = 1. / np.sqrt(s[np.newaxis] + self.zca_epsilon)\n        self.principal_components = (u * s_inv).dot(u.T)",
                "def __init__(self, n, batch_size, shuffle, seed):\n    self.n = n\n    self.batch_size = batch_size\n    self.seed = seed\n    self.shuffle = shuffle\n    self.batch_index = 0\n    self.total_batches_seen = 0\n    self.lock = threading.Lock()\n    self.index_array = None\n    self.index_generator = self._flow_index()",
                "def _set_index_array(self):\n    self.index_array = np.arange(self.n)\n    if self.shuffle:\n        self.index_array = np.random.permutation(self.n)",
                "def __getitem__(self, idx):\n    if idx >= len(self):\n        raise ValueError('Asked to retrieve element {idx}, '\n                         'but the Sequence '\n                         'has length {length}'.format(idx=idx,\n                                                      length=len(self)))\n    if self.seed is not None:\n        np.random.seed(self.seed + self.total_batches_seen)\n    self.total_batches_seen += 1\n    if self.index_array is None:\n        self._set_index_array()\n    index_array = self.index_array[self.batch_size * idx:\n                                   self.batch_size * (idx + 1)]\n    return self._get_batches_of_transformed_samples(index_array)",
                "def __len__(self):\n    return (self.n + self.batch_size - 1) // self.batch_size  # round up",
                "def on_epoch_end(self):\n    self._set_index_array()",
                "def reset(self):\n    self.batch_index = 0",
                "def _flow_index(self):\n    # Ensure self.batch_index is 0.\n    self.reset()\n    while 1:\n        if self.seed is not None:\n            np.random.seed(self.seed + self.total_batches_seen)\n        if self.batch_index == 0:\n            self._set_index_array()\n\n        current_index = (self.batch_index * self.batch_size) % self.n\n        if self.n > current_index + self.batch_size:\n            self.batch_index += 1\n        else:\n            self.batch_index = 0\n        self.total_batches_seen += 1\n        yield self.index_array[current_index:\n                               current_index + self.batch_size]",
                "def __iter__(self):\n    # Needed if we want to do something like:\n    # for x, y in data_gen.flow(...):\n    return self",
                "def __next__(self, *args, **kwargs):\n    return self.next(*args, **kwargs)",
                "def _get_batches_of_transformed_samples(self, index_array):\n    \"\"\"Gets a batch of transformed samples.\n\n    # Arguments\n        index_array: array of sample indices to include in batch.\n\n    # Returns\n        A batch of transformed samples.\n    \"\"\"\n    raise NotImplementedError",
                "def __init__(self, x, y, image_data_generator,\n             batch_size=32, shuffle=False, seed=None,\n             data_format=None,\n             save_to_dir=None, save_prefix='', save_format='png',\n             subset=None):\n    if y is not None and len(x) != len(y):\n        raise ValueError('`x` (images tensor) and `y` (labels) '\n                         'should have the same length. '\n                         'Found: x.shape = %s, y.shape = %s' %\n                         (np.asarray(x).shape, np.asarray(y).shape))\n    if subset is not None:\n        if subset not in {'training', 'validation'}:\n            raise ValueError('Invalid subset name:', subset,\n                             '; expected \"training\" or \"validation\".')\n        split_idx = int(len(x) * image_data_generator._validation_split)\n        if subset == 'validation':\n            x = x[:split_idx]\n            if y is not None:\n                y = y[:split_idx]\n        else:\n            x = x[split_idx:]\n            if y is not None:\n                y = y[split_idx:]\n    if data_format is None:\n        data_format = K.image_data_format()\n    self.x = np.asarray(x, dtype=K.floatx())\n    if self.x.ndim != 4:\n        raise ValueError('Input data in `NumpyArrayIterator` '\n                         'should have rank 4. You passed an array '\n                         'with shape', self.x.shape)\n    channels_axis = 3 if data_format == 'channels_last' else 1\n    if self.x.shape[channels_axis] not in {1, 3, 4}:\n        warnings.warn('NumpyArrayIterator is set to use the '\n                      'data format convention \"' + data_format + '\" '\n                      '(channels on axis ' + str(channels_axis) + '), i.e. expected '\n                      'either 1, 3 or 4 channels on axis ' + str(channels_axis) + '. '\n                      'However, it was passed an array with shape ' + str(self.x.shape) +\n                      ' (' + str(self.x.shape[channels_axis]) + ' channels).')\n    if y is not None:\n        self.y = np.asarray(y)\n    else:\n        self.y = None\n    self.image_data_generator = image_data_generator\n    self.data_format = data_format\n    self.save_to_dir = save_to_dir\n    self.save_prefix = save_prefix\n    self.save_format = save_format\n    super(NumpyArrayIterator, self).__init__(x.shape[0], batch_size, shuffle, seed)",
                "def _get_batches_of_transformed_samples(self, index_array):\n    batch_x = np.zeros(tuple([len(index_array)] + list(self.x.shape)[1:]),\n                       dtype=K.floatx())\n    for i, j in enumerate(index_array):\n        x = self.x[j]\n        x = self.image_data_generator.random_transform(x.astype(K.floatx()))\n        x = self.image_data_generator.standardize(x)\n        batch_x[i] = x\n    if self.save_to_dir:\n        for i, j in enumerate(index_array):\n            img = array_to_img(batch_x[i], self.data_format, scale=True)\n            fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,\n                                                              index=j,\n                                                              hash=np.random.randint(1e4),\n                                                              format=self.save_format)\n            img.save(os.path.join(self.save_to_dir, fname))\n    if self.y is None:\n        return batch_x\n    batch_y = self.y[index_array]\n    return batch_x, batch_y",
                "def next(self):\n    \"\"\"For python 2.x.\n\n    # Returns\n        The next batch.\n    \"\"\"\n    # Keeps under lock only the mechanism which advances\n    # the indexing of each batch.\n    with self.lock:\n        index_array = next(self.index_generator)\n    # The transformation of images is not under thread lock\n    # so it can be done in parallel\n    return self._get_batches_of_transformed_samples(index_array)",
                "def _recursive_list(subpath):\n    return sorted(os.walk(subpath, followlinks=follow_links), key=lambda x: x[0])",
                "def __init__(self, directory, image_data_generator,\n             target_size=(256, 256), color_mode='rgb',\n             classes=None, class_mode='categorical',\n             batch_size=32, shuffle=True, seed=None,\n             data_format=None,\n             save_to_dir=None, save_prefix='', save_format='png',\n             follow_links=False,\n             subset=None,\n             interpolation='nearest'):\n    if data_format is None:\n        data_format = K.image_data_format()\n    self.directory = directory\n    self.image_data_generator = image_data_generator\n    self.target_size = tuple(target_size)\n    if color_mode not in {'rgb', 'grayscale'}:\n        raise ValueError('Invalid color mode:', color_mode,\n                         '; expected \"rgb\" or \"grayscale\".')\n    self.color_mode = color_mode\n    self.data_format = data_format\n    if self.color_mode == 'rgb':\n        if self.data_format == 'channels_last':\n            self.image_shape = self.target_size + (3,)\n        else:\n            self.image_shape = (3,) + self.target_size\n    else:\n        if self.data_format == 'channels_last':\n            self.image_shape = self.target_size + (1,)\n        else:\n            self.image_shape = (1,) + self.target_size\n    self.classes = classes\n    if class_mode not in {'categorical', 'binary', 'sparse',\n                          'input', None}:\n        raise ValueError('Invalid class_mode:', class_mode,\n                         '; expected one of \"categorical\", '\n                         '\"binary\", \"sparse\", \"input\"'\n                         ' or None.')\n    self.class_mode = class_mode\n    self.save_to_dir = save_to_dir\n    self.save_prefix = save_prefix\n    self.save_format = save_format\n    self.interpolation = interpolation\n\n    if subset is not None:\n        validation_split = self.image_data_generator._validation_split\n        if subset == 'validation':\n            split = (0, validation_split)\n        elif subset == 'training':\n            split = (validation_split, 1)\n        else:\n            raise ValueError('Invalid subset name: ', subset,\n                             '; expected \"training\" or \"validation\"')\n    else:\n        split = None\n    self.subset = subset\n\n    white_list_formats = {'png', 'jpg', 'jpeg', 'bmp', 'ppm', 'tif', 'tiff'}\n\n    # first, count the number of samples and classes\n    self.samples = 0\n\n    if not classes:\n        classes = []\n        for subdir in sorted(os.listdir(directory)):\n            if os.path.isdir(os.path.join(directory, subdir)):\n                classes.append(subdir)\n    self.num_classes = len(classes)\n    self.class_indices = dict(zip(classes, range(len(classes))))\n\n    pool = multiprocessing.pool.ThreadPool()\n    function_partial = partial(_count_valid_files_in_directory,\n                               white_list_formats=white_list_formats,\n                               follow_links=follow_links,\n                               split=split)\n    self.samples = sum(pool.map(function_partial,\n                                (os.path.join(directory, subdir)\n                                 for subdir in classes)))\n\n    print('Found %d images belonging to %d classes.' % (self.samples, self.num_classes))\n\n    # second, build an index of the images in the different class subfolders\n    results = []\n\n    self.filenames = []\n    self.classes = np.zeros((self.samples,), dtype='int32')\n    i = 0\n    for dirpath in (os.path.join(directory, subdir) for subdir in classes):\n        results.append(pool.apply_async(_list_valid_filenames_in_directory,\n                                        (dirpath, white_list_formats, split,\n                                         self.class_indices, follow_links)))\n    for res in results:\n        classes, filenames = res.get()\n        self.classes[i:i + len(classes)] = classes\n        self.filenames += filenames\n        i += len(classes)\n\n    pool.close()\n    pool.join()\n    super(DirectoryIterator, self).__init__(self.samples, batch_size, shuffle, seed)",
                "def _get_batches_of_transformed_samples(self, index_array):\n    batch_x = np.zeros((len(index_array),) + self.image_shape, dtype=K.floatx())\n    grayscale = self.color_mode == 'grayscale'\n    # build batch of image data\n    for i, j in enumerate(index_array):\n        fname = self.filenames[j]\n        img = load_img(os.path.join(self.directory, fname),\n                       grayscale=grayscale,\n                       target_size=self.target_size,\n                       interpolation=self.interpolation)\n        x = img_to_array(img, data_format=self.data_format)\n        x = self.image_data_generator.random_transform(x)\n        x = self.image_data_generator.standardize(x)\n        batch_x[i] = x\n    # optionally save augmented images to disk for debugging purposes\n    if self.save_to_dir:\n        for i, j in enumerate(index_array):\n            img = array_to_img(batch_x[i], self.data_format, scale=True)\n            fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,\n                                                              index=j,\n                                                              hash=np.random.randint(1e7),\n                                                              format=self.save_format)\n            img.save(os.path.join(self.save_to_dir, fname))\n    # build batch of labels\n    if self.class_mode == 'input':\n        batch_y = batch_x.copy()\n    elif self.class_mode == 'sparse':\n        batch_y = self.classes[index_array]\n    elif self.class_mode == 'binary':\n        batch_y = self.classes[index_array].astype(K.floatx())\n    elif self.class_mode == 'categorical':\n        batch_y = np.zeros((len(batch_x), self.num_classes), dtype=K.floatx())\n        for i, label in enumerate(self.classes[index_array]):\n            batch_y[i, label] = 1.\n    else:\n        return batch_x\n    return batch_x, batch_y",
                "def next(self):\n    \"\"\"For python 2.x.\n\n    # Returns\n        The next batch.\n    \"\"\"\n    with self.lock:\n        index_array = next(self.index_generator)\n    # The transformation of images is not under thread lock\n    # so it can be done in parallel\n    return self._get_batches_of_transformed_samples(index_array)"
            ],
            "inscope_function_signatures": [
                "random_rotation(x, rg, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0)",
                "random_shift(x, wrg, hrg, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0)",
                "random_shear(x, intensity, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0)",
                "random_zoom(x, zoom_range, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0)",
                "random_channel_shift(x, intensity, channel_axis=0)",
                "random_brightness(x, brightness_range)",
                "transform_matrix_offset_center(matrix, x, y)",
                "apply_transform(x, transform_matrix, channel_axis=0, fill_mode='nearest', cval=0.0)",
                "flip_axis(x, axis)",
                "array_to_img(x, data_format=None, scale=True)",
                "img_to_array(img, data_format=None)",
                "load_img(path, grayscale=False, target_size=None, interpolation='nearest')",
                "list_pictures(directory, ext='jpg|jpeg|bmp|png|ppm')",
                "_iter_valid_files(directory, white_list_formats, follow_links)",
                "_count_valid_files_in_directory(directory, white_list_formats, split, follow_links)",
                "_list_valid_filenames_in_directory(directory, white_list_formats, split, class_indices, follow_links)",
                "__init__(self, featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False, samplewise_std_normalization=False, zca_whitening=False, zca_epsilon=1e-06, rotation_range=0.0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=False, vertical_flip=False, rescale=None, preprocessing_function=None, data_format=None, validation_split=0.0)",
                "flow(self, x, y=None, batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)",
                "flow_from_directory(self, directory, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest')",
                "standardize(self, x)",
                "random_transform(self, x, seed=None)",
                "fit(self, x, augment=False, rounds=1, seed=None)",
                "__init__(self, n, batch_size, shuffle, seed)",
                "_set_index_array(self)",
                "__getitem__(self, idx)",
                "__len__(self)",
                "on_epoch_end(self)",
                "reset(self)",
                "_flow_index(self)",
                "__iter__(self)",
                "__next__(self, *args, **kwargs)",
                "_get_batches_of_transformed_samples(self, index_array)",
                "__init__(self, x, y, image_data_generator, batch_size=32, shuffle=False, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)",
                "_get_batches_of_transformed_samples(self, index_array)",
                "next(self)",
                "_recursive_list(subpath)",
                "__init__(self, directory, image_data_generator, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest')",
                "_get_batches_of_transformed_samples(self, index_array)",
                "next(self)"
            ],
            "variables_in_file": {
                "ImportError": [
                    360,
                    27,
                    269
                ],
                "pil_image": [
                    32,
                    33,
                    34,
                    37,
                    38,
                    39,
                    40,
                    294,
                    42,
                    43,
                    268,
                    297,
                    359,
                    362,
                    28,
                    30
                ],
                "_PIL_INTERPOLATION_METHODS": [
                    38,
                    40,
                    43,
                    372,
                    377,
                    378,
                    31
                ],
                "pil_image.NEAREST": [
                    32
                ],
                "pil_image.BILINEAR": [
                    33
                ],
                "pil_image.BICUBIC": [
                    34
                ],
                "hasattr": [
                    42,
                    37,
                    39
                ],
                "pil_image.HAMMING": [
                    38
                ],
                "pil_image.BOX": [
                    40
                ],
                "pil_image.LANCZOS": [
                    43
                ],
                "theta": [
                    672,
                    641,
                    65,
                    66,
                    67,
                    643,
                    670,
                    671
                ],
                "np.deg2rad": [
                    65,
                    641,
                    660,
                    127
                ],
                "np": [
                    128,
                    129,
                    641,
                    771,
                    764,
                    646,
                    774,
                    778,
                    779,
                    653,
                    781,
                    271,
                    909,
                    767,
                    660,
                    667,
                    925,
                    287,
                    288,
                    671,
                    672,
                    677,
                    167,
                    168,
                    680,
                    810,
                    683,
                    684,
                    812,
                    686,
                    939,
                    689,
                    179,
                    180,
                    181,
                    692,
                    183,
                    184,
                    821,
                    950,
                    1206,
                    65,
                    66,
                    67,
                    195,
                    322,
                    705,
                    709,
                    962,
                    1223,
                    843,
                    204,
                    205,
                    206,
                    588,
                    590,
                    1242,
                    97,
                    98,
                    99,
                    610,
                    611,
                    230,
                    612,
                    739,
                    1253,
                    240,
                    241,
                    753,
                    755,
                    757,
                    246,
                    503,
                    636,
                    127
                ],
                "np.random.uniform": [
                    65,
                    98,
                    97,
                    195,
                    641,
                    646,
                    167,
                    653,
                    660,
                    181,
                    667,
                    127
                ],
                "np.random": [
                    641,
                    646,
                    653,
                    660,
                    667,
                    167,
                    812,
                    181,
                    821,
                    65,
                    705,
                    195,
                    962,
                    709,
                    843,
                    1242,
                    97,
                    98,
                    753,
                    636,
                    127
                ],
                "rg": [
                    65
                ],
                "rotation_matrix": [
                    671,
                    674,
                    66,
                    71
                ],
                "np.array": [
                    128,
                    66,
                    99,
                    677,
                    168,
                    683,
                    204,
                    205,
                    689,
                    671
                ],
                "np.cos": [
                    672,
                    129,
                    66,
                    67,
                    684,
                    671
                ],
                "np.sin": [
                    128,
                    672,
                    66,
                    67,
                    683,
                    671
                ],
                "h": [
                    96,
                    97,
                    132,
                    133,
                    70,
                    71,
                    172,
                    173,
                    695,
                    696
                ],
                "w": [
                    96,
                    98,
                    132,
                    133,
                    70,
                    71,
                    172,
                    173,
                    695,
                    696
                ],
                "x.shape": [
                    132,
                    773,
                    648,
                    778,
                    655,
                    274,
                    292,
                    295,
                    299,
                    172,
                    947,
                    695,
                    323,
                    70,
                    326,
                    328,
                    330,
                    332,
                    96,
                    610,
                    612,
                    742,
                    743,
                    749,
                    750,
                    757,
                    759,
                    760,
                    766
                ],
                "x": [
                    541,
                    70,
                    72,
                    73,
                    586,
                    584,
                    588,
                    590,
                    594,
                    602,
                    96,
                    610,
                    612,
                    104,
                    105,
                    618,
                    132,
                    134,
                    135,
                    648,
                    655,
                    172,
                    174,
                    175,
                    179,
                    180,
                    182,
                    183,
                    184,
                    185,
                    695,
                    697,
                    701,
                    193,
                    194,
                    706,
                    196,
                    197,
                    198,
                    710,
                    713,
                    202,
                    715,
                    1232,
                    1233,
                    1234,
                    1235,
                    739,
                    740,
                    230,
                    742,
                    743,
                    749,
                    750,
                    239,
                    240,
                    241,
                    242,
                    755,
                    757,
                    246,
                    247,
                    248,
                    249,
                    759,
                    760,
                    761,
                    764,
                    766,
                    768,
                    771,
                    773,
                    775,
                    778,
                    271,
                    272,
                    274,
                    285,
                    287,
                    288,
                    290,
                    291,
                    292,
                    294,
                    295,
                    297,
                    299,
                    322,
                    323,
                    325,
                    326,
                    328,
                    330,
                    332,
                    333,
                    905,
                    909,
                    914,
                    916,
                    920,
                    925,
                    947,
                    953,
                    954,
                    955,
                    956,
                    999
                ],
                "row_axis": [
                    96,
                    172,
                    132,
                    70
                ],
                "col_axis": [
                    96,
                    172,
                    132,
                    70
                ],
                "transform_matrix": [
                    133,
                    134,
                    669,
                    674,
                    680,
                    173,
                    174,
                    686,
                    692,
                    694,
                    696,
                    697,
                    71,
                    72,
                    206,
                    207,
                    103,
                    104,
                    231,
                    232
                ],
                "transform_matrix_offset_center": [
                    696,
                    173,
                    133,
                    71
                ],
                "apply_transform": [
                    134,
                    72,
                    104,
                    174,
                    697
                ],
                "channel_axis": [
                    134,
                    230,
                    72,
                    104,
                    174,
                    241,
                    179,
                    184
                ],
                "fill_mode": [
                    134,
                    72,
                    104,
                    174,
                    238,
                    474
                ],
                "cval": [
                    134,
                    72,
                    104,
                    174,
                    239,
                    475
                ],
                "tx": [
                    97,
                    99,
                    676,
                    677,
                    646,
                    648,
                    650
                ],
                "hrg": [
                    97
                ],
                "ty": [
                    98,
                    100,
                    676,
                    678,
                    653,
                    655,
                    657
                ],
                "wrg": [
                    98
                ],
                "translation_matrix": [
                    99,
                    103
                ],
                "shear": [
                    128,
                    129,
                    682,
                    683,
                    684,
                    660,
                    662,
                    127
                ],
                "intensity": [
                    181,
                    127
                ],
                "shear_matrix": [
                    128,
                    683,
                    133,
                    686
                ],
                "len": [
                    160,
                    1216,
                    323,
                    1188,
                    1029,
                    326,
                    1061,
                    1189,
                    905,
                    1223,
                    1253,
                    815,
                    914,
                    819,
                    950,
                    505,
                    189,
                    1214
                ],
                "zoom_range": [
                    160,
                    162,
                    164,
                    167,
                    504,
                    503,
                    472,
                    505,
                    506,
                    510
                ],
                "ValueError": [
                    1155,
                    906,
                    912,
                    273,
                    1172,
                    279,
                    927,
                    161,
                    299,
                    816,
                    318,
                    190,
                    332,
                    482,
                    741,
                    495,
                    1138,
                    373,
                    508
                ],
                "zx": [
                    165,
                    167,
                    168,
                    688,
                    689,
                    665,
                    667
                ],
                "zy": [
                    165,
                    167,
                    169,
                    688,
                    690,
                    665,
                    667
                ],
                "zoom_matrix": [
                    168,
                    689,
                    692,
                    173
                ],
                "np.rollaxis": [
                    184,
                    241,
                    179,
                    230
                ],
                "min_x": [
                    180,
                    181
                ],
                "max_x": [
                    180,
                    181
                ],
                "np.min": [
                    180,
                    287
                ],
                "np.max": [
                    288,
                    180
                ],
                "channel_images": [
                    240,
                    233,
                    181,
                    183
                ],
                "np.clip": [
                    181
                ],
                "x_channel": [
                    234,
                    181,
                    182,
                    239
                ],
                "np.stack": [
                    240,
                    183
                ],
                "brightness_range": [
                    195,
                    189,
                    470,
                    191
                ],
                "array_to_img": [
                    193,
                    1239,
                    959
                ],
                "imgenhancer_Brightness": [
                    194,
                    196
                ],
                "ImageEnhance.Brightness": [
                    194
                ],
                "ImageEnhance": [
                    194
                ],
                "u": [
                    195,
                    196,
                    780,
                    782
                ],
                "imgenhancer_Brightness.enhance": [
                    196
                ],
                "img_to_array": [
                    1232,
                    197
                ],
                "o_x": [
                    202,
                    204,
                    205
                ],
                "float": [
                    202,
                    203
                ],
                "o_y": [
                    203,
                    204,
                    205
                ],
                "y": [
                    905,
                    938,
                    203,
                    939,
                    909,
                    917,
                    918,
                    921,
                    922,
                    541
                ],
                "offset_matrix": [
                    204,
                    206
                ],
                "reset_matrix": [
                    205,
                    206
                ],
                "np.dot": [
                    611,
                    680,
                    779,
                    686,
                    206,
                    692
                ],
                "matrix": [
                    206
                ],
                "final_affine_matrix": [
                    235,
                    231
                ],
                "final_offset": [
                    232,
                    236
                ],
                "ndi.interpolation.affine_transform": [
                    233
                ],
                "ndi.interpolation": [
                    233
                ],
                "ndi": [
                    233
                ],
                "swapaxes": [
                    246
                ],
                "np.asarray": [
                    322,
                    739,
                    939,
                    909,
                    271,
                    246,
                    925
                ],
                "axis": [
                    248,
                    246
                ],
                "x.swapaxes": [
                    248
                ],
                "K.floatx": [
                    322,
                    739,
                    1251,
                    1253,
                    1223,
                    271,
                    757,
                    951,
                    954,
                    925
                ],
                "K": [
                    954,
                    322,
                    739,
                    1251,
                    1253,
                    775,
                    1223,
                    924,
                    460,
                    1133,
                    590,
                    271,
                    277,
                    757,
                    951,
                    602,
                    316,
                    925
                ],
                "x.ndim": [
                    272,
                    740
                ],
                "data_format": [
                    276,
                    277,
                    278,
                    279,
                    923,
                    284,
                    924,
                    930,
                    933,
                    943,
                    315,
                    316,
                    317,
                    318,
                    324,
                    327,
                    459,
                    460,
                    481,
                    484,
                    485,
                    486,
                    490,
                    1132,
                    1133,
                    1141
                ],
                "K.image_data_format": [
                    460,
                    1133,
                    277,
                    316,
                    924
                ],
                "x.transpose": [
                    325,
                    285
                ],
                "scale": [
                    286
                ],
                "max": [
                    287
                ],
                "x_max": [
                    288,
                    289,
                    290
                ],
                "pil_image.fromarray": [
                    297,
                    294
                ],
                "x.astype": [
                    954,
                    294
                ],
                "astype": [
                    297,
                    1251
                ],
                "img": [
                    322,
                    964,
                    362,
                    364,
                    365,
                    1228,
                    367,
                    368,
                    1232,
                    371,
                    1244,
                    1239,
                    379,
                    380,
                    959
                ],
                "x.reshape": [
                    328,
                    330
                ],
                "pil_image.open": [
                    362
                ],
                "path": [
                    362
                ],
                "grayscale": [
                    1224,
                    363,
                    1229
                ],
                "img.mode": [
                    364,
                    367
                ],
                "img.convert": [
                    368,
                    365
                ],
                "target_size": [
                    1136,
                    369,
                    370,
                    563
                ],
                "width_height_tuple": [
                    379,
                    370,
                    371
                ],
                "img.size": [
                    371
                ],
                "interpolation": [
                    1163,
                    372,
                    376,
                    378,
                    572
                ],
                "format": [
                    816,
                    1240,
                    374,
                    960
                ],
                "join": [
                    377
                ],
                "_PIL_INTERPOLATION_METHODS.keys": [
                    377
                ],
                "resample": [
                    378,
                    379
                ],
                "img.resize": [
                    379
                ],
                "os.path.join": [
                    384,
                    1186,
                    964,
                    1228,
                    1197,
                    1071,
                    1072,
                    1208,
                    1244
                ],
                "os.path": [
                    384,
                    1186,
                    1059,
                    964,
                    1228,
                    1197,
                    1071,
                    1072,
                    1208,
                    1244
                ],
                "os": [
                    384,
                    385,
                    1185,
                    1059,
                    964,
                    1186,
                    999,
                    1228,
                    1197,
                    1071,
                    1072,
                    1208,
                    1244
                ],
                "root": [
                    384,
                    385,
                    1001,
                    1069,
                    1071,
                    1008
                ],
                "f": [
                    384,
                    385,
                    386
                ],
                "_": [
                    385,
                    780,
                    1001
                ],
                "files": [
                    385,
                    1002,
                    1001
                ],
                "os.walk": [
                    385,
                    999
                ],
                "directory": [
                    385,
                    1185,
                    1059,
                    1186,
                    1029,
                    1061,
                    1063,
                    1001,
                    1065,
                    1197,
                    1134,
                    1072,
                    562,
                    1208
                ],
                "re.match": [
                    386
                ],
                "re": [
                    386
                ],
                "ext": [
                    386
                ],
                "object": [
                    389
                ],
                "self.featurewise_center": [
                    513,
                    525,
                    461,
                    592,
                    763
                ],
                "self": [
                    513,
                    518,
                    525,
                    532,
                    541,
                    545,
                    562,
                    565,
                    583,
                    584,
                    585,
                    586,
                    587,
                    589,
                    592,
                    593,
                    594,
                    600,
                    601,
                    602,
                    608,
                    609,
                    611,
                    1134,
                    1135,
                    1136,
                    1140,
                    1141,
                    1142,
                    631,
                    632,
                    633,
                    1143,
                    1144,
                    1146,
                    1148,
                    1149,
                    1151,
                    640,
                    641,
                    1152,
                    645,
                    646,
                    647,
                    1159,
                    1160,
                    1161,
                    1162,
                    652,
                    653,
                    654,
                    1163,
                    1166,
                    659,
                    660,
                    664,
                    1176,
                    667,
                    1181,
                    1188,
                    1189,
                    1196,
                    1200,
                    1205,
                    1206,
                    698,
                    1211,
                    700,
                    702,
                    1214,
                    704,
                    1215,
                    708,
                    1220,
                    1223,
                    712,
                    713,
                    1224,
                    1227,
                    1228,
                    1230,
                    1231,
                    1232,
                    1233,
                    1234,
                    1237,
                    1239,
                    1240,
                    1243,
                    1244,
                    1246,
                    1248,
                    1249,
                    1250,
                    1251,
                    1252,
                    1253,
                    1254,
                    743,
                    746,
                    747,
                    748,
                    750,
                    1266,
                    1267,
                    1270,
                    760,
                    763,
                    764,
                    766,
                    767,
                    768,
                    770,
                    771,
                    773,
                    774,
                    775,
                    777,
                    781,
                    782,
                    799,
                    800,
                    801,
                    802,
                    803,
                    804,
                    805,
                    806,
                    807,
                    810,
                    811,
                    812,
                    815,
                    819,
                    820,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    978,
                    830,
                    979,
                    833,
                    836,
                    840,
                    842,
                    843,
                    844,
                    845,
                    982,
                    847,
                    848,
                    849,
                    851,
                    852,
                    853,
                    854,
                    859,
                    862,
                    925,
                    926,
                    929,
                    931,
                    936,
                    937,
                    939,
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947,
                    950,
                    953,
                    954,
                    955,
                    957,
                    959,
                    960,
                    963,
                    964,
                    965,
                    967,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    485,
                    487,
                    488,
                    489,
                    491,
                    492,
                    493,
                    497,
                    499,
                    500,
                    501,
                    504,
                    506
                ],
                "featurewise_center": [
                    512,
                    524,
                    461
                ],
                "self.samplewise_center": [
                    587,
                    532,
                    462
                ],
                "samplewise_center": [
                    531,
                    462
                ],
                "self.featurewise_std_normalization": [
                    600,
                    770,
                    518,
                    463
                ],
                "featurewise_std_normalization": [
                    523,
                    517,
                    463
                ],
                "self.samplewise_std_normalization": [
                    464,
                    589
                ],
                "samplewise_std_normalization": [
                    464,
                    530
                ],
                "self.zca_whitening": [
                    608,
                    465,
                    777
                ],
                "zca_whitening": [
                    465,
                    511
                ],
                "self.zca_epsilon": [
                    466,
                    781
                ],
                "zca_epsilon": [
                    466
                ],
                "self.rotation_range": [
                    640,
                    641,
                    467
                ],
                "rotation_range": [
                    467
                ],
                "self.width_shift_range": [
                    652,
                    468,
                    653,
                    654
                ],
                "width_shift_range": [
                    468
                ],
                "self.height_shift_range": [
                    646,
                    469,
                    645,
                    647
                ],
                "height_shift_range": [
                    469
                ],
                "self.brightness_range": [
                    712,
                    713,
                    470
                ],
                "self.shear_range": [
                    659,
                    660,
                    471
                ],
                "shear_range": [
                    471
                ],
                "self.zoom_range": [
                    504,
                    664,
                    472,
                    506,
                    667
                ],
                "self.channel_shift_range": [
                    473,
                    700,
                    702
                ],
                "channel_shift_range": [
                    473
                ],
                "self.fill_mode": [
                    698,
                    474
                ],
                "self.cval": [
                    698,
                    475
                ],
                "self.horizontal_flip": [
                    704,
                    476
                ],
                "horizontal_flip": [
                    476
                ],
                "self.vertical_flip": [
                    708,
                    477
                ],
                "vertical_flip": [
                    477
                ],
                "self.rescale": [
                    585,
                    586,
                    478
                ],
                "rescale": [
                    478
                ],
                "self.preprocessing_function": [
                    584,
                    583,
                    479
                ],
                "preprocessing_function": [
                    479
                ],
                "self.data_format": [
                    545,
                    485,
                    746,
                    943,
                    1232,
                    565,
                    1141,
                    1143,
                    1239,
                    1148,
                    959
                ],
                "self.channel_axis": [
                    773,
                    743,
                    487,
                    491,
                    747,
                    748,
                    750,
                    633,
                    766
                ],
                "self.row_axis": [
                    771,
                    488,
                    492,
                    631,
                    764
                ],
                "self.col_axis": [
                    771,
                    489,
                    493,
                    632,
                    764
                ],
                "validation_split": [
                    1166,
                    494,
                    496,
                    497,
                    1168,
                    1170
                ],
                "self._validation_split": [
                    497
                ],
                "self.mean": [
                    768,
                    593,
                    594,
                    499,
                    764,
                    767
                ],
                "self.std": [
                    771,
                    774,
                    775,
                    500,
                    601,
                    602
                ],
                "self.principal_components": [
                    609,
                    611,
                    501,
                    782
                ],
                "np.isscalar": [
                    503
                ],
                "warnings.warn": [
                    514,
                    932,
                    614,
                    519,
                    744,
                    1005,
                    526,
                    596,
                    533,
                    604
                ],
                "warnings": [
                    514,
                    932,
                    614,
                    519,
                    744,
                    1005,
                    526,
                    596,
                    533,
                    604
                ],
                "NumpyArrayIterator": [
                    947,
                    540
                ],
                "batch_size": [
                    800,
                    1220,
                    947,
                    566,
                    542
                ],
                "shuffle": [
                    802,
                    1220,
                    947,
                    566,
                    543
                ],
                "seed": [
                    544,
                    801,
                    1220,
                    752,
                    753,
                    947,
                    566,
                    635,
                    636
                ],
                "save_to_dir": [
                    944,
                    546,
                    1160,
                    567
                ],
                "save_prefix": [
                    568,
                    945,
                    1161,
                    547
                ],
                "save_format": [
                    569,
                    946,
                    548,
                    1162
                ],
                "subset": [
                    549,
                    1165,
                    910,
                    911,
                    912,
                    1167,
                    1169,
                    915,
                    1172,
                    1176,
                    571
                ],
                "DirectoryIterator": [
                    561,
                    1220
                ],
                "color_mode": [
                    1137,
                    1138,
                    563,
                    1140
                ],
                "classes": [
                    1152,
                    1184,
                    1216,
                    1187,
                    1188,
                    1189,
                    1067,
                    1070,
                    1198,
                    1075,
                    564,
                    1208,
                    1213,
                    1214,
                    1183
                ],
                "class_mode": [
                    1153,
                    1155,
                    564,
                    1159
                ],
                "follow_links": [
                    1061,
                    1029,
                    1063,
                    999,
                    1065,
                    1194,
                    570,
                    1211
                ],
                "np.mean": [
                    588,
                    764
                ],
                "np.std": [
                    771,
                    590
                ],
                "K.epsilon": [
                    602,
                    590,
                    775
                ],
                "flatx": [
                    610,
                    611
                ],
                "np.reshape": [
                    610,
                    612,
                    774,
                    778,
                    767
                ],
                "np.prod": [
                    610
                ],
                "whitex": [
                    611,
                    612
                ],
                "img_row_axis": [
                    648,
                    695,
                    710,
                    631
                ],
                "img_col_axis": [
                    632,
                    695,
                    706,
                    655
                ],
                "img_channel_axis": [
                    633,
                    697,
                    703
                ],
                "np.random.seed": [
                    753,
                    843,
                    636,
                    821
                ],
                "shift_matrix": [
                    680,
                    677
                ],
                "random_channel_shift": [
                    701
                ],
                "np.random.random": [
                    705,
                    709
                ],
                "flip_axis": [
                    706,
                    710
                ],
                "random_brightness": [
                    713
                ],
                "str": [
                    742,
                    934,
                    935,
                    936,
                    937,
                    747,
                    748,
                    749,
                    750
                ],
                "np.copy": [
                    755
                ],
                "augment": [
                    756
                ],
                "ax": [
                    760,
                    761,
                    757
                ],
                "np.zeros": [
                    1253,
                    1223,
                    757,
                    1206,
                    950
                ],
                "tuple": [
                    1136,
                    757,
                    950
                ],
                "rounds": [
                    757,
                    758
                ],
                "list": [
                    1029,
                    1061,
                    1063,
                    757,
                    950
                ],
                "r": [
                    760,
                    758
                ],
                "range": [
                    1189,
                    758,
                    759
                ],
                "i": [
                    1216,
                    1239,
                    1254,
                    1255,
                    1226,
                    1214,
                    1235,
                    952,
                    759,
                    760,
                    1207,
                    1238,
                    956,
                    958,
                    959
                ],
                "self.random_transform": [
                    760
                ],
                "broadcast_shape": [
                    772,
                    773,
                    774,
                    765,
                    766,
                    767
                ],
                "flat_x": [
                    778,
                    779
                ],
                "sigma": [
                    779,
                    780
                ],
                "flat_x.T": [
                    779
                ],
                "flat_x.shape": [
                    779
                ],
                "s": [
                    780,
                    781
                ],
                "linalg.svd": [
                    780
                ],
                "linalg": [
                    780
                ],
                "s_inv": [
                    781,
                    782
                ],
                "np.sqrt": [
                    781
                ],
                "np.newaxis": [
                    781
                ],
                "dot": [
                    782
                ],
                "u.T": [
                    782
                ],
                "Sequence": [
                    785
                ],
                "self.n": [
                    810,
                    812,
                    847,
                    848,
                    830,
                    799
                ],
                "n": [
                    799
                ],
                "self.batch_size": [
                    800,
                    847,
                    848,
                    854,
                    825,
                    826,
                    830
                ],
                "self.seed": [
                    801,
                    842,
                    843,
                    820,
                    821
                ],
                "self.shuffle": [
                    802,
                    811
                ],
                "self.batch_index": [
                    803,
                    836,
                    844,
                    847,
                    849,
                    851
                ],
                "self.total_batches_seen": [
                    804,
                    843,
                    852,
                    821,
                    822
                ],
                "self.lock": [
                    978,
                    1266,
                    805
                ],
                "threading.Lock": [
                    805
                ],
                "threading": [
                    805
                ],
                "self.index_array": [
                    806,
                    810,
                    812,
                    853,
                    823,
                    825
                ],
                "self.index_generator": [
                    979,
                    1267,
                    807
                ],
                "self._flow_index": [
                    807
                ],
                "np.arange": [
                    810
                ],
                "np.random.permutation": [
                    812
                ],
                "idx": [
                    825,
                    818,
                    826,
                    815
                ],
                "self._set_index_array": [
                    824,
                    833,
                    845
                ],
                "index_array": [
                    1249,
                    1251,
                    1254,
                    967,
                    1223,
                    1226,
                    979,
                    1267,
                    950,
                    982,
                    952,
                    825,
                    1238,
                    827,
                    1270,
                    958
                ],
                "self._get_batches_of_transformed_samples": [
                    1270,
                    827,
                    982
                ],
                "self.reset": [
                    840
                ],
                "current_index": [
                    848,
                    853,
                    854,
                    847
                ],
                "self.next": [
                    862
                ],
                "args": [
                    862
                ],
                "kwargs": [
                    862
                ],
                "NotImplementedError": [
                    873
                ],
                "Iterator": [
                    876,
                    1078
                ],
                "shape": [
                    909
                ],
                "split_idx": [
                    914,
                    916,
                    918,
                    920,
                    922
                ],
                "int": [
                    914,
                    1062,
                    1031
                ],
                "image_data_generator._validation_split": [
                    914
                ],
                "image_data_generator": [
                    914,
                    942,
                    1135
                ],
                "self.x": [
                    929,
                    931,
                    936,
                    937,
                    950,
                    953,
                    925,
                    926
                ],
                "self.x.ndim": [
                    926
                ],
                "self.x.shape": [
                    929,
                    931,
                    936,
                    937,
                    950
                ],
                "channels_axis": [
                    930,
                    931,
                    934,
                    935,
                    937
                ],
                "self.y": [
                    965,
                    939,
                    941,
                    967
                ],
                "self.image_data_generator": [
                    1166,
                    942,
                    1135,
                    1233,
                    1234,
                    954,
                    955
                ],
                "self.save_to_dir": [
                    964,
                    1160,
                    944,
                    1237,
                    1244,
                    957
                ],
                "self.save_prefix": [
                    960,
                    945,
                    1161,
                    1240
                ],
                "self.save_format": [
                    946,
                    963,
                    1243,
                    1162
                ],
                "__init__": [
                    947,
                    1220
                ],
                "super": [
                    947,
                    1220
                ],
                "batch_x": [
                    1247,
                    1253,
                    966,
                    1223,
                    968,
                    1257,
                    1258,
                    1235,
                    950,
                    1239,
                    956,
                    959
                ],
                "j": [
                    961,
                    1241,
                    1226,
                    1227,
                    1238,
                    952,
                    953,
                    958
                ],
                "enumerate": [
                    1254,
                    1226,
                    1238,
                    952,
                    958
                ],
                "self.image_data_generator.random_transform": [
                    1233,
                    954
                ],
                "self.image_data_generator.standardize": [
                    1234,
                    955
                ],
                "fname": [
                    960,
                    964,
                    1002,
                    1227,
                    1004,
                    1069,
                    1228,
                    1007,
                    1008,
                    1071,
                    1240,
                    1244
                ],
                "np.random.randint": [
                    1242,
                    962
                ],
                "img.save": [
                    1244,
                    964
                ],
                "batch_y": [
                    1249,
                    1251,
                    1253,
                    967,
                    968,
                    1255,
                    1258,
                    1247
                ],
                "next": [
                    979,
                    1267
                ],
                "sorted": [
                    1185,
                    1002,
                    999
                ],
                "subpath": [
                    999
                ],
                "_recursive_list": [
                    1001
                ],
                "extension": [
                    1003,
                    1007
                ],
                "white_list_formats": [
                    1061,
                    1029,
                    1063,
                    1210,
                    1065,
                    1193,
                    1003,
                    1178
                ],
                "endswith": [
                    1004,
                    1007
                ],
                "fname.lower": [
                    1004,
                    1007
                ],
                "num_files": [
                    1061,
                    1029,
                    1062,
                    1031,
                    1033
                ],
                "_iter_valid_files": [
                    1065,
                    1061,
                    1029,
                    1063
                ],
                "split": [
                    1060,
                    1062,
                    1030,
                    1031,
                    1195,
                    1168,
                    1170,
                    1175,
                    1210
                ],
                "start": [
                    1062,
                    1063,
                    1031,
                    1033,
                    1034
                ],
                "stop": [
                    1062,
                    1063,
                    1031,
                    1033,
                    1034
                ],
                "dirname": [
                    1072,
                    1059,
                    1070
                ],
                "os.path.basename": [
                    1059
                ],
                "valid_files": [
                    1065,
                    1069,
                    1063
                ],
                "filenames": [
                    1068,
                    1073,
                    1075,
                    1213,
                    1215
                ],
                "classes.append": [
                    1187,
                    1070
                ],
                "class_indices": [
                    1070
                ],
                "absolute_path": [
                    1072,
                    1071
                ],
                "relative_path": [
                    1072,
                    1073
                ],
                "os.path.relpath": [
                    1072
                ],
                "filenames.append": [
                    1073
                ],
                "self.directory": [
                    1228,
                    1134
                ],
                "self.target_size": [
                    1230,
                    1136,
                    1144,
                    1146,
                    1149,
                    1151
                ],
                "self.color_mode": [
                    1224,
                    1140,
                    1142
                ],
                "self.image_shape": [
                    1223,
                    1144,
                    1146,
                    1149,
                    1151
                ],
                "self.classes": [
                    1152,
                    1249,
                    1251,
                    1254,
                    1206,
                    1214
                ],
                "self.class_mode": [
                    1248,
                    1250,
                    1252,
                    1159,
                    1246
                ],
                "self.interpolation": [
                    1163,
                    1231
                ],
                "self.image_data_generator._validation_split": [
                    1166
                ],
                "self.subset": [
                    1176
                ],
                "self.samples": [
                    1220,
                    1196,
                    1200,
                    1206,
                    1181
                ],
                "subdir": [
                    1185,
                    1186,
                    1187,
                    1197,
                    1198,
                    1208
                ],
                "os.listdir": [
                    1185
                ],
                "os.path.isdir": [
                    1186
                ],
                "self.num_classes": [
                    1200,
                    1188,
                    1253
                ],
                "self.class_indices": [
                    1211,
                    1189
                ],
                "dict": [
                    1189
                ],
                "zip": [
                    1189
                ],
                "pool": [
                    1218,
                    1219,
                    1191,
                    1196,
                    1209
                ],
                "multiprocessing.pool.ThreadPool": [
                    1191
                ],
                "multiprocessing.pool": [
                    1191
                ],
                "multiprocessing": [
                    1191
                ],
                "function_partial": [
                    1192,
                    1196
                ],
                "partial": [
                    1192
                ],
                "_count_valid_files_in_directory": [
                    1192
                ],
                "sum": [
                    1196
                ],
                "pool.map": [
                    1196
                ],
                "print": [
                    1200
                ],
                "results": [
                    1209,
                    1203,
                    1212
                ],
                "self.filenames": [
                    1227,
                    1205,
                    1215
                ],
                "dirpath": [
                    1208,
                    1210
                ],
                "results.append": [
                    1209
                ],
                "pool.apply_async": [
                    1209
                ],
                "_list_valid_filenames_in_directory": [
                    1209
                ],
                "res": [
                    1212,
                    1213
                ],
                "res.get": [
                    1213
                ],
                "pool.close": [
                    1218
                ],
                "pool.join": [
                    1219
                ],
                "load_img": [
                    1228
                ],
                "batch_x.copy": [
                    1247
                ],
                "label": [
                    1254,
                    1255
                ]
            },
            "filtered_variables_in_file": {
                "pil_image": [
                    32,
                    33,
                    34,
                    37,
                    38,
                    39,
                    40,
                    294,
                    42,
                    43,
                    268,
                    297,
                    359,
                    362,
                    28,
                    30
                ],
                "_PIL_INTERPOLATION_METHODS": [
                    38,
                    40,
                    43,
                    372,
                    377,
                    378,
                    31
                ],
                "pil_image.NEAREST": [
                    32
                ],
                "pil_image.BILINEAR": [
                    33
                ],
                "pil_image.BICUBIC": [
                    34
                ],
                "pil_image.HAMMING": [
                    38
                ],
                "pil_image.BOX": [
                    40
                ],
                "pil_image.LANCZOS": [
                    43
                ],
                "theta": [
                    672,
                    641,
                    65,
                    66,
                    67,
                    643,
                    670,
                    671
                ],
                "np.deg2rad": [
                    65,
                    641,
                    660,
                    127
                ],
                "np": [
                    128,
                    129,
                    641,
                    771,
                    764,
                    646,
                    774,
                    778,
                    779,
                    653,
                    781,
                    271,
                    909,
                    767,
                    660,
                    667,
                    925,
                    287,
                    288,
                    671,
                    672,
                    677,
                    167,
                    168,
                    680,
                    810,
                    683,
                    684,
                    812,
                    686,
                    939,
                    689,
                    179,
                    180,
                    181,
                    692,
                    183,
                    184,
                    821,
                    950,
                    1206,
                    65,
                    66,
                    67,
                    195,
                    322,
                    705,
                    709,
                    962,
                    1223,
                    843,
                    204,
                    205,
                    206,
                    588,
                    590,
                    1242,
                    97,
                    98,
                    99,
                    610,
                    611,
                    230,
                    612,
                    739,
                    1253,
                    240,
                    241,
                    753,
                    755,
                    757,
                    246,
                    503,
                    636,
                    127
                ],
                "np.random.uniform": [
                    65,
                    98,
                    97,
                    195,
                    641,
                    646,
                    167,
                    653,
                    660,
                    181,
                    667,
                    127
                ],
                "np.random": [
                    641,
                    646,
                    653,
                    660,
                    667,
                    167,
                    812,
                    181,
                    821,
                    65,
                    705,
                    195,
                    962,
                    709,
                    843,
                    1242,
                    97,
                    98,
                    753,
                    636,
                    127
                ],
                "rg": [
                    65
                ],
                "rotation_matrix": [
                    671,
                    674,
                    66,
                    71
                ],
                "np.array": [
                    128,
                    66,
                    99,
                    677,
                    168,
                    683,
                    204,
                    205,
                    689,
                    671
                ],
                "np.cos": [
                    672,
                    129,
                    66,
                    67,
                    684,
                    671
                ],
                "np.sin": [
                    128,
                    672,
                    66,
                    67,
                    683,
                    671
                ],
                "h": [
                    96,
                    97,
                    132,
                    133,
                    70,
                    71,
                    172,
                    173,
                    695,
                    696
                ],
                "w": [
                    96,
                    98,
                    132,
                    133,
                    70,
                    71,
                    172,
                    173,
                    695,
                    696
                ],
                "x.shape": [
                    132,
                    773,
                    648,
                    778,
                    655,
                    274,
                    292,
                    295,
                    299,
                    172,
                    947,
                    695,
                    323,
                    70,
                    326,
                    328,
                    330,
                    332,
                    96,
                    610,
                    612,
                    742,
                    743,
                    749,
                    750,
                    757,
                    759,
                    760,
                    766
                ],
                "x": [
                    541,
                    70,
                    72,
                    73,
                    586,
                    584,
                    588,
                    590,
                    594,
                    602,
                    96,
                    610,
                    612,
                    104,
                    105,
                    618,
                    132,
                    134,
                    135,
                    648,
                    655,
                    172,
                    174,
                    175,
                    179,
                    180,
                    182,
                    183,
                    184,
                    185,
                    695,
                    697,
                    701,
                    193,
                    194,
                    706,
                    196,
                    197,
                    198,
                    710,
                    713,
                    202,
                    715,
                    1232,
                    1233,
                    1234,
                    1235,
                    739,
                    740,
                    230,
                    742,
                    743,
                    749,
                    750,
                    239,
                    240,
                    241,
                    242,
                    755,
                    757,
                    246,
                    247,
                    248,
                    249,
                    759,
                    760,
                    761,
                    764,
                    766,
                    768,
                    771,
                    773,
                    775,
                    778,
                    271,
                    272,
                    274,
                    285,
                    287,
                    288,
                    290,
                    291,
                    292,
                    294,
                    295,
                    297,
                    299,
                    322,
                    323,
                    325,
                    326,
                    328,
                    330,
                    332,
                    333,
                    905,
                    909,
                    914,
                    916,
                    920,
                    925,
                    947,
                    953,
                    954,
                    955,
                    956,
                    999
                ],
                "row_axis": [
                    96,
                    172,
                    132,
                    70
                ],
                "col_axis": [
                    96,
                    172,
                    132,
                    70
                ],
                "transform_matrix": [
                    133,
                    134,
                    669,
                    674,
                    680,
                    173,
                    174,
                    686,
                    692,
                    694,
                    696,
                    697,
                    71,
                    72,
                    206,
                    207,
                    103,
                    104,
                    231,
                    232
                ],
                "transform_matrix_offset_center": [
                    696,
                    173,
                    133,
                    71
                ],
                "apply_transform": [
                    134,
                    72,
                    104,
                    174,
                    697
                ],
                "channel_axis": [
                    134,
                    230,
                    72,
                    104,
                    174,
                    241,
                    179,
                    184
                ],
                "fill_mode": [
                    134,
                    72,
                    104,
                    174,
                    238,
                    474
                ],
                "cval": [
                    134,
                    72,
                    104,
                    174,
                    239,
                    475
                ],
                "tx": [
                    97,
                    99,
                    676,
                    677,
                    646,
                    648,
                    650
                ],
                "hrg": [
                    97
                ],
                "ty": [
                    98,
                    100,
                    676,
                    678,
                    653,
                    655,
                    657
                ],
                "wrg": [
                    98
                ],
                "translation_matrix": [
                    99,
                    103
                ],
                "shear": [
                    128,
                    129,
                    682,
                    683,
                    684,
                    660,
                    662,
                    127
                ],
                "intensity": [
                    181,
                    127
                ],
                "shear_matrix": [
                    128,
                    683,
                    133,
                    686
                ],
                "zoom_range": [
                    160,
                    162,
                    164,
                    167,
                    504,
                    503,
                    472,
                    505,
                    506,
                    510
                ],
                "zx": [
                    165,
                    167,
                    168,
                    688,
                    689,
                    665,
                    667
                ],
                "zy": [
                    165,
                    167,
                    169,
                    688,
                    690,
                    665,
                    667
                ],
                "zoom_matrix": [
                    168,
                    689,
                    692,
                    173
                ],
                "np.rollaxis": [
                    184,
                    241,
                    179,
                    230
                ],
                "min_x": [
                    180,
                    181
                ],
                "max_x": [
                    180,
                    181
                ],
                "np.min": [
                    180,
                    287
                ],
                "np.max": [
                    288,
                    180
                ],
                "channel_images": [
                    240,
                    233,
                    181,
                    183
                ],
                "np.clip": [
                    181
                ],
                "x_channel": [
                    234,
                    181,
                    182,
                    239
                ],
                "np.stack": [
                    240,
                    183
                ],
                "brightness_range": [
                    195,
                    189,
                    470,
                    191
                ],
                "array_to_img": [
                    193,
                    1239,
                    959
                ],
                "imgenhancer_Brightness": [
                    194,
                    196
                ],
                "ImageEnhance.Brightness": [
                    194
                ],
                "ImageEnhance": [
                    194
                ],
                "u": [
                    195,
                    196,
                    780,
                    782
                ],
                "imgenhancer_Brightness.enhance": [
                    196
                ],
                "img_to_array": [
                    1232,
                    197
                ],
                "o_x": [
                    202,
                    204,
                    205
                ],
                "o_y": [
                    203,
                    204,
                    205
                ],
                "y": [
                    905,
                    938,
                    203,
                    939,
                    909,
                    917,
                    918,
                    921,
                    922,
                    541
                ],
                "offset_matrix": [
                    204,
                    206
                ],
                "reset_matrix": [
                    205,
                    206
                ],
                "np.dot": [
                    611,
                    680,
                    779,
                    686,
                    206,
                    692
                ],
                "matrix": [
                    206
                ],
                "final_affine_matrix": [
                    235,
                    231
                ],
                "final_offset": [
                    232,
                    236
                ],
                "ndi.interpolation.affine_transform": [
                    233
                ],
                "ndi.interpolation": [
                    233
                ],
                "ndi": [
                    233
                ],
                "swapaxes": [
                    246
                ],
                "np.asarray": [
                    322,
                    739,
                    939,
                    909,
                    271,
                    246,
                    925
                ],
                "axis": [
                    248,
                    246
                ],
                "x.swapaxes": [
                    248
                ],
                "K.floatx": [
                    322,
                    739,
                    1251,
                    1253,
                    1223,
                    271,
                    757,
                    951,
                    954,
                    925
                ],
                "K": [
                    954,
                    322,
                    739,
                    1251,
                    1253,
                    775,
                    1223,
                    924,
                    460,
                    1133,
                    590,
                    271,
                    277,
                    757,
                    951,
                    602,
                    316,
                    925
                ],
                "x.ndim": [
                    272,
                    740
                ],
                "data_format": [
                    276,
                    277,
                    278,
                    279,
                    923,
                    284,
                    924,
                    930,
                    933,
                    943,
                    315,
                    316,
                    317,
                    318,
                    324,
                    327,
                    459,
                    460,
                    481,
                    484,
                    485,
                    486,
                    490,
                    1132,
                    1133,
                    1141
                ],
                "K.image_data_format": [
                    460,
                    1133,
                    277,
                    316,
                    924
                ],
                "x.transpose": [
                    325,
                    285
                ],
                "scale": [
                    286
                ],
                "x_max": [
                    288,
                    289,
                    290
                ],
                "pil_image.fromarray": [
                    297,
                    294
                ],
                "x.astype": [
                    954,
                    294
                ],
                "astype": [
                    297,
                    1251
                ],
                "img": [
                    322,
                    964,
                    362,
                    364,
                    365,
                    1228,
                    367,
                    368,
                    1232,
                    371,
                    1244,
                    1239,
                    379,
                    380,
                    959
                ],
                "x.reshape": [
                    328,
                    330
                ],
                "pil_image.open": [
                    362
                ],
                "path": [
                    362
                ],
                "grayscale": [
                    1224,
                    363,
                    1229
                ],
                "img.mode": [
                    364,
                    367
                ],
                "img.convert": [
                    368,
                    365
                ],
                "target_size": [
                    1136,
                    369,
                    370,
                    563
                ],
                "width_height_tuple": [
                    379,
                    370,
                    371
                ],
                "img.size": [
                    371
                ],
                "interpolation": [
                    1163,
                    372,
                    376,
                    378,
                    572
                ],
                "join": [
                    377
                ],
                "_PIL_INTERPOLATION_METHODS.keys": [
                    377
                ],
                "resample": [
                    378,
                    379
                ],
                "img.resize": [
                    379
                ],
                "os.path.join": [
                    384,
                    1186,
                    964,
                    1228,
                    1197,
                    1071,
                    1072,
                    1208,
                    1244
                ],
                "os.path": [
                    384,
                    1186,
                    1059,
                    964,
                    1228,
                    1197,
                    1071,
                    1072,
                    1208,
                    1244
                ],
                "os": [
                    384,
                    385,
                    1185,
                    1059,
                    964,
                    1186,
                    999,
                    1228,
                    1197,
                    1071,
                    1072,
                    1208,
                    1244
                ],
                "root": [
                    384,
                    385,
                    1001,
                    1069,
                    1071,
                    1008
                ],
                "f": [
                    384,
                    385,
                    386
                ],
                "_": [
                    385,
                    780,
                    1001
                ],
                "files": [
                    385,
                    1002,
                    1001
                ],
                "os.walk": [
                    385,
                    999
                ],
                "directory": [
                    385,
                    1185,
                    1059,
                    1186,
                    1029,
                    1061,
                    1063,
                    1001,
                    1065,
                    1197,
                    1134,
                    1072,
                    562,
                    1208
                ],
                "re.match": [
                    386
                ],
                "re": [
                    386
                ],
                "ext": [
                    386
                ],
                "self.featurewise_center": [
                    513,
                    525,
                    461,
                    592,
                    763
                ],
                "self": [
                    513,
                    518,
                    525,
                    532,
                    541,
                    545,
                    562,
                    565,
                    583,
                    584,
                    585,
                    586,
                    587,
                    589,
                    592,
                    593,
                    594,
                    600,
                    601,
                    602,
                    608,
                    609,
                    611,
                    1134,
                    1135,
                    1136,
                    1140,
                    1141,
                    1142,
                    631,
                    632,
                    633,
                    1143,
                    1144,
                    1146,
                    1148,
                    1149,
                    1151,
                    640,
                    641,
                    1152,
                    645,
                    646,
                    647,
                    1159,
                    1160,
                    1161,
                    1162,
                    652,
                    653,
                    654,
                    1163,
                    1166,
                    659,
                    660,
                    664,
                    1176,
                    667,
                    1181,
                    1188,
                    1189,
                    1196,
                    1200,
                    1205,
                    1206,
                    698,
                    1211,
                    700,
                    702,
                    1214,
                    704,
                    1215,
                    708,
                    1220,
                    1223,
                    712,
                    713,
                    1224,
                    1227,
                    1228,
                    1230,
                    1231,
                    1232,
                    1233,
                    1234,
                    1237,
                    1239,
                    1240,
                    1243,
                    1244,
                    1246,
                    1248,
                    1249,
                    1250,
                    1251,
                    1252,
                    1253,
                    1254,
                    743,
                    746,
                    747,
                    748,
                    750,
                    1266,
                    1267,
                    1270,
                    760,
                    763,
                    764,
                    766,
                    767,
                    768,
                    770,
                    771,
                    773,
                    774,
                    775,
                    777,
                    781,
                    782,
                    799,
                    800,
                    801,
                    802,
                    803,
                    804,
                    805,
                    806,
                    807,
                    810,
                    811,
                    812,
                    815,
                    819,
                    820,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    978,
                    830,
                    979,
                    833,
                    836,
                    840,
                    842,
                    843,
                    844,
                    845,
                    982,
                    847,
                    848,
                    849,
                    851,
                    852,
                    853,
                    854,
                    859,
                    862,
                    925,
                    926,
                    929,
                    931,
                    936,
                    937,
                    939,
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947,
                    950,
                    953,
                    954,
                    955,
                    957,
                    959,
                    960,
                    963,
                    964,
                    965,
                    967,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    485,
                    487,
                    488,
                    489,
                    491,
                    492,
                    493,
                    497,
                    499,
                    500,
                    501,
                    504,
                    506
                ],
                "featurewise_center": [
                    512,
                    524,
                    461
                ],
                "self.samplewise_center": [
                    587,
                    532,
                    462
                ],
                "samplewise_center": [
                    531,
                    462
                ],
                "self.featurewise_std_normalization": [
                    600,
                    770,
                    518,
                    463
                ],
                "featurewise_std_normalization": [
                    523,
                    517,
                    463
                ],
                "self.samplewise_std_normalization": [
                    464,
                    589
                ],
                "samplewise_std_normalization": [
                    464,
                    530
                ],
                "self.zca_whitening": [
                    608,
                    465,
                    777
                ],
                "zca_whitening": [
                    465,
                    511
                ],
                "self.zca_epsilon": [
                    466,
                    781
                ],
                "zca_epsilon": [
                    466
                ],
                "self.rotation_range": [
                    640,
                    641,
                    467
                ],
                "rotation_range": [
                    467
                ],
                "self.width_shift_range": [
                    652,
                    468,
                    653,
                    654
                ],
                "width_shift_range": [
                    468
                ],
                "self.height_shift_range": [
                    646,
                    469,
                    645,
                    647
                ],
                "height_shift_range": [
                    469
                ],
                "self.brightness_range": [
                    712,
                    713,
                    470
                ],
                "self.shear_range": [
                    659,
                    660,
                    471
                ],
                "shear_range": [
                    471
                ],
                "self.zoom_range": [
                    504,
                    664,
                    472,
                    506,
                    667
                ],
                "self.channel_shift_range": [
                    473,
                    700,
                    702
                ],
                "channel_shift_range": [
                    473
                ],
                "self.fill_mode": [
                    698,
                    474
                ],
                "self.cval": [
                    698,
                    475
                ],
                "self.horizontal_flip": [
                    704,
                    476
                ],
                "horizontal_flip": [
                    476
                ],
                "self.vertical_flip": [
                    708,
                    477
                ],
                "vertical_flip": [
                    477
                ],
                "self.rescale": [
                    585,
                    586,
                    478
                ],
                "rescale": [
                    478
                ],
                "self.preprocessing_function": [
                    584,
                    583,
                    479
                ],
                "preprocessing_function": [
                    479
                ],
                "self.data_format": [
                    545,
                    485,
                    746,
                    943,
                    1232,
                    565,
                    1141,
                    1143,
                    1239,
                    1148,
                    959
                ],
                "self.channel_axis": [
                    773,
                    743,
                    487,
                    491,
                    747,
                    748,
                    750,
                    633,
                    766
                ],
                "self.row_axis": [
                    771,
                    488,
                    492,
                    631,
                    764
                ],
                "self.col_axis": [
                    771,
                    489,
                    493,
                    632,
                    764
                ],
                "validation_split": [
                    1166,
                    494,
                    496,
                    497,
                    1168,
                    1170
                ],
                "self._validation_split": [
                    497
                ],
                "self.mean": [
                    768,
                    593,
                    594,
                    499,
                    764,
                    767
                ],
                "self.std": [
                    771,
                    774,
                    775,
                    500,
                    601,
                    602
                ],
                "self.principal_components": [
                    609,
                    611,
                    501,
                    782
                ],
                "np.isscalar": [
                    503
                ],
                "warnings.warn": [
                    514,
                    932,
                    614,
                    519,
                    744,
                    1005,
                    526,
                    596,
                    533,
                    604
                ],
                "warnings": [
                    514,
                    932,
                    614,
                    519,
                    744,
                    1005,
                    526,
                    596,
                    533,
                    604
                ],
                "NumpyArrayIterator": [
                    947,
                    540
                ],
                "batch_size": [
                    800,
                    1220,
                    947,
                    566,
                    542
                ],
                "shuffle": [
                    802,
                    1220,
                    947,
                    566,
                    543
                ],
                "seed": [
                    544,
                    801,
                    1220,
                    752,
                    753,
                    947,
                    566,
                    635,
                    636
                ],
                "save_to_dir": [
                    944,
                    546,
                    1160,
                    567
                ],
                "save_prefix": [
                    568,
                    945,
                    1161,
                    547
                ],
                "save_format": [
                    569,
                    946,
                    548,
                    1162
                ],
                "subset": [
                    549,
                    1165,
                    910,
                    911,
                    912,
                    1167,
                    1169,
                    915,
                    1172,
                    1176,
                    571
                ],
                "DirectoryIterator": [
                    561,
                    1220
                ],
                "color_mode": [
                    1137,
                    1138,
                    563,
                    1140
                ],
                "classes": [
                    1152,
                    1184,
                    1216,
                    1187,
                    1188,
                    1189,
                    1067,
                    1070,
                    1198,
                    1075,
                    564,
                    1208,
                    1213,
                    1214,
                    1183
                ],
                "class_mode": [
                    1153,
                    1155,
                    564,
                    1159
                ],
                "follow_links": [
                    1061,
                    1029,
                    1063,
                    999,
                    1065,
                    1194,
                    570,
                    1211
                ],
                "np.mean": [
                    588,
                    764
                ],
                "np.std": [
                    771,
                    590
                ],
                "K.epsilon": [
                    602,
                    590,
                    775
                ],
                "flatx": [
                    610,
                    611
                ],
                "np.reshape": [
                    610,
                    612,
                    774,
                    778,
                    767
                ],
                "np.prod": [
                    610
                ],
                "whitex": [
                    611,
                    612
                ],
                "img_row_axis": [
                    648,
                    695,
                    710,
                    631
                ],
                "img_col_axis": [
                    632,
                    695,
                    706,
                    655
                ],
                "img_channel_axis": [
                    633,
                    697,
                    703
                ],
                "np.random.seed": [
                    753,
                    843,
                    636,
                    821
                ],
                "shift_matrix": [
                    680,
                    677
                ],
                "random_channel_shift": [
                    701
                ],
                "np.random.random": [
                    705,
                    709
                ],
                "flip_axis": [
                    706,
                    710
                ],
                "random_brightness": [
                    713
                ],
                "np.copy": [
                    755
                ],
                "augment": [
                    756
                ],
                "ax": [
                    760,
                    761,
                    757
                ],
                "np.zeros": [
                    1253,
                    1223,
                    757,
                    1206,
                    950
                ],
                "rounds": [
                    757,
                    758
                ],
                "r": [
                    760,
                    758
                ],
                "i": [
                    1216,
                    1239,
                    1254,
                    1255,
                    1226,
                    1214,
                    1235,
                    952,
                    759,
                    760,
                    1207,
                    1238,
                    956,
                    958,
                    959
                ],
                "self.random_transform": [
                    760
                ],
                "broadcast_shape": [
                    772,
                    773,
                    774,
                    765,
                    766,
                    767
                ],
                "flat_x": [
                    778,
                    779
                ],
                "sigma": [
                    779,
                    780
                ],
                "flat_x.T": [
                    779
                ],
                "flat_x.shape": [
                    779
                ],
                "s": [
                    780,
                    781
                ],
                "linalg.svd": [
                    780
                ],
                "linalg": [
                    780
                ],
                "s_inv": [
                    781,
                    782
                ],
                "np.sqrt": [
                    781
                ],
                "np.newaxis": [
                    781
                ],
                "dot": [
                    782
                ],
                "u.T": [
                    782
                ],
                "Sequence": [
                    785
                ],
                "self.n": [
                    810,
                    812,
                    847,
                    848,
                    830,
                    799
                ],
                "n": [
                    799
                ],
                "self.batch_size": [
                    800,
                    847,
                    848,
                    854,
                    825,
                    826,
                    830
                ],
                "self.seed": [
                    801,
                    842,
                    843,
                    820,
                    821
                ],
                "self.shuffle": [
                    802,
                    811
                ],
                "self.batch_index": [
                    803,
                    836,
                    844,
                    847,
                    849,
                    851
                ],
                "self.total_batches_seen": [
                    804,
                    843,
                    852,
                    821,
                    822
                ],
                "self.lock": [
                    978,
                    1266,
                    805
                ],
                "threading.Lock": [
                    805
                ],
                "threading": [
                    805
                ],
                "self.index_array": [
                    806,
                    810,
                    812,
                    853,
                    823,
                    825
                ],
                "self.index_generator": [
                    979,
                    1267,
                    807
                ],
                "self._flow_index": [
                    807
                ],
                "np.arange": [
                    810
                ],
                "np.random.permutation": [
                    812
                ],
                "idx": [
                    825,
                    818,
                    826,
                    815
                ],
                "self._set_index_array": [
                    824,
                    833,
                    845
                ],
                "index_array": [
                    1249,
                    1251,
                    1254,
                    967,
                    1223,
                    1226,
                    979,
                    1267,
                    950,
                    982,
                    952,
                    825,
                    1238,
                    827,
                    1270,
                    958
                ],
                "self._get_batches_of_transformed_samples": [
                    1270,
                    827,
                    982
                ],
                "self.reset": [
                    840
                ],
                "current_index": [
                    848,
                    853,
                    854,
                    847
                ],
                "self.next": [
                    862
                ],
                "args": [
                    862
                ],
                "kwargs": [
                    862
                ],
                "Iterator": [
                    876,
                    1078
                ],
                "shape": [
                    909
                ],
                "split_idx": [
                    914,
                    916,
                    918,
                    920,
                    922
                ],
                "image_data_generator._validation_split": [
                    914
                ],
                "image_data_generator": [
                    914,
                    942,
                    1135
                ],
                "self.x": [
                    929,
                    931,
                    936,
                    937,
                    950,
                    953,
                    925,
                    926
                ],
                "self.x.ndim": [
                    926
                ],
                "self.x.shape": [
                    929,
                    931,
                    936,
                    937,
                    950
                ],
                "channels_axis": [
                    930,
                    931,
                    934,
                    935,
                    937
                ],
                "self.y": [
                    965,
                    939,
                    941,
                    967
                ],
                "self.image_data_generator": [
                    1166,
                    942,
                    1135,
                    1233,
                    1234,
                    954,
                    955
                ],
                "self.save_to_dir": [
                    964,
                    1160,
                    944,
                    1237,
                    1244,
                    957
                ],
                "self.save_prefix": [
                    960,
                    945,
                    1161,
                    1240
                ],
                "self.save_format": [
                    946,
                    963,
                    1243,
                    1162
                ],
                "__init__": [
                    947,
                    1220
                ],
                "batch_x": [
                    1247,
                    1253,
                    966,
                    1223,
                    968,
                    1257,
                    1258,
                    1235,
                    950,
                    1239,
                    956,
                    959
                ],
                "j": [
                    961,
                    1241,
                    1226,
                    1227,
                    1238,
                    952,
                    953,
                    958
                ],
                "self.image_data_generator.random_transform": [
                    1233,
                    954
                ],
                "self.image_data_generator.standardize": [
                    1234,
                    955
                ],
                "fname": [
                    960,
                    964,
                    1002,
                    1227,
                    1004,
                    1069,
                    1228,
                    1007,
                    1008,
                    1071,
                    1240,
                    1244
                ],
                "np.random.randint": [
                    1242,
                    962
                ],
                "img.save": [
                    1244,
                    964
                ],
                "batch_y": [
                    1249,
                    1251,
                    1253,
                    967,
                    968,
                    1255,
                    1258,
                    1247
                ],
                "subpath": [
                    999
                ],
                "_recursive_list": [
                    1001
                ],
                "extension": [
                    1003,
                    1007
                ],
                "white_list_formats": [
                    1061,
                    1029,
                    1063,
                    1210,
                    1065,
                    1193,
                    1003,
                    1178
                ],
                "endswith": [
                    1004,
                    1007
                ],
                "fname.lower": [
                    1004,
                    1007
                ],
                "num_files": [
                    1061,
                    1029,
                    1062,
                    1031,
                    1033
                ],
                "_iter_valid_files": [
                    1065,
                    1061,
                    1029,
                    1063
                ],
                "split": [
                    1060,
                    1062,
                    1030,
                    1031,
                    1195,
                    1168,
                    1170,
                    1175,
                    1210
                ],
                "start": [
                    1062,
                    1063,
                    1031,
                    1033,
                    1034
                ],
                "stop": [
                    1062,
                    1063,
                    1031,
                    1033,
                    1034
                ],
                "dirname": [
                    1072,
                    1059,
                    1070
                ],
                "os.path.basename": [
                    1059
                ],
                "valid_files": [
                    1065,
                    1069,
                    1063
                ],
                "filenames": [
                    1068,
                    1073,
                    1075,
                    1213,
                    1215
                ],
                "classes.append": [
                    1187,
                    1070
                ],
                "class_indices": [
                    1070
                ],
                "absolute_path": [
                    1072,
                    1071
                ],
                "relative_path": [
                    1072,
                    1073
                ],
                "os.path.relpath": [
                    1072
                ],
                "filenames.append": [
                    1073
                ],
                "self.directory": [
                    1228,
                    1134
                ],
                "self.target_size": [
                    1230,
                    1136,
                    1144,
                    1146,
                    1149,
                    1151
                ],
                "self.color_mode": [
                    1224,
                    1140,
                    1142
                ],
                "self.image_shape": [
                    1223,
                    1144,
                    1146,
                    1149,
                    1151
                ],
                "self.classes": [
                    1152,
                    1249,
                    1251,
                    1254,
                    1206,
                    1214
                ],
                "self.class_mode": [
                    1248,
                    1250,
                    1252,
                    1159,
                    1246
                ],
                "self.interpolation": [
                    1163,
                    1231
                ],
                "self.image_data_generator._validation_split": [
                    1166
                ],
                "self.subset": [
                    1176
                ],
                "self.samples": [
                    1220,
                    1196,
                    1200,
                    1206,
                    1181
                ],
                "subdir": [
                    1185,
                    1186,
                    1187,
                    1197,
                    1198,
                    1208
                ],
                "os.listdir": [
                    1185
                ],
                "os.path.isdir": [
                    1186
                ],
                "self.num_classes": [
                    1200,
                    1188,
                    1253
                ],
                "self.class_indices": [
                    1211,
                    1189
                ],
                "pool": [
                    1218,
                    1219,
                    1191,
                    1196,
                    1209
                ],
                "multiprocessing.pool.ThreadPool": [
                    1191
                ],
                "multiprocessing.pool": [
                    1191
                ],
                "multiprocessing": [
                    1191
                ],
                "function_partial": [
                    1192,
                    1196
                ],
                "partial": [
                    1192
                ],
                "_count_valid_files_in_directory": [
                    1192
                ],
                "pool.map": [
                    1196
                ],
                "results": [
                    1209,
                    1203,
                    1212
                ],
                "self.filenames": [
                    1227,
                    1205,
                    1215
                ],
                "dirpath": [
                    1208,
                    1210
                ],
                "results.append": [
                    1209
                ],
                "pool.apply_async": [
                    1209
                ],
                "_list_valid_filenames_in_directory": [
                    1209
                ],
                "res": [
                    1212,
                    1213
                ],
                "res.get": [
                    1213
                ],
                "pool.close": [
                    1218
                ],
                "pool.join": [
                    1219
                ],
                "load_img": [
                    1228
                ],
                "batch_x.copy": [
                    1247
                ],
                "label": [
                    1254,
                    1255
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_35/tests/keras/preprocessing/image_test.py",
                "test_function": "test_directory_iterator",
                "test_function_code": "    def test_directory_iterator(self, tmpdir):\n        num_classes = 2\n\n        # create folders and subfolders\n        paths = []\n        for cl in range(num_classes):\n            class_directory = 'class-{}'.format(cl)\n            classpaths = [\n                class_directory,\n                os.path.join(class_directory, 'subfolder-1'),\n                os.path.join(class_directory, 'subfolder-2'),\n                os.path.join(class_directory, 'subfolder-1', 'sub-subfolder')\n            ]\n            for path in classpaths:\n                tmpdir.join(path).mkdir()\n            paths.append(classpaths)\n\n        # save the images in the paths\n        count = 0\n        filenames = []\n        for test_images in self.all_test_images:\n            for im in test_images:\n                # rotate image class\n                im_class = count % num_classes\n                # rotate subfolders\n                classpaths = paths[im_class]\n                filename = os.path.join(classpaths[count % len(classpaths)], 'image-{}.jpg'.format(count))\n                filenames.append(filename)\n                im.save(str(tmpdir / filename))\n                count += 1\n\n        # create iterator\n        generator = image.ImageDataGenerator()\n        dir_iterator = generator.flow_from_directory(str(tmpdir))\n\n        # check number of classes and images\n        assert len(dir_iterator.class_indices) == num_classes\n        assert len(dir_iterator.classes) == count\n        assert set(dir_iterator.filenames) == set(filenames)\n\n        # Test invalid use cases\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(str(tmpdir), color_mode='cmyk')\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(str(tmpdir), class_mode='output')\n\n        # Test usage as Sequence\n        generator = image.ImageDataGenerator()\n        dir_seq = generator.flow_from_directory(str(tmpdir),\n                                                target_size=(26, 26),\n                                                color_mode='rgb',\n                                                batch_size=3,\n                                                class_mode='categorical')\n        assert len(dir_seq) == count // 3 + 1\n        x1, y1 = dir_seq[1]\n        assert x1.shape == (3, 26, 26, 3)\n        assert y1.shape == (3, num_classes)\n        x1, y1 = dir_seq[5]\n        with pytest.raises(ValueError):\n            x1, y1 = dir_seq[9]\n\n        # Test Preprocessing before resize\n        def preprocess_test(img):\n            return img.resize((1, 1))\n\n        generator = image.ImageDataGenerator(preprocessing_function=preprocess_test)\n        dir_seq = generator.flow_from_directory(str(tmpdir),\n                                                target_size=(26, 26),\n                                                color_mode='rgb',\n                                                batch_size=1,\n                                                class_mode='categorical')\n\n        gen_x1, gen_y1 = dir_seq[1]\n\n        test_x1 = image.load_img(os.path.join(dir_seq.directory, dir_seq.filenames[1]),\n                                 grayscale=False)\n        test_x1 = preprocess_test(test_x1)\n        test_x1 = test_x1.resize((26, 26))\n        test_x1 = image.img_to_array(test_x1)\n        test_x1 = dir_seq.image_data_generator.random_transform(test_x1)\n        test_x1 = dir_seq.image_data_generator.standardize(test_x1)\n\n        assert gen_x1.shape[1:] == test_x1.shape",
                "test_error": "ValueError: cannot resize an array that references or is referenced by another array in this way. Use the np.resize function or refcheck=False",
                "full_test_error": "self = <image_test.TestImage object at 0x13982c490>\ntmpdir = local('/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-352/popen-gw0/test_directory_iterator0')\n\n    def test_directory_iterator(self, tmpdir):\n        num_classes = 2\n    \n        # create folders and subfolders\n        paths = []\n        for cl in range(num_classes):\n            class_directory = 'class-{}'.format(cl)\n            classpaths = [\n                class_directory,\n                os.path.join(class_directory, 'subfolder-1'),\n                os.path.join(class_directory, 'subfolder-2'),\n                os.path.join(class_directory, 'subfolder-1', 'sub-subfolder')\n            ]\n            for path in classpaths:\n                tmpdir.join(path).mkdir()\n            paths.append(classpaths)\n    \n        # save the images in the paths\n        count = 0\n        filenames = []\n        for test_images in self.all_test_images:\n            for im in test_images:\n                # rotate image class\n                im_class = count % num_classes\n                # rotate subfolders\n                classpaths = paths[im_class]\n                filename = os.path.join(classpaths[count % len(classpaths)], 'image-{}.jpg'.format(count))\n                filenames.append(filename)\n                im.save(str(tmpdir / filename))\n                count += 1\n    \n        # create iterator\n        generator = image.ImageDataGenerator()\n        dir_iterator = generator.flow_from_directory(str(tmpdir))\n    \n        # check number of classes and images\n        assert len(dir_iterator.class_indices) == num_classes\n        assert len(dir_iterator.classes) == count\n        assert set(dir_iterator.filenames) == set(filenames)\n    \n        # Test invalid use cases\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(str(tmpdir), color_mode='cmyk')\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(str(tmpdir), class_mode='output')\n    \n        # Test usage as Sequence\n        generator = image.ImageDataGenerator()\n        dir_seq = generator.flow_from_directory(str(tmpdir),\n                                                target_size=(26, 26),\n                                                color_mode='rgb',\n                                                batch_size=3,\n                                                class_mode='categorical')\n        assert len(dir_seq) == count // 3 + 1\n        x1, y1 = dir_seq[1]\n        assert x1.shape == (3, 26, 26, 3)\n        assert y1.shape == (3, num_classes)\n        x1, y1 = dir_seq[5]\n        with pytest.raises(ValueError):\n            x1, y1 = dir_seq[9]\n    \n        # Test Preprocessing before resize\n        def preprocess_test(img):\n            return img.resize((1, 1))\n    \n        generator = image.ImageDataGenerator(preprocessing_function=preprocess_test)\n        dir_seq = generator.flow_from_directory(str(tmpdir),\n                                                target_size=(26, 26),\n                                                color_mode='rgb',\n                                                batch_size=1,\n                                                class_mode='categorical')\n    \n>       gen_x1, gen_y1 = dir_seq[1]\n\ntests/keras/preprocessing/image_test.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/preprocessing/image.py:827: in __getitem__\n    return self._get_batches_of_transformed_samples(index_array)\nkeras/preprocessing/image.py:1234: in _get_batches_of_transformed_samples\n    x = self.image_data_generator.standardize(x)\nkeras/preprocessing/image.py:584: in standardize\n    x = self.preprocessing_function(x)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nimg = array([[[112.,  78.,  69.],\n        [ 90.,  74.,  59.],\n        [ 90.,  74.,  59.],\n        ...,\n        [115.,  27., ...59.],\n        ...,\n        [ 98.,  96., 145.],\n        [ 98.,  96., 145.],\n        [ 19.,  18.,  60.]]], dtype=float32)\n\n    def preprocess_test(img):\n>       return img.resize((1, 1))\nE       ValueError: cannot resize an array that references or is referenced\nE       by another array in this way.\nE       Use the np.resize function or refcheck=False\n\ntests/keras/preprocessing/image_test.py:240: ValueError",
                "traceback": "keras/preprocessing/image.py:827: in __getitem__\n    return self._get_batches_of_transformed_samples(index_array)\nkeras/preprocessing/image.py:1234: in _get_batches_of_transformed_samples\n    x = self.image_data_generator.standardize(x)\nkeras/preprocessing/image.py:584: in standardize\n    x = self.preprocessing_function(x)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nimg = array([[[112.,  78.,  69.],\n        [ 90.,  74.,  59.],\n        [ 90.,  74.,  59.],\n        ...,\n        [115.,  27., ...59.],\n        ...,\n        [ 98.,  96., 145.],\n        [ 98.,  96., 145.],\n        [ 19.,  18.,  60.]]], dtype=float32)\n\n    def preprocess_test(img):\n>       return img.resize((1, 1))\nE       ValueError: cannot resize an array that references or is referenced\nE       by another array in this way.\nE       Use the np.resize function or refcheck=False\n\ntests/keras/preprocessing/image_test.py:240: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}