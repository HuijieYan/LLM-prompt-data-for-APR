{
    "keras:4": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_4/keras/optimizers.py": {
            "buggy_functions": [
                {
                    "function_name": "get_updates",
                    "function_code": "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.optimizer.compute_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n    opt_update = self.optimizer.apply_gradients(\n        grads, global_step=self.iterations)\n    self.updates.append(opt_update)\n    return self.updates\n",
                    "decorators": [
                        "interfaces.legacy_get_updates_support"
                    ],
                    "docstring": null,
                    "start_line": 704,
                    "end_line": 711,
                    "variables": {
                        "grads": [
                            706,
                            709
                        ],
                        "self.optimizer.compute_gradients": [
                            706
                        ],
                        "self.optimizer": [
                            706,
                            708
                        ],
                        "self": [
                            706,
                            707,
                            708,
                            709,
                            710,
                            711
                        ],
                        "loss": [
                            706
                        ],
                        "params": [
                            706
                        ],
                        "self.updates": [
                            707,
                            710,
                            711
                        ],
                        "K.update_add": [
                            707
                        ],
                        "K": [
                            707
                        ],
                        "self.iterations": [
                            707,
                            709
                        ],
                        "opt_update": [
                            708,
                            710
                        ],
                        "self.optimizer.apply_gradients": [
                            708
                        ],
                        "self.updates.append": [
                            710
                        ],
                        "interfaces.legacy_get_updates_support": [
                            704
                        ],
                        "interfaces": [
                            704
                        ]
                    },
                    "filtered_variables": {
                        "grads": [
                            706,
                            709
                        ],
                        "self.optimizer.compute_gradients": [
                            706
                        ],
                        "self.optimizer": [
                            706,
                            708
                        ],
                        "self": [
                            706,
                            707,
                            708,
                            709,
                            710,
                            711
                        ],
                        "loss": [
                            706
                        ],
                        "params": [
                            706
                        ],
                        "self.updates": [
                            707,
                            710,
                            711
                        ],
                        "K.update_add": [
                            707
                        ],
                        "K": [
                            707
                        ],
                        "self.iterations": [
                            707,
                            709
                        ],
                        "opt_update": [
                            708,
                            710
                        ],
                        "self.optimizer.apply_gradients": [
                            708
                        ],
                        "self.updates.append": [
                            710
                        ],
                        "interfaces.legacy_get_updates_support": [
                            704
                        ],
                        "interfaces": [
                            704
                        ]
                    },
                    "diff_line_number": 706,
                    "class_data": {
                        "signature": "class TFOptimizer(Optimizer)",
                        "docstring": "Wrapper class for native TensorFlow optimizers.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, optimizer):\n    self.optimizer = optimizer\n    with K.name_scope(self.__class__.__name__):\n        self.iterations = K.variable(0, dtype='int64', name='iterations')",
                            "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.optimizer.compute_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n    opt_update = self.optimizer.apply_gradients(grads, global_step=self.iterations)\n    self.updates.append(opt_update)\n    return self.updates",
                            "@property\ndef weights(self):\n    raise NotImplementedError",
                            "def get_config(self):\n    raise NotImplementedError",
                            "def from_config(self, config):\n    raise NotImplementedError"
                        ],
                        "constructor_variables": [
                            "iterations",
                            "optimizer"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, optimizer)",
                            "get_updates(self, loss, params)",
                            "weights(self)",
                            "get_config(self)",
                            "from_config(self, config)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def clip_norm(g, c, n):\n    \"\"\"Clip the gradient `g` if the L2 norm `n` exceeds `c`.\n\n    # Arguments\n        g: Tensor, the gradient tensor\n        c: float >= 0. Gradients will be clipped\n            when their L2 norm exceeds this value.\n        n: Tensor, actual norm of `g`.\n\n    # Returns\n        Tensor, the gradient clipped if required.\n    \"\"\"\n    if c <= 0:  # if clipnorm == 0 no need to add ops to the graph\n        return g\n\n    # tf require using a special op to multiply IndexedSliced by scalar\n    if K.backend() == 'tensorflow':\n        condition = n >= c\n        then_expression = tf.scalar_mul(c / n, g)\n        else_expression = g\n\n        # saving the shape to avoid converting sparse tensor to dense\n        if isinstance(then_expression, tf.Tensor):\n            g_shape = copy.copy(then_expression.get_shape())\n        elif isinstance(then_expression, tf.IndexedSlices):\n            g_shape = copy.copy(then_expression.dense_shape)\n        if condition.dtype != tf.bool:\n            condition = tf.cast(condition, 'bool')\n        g = tf.cond(condition,\n                    lambda: then_expression,\n                    lambda: else_expression)\n        if isinstance(then_expression, tf.Tensor):\n            g.set_shape(g_shape)\n        elif isinstance(then_expression, tf.IndexedSlices):\n            g._dense_shape = g_shape\n    else:\n        g = K.switch(K.greater_equal(n, c), g * c / n, g)\n    return g",
                "def serialize(optimizer):\n    return serialize_keras_object(optimizer)",
                "def deserialize(config, custom_objects=None):\n    \"\"\"Inverse of the `serialize` function.\n\n    # Arguments\n        config: Optimizer configuration dictionary.\n        custom_objects: Optional dictionary mapping\n            names (strings) to custom objects\n            (classes and functions)\n            to be considered during deserialization.\n\n    # Returns\n        A Keras Optimizer instance.\n    \"\"\"\n    all_classes = {\n        'sgd': SGD,\n        'rmsprop': RMSprop,\n        'adagrad': Adagrad,\n        'adadelta': Adadelta,\n        'adam': Adam,\n        'adamax': Adamax,\n        'nadam': Nadam,\n        'tfoptimizer': TFOptimizer,\n    }\n    # Make deserialization case-insensitive for built-in optimizers.\n    if config['class_name'].lower() in all_classes:\n        config['class_name'] = config['class_name'].lower()\n    return deserialize_keras_object(config,\n                                    module_objects=all_classes,\n                                    custom_objects=custom_objects,\n                                    printable_module_name='optimizer')",
                "def get(identifier):\n    \"\"\"Retrieves a Keras Optimizer instance.\n\n    # Arguments\n        identifier: Optimizer identifier, one of\n            - String: name of an optimizer\n            - Dictionary: configuration dictionary.\n            - Keras Optimizer instance (it will be returned unchanged).\n            - TensorFlow Optimizer instance\n                (it will be wrapped as a Keras Optimizer).\n\n    # Returns\n        A Keras Optimizer instance.\n\n    # Raises\n        ValueError: If `identifier` cannot be interpreted.\n    \"\"\"\n    if K.backend() == 'tensorflow':\n        # Wrap TF optimizer instances\n        if isinstance(identifier, tf.train.Optimizer):\n            return TFOptimizer(identifier)\n    if isinstance(identifier, dict):\n        return deserialize(identifier)\n    elif isinstance(identifier, six.string_types):\n        config = {'class_name': str(identifier), 'config': {}}\n        return deserialize(config)\n    if isinstance(identifier, Optimizer):\n        return identifier\n    else:\n        raise ValueError('Could not interpret optimizer identifier: ' +\n                         str(identifier))",
                "def __init__(self, **kwargs):\n    allowed_kwargs = {'clipnorm', 'clipvalue'}\n    for k in kwargs:\n        if k not in allowed_kwargs:\n            raise TypeError('Unexpected keyword argument '\n                            'passed to optimizer: ' + str(k))\n    self.__dict__.update(kwargs)\n    self.updates = []\n    self.weights = []",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    raise NotImplementedError",
                "def get_gradients(self, loss, params):\n    grads = K.gradients(loss, params)\n    if None in grads:\n        raise ValueError('An operation has `None` for gradient. '\n                         'Please make sure that all of your ops have a '\n                         'gradient defined (i.e. are differentiable). '\n                         'Common ops without gradient: '\n                         'K.argmax, K.round, K.eval.')\n    if hasattr(self, 'clipnorm') and self.clipnorm > 0:\n        norm = K.sqrt(sum([K.sum(K.square(g)) for g in grads]))\n        grads = [clip_norm(g, self.clipnorm, norm) for g in grads]\n    if hasattr(self, 'clipvalue') and self.clipvalue > 0:\n        grads = [K.clip(g, -self.clipvalue, self.clipvalue) for g in grads]\n    return grads",
                "def set_weights(self, weights):\n    \"\"\"Sets the weights of the optimizer, from Numpy arrays.\n\n    Should only be called after computing the gradients\n    (otherwise the optimizer has no weights).\n\n    # Arguments\n        weights: a list of Numpy arrays. The number\n            of arrays and their shape must match\n            number of the dimensions of the weights\n            of the optimizer (i.e. it should match the\n            output of `get_weights`).\n\n    # Raises\n        ValueError: in case of incompatible weight shapes.\n    \"\"\"\n    params = self.weights\n    if len(params) != len(weights):\n        raise ValueError('Length of the specified weight list (' +\n                         str(len(weights)) +\n                         ') does not match the number of weights ' +\n                         'of the optimizer (' + str(len(params)) + ')')\n    weight_value_tuples = []\n    param_values = K.batch_get_value(params)\n    for pv, p, w in zip(param_values, params, weights):\n        if pv.shape != w.shape:\n            raise ValueError('Optimizer weight shape ' +\n                             str(pv.shape) +\n                             ' not compatible with '\n                             'provided weight shape ' + str(w.shape))\n        weight_value_tuples.append((p, w))\n    K.batch_set_value(weight_value_tuples)",
                "def get_weights(self):\n    \"\"\"Returns the current value of the weights of the optimizer.\n\n    # Returns\n        A list of numpy arrays.\n    \"\"\"\n    return K.batch_get_value(self.weights)",
                "def get_config(self):\n    config = {}\n    if hasattr(self, 'clipnorm'):\n        config['clipnorm'] = self.clipnorm\n    if hasattr(self, 'clipvalue'):\n        config['clipvalue'] = self.clipvalue\n    return config",
                "@classmethod\ndef from_config(cls, config):\n    return cls(**config)",
                "def __init__(self, lr=0.01, momentum=0., decay=0.,\n             nesterov=False, **kwargs):\n    super(SGD, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n        self.lr = K.variable(lr, name='lr')\n        self.momentum = K.variable(momentum, name='momentum')\n        self.decay = K.variable(decay, name='decay')\n    self.initial_decay = decay\n    self.nesterov = nesterov",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    lr = self.lr\n    if self.initial_decay > 0:\n        lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,\n                                                  K.dtype(self.decay))))\n    # momentum\n    shapes = [K.int_shape(p) for p in params]\n    moments = [K.zeros(shape) for shape in shapes]\n    self.weights = [self.iterations] + moments\n    for p, g, m in zip(params, grads, moments):\n        v = self.momentum * m - lr * g  # velocity\n        self.updates.append(K.update(m, v))\n\n        if self.nesterov:\n            new_p = p + self.momentum * v - lr * g\n        else:\n            new_p = p + v\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'momentum': float(K.get_value(self.momentum)),\n              'decay': float(K.get_value(self.decay)),\n              'nesterov': self.nesterov}\n    base_config = super(SGD, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, lr=0.001, rho=0.9, epsilon=None, decay=0.,\n             **kwargs):\n    super(RMSprop, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.lr = K.variable(lr, name='lr')\n        self.rho = K.variable(rho, name='rho')\n        self.decay = K.variable(decay, name='decay')\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n    if epsilon is None:\n        epsilon = K.epsilon()\n    self.epsilon = epsilon\n    self.initial_decay = decay",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    accumulators = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n    self.weights = accumulators\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    lr = self.lr\n    if self.initial_decay > 0:\n        lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,\n                                                  K.dtype(self.decay))))\n\n    for p, g, a in zip(params, grads, accumulators):\n        # update accumulator\n        new_a = self.rho * a + (1. - self.rho) * K.square(g)\n        self.updates.append(K.update(a, new_a))\n        new_p = p - lr * g / (K.sqrt(new_a) + self.epsilon)\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'rho': float(K.get_value(self.rho)),\n              'decay': float(K.get_value(self.decay)),\n              'epsilon': self.epsilon}\n    base_config = super(RMSprop, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, lr=0.01, epsilon=None, decay=0., **kwargs):\n    super(Adagrad, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.lr = K.variable(lr, name='lr')\n        self.decay = K.variable(decay, name='decay')\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n    if epsilon is None:\n        epsilon = K.epsilon()\n    self.epsilon = epsilon\n    self.initial_decay = decay",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    shapes = [K.int_shape(p) for p in params]\n    accumulators = [K.zeros(shape) for shape in shapes]\n    self.weights = accumulators\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    lr = self.lr\n    if self.initial_decay > 0:\n        lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,\n                                                  K.dtype(self.decay))))\n\n    for p, g, a in zip(params, grads, accumulators):\n        new_a = a + K.square(g)  # update accumulator\n        self.updates.append(K.update(a, new_a))\n        new_p = p - lr * g / (K.sqrt(new_a) + self.epsilon)\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'decay': float(K.get_value(self.decay)),\n              'epsilon': self.epsilon}\n    base_config = super(Adagrad, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, lr=1.0, rho=0.95, epsilon=None, decay=0.,\n             **kwargs):\n    super(Adadelta, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.lr = K.variable(lr, name='lr')\n        self.decay = K.variable(decay, name='decay')\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n    if epsilon is None:\n        epsilon = K.epsilon()\n    self.rho = rho\n    self.epsilon = epsilon\n    self.initial_decay = decay",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    shapes = [K.int_shape(p) for p in params]\n    accumulators = [K.zeros(shape) for shape in shapes]\n    delta_accumulators = [K.zeros(shape) for shape in shapes]\n    self.weights = accumulators + delta_accumulators\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    lr = self.lr\n    if self.initial_decay > 0:\n        lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,\n                                                  K.dtype(self.decay))))\n\n    for p, g, a, d_a in zip(params, grads, accumulators, delta_accumulators):\n        # update accumulator\n        new_a = self.rho * a + (1. - self.rho) * K.square(g)\n        self.updates.append(K.update(a, new_a))\n\n        # use the new accumulator and the *old* delta_accumulator\n        update = g * K.sqrt(d_a + self.epsilon) / K.sqrt(new_a + self.epsilon)\n        new_p = p - lr * update\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n\n        # update delta_accumulator\n        new_d_a = self.rho * d_a + (1 - self.rho) * K.square(update)\n        self.updates.append(K.update(d_a, new_d_a))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'rho': self.rho,\n              'decay': float(K.get_value(self.decay)),\n              'epsilon': self.epsilon}\n    base_config = super(Adadelta, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, lr=0.001, beta_1=0.9, beta_2=0.999,\n             epsilon=None, decay=0., amsgrad=False, **kwargs):\n    super(Adam, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n        self.lr = K.variable(lr, name='lr')\n        self.beta_1 = K.variable(beta_1, name='beta_1')\n        self.beta_2 = K.variable(beta_2, name='beta_2')\n        self.decay = K.variable(decay, name='decay')\n    if epsilon is None:\n        epsilon = K.epsilon()\n    self.epsilon = epsilon\n    self.initial_decay = decay\n    self.amsgrad = amsgrad",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    lr = self.lr\n    if self.initial_decay > 0:\n        lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,\n                                                  K.dtype(self.decay))))\n\n    t = K.cast(self.iterations, K.floatx()) + 1\n    lr_t = lr * (K.sqrt(1. - K.pow(self.beta_2, t)) /\n                 (1. - K.pow(self.beta_1, t)))\n\n    ms = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n    vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n    if self.amsgrad:\n        vhats = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n    else:\n        vhats = [K.zeros(1) for _ in params]\n    self.weights = [self.iterations] + ms + vs + vhats\n\n    for p, g, m, v, vhat in zip(params, grads, ms, vs, vhats):\n        m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\n        v_t = (self.beta_2 * v) + (1. - self.beta_2) * K.square(g)\n        if self.amsgrad:\n            vhat_t = K.maximum(vhat, v_t)\n            p_t = p - lr_t * m_t / (K.sqrt(vhat_t) + self.epsilon)\n            self.updates.append(K.update(vhat, vhat_t))\n        else:\n            p_t = p - lr_t * m_t / (K.sqrt(v_t) + self.epsilon)\n\n        self.updates.append(K.update(m, m_t))\n        self.updates.append(K.update(v, v_t))\n        new_p = p_t\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'beta_1': float(K.get_value(self.beta_1)),\n              'beta_2': float(K.get_value(self.beta_2)),\n              'decay': float(K.get_value(self.decay)),\n              'epsilon': self.epsilon,\n              'amsgrad': self.amsgrad}\n    base_config = super(Adam, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, lr=0.002, beta_1=0.9, beta_2=0.999,\n             epsilon=None, decay=0., **kwargs):\n    super(Adamax, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n        self.lr = K.variable(lr, name='lr')\n        self.beta_1 = K.variable(beta_1, name='beta_1')\n        self.beta_2 = K.variable(beta_2, name='beta_2')\n        self.decay = K.variable(decay, name='decay')\n    if epsilon is None:\n        epsilon = K.epsilon()\n    self.epsilon = epsilon\n    self.initial_decay = decay",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    lr = self.lr\n    if self.initial_decay > 0:\n        lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,\n                                                  K.dtype(self.decay))))\n\n    t = K.cast(self.iterations, K.floatx()) + 1\n    lr_t = lr / (1. - K.pow(self.beta_1, t))\n\n    shapes = [K.int_shape(p) for p in params]\n    # zero init of 1st moment\n    ms = [K.zeros(shape) for shape in shapes]\n    # zero init of exponentially weighted infinity norm\n    us = [K.zeros(shape) for shape in shapes]\n    self.weights = [self.iterations] + ms + us\n\n    for p, g, m, u in zip(params, grads, ms, us):\n\n        m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\n        u_t = K.maximum(self.beta_2 * u, K.abs(g))\n        p_t = p - lr_t * m_t / (u_t + self.epsilon)\n\n        self.updates.append(K.update(m, m_t))\n        self.updates.append(K.update(u, u_t))\n        new_p = p_t\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'beta_1': float(K.get_value(self.beta_1)),\n              'beta_2': float(K.get_value(self.beta_2)),\n              'decay': float(K.get_value(self.decay)),\n              'epsilon': self.epsilon}\n    base_config = super(Adamax, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, lr=0.002, beta_1=0.9, beta_2=0.999,\n             epsilon=None, schedule_decay=0.004, **kwargs):\n    super(Nadam, self).__init__(**kwargs)\n    with K.name_scope(self.__class__.__name__):\n        self.iterations = K.variable(0, dtype='int64', name='iterations')\n        self.m_schedule = K.variable(1., name='m_schedule')\n        self.lr = K.variable(lr, name='lr')\n        self.beta_1 = K.variable(beta_1, name='beta_1')\n        self.beta_2 = K.variable(beta_2, name='beta_2')\n    if epsilon is None:\n        epsilon = K.epsilon()\n    self.epsilon = epsilon\n    self.schedule_decay = schedule_decay",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.get_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n\n    t = K.cast(self.iterations, K.floatx()) + 1\n\n    # Due to the recommendations in [2], i.e. warming momentum schedule\n    momentum_cache_t = self.beta_1 * (1. - 0.5 * (\n        K.pow(K.cast_to_floatx(0.96), t * self.schedule_decay)))\n    momentum_cache_t_1 = self.beta_1 * (1. - 0.5 * (\n        K.pow(K.cast_to_floatx(0.96), (t + 1) * self.schedule_decay)))\n    m_schedule_new = self.m_schedule * momentum_cache_t\n    m_schedule_next = self.m_schedule * momentum_cache_t * momentum_cache_t_1\n    self.updates.append((self.m_schedule, m_schedule_new))\n\n    shapes = [K.int_shape(p) for p in params]\n    ms = [K.zeros(shape) for shape in shapes]\n    vs = [K.zeros(shape) for shape in shapes]\n\n    self.weights = [self.iterations] + ms + vs\n\n    for p, g, m, v in zip(params, grads, ms, vs):\n        # the following equations given in [1]\n        g_prime = g / (1. - m_schedule_new)\n        m_t = self.beta_1 * m + (1. - self.beta_1) * g\n        m_t_prime = m_t / (1. - m_schedule_next)\n        v_t = self.beta_2 * v + (1. - self.beta_2) * K.square(g)\n        v_t_prime = v_t / (1. - K.pow(self.beta_2, t))\n        m_t_bar = (1. - momentum_cache_t) * g_prime + (\n            momentum_cache_t_1 * m_t_prime)\n\n        self.updates.append(K.update(m, m_t))\n        self.updates.append(K.update(v, v_t))\n\n        p_t = p - self.lr * m_t_bar / (K.sqrt(v_t_prime) + self.epsilon)\n        new_p = p_t\n\n        # Apply constraints.\n        if getattr(p, 'constraint', None) is not None:\n            new_p = p.constraint(new_p)\n\n        self.updates.append(K.update(p, new_p))\n    return self.updates",
                "def get_config(self):\n    config = {'lr': float(K.get_value(self.lr)),\n              'beta_1': float(K.get_value(self.beta_1)),\n              'beta_2': float(K.get_value(self.beta_2)),\n              'epsilon': self.epsilon,\n              'schedule_decay': self.schedule_decay}\n    base_config = super(Nadam, self).get_config()\n    return dict(list(base_config.items()) + list(config.items()))",
                "def __init__(self, optimizer):\n    self.optimizer = optimizer\n    with K.name_scope(self.__class__.__name__):\n        self.iterations = K.variable(0, dtype='int64', name='iterations')",
                "@interfaces.legacy_get_updates_support\ndef get_updates(self, loss, params):\n    grads = self.optimizer.compute_gradients(loss, params)\n    self.updates = [K.update_add(self.iterations, 1)]\n    opt_update = self.optimizer.apply_gradients(\n        grads, global_step=self.iterations)\n    self.updates.append(opt_update)\n    return self.updates",
                "@property\ndef weights(self):\n    raise NotImplementedError",
                "def get_config(self):\n    raise NotImplementedError",
                "def from_config(self, config):\n    raise NotImplementedError"
            ],
            "inscope_function_signatures": [
                "clip_norm(g, c, n)",
                "serialize(optimizer)",
                "deserialize(config, custom_objects=None)",
                "get(identifier)",
                "__init__(self, **kwargs)",
                "get_updates(self, loss, params)",
                "get_gradients(self, loss, params)",
                "set_weights(self, weights)",
                "get_weights(self)",
                "get_config(self)",
                "from_config(cls, config)",
                "__init__(self, lr=0.01, momentum=0.0, decay=0.0, nesterov=False, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, lr=0.001, rho=0.9, epsilon=None, decay=0.0, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, lr=0.01, epsilon=None, decay=0.0, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, lr=1.0, rho=0.95, epsilon=None, decay=0.0, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=None, schedule_decay=0.004, **kwargs)",
                "get_updates(self, loss, params)",
                "get_config(self)",
                "__init__(self, optimizer)",
                "get_updates(self, loss, params)",
                "weights(self)",
                "get_config(self)",
                "from_config(self, config)"
            ],
            "variables_in_file": {
                "K.backend": [
                    16,
                    36,
                    788
                ],
                "K": [
                    513,
                    517,
                    518,
                    519,
                    520,
                    16,
                    547,
                    36,
                    548,
                    549,
                    550,
                    551,
                    552,
                    554,
                    561,
                    565,
                    566,
                    56,
                    568,
                    569,
                    571,
                    573,
                    575,
                    581,
                    584,
                    585,
                    592,
                    596,
                    597,
                    598,
                    599,
                    89,
                    97,
                    100,
                    629,
                    630,
                    631,
                    632,
                    633,
                    634,
                    636,
                    126,
                    643,
                    645,
                    134,
                    649,
                    651,
                    142,
                    656,
                    657,
                    658,
                    667,
                    668,
                    672,
                    673,
                    675,
                    682,
                    174,
                    175,
                    176,
                    177,
                    178,
                    686,
                    687,
                    688,
                    185,
                    189,
                    190,
                    701,
                    192,
                    193,
                    702,
                    707,
                    197,
                    208,
                    212,
                    213,
                    214,
                    244,
                    245,
                    246,
                    247,
                    248,
                    250,
                    257,
                    259,
                    263,
                    264,
                    268,
                    269,
                    270,
                    276,
                    788,
                    280,
                    281,
                    282,
                    311,
                    312,
                    313,
                    314,
                    316,
                    323,
                    324,
                    326,
                    330,
                    331,
                    334,
                    335,
                    336,
                    342,
                    346,
                    347,
                    383,
                    384,
                    385,
                    386,
                    388,
                    396,
                    397,
                    398,
                    400,
                    404,
                    405,
                    409,
                    410,
                    413,
                    420,
                    423,
                    424,
                    428,
                    430,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    468,
                    476,
                    480,
                    481,
                    483,
                    484,
                    485,
                    487,
                    488,
                    490,
                    492,
                    497,
                    499,
                    500,
                    501,
                    503,
                    505,
                    506
                ],
                "c": [
                    32,
                    56,
                    37,
                    38
                ],
                "g": [
                    266,
                    268,
                    270,
                    662,
                    407,
                    664,
                    409,
                    665,
                    667,
                    413,
                    33,
                    38,
                    39,
                    48,
                    52,
                    54,
                    56,
                    57,
                    578,
                    195,
                    196,
                    580,
                    581,
                    200,
                    333,
                    334,
                    336,
                    97,
                    98,
                    100,
                    495,
                    496,
                    497
                ],
                "condition": [
                    48,
                    37,
                    46,
                    47
                ],
                "n": [
                    56,
                    37,
                    38
                ],
                "then_expression": [
                    38,
                    42,
                    43,
                    44,
                    45,
                    49,
                    51,
                    53
                ],
                "tf.scalar_mul": [
                    38
                ],
                "tf": [
                    38,
                    42,
                    44,
                    46,
                    47,
                    48,
                    51,
                    53,
                    790
                ],
                "else_expression": [
                    50,
                    39
                ],
                "isinstance": [
                    42,
                    44,
                    51,
                    53,
                    790,
                    792,
                    794,
                    797
                ],
                "tf.Tensor": [
                    42,
                    51
                ],
                "g_shape": [
                    43,
                    52,
                    45,
                    54
                ],
                "copy.copy": [
                    43,
                    45
                ],
                "copy": [
                    43,
                    45
                ],
                "then_expression.get_shape": [
                    43
                ],
                "tf.IndexedSlices": [
                    44,
                    53
                ],
                "then_expression.dense_shape": [
                    45
                ],
                "condition.dtype": [
                    46
                ],
                "tf.bool": [
                    46
                ],
                "tf.cast": [
                    47
                ],
                "tf.cond": [
                    48
                ],
                "g.set_shape": [
                    52
                ],
                "g._dense_shape": [
                    54
                ],
                "K.switch": [
                    56
                ],
                "K.greater_equal": [
                    56
                ],
                "object": [
                    60
                ],
                "allowed_kwargs": [
                    75,
                    77
                ],
                "k": [
                    76,
                    77,
                    79
                ],
                "kwargs": [
                    546,
                    76,
                    173,
                    460,
                    80,
                    243,
                    628,
                    310,
                    382
                ],
                "TypeError": [
                    78
                ],
                "str": [
                    801,
                    130,
                    132,
                    79,
                    122,
                    795,
                    124
                ],
                "self.__dict__.update": [
                    80
                ],
                "self.__dict__": [
                    80
                ],
                "self": [
                    513,
                    514,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    555,
                    556,
                    560,
                    561,
                    563,
                    564,
                    565,
                    566,
                    568,
                    569,
                    576,
                    580,
                    581,
                    582,
                    584,
                    585,
                    80,
                    81,
                    82,
                    592,
                    593,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    96,
                    98,
                    99,
                    100,
                    628,
                    629,
                    630,
                    119,
                    631,
                    632,
                    633,
                    634,
                    637,
                    638,
                    642,
                    643,
                    645,
                    648,
                    649,
                    650,
                    651,
                    652,
                    653,
                    142,
                    654,
                    146,
                    147,
                    148,
                    149,
                    660,
                    665,
                    667,
                    668,
                    672,
                    673,
                    675,
                    682,
                    683,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    686,
                    687,
                    688,
                    184,
                    185,
                    689,
                    187,
                    188,
                    189,
                    190,
                    700,
                    701,
                    702,
                    194,
                    706,
                    196,
                    197,
                    707,
                    199,
                    200,
                    708,
                    709,
                    710,
                    711,
                    208,
                    209,
                    212,
                    213,
                    214,
                    215,
                    216,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    251,
                    252,
                    256,
                    258,
                    259,
                    261,
                    262,
                    263,
                    264,
                    268,
                    269,
                    270,
                    276,
                    277,
                    280,
                    281,
                    282,
                    283,
                    284,
                    310,
                    311,
                    312,
                    313,
                    314,
                    317,
                    318,
                    322,
                    325,
                    326,
                    328,
                    329,
                    330,
                    331,
                    335,
                    336,
                    342,
                    343,
                    346,
                    347,
                    348,
                    349,
                    382,
                    383,
                    384,
                    385,
                    386,
                    389,
                    390,
                    391,
                    395,
                    399,
                    400,
                    690,
                    402,
                    403,
                    404,
                    405,
                    691,
                    409,
                    410,
                    413,
                    420,
                    423,
                    424,
                    425,
                    428,
                    429,
                    430,
                    431,
                    432,
                    460,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    469,
                    470,
                    471,
                    475,
                    476,
                    478,
                    479,
                    480,
                    481,
                    483,
                    484,
                    485,
                    489,
                    493,
                    496,
                    497,
                    498,
                    500,
                    501,
                    503,
                    505,
                    506
                ],
                "self.updates": [
                    513,
                    514,
                    259,
                    643,
                    269,
                    654,
                    400,
                    276,
                    277,
                    410,
                    672,
                    673,
                    420,
                    424,
                    425,
                    682,
                    683,
                    561,
                    185,
                    707,
                    197,
                    326,
                    710,
                    584,
                    585,
                    711,
                    335,
                    208,
                    81,
                    209,
                    592,
                    593,
                    342,
                    343,
                    476,
                    501,
                    505,
                    506
                ],
                "self.weights": [
                    576,
                    194,
                    258,
                    325,
                    493,
                    142,
                    399,
                    82,
                    660,
                    119
                ],
                "NotImplementedError": [
                    721,
                    715,
                    718,
                    86
                ],
                "interfaces.legacy_get_updates_support": [
                    320,
                    640,
                    704,
                    393,
                    558,
                    84,
                    182,
                    473,
                    254
                ],
                "interfaces": [
                    320,
                    640,
                    704,
                    393,
                    558,
                    84,
                    182,
                    473,
                    254
                ],
                "grads": [
                    256,
                    642,
                    266,
                    395,
                    662,
                    407,
                    560,
                    184,
                    322,
                    195,
                    578,
                    706,
                    709,
                    333,
                    89,
                    90,
                    475,
                    97,
                    98,
                    100,
                    101,
                    495
                ],
                "K.gradients": [
                    89
                ],
                "loss": [
                    256,
                    322,
                    642,
                    706,
                    395,
                    560,
                    184,
                    89,
                    475
                ],
                "params": [
                    256,
                    257,
                    642,
                    266,
                    395,
                    396,
                    656,
                    662,
                    407,
                    560,
                    184,
                    571,
                    192,
                    322,
                    195,
                    323,
                    578,
                    706,
                    333,
                    89,
                    475,
                    487,
                    488,
                    490,
                    492,
                    495,
                    119,
                    120,
                    124,
                    126,
                    127
                ],
                "ValueError": [
                    800,
                    121,
                    129,
                    91
                ],
                "hasattr": [
                    96,
                    146,
                    99,
                    148
                ],
                "self.clipnorm": [
                    96,
                    98,
                    147
                ],
                "norm": [
                    97,
                    98
                ],
                "K.sqrt": [
                    97,
                    675,
                    484,
                    270,
                    336,
                    500,
                    503,
                    413
                ],
                "sum": [
                    97
                ],
                "K.sum": [
                    97
                ],
                "K.square": [
                    97,
                    423,
                    268,
                    334,
                    497,
                    409,
                    667
                ],
                "clip_norm": [
                    98
                ],
                "self.clipvalue": [
                    99,
                    100,
                    149
                ],
                "K.clip": [
                    100
                ],
                "len": [
                    120,
                    122,
                    124
                ],
                "weights": [
                    120,
                    122,
                    127
                ],
                "weight_value_tuples": [
                    134,
                    125,
                    133
                ],
                "param_values": [
                    126,
                    127
                ],
                "K.batch_get_value": [
                    142,
                    126
                ],
                "pv": [
                    128,
                    130,
                    127
                ],
                "p": [
                    257,
                    513,
                    133,
                    266,
                    511,
                    396,
                    270,
                    656,
                    273,
                    274,
                    276,
                    662,
                    407,
                    414,
                    417,
                    418,
                    675,
                    420,
                    679,
                    680,
                    682,
                    571,
                    192,
                    578,
                    195,
                    323,
                    582,
                    200,
                    202,
                    205,
                    206,
                    333,
                    208,
                    336,
                    589,
                    339,
                    340,
                    590,
                    342,
                    592,
                    487,
                    488,
                    490,
                    495,
                    500,
                    503,
                    510,
                    127
                ],
                "w": [
                    128,
                    132,
                    133,
                    127
                ],
                "zip": [
                    578,
                    195,
                    266,
                    333,
                    495,
                    662,
                    407,
                    127
                ],
                "pv.shape": [
                    128,
                    130
                ],
                "w.shape": [
                    128,
                    132
                ],
                "weight_value_tuples.append": [
                    133
                ],
                "K.batch_set_value": [
                    134
                ],
                "config": [
                    517,
                    524,
                    145,
                    147,
                    149,
                    150,
                    280,
                    154,
                    795,
                    796,
                    285,
                    428,
                    686,
                    433,
                    692,
                    212,
                    596,
                    217,
                    346,
                    602,
                    350,
                    763,
                    764,
                    765
                ],
                "cls": [
                    154
                ],
                "classmethod": [
                    152
                ],
                "Optimizer": [
                    288,
                    353,
                    605,
                    797,
                    527,
                    436,
                    695,
                    220,
                    157
                ],
                "__init__": [
                    546,
                    460,
                    173,
                    243,
                    628,
                    310,
                    382
                ],
                "super": [
                    546,
                    523,
                    460,
                    173,
                    432,
                    243,
                    628,
                    691,
                    310,
                    216,
                    601,
                    284,
                    349,
                    382
                ],
                "SGD": [
                    216,
                    753,
                    173,
                    726
                ],
                "K.name_scope": [
                    547,
                    461,
                    174,
                    244,
                    629,
                    311,
                    701,
                    383
                ],
                "self.__class__.__name__": [
                    547,
                    461,
                    174,
                    244,
                    629,
                    311,
                    701,
                    383
                ],
                "self.__class__": [
                    547,
                    461,
                    174,
                    244,
                    629,
                    311,
                    701,
                    383
                ],
                "self.iterations": [
                    386,
                    259,
                    643,
                    645,
                    263,
                    400,
                    404,
                    660,
                    548,
                    175,
                    561,
                    565,
                    568,
                    185,
                    314,
                    189,
                    702,
                    576,
                    194,
                    707,
                    709,
                    326,
                    330,
                    462,
                    476,
                    480,
                    483,
                    493,
                    630,
                    248
                ],
                "K.variable": [
                    384,
                    385,
                    386,
                    548,
                    549,
                    550,
                    551,
                    552,
                    175,
                    176,
                    177,
                    178,
                    312,
                    313,
                    314,
                    702,
                    462,
                    463,
                    464,
                    465,
                    466,
                    631,
                    632,
                    633,
                    245,
                    246,
                    247,
                    248,
                    630,
                    634
                ],
                "self.lr": [
                    384,
                    261,
                    517,
                    402,
                    280,
                    675,
                    549,
                    428,
                    686,
                    176,
                    563,
                    312,
                    187,
                    328,
                    463,
                    212,
                    596,
                    346,
                    478,
                    245,
                    632
                ],
                "lr": [
                    384,
                    261,
                    263,
                    270,
                    402,
                    404,
                    414,
                    549,
                    176,
                    563,
                    565,
                    312,
                    569,
                    187,
                    189,
                    196,
                    200,
                    328,
                    330,
                    463,
                    336,
                    478,
                    480,
                    484,
                    245,
                    632
                ],
                "self.momentum": [
                    200,
                    177,
                    196,
                    213
                ],
                "momentum": [
                    177
                ],
                "self.decay": [
                    385,
                    263,
                    264,
                    520,
                    404,
                    405,
                    282,
                    552,
                    430,
                    178,
                    565,
                    566,
                    313,
                    189,
                    190,
                    330,
                    331,
                    466,
                    214,
                    599,
                    347,
                    480,
                    481,
                    247
                ],
                "decay": [
                    385,
                    391,
                    552,
                    556,
                    178,
                    179,
                    466,
                    470,
                    247,
                    313,
                    252,
                    318
                ],
                "self.initial_decay": [
                    262,
                    391,
                    329,
                    556,
                    179,
                    252,
                    403,
                    470,
                    564,
                    188,
                    318,
                    479
                ],
                "self.nesterov": [
                    215,
                    180,
                    199
                ],
                "nesterov": [
                    180
                ],
                "self.get_gradients": [
                    256,
                    322,
                    642,
                    395,
                    560,
                    184,
                    475
                ],
                "K.update_add": [
                    259,
                    643,
                    707,
                    326,
                    400,
                    561,
                    185,
                    476
                ],
                "K.cast": [
                    480,
                    483,
                    645,
                    263,
                    330,
                    404,
                    565,
                    568,
                    189
                ],
                "K.dtype": [
                    257,
                    481,
                    487,
                    264,
                    488,
                    490,
                    331,
                    405,
                    566,
                    190
                ],
                "shapes": [
                    192,
                    193,
                    323,
                    324,
                    396,
                    397,
                    398,
                    656,
                    657,
                    658,
                    571,
                    573,
                    575
                ],
                "K.int_shape": [
                    192,
                    257,
                    323,
                    487,
                    488,
                    490,
                    396,
                    656,
                    571
                ],
                "moments": [
                    193,
                    194,
                    195
                ],
                "K.zeros": [
                    193,
                    257,
                    324,
                    487,
                    488,
                    490,
                    492,
                    397,
                    398,
                    657,
                    658,
                    573,
                    575
                ],
                "shape": [
                    193,
                    324,
                    397,
                    398,
                    657,
                    658,
                    573,
                    575
                ],
                "m": [
                    672,
                    578,
                    195,
                    196,
                    197,
                    580,
                    584,
                    495,
                    496,
                    665,
                    662,
                    505
                ],
                "v": [
                    673,
                    196,
                    197,
                    200,
                    202,
                    495,
                    497,
                    662,
                    506,
                    667
                ],
                "self.updates.append": [
                    513,
                    269,
                    654,
                    276,
                    410,
                    672,
                    673,
                    420,
                    424,
                    682,
                    197,
                    710,
                    584,
                    585,
                    335,
                    208,
                    592,
                    342,
                    501,
                    505,
                    506
                ],
                "K.update": [
                    513,
                    269,
                    276,
                    410,
                    672,
                    673,
                    420,
                    424,
                    682,
                    197,
                    584,
                    585,
                    335,
                    208,
                    592,
                    342,
                    501,
                    505,
                    506
                ],
                "new_p": [
                    513,
                    270,
                    274,
                    276,
                    414,
                    418,
                    420,
                    676,
                    680,
                    682,
                    200,
                    202,
                    586,
                    206,
                    590,
                    208,
                    336,
                    592,
                    340,
                    342,
                    507,
                    511
                ],
                "getattr": [
                    417,
                    679,
                    205,
                    589,
                    273,
                    339,
                    510
                ],
                "p.constraint": [
                    418,
                    680,
                    206,
                    590,
                    274,
                    340,
                    511
                ],
                "float": [
                    517,
                    518,
                    519,
                    520,
                    280,
                    281,
                    282,
                    428,
                    430,
                    686,
                    687,
                    688,
                    212,
                    213,
                    214,
                    599,
                    596,
                    597,
                    346,
                    347,
                    598
                ],
                "K.get_value": [
                    517,
                    518,
                    519,
                    520,
                    280,
                    281,
                    282,
                    428,
                    430,
                    686,
                    687,
                    688,
                    212,
                    213,
                    214,
                    599,
                    596,
                    597,
                    346,
                    347,
                    598
                ],
                "base_config": [
                    523,
                    524,
                    432,
                    433,
                    601,
                    691,
                    692,
                    602,
                    216,
                    217,
                    285,
                    284,
                    349,
                    350
                ],
                "get_config": [
                    523,
                    432,
                    691,
                    216,
                    601,
                    284,
                    349
                ],
                "dict": [
                    524,
                    433,
                    692,
                    792,
                    217,
                    602,
                    285,
                    350
                ],
                "list": [
                    524,
                    433,
                    692,
                    217,
                    602,
                    285,
                    350
                ],
                "base_config.items": [
                    524,
                    433,
                    692,
                    217,
                    602,
                    285,
                    350
                ],
                "config.items": [
                    524,
                    433,
                    692,
                    217,
                    602,
                    285,
                    350
                ],
                "RMSprop": [
                    754,
                    243,
                    284,
                    727
                ],
                "self.rho": [
                    389,
                    423,
                    409,
                    268,
                    429,
                    246,
                    281
                ],
                "rho": [
                    389,
                    246
                ],
                "epsilon": [
                    636,
                    387,
                    388,
                    637,
                    390,
                    635,
                    553,
                    554,
                    555,
                    315,
                    467,
                    468,
                    469,
                    249,
                    250,
                    251,
                    316,
                    317
                ],
                "K.epsilon": [
                    636,
                    388,
                    554,
                    468,
                    250,
                    316
                ],
                "self.epsilon": [
                    390,
                    521,
                    270,
                    283,
                    413,
                    675,
                    555,
                    431,
                    689,
                    317,
                    582,
                    336,
                    469,
                    600,
                    348,
                    500,
                    503,
                    251,
                    637
                ],
                "accumulators": [
                    257,
                    258,
                    324,
                    325,
                    266,
                    333,
                    397,
                    399,
                    407
                ],
                "a": [
                    266,
                    268,
                    333,
                    269,
                    334,
                    335,
                    407,
                    409,
                    410
                ],
                "new_a": [
                    268,
                    269,
                    334,
                    270,
                    335,
                    336,
                    409,
                    410,
                    413
                ],
                "Adagrad": [
                    728,
                    755,
                    349,
                    310
                ],
                "Adadelta": [
                    432,
                    729,
                    756,
                    382
                ],
                "delta_accumulators": [
                    407,
                    398,
                    399
                ],
                "d_a": [
                    424,
                    423,
                    413,
                    407
                ],
                "update": [
                    413,
                    414,
                    423
                ],
                "new_d_a": [
                    424,
                    423
                ],
                "Adam": [
                    730,
                    523,
                    460,
                    757
                ],
                "self.beta_1": [
                    580,
                    485,
                    518,
                    550,
                    648,
                    650,
                    687,
                    464,
                    496,
                    633,
                    665,
                    597,
                    569
                ],
                "beta_1": [
                    464,
                    633,
                    550
                ],
                "self.beta_2": [
                    484,
                    581,
                    551,
                    519,
                    688,
                    465,
                    497,
                    598,
                    634,
                    667,
                    668
                ],
                "beta_2": [
                    465,
                    634,
                    551
                ],
                "self.amsgrad": [
                    489,
                    498,
                    522,
                    471
                ],
                "amsgrad": [
                    471
                ],
                "t": [
                    483,
                    484,
                    485,
                    645,
                    649,
                    651,
                    568,
                    569,
                    668
                ],
                "K.floatx": [
                    568,
                    483,
                    645
                ],
                "lr_t": [
                    484,
                    582,
                    500,
                    503,
                    569
                ],
                "K.pow": [
                    484,
                    485,
                    649,
                    651,
                    569,
                    668
                ],
                "ms": [
                    576,
                    578,
                    487,
                    493,
                    495,
                    657,
                    660,
                    662,
                    573
                ],
                "vs": [
                    488,
                    493,
                    495,
                    658,
                    660,
                    662
                ],
                "vhats": [
                    490,
                    492,
                    493,
                    495
                ],
                "_": [
                    492
                ],
                "vhat": [
                    499,
                    501,
                    495
                ],
                "m_t": [
                    672,
                    580,
                    582,
                    584,
                    496,
                    665,
                    500,
                    503,
                    505,
                    666
                ],
                "v_t": [
                    673,
                    497,
                    499,
                    503,
                    506,
                    667,
                    668
                ],
                "vhat_t": [
                    499,
                    500,
                    501
                ],
                "K.maximum": [
                    499,
                    581
                ],
                "p_t": [
                    675,
                    676,
                    582,
                    586,
                    500,
                    503,
                    507
                ],
                "Adamax": [
                    601,
                    546,
                    731,
                    758
                ],
                "us": [
                    576,
                    578,
                    575
                ],
                "u": [
                    585,
                    578,
                    581
                ],
                "u_t": [
                    585,
                    581,
                    582
                ],
                "K.abs": [
                    581
                ],
                "Nadam": [
                    732,
                    691,
                    628,
                    759
                ],
                "self.m_schedule": [
                    652,
                    653,
                    654,
                    631
                ],
                "self.schedule_decay": [
                    649,
                    690,
                    651,
                    638
                ],
                "schedule_decay": [
                    638
                ],
                "momentum_cache_t": [
                    648,
                    652,
                    653,
                    669
                ],
                "K.cast_to_floatx": [
                    649,
                    651
                ],
                "momentum_cache_t_1": [
                    650,
                    653,
                    670
                ],
                "m_schedule_new": [
                    664,
                    652,
                    654
                ],
                "m_schedule_next": [
                    666,
                    653
                ],
                "g_prime": [
                    664,
                    669
                ],
                "m_t_prime": [
                    666,
                    670
                ],
                "v_t_prime": [
                    675,
                    668
                ],
                "m_t_bar": [
                    675,
                    669
                ],
                "self.optimizer": [
                    706,
                    708,
                    700
                ],
                "optimizer": [
                    736,
                    700
                ],
                "self.optimizer.compute_gradients": [
                    706
                ],
                "opt_update": [
                    708,
                    710
                ],
                "self.optimizer.apply_gradients": [
                    708
                ],
                "property": [
                    713
                ],
                "sgd": [
                    726
                ],
                "rmsprop": [
                    727
                ],
                "adagrad": [
                    728
                ],
                "adadelta": [
                    729
                ],
                "adam": [
                    730
                ],
                "adamax": [
                    731
                ],
                "nadam": [
                    732
                ],
                "serialize_keras_object": [
                    736
                ],
                "all_classes": [
                    752,
                    763,
                    766
                ],
                "TFOptimizer": [
                    760,
                    791
                ],
                "lower": [
                    763,
                    764
                ],
                "deserialize_keras_object": [
                    765
                ],
                "custom_objects": [
                    767
                ],
                "identifier": [
                    801,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    797,
                    798
                ],
                "tf.train.Optimizer": [
                    790
                ],
                "tf.train": [
                    790
                ],
                "deserialize": [
                    793,
                    796
                ],
                "six.string_types": [
                    794
                ],
                "six": [
                    794
                ]
            },
            "filtered_variables_in_file": {
                "K.backend": [
                    16,
                    36,
                    788
                ],
                "K": [
                    513,
                    517,
                    518,
                    519,
                    520,
                    16,
                    547,
                    36,
                    548,
                    549,
                    550,
                    551,
                    552,
                    554,
                    561,
                    565,
                    566,
                    56,
                    568,
                    569,
                    571,
                    573,
                    575,
                    581,
                    584,
                    585,
                    592,
                    596,
                    597,
                    598,
                    599,
                    89,
                    97,
                    100,
                    629,
                    630,
                    631,
                    632,
                    633,
                    634,
                    636,
                    126,
                    643,
                    645,
                    134,
                    649,
                    651,
                    142,
                    656,
                    657,
                    658,
                    667,
                    668,
                    672,
                    673,
                    675,
                    682,
                    174,
                    175,
                    176,
                    177,
                    178,
                    686,
                    687,
                    688,
                    185,
                    189,
                    190,
                    701,
                    192,
                    193,
                    702,
                    707,
                    197,
                    208,
                    212,
                    213,
                    214,
                    244,
                    245,
                    246,
                    247,
                    248,
                    250,
                    257,
                    259,
                    263,
                    264,
                    268,
                    269,
                    270,
                    276,
                    788,
                    280,
                    281,
                    282,
                    311,
                    312,
                    313,
                    314,
                    316,
                    323,
                    324,
                    326,
                    330,
                    331,
                    334,
                    335,
                    336,
                    342,
                    346,
                    347,
                    383,
                    384,
                    385,
                    386,
                    388,
                    396,
                    397,
                    398,
                    400,
                    404,
                    405,
                    409,
                    410,
                    413,
                    420,
                    423,
                    424,
                    428,
                    430,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    468,
                    476,
                    480,
                    481,
                    483,
                    484,
                    485,
                    487,
                    488,
                    490,
                    492,
                    497,
                    499,
                    500,
                    501,
                    503,
                    505,
                    506
                ],
                "c": [
                    32,
                    56,
                    37,
                    38
                ],
                "g": [
                    266,
                    268,
                    270,
                    662,
                    407,
                    664,
                    409,
                    665,
                    667,
                    413,
                    33,
                    38,
                    39,
                    48,
                    52,
                    54,
                    56,
                    57,
                    578,
                    195,
                    196,
                    580,
                    581,
                    200,
                    333,
                    334,
                    336,
                    97,
                    98,
                    100,
                    495,
                    496,
                    497
                ],
                "condition": [
                    48,
                    37,
                    46,
                    47
                ],
                "n": [
                    56,
                    37,
                    38
                ],
                "then_expression": [
                    38,
                    42,
                    43,
                    44,
                    45,
                    49,
                    51,
                    53
                ],
                "tf.scalar_mul": [
                    38
                ],
                "tf": [
                    38,
                    42,
                    44,
                    46,
                    47,
                    48,
                    51,
                    53,
                    790
                ],
                "else_expression": [
                    50,
                    39
                ],
                "tf.Tensor": [
                    42,
                    51
                ],
                "g_shape": [
                    43,
                    52,
                    45,
                    54
                ],
                "copy.copy": [
                    43,
                    45
                ],
                "copy": [
                    43,
                    45
                ],
                "then_expression.get_shape": [
                    43
                ],
                "tf.IndexedSlices": [
                    44,
                    53
                ],
                "then_expression.dense_shape": [
                    45
                ],
                "condition.dtype": [
                    46
                ],
                "tf.bool": [
                    46
                ],
                "tf.cast": [
                    47
                ],
                "tf.cond": [
                    48
                ],
                "g.set_shape": [
                    52
                ],
                "g._dense_shape": [
                    54
                ],
                "K.switch": [
                    56
                ],
                "K.greater_equal": [
                    56
                ],
                "allowed_kwargs": [
                    75,
                    77
                ],
                "k": [
                    76,
                    77,
                    79
                ],
                "kwargs": [
                    546,
                    76,
                    173,
                    460,
                    80,
                    243,
                    628,
                    310,
                    382
                ],
                "self.__dict__.update": [
                    80
                ],
                "self.__dict__": [
                    80
                ],
                "self": [
                    513,
                    514,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    555,
                    556,
                    560,
                    561,
                    563,
                    564,
                    565,
                    566,
                    568,
                    569,
                    576,
                    580,
                    581,
                    582,
                    584,
                    585,
                    80,
                    81,
                    82,
                    592,
                    593,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    96,
                    98,
                    99,
                    100,
                    628,
                    629,
                    630,
                    119,
                    631,
                    632,
                    633,
                    634,
                    637,
                    638,
                    642,
                    643,
                    645,
                    648,
                    649,
                    650,
                    651,
                    652,
                    653,
                    142,
                    654,
                    146,
                    147,
                    148,
                    149,
                    660,
                    665,
                    667,
                    668,
                    672,
                    673,
                    675,
                    682,
                    683,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    686,
                    687,
                    688,
                    184,
                    185,
                    689,
                    187,
                    188,
                    189,
                    190,
                    700,
                    701,
                    702,
                    194,
                    706,
                    196,
                    197,
                    707,
                    199,
                    200,
                    708,
                    709,
                    710,
                    711,
                    208,
                    209,
                    212,
                    213,
                    214,
                    215,
                    216,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    251,
                    252,
                    256,
                    258,
                    259,
                    261,
                    262,
                    263,
                    264,
                    268,
                    269,
                    270,
                    276,
                    277,
                    280,
                    281,
                    282,
                    283,
                    284,
                    310,
                    311,
                    312,
                    313,
                    314,
                    317,
                    318,
                    322,
                    325,
                    326,
                    328,
                    329,
                    330,
                    331,
                    335,
                    336,
                    342,
                    343,
                    346,
                    347,
                    348,
                    349,
                    382,
                    383,
                    384,
                    385,
                    386,
                    389,
                    390,
                    391,
                    395,
                    399,
                    400,
                    690,
                    402,
                    403,
                    404,
                    405,
                    691,
                    409,
                    410,
                    413,
                    420,
                    423,
                    424,
                    425,
                    428,
                    429,
                    430,
                    431,
                    432,
                    460,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    469,
                    470,
                    471,
                    475,
                    476,
                    478,
                    479,
                    480,
                    481,
                    483,
                    484,
                    485,
                    489,
                    493,
                    496,
                    497,
                    498,
                    500,
                    501,
                    503,
                    505,
                    506
                ],
                "self.updates": [
                    513,
                    514,
                    259,
                    643,
                    269,
                    654,
                    400,
                    276,
                    277,
                    410,
                    672,
                    673,
                    420,
                    424,
                    425,
                    682,
                    683,
                    561,
                    185,
                    707,
                    197,
                    326,
                    710,
                    584,
                    585,
                    711,
                    335,
                    208,
                    81,
                    209,
                    592,
                    593,
                    342,
                    343,
                    476,
                    501,
                    505,
                    506
                ],
                "self.weights": [
                    576,
                    194,
                    258,
                    325,
                    493,
                    142,
                    399,
                    82,
                    660,
                    119
                ],
                "interfaces.legacy_get_updates_support": [
                    320,
                    640,
                    704,
                    393,
                    558,
                    84,
                    182,
                    473,
                    254
                ],
                "interfaces": [
                    320,
                    640,
                    704,
                    393,
                    558,
                    84,
                    182,
                    473,
                    254
                ],
                "grads": [
                    256,
                    642,
                    266,
                    395,
                    662,
                    407,
                    560,
                    184,
                    322,
                    195,
                    578,
                    706,
                    709,
                    333,
                    89,
                    90,
                    475,
                    97,
                    98,
                    100,
                    101,
                    495
                ],
                "K.gradients": [
                    89
                ],
                "loss": [
                    256,
                    322,
                    642,
                    706,
                    395,
                    560,
                    184,
                    89,
                    475
                ],
                "params": [
                    256,
                    257,
                    642,
                    266,
                    395,
                    396,
                    656,
                    662,
                    407,
                    560,
                    184,
                    571,
                    192,
                    322,
                    195,
                    323,
                    578,
                    706,
                    333,
                    89,
                    475,
                    487,
                    488,
                    490,
                    492,
                    495,
                    119,
                    120,
                    124,
                    126,
                    127
                ],
                "self.clipnorm": [
                    96,
                    98,
                    147
                ],
                "norm": [
                    97,
                    98
                ],
                "K.sqrt": [
                    97,
                    675,
                    484,
                    270,
                    336,
                    500,
                    503,
                    413
                ],
                "K.sum": [
                    97
                ],
                "K.square": [
                    97,
                    423,
                    268,
                    334,
                    497,
                    409,
                    667
                ],
                "clip_norm": [
                    98
                ],
                "self.clipvalue": [
                    99,
                    100,
                    149
                ],
                "K.clip": [
                    100
                ],
                "weights": [
                    120,
                    122,
                    127
                ],
                "weight_value_tuples": [
                    134,
                    125,
                    133
                ],
                "param_values": [
                    126,
                    127
                ],
                "K.batch_get_value": [
                    142,
                    126
                ],
                "pv": [
                    128,
                    130,
                    127
                ],
                "p": [
                    257,
                    513,
                    133,
                    266,
                    511,
                    396,
                    270,
                    656,
                    273,
                    274,
                    276,
                    662,
                    407,
                    414,
                    417,
                    418,
                    675,
                    420,
                    679,
                    680,
                    682,
                    571,
                    192,
                    578,
                    195,
                    323,
                    582,
                    200,
                    202,
                    205,
                    206,
                    333,
                    208,
                    336,
                    589,
                    339,
                    340,
                    590,
                    342,
                    592,
                    487,
                    488,
                    490,
                    495,
                    500,
                    503,
                    510,
                    127
                ],
                "w": [
                    128,
                    132,
                    133,
                    127
                ],
                "pv.shape": [
                    128,
                    130
                ],
                "w.shape": [
                    128,
                    132
                ],
                "weight_value_tuples.append": [
                    133
                ],
                "K.batch_set_value": [
                    134
                ],
                "config": [
                    517,
                    524,
                    145,
                    147,
                    149,
                    150,
                    280,
                    154,
                    795,
                    796,
                    285,
                    428,
                    686,
                    433,
                    692,
                    212,
                    596,
                    217,
                    346,
                    602,
                    350,
                    763,
                    764,
                    765
                ],
                "cls": [
                    154
                ],
                "Optimizer": [
                    288,
                    353,
                    605,
                    797,
                    527,
                    436,
                    695,
                    220,
                    157
                ],
                "__init__": [
                    546,
                    460,
                    173,
                    243,
                    628,
                    310,
                    382
                ],
                "SGD": [
                    216,
                    753,
                    173,
                    726
                ],
                "K.name_scope": [
                    547,
                    461,
                    174,
                    244,
                    629,
                    311,
                    701,
                    383
                ],
                "self.__class__.__name__": [
                    547,
                    461,
                    174,
                    244,
                    629,
                    311,
                    701,
                    383
                ],
                "self.__class__": [
                    547,
                    461,
                    174,
                    244,
                    629,
                    311,
                    701,
                    383
                ],
                "self.iterations": [
                    386,
                    259,
                    643,
                    645,
                    263,
                    400,
                    404,
                    660,
                    548,
                    175,
                    561,
                    565,
                    568,
                    185,
                    314,
                    189,
                    702,
                    576,
                    194,
                    707,
                    709,
                    326,
                    330,
                    462,
                    476,
                    480,
                    483,
                    493,
                    630,
                    248
                ],
                "K.variable": [
                    384,
                    385,
                    386,
                    548,
                    549,
                    550,
                    551,
                    552,
                    175,
                    176,
                    177,
                    178,
                    312,
                    313,
                    314,
                    702,
                    462,
                    463,
                    464,
                    465,
                    466,
                    631,
                    632,
                    633,
                    245,
                    246,
                    247,
                    248,
                    630,
                    634
                ],
                "self.lr": [
                    384,
                    261,
                    517,
                    402,
                    280,
                    675,
                    549,
                    428,
                    686,
                    176,
                    563,
                    312,
                    187,
                    328,
                    463,
                    212,
                    596,
                    346,
                    478,
                    245,
                    632
                ],
                "lr": [
                    384,
                    261,
                    263,
                    270,
                    402,
                    404,
                    414,
                    549,
                    176,
                    563,
                    565,
                    312,
                    569,
                    187,
                    189,
                    196,
                    200,
                    328,
                    330,
                    463,
                    336,
                    478,
                    480,
                    484,
                    245,
                    632
                ],
                "self.momentum": [
                    200,
                    177,
                    196,
                    213
                ],
                "momentum": [
                    177
                ],
                "self.decay": [
                    385,
                    263,
                    264,
                    520,
                    404,
                    405,
                    282,
                    552,
                    430,
                    178,
                    565,
                    566,
                    313,
                    189,
                    190,
                    330,
                    331,
                    466,
                    214,
                    599,
                    347,
                    480,
                    481,
                    247
                ],
                "decay": [
                    385,
                    391,
                    552,
                    556,
                    178,
                    179,
                    466,
                    470,
                    247,
                    313,
                    252,
                    318
                ],
                "self.initial_decay": [
                    262,
                    391,
                    329,
                    556,
                    179,
                    252,
                    403,
                    470,
                    564,
                    188,
                    318,
                    479
                ],
                "self.nesterov": [
                    215,
                    180,
                    199
                ],
                "nesterov": [
                    180
                ],
                "self.get_gradients": [
                    256,
                    322,
                    642,
                    395,
                    560,
                    184,
                    475
                ],
                "K.update_add": [
                    259,
                    643,
                    707,
                    326,
                    400,
                    561,
                    185,
                    476
                ],
                "K.cast": [
                    480,
                    483,
                    645,
                    263,
                    330,
                    404,
                    565,
                    568,
                    189
                ],
                "K.dtype": [
                    257,
                    481,
                    487,
                    264,
                    488,
                    490,
                    331,
                    405,
                    566,
                    190
                ],
                "shapes": [
                    192,
                    193,
                    323,
                    324,
                    396,
                    397,
                    398,
                    656,
                    657,
                    658,
                    571,
                    573,
                    575
                ],
                "K.int_shape": [
                    192,
                    257,
                    323,
                    487,
                    488,
                    490,
                    396,
                    656,
                    571
                ],
                "moments": [
                    193,
                    194,
                    195
                ],
                "K.zeros": [
                    193,
                    257,
                    324,
                    487,
                    488,
                    490,
                    492,
                    397,
                    398,
                    657,
                    658,
                    573,
                    575
                ],
                "shape": [
                    193,
                    324,
                    397,
                    398,
                    657,
                    658,
                    573,
                    575
                ],
                "m": [
                    672,
                    578,
                    195,
                    196,
                    197,
                    580,
                    584,
                    495,
                    496,
                    665,
                    662,
                    505
                ],
                "v": [
                    673,
                    196,
                    197,
                    200,
                    202,
                    495,
                    497,
                    662,
                    506,
                    667
                ],
                "self.updates.append": [
                    513,
                    269,
                    654,
                    276,
                    410,
                    672,
                    673,
                    420,
                    424,
                    682,
                    197,
                    710,
                    584,
                    585,
                    335,
                    208,
                    592,
                    342,
                    501,
                    505,
                    506
                ],
                "K.update": [
                    513,
                    269,
                    276,
                    410,
                    672,
                    673,
                    420,
                    424,
                    682,
                    197,
                    584,
                    585,
                    335,
                    208,
                    592,
                    342,
                    501,
                    505,
                    506
                ],
                "new_p": [
                    513,
                    270,
                    274,
                    276,
                    414,
                    418,
                    420,
                    676,
                    680,
                    682,
                    200,
                    202,
                    586,
                    206,
                    590,
                    208,
                    336,
                    592,
                    340,
                    342,
                    507,
                    511
                ],
                "p.constraint": [
                    418,
                    680,
                    206,
                    590,
                    274,
                    340,
                    511
                ],
                "K.get_value": [
                    517,
                    518,
                    519,
                    520,
                    280,
                    281,
                    282,
                    428,
                    430,
                    686,
                    687,
                    688,
                    212,
                    213,
                    214,
                    599,
                    596,
                    597,
                    346,
                    347,
                    598
                ],
                "base_config": [
                    523,
                    524,
                    432,
                    433,
                    601,
                    691,
                    692,
                    602,
                    216,
                    217,
                    285,
                    284,
                    349,
                    350
                ],
                "get_config": [
                    523,
                    432,
                    691,
                    216,
                    601,
                    284,
                    349
                ],
                "base_config.items": [
                    524,
                    433,
                    692,
                    217,
                    602,
                    285,
                    350
                ],
                "config.items": [
                    524,
                    433,
                    692,
                    217,
                    602,
                    285,
                    350
                ],
                "RMSprop": [
                    754,
                    243,
                    284,
                    727
                ],
                "self.rho": [
                    389,
                    423,
                    409,
                    268,
                    429,
                    246,
                    281
                ],
                "rho": [
                    389,
                    246
                ],
                "epsilon": [
                    636,
                    387,
                    388,
                    637,
                    390,
                    635,
                    553,
                    554,
                    555,
                    315,
                    467,
                    468,
                    469,
                    249,
                    250,
                    251,
                    316,
                    317
                ],
                "K.epsilon": [
                    636,
                    388,
                    554,
                    468,
                    250,
                    316
                ],
                "self.epsilon": [
                    390,
                    521,
                    270,
                    283,
                    413,
                    675,
                    555,
                    431,
                    689,
                    317,
                    582,
                    336,
                    469,
                    600,
                    348,
                    500,
                    503,
                    251,
                    637
                ],
                "accumulators": [
                    257,
                    258,
                    324,
                    325,
                    266,
                    333,
                    397,
                    399,
                    407
                ],
                "a": [
                    266,
                    268,
                    333,
                    269,
                    334,
                    335,
                    407,
                    409,
                    410
                ],
                "new_a": [
                    268,
                    269,
                    334,
                    270,
                    335,
                    336,
                    409,
                    410,
                    413
                ],
                "Adagrad": [
                    728,
                    755,
                    349,
                    310
                ],
                "Adadelta": [
                    432,
                    729,
                    756,
                    382
                ],
                "delta_accumulators": [
                    407,
                    398,
                    399
                ],
                "d_a": [
                    424,
                    423,
                    413,
                    407
                ],
                "update": [
                    413,
                    414,
                    423
                ],
                "new_d_a": [
                    424,
                    423
                ],
                "Adam": [
                    730,
                    523,
                    460,
                    757
                ],
                "self.beta_1": [
                    580,
                    485,
                    518,
                    550,
                    648,
                    650,
                    687,
                    464,
                    496,
                    633,
                    665,
                    597,
                    569
                ],
                "beta_1": [
                    464,
                    633,
                    550
                ],
                "self.beta_2": [
                    484,
                    581,
                    551,
                    519,
                    688,
                    465,
                    497,
                    598,
                    634,
                    667,
                    668
                ],
                "beta_2": [
                    465,
                    634,
                    551
                ],
                "self.amsgrad": [
                    489,
                    498,
                    522,
                    471
                ],
                "amsgrad": [
                    471
                ],
                "t": [
                    483,
                    484,
                    485,
                    645,
                    649,
                    651,
                    568,
                    569,
                    668
                ],
                "K.floatx": [
                    568,
                    483,
                    645
                ],
                "lr_t": [
                    484,
                    582,
                    500,
                    503,
                    569
                ],
                "K.pow": [
                    484,
                    485,
                    649,
                    651,
                    569,
                    668
                ],
                "ms": [
                    576,
                    578,
                    487,
                    493,
                    495,
                    657,
                    660,
                    662,
                    573
                ],
                "vs": [
                    488,
                    493,
                    495,
                    658,
                    660,
                    662
                ],
                "vhats": [
                    490,
                    492,
                    493,
                    495
                ],
                "_": [
                    492
                ],
                "vhat": [
                    499,
                    501,
                    495
                ],
                "m_t": [
                    672,
                    580,
                    582,
                    584,
                    496,
                    665,
                    500,
                    503,
                    505,
                    666
                ],
                "v_t": [
                    673,
                    497,
                    499,
                    503,
                    506,
                    667,
                    668
                ],
                "vhat_t": [
                    499,
                    500,
                    501
                ],
                "K.maximum": [
                    499,
                    581
                ],
                "p_t": [
                    675,
                    676,
                    582,
                    586,
                    500,
                    503,
                    507
                ],
                "Adamax": [
                    601,
                    546,
                    731,
                    758
                ],
                "us": [
                    576,
                    578,
                    575
                ],
                "u": [
                    585,
                    578,
                    581
                ],
                "u_t": [
                    585,
                    581,
                    582
                ],
                "K.abs": [
                    581
                ],
                "Nadam": [
                    732,
                    691,
                    628,
                    759
                ],
                "self.m_schedule": [
                    652,
                    653,
                    654,
                    631
                ],
                "self.schedule_decay": [
                    649,
                    690,
                    651,
                    638
                ],
                "schedule_decay": [
                    638
                ],
                "momentum_cache_t": [
                    648,
                    652,
                    653,
                    669
                ],
                "K.cast_to_floatx": [
                    649,
                    651
                ],
                "momentum_cache_t_1": [
                    650,
                    653,
                    670
                ],
                "m_schedule_new": [
                    664,
                    652,
                    654
                ],
                "m_schedule_next": [
                    666,
                    653
                ],
                "g_prime": [
                    664,
                    669
                ],
                "m_t_prime": [
                    666,
                    670
                ],
                "v_t_prime": [
                    675,
                    668
                ],
                "m_t_bar": [
                    675,
                    669
                ],
                "self.optimizer": [
                    706,
                    708,
                    700
                ],
                "optimizer": [
                    736,
                    700
                ],
                "self.optimizer.compute_gradients": [
                    706
                ],
                "opt_update": [
                    708,
                    710
                ],
                "self.optimizer.apply_gradients": [
                    708
                ],
                "sgd": [
                    726
                ],
                "rmsprop": [
                    727
                ],
                "adagrad": [
                    728
                ],
                "adadelta": [
                    729
                ],
                "adam": [
                    730
                ],
                "adamax": [
                    731
                ],
                "nadam": [
                    732
                ],
                "serialize_keras_object": [
                    736
                ],
                "all_classes": [
                    752,
                    763,
                    766
                ],
                "TFOptimizer": [
                    760,
                    791
                ],
                "lower": [
                    763,
                    764
                ],
                "deserialize_keras_object": [
                    765
                ],
                "custom_objects": [
                    767
                ],
                "identifier": [
                    801,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    797,
                    798
                ],
                "tf.train.Optimizer": [
                    790
                ],
                "tf.train": [
                    790
                ],
                "deserialize": [
                    793,
                    796
                ],
                "six.string_types": [
                    794
                ],
                "six": [
                    794
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_4/tests/keras/optimizers_test.py",
                "test_function": "test_tfoptimizer_pass_correct_named_params_to_native_tensorflow_optimizer",
                "test_function_code": "@pytest.mark.skipif((K.backend() != 'tensorflow'),\n                    reason='Requires TensorFlow backend')\ndef test_tfoptimizer_pass_correct_named_params_to_native_tensorflow_optimizer():\n    from keras import constraints\n    from tensorflow import train\n\n    class MyTfOptimizer(train.Optimizer):\n        wrapping_optimizer = train.AdamOptimizer()\n\n        def compute_gradients(self, loss, **kwargs):\n            return super(MyTfOptimizer, self).compute_gradients(loss, **kwargs)\n\n        def apply_gradients(self, grads_and_vars, **kwargs):\n            return self.wrapping_optimizer.apply_gradients(grads_and_vars,\n                                                           **kwargs)\n    my_tf_optimizer = MyTfOptimizer(use_locking=False, name='MyTfOptimizer')\n    optimizer = optimizers.TFOptimizer(my_tf_optimizer)\n    model = Sequential()\n    model.add(Dense(num_classes, input_shape=(3,),\n                    kernel_constraint=constraints.MaxNorm(1)))\n    model.compile(loss='mean_squared_error', optimizer=optimizer)\n    model.fit(np.random.random((5, 3)), np.random.random((5, num_classes)),\n              epochs=1, batch_size=5, verbose=0)",
                "test_error": "TypeError: compute_gradients() takes 2 positional arguments but 3 were given",
                "full_test_error": "@pytest.mark.skipif((K.backend() != 'tensorflow'),\n                        reason='Requires TensorFlow backend')\n    def test_tfoptimizer_pass_correct_named_params_to_native_tensorflow_optimizer():\n        from keras import constraints\n        from tensorflow import train\n    \n        class MyTfOptimizer(train.Optimizer):\n            wrapping_optimizer = train.AdamOptimizer()\n    \n            def compute_gradients(self, loss, **kwargs):\n                return super(MyTfOptimizer, self).compute_gradients(loss, **kwargs)\n    \n            def apply_gradients(self, grads_and_vars, **kwargs):\n                return self.wrapping_optimizer.apply_gradients(grads_and_vars,\n                                                               **kwargs)\n        my_tf_optimizer = MyTfOptimizer(use_locking=False, name='MyTfOptimizer')\n        optimizer = optimizers.TFOptimizer(my_tf_optimizer)\n        model = Sequential()\n        model.add(Dense(num_classes, input_shape=(3,),\n                        kernel_constraint=constraints.MaxNorm(1)))\n        model.compile(loss='mean_squared_error', optimizer=optimizer)\n        model.fit(np.random.random((5, 3)), np.random.random((5, num_classes)),\n>                 epochs=1, batch_size=5, verbose=0)\n\ntests/keras/optimizers_test.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/engine/training.py:1026: in fit\n    self._make_train_function()\nkeras/engine/training.py:509: in _make_train_function\n    loss=self.total_loss)\nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.optimizers.TFOptimizer object at 0x12acebb90>\nloss = <tf.Tensor 'loss/mul:0' shape=() dtype=float32>\nparams = [<tf.Variable 'dense_1/kernel:0' shape=(3, 2) dtype=float32_ref>, <tf.Variable 'dense_1/bias:0' shape=(2,) dtype=float32_ref>]\n\n    @interfaces.legacy_get_updates_support\n    def get_updates(self, loss, params):\n>       grads = self.optimizer.compute_gradients(loss, params)\nE       TypeError: compute_gradients() takes 2 positional arguments but 3 were given\n\nkeras/optimizers.py:706: TypeError",
                "traceback": "keras/engine/training.py:1026: in fit\n    self._make_train_function()\nkeras/engine/training.py:509: in _make_train_function\n    loss=self.total_loss)\nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.optimizers.TFOptimizer object at 0x12acebb90>\nloss = <tf.Tensor 'loss/mul:0' shape=() dtype=float32>\nparams = [<tf.Variable 'dense_1/kernel:0' shape=(3, 2) dtype=float32_ref>, <tf.Variable 'dense_1/bias:0' shape=(2,) dtype=float32_ref>]\n\n    @interfaces.legacy_get_updates_support\n    def get_updates(self, loss, params):\n>       grads = self.optimizer.compute_gradients(loss, params)\nE       TypeError: compute_gradients() takes 2 positional arguments but 3 were given\n\nkeras/optimizers.py:706: TypeError",
                "test_function_decorators": [
                    "pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TensorFlow backend')"
                ]
            }
        ]
    }
}